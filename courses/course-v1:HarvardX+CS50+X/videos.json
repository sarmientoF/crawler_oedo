{
	"video_001": {
		"section": "CS50x 2021",
		"subsection": "Week 0",
		"unit": "Lecture",
		"video_sources": [
			"https://edx-video.net/f84f414a-9f7b-484a-b512-d68ce298c871.m3u8",
			"https://edx-video.net/f84f414a-9f7b-484a-b512-d68ce298c871-mp4_720p.mp4"
		],
		"video_duration": 6113,
		"speech_period": [
			4.491, 44.907, 1.042, 3.12, 2.37, 1.68, 4.23, 0.96, 2.76, 1.815, 3.735,
			3.24, 5.257, 2.333, 3.36, 4.24, 3.38, 2.52, 2.85, 3.01, 3.74, 4.29, 3.54,
			3.36, 3.72, 3.75, 3.72, 3.3, 3.6, 3.6, 3.0, 3.15, 5.65, 1.93, 4.15, 2.82,
			1.29, 4.62, 3.18, 2.01, 3.93, 2.43, 1.35, 4.65, 4.65, 4.11, 3.82, 2.415,
			1.625, 2.46, 2.13, 4.6, 2.27, 2.34, 4.41, 3.1, 5.21, 4.5, 2.55, 4.413,
			2.667, 2.4, 2.61, 2.882, 1.708, 2.64, 2.92, 4.519, 1.861, 2.46, 1.56,
			3.87, 4.14, 0.875, 2.125, 3.15, 2.88, 3.0, 3.3, 4.0, 4.97, 2.04, 3.18,
			2.895, 2.715, 2.61, 2.79, 2.25, 3.9, 3.6, 2.88, 1.92, 2.37, 2.65, 1.25,
			3.39, 3.57, 4.08, 1.29, 4.2, 2.58, 3.55, 2.825, 2.875, 2.42, 3.18, 2.22,
			3.07, 2.82, 2.39, 2.37, 2.16, 2.62, 2.888, 2.292, 3.96, 1.9, 2.208, 1.792,
			3.04, 1.98, 3.39, 3.63, 2.91, 2.91, 3.257, 2.083, 4.37, 2.5, 3.72, 3.51,
			3.0, 4.92, 3.43, 4.19, 2.67, 2.8, 2.54, 2.1, 4.05, 4.2, 2.4, 2.76, 3.06,
			2.46, 1.505, 0.625, 1.333, 0.917, 1.458, 1.452, 1.29, 2.418, 1.542, 1.208,
			3.082, 3.51, 2.34, 2.94, 1.41, 3.54, 3.75, 1.71, 2.14, 1.01, 2.73, 2.85,
			1.44, 3.6, 0.9, 2.58, 3.99, 2.525, 1.375, 1.875, 3.375, 2.13, 2.13, 2.1,
			3.75, 3.15, 1.62, 3.93, 4.53, 2.22, 1.98, 1.882, 2.708, 4.26, 2.7, 3.48,
			1.03, 3.59, 2.1, 3.39, 1.38, 2.04, 3.43, 2.72, 2.543, 2.167, 1.92, 4.41,
			3.06, 2.58, 2.85, 3.57, 3.54, 1.06, 2.48, 1.96, 2.64, 2.04, 4.26, 3.3,
			3.95, 3.44, 2.63, 3.19, 2.96, 3.6, 2.43, 4.35, 3.36, 2.46, 2.16, 2.47,
			1.07, 4.26, 4.56, 2.43, 2.61, 4.95, 3.42, 3.67, 5.31, 2.57, 3.31, 3.35,
			2.163, 1.917, 2.52, 2.83, 2.19, 4.01, 0.69, 2.94, 3.06, 1.08, 4.23, 2.973,
			2.667, 1.8, 2.91, 1.89, 3.51, 1.2, 2.85, 4.56, 2.173, 1.167, 2.99, 1.32,
			4.147, 1.833, 1.59, 1.49, 1.47, 1.95, 2.19, 2.1, 4.41, 2.85, 4.77, 1.5,
			3.195, 1.875, 1.203, 2.667, 4.32, 2.34, 3.12, 2.88, 3.9, 2.52, 2.01, 3.12,
			1.87, 3.44, 1.65, 5.1, 0.85, 3.028, 1.042, 3.23, 1.75, 2.05, 2.81, 1.65,
			2.73, 3.42, 5.25, 2.46, 2.568, 2.542, 3.14, 5.97, 2.25, 3.45, 3.0, 2.62,
			2.0, 2.68, 1.31, 3.03, 2.79, 1.05, 2.1, 2.73, 2.807, 1.333, 2.042, 2.148,
			3.84, 3.42, 4.63, 3.02, 3.72, 4.89, 4.83, 3.6, 3.09, 3.9, 4.02, 3.94,
			3.44, 1.47, 3.84, 4.62, 3.313, 1.167, 1.958, 1.852, 3.59, 2.579, 3.341,
			3.356, 2.333, 3.24, 5.891, 2.0, 3.15, 2.43, 4.18, 3.89, 3.398, 1.792,
			2.43, 4.9, 1.58, 3.36, 1.86, 2.64, 2.82, 3.06, 4.32, 2.54, 2.8, 4.65, 2.7,
			3.81, 4.89, 3.84, 2.79, 1.5, 2.58, 1.56, 1.57, 2.378, 3.042, 1.65, 2.91,
			2.97, 2.73, 7.89, 4.01, 3.13, 2.97, 1.41, 3.75, 4.45, 2.54, 5.775, 1.875,
			1.6, 3.71, 0.99, 4.12, 3.32, 3.15, 1.78, 2.24, 6.06, 3.03, 1.65, 2.86,
			2.82, 3.93, 4.25, 7.53, 6.67, 2.25, 2.59, 0.73, 2.42, 2.76, 6.9, 1.0,
			2.208, 3.932, 2.52, 3.48, 1.45, 0.53, 2.22, 2.64, 1.86, 2.1, 4.11, 2.67,
			3.45, 1.65, 3.66, 3.63, 1.89, 2.28, 3.9, 0.85, 3.8, 2.76, 1.92, 2.19,
			3.06, 6.32, 3.36, 2.227, 0.833, 3.437, 2.083, 3.93, 3.683, 2.917, 3.57,
			4.05, 2.61, 3.06, 1.56, 4.42, 2.31, 1.91, 3.3, 2.28, 4.2, 2.92, 2.75,
			4.06, 3.32, 1.75, 3.65, 3.81, 3.84, 4.23, 4.23, 2.85, 4.41, 3.123, 1.917,
			3.36, 3.21, 3.9, 3.93, 4.018, 1.292, 1.77, 6.09, 3.21, 2.1, 2.97, 5.01,
			1.18, 1.82, 3.3, 1.126, 6.404, 4.77, 1.47, 3.78, 5.43, 2.31, 2.62, 2.66,
			3.15, 2.04, 3.69, 2.31, 3.2, 4.96, 2.04, 2.01, 2.643, 2.667, 2.042, 3.958,
			3.84, 2.46, 3.16, 2.57, 1.838, 1.792, 4.015, 1.375, 2.0, 1.38, 3.89, 3.46,
			2.75, 0.958, 2.912, 1.08, 1.8, 3.36, 2.55, 3.24, 3.18, 3.55, 3.02, 2.52,
			3.54, 3.45, 3.99, 1.982, 1.708, 4.23, 2.64, 3.0, 3.22, 4.52, 0.63, 2.46,
			1.5, 1.5, 3.03, 3.21, 3.3, 3.34, 2.69, 4.71, 4.83, 3.75, 1.64, 1.0, 3.51,
			2.61, 1.8, 3.51, 5.55, 2.34, 3.66, 3.54, 3.09, 3.45, 1.21, 2.84, 6.3,
			0.63, 2.6, 1.975, 3.255, 6.48, 7.47, 0.54, 2.19, 3.58, 4.73, 2.82, 2.7,
			3.75, 4.15, 4.19, 0.51, 1.375, 3.305, 2.26, 3.56, 3.37, 1.91, 3.75, 3.34,
			3.86, 3.45, 2.31, 4.74, 3.188, 2.792, 2.6, 3.0, 4.74, 2.73, 4.05, 2.835,
			5.475, 1.02, 1.26, 3.61, 2.0, 2.132, 0.958, 2.97, 1.86, 2.73, 1.583,
			4.087, 2.935, 2.375, 2.34, 2.08, 3.35, 4.68, 0.63, 2.49, 3.72, 3.66, 3.87,
			2.43, 4.38, 2.46, 3.6, 1.23, 3.78, 2.31, 3.3, 5.85, 4.24, 6.21, 7.02,
			3.67, 2.57, 2.13, 4.3, 1.48, 1.45, 1.33, 2.82, 4.43, 4.23, 3.24, 4.69,
			4.1, 1.945, 2.375, 3.27, 4.102, 1.958, 1.64, 0.5, 1.82, 1.782, 2.208,
			1.86, 1.927, 3.083, 2.172, 2.208, 1.35, 2.94, 3.99, 2.04, 4.62, 3.0, 1.71,
			1.93, 3.92, 1.65, 4.97, 2.13, 2.879, 1.613, 1.208, 0.75, 2.46, 3.657,
			2.083, 3.77, 3.48, 2.189, 3.391, 2.19, 3.34, 3.2, 2.19, 4.86, 3.36, 2.25,
			1.74, 3.04, 1.71, 4.85, 1.62, 1.38, 3.7, 2.63, 4.38, 1.14, 2.25, 2.88,
			2.37, 2.52, 3.54, 1.14, 3.36, 4.11, 4.86, 2.46, 2.68, 5.3, 1.45, 4.52,
			2.85, 3.42, 3.66, 4.0, 3.26, 2.58, 4.74, 1.65, 2.7, 3.39, 2.568, 1.542,
			3.27, 0.99, 4.02, 1.35, 2.26, 4.07, 2.49, 2.437, 2.333, 3.6, 1.42, 3.53,
			2.26, 4.38, 4.13, 2.58, 2.79, 3.33, 3.24, 5.62, 4.25, 3.42, 3.4, 2.75,
			2.16, 3.54, 3.24, 4.29, 3.21, 2.91, 1.8, 4.32, 4.32, 2.28, 3.75, 5.04,
			2.88, 5.4, 2.6, 2.4, 4.08, 2.13, 3.562, 1.958, 1.92, 2.67, 6.232, 0.958,
			4.14, 1.89, 0.49, 2.46, 2.39, 3.51, 2.04, 4.23, 4.26, 3.8, 1.93, 2.49,
			2.77, 2.75, 2.82, 3.87, 3.81, 3.46, 3.26, 2.54, 1.75, 3.0, 2.13, 2.5,
			3.967, 2.083, 1.98, 2.49, 2.12, 2.083, 2.187, 0.75, 4.02, 3.15, 3.36,
			2.76, 3.78, 3.587, 2.083, 4.02, 2.08, 2.78, 1.53, 5.76, 4.35, 4.89, 2.61,
			3.18, 5.1, 3.93, 2.112, 2.208, 3.04, 4.58, 3.78, 2.61, 4.17, 4.99, 3.86,
			3.12, 2.49, 1.68, 4.15, 1.76, 4.62, 3.72, 2.82, 3.0, 2.71, 2.45, 3.03,
			2.55, 2.16, 2.1, 3.42, 2.4, 2.08, 4.25, 2.97, 4.62, 0.55, 1.71, 3.02,
			2.027, 2.833, 2.76, 2.64, 1.53, 2.61, 3.58, 0.5, 3.61, 0.78, 1.96, 1.0,
			2.792, 4.468, 1.417, 1.583, 3.06, 2.37, 1.27, 3.68, 2.05, 2.06, 3.25,
			2.37, 2.73, 4.23, 1.33, 3.44, 2.94, 3.67, 0.75, 4.2, 2.14, 5.66, 2.19,
			3.72, 1.98, 2.61, 3.85, 0.65, 4.95, 2.13, 2.61, 3.42, 3.45, 2.28, 0.75,
			2.97, 0.995, 1.375, 3.78, 3.6, 1.47, 3.06, 1.32, 2.07, 3.84, 0.75, 1.77,
			4.56, 1.17, 2.573, 2.167, 1.75, 0.64, 1.75, 2.1, 3.505, 2.375, 1.23, 0.45,
			1.51, 2.875, 1.955, 3.89, 1.35, 2.19, 2.1, 2.653, 3.167, 2.88, 3.45, 2.91,
			2.56, 2.87, 2.22, 2.16, 1.125, 1.917, 2.478, 3.69, 1.14, 2.73, 1.77, 1.71,
			1.59, 3.75, 3.15, 1.86, 1.17, 3.81, 7.56, 3.51, 1.52, 1.0, 0.625, 3.185,
			2.01, 2.4, 0.87, 2.52, 3.873, 1.167, 3.33, 3.15, 3.36, 2.94, 3.34, 2.15,
			3.63, 2.1, 1.847, 1.583, 3.89, 1.92, 1.62, 3.81, 4.17, 3.99, 3.33, 2.55,
			1.92, 3.18, 5.13, 6.15, 3.73, 2.81, 6.03, 2.795, 2.125, 3.18, 3.09, 2.01,
			1.38, 2.52, 3.42, 4.23, 3.28, 3.71, 5.46, 4.62, 4.32, 4.59, 2.01, 1.06,
			2.37, 3.16, 0.5, 2.85, 2.09, 3.66, 3.73, 2.81, 3.57, 3.3, 2.85, 1.11,
			3.06, 1.98, 2.85, 1.56, 2.94, 2.4, 2.52, 1.6, 2.96, 3.48, 1.38, 1.35,
			2.29, 0.5, 2.417, 1.283, 2.18, 3.36, 2.76, 2.013, 1.917, 1.44, 2.94, 4.36,
			2.61, 2.21, 2.37, 2.0, 2.59, 2.22, 2.49, 3.78, 2.473, 3.167, 3.24, 3.96,
			1.56, 1.738, 2.792, 2.22, 3.3, 3.6, 2.13, 2.31, 0.8, 1.15, 3.0, 2.13,
			3.12, 4.24, 3.71, 0.99, 2.655, 1.875, 4.08, 4.53, 2.787, 2.583, 1.92,
			4.26, 3.45, 4.89, 1.08, 3.383, 2.167, 1.38, 3.218, 1.792, 1.945, 2.375,
			3.24, 3.3, 3.18, 1.32, 2.97, 3.24, 3.81, 6.3, 4.38, 3.52, 4.8, 2.31, 2.39,
			2.88, 1.8, 3.24, 1.17, 3.02, 2.5, 1.83, 2.76, 4.14, 2.588, 1.792, 3.45,
			1.74, 1.11, 2.55, 1.77, 1.2, 2.22, 1.74, 3.69, 1.86, 0.99, 2.34, 3.18,
			2.13, 1.625, 3.265, 2.07, 2.94, 1.253, 2.167, 4.56, 0.75, 1.708, 2.852,
			1.74, 0.6, 2.665, 1.625, 2.978, 1.042, 1.667, 2.263, 2.94, 3.058, 2.042,
			2.61, 2.55, 1.26, 2.79, 4.87, 2.66, 2.04, 4.39, 4.22, 3.3, 1.62, 2.22,
			3.93, 2.41, 0.65, 3.7, 2.975, 1.875, 3.42, 1.77, 1.72, 2.21, 2.19, 3.15,
			3.01, 2.33, 2.82, 3.6, 1.84, 2.69, 2.57, 2.69, 3.905, 2.125, 3.04, 2.84,
			2.07, 1.41, 3.58, 2.24, 3.0, 3.12, 5.55, 2.29, 1.28, 1.32, 1.14, 0.96,
			2.59, 4.58, 2.848, 2.042, 1.74, 3.0, 3.742, 1.958, 2.43, 5.01, 4.26, 3.51,
			3.72, 4.74, 2.91, 3.21, 2.46, 2.82, 2.46, 3.51, 2.07, 3.93, 4.12, 4.92,
			6.08, 2.745, 2.625, 0.583, 2.507, 1.32, 1.92, 3.6, 3.57, 4.8, 0.57, 2.1,
			1.625, 2.995, 2.16, 2.082, 0.958, 1.31, 3.03, 2.71, 2.328, 2.792, 4.53,
			3.6, 2.838, 3.042, 2.83, 2.033, 1.917, 2.55, 4.47, 3.27, 2.01, 2.4, 1.02,
			4.2, 5.01, 2.52, 2.71, 0.875, 2.805, 3.54, 4.38, 2.55, 1.53, 2.167, 3.173,
			1.47, 3.96, 3.9, 2.715, 2.625, 2.79, 5.34, 2.34, 2.91, 3.88, 3.05, 6.0,
			2.8, 3.47, 3.24, 2.31, 2.85, 3.87, 1.68, 1.15, 2.36, 2.338, 2.042, 3.12,
			2.88, 4.05, 2.94, 3.3, 4.17, 3.24, 5.37, 2.82, 3.54, 2.35, 2.332, 2.458,
			1.625, 4.735, 0.72, 1.447, 3.083, 2.23, 3.26, 2.07, 2.4, 1.843, 2.417,
			2.012, 1.958, 2.87, 1.48, 1.92, 1.94, 3.54, 1.68, 2.4, 2.63, 2.75, 1.8,
			3.5, 5.1, 1.98, 2.16, 3.06, 3.15, 2.88, 4.2, 2.22, 2.91, 1.69, 1.76, 3.75,
			3.93, 2.08, 1.5, 1.47, 3.74, 2.79, 2.01, 3.49, 4.36, 3.25, 3.0, 0.96,
			1.875, 1.905, 3.15, 1.95, 2.61, 1.49, 0.803, 1.417, 0.792, 2.668, 1.65,
			1.92, 4.14, 2.25, 3.0, 4.2, 1.305, 2.845, 1.83, 3.097, 0.833, 1.875,
			3.405, 1.83, 2.7, 4.53, 3.9, 2.19, 2.73, 1.84, 2.66, 1.09, 1.488, 2.792,
			4.11, 1.205, 2.125, 2.625, 1.275, 0.75, 1.167, 5.793, 2.232, 1.458, 1.32,
			2.875, 3.545, 3.81, 2.862, 0.708, 2.55, 3.48, 1.56, 1.8, 2.25, 2.56, 3.35,
			4.11, 2.8, 3.53, 3.4, 2.51, 3.0, 2.64, 5.46, 1.889, 3.061, 1.769, 2.611,
			4.29, 3.87, 2.29, 2.96, 3.21, 2.7, 3.27, 2.759, 3.721, 2.5, 2.42, 3.93,
			1.83, 3.33, 4.439, 2.131, 3.9, 3.45, 4.349, 3.181, 3.42, 2.399, 2.761,
			4.29, 3.76, 4.4, 3.6, 0.87, 3.0, 3.99, 2.16, 1.958, 2.212, 1.38, 2.79,
			1.93, 2.57, 2.07, 2.16, 3.6, 4.17, 2.037, 1.333, 2.21, 2.94, 2.64, 1.71,
			1.96, 2.78, 2.16, 0.98, 1.75, 2.0, 2.03, 1.79, 2.34, 1.8, 1.38, 2.083,
			2.267, 1.62, 1.95, 1.797, 1.583, 0.36, 1.08, 4.11, 1.8, 1.962, 1.458,
			2.31, 1.5, 2.82, 1.65, 1.38, 1.35, 3.63, 3.51, 2.1, 2.55, 1.96, 2.75,
			1.792, 4.838, 0.63, 2.13, 1.53, 3.18, 0.58, 1.458, 1.312, 1.26, 2.517,
			1.163, 0.797, 2.458, 0.5, 0.575, 0.5, 1.5, 1.19, 0.76, 1.42, 2.857, 0.833,
			3.17, 2.478, 2.292, 2.08, 0.5, 1.65, 4.71, 2.1, 1.05, 3.3, 2.4, 1.94,
			1.18, 1.2, 1.49, 1.31, 2.75, 3.99, 3.12, 4.2, 2.528, 1.792, 4.38, 2.22,
			2.125, 2.915, 1.953, 2.667, 1.71, 3.78, 3.27, 1.59, 1.02, 1.89, 2.1, 2.01,
			3.6, 2.92, 1.868, 3.752, 0.893, 2.417, 2.48, 1.98, 1.59, 3.69, 2.34, 2.16,
			4.11, 3.06, 1.537, 1.833, 1.01, 1.68, 2.4, 3.39, 1.44, 3.27, 1.75, 2.28,
			1.73, 1.59, 2.49, 2.725, 2.625, 1.64, 3.728, 1.292, 1.34, 3.78, 2.85,
			1.23, 2.86, 2.03, 3.3, 2.4, 2.43, 3.367, 0.833, 2.76, 1.91, 2.118, 1.792,
			4.26, 4.7, 1.0, 0.96, 1.95, 2.73, 0.97, 2.27, 1.62, 3.45, 2.94, 2.34,
			3.42, 1.595, 0.875, 2.03, 2.61, 2.7, 3.81, 3.93, 3.72, 2.85, 5.46, 4.95,
			4.38, 4.377, 2.583, 2.79, 2.79, 3.43, 2.87, 2.61, 2.37, 0.997, 1.583,
			1.17, 2.37, 2.76, 2.01, 1.86, 4.62, 4.35, 3.92, 2.87, 2.49, 3.5, 3.1, 0.5,
			2.77, 2.42, 1.53, 1.68, 1.89, 2.962, 1.208, 1.25, 3.51, 4.93, 0.87, 1.47,
			1.25, 0.91, 2.37, 1.41, 7.24, 1.11, 0.57, 1.77, 2.13, 2.22, 0.78, 1.47,
			3.36, 3.18, 0.65, 1.75, 2.46, 2.742, 1.458, 2.94, 2.56, 3.71, 2.37, 1.93,
			1.76, 3.643, 1.667, 3.12, 2.01, 2.82, 3.51, 3.12, 1.583, 3.097, 1.83,
			1.77, 2.26, 4.34, 2.04, 3.42, 2.26, 4.1, 1.385, 1.875, 3.65, 4.1, 3.27,
			2.82, 2.91, 2.348, 2.542, 2.13, 2.79, 2.49, 2.79, 2.41, 2.0, 2.19, 1.8,
			3.517, 1.583, 2.837, 2.833, 1.92, 1.795, 3.125, 1.02, 1.552, 1.208, 2.8,
			5.82, 2.45, 2.73, 5.22, 1.65, 2.85, 2.23, 2.63, 5.49, 3.04, 2.257, 2.333,
			1.16, 1.5, 1.33, 1.79, 2.97, 3.737, 0.583, 3.78, 3.63, 3.78, 2.13, 3.21,
			0.75, 3.72, 2.49, 3.43, 2.72, 3.45, 3.48, 4.2, 3.42, 3.04, 2.33, 1.92,
			2.61, 3.15, 2.55, 3.24, 2.04, 1.602, 2.208, 0.84, 3.75, 3.15, 1.63, 0.5,
			1.95, 1.0, 0.5, 2.792, 2.188, 1.14, 2.24, 1.952, 1.708, 2.88, 3.79, 4.14,
			1.32, 1.29, 0.51, 0.27, 2.833, 2.962, 3.125, 1.76, 2.67, 1.71, 3.0, 4.26,
			3.63, 0.75, 3.57, 3.24, 2.01, 4.71, 1.62, 3.48, 1.47, 3.99, 2.0, 2.5, 1.2,
			0.63, 2.08, 2.72, 1.38, 0.92, 1.84, 2.97, 2.7, 2.07, 2.61, 2.28, 3.91,
			4.07, 3.75, 3.45, 2.952, 1.708, 0.9, 2.64, 1.43, 0.5, 3.18, 4.38, 2.07,
			1.35, 3.39, 3.6, 5.26, 0.89, 1.8, 4.09, 4.01, 4.71, 1.89, 3.42, 3.15,
			3.93, 3.58, 3.68, 2.03, 1.51, 1.545, 1.215, 3.62, 2.22, 4.017, 1.083,
			2.16, 2.58, 2.55, 4.05, 3.12, 3.12, 2.43, 1.8, 1.74, 1.98, 1.8, 3.24, 1.8,
			2.67, 4.26, 0.708, 2.292, 1.86, 3.4, 2.015, 2.125, 1.205, 1.185, 0.73,
			1.67, 0.54, 3.898, 2.042, 2.43, 0.75, 1.68, 2.1, 1.86, 3.06, 1.77, 2.91,
			2.67, 2.71, 3.05, 2.17, 2.06, 2.402, 1.708, 3.66, 1.8, 1.41, 3.39, 3.03,
			3.37, 1.97, 2.13, 1.89, 2.197, 1.583, 2.8, 2.69, 6.39, 3.6, 5.61, 2.25,
			2.7, 2.19, 2.1, 3.69, 3.9, 2.58, 3.24, 0.54, 2.22, 2.28, 3.63, 3.22, 3.84,
			1.25, 2.43, 1.997, 0.583, 0.84, 2.47, 3.14, 4.81, 2.49, 2.79, 2.3, 4.62,
			1.48, 4.49, 2.22, 2.11, 4.4, 4.47, 4.83, 2.16, 3.36, 2.85, 3.42, 3.15,
			1.93, 4.34, 2.76, 3.12, 4.23, 2.35, 0.5, 2.8, 0.89, 3.3, 1.59, 2.64, 2.07,
			2.28, 2.7, 2.91, 2.55, 2.16, 3.69, 5.52, 5.37, 4.39, 3.08, 0.75, 3.99,
			5.1, 3.75, 0.93, 3.31, 3.27, 1.82, 2.01, 3.4, 3.32, 2.43, 1.54, 2.875,
			1.195, 2.76, 3.27, 4.14, 3.27, 1.71, 1.84, 1.85, 3.34, 3.83, 1.08, 1.77,
			3.15, 0.992, 1.708, 2.94, 1.46, 0.5, 1.65, 0.5, 1.424, 0.946, 2.91, 1.41,
			3.87, 3.75, 2.58, 1.66, 2.167, 2.383, 1.33, 2.96, 4.98, 2.23, 2.37, 4.11,
			3.41, 2.67, 3.15, 3.16, 4.07, 4.05, 3.18, 3.79, 3.2, 3.87, 1.77, 1.475,
			1.82, 3.385, 2.88, 3.27, 2.49, 3.48, 2.22, 4.53, 4.32, 2.483, 2.167,
			0.625, 3.695, 2.63, 1.0, 0.57, 1.38, 1.32, 0.37, 1.417, 1.573, 0.99, 1.98,
			1.74, 0.78, 3.15, 0.99, 1.2, 0.99, 0.69, 0.787, 1.583, 2.1, 1.83, 1.41,
			1.59, 2.1, 2.04, 1.5, 3.69, 1.87, 0.74, 0.75, 1.08, 3.248, 1.464, 3.418,
			2.1, 1.38, 3.03, 1.74, 1.35, 2.61, 2.833, 3.417, 3.2, 2.64, 4.56, 2.64,
			1.17, 2.118, 2.292, 1.79, 0.64, 3.12, 2.8, 3.41, 3.54, 3.21, 2.94, 2.7,
			2.213, 2.917, 2.75, 2.44, 1.32, 2.34, 2.01, 2.85, 3.275, 1.375, 2.28,
			1.71, 4.32, 2.37, 2.44, 3.41, 2.91, 2.85, 3.15, 1.81, 4.223, 1.167, 3.51,
			3.36, 2.7, 2.1, 3.33, 5.25, 1.59, 3.16, 0.5, 3.39, 1.59, 3.75, 3.102,
			2.958, 2.34, 2.55, 2.16, 3.48, 3.84, 3.24, 1.98, 1.96, 3.17, 5.824, 2.982,
			24.85, 0.991, 0.5, 1.491, 0.994, 2.485, 0.994, 5.467, 0.994, 5.464, 0.5,
			0.994, 2.21, 1.47, 2.94, 7.35, 7.84, 6.46, 4.55, 54.11
		],
		"transcript_en": [
			"[MUSIC PLAYING]",
			"",
			"DAVID J MALAN: All right.",
			"This is CS50, Harvard University's introduction",
			"to the intellectual enterprises of computer science",
			"and the art of programming.",
			"And ordinarily we would all be here on campus in this beautiful Sanders",
			"Theater together.",
			"This, of course, is a little bit different this year,",
			"for more than one reason.",
			"But we're here instead in the Loeb Drama Center at Harvard University.",
			"Thanks to our friends in collaboration with the American Repertory Theater,",
			"we have this new space, including even such amenities as a prop shop in back,",
			"where we've been working with an amazingly talented team",
			"over the course of the summer to prepare for this semester and CS50.",
			"And so I daresay we'll have some new and improved demonstrations along the way.",
			"So our thanks to our hosts, the American Repertory Theater.",
			"Now we wanted to evoke memories, at least,",
			"or some imagery of the campus itself, particularly",
			"for the many of you who could not be here in person this semester.",
			"And so we went into the Harvard Archives, where among their collections",
			"was this watercolor painting, painted by a Harvard graduate student",
			"over 200 years ago in the year 1794.",
			"Jonathan Fisher, who sat in what is now Harvard Square,",
			"looking in on some of the earliest buildings of Harvard's campus.",
			"And thanks to technology, we took what is a relatively small watercolor",
			"that this graduate student painted some 200 years ago,",
			"and now adorns the stage here in the Loeb Drama Center.",
			"So if unfamiliar, we have Holden Chapel here at left,",
			"Hollis Hall to its right, which is one of the undergraduate dormitories",
			"in Harvard Yard, Harvard Hall, which is one of the classroom",
			"buildings on campus, and then Massachusetts Hall,",
			"where both first years and Harvard's president live and work respectively.",
			"So welcome, then, to CS50.",
			"And I can say that not quite as long ago,",
			"but, nonetheless, feels rather long ago, some 20 years ago,",
			"did I take the same class.",
			"But as you know, I myself had some trepidation",
			"when it came to studying CS50, when it came to studying computer science.",
			"Because it was a very unfamiliar field.",
			"I had followed a path when I got to college of sticking within my comfort",
			"zone, studying government early on, thinking I would major",
			"or concentrate in government.",
			"And it wasn't until I got up the nerve to shop, that is, sit in",
			"on this class CS50, that I realized that homework can actually be fun.",
			"And I found that computer science and CS50 is not about programming per se,",
			"even though that's how many of us perceive it in high school,",
			"whether it's us or our classmates taking the class.",
			"But it really is about problem solving.",
			"And as such, it's so very applicable not only",
			"to computer science and the engineering fields,",
			"but really to the arts, humanities, social sciences, sciences, and beyond.",
			"And so if you're feeling a little uncomfortable",
			"with the idea of taking a class like CS50,",
			"know that almost every year, nearly two thirds of the students who take CS50",
			"have never taken a computer science course before.",
			"So if you look up, down, left, right, right now, odds are more than many",
			"of the classmates joining you here today are in a very similar position.",
			"You're indeed in very good company.",
			"And what's ultimately important in CS50 too, we emphasize, as in the syllabus,",
			"that what ultimately matters in this course is not so much where",
			"you end up relative to your classmates, but where you end",
			"up relative to yourself when you began.",
			"Indeed, taking into account where you currently are, perhaps",
			"with no prior background, and considering",
			"where you will be in just three or so months",
			"is ultimately meant to be the measure of your own success.",
			"And so toward that end, we'll start off this class programming",
			"a little something from yesteryear.",
			"An image here of Super Mario Brothers and the pyramid",
			"that the character has to ascend.",
			"We'll recreate a portion of this game, albeit using text--",
			"otherwise known as ASCII art-- but we'll do that in just the course's second",
			"or so week.",
			"So this will be among the first programs you write.",
			"And then fast forward just several problem sets or programming",
			"assignments later, or several weeks later, too,",
			"and you'll be building what we call CS50 Finance, a web",
			"application of your very own that runs on the internet,",
			"pulling down nearly real-time stock quotes from a third party service,",
			"allowing your own users to log in and register to buy and sell stocks,",
			"so to speak, using virtual currency.",
			"So over the course of the class's several months,",
			"will you go, truly, from building a pyramid in Mario",
			"to building your very own web application and more,",
			"followed by the course's capstone experience, which",
			"will be your very own final project.",
			"But what exactly is computer science?",
			"What we thought we would do in this week zero, the very first week of the class,",
			"is consider exactly what it means to solve problems.",
			"And let me propose that this is computer science.",
			"This is problem solving.",
			"You have some input, which is the problem you care about",
			"that you want to solve, and you care about the solution to that problem,",
			"which is the so-called output.",
			"And in between that input and output is this black box",
			"of sorts, inside of which is the magic that happens,",
			"the magic that you'll eventually be able to harness and compel computers",
			"to solve problems for you.",
			"Inside of that black box, ultimately, is going to be the code that you write.",
			"But for us to begin doing that, we all kind of",
			"need to agree on how we're going to represent these inputs and outputs.",
			"We all kind of have to speak a common language, so to speak.",
			"And so we need to agree how these inputs are going to be represented.",
			"So how might we typically represent information?",
			"Well, maybe the simplest thing to do at the very first class, whether we're",
			"online or in person, is to take attendance",
			"or to count the number of people in the room.",
			"And so you might do this old school style on your hands",
			"so as to represent every person in a room",
			"with just a finger raised on your hands.",
			"So how we might represent information boils down",
			"to very simple digits on your hand.",
			"Of course, you can't count very high with just this hand.",
			"And there's actually a fancy word for what we're doing,",
			"old school here, and that's unary notation-- uno, implying one,",
			"or one finger being up or down.",
			"And so you can count, it would seem, as high as five.",
			"And of course, if I bring in a second hand,",
			"I can go as high as 10, and then things get a little more difficult.",
			"But it's a system for representing information",
			"and it's fairly universal, certainly when we're all quite young.",
			"But you and I tend to use a more useful system.",
			"Not just digits on the hand, but other sorts of digits.",
			"Namely, the decimal digits that you and I know.",
			"So the numbers that are otherwise more technically called base 10--",
			"and that's just a fancy way of describing the fact",
			"that there's 10 digits that you and I as humans really tend to use typically.",
			"Those digits, of course, are zero through nine,",
			"and using these several digits, we can pose numbers like zero",
			"through nine, but also 10 and 11 and 12, and as high up",
			"as we want to go by using multiple digits still.",
			"But computers don't really speak the same language as us.",
			"They're, in some sense, much simpler than we humans,",
			"even though they seem so complicated or so sophisticated and certainly so fast.",
			"At the end of the day, these are all human-made devices,",
			"and they're relatively simple at their core.",
			"In fact, even if you don't quite know what you're saying,",
			"but you've at least heard this to be the case,",
			"what language do you understand computers to speak?",
			"What language do computers speak, if not the system that you and I use",
			"of zeros through nines or decimal?",
			"Brian, could we see who might answer this?",
			"What system do computers use, so far as you've heard,",
			"whether or not you've taken a CS class before?",
			"Keith, can we go to you first?",
			"AUDIENCE: Yeah.",
			"The computers use binary.",
			"DAVID J MALAN: Binary.",
			"And can you elaborate a little bit?",
			"What do you mean by binary?",
			"AUDIENCE: It's zeros and ones.",
			"So, like, while we use zero through nine for base 10,",
			"they use zero through one for base 2.",
			"DAVID J MALAN: Yeah, exactly.",
			"So computers use the so-called binary system, bi implying two.",
			"And they, indeed, only use, as Keith notes, zero and one, two digits.",
			"So on the one hand, this is actually pretty encouraging,",
			"because, wow, this is actually a pretty simple system if we're only",
			"using two of these digits.",
			"But, of course, if you only have two digits,",
			"how are we going to represent the number two or three or four",
			"or any much larger number?",
			"It would almost seem like a step backwards.",
			"But it isn't actually.",
			"And it turns out that this so-called system, or base 2--",
			"two because there's two digits in the vocabulary, otherwise known,",
			"as Keith says, as binary--",
			"uses just zeros and ones, and it turns out there's other nomenclature here",
			"we can toss out.",
			"These zeros and ones are otherwise known as bits.",
			"And bits actually derive from just two words, binary digits.",
			"Binary, implying two possibilities, digits,",
			"just being symbols on the screen.",
			"So binary digits, or otherwise known as bits.",
			"And computers speak binary using these things called bits.",
			"But what does that mean and why is it the case?",
			"Like, why didn't they invent computers decades ago",
			"that just use zero through nine, rather than",
			"come up with a whole new system for us to think about, let alone talk about?",
			"Well, at the end of the day, computers are using what as their input?",
			"Really just electricity.",
			"Probably the only thing all of us do every day or every couple of days",
			"with our laptop or desktop or phone is either make sure it's still plugged in,",
			"or to plug it in so as to charge it.",
			"So the only physical input to our devices",
			"these days is electricity in some form.",
			"And we don't have to get into the nuances of what electricity is,",
			"but I think it's about electrons flowing into the device so as to charge it.",
			"So it suffices for our purposes to know that there's",
			"some physical input to the device, these computers and phones that we use.",
			"But that's it.",
			"And so if we harness this electricity, maybe we",
			"can start to represent information with it.",
			"For instance, here is a light bulb, this old ghost light in the theater here",
			"that's currently off.",
			"But it has the ability to turn on.",
			"We just need to plug it in or throw on a switch.",
			"And if that's the case, what's really quite",
			"compelling about the metaphor of using lights",
			"is that right now, this light bulb is currently off,",
			"but as soon as I allow electricity to flow",
			"as by plugging it in or maybe throwing a switch, now it's, of course, on.",
			"And if I unplug it or throw the switch again, it's off.",
			"Or if I plug it back in, it's on.",
			"And the implication of this very simple idea",
			"is that we can take a physical device, like a single light bulb,",
			"and by plugging it in or unplugging it, we can represent information.",
			"What did I just do?",
			"I represented the light bulb being off or on,",
			"but we can just call off and on something else.",
			"We can call them zeros and ones.",
			"And so this really is the germ of an idea",
			"that gave us computers, and with it, their use of the binary system.",
			"If, at the end of the day, all they have is physical input as electricity,",
			"well, let's just use that to harness and keep track of information.",
			"Let's store a little bit of electricity when we want to represent a one,",
			"and let's let go of that electricity in some sense",
			"when we want to represent a zero instead.",
			"And so because the input to computers is so simple,",
			"thus gives us the zeros and ones that we now use.",
			"But we seem to have created a problem for ourselves.",
			"If we only have one light bulb or one switch, if it's off,",
			"it might be zero, if it's on, it might be a one,",
			"but how do I count higher than one?",
			"That problem still fundamentally remains.",
			"Well, I could, of course, use more light bulbs.",
			"So let me ask this.",
			"If we were to use three light bulbs, how high could we count?",
			"So with one light bulb, we can count from zero to one, two possibilities.",
			"But with three light bulbs, how high could we count?",
			"Let me go ahead and ask this question here on the screen.",
			"In just a moment you'll see on your side this particular question via which",
			"you can respond on your device.",
			"How high can you count with three light bulbs?",
			"So instead of one, I give you three, each of which can be on or off.",
			"How high can we, perhaps, count?",
			"So you'll see on the screen here the answers coming in.",
			"We have a lot of folks thinking, 60-plus percent that it's",
			"eight is the highest you can count.",
			"A lot of you think it's seven, and some of you",
			"also think it might be three or two.",
			"So that's actually an interesting range of answers.",
			"And let's see what might actually be the case.",
			"Well, let me cut back over to three actual light bulbs here, all of which",
			"are off.",
			"And most naively, I think, if we were to turn these light bulbs on,",
			"if they currently represent zero, obviously, I could turn one on",
			"and we could call it one.",
			"Then I could turn the second one on and call it two, turn on the third one,",
			"and now with all three on, we could say now we're representing three.",
			"But we're not really being clever enough just yet, if we're only",
			"counting as high as three.",
			"Because I'm just turning them on, in this story, left to right.",
			"But what if we were a little more clever?",
			"Maybe we turn them on right to left, or maybe we kind of permuted them",
			"in different directions?",
			"That is, we took into account not just how many bulbs are on",
			"or how many fingers are in the air, but rather the pattern of on",
			"and off light bulbs that we've created.",
			"So let's just count this up.",
			"So let me somewhat systematically turn some of these bulbs on here,",
			"albeit virtually.",
			"Here might be one, here might be two, here might be three.",
			"But then we're kind of done with that story.",
			"So how might we do it a little better?",
			"Well, let's start again at zero.",
			"Here might be one.",
			"Why don't we call this two?",
			"Why don't we call this three?",
			"Why don't we call this four?",
			"Call this five, this six, and this seven.",
			"Now, it's fine if you didn't quite see what pattern I was following,",
			"but take my word for it that that was a unique pattern of light bulbs,",
			"eight total times.",
			"I started at off, off, off, and I ended at on, on, on.",
			"But along the way, there were, indeed, eight.",
			"But how high can I count?",
			"Well, it kind of depends on what number you start counting from,",
			"and just as we thus far have been doing, computer scientists do all the time.",
			"Computer scientists and, in turn, computer programs,",
			"typically start counting from zero, just because it makes sense",
			"because when everything is off, you might as well call that zero.",
			"So if we start counting at zero, and we have eight possible patterns",
			"that we just saw pictorially, well, that would",
			"allow us to count as high as seven.",
			"So from zero to seven, so seven is the highest",
			"we can count with three light bulbs.",
			"So those of you who propose that seven was the answer, 36% of you",
			"were indeed correct.",
			"57% of you who said eight are correct if you assume we start counting at one,",
			"and that's fine.",
			"But at least in the computing world now, we'll generally, by convention,",
			"start counting from zero.",
			"But you are correct to say that there's eight such possibilities.",
			"All right, well, this is all fine and good",
			"to represent things with patterns of light bulbs.",
			"But how do we actually now get to the zeros and ones",
			"that a computer is actually using?",
			"Because what's inside of a computer, at the end of the day,",
			"are not light bulbs but tiny, tiny little switches,",
			"millions of little switches that can either be on, or one, or off, or zero.",
			"Those switches happen to be called transistors.",
			"And these days computers do have millions",
			"of these things that can be on and off in different patterns.",
			"So if you have the ability to turn on and off all of these switches, well,",
			"what can we all agree on representation when it comes to using those switches?",
			"How will we represent information with them?",
			"Well, wonderfully, we don't really need to think very hard",
			"or go past our very comfortable roots as kids.",
			"If we consider for a moment not just zero and one,",
			"but the whole decimal system, zero through nine,",
			"that you and I all started our day with today.",
			"How does that system work?",
			"Well, here on the screen is 123.",
			"So yes, you're probably thinking that's one hundred twenty three,",
			"but not quite.",
			"All I've shown on the screen is a pattern",
			"of symbols, 123, or three digits.",
			"And all of us probably are instinctively just saying, obviously,",
			"it's a hundred and twenty three.",
			"But it's probably been years since you considered",
			"why it is one hundred twenty three.",
			"Well, let's consider what each of these digits or symbols represents.",
			"If you're like me, you grew up learning that the rightmost digit is the ones",
			"place, the middle is the tens place, the left one is the hundreds place.",
			"And so how do we get from these three symbols or digits,",
			"123, to the mathematical idea we know as one hundred twenty three?",
			"Well, all of us instantaneously, these days, did 100 times 1 plus 10 times",
			"2 plus 1 times 3, which, of course, is just 100 plus 20 plus 3,",
			"or the mathematical value we all know as one hundred twenty three.",
			"So a bit of a circular argument, but just to remind us",
			"how we got from 123 to one hundred twenty three.",
			"Well, it turns out that in the world of computers, the system",
			"they use is exactly, fundamentally the same.",
			"The only difference is that computers only have access to zeros and ones,",
			"not zeros through nines.",
			"So if we consider now in the abstract, just three possible digits",
			"represented here, let's consider for a moment why those columns are places",
			"where one, 10, and 100, and so forth.",
			"Well, why was that the case?",
			"Well, there was a pattern, in fact, and it just",
			"has to do with exponents or powers.",
			"So the rightmost column, technically, if we really get into the weeds,",
			"is 10 to the zeroth power, which if you recall,",
			"just means one, 10 to the first power, which is just 10,",
			"and 10 to the second power, or 10 squared, is 100.",
			"But what's interesting about representing it in this way",
			"is that it jumps out that 10 is involved.",
			"There's 10 digits, zero through nine, so the columns are using this base of 10.",
			"So you can perhaps now get even ahead of me",
			"here by considering, well, if in the binary system that computers",
			"use, you only have two digits, zeros and ones,",
			"odds are the only thing that's going to change is the meaning of these columns.",
			"Now we have the ones place still, because 2 to the zero is one,",
			"but then we have 2 to the first, 2 to the second, and so forth.",
			"And of course, if we just do out that math,",
			"in the world of binary that computers use,",
			"we have the ones place, twos place, fours place, and so forth.",
			"And now we're good to go.",
			"Even though we have to now think in a different base system,",
			"now we can start counting more properly.",
			"And now we can move away from the metaphor of light bulbs",
			"and consider that if all of those light bulbs are off,",
			"we're, again, just going to start thinking of those things as zeros.",
			"So that would be a pattern of symbols or digits that's 000 in binary.",
			"But in our human world, the mental math you",
			"would probably do now instantaneously after today",
			"would be, well, that's obviously 4 times 0 plus 2 times 0 plus 1 times 0,",
			"or, of course, zero in decimal.",
			"But how does a computer represent the number one, for instance?",
			"Well, it's just going to change that rightmost bit from a zero to a one,",
			"or, more metaphorically, it's going to turn that switch on and illuminate",
			"that rightmost light bulb just like I did earlier.",
			"How do I represent two?",
			"It's going to be 010 in binary.",
			"How do I represent three?",
			"This is where we're about to differ.",
			"Now I'm putting on two of those switches,",
			"because I need something in the twos place and the ones place to give me,",
			"mathematically, three.",
			"Next, if we go ahead and choose--",
			"count up to four, that's going to be 100.",
			"if I want to count up to five, that's going to be 101,",
			"six is going to be 110, and finally, the number seven is going to be 111.",
			"So it would seem that using three bits, each of which can be a zero or one,",
			"yes, you can permute them in eight different ways.",
			"Two possibilities for the first times two for the second times two",
			"for the third gives us eight.",
			"But as per this math and the intuition of starting counting from zero,",
			"we can only count up as high as seven in total.",
			"Well, let's go ahead and actually take this out for a spin.",
			"When we don't have just, say, let's say, one light bulb or three light bulbs,",
			"we have, actually, the fortune of having like",
			"a whole stage worth of light bulbs.",
			"64 light bulbs adorn the stage here.",
			"And you know what?",
			"Sumner, could we go ahead and put up a random number on the screen here?",
			"All right, so if you can see these light bulbs from your perspective,",
			"we have eight light bulbs plus another bunch of them,",
			"and all the others are off.",
			"So let's go ahead and ask a question then.",
			"If these light bulbs now represent not just one light bulb or two or three,",
			"but several more-- in this case, at least six light bulbs,",
			"what value do we actually get?",
			"Well, let me go ahead and put a question on the screen here,",
			"which should pop up on yours in just a moment.",
			"And you should see now on your end this same question.",
			"Put in binary terms, what number--",
			"in decimal, does binary number 110010 represents?",
			"What decimal number does binary number 110010 represent, from left to right?",
			"So here we have an overwhelming response.",
			"50 is indeed the correct answer.",
			"Now why is that?",
			"Well, if I go over to the physical light bulbs here, let's",
			"just consider for a moment what the pattern actually is.",
			"This here is the ones place, the twos place, four, eight, 16, 32,",
			"and we could keep going.",
			"But it's not going to matter because they're all off.",
			"So we have 32 plus 16 plus 2, which indeed gives us",
			"the number you and I know in decimal as 50.",
			"And just imagine how high we could count with all of the other light bulbs",
			"as well.",
			"All right.",
			"So we started with the story with electricity.",
			"We then moved on to numbers and representing things,",
			"either in decimal or in binary.",
			"But we've kind of painted ourselves into a corner,",
			"because if we only have at our disposal switches or the metaphorical light",
			"bulbs, which we can think of as zeros and ones,",
			"it would seem that the only things computers can do is compute.",
			"That is, behave as calculators.",
			"And in fact, early on, that's exactly what computers were designed to do,",
			"was really facilitate mathematical calculations that were otherwise quite",
			"tedious or impossible for humans.",
			"But, of course, what you and I are using right now,",
			"what we use every day on our phones and our laptops and desktops is much more",
			"sophisticated.",
			"So let's consider how could a computer represent not just numbers,",
			"but letters of the alphabet.",
			"Brian, could we call on someone for this one?",
			"If you'd like to raise your virtual hand,",
			"how could a computer go about representing letters of an alphabet",
			"like English if, again, all we have at our disposal is switches?",
			"AUDIENCE: We can assign the numbers that we're getting from binary",
			"to specific letters of the alphabet.",
			"DAVID J MALAN: Yeah.",
			"We can assign the specific numbers in binary to letters of the alphabet.",
			"That's pretty much our only option, it would seem.",
			"If we only have the ability to permute these switches or light bulbs or bits,",
			"well, we just all have to agree how to represent letters in the same way.",
			"Now, maybe the simplest way for us to do this would be, you know what?",
			"Let's just all agree that a capital A is going to be the number one.",
			"So you turn on one light bulb, or represent the binary number one.",
			"Well, how about for B, we could use the number two.",
			"For C we could use the number three.",
			"D could be four, and so forth.",
			"We all just have to agree to number the letters in that way.",
			"But it turns out humans did exactly that,",
			"but a little bit differently years ago.",
			"They decided for reasons that we won't get into just now,",
			"that, actually, the capital letter A is actually",
			"going to be represented by the decimal number you and I know as 65.",
			"Now in bitwise form, that's going to look like this.",
			"So this is the pattern of bits that a computer would",
			"use to represent the decimal number we now know as 65,",
			"and now what the computer is going to do is just be mindful of what",
			"type of program you're using.",
			"So yes, if you're using a calculator or maybe using something like Excel",
			"to crunch numbers, well, in that context when running software,",
			"like a calculator or a spreadsheet program doing numerical analysis,",
			"the program is going to see inside of the computer's hardware",
			"the pattern of switches that represents the decimal number 65.",
			"And because it's in the context of a calculator or spreadsheet, what",
			"you, the human, might see on the screen is literally the decimal number 65.",
			"But if you and I are using text messaging or email or any number",
			"of social media apps where we're communicating",
			"not numerically but in letters, say, English letters,",
			"in that context your computer is going to be smart enough",
			"to know, well, that same pattern of bits that represents 65,",
			"in the context of a text message or in an email or the like",
			"actually represents the capital letter A. So the pattern is the same.",
			"The representation is the same.",
			"But the context is what differs.",
			"And the system that humans came up with years ago that maps 65 to A, 66 to B,",
			"67 to C, is called ASCII, the American Standard",
			"Code for Information Interchange.",
			"And that just means that there is a well-defined mapping that a bunch",
			"of humans decades ago decided on, in order to map letters of the alphabet--",
			"English in this case--",
			"to numbers starting with 65.",
			"And there's a whole mapping, too for punctuation, for lowercase letters,",
			"and the like.",
			"So given that, suppose that you did receive a text message containing",
			"a pattern of bits, or, really, just a sequence of decimal numbers that",
			"happened to be this.",
			"72, 73, 33.",
			"Suppose that you received a text message containing these patterns of numbers.",
			"72, 73, 33.",
			"What message might you have just received?",
			"Let me go ahead and pull up the abbreviated chart here",
			"to consider exactly what message you've received.",
			"72, 73, 33.",
			"And Sumner, could we go ahead and throw this same three-letter word",
			"on the lights?",
			"If you'd like to see it in bitwise form, so to speak,",
			"it will appear here on these light bulbs now as well.",
			"What pattern does this represent?",
			"Lanham, can we go to you?",
			"AUDIENCE: That would be HI with an exclamation point, correct?",
			"DAVID J MALAN: Yeah so it's indeed HI with an exclamation point.",
			"And it's probably pretty easy now, in retrospect,",
			"to glean that, yes, the 72 and the 73 were H and I respectively.",
			"But Lanham also noted the exclamation point, which isn't in this chart,",
			"but per the dot dot dots, there is a well-defined mapping",
			"for all of the letters of the alphabet that we might care about.",
			"And so HI is perhaps more obvious than the other.",
			"That 33, we need a bigger chart.",
			"And so if you actually go on your computers",
			"now to asciichart.com, asciichart.com, you'll",
			"see a little something like this.",
			"Though you can also just google ASCII in general",
			"and get copies of the same chart.",
			"You'll see here that H is indeed 72, I is indeed 73,",
			"but if we look to the left, 33 is, apparently, an exclamation mark.",
			"And you would only know that by having looked it up or just having",
			"committed it to memory.",
			"But the computers you and I use and the phones you and I use just",
			"know this intrinsically.",
			"That's, indeed, how they're programmed.",
			"But it turns out, too, that we should consider",
			"just how many zeroes and ones we're using now",
			"to represent the 72, the 73, and the 33.",
			"So let's look for one last time at the binary representation, which,",
			"as per the light bulbs, are these patterns of bits here.",
			"So when you receive a text message from a friend saying HI!",
			"H-I exclamation point, in all caps, you're",
			"technically receiving a pattern of bits, some kind of frequency,",
			"if it's wireless, that represents this pattern of bits.",
			"And typically, computers these days use eight bits",
			"to represent each of those characters.",
			"When ASCII first came out, they typically",
			"used seven for efficiency reasons, because space was expensive back then.",
			"But here we used eight, and, indeed, that's now",
			"the norm when it comes to representing characters in multiples of eight.",
			"So we have eight bits here, eight bits here, eight bits here,",
			"which means to receive the message HI! you are sending or receiving 24 bits",
			"total.",
			"Now, frankly, bits are not a very useful unit of measure,",
			"typically, because they're so small.",
			"Just a zero or a one.",
			"But each of these patterns of eight bits, actually",
			"have a vocabulary word, if you will, which is bytes.",
			"And odds are, all of us have used this term in some context,",
			"but generally in the context of megabytes or even gigabytes.",
			"Indeed when you talk about the sizes of your files these days,",
			"you're speaking in bytes in some form, either million or billion bytes.",
			"But each of those bytes, quite simply, is a pattern of eight zeros and ones.",
			"So, in fact, if we have as many as 64 bulbs at our disposal,",
			"that's 64 divided by 8.",
			"That's eight characters.",
			"So it would seem we could spell on this stage, even an eight-letter word--",
			"if, Sumner, we could put up a random eight-letter word,",
			"that we'll keep up now--",
			"can you now spell from left to right, your left",
			"to your right, an eight-letter word using the system known as ASCII.",
			"But, of course, we're being a little bit biased here,",
			"as ASCII is the American Standard Code for Information Interchange.",
			"And on a typical US English keyboard, there's more characters, certainly,",
			"than uppercase letters, like A through H and I.",
			"There's also some punctuation and some numbers, but there's also quite a bit",
			"missing as well.",
			"And any of you who are elsewhere in the world, odds are,",
			"would find using a keyboard like this especially limiting or frustrating.",
			"Why is that?",
			"What seems to be missing from ASCII?",
			"What seems to be missing from ASCII?",
			"Well, let me ask this one other question here.",
			"If we do use ASCII, and we therefore give ourselves eight bits or one byte,",
			"how many different characters could we potentially actually display, actually",
			"represent?",
			"So on your screen, you should see this question now.",
			"How many symbols can you represent with eight bits?",
			"How many symbols can you represent with eight bits?",
			"And this speaks to, really, at the end of the day, how",
			"many letters of the alphabet plus punctuation,",
			"plus uppercase and lowercase, can ASCII, or really, can computers support?",
			"Well, it looks like 72% or so of you think that the answer is 256.",
			"And it is indeed the case that you can represent 256 possibilities.",
			"Why?",
			"You can actually do out the math.",
			"If you've got eight bits, each of which can be a zero or a one,",
			"that means you have two possibilities for the first,",
			"times two possibilities for the second, times two times two times two.",
			"That happens to be 2 to the eighth, or 256.",
			"It's fine if that's not immediately obvious,",
			"but if you do have eight bits, each of which can be one of two values,",
			"you can come up with 256 possibilities.",
			"Those of you who chimed in to say that the answer is 255 in this case,",
			"are wrong, only because now we're talking about the total number",
			"of patterns, which is indeed 256.",
			"But the highest value we could represent with eight bits or eight light bulbs,",
			"it would seem to be, indeed, 255.",
			"And that's because of all of the different patterns we can permute.",
			"But let me open the question to the audience now.",
			"Why might a US English keyboard be especially limiting,",
			"and in turn, why is ASCII really not quite appropriate",
			"when it comes to representing human language,",
			"even though this is what computers began with years ago?",
			"What is missing from ASCII?",
			"Why might 256 total possibilities not be sufficient?",
			"Kevin, can we go to you?",
			"AUDIENCE: Sure.",
			"I mean, for one thing, missing a lot of the accents in other languages.",
			"But if you just consider, like, Asian languages,",
			"there are a lot more than 256 characters.",
			"DAVID J MALAN: Exactly.",
			"So not only are we missing accented characters",
			"that you might need in some languages, we're",
			"also missing the characters that you might need in Asian languages,",
			"in languages like Arabic and the like.",
			"There are way more symbols that we humans use to communicate in print",
			"and electronically than 256.",
			"English, we can get away with fitting into this keyboard,",
			"but not once we introduce things like these characters,",
			"let alone other symbols as well.",
			"And it turns out there's other things we humans like to say these days",
			"and express using characters that have come into vogue, which is, namely,",
			"these things.",
			"Odds are, probably sometime today you have",
			"sent or received one of these things here, otherwise known as an emoji.",
			"Now, even though these emojis look like pictures, they look like images--",
			"and they are, technically-- the way they're implemented in computers",
			"is actually as patterns of zeros and ones.",
			"These are actually just characters in an alphabet, the emoji alphabet.",
			"Which is to say there's some pattern of zeros and ones",
			"that represents each one of these faces, and the many other emojis that",
			"nowadays exist.",
			"And this is because the world has transitioned over the years from ASCII,",
			"which only used seven, and in some sense,",
			"eight bits total to represent all possible characters,",
			"to using either eight or 16 or 24 or even 32 .",
			"Bits nowadays there's a system called Unicode, which humans have come up",
			"with that support not only English, but also all of the human languages,",
			"is the aspirational goal, both written in print or electronically is the goal.",
			"And in addition to that, this is to say we can represent things like this.",
			"So this is the so-called face with tears of joy.",
			"And this face of tears of joy, as of last year,",
			"was the most popular emoji sent via text messages, emails,",
			"social media, and the like.",
			"But at the end of the day, all you're receiving",
			"is, like, a key on a keyboard.",
			"So, in fact, you wouldn't know it to look at it.",
			"But in fact, the decimal number representing this face",
			"with tears of joy happens to be 128,514.",
			"So to Kevin's point, to represent not only certain human languages,",
			"but certainly these emojis, we need way more than 256 characters",
			"so we can use not just eight bits, but 16 or 24 or 32.",
			"That's a huge amount of possibilities now.",
			"In fact, now, to really take the fun out of these things,",
			"if you receive that face with tears of joy or send it,",
			"you're technically just sending a pattern of bits that looks like this.",
			"That's all that's going on underneath the hood,",
			"every time you use these things.",
			"All right.",
			"So we started again with electricity.",
			"We then represented numbers.",
			"Now we have the ability to represent letters and even",
			"emotions in the form of emojis.",
			"What else is there out there?",
			"Well, the emojis themselves, of course, at least the ones we've looked at,",
			"are pictorial in nature.",
			"And so that invites the question, how does a computer",
			"represent things like color?",
			"Like, that face with tears of joy had a lot of yellow in it.",
			"So how is yellow or any color, for that matter, represented in a computer?",
			"Well, let me ask the audience again.",
			"If all you have at your disposal is bits, zeros and ones,",
			"and we just as humans need to agree how to represent colors,",
			"what might be one possibility?",
			"It doesn't need to be the answer.",
			"But what might your own instinct be if designing this for the first time",
			"yourself?",
			"How might a computer represent colors now?",
			"Yasmin, what do you think?",
			"AUDIENCE: You would like members to different colors and shapes",
			"and just do the same system.",
			"DAVID J MALAN: Yeah, exactly.",
			"Perfect instincts.",
			"You would just assign numbers to the different colors,",
			"and we all just have to agree on what that mapping is actually going to be.",
			"So it turns out there's different ways to do this.",
			"And if any of you are artistic and use Photoshop or the like digitally,",
			"you're probably familiar with acronyms like RGB, red, green, blue.",
			"But there are other acronyms and other ways",
			"to implement Yasmin's idea where we just somehow map",
			"zeros and ones to actual colors.",
			"Well, RGB just happens to represent red, green, and blue.",
			"And this is a system humans came up with years ago that says, you know what?",
			"We can actually get every color of the rainbow",
			"by mixing together some amount of red and green and blue light, essentially.",
			"So that just invites the question, well, how do we represent the amount of red,",
			"how do we represent the amount of green, and how do we",
			"represent the amount of blue?",
			"And we have, as Yasmin says, bits at our disposal.",
			"So we just have to decide how to do this.",
			"So suppose we receive a pattern of bits, that 72, 73, 33 again,",
			"but this time it's not an email.",
			"It's not in a text message.",
			"It's in the context of a file that I've opened in Photoshop.",
			"So it's as though I've opened up a photograph that someone",
			"sent me and I want to do some editing and I see this pattern of numbers,",
			"or, in turn, bits.",
			"Well, what is that representing in this case?",
			"In the context of an email or a text message, it's still HI!",
			"But in the context of Photoshop or Instagram",
			"or anything that is oriented around images,",
			"it's actually going to represent some amount of red, some amount of green,",
			"some amount of blue.",
			"And as we discovered earlier, the total number",
			"of possibilities you can represent with eight bits happens to be 256.",
			"The highest value you can represent is 255 if we start counting from zero.",
			"So this is to say that each of these three numbers",
			"is a number between zero and 255.",
			"So 72 feels like a medium amount of red, 73 is like a medium amount of green, 33",
			"is a little bit of blue.",
			"And if you combine those three amounts of color, eight bits plus eight",
			"bits plus eight bits, using 24 bits total,",
			"using the first third to represent redness, the second third greenness,",
			"and the third third blueness, you get, it turns out,",
			"a dot that looks like this, a yellow dot.",
			"And so, indeed, that emoji, when it's being displayed on the screen,",
			"is the result of the computer interpreting--",
			"the 128,514 value is knowing oh, that's the emoji",
			"with the face of tears of joy.",
			"But when it comes to displaying the information on your screen,",
			"now your computer is going to be using different patterns of bits",
			"to control the colors of the dots on the screen.",
			"And this term you might already know.",
			"The dots you and I see on our computer screens or even TVs these days",
			"are called pixels.",
			"They're tiny little squares that represent some color",
			"such as this yellow one here.",
			"And you can actually see them in some contexts.",
			"If I go ahead and pull up the same face with tears of joy and zoom in a bit,",
			"zoom in a bit more, and really zoom in a bit more,",
			"now you can actually see what we call pixelation.",
			"And odds are, you have seen this on Facebook, Instagram,",
			"wherever you might be resizing or editing photos that don't quite",
			"have enough resolution.",
			"The resolution of an image is just how many pixels or dots there",
			"are horizontally and vertically.",
			"So if you really zoom in on an image, you'll eventually see those pixels.",
			"And this is to say that even in this zoomed-in happy face,",
			"there's a huge number of yellow dots and a whole bunch",
			"of black and gray and brownish dots as well",
			"that compose this very colorful image.",
			"And so you can see them in that case, and every one of those dots now,",
			"a pixel, is using, I claim, like 24 bits or three bytes.",
			"Now, you can imagine, there's probably what, hundreds, maybe thousands of dots",
			"in that image if we zoom out and look at all of them again.",
			"So if every one of those dots or pixels is three bytes,",
			"this is why the photographs you and I take",
			"and the images you and I download from the internet",
			"are typically measured not even in bytes, per se, but in kilobytes,",
			"for thousands of bytes, or megabytes for millions of bytes,",
			"or if it's a video file, it might get even bigger, billions, or gigabytes.",
			"But that's all that is happening underneath the hood.",
			"We're just representing information in this way.",
			"Well, let me ask a follow up question now.",
			"If we've now, thanks to Yasmin, represented colors,",
			"and in turn, images, because all an image is is a grid of pixels.",
			"You take the same principle Yasmin proposed,",
			"where you represent each color of a dot and you have a whole bunch of dots that",
			"gives us images, how would you propose computers represent video files?",
			"Again, even if you don't know the answer, how might",
			"a computer represent video files now using, again, only bits",
			"at their disposal?",
			"Who might like to field this one?",
			"How might a computer represent a video?",
			"Justin, what do you think?",
			"AUDIENCE: I-- maybe just, like, rapidly changing the bites?",
			"DAVID J MALAN: Just rapidly changing the bites.",
			"I hear-- can you elaborate a little bit?",
			"What do you mean by changing the bites?",
			"AUDIENCE: Like rapidly changing the RGB of individual pixels--",
			"DAVID J MALAN: Exactly.",
			"AUDIENCE: --to match the image of that second",
			"of the video or portion of the video.",
			"DAVID J MALAN: Perfect.",
			"So if you think about, like, the rectangular screen that is your phone,",
			"or your laptop, or your desktop monitor, if you just",
			"keep changing the colors of those dots once per second",
			"or a whole bunch of times per second, we'll",
			"get the illusion that there's actually motion on the screen, ergo video.",
			"So really, a video, in some sense, it's just a whole bunch of images,",
			"to Yasmin's definition, flying across the screen really quickly.",
			"And so you can see this even old school style.",
			"For instance, let me go ahead and open up on my screen",
			"a short video that represents a flipbook.",
			"So you might have made one of these as a kid or maybe your teacher",
			"did or you saw them, at least, in person somewhere.",
			"Where if you take a whole bunch of pieces of paper and staple",
			"or clip them together in some way, draw a whole lot of pictures, all of which",
			"are similar but slightly different on each page,",
			"you can create an animation, or, really, a video.",
			"And this is all a video is in a purely electronic world.",
			"Even though this happens to be implemented",
			"in paper, what happens in the computer world",
			"is indeed just a whole sequence of images",
			"flying across the screen at some rate.",
			"And that's what actually gives us the video files that you and I know today.",
			"And there's even more rabbit holes we can go down.",
			"For instance, how might you represent music?",
			"Well, music, could be represented, gosh, in different ways.",
			"Like, if you play the piano, for instance, you",
			"might know that there are notes, like A through G.",
			"But there's also sharps and flats and so forth.",
			"But you know what?",
			"Maybe we just need a number to represent each of those possible notes.",
			"And maybe also we could use another number,",
			"just like images use multiple numbers to represent dots,",
			"we could use a number to represent the notes in a song,",
			"but also another number to represent the duration of that note.",
			"How many seconds or milliseconds or beats should you hear that note for.",
			"So you could come up with other formulations, too,",
			"but music, really, can be quantized in the world of computers",
			"into just small pieces of information.",
			"And so long as you and I agree on how to represent it,",
			"that's how these things all work.",
			"And if you've ever wondered why there are JPEGs and PNGs and GIFs and Word",
			"documents and Excel files and all of these different file formats or file",
			"extensions on computers, those file extensions or formats just",
			"represent a whole bunch of humans agreeing",
			"how to store patterns of zeros and ones in a file",
			"so that when those zeros and ones are loaded into a computer for display",
			"or for interpretation, it knows what those patterns represent.",
			"Images are represented slightly differently,",
			"sound and video are represented slightly differently,",
			"but it's all zeros and ones at the end of the day.",
			"So this is all to say, so long as we all agree, ideally around the world,",
			"how to represent information, now we can represent inputs to problems",
			"and hopefully solve problems and get outputs.",
			"So all that remains in problem solving, or really, computer science broadly,",
			"is to look inside of this black box and to consider how you take inputs,",
			"whether it's numbers, letters, images, video, sound,",
			"and convert them into actual solutions.",
			"And so inside of this black box is what we would typically",
			"describe as algorithms.",
			"Algorithms are step by step instructions for solving problems.",
			"They don't even have to involve computers.",
			"We humans can execute algorithms just by following someone else's instructions.",
			"If you've ever prepared something from a cookbook, following a recipe,",
			"you are executing an algorithm step by step.",
			"But unlike a lot of recipes or unlike a lot",
			"of instructions that we humans give to each other,",
			"there's no room for ambiguity in computers.",
			"Computers' algorithms, when implemented by machines,",
			"they really have to be not only correct so",
			"that you get the right outputs that you care about,",
			"but they also need to be precise.",
			"You need to be ever so precise, because unlike we humans who can kind of like",
			"read between the lines and, yeah, I get what you mean,",
			"computers are going to take you literally.",
			"And so when programming a computer, that is, translating an algorithm,",
			"step by step instructions, into some language the computer understands,",
			"the onus is on you to make sure that the computer cannot misinterpret what you",
			"want.",
			"So let's consider one such algorithm.",
			"So on all of our phones, whether iOS or Android or the like,",
			"you have some contacts application.",
			"And that contacts application's probably storing all of your friends",
			"and family members and colleagues, probably alphabetically.",
			"Maybe by first name, maybe by last name, or however",
			"you've organized that device.",
			"Well, the old school version of this happens",
			"to be in paper form, which looks a little something like this, a phone",
			"book.",
			"And inside of an old school phone book really is that exact same idea.",
			"It's much larger.",
			"It's much more much more printed.",
			"But it's the same thing.",
			"There's a whole bunch of names and numbers in a typical phone book,",
			"sorted alphabetically just like your own Android phone or iOS",
			"phone might be as well.",
			"So suppose we want to solve a problem.",
			"And the input to that problem is not only this phone book, but also",
			"the name of someone to look up the number for.",
			"So my own name, for instance.",
			"If I want to look up my phone number, or you do, you might open up this book",
			"and start looking for David, for instance,",
			"if we assume that it's sorted by first name.",
			"I don't see David on the first page, so I move on to the second.",
			"I don't see myself there, so I move on to the third.",
			"I don't see myself there so I move on to the fourth.",
			"And so forth, one page at a time, looking for my name and, in turn,",
			"my number.",
			"Well, if correctness is important-- let me ask that question first.",
			"Is this algorithm, turning the pages, step by step,",
			"looking for David correct?",
			"What do you think?",
			"Within Zoom, you should see some icons under the participants",
			"window labeled yes and no.",
			"If you'd like to go ahead and vote virtually, yes or no,",
			"is this algorithm correct?",
			"One page at a time, looking for myself.",
			"Never mind the fact that this is yellow pages,",
			"and so I'm not going to be anywhere in the phone book,",
			"but indeed, we'll assume it contains humans as well.",
			"All right.",
			"So it looks like the algorithm is indeed correct,",
			"but it's terribly, terribly slow.",
			"And that's OK, because one of the ideas we're",
			"going to consider in CS50 and in turn, computer science,",
			"is not only the correctness of an algorithm, but also the efficiency.",
			"How well designed is the algorithm?",
			"This is correct.",
			"It's just incredibly, incredibly tedious and slow.",
			"But I will find myself.",
			"But, of course, we can do better.",
			"Instead of looking for myself one page at a time, why don't I do one page,",
			"let me do two, four, six, eight, 10.",
			"It sounds faster and it is faster.",
			"I'm going twice as fast through the phone book looking for myself.",
			"Is this algorithm correct?",
			"Let me go to someone in the audience this time.",
			"Is this algorithm of searching for someone's name two pages at a time",
			"correct?",
			"Because I claim it's more efficient.",
			"I claim it's better designed because I'll solve the problem twice as fast.",
			"Aneka, what do you think?",
			"AUDIENCE: No, because you might skip your name on a page.",
			"DAVID J MALAN: Yeah, I might skip my name on a page.",
			"And let me ask a follow up question.",
			"Can I fix this?",
			"Do I have to throw out the whole algorithm",
			"or can we at least fix this problem, do you think?",
			"AUDIENCE: I think whatever page you flip to, it would help to see,",
			"like, what name is there and maybe see if your name would",
			"come before or after.",
			"DAVID J MALAN: Nice.",
			"So that's exactly the right intuition.",
			"I don't think we have to completely sacrifice the idea of speeding up",
			"this algorithm by moving twice as fast.",
			"But as you propose, if I go too far-- maybe I get to the E section,",
			"which is one letter too late--",
			"I should at least double back one page.",
			"Because I could get unlucky, and maybe David",
			"is kind of sandwiched in between two pages, at which point",
			"I might fly by, get to the end of the phone book, say, no, there's no David,",
			"and I just got unlucky with 50% probability.",
			"But as you propose, I can at least recover and sort of conditionally",
			"ask myself, wait a minute, maybe I just missed it, and double back.",
			"So I can get the overall speed improvement,",
			"but then at least fix that kind of mistake or bug.",
			"And bug, a term of our-- in programming, a bug",
			"is just a mistake in a program, or a mistake, more",
			"generally, in an algorithm.",
			"But honestly, none of us are going to do that.",
			"When we actually go to search for someone in a phone book,",
			"just like our phones do, they typically don't start at the top",
			"and go to the bottom.",
			"And computers do exactly what you might do more intuitively.",
			"They'll probably go roughly to the middle.",
			"Maybe they'll skew a little to the left, if you know",
			"D is toward the start of an alphabet.",
			"But, no I open to the middle sort of sloppily, and I'm in the M section.",
			"So what do I know when I'm in the M section about this problem?",
			"Let me call on one more person.",
			"I'm in the M section.",
			"What would you do as a human now, taking this as input to solve this problem?",
			"What do I know about the location, of course, of my name in the phone book?",
			"What decision can I make here?",
			"What decision can I make?",
			"Kyle, what do you think?",
			"AUDIENCE: Yeah.",
			"So from the M onwards, you know that your name won't be there for sure.",
			"DAVID J MALAN: Yeah, so my name is not going to be in the M section.",
			"But thanks to the alphabetization of the phone book, I at least know,",
			"you know what?",
			"I can take a huge bite out of this problem",
			"and tear the problem in half, both metaphorically and also literally,",
			"in the case of a phone book.",
			"And I can literally throw half of the problem away.",
			"And so if I started with something like 1,000 pages in this phone book",
			"or 1,000 contacts in my phone, just by going to the middle,",
			"roughly, and taking a look to the left and the right, I can decide,",
			"as you note, well, it's not on the page I'm looking for.",
			"But I can decide it's to the left or to the right.",
			"I know D comes before M. And so now I can go to the left.",
			"And you know what's interesting here, is that I",
			"can use that exact same algorithm.",
			"I don't have to think any differently.",
			"I can apply the same logic, open to the middle of this half of the phone, book",
			"and now I see I'm in the G section.",
			"So I'm still a little too far.",
			"But again, I can tear half the problem away, throw it down",
			"and now I've gone from, like 1,000 pages to 500 pages to 250 pages.",
			"If I do this again, I might find myself, oh, I made it to the C section now.",
			"I can tear the problem in half again, throw the left half away,",
			"and now I'm down to just 125 pages.",
			"Now, that's still a lot, but my god.",
			"I've gone from 1,000 to 500 to 250 to 125.",
			"That is way faster than going from 1,000 to 999 to 998,",
			"and it's even faster than going from 1,000 to 998 to 996 to 994.",
			"Both of those algorithms are going to take me much longer as well.",
			"We have this visualization made by Brian, wonderfully,",
			"that depicts 1,024 page phone book with one page being flipped at a time.",
			"And now we're down to 996, 995.",
			"I mean, honestly, this isn't all that enlightening.",
			"It's going to take forever to find David or any name in a phone book",
			"when starting at that kind of pace with that algorithm.",
			"But what if, instead, I'm a little smarter",
			"and I'm a little more intuitive?",
			"And I harness the intuition that probably you had and I",
			"start with 1,024 pages again, and this time",
			"divide and conquer, half at a time, splitting the problem in half?",
			"Tearing the phone book in half, I get down to just one page.",
			"And if we actually do out the math, if you start at like 1,000-plus pages,",
			"it will only take me 10 total tears of that phone book in order to get down",
			"to my number, 949-468-2750.",
			"So that just is to say that the third algorithm is not only correct, just",
			"as the first one definitely was and the second one could be with that bug fix,",
			"but it's also much better designed.",
			"It's much more efficient.",
			"And so we can see this a little graphically as well.",
			"Let me go ahead and propose not a numerical analysis or anything",
			"like that.",
			"But just something that's a little visual like this.",
			"So if I have an x-axis here that represents",
			"horizontally the size of the problem, the number of pages in a phone book,",
			"and vertically on the y-axis, the amount of time required to solve a problem.",
			"What co these algorithms look like, if we just kind of chart them?",
			"Well, the first algorithm, depicted here in red, it's just a straight line.",
			"It's a slope of one because there is this one to one",
			"relationship between number of pages and the amount of time",
			"it takes me to solve it.",
			"For every new page of that phone book, maybe year after year,",
			"if the phone book grows, it's going to take me",
			"one more step to look for myself or anyone else,",
			"potentially, in that phone book.",
			"Unless I get lucky and they're early in the phone book, but one more",
			"page means one more page turn.",
			"The second algorithm is actually better.",
			"It's still a straight line.",
			"So it's still a linear relationship.",
			"But for every two pages in the phone book it takes me one more step.",
			"Two pages, one turn.",
			"Two pages, one turn.",
			"So it's strictly better than the first algorithm.",
			"Why?",
			"Well, if we consider this-- if the size of the problem is,",
			"maybe, here, for instance.",
			"So if we assume, for the sake of discussion, maybe",
			"the phone book has this many pages depicted with this dotted line.",
			"Well, how much time is it going to take the second algorithm",
			"to find someone in that phone book?",
			"It's going to take this amount of time, right?",
			"Where those two lines intersect.",
			"If you're using the first algorithm, though, going one page at a time,",
			"it's actually going to take this much time, which is literally twice as much.",
			"So they're both correct, assuming we double back as needed",
			"if I go too far past a name.",
			"But both of those are sort of fundamentally the same.",
			"They're the same shape, and, honestly, they both",
			"felt slow to say and to act out.",
			"The third algorithm, if we were to graph it,",
			"has a fundamentally different relationship",
			"between the size of the problem and the time required to solve the problem.",
			"The line goes up, up, up, up, as it should,",
			"because the more pages there are, the more time it's going to take to solve,",
			"but notice how much more slowly it goes up.",
			"This thing barely starts to rise as the size of the problem",
			"gets bigger and bigger and bigger.",
			"And why is that, intuitively?",
			"Well, here, what's powerful is, suppose that phone book, next year,",
			"for whatever reason, doubled in size.",
			"Maybe Cambridge and Allston, Massachusetts merged together into one",
			"big phone book, so there's 2,000-some-odd pages now instead.",
			"How many more steps would it take next year",
			"to search for someone in that phone book?",
			"One.",
			"One more step.",
			"And so if you look way out here along this green line,",
			"doubling the size of the phone book, the line",
			"itself is only going to rise ever so slightly because no big deal.",
			"With that third algorithm you're taking much bigger bites out of the problem.",
			"And so this, too, speaks to what computer science and what programming",
			"are ultimately like.",
			"Harnessing ideas that you come into the class with",
			"and that you might use in your everyday life,",
			"but you don't necessarily think about how you might represent problems",
			"using those algorithms and how you might translate them to computer speak.",
			"And indeed, one way we'll start to think about algorithms",
			"is not only their correctness, but how well designed they are.",
			"And so for instance here, I've deliberately",
			"labeled these three lines n, n over 2, and log base 2 over n.",
			"That just means that if we use n as number-- so computer scientists tend",
			"to use n as a variable, much like a mathematician might say x or y or z,",
			"n for number.",
			"And so the first red line is the running time,",
			"the number of steps it might take to solve a problem",
			"might be, in the worst case, n.",
			"If there's n pages in the phone book, maybe I'm looking for someone way",
			"at the end of the phone book and it's going",
			"to take me all n steps to find them.",
			"The second algorithm is going to take half as many steps.",
			"So we express that as n divided by 2, because if we're",
			"doing two pages at a time we'll get to the end of the phone book--",
			"if we're looking for someone whose name starts with Z, for instance--",
			"twice as fast.",
			"But the third algorithm, if you're a little rusty on the mathematics,",
			"is represented as a logarithm with a base of 2.",
			"And this just means that this graph, the green line",
			"describes how much time it takes to solve a problem when on each pass,",
			"on each step, you are dividing the problem, in this case, by half.",
			"The other two algorithms are taking one or two bites out of the problem.",
			"The third algorithm was taking half of the whole problem at a time.",
			"And that's what made it all the more powerful.",
			"So when it comes to programming now, we need",
			"to translate these things called algorithms to code.",
			"Or, in this case, let's call it pseudocode.",
			"And in just a bit, we'll focus on an actual programming language,",
			"albeit a graphical one.",
			"But for now let's just consider some of the constructs or sort",
			"of fundamental ideas that are going to be useful to leverage",
			"here on out in this class.",
			"So let me propose that what I really just did verbally",
			"can be translated into pseudocode, which is like an algorithm implemented",
			"in English, or whatever your spoken or written language is.",
			"But the key is that it's got to be correct,",
			"and ideally it had better be precise so that there's no ambiguity.",
			"Step one was, indeed, what I did.",
			"Pick up phone book.",
			"Step two, open to middle of phone book.",
			"Step three, look at page.",
			"And indeed I did that.",
			"And now things got interesting.",
			"Step four, if person--",
			"David, in my case-- is on the page, what do I want to do?",
			"Well, I should probably call that person.",
			"The problem is solved.",
			"I've gotten my output, the person's number.",
			"But there's another possibility, not if the person's on the page",
			"but, rather if the person is earlier in the book--",
			"and that is what happened a moment ago.",
			"If I ended up on M, but I'm looking for David, that's to the left,",
			"I should then do what?",
			"Open to the middle of the left half of the book.",
			"And that's indeed what I did.",
			"And I sort of gratuitously tore the problem in half.",
			"But algorithmically, I just looked at the left half of the book next.",
			"What do I do next?",
			"Well, really, that's the point at which I",
			"proposed that the algorithm is now just repeatable, again and again,",
			"and so we'll say go back to line three.",
			"Why?",
			"Well, starting at line three, I have an algorithm",
			"for looking up someone in a phone book.",
			"It just so happens the phone book now is half as large.",
			"But there's another case.",
			"What if the person is later in the book?",
			"I wasn't searching for David, which starts with D,",
			"but someone else's name that's toward the end of the alphabet.",
			"Well, then if that person is later in the book, same idea.",
			"Open to the middle of the right half of the book,",
			"and then again, go back to step three.",
			"But lastly, there's a fourth possibility.",
			"There's a fourth possibility.",
			"Either the person's in the phone book, or they're to the left",
			"or they're to the right, or, frankly, they are just not there at all.",
			"And this last point, though somewhat subtle, is so important.",
			"Odds are all of us on our Macs, PCs.",
			"Maybe even phones, have had that very frustrating experience where",
			"your computer hangs, you get the stupid spinning beachball or hourglass,",
			"the thing freezes or just reboots, you know, something goes wrong",
			"and it's sort of inexplicable.",
			"And you might think it's your fault, but really it's",
			"usually the programmer's fault who wrote the software that you're",
			"using on your computer or your device.",
			"Why?",
			"Very often, that programmer, for whatever reason,",
			"did not anticipate a possible scenario.",
			"In this case, there's four scenarios, but you",
			"could imagine kind of forgetting the fact that, oh, well maybe David's",
			"not even in this phone book.",
			"But you'd better handle that scenario.",
			"And when you have a computer that freezes or hangs",
			"or reboots or just something goes awry, that",
			"is quite often quite simply because a human did not",
			"code for some possible scenario.",
			"So what are the fundamental constructs we've",
			"seen here that we're going to continue seeing in class?",
			"Well, highlighted in yellow now are really some verbs or actions",
			"that we exercised with that phone book.",
			"These are, in general, in programming called functions.",
			"A function is an action or a verb.",
			"It's a statement that gets the computer to do something.",
			"Next highlighted here are what we'll call conditions or branches.",
			"These are sort of the proverbial forks in the road.",
			"You could either do this or this or maybe this other thing.",
			"And you can have one decision to make or two or three or four,",
			"however many conditions make sense logically.",
			"We'll call those conditions.",
			"But how do you decide which fork in the road to take?",
			"Whether to do this or that or this other thing?",
			"For that we need something called Boolean expressions.",
			"A Boolean expression it's just a question",
			"whose answer is yes or no, or true or false, or, frankly, one or zero.",
			"All of those would be equivalent for our purposes.",
			"So person on page.",
			"That's a yes or no question.",
			"Person earlier in book?",
			"That too is a question.",
			"Person later in book is a third question as well.",
			"So if you can imagine a yes-no answer, a true-false answer, a one-zero answer,",
			"that is what gives us these things called Boolean expressions.",
			"And then lastly, in yellow here are these things.",
			"Go back to line three.",
			"This will induce what we'll call a loop or a cycle,",
			"which is just a programming construct or principle of an algorithm that",
			"gets you to do something again and again so you",
			"don't have to write 100-line algorithm.",
			"You can write a 13-line algorithm and reuse parts of it again and again.",
			"And so we'll begin now, and we'll begin CS50 with a look",
			"at an actual programming language, one that you might have used recently",
			"or as younger kids, known as Scratch, which is a graphical programming",
			"language which, while it might be very familiar to some of you,",
			"it actually represents a lot of these programming fundamentals",
			"that we'll use as this ground for transitioning in just one week",
			"to a more traditional more old school language,",
			"known as C, which is entirely text and keyboard-based.",
			"But we'll see in all of the languages we look at in CS50,",
			"these things called functions and conditions, Boolean expressions",
			"and loops, and today, in just a moment, we'll",
			"also see some other features that we describe as variables, not unlike x, y,",
			"and z in math, threads, which allow a computer to do, it would seem,",
			"multiple things at once, events, and yet other features as well.",
			"And so from here, we transition from pseudocode to actual code.",
			"And what you see on the screen here is an example",
			"of a language called C, where we'll spend a good amount of time",
			"this semester.",
			"This is the older school text-based, keyboard-based language",
			"to which I referred earlier.",
			"But this language is a bit cryptic.",
			"And certainly at first glance, you might wonder why is the hash symbol there,",
			"the angled brackets, the parentheses, the curly braces, the semicolon,",
			"the quotes, I mean, my god, there is so much syntax to what is on the screen",
			"now.",
			"And you can probably guess what this program does.",
			"Let me just go quickly to the audience.",
			"What, anyone, does this program probably do, even if you've never",
			"programmed a computer before?",
			"AUDIENCE: It just prints out hello, comma, world.",
			"DAVID J MALAN: Exactly.",
			"It just prints hello, world.",
			"And my god, like, look at all of the syntax and all of the keystrokes",
			"we had to type just to command the computer to do that.",
			"And so by contrast today is Scratch.",
			"We'll allow ourselves for just today to look at something much more",
			"friendly, much more graphical, that will allow us to explore these very ideas",
			"and set the stage for more sophisticated, more traditional",
			"languages next week and beyond, but in the context",
			"where we don't have to worry about parentheses, semicolons, curly braces,",
			"and where even these keys are on the keyboard.",
			"So allow me to introduce you, then, to Scratch,",
			"developed by some of our friends down the road",
			"here in Cambridge at MIT's Media Lab.",
			"You can play along at home here on out if you would like at scratch.mit.edu.",
			"It's web-based, but there's also an offline version",
			"if you tend not to have the best of internet.",
			"But the user interface would typically look like this.",
			"And a quick tour.",
			"So here on scratch.mit.edu, when you go to create",
			"a project via the button on the interface, you'll see first Scratch,",
			"the namesake of the program, this cat who",
			"lives in this little rectangular world in which you can move up,",
			"down, left, or right.",
			"But the cat can be transformed into any number of other characters,",
			"or what we'll call sprites, visual representations thereof.",
			"On the left here, now, are all of the building blocks that come with Scratch.",
			"All of the programming constructs available to you",
			"in the form of puzzle pieces.",
			"And you'll notice that they're categorized according",
			"to color and description and there's a whole bunch of puzzle pieces",
			"that rather say what they do.",
			"And today the goal is not to go into the weeds of all of these various puzzle",
			"pieces, but to highlight some of the fundamental ideas that are possible.",
			"And we'll explore those ideas via the middle of the screen here.",
			"We'll be able, in just a moment, to start dragging and dropping",
			"these puzzle pieces onto this larger screen",
			"and interlock them together, if it makes logical sense to do so.",
			"Finally, for the most sophisticated programs,",
			"we can actually create yet more characters or sprites",
			"and actually have a lot of interactions on the screen as well.",
			"But let's go ahead and dive in with just an example quite quickly.",
			"I'm going to go ahead on my screen and go, indeed, to scratch.mit.edu.",
			"And you're welcome to play along at home as well.",
			"And I'm going to click Create in order to get into exactly that interface.",
			"You do not need to make an account from the get go unless you would like.",
			"And let me go ahead and start creating a program.",
			"The very first program that was once written, by lore,",
			"was quite simply what Iris proposed as \"Hello World,\" a program that",
			"prints on the screen hello, world.",
			"Well, how can we do that?",
			"Well, I can probably do this quite quickly",
			"because I've used the interface before, but the goal",
			"for you at hand if you've never used this before,",
			"with the course's first problem set or programming assignment, really",
			"is just to get your hands dirty and explore and poke around.",
			"And odds are, the ideas you are looking for, you'll find eventually pop out.",
			"And the first one I'm going to try out is this one here.",
			"This puzzle piece that's a little yellow or orange in color.",
			"It's in the Events category, and it's called when green flag clicked.",
			"This is of interest, because if I go to Scratch's stage over here,",
			"you'll see at top left there's a green flag that's going to signify go,",
			"and a red stop sign that's going to signify stop.",
			"So if I want something to happen when I click that green flag,",
			"I'm going to start with this puzzle piece here.",
			"Now I'm going to go over into the Looks category.",
			"And in the Looks category, there's a whole bunch of blocks.",
			"But we're going to keep it simple here.",
			"I'm going to go ahead and just say the canonical, as Iris noted, hello, comma,",
			"world.",
			"I'll zoom back out.",
			"I'll move over to Scratch here, and I'm going to click now the green flag.",
			"And voila, hello, world.",
			"So that is my-- and perhaps, soon, your-- very first program,",
			"using in this language Scratch.",
			"But, of course, this isn't terribly interesting.",
			"Might be gratifying for the very first time.",
			"But it's not something you'd want to play again and again.",
			"But we can make this thing much more interactive",
			"and we can start to layer these building blocks",
			"and have an algorithm more like searching that phone book,",
			"that has multiple steps.",
			"So let me go ahead and stop that program.",
			"And let me explore a little bit instead.",
			"Let me go under Sensing this time, this blue category.",
			"And you'll see this block here.",
			"Ask what's your name, and wait.",
			"But notice that what's your name is in this white oval,",
			"and that implies that I can change what the question is if I want,",
			"but I'm fine with that question for now.",
			"And let me go ahead and first get rid of these blocks,",
			"and give myself when green flag clicked, and this time start under Sensing",
			"with ask what's your name and wait.",
			"But notice that this is kind of a special block.",
			"It comes with a second block, a so-called variable.",
			"It turns out that this ask puzzle piece is literally",
			"going to ask the human who's playing this game a question,",
			"and it's going to store the answer to that question in a variable, depicted",
			"here as this blue oval, called answer.",
			"Just like in math, an x, a y, or a z.",
			"So what could I do with that.",
			"Well, let me again go to Looks.",
			"Let me go to say hello, but this time, you know what?",
			"Let me go ahead and say hello, comma, and then-- all right,",
			"let me give myself a second say block.",
			"But I don't want to say hello again.",
			"So I'm going to delete that.",
			"But I'm going to go back to Sensing and I'm going to drag and drop answer.",
			"Now it looks a little too big, but notice if I get close to it,",
			"it sort of magnetically wants to connect.",
			"And indeed, Scratch will grow to fill the puzzle piece for me.",
			"So now I have a program, it would seem, a program written in Scratch,",
			"a piece of software written in Scratch that's going to, when the green flag is",
			"clicked, ask what's your name, and wait-- that's our function--",
			"say hello--",
			"that's another function-- and then it's going",
			"to say answer, whatever the human typed in.",
			"Well, let me go over to Scratch's world here and click the green flag.",
			"Notice the cat is asking me what's your name.",
			"I type in David and enter.",
			"Huh.",
			"I only see David.",
			"Well, maybe I did something wrong.",
			"Let me do it again.",
			"Green flag, D-A-V-I-D, enter.",
			"Hmm.",
			"What's going on?",
			"This seems to be a bug, because I'm pretty sure I have three functions,",
			"ask, say, and say.",
			"But I feel like I'm missing the second instruction.",
			"Any thoughts on what bug I have made?",
			"What might explain this?",
			"",
			"Natalie, is it?",
			"AUDIENCE: So you replaced the output with the same function.",
			"DAVID J MALAN: Yeah.",
			"I replaced the output with the same function.",
			"And honestly, even though we're using a fairly simple program, Scratch,",
			"my Mac is actually pretty fast.",
			"And your PC or your Mac or your phone is pretty fast.",
			"And even though Scratch is saying hello and saying answer, as Natalie notes,",
			"the answer is sort of overwhelming to say, because I didn't so much as pause.",
			"So I could go in and find a block-- there's",
			"a wait block that could allow me to insert an arbitrary pause.",
			"But I really want this to be one breath.",
			"I want it to be hello, comma, David, all at once.",
			"So how can I do that?",
			"Well, let me go under Operations.",
			"And it turns out there's a whole bunch of math-related things here,",
			"but also some English or language-related things down here.",
			"Join apple banana.",
			"Now this has nothing to do with apples and bananas.",
			"Those are just placeholders, but there's this puzzle piece here",
			"that I can drag and drop.",
			"And you know what?",
			"Let me go ahead and do this.",
			"Let me replace the first input to say, and let me join hello comma, and then",
			"not banana, but let me drag the answer--",
			"and notice that will drop in place.",
			"Let me throw this other block away.",
			"To delete things, you can just drag them over to the left and let go.",
			"And now notice that I have a program that's asking what's your name",
			"and then I'm going to say the result of joining hello and answer.",
			"And let me go ahead and play this now, after stopping the old one.",
			"What's your name?",
			"I type in David, enter, and voila.",
			"As Natalie notes, now it's not tripping over itself,",
			"clobbering what was previously there.",
			"Now I'm getting it all in one breath.",
			"Now the program is getting a little more interesting,",
			"but the paradigm is no different from before.",
			"In fact, let me propose that everything we've just done",
			"is fitting perfectly into this whole mental model of what",
			"it means to solve problems and what computer science itself is.",
			"So for instance, if this is the problem to be solved",
			"and I've got inputs and outputs are my goal and an algorithm in between,",
			"let's consider how Scratch even fits into this mental model.",
			"My input to the very first program that we wrote a moment ago",
			"was literally hello, world in its own oval.",
			"The algorithm was implemented as a function in Scratch called say.",
			"So an algorithm, step by step instructions,",
			"a function is the computer's implementation of an algorithm.",
			"In this case, a function called say.",
			"The output, of course, was the cat saying hello, world.",
			"But things got more interesting just now after Natalie's remark, whereby when I",
			"introduce something like ask what's your name and then wait,",
			"notice what happens this time in the model.",
			"Now the input to the problem is what's your name--",
			"that's the string that comes by default, and I could change it but I didn't.",
			"That's being fed now into the ask block.",
			"And the ask block's purpose in life is to get the cat",
			"to give me an answer like this.",
			"Now, that answer is interesting because I can now join it",
			"in with the word hello as a prefix.",
			"So this block is interesting because notice, the input,",
			"the white oval to the say block actually has another puzzle piece and then",
			"two more puzzle pieces on top of it.",
			"And what's cool here is that when programming functions,",
			"you can have the outputs of one function become the input to another function.",
			"And so the flow here is quite simply this.",
			"Now I have two inputs to the function, both hello, which I wrote,",
			"and answer, which came from the ask block.",
			"The algorithm in question now is the join function, which I just used.",
			"And its output is hopefully going to be hello, comma, David.",
			"But I don't want to see a white oval on the screen saying hello, comma, David.",
			"I want the cat to say hello, comma, David.",
			"So let me go ahead and focus only on the output.",
			"Make it become the input to a final function, which is that say block,",
			"and voila, now the cat says what I want it to.",
			"So again, even as you start to nest, that is, place these puzzle pieces",
			"one on top of the other, all we're doing is passing in inputs",
			"and getting outputs.",
			"Doing something with those outputs and making them inputs, and so forth.",
			"That really is the paradigm, ultimately, of what it means to program.",
			"But we can make the cat do more interesting things.",
			"And just to have a little bit of fun with this,",
			"let me go ahead and dig in to this bottom icon",
			"at the bottom left of the screen.",
			"Scratch has these so-called extensions, where you can really",
			"make it do fancier things as well.",
			"And let me go to Text to Speech at the top right.",
			"So this is using a cloud-based service--",
			"that is some internet-based service--",
			"that's going to send the words that I type out on the internet.",
			"The internet, some server there, is going to respond with a verbalization",
			"now of what it is I just typed.",
			"So let me go ahead and try this.",
			"Let me get rid of the purple say function",
			"and replace it with this speak block.",
			"And let me go ahead and drag in the join puzzle piece",
			"here-- notice it's going to grow to fill,",
			"and I'm not going to use this one anymore.",
			"This time I'm going to hit Stop and I'm going to go ahead",
			"and hit Play once more and type in my name.",
			"And--",
			"COMPUTER: (FEMININE ROBOTIC) Hello, David.",
			"DAVID J MALAN: OK, not a very natural cat sound,",
			"but notice we can set the voice differently.",
			"So notice I can drag this puzzle piece.",
			"And you can even squeeze blocks inside of others.",
			"Notice that it can go wherever you want.",
			"I'll put it at the very top here.",
			"So I could put it in a couple of different places.",
			"Right now the default voice is alto.",
			"Squeak sounds appropriate.",
			"Let's try that.",
			"Typing in my name, David.",
			"COMPUTER: (HIGH PITCHED) Hello, David.",
			"DAVID J MALAN: All right.",
			"Still not very catlike.",
			"Ironically, there is a kitten voice, which if I change it to kitten,",
			"we'll now hear this.",
			"Type in my name and enter.",
			"COMPUTER: (HIGH PITCHED) Meow meow.",
			"DAVID J MALAN: OK, so it doesn't really matter at that point what I type in.",
			"But now this is amazing.",
			"Like, we've gone from just saying hello, world to hello,",
			"David, which is dynamically changing.",
			"If you were to type your name, obviously,",
			"it would say your name instead.",
			"And now, thanks to the cloud, that is, servers on the internet,",
			"we're converting automatically text that the human has just",
			"provided into a sound file--",
			"notes and durations and all of that--",
			"into something my computer can now play.",
			"Well, let's actually make this cat sound a little more like a cat.",
			"Let me go ahead and get rid of those blocks",
			"here, and let me go and give myself now from the sound category,",
			"how about this?",
			"Play sound meow until done.",
			"Now, this is a simple program.",
			"When the green flag is clicked, play sound meow until done.",
			"Here we go.",
			"I'm going to go ahead and hit Play.",
			"[MEOW]",
			"All right, that's it.",
			"If I want to hear the cat meow again, I got to do it again.",
			"[MEOW]",
			"OK, that's great.",
			"I could kind of amuse myself for a while by just clicking--",
			"[MEOW]",
			"--play, but--",
			"[MEOW]",
			"--surely we can do better than this.",
			"You can imagine this--",
			"[MEOW]",
			"--getting tedious quickly.",
			"So how might I get the cat to do this again and again?",
			"Well, you know what?",
			"Let me go ahead and let me just kind of grab a few of these.",
			"Meow, meow, meow, three times.",
			"So now that's two fewer times I have to hit the button.",
			"[MEOWING THREE TIMES RAPIDLY]",
			"All right.",
			"It doesn't seem like the happiest cat.",
			"So let me actually go to Control and let me give him a second break in between.",
			"Wait one second in between here.",
			"Now let me do it again.",
			"[MEOWING THREE TIMES]",
			"OK, slightly happier cat.",
			"But this seems a little messy now.",
			"This is correct.",
			"It is meowing three times.",
			"But let me go to the audience.",
			"Let's now consider design.",
			"Recall that we considered design in the context of the phone book.",
			"The third algorithm was better designed in that it was faster,",
			"it was more efficient, but there's another element",
			"to design, which is that you shouldn't repeat yourself if possible.",
			"So those of you who have programmed before",
			"might know what the solution here might be.",
			"Well, it turns out that go back to line three, we call a loop.",
			"Turns out Scratch supports these things called loops.",
			"And, in fact, there's one staring at me right here.",
			"If I zoom in on the left, notice that under the control blocks,",
			"these orange blocks there's a repeat block.",
			"And even though it says 10 by default, I bet we can change that.",
			"So let me drag that over here.",
			"Let me throw away a lot of this redundancy, this copy paste.",
			"Let me move these puzzle pieces inside of the repeat block,",
			"and it, too, will grow to fit them.",
			"Not a problem.",
			"Let me change the repeat to three.",
			"And now let me reconnect everything.",
			"And now the program is just tighter.",
			"It's using fewer puzzle pieces, or fewer lines of code,",
			"fewer steps, if you will, to achieve the same result.",
			"So now if I click the green flag--",
			"[MEOWING THREE TIMES]",
			"--it's still working.",
			"So you could imagine changing this to any number you want.",
			"There's even a forever block, where we could do it forever,",
			"if the cat's going to do this in perpetuity.",
			"But it's a better program now.",
			"Now it is better designed, because if I want to change the amount of time",
			"the cat is waiting or if I want to change",
			"the total number of times the cat meows, I",
			"can change those details in one place, not in one or two or three,",
			"as by copying and pasting those same puzzle pieces.",
			"Well, what about that forever loop?",
			"What if you do want to do something forever?",
			"What might I want to do?",
			"Well, let's get the cat up and moving.",
			"Let me go under the motion category now.",
			"Let me go to point towards mouse pointer.",
			"So let me zoom in on this.",
			"And every time the cat points toward the mouse pointer,",
			"let's have him take one step.",
			"So I'm going to grab the move some number of steps,",
			"and I'm going to change the 10 to a one.",
			"And now I'm going to hit Play.",
			"And now we have our first program where the cat is",
			"kind of responding to my Mac's cursor.",
			"And I can move it around, and I can kind of get a little goofy,",
			"but it's taking me literally.",
			"It's pointing at the mouse cursor and it's then moving one step.",
			"Now, I can make it move faster.",
			"Let me stop this for a second.",
			"What if I move not one step at a time, but two steps at a time?",
			"And we'll see that now the cat is moving a little faster.",
			"Not quite super fast.",
			"Let's do 20 steps at a time and see what happens.",
			"And this is really the essence of animation.",
			"The more you adjust the number of steps or the number of changes happening",
			"to those pixels per second or per unit of time,",
			"the more that's going to happen visually on the screen.",
			"Well, what more can we do from just following?",
			"Well, you know what?",
			"If I have the ability now to have the cat follow me,",
			"let me try something else altogether.",
			"Let me go ahead and open up another extension.",
			"Let me go into the Pen tool, which is going",
			"to allow me now to draw with, like, a pencil or pen on the screen.",
			"And let me go ahead and still have the cat follow me, I think--",
			"actually, you know what?",
			"Let's change this.",
			"Let's just have him go to where I am.",
			"So there's another block that says go to random position.",
			"I don't want that.",
			"So I'm going to change it by the little triangle menu",
			"here, to go to the mouse pointer.",
			"So now, forever, the cat's just going to go to where the mouse pointer is.",
			"It's not going to glide or do it slowly or quickly.",
			"It's just going to go to wherever the cursor is.",
			"And let me go now to this new Pen category down below.",
			"And how might I do this?",
			"You know what I want?",
			"I want this cat to be able to draw for me.",
			"When I move the cursor up, down, left, right, I",
			"want to actually draw something with ink on the screen.",
			"But I only want to draw something when the pen is down.",
			"Notice on the left that two of the two puzzle pieces I just introduced over",
			"here at left are pen down and pen up.",
			"But there's a piece of missing logic here.",
			"Let me ask the audience how might we go about enhancing this program",
			"so not only does the cat follow my cursor, but I also draw on the screen?",
			"Nicholas, what kinds of solutions would you propose?",
			"AUDIENCE: So what you could do is take an if statement--",
			"so you can control when the pen is up or when the pen is down,",
			"depending on some condition that you have.",
			"Like, I know a lot of things, you draw with the mouse click,",
			"if the mouse is on, then you can say the pen is down.",
			"And when the mouse click is not on, your pen is up.",
			"And then while it follows it forever it also",
			"senses to see if your mouse click is on or off.",
			"I don't really know.",
			"DAVID J MALAN: No, you really do know.",
			"That was, like, perfect.",
			"Because you took this principle of having the forever",
			"block not only go to the mouse pointer, but you proposed",
			"asking a question by a condition.",
			"So let me actually go under Control, where",
			"I happen to know this puzzle piece is, and notice similar to our phone book",
			"pseudocode, where I said if else, if else, if else, well,",
			"here there's only two questions, I think, as you're proposing.",
			"Is the mouse button down or up?",
			"So I think we can get away with just an if else.",
			"So let me go ahead and drag this below the go to mouse pointer.",
			"And then notice this little trapezoid-like shape in the middle",
			"here.",
			"Let me go to Sensing here.",
			"And notice if I scroll down-- yep, there it is.",
			"On the left, notice this one?",
			"Mouse down, question mark?",
			"These are our Boolean expressions.",
			"Let me drag that Boolean expression into that similar shape.",
			"It's going to grow to fit it.",
			"And then what do I want to do?",
			"If the mouse is down, I think I want to put the pen down.",
			"Else, if the mouse is implicitly up, let me go ahead and put the pen up",
			"like this.",
			"Well, let me go ahead and full screen this, just",
			"so we can see a little better.",
			"Let me hit Play.",
			"And now the cat is following me, as promised.",
			"But this is now a drawing cat.",
			"If I click the mouse button, I can say something like, very poorly in cursive,",
			"Hello.",
			"Sort of.",
			"Been a long time since I've done cursive.",
			"So we now have the cat actually drawing something.",
			"And honestly, it's a little ridiculous that it's a cat drawing.",
			"But you know what?",
			"Scratch has these costumes.",
			"We could go at top left here, and even though Scratch comes with two cat",
			"costumes, we could change it to be a pen or a marker or, really, anything",
			"we want.",
			"Because at the end of the day, this sprite",
			"is really just a character on the screen that",
			"can take any form that we might want.",
			"Well, how can we take this further?",
			"I like this introduction of conditions and loops,",
			"but there's some other principles we can introduce here.",
			"Let me go ahead and start a new program here altogether.",
			"And let's see if we can't start counting up",
			"and start keeping track of information.",
			"So for this time, let's do this.",
			"When the green flag is clicked, this time let's go under variables",
			"and let's give ourselves a new variable.",
			"Scratch lets you create puzzle pieces, this one being a variable,",
			"and I'm going to call this a counter.",
			"Just something that's going to keep count from one on up.",
			"Now this has given me some custom puzzle pieces over here",
			"called counter, and then the default my variable, which was there already.",
			"And I'm going to go ahead and do this.",
			"I'm going to set the counter initially equal to one.",
			"And then I'm going to do something forever.",
			"Let me grab one of those forever blocks.",
			"And I want the cat now to do this forever.",
			"I want it to just say whatever the current count is.",
			"So I don't want it to say hello for two seconds.",
			"I want it to say something for one second, let's say.",
			"So I'm going to go back to variables.",
			"And I'm going to grab this new circular shape, counter, that I created",
			"and drag it right there.",
			"So you can read this literally top to bottom.",
			"So counter to one, then forever say the counter for one second.",
			"But if we don't want the cat to say the same number again and again and again,",
			"let's go ahead and change the counter by one.",
			"And that's implicitly going to add one to the counter.",
			"Now if I go ahead and hit Play, we see a cat",
			"that's counting from one to two to three,",
			"and it's going to count up, ideally, all the way to infinity.",
			"The difference being now, we have this feature",
			"of actually using a variable, a variable that's keeping",
			"track of some amount of information.",
			"In this case, the number that's constantly being updated,",
			"and the screen is being redrawn again and again.",
			"Well, now let me go ahead and just start opening",
			"a few programs that I wrote in advance, just",
			"so that we can get a tour of some of those.",
			"I've got this program called Bounce that works a little something like this.",
			"And this, too, is part of programming.",
			"Not only writing your own code, but reading your own code.",
			"And let me go ahead and zoom in on this, which I've already created,",
			"and consider what it says.",
			"First set, rotation style, left, right.",
			"This is just a fix what would otherwise be a bug where the cat accidentally",
			"ends up upside down.",
			"But let me wave my hand at that.",
			"This is the interesting part.",
			"Forever have the cat moved 10 steps.",
			"And then if it's touching the edge, then turn around 180 degrees.",
			"So now we can reintroduce the idea of animation.",
			"But not that's driven by me, the human, with my cursor.",
			"I can now make a game, and interactive piece of art, or anything",
			"now where the cat is self-driven.",
			"Because when I hit Play now, notice that it's",
			"moving back and forth, back and forth.",
			"And if it is touching the edge and the answer",
			"to that Boolean question is, actually, yes or true or one,",
			"then it's going to turn 180 degrees.",
			"But this looks kind of stupid, admittedly.",
			"You know, one, the cat, yes, is bouncing off the screen,",
			"which is maybe a little unrealistic.",
			"But he's not really walking.",
			"He's gliding.",
			"But this is the thing about animation.",
			"Just as we noted before that videos, at the end of the day,",
			"are really just images flying across the screen--",
			"you know what?",
			"I bet we can create our own illusion of movement, just like in a real video,",
			"by taking not just one costume, the cat with his feet like this.",
			"What if we gave ourselves a second costume, where it's almost the same",
			"but his feet are slightly differently positioned?",
			"Just like the paper based flipbook that we looked at earlier.",
			"And you know what?",
			"I bet if I toggle between these two costumes,",
			"changing the condition of the cat again and again,",
			"I bet we can create the illusion of actual movement.",
			"And that's what we have here in this other bounce example.",
			"In this other bounce example, we have the cat now moving",
			"not only back and forth, but notice this purple puzzle piece.",
			"After it bounces off the edge, or considers bouncing off the edge,",
			"it constantly changes its costume to the next one, to the next one,",
			"to the next one, essentially alternating between the two.",
			"So now it's not quite perfect.",
			"Like, it has what we call very low frame rate.",
			"This is like watching a really bad animated GIF online",
			"that only has two different frames in it.",
			"But it looks more like he's walking and much less",
			"like he's gliding back and forth on the screen.",
			"So we can actually have some fun with this, too.",
			"Scratch support sounds.",
			"So, for instance, here's the meow we've heard before.",
			"[MEOW]",
			"I can record my own, though, if I click this little plus icon down here.",
			"Click Record, and allow Scratch to access my microphone.",
			"Click OK a couple of times.",
			"Here we go.",
			"Let me record my own voice.",
			"Ouch.",
			"All right.",
			"That's what the word Ouch looks like, at least when I pronounce it.",
			"I can trim off the beginning here.",
			"Let me save that.",
			"I'm going to give this recording a name, Ouch,",
			"and now let me go back to my code.",
			"And under the sound block, you know what?",
			"Let me go ahead and say this.",
			"If I'm touching the edge, not only do I want to turn 180 degrees.",
			"Now I can kind of make this a little more playful.",
			"COMPUTER: Ouch.",
			"Ouch.",
			"Ouch.",
			"DAVID J MALAN: All right.",
			"Still not very catlike, but again, we're just layering and layering.",
			"And the takeaway here really is, as these programs",
			"get more and more complicated, the goal should never be, when writing code,",
			"whether it's in Scratch or C or eventually",
			"Python in this class or others, to just start and try",
			"to implement your entire vision.",
			"Notice with every one of these programs that I wrote from scratch,",
			"no pun intended, did I start small and add one or two or three puzzle",
			"pieces, building up from something simple to something more complex.",
			"And you know what?",
			"I bet if we synthesize some of these ideas, we can do yet other things too.",
			"Here's another example that involves, perhaps, petting a cat.",
			"Let me go ahead and see inside this program.",
			"This one's relatively simple, but it's not doing anything just yet.",
			"I already hit the green flag.",
			"Let me Zoom in on the code, and you can, perhaps, now read my own code",
			"that I wrote in advance.",
			"The cat is forever asking the question, if touching mouse pointer then",
			"play that sound meow until done.",
			"Well, it would seem that even though the program is running,",
			"it's not doing anything.",
			"But it is.",
			"It's waiting for something to happen.",
			"So let me move my cursor over the cat like--",
			"[MEOW]",
			"--this.",
			"[MEOW]",
			"So it would seem, and if I leave it on there, he'll keep meowing.",
			"And it's kind of like a program that's petting a cat.",
			"And so you can imagine now having conditions",
			"inside of loops that are using Boolean expressions to decide",
			"exactly what you want something to do.",
			"And even more powerfully, even in a language like Scratch can we do this.",
			"Let me open up the sea lion here, who has a very distinct bark.",
			"But he's demonstrative now of a program that has multiple scripts.",
			"So inside of this Scratch project now, we're not just one program but two.",
			"Notice both of which start when a green flag is clicked.",
			"And let me put them both onto the screen.",
			"And it looks longer.",
			"But that's just because the puzzle pieces are growing to fit each other.",
			"Let's go ahead and hit Play on this.",
			"Play",
			"[SEA LION BARKING]",
			"Notice that every second or so, the sea lion is barking.",
			"And frankly, this gets annoying quickly.",
			"But how can I stop it?",
			"Well, let me go ahead and look over here on the left while it's still barking.",
			"Notice the sea lion is forever asking a question.",
			"If muted equals false, start sounds sea lion, think hi hi hi for two seconds.",
			"So what is muted?",
			"Well, the shape of it, recall, represents",
			"a variable, like x or y or z, which is just some way of retaining information.",
			"So this is like saying, is the value of the muted variable false?",
			"If so, you should bark, because if it's false muted, if it's not muted,",
			"go ahead and play the sea lion sound.",
			"But my god, lets-- on the right here, notice there's another program.",
			"When the green flag is clicked, forever ask the question.",
			"If the spacebar is pressed, then if muted is true,",
			"set muted to false, else set muted to true.",
			"So the program on the right is going to change the value of muted",
			"from false to true or true to false.",
			"Because, my god.",
			"I've hit the space bar--",
			"[SEA LION BARKING]",
			"And now it's over.",
			"The program is still running, but it's no longer",
			"playing because muted is now true and not false.",
			"Well, what else can we do?",
			"Things can get pretty fancy pretty quickly.",
			"Let me go ahead and create one other program here.",
			"And I'll go ahead and do one with just two blocks.",
			"This one-- let me go into the extensions again, video sensing this time,",
			"and notice there's different types of ways to start programs.",
			"Not every program has to start when you click the green flag.",
			"There's a similar shape here, but this one in green, that",
			"says when video motion is greater than 10.",
			"Like 10% of the screen is moving.",
			"Let me increase that to 50%.",
			"And let me go ahead and do this.",
			"Let me go ahead and find the sound puzzle piece.",
			"Play sound meow until done.",
			"So now I have a two block program.",
			"When video motion is more than 50, play sound meow until done.",
			"Let me zoom out.",
			"And you'll notice that I'm actually in the screen here.",
			"Let me move off stage.",
			"And now nothing is happening.",
			"Let me go and pet the cat, though.",
			"[MEOW]",
			"Let me do it again.",
			"[MEOW]",
			"And again.",
			"So it's using my computer's camera--",
			"[MEOW]",
			"--detecting motion, and then executing that particular program.",
			"So again, with just these simple building blocks,",
			"can we get more and more interesting things to happen.",
			"And you know what?",
			"We can even have multiple sprites.",
			"Let me go ahead and open up an old school game",
			"that you might have played in, like, a swimming pool, perhaps,",
			"growing up, where one person yells out Marco and the other people",
			"are supposed to yell out Polo.",
			"Notice here we have a program with two sprites.",
			"So two puppets, an orange puppet and a blue puppet.",
			"And down here at the bottom, for the very first time,",
			"We have two different sprites' abilities to write programs.",
			"So right now the orange puppet is selected,",
			"which means the program at top left here,",
			"up here, belongs to the orange puppet.",
			"And the orange puppet has been programmed",
			"to say forever, if the keyboard's space key is pressed,",
			"then say Marco for two seconds.",
			"And then here's the new feature.",
			"There's a way in programming to have, like, one program talk",
			"to another, or in this case, one sprite talk to another.",
			"Sort of passing a secret message that you don't see on the screen.",
			"But one program can hear from another.",
			"And that's called broadcasting an event.",
			"And that's what the orange puppet is doing.",
			"If I click on the blue puppet's icon here,",
			"he's not going to do very much at all.",
			"But instead of doing anything when the green flag is clicked,",
			"instead of doing something when the camera sees motion,",
			"he instead is going to, when he receives the event, say Polo for two seconds.",
			"And so in this case, if I hit Play now, nothing happens yet.",
			"But when I do hit the spacebar, orange says Marco, blue says Polo.",
			"But they are written independently.",
			"I've written one program for orange, one program for blue,",
			"and they're somehow communicating.",
			"And speaking of communicating, there's even",
			"more things you can do these days thanks to the internet and the cloud.",
			"Let me go ahead and open up one other new canvas here.",
			"Very quickly give myself a when green flag clicked.",
			"Let me go ahead and ask that same question before, ask what's your name",
			"and wait.",
			"But now let me go into these extensions and let",
			"me find the translate extension, which is, again,",
			"going to use the cloud to send whatever I type in out on the internet",
			"and get back a response, and then say it on the screen here.",
			"So let me go ahead and say something on the screen, like say hello.",
			"But I don't want to say hello.",
			"I want to go back to the Translate category,",
			"and I want to go ahead and translate--",
			"you know what?",
			"I like this block.",
			"Translate something to another language.",
			"But let me get one of those join blocks again, and let me go ahead",
			"and join the word hello and then the name that the person has typed in.",
			"So to get that, I need the answer block again.",
			"So I'm just recreating some of our blocks from earlier.",
			"And notice, before I just did this.",
			"I said the result of joining hello and answer, albeit with a comma last time.",
			"But now let's do this.",
			"Let me take the output of join, make it the input to translate.",
			"Let me translate, say, to Arabic here.",
			"Let me drag and drop into the say block.",
			"So now we have two inputs going into join, join's output going",
			"into the input of translate, and the output of translate going into say.",
			"But the net result is going to be I'll type in my name David and hit Enter.",
			"Hello, David, now in Arabic.",
			"All thanks to these principles of functions, conditions, and loops,",
			"and now even adding in the internet.",
			"Now let's consider finally, before we play a final couple of games.",
			"In conclusion, there's a way to even improve",
			"the design of a lot of what we've done.",
			"In fact, let me go back just a moment to where we left off with that meowing.",
			"And in one of our meowing examples, we had",
			"code that looked like this, where I repeated three times,",
			"recall, and I played the sound meow again and again and again.",
			"And I argued at the time that this was better designed.",
			"Why?",
			"Because I didn't just drag and drop the same puzzle piece again",
			"and again and again.",
			"I used a repeat block, I threw away all of the redundancy,",
			"and I've arguably kept it simple.",
			"I'm using some fancier ideas, but the code is simpler",
			"and it's fewer puzzle pieces now.",
			"But it turns out that there's a missed opportunity",
			"here to apply another principle of computer science,",
			"and this is what we would generally describe as abstraction.",
			"Abstraction is this amazing problem solving",
			"technique that's really just a fancy way of saying",
			"let's take a very complicated idea, or a slightly complicated idea",
			"and simplify it in such a way that we all agree that you can implement it",
			"the complicated way, but let's now just stipulate",
			"that we're going to think about it as on a more simple level.",
			"So let me go over to this same program.",
			"And you know what?",
			"Scratch, curiously, did not anticipate having a meow block.",
			"Like, there is a say block and there's a think block, but there's no meow block.",
			"And that seems appropriate for a program where it comes with a cat built in.",
			"So we can do this.",
			"Just as you can create your own variables, notice at bottom left here,",
			"you can create your own blocks with this pink category.",
			"And if I go here, I'm going to make a block",
			"and I'm going to call this block meow.",
			"And quite simply, I'm going to click OK.",
			"Now notice I get this new puzzle piece that says define meow.",
			"And it's ready to have other pieces connected to it.",
			"How am I going to define meow?",
			"I'm just going to go ahead and drag this over here, because I already",
			"implemented meow before.",
			"And now, notice what I have on the left hand side.",
			"Because I've just made this custom block or puzzle piece,",
			"I now have a pink piece called meow, just as though it came with Scratch.",
			"And now what's compelling about this is that I can sort of think",
			"of this as out of sight, out of mind.",
			"Who cares how meow is implemented?",
			"We know we implemented it earlier.",
			"Let's now just stipulate that we can take for granted it exists.",
			"And if I zoom in now on the new program, now it's more readable in some sense.",
			"It's a little shorter.",
			"It has a fewer puzzle piece.",
			"But it also is more self-descriptive.",
			"I can read my code.",
			"I can look at this code and say, OK, it's",
			"obviously going to repeat three times a meow block.",
			"But let's play that.",
			"[MEOW]",
			"It's no different.",
			"[MEOW]",
			"Two.",
			"[MEOW]",
			"But I bet we can simplify this one step further and make",
			"it a little more flexible.",
			"Let me go ahead and right click or control click on the meow custom block.",
			"And let me actually add an input here that we'll call n.",
			"And let me just add a label that says times.",
			"And let me go ahead and click OK.",
			"And notice that my puzzle piece now looks different.",
			"It looks more like some of MIT's blocks that take input",
			"with these little white ovals.",
			"And, in fact, now notice what I can do.",
			"I can change the definition of meow, as Scratch already has for me,",
			"such that I can now do more inside.",
			"Let me actually disconnect all of this stuff.",
			"Let me move the repeat block to the definition of meow itself.",
			"Let me go ahead and play the sound and wait inside of that repeat block,",
			"but notice this little circle around the end.",
			"Let me just repeat an arbitrary number of times now.",
			"I don't have to worry about hard coding three or 10 or anything else.",
			"And now, out of sight, out of mind, don't have to worry about that anymore.",
			"Let's now just whittle down that increasingly complicated program",
			"that we wrote earlier into, really, just two puzzle pieces.",
			"When the green flag is clicked, meow, sure, three times.",
			"I don't have to know or care any more how meow is implemented.",
			"I just need to know that someone did it for me, whether MIT or maybe",
			"myself, minutes ago.",
			"I'll click play again.",
			"[MEOWING THREE TIMES]",
			"Two, and three.",
			"And so now we have an implementation of abstraction.",
			"Taking a somewhat complicated idea, like getting a cat to meow,",
			"not worrying about the so-called implementation details,",
			"and just defining a puzzle piece or function called meow.",
			"Well, now let's take all of this together",
			"and see some of the creations of some of your predecessors in past terms.",
			"Here, for instance, is a sort of story that one of your classmates years ago",
			"made involving a gingerbread tale.",
			"Let me go ahead and full screen this and click Play.",
			"[MUSIC PLAYING]",
			"And you'll see now that we have multiple sprites already, each of which",
			"have different costumes, and I'm being asked a question.",
			"Would you like an apple?",
			"Yes or no.",
			"So I'm no longer being asked my name.",
			"I'm being asked arbitrary questions.",
			"Sure.",
			"Let me go ahead and have an apple.",
			"I type in yes and hit Enter.",
			"Notice the movement.",
			"We've seen movement before.",
			"[CHOMPING SOUNDS]",
			"[MUSIC PLAYING]",
			"OK, unfortunately, that was the wrong decision to make in this story.",
			"So that's OK.",
			"Let's start it again.",
			"Red stop sign.",
			"[MUSIC PLAYING]",
			"Green flag.",
			"Hello dearie, would you like an apple?",
			"No, let's learn from that lesson.",
			"Cupcake sounds much better.",
			"I'll type yes this time.",
			"Notice, again, the motion.",
			"So there's some animation there.",
			"It's touching the other sprite.",
			"That, too, was unfortunate.",
			"Let's try one last time with this art.",
			"And now we have an apple, no.",
			"Learned a lesson.",
			"Cupcake, no.",
			"Learned a lesson.",
			"OK, now let's see what happens with that loop.",
			"[CACKLING]",
			"[SCREAMING]",
			"[CHOMPING SOUNDS]",
			"OK, surprise ending.",
			"But this is all to say that by taking these building blocks of loops,",
			"conditions, and functions, can you start to make things",
			"that are a little more interactive.",
			"In fact, I myself did something years ago-- the very first thing",
			"I myself wrote in Scratch was actually when I was in graduate school",
			"and cross-registered for a class at MIT, the professor for which",
			"was the author of and the originator of Scratch itself.",
			"And let me go ahead and full screen this and propose",
			"how I thought about solving, now, a fairly large problem back in the day.",
			"Drag as much falling trash into the can as you can.",
			"So what's happening now?",
			"A piece of trash is falling on the screen.",
			"You'll see that it's moving from the top to the bottom,",
			"and we've seen animations like that.",
			"But watch this.",
			"I bet using a condition and a forever loop,",
			"we can make it possible to pick this up.",
			"Notice now the trash is following my cursor, just like the cat was.",
			"And notice if touching this other trash can sprite,",
			"maybe we can even get Oscar to pop out of the can.",
			"And he, then, starts counting up my score, thereby using a variable,",
			"and indeed, as more sprites or more trash falls,",
			"I can continue to play a game in this way.",
			"But here, too, even though things are starting to happen more quickly,",
			"there's more on the screen, the song is playing in the background,",
			"it all reduces to basic building blocks.",
			"And I can't emphasize enough.",
			"When I wrote that first program years ago,",
			"I did not implement what you just saw.",
			"I think the very first thing I did was I googled around",
			"and found Sesame Street's street lamp and I put that on the screen.",
			"And that was sort of version one.",
			"It didn't do anything, but it looked like what I want.",
			"Then I added the trash can.",
			"Then I think I programmed one piece of trash or one sprite to fall.",
			"So I changed the cat to a piece of trash and then",
			"I had it animate from top to bottom.",
			"Then version four or five, I then added a forever loop",
			"and a condition that checks if the mouse button is down,",
			"and if so, I have it follow the mouse pointer.",
			"So I took a big problem and broke it down bit by bit",
			"into much smaller steps.",
			"And this was the same approach that CS50's own Andrew Berry took years ago,",
			"one of our teaching fellows.",
			"The very first year I taught CS50, created his very own first Scratch",
			"project that I thought I'd leave us with here today.",
			"This is a program that he called Raining Men.",
			"It might have a familiar tune, and I would",
			"propose that you consider, when watching this,",
			"our final Scratch program today, how it is that Andrew went about programming",
			"everything that you see.",
			"Now Andrew went off into the real world and didn't pursue computer science,",
			"per se.",
			"He's actually now the general manager for the Cleveland Browns,",
			"which is an American football team.",
			"But this, too, speaks to just what kind of foundation you",
			"can form, irrespective of your intended major, your possible major,",
			"considering, after all, that a lot of the ideas we're going to focus on",
			"in this class are ultimately about problem solving,",
			"programming being just one tool for the trade.",
			"And, indeed, even within the world of sports,",
			"are there so many opportunities nowadays for algorithms, for analysis,",
			"for video simulations thereof, and so many of Andrew's worlds",
			"and your worlds will invariably start to collide",
			"as you begin to build up your own toolkit",
			"and your own understanding thereof.",
			"So in conclusion, we'll take a look at this, Andrews program.",
			"In the meantime, this was CS50, and now it's raining men.",
			"[MUSIC - \"IT'S RAINING MEN]",
			"",
			"COMPUTER: Hi.",
			"Hi.",
			"We're your weather girls.",
			"Uh huh.",
			"And have we got news for you.",
			"You better listen.",
			"Get ready, all you lonely girls, and leave those umbrellas at home.",
			"All right.",
			"(SINGING) Humidity's rising, barometer's getting low.",
			"Oh.",
			"Uh oh.",
			"According to all sources--",
			"What sources now?",
			"The street's the place to go.",
			"'Cause tonight for the first time, at just about half past 10,",
			"for the first time in history it's gonna start raining men!",
			"It's raining men, hallelujah, it's raining men--",
			"[MUSIC PLAYING]",
			""
		],
		"is_youtube": false
	},
	"video_002": {
		"section": "CS50x 2021",
		"subsection": "Week 1",
		"unit": "Lecture",
		"video_sources": [
			"https://edx-video.net/d750ca8c-a505-45a6-b210-cf777d1dacd7.m3u8",
			"https://edx-video.net/d750ca8c-a505-45a6-b210-cf777d1dacd7-mp4_720p.mp4"
		],
		"video_duration": 8207,
		"speech_period": [
			2.97, 47.08, 2.43, 2.85, 4.0, 0.5, 2.88, 2.43, 3.48, 2.73, 3.21, 1.56,
			4.56, 2.31, 2.43, 3.33, 1.56, 2.13, 3.085, 1.625, 3.12, 1.98, 2.738,
			2.042, 2.24, 2.43, 4.245, 3.555, 4.26, 2.323, 3.167, 4.05, 0.765, 1.875,
			2.19, 4.633, 2.417, 3.0, 1.02, 2.29, 3.11, 1.95, 2.61, 3.9, 2.38, 3.51,
			2.34, 4.46, 1.678, 1.292, 3.09, 2.73, 2.76, 3.72, 1.72, 3.59, 1.77, 1.35,
			2.62, 3.98, 2.04, 3.66, 2.97, 3.09, 3.99, 1.62, 1.17, 2.25, 3.3, 1.86,
			2.078, 1.792, 3.45, 1.62, 1.8, 1.86, 4.36, 3.38, 2.73, 1.949, 1.531, 1.83,
			2.88, 3.51, 1.68, 2.31, 2.67, 3.79, 4.01, 2.86, 3.05, 2.7, 1.71, 2.91,
			4.69, 3.453, 2.417, 2.64, 2.01, 2.91, 2.093, 1.667, 2.21, 1.875, 1.7,
			2.125, 4.39, 3.14, 2.94, 2.43, 4.63, 2.69, 3.29, 5.1, 4.373, 2.167, 2.22,
			2.49, 4.39, 2.43, 1.67, 4.41, 2.64, 1.62, 2.19, 3.75, 2.64, 2.715, 1.875,
			1.24, 2.0, 2.1, 4.62, 1.81, 3.17, 3.06, 4.17, 2.37, 2.19, 2.73, 1.86,
			2.19, 3.09, 2.43, 2.64, 2.89, 3.44, 3.478, 1.542, 2.97, 3.26, 1.15, 2.36,
			3.04, 1.92, 3.02, 2.05, 3.265, 1.375, 3.57, 4.245, 2.625, 1.05, 3.18, 3.6,
			1.92, 2.07, 3.12, 4.32, 3.96, 1.59, 3.36, 6.179, 1.571, 2.797, 2.083,
			1.292, 1.888, 2.31, 3.9, 2.25, 2.28, 3.96, 0.81, 2.64, 4.29, 3.27, 2.65,
			2.36, 1.99, 3.83, 4.95, 3.27, 2.49, 2.01, 2.79, 2.74, 2.0, 3.3, 2.25,
			3.37, 3.51, 2.16, 1.29, 5.18, 3.18, 4.08, 2.82, 1.92, 2.28, 5.31, 3.06,
			4.48, 3.83, 0.907, 0.833, 1.333, 1.804, 0.583, 3.265, 0.875, 2.13, 4.26,
			3.13, 4.19, 2.19, 3.66, 1.86, 4.35, 3.31, 1.94, 2.79, 2.49, 4.92, 2.7,
			2.13, 2.86, 2.18, 4.14, 2.76, 1.615, 3.125, 2.28, 3.66, 1.59, 1.36, 2.36,
			1.65, 1.0, 3.32, 3.36, 2.97, 5.46, 2.79, 1.92, 1.95, 4.38, 4.21, 0.5,
			3.84, 3.78, 0.66, 1.8, 1.95, 3.24, 3.3, 2.65, 2.45, 5.28, 2.46, 2.58,
			3.39, 3.66, 3.45, 1.09, 2.48, 1.948, 2.792, 1.83, 2.94, 3.21, 1.62, 1.77,
			3.09, 3.15, 2.49, 3.48, 3.39, 1.5, 1.68, 1.47, 3.18, 0.96, 2.82, 0.6,
			3.51, 2.73, 2.76, 2.49, 3.33, 4.56, 2.64, 4.35, 3.593, 2.167, 3.63, 3.958,
			2.042, 1.41, 2.25, 3.93, 0.99, 1.98, 3.04, 3.08, 2.148, 3.042, 1.81, 2.46,
			2.51, 1.98, 2.04, 1.77, 3.36, 3.66, 4.47, 0.82, 2.18, 2.52, 2.11, 2.0,
			4.26, 1.68, 4.05, 4.32, 4.32, 3.42, 2.53, 1.25, 1.62, 1.38, 0.96, 2.917,
			2.853, 3.53, 2.61, 3.31, 2.45, 2.53, 2.21, 4.242, 2.208, 2.94, 1.71, 3.15,
			3.51, 3.99, 1.333, 2.334, 2.093, 3.27, 4.18, 2.719, 5.188, 1.333, 1.52,
			2.292, 2.958, 4.33, 2.67, 3.59, 0.81, 1.99, 4.73, 2.61, 3.66, 1.38, 4.11,
			1.353, 2.667, 2.22, 3.51, 4.38, 5.4, 2.04, 3.9, 3.63, 3.81, 1.71, 1.92,
			3.06, 0.93, 3.69, 4.288, 2.792, 3.78, 1.72, 1.76, 2.34, 3.24, 2.85, 2.41,
			3.17, 2.28, 3.63, 4.11, 4.77, 5.76, 5.13, 3.63, 3.378, 1.542, 2.7, 2.07,
			2.79, 4.44, 2.67, 4.23, 2.37, 4.71, 2.29, 3.53, 3.0, 3.88, 2.475, 1.875,
			4.11, 4.08, 2.91, 1.232, 1.708, 3.28, 2.84, 2.28, 0.9, 0.6, 1.09, 0.93,
			1.82, 3.06, 2.94, 2.19, 3.27, 1.5, 1.8, 3.0, 4.29, 4.53, 2.18, 1.75, 2.52,
			2.02, 4.25, 2.31, 1.34, 3.55, 1.39, 4.25, 3.93, 2.76, 4.89, 3.24, 1.92,
			3.69, 2.41, 3.02, 3.39, 3.03, 2.22, 2.76, 2.95, 2.15, 3.63, 3.81, 3.96,
			1.77, 4.02, 3.33, 2.01, 4.63, 2.9, 1.74, 1.98, 3.06, 2.55, 2.07, 3.6,
			1.66, 2.998, 2.542, 1.59, 1.75, 1.67, 1.075, 0.875, 3.09, 4.02, 1.83,
			1.723, 3.167, 3.03, 3.78, 3.06, 0.97, 2.24, 4.23, 1.87, 3.02, 2.7, 4.27,
			3.02, 2.76, 2.25, 4.77, 3.66, 2.22, 2.04, 2.01, 2.52, 3.51, 6.42, 1.98,
			4.78, 1.71, 4.19, 2.19, 5.5, 3.38, 5.53, 1.1, 2.43, 3.81, 2.91, 4.14,
			4.11, 2.64, 2.21, 1.75, 1.667, 1.963, 4.08, 4.38, 4.17, 4.5, 1.955, 1.375,
			2.38, 5.0, 2.13, 4.133, 1.417, 1.14, 2.55, 2.76, 4.05, 3.6, 3.24, 4.68,
			3.45, 2.94, 2.43, 2.82, 3.76, 1.58, 3.15, 5.19, 1.917, 1.833, 2.79, 3.18,
			4.09, 2.06, 7.49, 3.64, 3.03, 2.85, 2.19, 3.81, 0.72, 0.987, 1.083, 1.6,
			2.54, 4.33, 4.25, 6.36, 2.67, 3.06, 2.56, 3.69, 3.72, 3.27, 3.45, 1.68,
			1.203, 1.167, 2.265, 3.225, 3.12, 1.74, 2.76, 2.17, 3.83, 4.14, 3.99,
			1.052, 2.458, 1.5, 3.132, 1.458, 2.562, 1.458, 2.79, 3.742, 1.958, 3.9,
			2.4, 2.77, 2.63, 2.88, 1.38, 2.58, 2.85, 0.93, 2.61, 3.782, 2.458, 0.833,
			2.047, 1.988, 1.792, 6.39, 1.8, 2.7, 2.46, 1.29, 2.22, 2.79, 3.48, 6.56,
			2.245, 1.625, 4.6, 6.9, 3.015, 0.875, 0.93, 3.21, 1.92, 3.67, 4.672,
			1.708, 2.61, 1.59, 1.2, 5.52, 4.11, 1.39, 1.792, 2.278, 3.06, 3.21, 2.91,
			2.13, 3.04, 3.68, 5.4, 1.385, 0.625, 1.0, 3.35, 2.67, 1.71, 1.45, 0.48,
			0.925, 1.875, 4.24, 2.61, 2.7, 2.07, 2.38, 3.59, 4.17, 2.94, 2.85, 1.365,
			1.875, 1.78, 3.56, 0.875, 2.708, 1.937, 2.875, 2.835, 4.04, 0.9, 0.87,
			1.013, 1.417, 1.708, 3.332, 3.113, 1.417, 3.39, 3.06, 1.62, 1.903, 1.667,
			3.06, 2.01, 3.27, 4.095, 3.02, 0.625, 2.25, 1.98, 4.32, 3.07, 3.65, 2.7,
			3.03, 2.31, 7.59, 2.44, 3.92, 1.96, 3.24, 4.099, 2.311, 2.399, 1.75,
			2.661, 3.27, 6.21, 1.98, 1.709, 4.741, 1.98, 2.19, 3.61, 2.87, 2.7, 2.627,
			0.583, 2.82, 4.32, 3.555, 1.583, 2.242, 2.37, 4.47, 3.0, 5.22, 3.36, 3.27,
			2.64, 2.16, 2.08, 3.59, 4.09, 5.24, 0.51, 1.92, 2.88, 1.68, 1.95, 1.47,
			2.52, 3.03, 2.383, 2.417, 3.69, 2.07, 4.68, 2.16, 4.17, 5.01, 1.2, 2.58,
			4.05, 2.7, 4.29, 2.1, 2.49, 2.342, 1.708, 1.83, 3.63, 3.52, 4.7, 5.1,
			3.16, 3.17, 3.12, 3.24, 1.92, 1.35, 2.41, 2.9, 2.32, 3.32, 6.27, 2.43,
			2.17, 4.79, 2.76, 2.46, 2.132, 1.708, 3.06, 1.5, 2.01, 2.85, 2.64, 1.86,
			4.44, 4.2, 3.82, 1.25, 2.04, 2.97, 3.57, 3.81, 5.01, 3.9, 4.18, 2.36,
			3.06, 4.5, 2.55, 1.86, 1.8, 1.98, 2.91, 3.333, 1.557, 3.72, 4.05, 1.05,
			1.68, 3.028, 2.042, 2.91, 2.55, 1.8, 3.09, 3.78, 2.59, 2.84, 2.11, 2.15,
			3.3, 3.1, 3.42, 2.54, 4.603, 2.667, 2.69, 5.31, 3.57, 5.55, 2.16, 2.28,
			1.45, 2.0, 2.04, 1.02, 4.99, 4.7, 2.4, 3.06, 1.65, 3.03, 3.27, 2.282,
			2.458, 1.792, 2.858, 2.76, 3.03, 2.07, 3.45, 4.62, 3.24, 2.67, 3.87, 2.37,
			2.1, 3.36, 3.18, 3.37, 4.61, 2.58, 2.46, 1.51, 2.72, 1.2, 2.07, 2.085,
			2.625, 3.06, 3.75, 4.44, 3.06, 1.96, 3.71, 3.39, 4.83, 3.36, 2.79, 4.23,
			2.61, 2.34, 4.17, 1.71, 2.49, 5.04, 2.01, 2.73, 2.25, 1.56, 1.39, 3.74,
			3.6, 5.393, 1.417, 1.417, 1.913, 2.79, 2.14, 3.56, 2.07, 2.31, 1.65,
			2.997, 1.833, 1.74, 3.84, 2.91, 4.26, 2.79, 4.05, 2.07, 2.19, 2.38, 1.82,
			4.56, 2.49, 2.01, 4.08, 2.34, 5.34, 2.7, 2.58, 1.89, 2.4, 1.59, 1.67,
			1.998, 2.292, 1.74, 1.43, 2.5, 3.43, 2.64, 2.54, 1.53, 3.76, 1.28, 1.41,
			1.71, 2.13, 4.63, 2.21, 4.44, 4.77, 1.86, 4.14, 2.2, 4.95, 1.37, 1.92,
			2.16, 2.16, 2.16, 3.78, 1.86, 1.72, 3.38, 3.9, 2.97, 1.65, 3.21, 2.61,
			1.65, 4.26, 1.75, 2.42, 1.227, 1.833, 1.86, 1.74, 0.512, 1.708, 3.76,
			6.125, 1.875, 4.02, 2.13, 4.17, 3.15, 2.758, 0.542, 1.707, 2.583, 2.28,
			2.805, 1.125, 3.097, 3.083, 1.68, 3.66, 2.61, 2.34, 2.58, 3.6, 3.48,
			2.307, 2.583, 2.07, 2.16, 3.15, 2.46, 2.46, 2.34, 1.74, 1.08, 4.71, 2.37,
			1.75, 3.62, 2.88, 3.15, 4.5, 3.63, 1.512, 2.958, 2.04, 2.88, 3.36, 2.73,
			2.373, 2.667, 2.37, 4.98, 2.31, 4.05, 4.05, 4.53, 2.55, 2.1, 2.01, 0.72,
			3.06, 1.71, 1.59, 1.32, 2.658, 2.622, 2.55, 4.59, 3.85, 3.23, 3.93, 2.46,
			2.16, 4.23, 0.99, 3.36, 2.26, 3.38, 2.88, 1.91, 3.01, 4.81, 5.33, 2.38,
			2.27, 6.03, 1.77, 2.82, 4.47, 1.77, 1.87, 3.77, 2.16, 3.66, 1.71, 4.38,
			2.07, 2.76, 3.69, 2.22, 2.55, 3.09, 4.47, 1.41, 1.32, 3.45, 4.11, 2.79,
			2.1, 2.85, 3.09, 1.35, 5.4, 1.26, 0.9, 1.08, 6.075, 2.385, 6.27, 1.74,
			1.59, 1.89, 3.645, 1.125, 4.9, 2.81, 3.84, 1.2, 4.83, 2.76, 5.25, 2.13,
			3.6, 3.99, 2.34, 3.03, 4.59, 1.35, 3.0, 2.55, 3.51, 2.23, 2.03, 1.65, 1.2,
			2.43, 3.27, 3.27, 2.64, 2.88, 1.71, 2.76, 3.93, 1.2, 3.57, 1.49, 6.28,
			2.31, 4.05, 2.76, 3.63, 3.58, 3.56, 2.4, 5.02, 3.5, 1.47, 1.99, 1.58,
			4.78, 3.47, 3.75, 2.13, 1.86, 4.05, 2.43, 1.95, 1.83, 2.28, 2.11, 2.06,
			2.833, 2.597, 3.99, 2.22, 1.65, 2.22, 2.28, 3.55, 4.43, 3.09, 3.03, 3.33,
			3.33, 3.16, 3.71, 3.923, 2.167, 2.97, 2.1, 2.7, 2.4, 6.03, 2.16, 3.11,
			4.49, 2.09, 3.07, 2.3, 5.038, 2.042, 2.52, 2.16, 2.292, 1.938, 2.7, 4.15,
			4.548, 3.042, 3.125, 3.145, 3.72, 1.99, 3.69, 3.86, 4.92, 4.71, 4.41,
			2.52, 3.0, 1.89, 2.4, 3.12, 2.67, 3.15, 2.88, 2.34, 4.635, 2.835, 4.32,
			1.53, 2.64, 3.63, 4.08, 1.2, 4.09, 3.8, 4.835, 2.125, 1.83, 4.92, 1.47,
			3.55, 3.26, 1.56, 2.64, 1.71, 2.52, 2.86, 3.74, 4.29, 4.05, 2.97, 4.65,
			4.17, 5.04, 3.14, 2.38, 1.53, 1.98, 3.09, 3.99, 2.77, 3.637, 2.083, 4.83,
			3.12, 1.62, 3.75, 2.46, 1.71, 2.29, 3.35, 4.2, 1.44, 3.69, 3.19, 1.97,
			3.6, 3.66, 2.82, 1.77, 1.98, 2.82, 1.98, 3.33, 5.22, 3.21, 1.71, 3.46,
			2.72, 1.98, 4.29, 2.25, 2.358, 0.542, 0.61, 0.63, 2.31, 1.2, 4.03, 1.25,
			2.732, 2.458, 1.74, 1.78, 4.07, 3.93, 4.53, 0.78, 2.31, 2.7, 3.6, 1.11,
			2.208, 1.722, 3.12, 1.81, 1.73, 3.84, 4.77, 4.273, 3.167, 0.5, 1.93, 2.61,
			3.96, 2.28, 0.6, 4.26, 3.78, 2.46, 3.45, 1.77, 5.22, 4.08, 3.84, 3.81,
			1.65, 2.08, 2.33, 4.11, 2.64, 4.0, 2.69, 4.23, 1.74, 2.82, 2.4, 3.48,
			2.94, 1.89, 2.64, 2.79, 5.67, 2.19, 2.88, 2.73, 2.82, 4.77, 2.43, 6.45,
			4.44, 2.4, 3.39, 2.94, 1.68, 4.29, 3.78, 1.02, 2.97, 3.3, 5.46, 3.15,
			3.18, 3.7, 3.333, 2.972, 3.63, 2.295, 2.745, 2.625, 1.41, 2.28, 2.072,
			2.458, 2.94, 2.1, 2.97, 4.14, 0.808, 1.292, 4.68, 1.48, 2.48, 4.69, 0.5,
			2.76, 4.18, 2.51, 3.63, 2.437, 3.083, 2.64, 3.66, 0.81, 3.69, 2.61, 1.198,
			1.292, 4.77, 4.86, 2.7, 1.89, 3.93, 3.12, 2.43, 2.79, 1.87, 2.91, 2.03,
			5.55, 1.81, 4.7, 2.91, 2.85, 1.65, 4.17, 2.807, 2.083, 3.54, 2.82, 3.55,
			3.259, 3.511, 1.92, 4.35, 2.37, 2.82, 2.489, 1.801, 3.18, 4.109, 5.25,
			3.241, 3.04, 4.25, 2.339, 1.651, 3.63, 3.28, 3.418, 1.792, 3.059, 3.241,
			2.1, 3.732, 2.208, 2.89, 2.06, 5.55, 3.03, 1.81, 1.43, 3.0, 1.695, 1.875,
			3.09, 3.0, 1.59, 3.195, 1.875, 2.52, 3.57, 3.12, 3.75, 1.89, 1.875, 2.145,
			2.94, 3.3, 2.94, 1.722, 2.958, 2.58, 3.45, 0.78, 2.91, 1.89, 3.78, 0.84,
			1.23, 3.33, 3.3, 3.18, 1.955, 2.125, 2.49, 2.31, 2.28, 1.62, 1.5, 1.83,
			4.77, 0.93, 1.29, 6.15, 3.66, 3.6, 3.24, 3.66, 3.69, 2.19, 1.5, 3.51, 2.7,
			0.9, 2.187, 1.833, 2.45, 0.5, 3.71, 0.87, 4.56, 1.02, 2.117, 0.583, 1.292,
			1.558, 1.71, 4.9, 1.79, 1.47, 1.95, 2.88, 2.79, 4.08, 0.562, 0.708, 2.19,
			1.65, 1.71, 2.28, 2.85, 4.41, 2.22, 2.13, 4.05, 3.52, 0.84, 2.64, 2.28,
			4.555, 0.875, 3.93, 2.682, 2.208, 2.17, 4.882, 1.708, 3.0, 2.85, 2.64,
			2.91, 2.19, 4.5, 2.7, 2.7, 3.15, 5.71, 3.92, 1.38, 3.51, 2.85, 2.34, 2.94,
			1.92, 3.28, 2.75, 2.94, 1.67, 2.32, 2.02, 3.08, 2.37, 2.01, 2.18, 3.04,
			1.17, 1.45, 2.54, 0.81, 1.53, 3.09, 4.14, 4.68, 2.85, 2.548, 2.792, 1.99,
			2.51, 4.71, 1.98, 3.47, 1.75, 1.48, 0.5, 2.49, 3.3, 2.16, 3.21, 3.33,
			3.75, 5.55, 2.31, 2.11, 1.583, 2.157, 1.11, 1.38, 0.87, 1.89, 4.498,
			1.232, 5.1, 3.21, 5.91, 2.52, 1.74, 0.96, 5.31, 2.04, 1.03, 1.647, 0.833,
			1.0, 2.69, 6.33, 2.43, 4.08, 3.19, 3.23, 2.85, 1.41, 2.807, 2.083, 5.28,
			3.97, 2.1, 2.6, 3.872, 2.458, 2.43, 2.425, 3.125, 3.27, 1.86, 1.32, 4.11,
			3.13, 1.69, 4.38, 1.82, 1.35, 1.86, 1.0, 6.35, 2.13, 4.26, 2.94, 2.97,
			3.99, 2.94, 3.01, 4.13, 0.82, 2.03, 1.53, 1.2, 3.96, 1.59, 0.84, 0.51,
			4.05, 2.82, 2.425, 0.875, 3.9, 3.97, 1.25, 2.16, 3.3, 3.0, 0.75, 3.56,
			2.452, 1.458, 1.992, 0.708, 1.17, 1.23, 3.36, 2.22, 4.1, 1.75, 2.05, 3.36,
			2.15, 2.73, 2.1, 2.64, 1.5, 1.56, 1.17, 1.59, 4.35, 1.02, 3.87, 1.71,
			6.645, 1.875, 2.19, 1.23, 3.33, 2.05, 0.5, 1.65, 4.3, 2.51, 3.43, 1.98,
			3.2, 3.28, 2.4, 5.0, 3.34, 8.09, 2.01, 4.86, 5.58, 2.73, 3.675, 1.125,
			2.58, 4.05, 3.6, 3.15, 3.21, 1.83, 4.33, 3.24, 1.82, 4.74, 5.34, 3.82,
			4.16, 4.14, 4.86, 4.41, 4.47, 1.14, 2.95, 4.11, 0.77, 3.4, 2.39, 3.12,
			2.173, 1.667, 4.14, 0.9, 1.292, 2.458, 1.77, 2.91, 4.38, 1.65, 4.15, 2.75,
			1.53, 5.52, 3.88, 4.52, 1.75, 3.98, 2.67, 4.02, 5.13, 5.94, 4.08, 3.36,
			3.88, 3.62, 1.74, 1.77, 1.95, 4.08, 4.35, 1.11, 3.39, 1.9, 1.937, 1.833,
			2.25, 4.41, 1.48, 2.93, 1.83, 1.98, 3.12, 1.65, 3.69, 3.44, 3.16, 3.15,
			1.23, 3.72, 2.67, 4.41, 4.53, 2.94, 3.36, 2.67, 3.12, 3.12, 3.94, 2.33,
			3.09, 5.25, 2.4, 2.22, 1.98, 2.46, 2.85, 3.39, 2.16, 4.5, 4.59, 6.03,
			1.287, 1.833, 3.3, 1.74, 1.86, 2.435, 1.375, 3.03, 2.53, 3.8, 0.72, 4.32,
			2.91, 0.96, 1.835, 2.875, 0.69, 3.94, 2.21, 1.23, 2.79, 1.98, 3.36, 0.87,
			2.49, 3.33, 3.3, 3.03, 2.52, 3.42, 3.36, 1.8, 2.49, 5.28, 1.92, 4.44, 2.7,
			3.6, 3.13, 3.59, 5.01, 1.77, 1.95, 3.99, 2.86, 1.61, 3.87, 1.77, 2.79,
			3.27, 1.13, 2.5, 1.92, 2.25, 3.84, 3.93, 3.6, 4.02, 2.1, 2.22, 4.65, 3.09,
			3.57, 2.79, 0.72, 2.3, 3.06, 3.15, 2.4, 3.66, 2.67, 2.31, 4.41, 3.51,
			3.36, 2.94, 2.55, 2.85, 2.07, 1.35, 2.67, 0.87, 3.6, 4.2, 1.74, 2.79,
			2.64, 3.06, 4.33, 5.7, 1.82, 3.81, 3.378, 1.542, 2.89, 0.95, 3.84, 4.41,
			2.64, 3.51, 3.12, 4.65, 4.44, 2.52, 3.24, 2.59, 3.327, 3.083, 4.2, 2.35,
			2.78, 2.427, 1.833, 2.42, 3.58, 2.94, 4.11, 3.51, 1.53, 2.14, 4.01, 3.0,
			1.08, 1.35, 3.36, 2.13, 2.28, 4.95, 1.5, 3.11, 1.24, 2.67, 3.57, 2.76,
			2.64, 2.67, 1.92, 3.18, 2.19, 3.09, 1.38, 4.05, 0.81, 3.9, 3.18, 3.06,
			1.02, 3.042, 4.518, 3.6, 2.13, 2.79, 2.94, 3.6, 1.75, 9.02, 8.7, 5.518,
			2.292, 4.55, 2.31, 0.84, 1.92, 1.44, 3.12, 3.75, 0.75, 3.57, 2.42, 4.32,
			2.94, 3.9, 1.8, 4.41, 0.88, 0.5, 2.28, 3.3, 2.16, 2.5, 2.0, 2.04, 2.76,
			4.95, 2.61, 1.17, 2.28, 0.81, 1.53, 1.33, 1.97, 1.11, 3.93, 1.23, 2.55,
			1.69, 1.31, 0.84, 2.486, 1.364, 2.46, 0.933, 1.167, 1.98, 1.83, 0.998,
			2.542, 2.083, 1.427, 2.26, 2.31, 2.39, 3.06, 3.42, 3.86, 1.99, 6.42, 0.87,
			1.57, 2.042, 5.538, 2.31, 3.48, 3.33, 3.03, 2.01, 1.42, 2.57, 3.33, 2.58,
			2.37, 5.31, 1.75, 2.84, 1.74, 3.57, 1.92, 4.08, 3.57, 3.75, 5.47, 0.69,
			2.69, 3.75, 2.61, 1.47, 1.26, 4.8, 3.09, 3.45, 3.09, 1.62, 3.43, 3.92,
			4.71, 3.79, 5.0, 2.7, 3.57, 0.88, 2.0, 2.01, 1.635, 2.685, 2.61, 3.99,
			2.2, 2.182, 1.708, 5.16, 0.66, 2.46, 3.07, 2.042, 3.918, 2.67, 2.73, 3.27,
			2.95, 4.85, 2.7, 2.58, 2.85, 3.21, 2.04, 2.31, 2.415, 1.875, 1.74, 0.75,
			1.92, 3.84, 4.53, 1.32, 2.11, 3.17, 2.95, 1.862, 2.11, 2.708, 1.29, 1.342,
			1.208, 2.22, 2.04, 4.29, 3.57, 0.93, 1.5, 0.57, 1.11, 1.23, 4.62, 1.92,
			2.58, 2.94, 4.14, 1.89, 2.38, 1.46, 3.27, 3.9, 4.53, 7.08, 1.62, 1.668,
			2.292, 2.94, 2.16, 4.05, 2.91, 2.01, 3.51, 3.21, 2.28, 1.23, 3.07, 1.35,
			0.665, 1.485, 2.43, 2.79, 4.89, 3.28, 1.59, 2.09, 2.35, 1.7, 3.6, 4.56,
			2.76, 2.917, 2.933, 3.15, 3.72, 1.39, 0.53, 1.95, 3.06, 1.44, 2.4, 3.66,
			5.16, 1.62, 3.75, 2.49, 2.55, 1.92, 2.58, 3.48, 2.72, 2.62, 2.41, 2.13,
			3.05, 3.33, 2.85, 3.57, 2.7, 2.52, 2.82, 2.88, 4.83, 1.502, 2.458, 2.04,
			1.48, 2.18, 4.23, 1.11, 2.88, 2.04, 1.6, 2.36, 1.77, 1.5, 2.65, 3.32,
			2.31, 3.84, 0.72, 2.25, 3.33, 4.02, 1.32, 3.12, 4.68, 4.32, 2.91, 1.95,
			4.26, 3.0, 3.29, 3.16, 1.965, 3.282, 2.583, 3.84, 3.3, 1.59, 1.45, 0.5,
			1.44, 1.57, 3.08, 1.89, 2.58, 1.53, 3.27, 2.76, 2.76, 3.21, 2.817, 1.833,
			0.66, 2.1, 1.8, 1.56, 5.34, 1.44, 4.5, 2.7, 2.91, 2.43, 3.3, 3.15, 2.19,
			2.827, 1.583, 6.27, 3.232, 1.958, 2.01, 4.112, 3.208, 0.66, 1.92, 3.39,
			5.25, 2.25, 3.0, 2.58, 3.06, 4.23, 2.22, 2.76, 3.18, 2.34, 3.93, 3.42,
			4.77, 2.31, 4.56, 2.52, 1.74, 1.32, 3.93, 2.94, 1.17, 1.17, 4.92, 0.69,
			2.67, 3.54, 3.99, 2.31, 4.86, 2.4, 4.08, 1.833, 2.792, 2.395, 1.71, 2.1,
			1.36, 3.463, 1.417, 3.52, 3.65, 3.72, 4.41, 0.99, 2.19, 1.83, 2.7, 5.67,
			0.57, 2.13, 1.583, 3.292, 2.955, 0.6, 2.82, 3.69, 5.61, 3.99, 3.18, 2.49,
			2.23, 3.68, 3.24, 4.11, 4.56, 3.27, 0.75, 3.87, 2.52, 2.73, 4.05, 5.23,
			2.31, 4.92, 2.37, 2.58, 2.46, 3.475, 0.875, 2.67, 3.01, 3.11, 1.077,
			2.583, 2.208, 2.022, 3.3, 5.64, 3.63, 3.82, 1.13, 4.65, 2.76, 3.18, 1.29,
			2.76, 2.56, 0.5, 3.48, 3.42, 1.17, 5.5, 3.36, 5.54, 2.55, 5.25, 2.58,
			5.76, 0.72, 4.53, 3.12, 3.18, 1.44, 4.71, 3.278, 1.792, 3.72, 1.92, 1.5,
			5.88, 3.54, 4.62, 4.09, 2.93, 3.27, 4.14, 2.742, 1.458, 3.35, 4.9, 6.196,
			2.571, 0.583, 1.167, 3.043, 3.23, 2.543, 2.917, 2.01, 5.1, 3.43, 2.04,
			2.75, 3.57, 0.69, 3.03, 2.76, 2.37, 2.89, 2.73, 2.81, 2.61, 2.16, 3.54,
			3.33, 2.61, 4.17, 4.44, 2.79, 3.48, 3.81, 3.3, 1.23, 2.25, 2.04, 3.6,
			2.65, 1.49, 4.05, 4.38, 2.97, 3.15, 5.01, 2.46, 3.03, 3.69, 4.47, 2.88,
			2.25, 3.6, 4.518, 3.042, 1.81, 1.67, 2.085, 1.875, 3.45, 2.16, 3.762,
			1.708, 2.12, 4.03, 4.01, 3.72, 2.94, 1.62, 4.22, 4.08, 4.21, 2.69, 2.7,
			3.03, 4.11, 1.42, 1.37, 4.12, 3.29, 2.46, 3.09, 4.26, 1.41, 3.18, 2.58,
			1.98, 3.36, 5.16, 2.52, 2.28, 3.75, 4.2, 2.76, 2.94, 1.53, 4.05, 1.62,
			2.1, 3.21, 2.34, 4.41, 4.71, 3.24, 2.4, 2.43, 3.78, 3.21, 3.96, 3.03,
			1.84, 3.44, 4.81, 3.2, 4.17, 2.43, 1.98, 3.75, 5.5, 5.3, 3.79, 1.88, 1.5,
			4.41, 1.57, 1.97, 2.0, 1.93, 3.0, 1.202, 2.458, 3.113, 1.417, 2.82, 6.3,
			1.9, 1.25, 3.79, 3.56, 4.44, 6.75, 2.875, 1.625, 2.28, 2.37, 2.85, 4.35,
			2.09, 3.457, 1.833, 1.417, 1.503, 3.32, 2.85, 8.7, 3.69, 2.965, 1.125,
			2.6, 2.31, 2.67, 4.06, 1.28, 1.53, 3.54, 3.01, 0.98, 2.28, 2.82, 2.64,
			2.34, 2.07, 3.24, 4.74, 1.08, 5.22, 3.78, 2.06, 3.46, 3.55, 1.96, 1.92,
			2.67, 2.22, 3.18, 1.95, 2.7, 2.113, 3.167, 1.92, 3.15, 1.38, 0.97, 1.41,
			3.77, 1.5, 2.16, 4.02, 1.62, 0.78, 1.77, 1.38, 2.71, 3.35, 2.58, 3.12,
			1.77, 1.583, 3.637, 2.08, 3.62, 2.85, 2.85, 2.94, 3.72, 4.05, 2.46, 2.37,
			2.73, 2.663, 0.667, 1.68, 1.6, 0.5, 2.97, 2.67, 2.7, 3.42, 5.26, 1.58,
			4.62, 3.33, 1.15, 1.28, 2.35, 3.678, 2.042, 1.59, 1.375, 3.635, 1.35,
			1.38, 5.452, 1.958, 2.01, 1.86, 3.36, 5.19, 1.8, 4.93, 2.93, 4.68, 2.37,
			2.77, 1.94, 3.083, 2.167, 2.37, 3.09, 1.06, 2.72, 2.73, 2.773, 0.917, 3.6,
			3.42, 2.16, 1.56, 4.582, 2.708, 4.05, 1.95, 3.18, 4.11, 4.38, 2.04, 3.66,
			6.57, 1.492, 2.708, 1.8, 3.93, 3.36, 3.3, 1.547, 2.083, 2.85, 2.77, 2.45,
			2.94, 3.36, 3.9, 1.92, 4.36, 3.09, 2.39, 2.31, 1.87, 5.36, 2.34, 3.75,
			1.77, 2.1, 4.2, 2.34, 3.927, 1.833, 5.695, 1.625, 1.98, 3.0, 3.27, 3.75,
			2.04, 4.95, 1.2, 0.99, 2.01, 3.42, 0.66, 3.57, 3.378, 1.542, 3.45, 2.73,
			5.43, 3.27, 4.2, 2.28, 3.84, 3.555, 1.755, 1.89, 4.05, 1.71, 3.94, 1.74,
			4.04, 1.26, 3.54, 2.97, 7.93, 1.25, 2.64, 4.38, 4.9, 2.73, 2.99, 4.38,
			3.93, 2.46, 3.81, 4.29, 3.093, 1.917, 4.95, 4.445, 2.125, 1.56, 1.583,
			3.547, 3.18, 3.61, 2.63, 4.2, 3.78, 2.52, 4.02, 2.46, 3.51, 1.59, 4.29,
			2.01, 2.43, 2.37, 6.43, 4.8, 2.55, 2.37, 4.65, 3.96, 2.43, 5.16, 3.06,
			5.37, 2.58, 2.81, 4.09, 2.82, 3.81, 3.27, 2.91, 5.76, 3.85, 3.86, 2.64,
			4.56, 5.19, 4.26, 4.08, 4.45, 5.6, 3.27, 3.22, 4.67, 4.41, 2.98, 2.03,
			3.96, 0.93, 5.79, 1.59, 3.21, 5.31, 2.34, 4.56, 0.69, 2.14, 3.283, 2.167,
			1.3, 3.775, 2.875, 3.15, 2.73, 3.54, 2.43, 3.35, 56.35
		],
		"transcript_en": [
			"[MUSIC PLAYING]",
			"",
			"DAVID MALAN: All right, this is CS50.",
			"And this is week one, our second week.",
			"And today, recall that we'll focus on this other programming language called",
			"C.",
			"And we gave you a little glimpse of this last time, wherein",
			"I proposed that this code here on the screen",
			"is something that you will soon know how to program, if not already.",
			"But suffice it to say it looks quite a bit dissimilar to what",
			"we looked at last week which, of course, was Scratch, which was much more",
			"playful, much more graphical.",
			"And so allow me to disclaim right from the get go today that for most of us,",
			"today will feel like a bit of a fire hose.",
			"In fact, pictured here as an old hack from MIT,",
			"wherein some industrious seniors hooked up an actual fire hydrant",
			"to a water fountain.",
			"The saying being that getting an education from MIT",
			"is like drinking from a fire hydrant.",
			"Today will feel a little bit like that.",
			"Because this is sort of a special occasion that you don't really have",
			"occasion to describe very often.",
			"But it's one in which we're all going to learn a new language.",
			"And indeed, that's not something we do every day.",
			"And so at the first glance, it's going to look",
			"like a lot of new syntax, a lot of new ideas.",
			"And yet, allow me to reassure, that what will soon look like this,",
			"this C code here, is fundamentally the same thing",
			"that you've seen and now experimented with last week by way of Scratch.",
			"That is to say, within this other programming language",
			"C, which is more traditional, which is more text-based, more keyboard-based,",
			"we're still going to see functions, conditions, Boolean expressions, loops,",
			"and so on.",
			"They're going to all look a little different.",
			"But the ideas are the same.",
			"And so much like when walking into someone's home for the very first time",
			"and getting the lay of the land and seeing a lot of things",
			"that you haven't seen before, you typically don't care about all",
			"of those visual details.",
			"You might just simply walk forward and sit down.",
			"Similarly today, we're about to see a whole lot of details",
			"in the world of this programming language.",
			"But the goal at hand is to ignore things at first glance",
			"that we don't necessarily understand and latch onto those ideas that",
			"are familiar from last week.",
			"So how do we go about actually writing computer programs?",
			"How do we go about writing them well?",
			"And so allow me to propose that there's a few guiding lights that",
			"should guide writing of code.",
			"One, of course, is correctness.",
			"And we explored this last week, whereby the correctness of your code",
			"just speaks to does it work as intended.",
			"When you double click some icon, when you run some command,",
			"does the program that you or someone else wrote behave correctly?",
			"Does it do what it says?",
			"But there's other aspects to writing good software",
			"and writing good programs.",
			"And that has to do with design.",
			"And we alluded a little bit this last week.",
			"But with design it's more of a qualitative, a more subjective measure,",
			"just how well written your code is.",
			"So imagine, for instance, from taking a class where you have to write essays,",
			"you could certainly make very correct arguments.",
			"But you could make very correct arguments by writing very long,",
			"rambling sentences, repeating yourself, and generally not writing",
			"a very good essay or paper.",
			"Now it might be correct.",
			"There's nothing in that paper for your English class,",
			"history class, or whatever it may be that you said that was incorrect.",
			"But you might not get very good marks on it,",
			"because it's just not very well-designed.",
			"And so similarly, in the programming world,",
			"is there this notion of actually writing not only correct code,",
			"but well-designed code.",
			"Wherein you don't repeat yourself.",
			"You write code that's fairly efficient.",
			"It doesn't do more work than it actually needs to.",
			"And then lastly, let me propose for today onward in this class,",
			"that there's a third axis you should keep in mind when",
			"it comes to writing good code.",
			"And that has to do with style.",
			"This is much more of an aesthetic.",
			"So this, in the analogous world of writing an essay,",
			"would be are using good punctuation, capitalisation?",
			"Are you indenting new paragraphs?",
			"And those kinds of aesthetics that fundamentally",
			"don't change the correctness of what you're saying,",
			"don't change necessarily the quality of the arguments that you're making,",
			"but the style of your essay, much like the style of your code,",
			"makes your code much, much more readable.",
			"So when it comes to writing good code, you want it first",
			"and foremost to be correct, but also well well-designed",
			"and also well-styled.",
			"Much like, again, you would when writing an essay that you would hope",
			"would reflect well on your capabilities as well.",
			"So when it comes to writing code, like this, for instance,",
			"this first C program that someone last week proposed quite",
			"simply prints out on the screen, hello, world.",
			"Well, how do we go about writing this code?",
			"Last week we wrote code by going to Scratch.MIT.edu",
			"and then dragging and dropping puzzle pieces.",
			"Today is going to be a little different.",
			"We're going to use a different tool here on out.",
			"And we're going to use our keyboard much more",
			"than our mouse to actually program.",
			"But to do so, we're going to go ahead and introduce",
			"the first of several tools this semester, this one, known as CS50 IDE.",
			"IDE is an acronym, a term of art in programming,",
			"that stands for Integrated Development Environment.",
			"Which is just a fancy way of saying, in this context,",
			"that CS50 IDE is CS50's own web-based programming environment.",
			"And it's not specific to CS50 per se.",
			"We've simply added a number of educationally useful features",
			"on top of a third party cloud tool that anyone on the internet can use.",
			"And our own version thereof lives at this URL, ide.cs50.io.",
			"So you're welcome to follow along at that URL today.",
			"But you need not during lecture itself.",
			"But on this upcoming problem set and beyond,",
			"will you actually use and get more familiar with this tool hands on.",
			"So let me go ahead and open up this tool here.",
			"So I've already logged in in advance.",
			"And what you see here is the basic user interface that's available to you.",
			"And fortunately, there's only a couple of salient features",
			"that we need to point out right now.",
			"So at the top of the screen here, it's just",
			"a big black rectangle that in a moment is going to be filled with code.",
			"Much like using Google documents or something",
			"like that, where you can create new tabs and create new files,",
			"this is where I'm going to do my programming,",
			"along the top of the screen.",
			"And along the bottom is what we're, in a moment,",
			"going to start calling our terminal window.",
			"It's in this terminal window that I can actually run commands and ultimately",
			"run my actual code.",
			"But let's go ahead and write our very first program in this environment",
			"and realize that this tool, indeed, is not very CS50 specific.",
			"It's meant to be representative of a very common popular programming",
			"environment, where you have a so-called text editor,",
			"or tabbed windows where you can write code,",
			"and a terminal window where you can actually run commands.",
			"Ours happens to exist in the cloud.",
			"But you can alternatively program, certainly,",
			"on your own Mac, or PC, or any other device these days.",
			"But frankly, it tends to involve just a non-trivial number",
			"of technical difficulties early on, especially when we all",
			"have different versions of Mac OS and Windows and the like.",
			"So this cloud-based environment just ensures that on day zero,",
			"we can all have the same exact programming experience.",
			"So I'm going to go ahead and do this.",
			"I'm going to go ahead and go up to File and New File.",
			"And this is going to create a new tab, by default called Untitled1,",
			"not very interesting.",
			"So I'm going to now go up to File and Save.",
			"And by default, I'm going to save this file as, for instance,",
			"the name hello.c.",
			"So I want to write my very first program in this language called",
			"C. I'm going to call my file hello.",
			"But I'm going to end it in a file extension called .c.",
			"And that's indeed the convention.",
			"When writing C programs, they should end with .c.",
			"Just like Scratch programs, as you may recall, end in .sb3.",
			"So I'm going to go ahead and simply click the green button here",
			"that's called Save.",
			"Nothing is really going to change except for the name and the tab there.",
			"Now I see at top left that this tab is called hello.c.",
			"And now I can start typing anything I want.",
			"And frankly, I'm just going to type from memory",
			"the very first program we saw last week and just a moment ago.",
			"I'm going to do include stdio.h, whatever that is for now.",
			"I'm going then going to do int main(void), whatever that is for now.",
			"I'm going to use the curly brace.",
			"And then close that curly brace, so to speak, thereafter.",
			"And in here, I'm going to go ahead and do printf(\"hello,world\") followed",
			"by a semicolon.",
			"Now that was a whole lot of text right off the top of my head.",
			"This is the kind of muscle memory that you'll soon",
			"develop when writing a program.",
			"I've, of course, done this many times before.",
			"So I was able to just do it off the top of my head.",
			"But in a moment, we'll tease apart what all of the various lines and characters",
			"that I typed actually do.",
			"But what I'd now like to do is run this program.",
			"We conjectured last week that this is just going to print hello, world.",
			"But how?",
			"Well, in the world of our Macs and PCs and phones,",
			"we would all just tap an icon if we want to actually run a program.",
			"That's not going to be the case today, because now we're",
			"in more of a traditional programming environment.",
			"The environment that we're now in requires",
			"that I use my keyboard a little bit more,",
			"or what's known as a Command Line Interface, or CLI.",
			"This is in contrast with a Graphical User Interface, or G-U-I, or GUI,",
			"which is what describes Mac OS windows, iOS, and Android.",
			"But in a command line interface, I have to do everything",
			"at a so-called command line.",
			"And by that, I'm referring to this blinking",
			"prompt along the bottom of my screen.",
			"Along the bottom of my screen here, again, I",
			"described as the terminal window, where I'm going to type commands,",
			"and this is my command line interface.",
			"Anything I type here is going to get sent to this computer",
			"and hopefully execute on its own hardware.",
			"So how do I do this?",
			"And what do I do?",
			"Well, the catch, of course, is that when writing code in C or Python",
			"or Java or bunches of other languages that happen to exist,",
			"that's really meant to be written and understood by me and you, the humans.",
			"But per last week, what is the only language,",
			"in a sense, that computers understand?",
			"Brian, could we call on someone for this?",
			"What language do computers only speak?",
			"Because I think there's a disconnect between where we left off last week",
			"and where we're currently at if I'm writing code that now looks like this.",
			"Cindy, what language do computers speak, would you say?",
			"AUDIENCE: Binary.",
			"DAVID MALAN: Binary.",
			"And just elaborate a little bit.",
			"What do you mean by binary, to recap?",
			"AUDIENCE: Yes.",
			"So they use 1's and 0's to represent everything.",
			"DAVID MALAN: Exactly.",
			"They use 1's and 0's to represent everything.",
			"And last week we focused on only things like numbers and letters",
			"and colors and images and videos and sound and so forth.",
			"But we didn't actually speak to built in functionality, which computers also",
			"use 0's and 1's to represent.",
			"That is to say computers, of course, have the ability these days to print",
			"something on the screen.",
			"And that notion of printing, that function, that functionality,",
			"also is represented underneath the hood of a computer, so to speak,",
			"by some pattern of 0's and 1's.",
			"Which is to say that everything I just typed,",
			"even though it kind of sort of looks like English",
			"and kind of sort of clearly says print hello, world, the computer, ironically,",
			"does not know what it is I have just typed.",
			"In order for it to understand what I've just typed,",
			"I need to actually convert it to 0's and 1's.",
			"And so, indeed, the next step in this process",
			"is to take what I'll describe as my source code, written here in C,",
			"and last week, too, we saw source code, it was just graphical.",
			"It was those puzzle pieces in Scratch.",
			"This is my source code that, even though cryptic, is something I, at least,",
			"the human, eventually can read and write.",
			"But I need to literally convert it to patterns of 0's and 1's",
			"that the computer can understand.",
			"Now how do I get to this point?",
			"Well, thankfully, we have a mental model from last week",
			"that involves problem solving.",
			"And here's a problem.",
			"How do I take source code, written in this language supposedly called C,",
			"and convert it to 0's and 1's that the computer understands?",
			"Well, my input, I daresay, is going to be my source code.",
			"And my output, ideally, is going to be what we'll call machine code.",
			"Machine code is just a term of art describing the 0's",
			"and 1's that computers understand.",
			"We didn't use that expression last week.",
			"But this just refers to 0's and 1's on the right and C code on the left.",
			"So that invites the question, well, what is between my source code and machine",
			"code?",
			"If I take my source code and feed it into the proverbial black box,",
			"how do I get out of this black box the 0's and 1's that the computer",
			"understands?",
			"Well, I need a special program that we're",
			"going to start calling a compiler.",
			"A compiler is a program that you can download for free,",
			"or pay for back in the day, that is a program designed",
			"to convert source code to machine code.",
			"So all I need do if I want to actually solve",
			"the problem as stated earlier, whereby I have written this code in C",
			"and I now need to convert it to 0's and 1's, I just",
			"need to give myself access to a compiler.",
			"And it turns out one of those exists within CS50 IDE.",
			"And this is a tool you could download on your own Mac or PC or the like.",
			"And for now, we're going to describe that tool as being quite simply called",
			"\"make.\"",
			"Literally, if I want to make my program, I'm",
			"going to go ahead and type make hello.",
			"And then I'm going to run it with a little bit of a cryptic syntax,",
			"./hello.",
			"But let's see that in action to tie this all together.",
			"I'm going to move my cursor down into my terminal window,",
			"or my command line interface.",
			"And I'm going to literally type hello.",
			"Notice I am not typing make hello.c.",
			"I'm typing the name of the program I actually want to make",
			"and I just want to call this program hello.",
			"The compiler is going to infer from this command",
			"that I actually intend to compile a file called hello.c.",
			"I'm going to go ahead and hit Enter.",
			"There's some crazy cryptic output.",
			"More on that another day.",
			"But the fact that I don't see any big scary red error messages",
			"is a good thing.",
			"This means that my program compiled successfully.",
			"Why?",
			"There's just no yellow or red messages to say otherwise.",
			"But now, if I want to actually run this program,",
			"I need to type a different command that's the analog of double",
			"clicking an icon on your Mac or PC or phone.",
			"I'm going to type literally ./hello.",
			"./hello essentially is like saying go into the current folder on the computer",
			"I'm using and look for a program called hello.",
			"I'm going to go ahead and hit Enter and voila, hello, world.",
			"Now I see, again, a dollar sign and some other text on the screen.",
			"And we'll tease apart in just a bit what this means.",
			"But notice, this dollar sign is just a constant visual reminder",
			"of where my prompt is, where I can type more commands.",
			"And the computer has done literally what I asked.",
			"It printed out hello, world.",
			"And now it's waiting for my second command.",
			"So that was the analog of just printing hello, world out of the cat's mouth",
			"last week.",
			"But surely we can do more than this.",
			"But let's tie it back to what we did last week as well.",
			"So that not everything here is all that dissimilar.",
			"So recall that last week, we had functions.",
			"And it turns out we had something called arguments, even though we didn't",
			"necessarily describe them as such.",
			"So a function is like a mini-program.",
			"It's an action or a verb that you can use when writing",
			"your own program that does something.",
			"We saw the say block last week.",
			"We saw the wait block last week.",
			"Those were verbs, or actions, or more generally noticed functions.",
			"But functions can also take inputs, recall, and we did see that last week.",
			"And nowadays, we're going to start calling inputs to functions arguments,",
			"so to speak.",
			"Another term for them is parameters.",
			"But for all intents and purposes, those are synonyms.",
			"Arguments are the inputs to functions.",
			"So let's consider then, from last week, the say",
			"block that we saw last time, which simply is trying to say out",
			"of the cat's mouth, hello, world.",
			"Well, let me go ahead and convert this, if you will, to corresponding C code,",
			"just to emphasize how similar, fundamentally, these two languages",
			"are, even though syntactically C absolutely looks visually different.",
			"It turns out that if you want to say something in C,",
			"using this text-based language like I just did,",
			"you're not going to write say.",
			"You're instead going to write print.",
			"That's actually a bit of a white lie.",
			"You're not going to say print.",
			"You're actually going to say printf, for reasons we'll eventually see.",
			"It means print a formatted something or other.",
			"So printf is the analog in C of say in Scratch.",
			"Now notice in C, I've got this open parenthesis",
			"and closed parenthesis that, nicely enough, are kind of ovular in shape.",
			"And notice that they kind of mimic the white oval",
			"into which we provided input last week.",
			"So in between those parentheses are going",
			"to be my inputs to this function printf, otherwise known as arguments.",
			"But they're going to be a little different this week.",
			"Yes, I'm going to say hello, world, with a comma in between,",
			"grammatically, just like last week.",
			"But in the world of C, I have to be a little more particular.",
			"I also have to add double quotes on the left and the right.",
			"And, somewhat annoyingly, I also have to add a semicolon",
			"at the end of this line of code.",
			"So just like in English, or in a lot of human languages,",
			"you end a sentence, for instance, with a period,",
			"in many lines of code you will write in C",
			"you've also got to finish your thought, in this case, with a semicolon.",
			"So this, then, on the right, is the closest way",
			"of translating this thing on the left from Scratch to C respectively.",
			"So the ideas are still the same.",
			"But the syntax looks a little different.",
			"And we've just got to ingrain in ourselves, ultimately,",
			"what these patterns are and what these human conventions are.",
			"But notice that what we just did follows the same paradigm as last week.",
			"But let's add a little more terminology this week.",
			"Last week, we described the black box as potentially being algorithms,",
			"initially.",
			"And then we started calling them functions.",
			"Functions are just a programmed version of an algorithm, the implementation",
			"of an algorithm in code, in software.",
			"So a function might be represented here as taking inputs otherwise known now",
			"as arguments.",
			"But it turns out that functions can do at least two different types of things",
			"in the world of programming.",
			"And we've seen these things already, but we didn't describe them",
			"quite as particularly as we will today.",
			"When a function takes inputs, that is to say arguments,",
			"just like hello, world is an input to the say block in Scratch",
			"or the printf function in C, functions can have what are called side effects.",
			"And recall, we did see this last time.",
			"When we used the say block, it did output something.",
			"But more technically, it had a side effect, a visual side effect.",
			"When I used the say block last week and the printf function this week,",
			"you see something on the screen.",
			"And that is, yes, some form of output.",
			"But it's a little different from a different form of output",
			"that we saw last time.",
			"So a side effect of a function is often something visual",
			"that happens on the screen, like text or audio in that case.",
			"But there's this other feature of functions that we're going to see",
			"and leverage today known as return values, where a function can really",
			"just hand you back a value.",
			"It's not going to say it on the screen.",
			"It's not going to vocalize it audibly.",
			"It's going to just pass it back to you in a way that you, the programmer,",
			"can reuse whatever the output of that function",
			"was, ideally storing it even in a variable.",
			"So for instance, recall last week that we asked the human",
			"their name by way of this ask block.",
			"And the input to the ask block in this white oval was, what's your name.",
			"And then recall that this ask block was a little special last week.",
			"Because it gave us access to whatever the human ultimately typed in.",
			"And that is to say that the ask block last week essentially returned a value.",
			"It didn't just blindly display whatever word the human typed in on the screen.",
			"No, it instead returned it in some sense metaphorically",
			"and stored it in a special variable called answer.",
			"And so, again, that's the difference.",
			"The say block literally says something on the screen.",
			"And there's an immediate visual effect.",
			"With the ask block, after you type in your name,",
			"you don't see your name printed or displayed again on the screen.",
			"Instead, your name is sort of tucked away in a variable,",
			"just like a mathematician would store a number in a variable like x or y or z.",
			"The onus was then on us, the programmer, last week",
			"to eventually do something with the value, my name, that",
			"was in that variable called answer.",
			"So how are we going to translate last week's ask block to C this week?",
			"Well, it turns out there's different ways to do this in C, none of which",
			"are very easy unless you use what's called a library.",
			"A library is code that someone else has written.",
			"And indeed, one of the things we'll use today",
			"is the so-called CS50 library, which is a bunch of code, not terribly much,",
			"that the staff and I wrote just to make it easier to do simple things.",
			"These are training wheels of sorts that we'll take off completely",
			"within a few weeks' time.",
			"But in order to get started quickly, it's",
			"going to make it easier to do things like getting text from the user.",
			"So string is a term of art in the programming world.",
			"A string is text.",
			"It's a word.",
			"It's a letter.",
			"It's a paragraph.",
			"It's a page of text.",
			"It's just text in some form.",
			"String is what a computer scientist would call text.",
			"get_string is a function that we wrote that we will",
			"provide to you that does take inputs.",
			"Notice, per the parentheses here in C, it can take input.",
			"What might that input be?",
			"Well, just like the ask block, it's going",
			"to be a prompt that the human should ultimately see.",
			"So there's a bit more involved, though, than just using this function.",
			"When you use get_string in C, as we will soon see in a live demo,",
			"you want to do something with the human's name.",
			"And to do something with the human's name,",
			"it's not quite sufficient to just trust that Scratch",
			"will put it in a variable for you.",
			"In C, as with most programming languages, it's a lot more pedantic.",
			"Like, if you want something to end up in a variable,",
			"you've got to do it yourself.",
			"MIT is not going to magically put it in an answer variable for you.",
			"You have to do it yourself.",
			"So to do this, you simply come up with the name of the variable that you want,",
			"be it x or y or z, or more compellingly, answer,",
			"and you use an equal sign, a single equal sign.",
			"And even though in math this generally implies equality, in the context of C,",
			"and most programming languages, the equal sign actually",
			"means what we'll call assignment.",
			"It means, effectively, copy whatever is on the right",
			"into whatever's on the left.",
			"So if on the right-hand side there's a function whose purpose in life",
			"is to ask the human what their name is, that name",
			"is going to get copied from right to left ultimately",
			"into this variable called answer.",
			"MIT did that automatically for us in Scratch.",
			"In C, you have to do it yourself.",
			"But you have to be a little more particular, too.",
			"It turns out that in the world of C, you can't just have variables.",
			"You have to tell the computer in advance what type of variable you want.",
			"And specifically, I'm going to tell the computer that the type of variable",
			"I want is going to be a string.",
			"And the convention for doing so is you literally write the name of the type",
			"that you want, string being the only one we've seen thus far.",
			"Then you write the name of the variable.",
			"And then, again, to assign a value to that variable from right to left,",
			"we have to use the single equal sign here.",
			"And now, just a quick pause.",
			"Brian, if we could call on someone for this,",
			"even if you've never programmed before, if you've taken to heart",
			"one of my pieces of advice earlier.",
			"I'm still missing something.",
			"How might I want to finish the translation of this Scratch code",
			"to C on the right-hand side?",
			"What is missing from what you can tell?",
			"If you've programmed before, odds are it will jump right out.",
			"If you've never programmed before, you'll",
			"have to think back on what I said earlier.",
			"Jacob, what do you think?",
			"AUDIENCE: Semicolon?",
			"DAVID MALAN: Exactly.",
			"There's just one single, stupid semicolon",
			"missing at the end of the line, which is necessary to make clear to the computer",
			"that this is the end of this thought.",
			"And I sort of impugn it as stupid.",
			"Because honestly, one of the biggest frustrations when learning how to code,",
			"as will now happen today and this week and beyond,",
			"is initially you're going to forget stupid things like the semicolon,",
			"or you're going to forget a single quote mark, or a parenthesis,",
			"or things like this.",
			"And the most important advice I can give today",
			"is just try not to get frustrated by those kinds of stupid things.",
			"It's a lot more interesting.",
			"It's a lot more useful in life to understand functions and loops",
			"and conditions and not to let yourself get frustrated",
			"by the more minor aesthetic things that honestly will just come with practice.",
			"So if the very first mistake you make is missing a semicolon,",
			"and it takes you 10 minutes, an hour to figure out what",
			"is wrong with your code, totally normal.",
			"And those frustrations go away quite quickly in time.",
			"So we then have this translation of one function to another.",
			"Where else can we take it from here?",
			"Well, let's take a look at one other translation",
			"that we used after that ask block.",
			"Last week, after we asked the human their name,",
			"as by providing an input to the function and getting some output,",
			"we then proceeded to do something with the return value or output of ask.",
			"Again, we asked the human their name.",
			"Scratch magically, last week, put the name into the answer variable.",
			"But then I did something with it.",
			"And this is what I mean to distinguish side effects, which just kind of happen",
			"to you, like something printing on the screen,",
			"like the cat saying something out of its mouth, versus a return value,",
			"which is a piece of information, like a name a human has typed",
			"in being stored somewhere where you, the programmer, can make use of it later.",
			"It's not happening to you.",
			"It's being handed to you for subsequent use.",
			"And last week, in order to say hello comma world all in one breath,",
			"so to speak, we kind of had to stack these puzzle pieces",
			"on top of one another, making the output of join the input of say.",
			"In C, this is actually a little easier even though it's some new syntax.",
			"Again, printf is going to be the analog for say.",
			"And we've seen that a moment ago.",
			"We're still going to have the parentheses.",
			"We're still going to have the semicolon.",
			"So what goes inside now the input?",
			"How do I provide hello, answer to C?",
			"Well, I'm going to go ahead and do hello, in double quotes, but then,",
			"this strange new syntax here, %s.",
			"This is what we're going to call a format code, a format code, and hence",
			"the f in printf.",
			"Printf doesn't just print things.",
			"It can print format codes as well.",
			"And this is just fancy syntax for saying plug in some actual value here.",
			"Don't print out s literally.",
			"This is a placeholder for what will be s, a string.",
			"Well, what do I want to put there?",
			"Here's something new, too.",
			"In Scratch, if you had two inputs to a function,",
			"you would have two ovals like this and this one",
			"here that you could either type words or numbers into or drag variables into.",
			"In C, there's no notion of ovals or graphics at all.",
			"So instead, we're just going to go old school and just use a comma.",
			"If you use a comma in between the parentheses as the arguments",
			"or inputs to a function, that's going to separate the one on the left",
			"from the one on the right, thereby being analogous to having",
			"two ovals in the world of Scratch now there's",
			"something that's potentially a little visually confusing here.",
			"There's actually two commas here, of course, and here.",
			"But notice the important detail.",
			"That first one, that's an English grammatical comma",
			"that I've put inside of my quoted string, my quoted phrase of text.",
			"That has nothing to do with programming.",
			"That just has everything to do with English.",
			"The fact that this comma is outside of those double quotes,",
			"though, means it's significant in this language called C.",
			"And it separates first argument from second argument.",
			"And so in this way do we have the ability now",
			"to also say something on the screen using printf in this slightly new way.",
			"So let me go ahead then and do this for real.",
			"Let me go back to CS50 IDE.",
			"And I'm going to go ahead and go back into this program",
			"here and consider for just a moment how we",
			"can improve upon this very first program which literally just prints",
			"hello, world.",
			"Not that interesting.",
			"I can run it all day long.",
			"It's going to say the same thing.",
			"How do I now get input from the user?",
			"Well, it turns out that I can simply enhance this code a little bit.",
			"Let me go ahead and per the translation of Scratch earlier,",
			"let me do something like string answer equals get_string(\"What's your name?\").",
			"",
			"So I'm literally typing out what we saw in C a moment ago.",
			"I'm going to remember my semicolon over here.",
			"And then I have to change this second line of code now to not say hello,",
			"world, but instead to say hello, %s.",
			"And then, outside of the double quotes, I'm going to do a comma",
			"and then provide literally the word answer, which",
			"is the name of that variable.",
			"But I'm not quite done.",
			"And this is a little subtle.",
			"And invariably, you'll forget this at some point, too.",
			"In order to use get_string, I have to use this thing",
			"called the CS50 library, code that the staff wrote",
			"that you don't have default access to.",
			"And in order to do that, I need to add one line of code",
			"that we'll explain in more detail in a little bit.",
			"But for now, just take it on faith that by adding this line of code",
			"at the very top, include CS50.h, that will now",
			"give me access to the get_string function, which I otherwise",
			"wouldn't have access to.",
			"All right, now I'm going to go back to the terminal window.",
			"And notice the dichotomy here.",
			"If I just run ./hello, sort of enthusiastically,",
			"let's see what my new program does.",
			"I'm about to be, unfortunately, disappointed.",
			"Because it still says hello, world.",
			"And you might realize intuitively what the problem, of course,",
			"here is I haven't actually recompiled to the code.",
			"And so any time you make a change to your code,",
			"it does not suffice to just save the file via file save or Control",
			"or Command-s, I need to recompile it.",
			"And to recompile my code, that's not such a big deal.",
			"I just type make hello, enter.",
			"Cross my fingers that there's no yellow or red scary text.",
			"This is all good.",
			"It seems to have compiled into machine code.",
			"Now I can retype ./hello.",
			"and enter.",
			"And you'll see now my program is running and waiting for me.",
			"Let me go ahead and type my name, David enter hello, David.",
			"Let me go ahead and run it again after clearing the screen.",
			"Let me run it again.",
			"And this time, let's say my name is Brian.",
			"And I say hello, Brian.",
			"So quite similar to what we did in Scratch,",
			"but now we're more powerfully doing this all thus far via my keyboard alone.",
			"All right, so that was a lot.",
			"We wrote hello, world super quickly off the top of my memory",
			"and then enhanced it to now take input from the user.",
			"Let me pause here.",
			"If there are any questions, you're welcome to ask",
			"via chat for either staff or classmates to answer.",
			"But if you'd like to raise your virtual hand in Zoom,",
			"please feel free so that I can clarify or expound on anything here.",
			"Yeah, question from Ryan?",
			"AUDIENCE: I had asked this in the chat.",
			"But so the string before the answer, that's not the name of the variable.",
			"So hypothetically, you could make it, like, string A or string anything else.",
			"It just matters what comes after string is the name of the variable?",
			"DAVID MALAN: Exactly.",
			"Really good question.",
			"In the world of Scratch, you were required",
			"to use the variable called \"answer.\"",
			"In C, we have the complete flexibility over what we want to do.",
			"So as Ryan proposed, I could change my variable's name to just A for short.",
			"I would have to change it elsewhere, too,",
			"to make clear that the variable being used",
			"is the same one by a different name.",
			"That's perfectly fine.",
			"But here's where we now get into a matter of better style.",
			"Having a variable called just A, it doesn't really lend itself",
			"to the readability of your code.",
			"I might now glance at my code and be, like,",
			"what is the variable A. It's a little better when",
			"it comes to writing good code to actually be more verbose",
			"and using an actual word like \"answer\" in this case.",
			"Indeed, even though I keep describing x and y and z as the go",
			"to variables for a mathematician, those really",
			"say nothing outside the context of a Cartesian plane.",
			"So in a program that you write in C or Scratch or anything else,",
			"using descriptive variable names is a matter of good style as well.",
			"Jonathan, over to you.",
			"AUDIENCE: Yeah.",
			"Just a quick question.",
			"How come we have to compile the code every single time?",
			"And unlike different IDEs, which if you just run the code,",
			"it automatically compiles.",
			"Why do we have to manually do it?",
			"DAVID MALAN: Yeah.",
			"Really good question.",
			"Why do you have to keep recompiling the code?",
			"The short answer is just because this is the way C is.",
			"It's an older language, decades now old.",
			"And so back then, everything was very deliberate.",
			"User interface was not the top priority.",
			"Performance instead was, for instance.",
			"And so nowadays, there are fancier integrated development environments.",
			"And some of you might have used things like codecademy online, or co.org,",
			"where there's very often literally a play button that you can just",
			"click in the user interface, and it just plays your program",
			"or runs your program.",
			"What we're doing in this class is showing you",
			"what those buttons are doing.",
			"So if you do use in an environment like that that seems to automate this,",
			"it's still happening.",
			"But for our purposes, certainly at the beginning of the semester,",
			"we're going to do it manually ourselves.",
			"Later in the term, when we introduce a different language altogether,",
			"for instance, Python, then kind of, sort of you",
			"don't need to compile anymore, but more on that in a few weeks.",
			"Good question.",
			"Sophia?",
			"Over to you.",
			"AUDIENCE: I had a question about--",
			"I noticed in the source code that there's",
			"a backslash like n at the end of the string.",
			"Is that necessary for every time, even if it's just one line?",
			"DAVID MALAN: Really good question.",
			"This backslash n that you're seeing elsewhere, a bit of a spoiler.",
			"But yeah, let's go ahead and fix this problem that we've seen,",
			"even though I'm kind of ignoring it.",
			"You know, this now gets a little particular.",
			"But this looks kind of stupid, honestly.",
			"It says hello, Brian tilde slash dollar sign.",
			"Like, that is not my intended output.",
			"I literally only wanted to say hello, Brian, or hello, David.",
			"This visual artifact here, the dollar sign and the tilde and the slash",
			"have to do with my terminal window, this command line environment",
			"that I'm using.",
			"And honestly, just to be a little nitpicky,",
			"frankly, it should probably be on a new line.",
			"It should just be on its own line so it's not confused with my own output.",
			"And as Sophie notes, there is a solution to this.",
			"But, again, per last week, you need to m when writing algorithms",
			"and in turn, code, you have to be super precise.",
			"Nowhere in my code have I told the computer",
			"to move the cursor to the next line.",
			"So I can do that explicitly by doing backslash n immediately after the %s",
			"but still inside of the double quotes.",
			"This is shorthand notation for what would be telling the computer,",
			"move the cursor to the next line.",
			"Now you might think that, well, why don't I just hit Enter like this?",
			"And even though this is all might be new to most of us, suffice it to say",
			"this just feels like it's going to get messy quickly.",
			"If you start hitting Enter in the middle of your code,",
			"that's probably not the right solution.",
			"So instead, programmers years ago decided",
			"to come up with shorthand notation like backslash n, otherwise known",
			"as an escape character that signals to the computer, put a new line here.",
			"So backslash n is new line.",
			"And let me go ahead and recompile this.",
			"After saving my file, let me go ahead and do make hello.",
			"It seems to compile OK. ./hello.",
			"And let me go ahead and type in Brian's name again.",
			"And voila, still the same output, but it's a little cleaner.",
			"So we're being a little bit better about housekeeping now.",
			"Really good question.",
			"BJ is it?",
			"AUDIENCE: Yes.",
			"So one question I had is why don't you have",
			"to call the function get string in order for you for it to ask for input?",
			"Like, it still asked your input when you assigned it to the variable answer.",
			"DAVID MALAN: Ah, really good question.",
			"Why don't I have to call get string, for instance,",
			"by putting it on a line of its own?",
			"The way that C and a lot of programming languages work is they",
			"will evaluate an entire line of code, for instance,",
			"what I have here on line six from right to left, at least in this context.",
			"When you have an equal sign in the code like I do here,",
			"that's telling the computer you first have to execute,",
			"that is do what is said on the right-hand side.",
			"And then whatever the output of that thing is,",
			"store it on the left-hand side.",
			"So it is indeed getting executed, we're just now spreading things out",
			"on longer lines of code, if you will, if that makes sense.",
			"So get string is getting executed because it appears on that line.",
			"All right.",
			"So we've been taking for granted, frankly,",
			"a few details of these programs that it's probably",
			"only fair to start teasing apart.",
			"For instance, there was that int, main, void,",
			"and a whole bunch of other syntax.",
			"So let's tease apart some of these other lines of code",
			"that I just typed off the top of my head from memory, but kind of do",
			"need to be there in every C program you write.",
			"Let's at least start to make sense of some of that detail.",
			"Recall that in Scratch, we always started our programs initially",
			"with when green flag clicked.",
			"We eventually saw some other puzzle pieces, like when you hear an event,",
			"or when there's camera motion.",
			"But this really kick started most of the programs that we wrote in Scratch.",
			"What is the analog in C of the when green flag clicked puzzle piece?",
			"It's essentially this.",
			"We won't spend time in detail today explaining",
			"why it's int, why it's void, why there's curly braces, why there's parentheses.",
			"For today's purposes only, let me just stipulate",
			"that this is the analog for this when green flag clicked puzzle piece.",
			"You've just got to start your programs initially",
			"with this kind of boilerplate code, so to speak.",
			"We will start to explain this in much more detail.",
			"But for now, just take on faith that this",
			"is how you start writing a program.",
			"But there's, of course, a little more to the programs we've written thus far.",
			"And particularly, we've seen a couple of things called header files.",
			"This is another term of art that refers to a file written in the language",
			"called C whose name ends with not .c, but with .h.",
			"So we've seen these before as follows.",
			"Here, recall, was the simplest program we wrote last week in Scratch.",
			"It just says hello, world when you clicked on the green flag.",
			"This is the analog, the more complete analog on the right,",
			"of that program today.",
			"But there's something missing.",
			"And it's probably jumping out at some of you,",
			"because the program is a little shorter than it was before.",
			"Something's missing, which is this line here.",
			"And I just wrote that from memory earlier, but it's referring to a file",
			"called stdio.h, which stands for standard input output dot h.",
			"So io is an acronym in the computer world",
			"that just generally refers to input and output.",
			"So standard io.h is just a very popular file",
			"that is used in C programs that gives you the ability",
			"to get input and output from the user.",
			"And it does so by providing you with printf,",
			"for instance, which of course, allows you",
			"to generate some form of output via those side effects",
			"that we described earlier.",
			"But when I wrote my other program, recall,",
			"that actually had get string, as BJ noted earlier,",
			"where I can get a line of text from the user,",
			"I needed something else altogether.",
			"And that's when we added, a moment ago, a second header file called CS50.h.",
			"So these header files just give you access to more functions",
			"than you might automatically get from the language you're using,",
			"which here is C.",
			"It's similar in spirit, recall last week,",
			"when I started poking around Scratch's extension menu",
			"and I used the translate block and the voice block,",
			"the sort of fancier features that were buried under the extensions menu.",
			"Using an extension in Scratch is similar to using a header file in C.",
			"It's giving me access to a bit more functionality than you otherwise get",
			"for free out of the box, so to speak.",
			"All right, well, let me go ahead and propose",
			"that there are so many different ways in which I",
			"could have screwed up over the past few minutes of writing these programs.",
			"I might have omitted a semicolon, as I implied.",
			"I might have not closed my quotes.",
			"I might have gotten my parentheses wrong.",
			"I might have misspelled words altogether.",
			"There's many different ways I could have screwed that program up.",
			"And frankly, off the record, I'm sort of crossing my fingers that I didn't screw",
			"up our very first program together.",
			"But invariably, at some point, maybe not your first program,",
			"but early on in learning how to program or learning how to program in C,",
			"you will screw up.",
			"And you're going to make some typo.",
			"There's going to be some disconnect between what your understanding is",
			"and what you're trying to get the computer to do.",
			"And this is to say there are tools, thankfully,",
			"that can help you solve those problems.",
			"And the first of which is called help50.",
			"Any of the tools whose names end with 50 are specifically",
			"educationally oriented, written by CS50 staff, that are temporary training",
			"wheels that we'll use for the first several weeks of the class",
			"but then eventually, optionally, take away in the sense",
			"that you won't need them anymore.",
			"And so help50 is one command that's going",
			"to allow you to troubleshoot problems that you might not otherwise",
			"see obviously in your own code.",
			"And let me go and simulate this as follows.",
			"Let me go back to the very first program that we",
			"wrote in C, which was quite simply this one whereby it only said hello, world.",
			"And there's a few different places I could have screwed up here.",
			"For instance, suppose I was getting a little ahead of myself",
			"and I admitted the standard io.h file at the top of my program.",
			"The implication is that now my computer is not",
			"going to know what printf is, because it hasn't been included via standard io.h.",
			"So let's see what the error message is.",
			"Hopefully, it'll be a very self-explanatory message",
			"that makes perfect sense.",
			"Let me go ahead and recompile this program,",
			"knowing it already to be incorrect.",
			"And oh, my God.",
			"Like, I have more lines of errors than I actually have lines of code.",
			"And this is kind of a reality of programming.",
			"A lot of programming languages, a lot of tools,",
			"frankly, were not designed with ease of use in mind,",
			"or user-friendliness in mind.",
			"They were really designed with succinctness and precision in mind.",
			"And they tend, unfortunately, to assume that the audience is",
			"as technical as the person who wrote the program.",
			"This, of course, can backfire when you're just learning how",
			"to program in the first place, and you have",
			"to make sense of crazy cryptic output like this.",
			"Today we don't have to focus on every single word that's",
			"been outputted on the screen, but let's start to recognize patterns.",
			"Walking into a new space and just recognizing",
			"familiar objects in the physical world, let's now do that with code.",
			"The most important thing, perhaps, to take notice of is that when you mess up",
			"and you make some mistake in your code such that your program doesn't even",
			"compile from source code into machine code,",
			"odds are you're going to see a clue toward the top of the erroneous output",
			"that tells you the name of the file where you messed up",
			"and the line number where you messed up.",
			"Three implying line three, and then five might",
			"imply what column or what character in that line,",
			"but it depends on the particular problem if that's that useful.",
			"So on line three, I am getting an error, implicitly declaring library function",
			"printf with type int const char star.",
			"I mean, like, who knows what that even means?",
			"You will eventually.",
			"But for today, it just means something bad went wrong.",
			"And you might not see it.",
			"You might not know, if I hadn't told you,",
			"that I intentionally deleted that line.",
			"So let's see if we can't make sense of this by using this tool.",
			"Help50 is a tool written by CS50 staff that",
			"will help translate arcane cryptic computer",
			"messages to more human friendly advice and questions",
			"that you're teaching fellow or teaching assistant might offer you,",
			"say, in the context of office hours.",
			"So to use help50, instead of running the same command again and again",
			"and seeing the same erroneous output, literally just right help50",
			"first, at your terminal window, then write the same exact command",
			"that you're struggling with for whatever reason, and hit Enter then.",
			"And what will happen is the same command will get run.",
			"We will analyze, using the help50 program, what that output is.",
			"And we'll try to highlight in yellow the stuff we recognize.",
			"And then translate it to more human friendly language.",
			"For instance, after running help50, we're asking for help, dot dot dot.",
			"In yellow here is the thing we recognize,",
			"oh, the staff have seen this problem before.",
			"And then down here, did you forget to include stdio.h, in which printf",
			"is declared atop of your file?",
			"So hopefully, if we recognize the problem,",
			"we can guide you with this sort of rhetorical question",
			"that makes you realize, oh, yes.",
			"That's what I did wrong.",
			"So now I can go back up here, move to the top of my file,",
			"and add include stdio.h.",
			"And now notice, if I rerun make hello, voila, the problem is gone altogether.",
			"And we could do this all day long.",
			"There's so many places to mess up.",
			"For instance, I omit the semicolon now.",
			"Let me go ahead and make hello now without the semicolon.",
			"Now we're going to get a different error message.",
			"And you'll see, again, the name of the file where I messed up, hello.c.",
			"This time it's on line five.",
			"And that's true because the line numbers moved down",
			"after I added more stuff up there.",
			"And you can see expected semicolon after expression.",
			"So this one's a little more straightforward.",
			"But you could run help50 on this command,",
			"too, just to get back a little more explicit advice.",
			"So help50 will be your friend any time you",
			"are having trouble getting your code to actually compile.",
			"Well, let me do something else that's bad now.",
			"I've very deliberately been writing fairly pretty code.",
			"I've indented the word printf.",
			"I included some blank line up here.",
			"Just to make it clear, I've put these curly braces,",
			"so to speak, on their own lines.",
			"But frankly, my computer, or CS50 IDE is not so particular.",
			"I could technically get rid of this blank line.",
			"I could move this curly brace way up here.",
			"I could get rid of this indentation altogether and move it on its own line.",
			"And then I could just move this curly brace up here.",
			"Thereby writing a program that's now only two lines long, not six.",
			"But hopefully already, even if you've never programmed before,",
			"this should probably rub you the wrong way.",
			"This is like people in the real world that",
			"don't use punctuation in their social media posts",
			"or their emails or the text messages.",
			"They just kind of go on and on and on.",
			"And yes, the information is there.",
			"You can glean what it is they're trying to communicate.",
			"But my God, is it annoying.",
			"It's hard to read.",
			"There's probably a higher probability that there's a mistake",
			"and it's going to be harder to find it because things aren't nicely balanced",
			"on the left and on the right and on the top and the bottom.",
			"So this is what would be described as bad style.",
			"My program is still correct.",
			"I've got the stdio.h, I've got the semicolon, and everything else.",
			"But it's really bad style.",
			"Because it's just ugly.",
			"There's not much white space.",
			"There's not a lot of blank lines or indentation",
			"that just make it easier for you and I to read this thing from top to bottom.",
			"So notice, it does compile.",
			"So help50 is not going to help me fix this problem because it compiles OK.",
			"But it can run another program that we're going to call style50.",
			"This is another educationally oriented tool",
			"that's installed in CS50 IDE that allows you to figure out",
			"how to improve the style of your code.",
			"So when I run style50 on this prettier code, it indeed looks good.",
			"But it's still giving me advice.",
			"It's telling me to add something called comments.",
			"And a bunch of you figured this out in the world of Scratch.",
			"You can add little sticky notes or post-it notes",
			"to Scratch that are sort of notes to self",
			"that remind you what something does, or maybe explains to your teaching fellow",
			"or teaching assistant what something does.",
			"C supports these as well.",
			"So for instance, if I just wanted to be really pedantic here and make",
			"clear to the human reading my code what I'm trying to do,",
			"I could say something like greet user.",
			"And notice the syntax here.",
			"I've put a new line above my existing line of code,",
			"and I've similarly indented it so everything lines up",
			"visually beautifully.",
			"I've done slash slash, which says, hey, compiler, this is a comment.",
			"This is for human eyes only.",
			"This is not actual C code, per se.",
			"Then I hit the spacebar.",
			"And then I just typed out an English phrase.",
			"And this could be any spoken language.",
			"But I went ahead and typed greet user.",
			"Why?",
			"Well, it's just a reminder to myself what",
			"the purpose of the following line of code is, to greet the user.",
			"This is marginally better, for instance, than saying print hello, world.",
			"And let me just ask you, even if you've never",
			"programmed before why is the first comment a better",
			"comment than the second?",
			"Like, why should I say, if anything, greet user instead of print",
			"hello, world in the form of these comments.",
			"Yeah, Olivia, what do you think?",
			"AUDIENCE: OK.",
			"It tells you the purpose of the code.",
			"DAVID MALAN: Yeah, the purpose of the code as opposed to what?",
			"What distinction are you making?",
			"AUDIENCE: Versus telling you exactly what it's doing.",
			"DAVID MALAN: Yeah, exactly.",
			"If your comment is almost identical to the actual code,",
			"you're not really conveying much more information to the reader, let alone",
			"yourself in the future.",
			"Explaining it more generally, what the purpose of this line of code is to do,",
			"is to greet the user, that's a little more descriptive.",
			"Now to be super fair, honestly, this program",
			"is so short that even though style50, yes, would",
			"prefer that you add some comment, if your program really",
			"reduces to one line of code, you probably don't need a comment here.",
			"However, pretty much every other program we're",
			"going to write here on after is going to be more than just one",
			"main line of code, like this printf.",
			"So it's going to make much more sense soon",
			"to come that we're going to want to actually add",
			"to our code some actual comments.",
			"Well, let me introduce one final tool here",
			"that will help us solve problems as we proceed now",
			"to write more sophisticated programs.",
			"And this is check50.",
			"This is a tool specifically that you'll use either in labs or in problem sets,",
			"the course's programming assignments, to actually check",
			"the correctness of your code.",
			"So whereas help50 just helps you compile your code typically,",
			"when it's not compiling at all, style50 helps",
			"you improve the style of your code, check50",
			"will check the correctness of your code against some automated tests",
			"that we, the staff, have written that are consistent with whatever",
			"the homework problem actually is.",
			"So we write some tests to make sure that your code is working correctly",
			"as per our own specifications.",
			"So how might I run check50?",
			"This will totally depend on the problem set or the lab.",
			"And we will always, in the problem set or lab,",
			"tell you what command to type for check50.",
			"It's not something you could necessarily figure out on your own.",
			"I happen to remember that we have a check, that",
			"is a test, called CS50/problems/hello.",
			"Odds are you will never run this identical command.",
			"Again, in the problem set or lab, we will always tell you what to type.",
			"You won't know what otherwise to type unless we tell you what test to use.",
			"This is going to now upload my file hello.c to a service called",
			"GitHub, which again is a popular tool for sharing code.",
			"We use it to collect submissions for this.",
			"I'm going to then type in my password.",
			"You won't see it.",
			"You'll instead see asterisks or, like, bullets in a web page.",
			"I'm going to go ahead and hit Enter then.",
			"It's going to verify my code.",
			"It's going to do some thinking.",
			"It's uploading now, dot dot dot.",
			"And now we're just waiting for the internet to respond.",
			"Because somewhere on CS50 servers, we are",
			"running your code after compiling your code, or in this case mine,",
			"and making sure, yes, it actually behaved as it should have.",
			"And what you'll typically see, hopefully, are a bunch of green smiley",
			"faces saying yes, that your code exists, yes, that your code compiles,",
			"and yes, for instance, it prints hello, world.",
			"Sometimes you might see red frowny faces,",
			"which means no, your code did not work exactly as it should, per the lab,",
			"or of the problem set.",
			"At which point, it's back to the drawing board on your part to figure out",
			"exactly what needs to be fixed up here.",
			"Sometimes you'll see yellow output with just a straight yellow face, which",
			"just means we weren't even able to run a certain test",
			"because some other test already failed.",
			"So it's meant to be relatively quick feedback",
			"on the correctness of your code before you even submit it and call it a day.",
			"And check50 instructions will always be accompanied by the problem itself",
			"in the lab or problem set.",
			"So some final commands here now.",
			"Within this terminal window, I can do more than just run make and ./hello,",
			"or whatever my program's name is.",
			"And I can do more than help50 and style50",
			"and Check50 it turns out that I'm really using, in the form of CS50 IDE,",
			"my own server in the cloud.",
			"So yes, I'm using a website.",
			"But what CS50 IDE really is, it's like your own server",
			"or your own computer in the cloud.",
			"Somewhere out there on the internet, you have your own username and password",
			"in the form of CS50 IDE.",
			"And only you can access the files that you write, the programs that you",
			"write that are stored in this IDE.",
			"And there's a few more features I'll now draw our attention to.",
			"Perhaps the most friendly one is this little folder icon at top left.",
			"If I click this little folder icon, you'll",
			"now see what's generally called a file browser",
			"or a file tree, which is just a graphical representation",
			"of the files in my account, or in my IDE, in this case.",
			"It looks similar to Mac OS.",
			"It looks similar to Windows.",
			"And this is just a graphical user interface built into the IDE",
			"so that, for instance, if I close my tab by clicking this little x button up",
			"here, and I want to reopen the file, much like you",
			"would imagine on a Mac or PC, it's as simple",
			"as double clicking the file on the left-hand side.",
			"But notice I didn't click on hello.",
			"Because notice what happens.",
			"If I open hello, my gosh, like, what is going on here?",
			"This is kind of a mess.",
			"There's redness.",
			"There's dots.",
			"Any thoughts from someone on why I'm seeing what I'm seeing?",
			"Because odds are you will, accidentally, at some point,",
			"click on a file like hello instead of on a file like hello.c.",
			"Sara, what do you think?",
			"AUDIENCE: It's a binary code.",
			"So it's the machine language.",
			"So it doesn't allow the user to see them, besides the code they write in C.",
			"DAVID MALAN: Yeah, exactly.",
			"What you're trying to look at in this tab is binary code, 0's and 1's.",
			"However, those 0's and 1's are technically",
			"being misinterpreted at the moment as ASCII characters,",
			"or Unicode characters.",
			"So recall from last week, ASCII is this mapping between numbers and letters.",
			"And numbers, of course, are just patterns of 0's and 1's.",
			"And this looks super cryptic, because we're trying to misinterpret 0's and",
			"1's as though they're ASCII characters.",
			"And recall that there's many more characters in ASCII and Unicode",
			"than A through Z. And the numbers, there's some unprintable characters.",
			"And indeed, all the funkiness we're seeing here",
			"is just a misinterpretation of 0's and 1's that",
			"are instructions to the computer, machine code for the computer being",
			"misinterpreted as text.",
			"So if you can't edit a binary file like this, so to speak,",
			"you should just close hello when you do something like that",
			"and make sure you've double clicked on and opened your actual source code",
			"file as well.",
			"So we've seen strings.",
			"And there's other data types.",
			"And there's other functions.",
			"And there's loops and conditions and so much more.",
			"I think we're at a good point now to perhaps take a break, let this sink in.",
			"Why don't we go ahead and take a seven minute break?",
			"And when we resume, we'll introduce a few more features of C",
			"and compare them against what we saw last week in Scratch.",
			"So we'll see you in seven minutes.",
			"All right, we are back.",
			"So recall where we left off was we were looking at this graphical user",
			"interface at top left.",
			"The file browser, the file tree, that just gives us more graphical access",
			"to the files in our account.",
			"But let's now do this the old school command line way in my terminal window.",
			"So it turns out that using our terminal window,",
			"can we not only compile code and run code and run check50 style, help50,",
			"and the like, we can also manipulate files",
			"and folders, even, that happen to exist in my IDE.",
			"That is in the computer I have access to here in the cloud.",
			"And the first command I've proposed is that we type ls.",
			"Ls is shorthand notation for list.",
			"And quite simply, ls lists the files or folders in your current folder.",
			"So this would be like double clicking on your My Documents folder in Windows,",
			"or documents in Mac OS.",
			"Ls just lists the contents.",
			"Now, notice hello is a little weird.",
			"It's highlighted in green and there's an asterisk after it.",
			"And that's just a visual cue that that file is executable.",
			"That is, that is a program that you can run with ./hello.",
			"The star is not part of the file name.",
			"And of course, we see hello.c.",
			"Now, suppose that I wanted to maybe rename my file.",
			"Well, I could, much like in Mac OS or Windows,",
			"I could go up to the file browser up here.",
			"I could Control click or Right click.",
			"And notice there's a whole bunch of menu options",
			"that pop up just like on your own computer.",
			"And I could rename the file right up here.",
			"But generally speaking, we're going to do things at the command line",
			"only because, rudimentary as some of these operations today",
			"are, it's going to be a much more powerful command line interface for me.",
			"So suppose I change my mind, and you know what?",
			"I don't like this version of hello.",
			"I want to delete that program and start over.",
			"Strictly speaking, I don't need to delete hello ever.",
			"I can just recompile it, and it will keep getting changed and changed.",
			"But if I do want to remove it, I can type rm hello, and then hit Enter.",
			"And then I'll be asked, remove regular file hello?",
			"That's just a visual confirmation that I do indeed want to delete.",
			"And I can type y or yes or some such reply.",
			"And if I hit y and Enter, nothing seems to happen,",
			"but notice what happened up here at top left.",
			"Notice that hello is now gone, leaving only hello.c.",
			"And if I type ls again, now I see only my code file.",
			"Maybe now I want to change this program, and I don't",
			"want to write hello.c, but goodbye.c.",
			"Well, let me close the tab up there.",
			"And yes, I could go and Right click or Control click on it,",
			"but, again, we don't need to use the graphical interface.",
			"Let me go ahead and instead do mv hello.c goodbye.c.",
			"Mv is the move command.",
			"And even though it would be nice if it's called rename instead of move,",
			"move just moves one file to another location or to another name.",
			"So if I do mv hello.c goodbye.c.",
			"Notice what happened at top left.",
			"Now my same file is called goodbye.c.",
			"And if, again, I type ls, I can see that it's indeed renamed.",
			"Now, let me go ahead and move that back because I",
			"want to stay on my hello.c program.",
			"But suppose I want to start organizing my files.",
			"In a moment we're going to start writing more programs,",
			"and so my account is going to get a little bit",
			"messy with more and more files over the course of today.",
			"So suppose you want to create a folder, otherwise known as a directory.",
			"I'm going to go ahead and type mkdir for make directory.",
			"And then the name of the directory I want to make, for instance, lecture.",
			"You can call it anything you want, but if I'm in lecture, I'm writing code,",
			"maybe I want to store all of today's files in a lecture directory.",
			"When I hit Enter there, notice what happens in my file tree up here.",
			"I now see a lecture folder.",
			"If I click the triangle, it's empty because I haven't put anything in it.",
			"So let me go ahead and move hello.c into the lecture folder.",
			"Mv hello.c lecture, and now let me hit Enter.",
			"And voila, now notice that it's nested inside of this lecture folder.",
			"And indeed, if I now type ls for list, I only see the lecture folder.",
			"Unfortunately, I kind of now don't have access",
			"to hello.c within this command line environment",
			"unless I change into that directory.",
			"Now, in the world of Macs and PCs we, obviously,",
			"would just double click on a folder and voila we're inside of it.",
			"In a command line interface you need to be more deliberate.",
			"So I'm going to do cd, for change directory,",
			"then lecture, and then I'm going to go ahead and hit Enter.",
			"And now notice, and now it might make more sense",
			"why this whole time we've been seeing in blue this tilde lecture slash.",
			"The tilde just means my so-called home directory.",
			"Like my own account, my own default folder, like my documents and windows,",
			"or documents on Mac OS.",
			"That's what tilde represents in shorthand notation.",
			"Lecture is the name of the folder that I am now inside.",
			"So it's as though I double clicked on lecture in Mac OS or Windows",
			"to open a folder.",
			"Now I'm inside this lecture directory in my terminal window.",
			"So if I now type ls enter, I should see voila,",
			"the hello.c file that I moved into it.",
			"Now, let me undo this because I'm going to go ahead",
			"and keep things a little simpler for now.",
			"And suppose that I want to move hello.c into where it previously was.",
			"Last piece of syntax.",
			"There's this shorthand notation for what we'll call a parent folder.",
			"So just like in family trees, there's the notion of parents, and children,",
			"and grandchildren, and so forth.",
			"That's also true in computer systems that have folders.",
			"And folders inside of folders.",
			"And folders inside of folders inside of folders.",
			"There's a hierarchy there much like a family tree.",
			"So if I want to move hello.c one level up,",
			"I can actually do mv hello.c space dot dot.",
			"And that's like saying move this file to the folder up above.",
			"When I do that, notice what happened at top left.",
			"Now hello.c is not inside of the lecture folder, but below it.",
			"And indeed, if I type ls now in the lecture folder, there's nothing there.",
			"How do I move myself up one level in the family tree that are these folders?",
			"Let me go ahead and type cd space dot dot.",
			"So change directory to my parent.",
			"Dot dot just means your parent.",
			"The folder up above, Enter.",
			"And now, I'm apparently in just tilde slash,",
			"which is, again, cryptic shorthand notation for your own home directory--",
			"your My Documents or documents folder.",
			"And if, lastly, I type ls here, I'm done with this lecture folder.",
			"I don't want to bother storing things in a folder.",
			"I can do not rm for remove, like I did to get rid of hello,",
			"but rmdir to remove a directory.",
			"And voila, it's gone.",
			"And I've undone all of the various changes that I made earlier.",
			"But perhaps now it makes a little more sense",
			"why I was doing something earlier.",
			"Let me open up my hello.c file.",
			"Let me make hello again, which is way back where we left off.",
			"And recall that all this time I've been doing dot slash hello.",
			"Well, why is that?",
			"Well, just as dot dot refers to your parent directory,",
			"a single dot refers to your current directory.",
			"So even though this looks a little silly,",
			"dot slash hello is just a very explicit way",
			"of telling the computer, run the program called hello",
			"that's right here in my current directory.",
			"Dot means current directory.",
			"Dot dot means parent directory.",
			"And so there we see, finally, why I've been",
			"typing dot slash hello all this time.",
			"But again, it's just the textual analog of doing something",
			"like double clicking on an icon in Mac OS or Windows.",
			"So there's other commands too, and over time you'll get exposed to these",
			"and use them for various problems.",
			"Cp for copy, for instance, is yet another.",
			"And many others, but these are all just standard commands.",
			"They are not CS50 specific.",
			"Standard commands that allow us to manipulate files and folders",
			"in a computer like this.",
			"And question from Max.",
			"AUDIENCE: Hi.",
			"Yeah, sorry.",
			"I was just wondering.",
			"I don't really understand the difference between the hello program",
			"and the hello.c program.",
			"It seems like the one that doesn't have dot c on it isn't used for anything.",
			"DAVID MALAN: Oh, it is though.",
			"So recall that we have two things in the story.",
			"We have source code, which is the C code I've been writing.",
			"And then machine code, which is the zeros",
			"and ones that the computer understands.",
			"I have been writing all of my code in the file called hello.c.",
			"But after I compile it with make, the make program",
			"creates a new file called hello that technically contains only zeros",
			"and ones.",
			"And that is the machine code that I'm actually",
			"running when I do dot slash hello.",
			"So again, I can use rm and I can get rid of the hello program",
			"just like I did before.",
			"And now we're back at the very beginning of the story",
			"where we wrote this code from scratch.",
			"If I now type make, and let me do this now, ls.",
			"Notice I've only got one file.",
			"Let me now do make hello.",
			"I see that cryptic output, but if I type ls again, now I have two files.",
			"And that's because only the green one with the asterisk is executable.",
			"That is the machine code that the compiler has created for me.",
			"And I should say and disclaim, I've been telling a little bit of a white lie",
			"today.",
			"Make itself is not actually a compiler.",
			"We'll see next week exactly what make is doing.",
			"But it's making it easier for us to actually compile our code,",
			"but more on that next time.",
			"All right.",
			"So we've seen only strings thus far, but it turns out in C,",
			"and in a lot of languages, there's other things known as types or data types.",
			"That is to say, you can have variables and values",
			"that aren't just strings of text, but that are maybe integers,",
			"like numbers, one, two, three, four.",
			"Or maybe floating point values, like 3.14159, or other such values.",
			"You can have Boolean values, which are only true or false.",
			"You can have characters or chars, which are single characters.",
			"This is to say, within a language like C there's actually a whole bunch of data",
			"types that are available to you.",
			"String is only one of them.",
			"And there's even more than are on this list here,",
			"but this is just a list of some of the most common ones that we'll see today",
			"and we'll use this coming week in the first problem set",
			"that allow you to tell the computer not only to store a value in a variable,",
			"but what type of value to store in a variable.",
			"Moreover, we have in the CS50 library a whole bunch more functions.",
			"We've seen get_string already.",
			"But similarly have we created functions that you",
			"can use for problem sets, labs, and beyond that",
			"allow you to get a single character via a get_char.",
			"That can allow you to get an integer via get_int.",
			"That can allow you to get a floating point",
			"value, which is a fancy way of describing a real number,",
			"with a decimal point using get_float.",
			"But it turns out that each of these data types, like int and float,",
			"only have a finite number of bits.",
			"And recall from last week that we played around with light bulbs",
			"and we played around with bits and zeros and ones more generally.",
			"It turns out that every one of these data types,",
			"char, double, floats, int, long, string, and so forth, all",
			"use a specific number of bits.",
			"And it turns out that int, for instance, integers in C, only use 32 bits.",
			"And that's great until such time as you want to count higher than roughly 4",
			"billion, at which point you can't.",
			"We'll see later today that if you're only using a specific number of bits",
			"you can only count so high, and so there exist other data types.",
			"For instance, a long.",
			"A long is another type of number in C that just uses 64 bits.",
			"So it gives you way more expressiveness, way more patterns of zeros and ones",
			"to count even higher.",
			"Similarly, a double is like a floating point value.",
			"A real number with a decimal point and some number of digits after it.",
			"A double allows you to have even more digits after it than a float would.",
			"So we'll see and use some of these data types in just a bit.",
			"Printf, similarly, has the ability to print out not only strings",
			"as we saw, but also using different format codes other data types as well.",
			"These are a little more cryptic and it's fine to look these things up as needed,",
			"but you'll eventually ingrain them for common use cases.",
			"Percent c is going to be the placeholder for printing a single character.",
			"Percent c for a char, so to speak.",
			"Percent f is going to be for a floating point value.",
			"So if you want to print out a real number with a decimal point,",
			"you're going to use percent f.",
			"If you want to print an integer using print f,",
			"you're going to use percent i for integer.",
			"If you want to print a string we've already seen percent s.",
			"And if you want to print a long integer, a.k.a.",
			"long, you're going to use percent li.",
			"And there's even others, but these are perhaps some of the most common.",
			"And it just means that, again, C really needs you, the programmer,",
			"to be precise.",
			"You can't just say, print this.",
			"You have to tell printf how to print the variable or the value",
			"that you're passing into it.",
			"And then lastly, it turns out that in C there's",
			"a whole bunch of operators, certainly mathematical ones and bunches of others",
			"as well.",
			"Just like Scratch out a whole toolkit of operators.",
			"And suffice it to say for now that C also supports addition, subtraction,",
			"multiplication, division, and even the remainder",
			"operator, which a little cryptically is represented with a percent sign.",
			"Not to be confused with printf's format codes,",
			"but this is to say that some of the earliest uses of computers, of course,",
			"were all mathematically oriented in spreadsheet programs.",
			"Programs like VisiCalc and the like back before there was Excel and Google",
			"spreadsheets.",
			"And they certainly, computers, are very good at supporting math.",
			"And so these are just some of the operators that will now see",
			"are available to us.",
			"So let me go ahead and do this.",
			"Let me go back to my IDE after cleaning things",
			"up, and starting fresh with just nothing in my terminal window and no tabs open.",
			"And let me go ahead and write my next program this time",
			"using some more of these functions.",
			"I'm going to go ahead and create a file up here called addition.c.",
			"So addition.c, but I could call this anything I want,",
			"but it's important to add the dot c.",
			"Otherwise the computer will not know that it's actual source",
			"code as opposed to machine code.",
			"And let me go ahead and make use of the CS50 library.",
			"So let me include cs50.h.",
			"Let me include stdio.h, so that I can use things like get_int and printf.",
			"And then, again, for today's purposes,",
			"I'm just going to do int main void, and then the curly braces.",
			"And again, for today, just take on faith this is necessary.",
			"But we'll explain within a week or two exactly why",
			"we keep writing int main void.",
			"But for now, it's like the win green flag clicked puzzle piece.",
			"Let me go ahead now and get an integer from the user.",
			"Suppose my goal now is not to write a program that",
			"gets a string of text and prints out hello, Brian, or hello, David.",
			"Let me go ahead and write a program that maybe asks",
			"for two integers, two numbers, and then just adds them together.",
			"So let me make the simplest of calculators using code.",
			"Well, I'm going to go ahead and declare a variable called",
			"x, just like a mathematician would.",
			"And I'm going to assign it the value of calling get_int.",
			"And I'll just say something like x colon.",
			"I could say anything I want, what is x?",
			"But I'm going to keep it simple and just say x colon.",
			"Semicolon to end my thought.",
			"So again, similar in spirit to what I did with string before,",
			"but now I'm using get_int to get a number or an integer from the user.",
			"The quoted parameter here or argument is the input",
			"to get_int, which is going to be the prompt that the human sees.",
			"The equals sign, recall, is the assignment operator,",
			"which says, copy the return value on the right--",
			"the integer that the human hopefully will type in--",
			"over to the left.",
			"And the left says, give me a variable called, x,",
			"and let me store integers in it.",
			"So before, we use string on the left and we used get_string the right.",
			"The only difference now is int on the left,",
			"because I want a number, and get_int on the right.",
			"Then let me go ahead and do this again and get another number.",
			"Get_int, and I'll just say, y colon.",
			"But again, I could say, what is y question mark, or anything in English.",
			"But the last line is going to be the interesting one.",
			"Now, I'm going to go ahead and print out for instance,",
			"the sum of these two numbers.",
			"But printf, again, takes an input that tells it what to print out exactly.",
			"So I can't really type a number here yet because I don't know",
			"what the human is going to type in.",
			"So I'm going to put a placeholder.",
			"I'm going to percent i, which says, put a number here,",
			"I just don't know yet what it is.",
			"And then just to keep things clean, I'm going",
			"to do backslash n, which just says, give me a new line also.",
			"That's just an aesthetic detail to move the cursor to the next line just",
			"to keep things clean.",
			"But now printf is going to take a second argument.",
			"And whether you've programmed or not before--",
			"Brian, let's go to someone in the audience if we could--",
			"what should I type after the comma if the purpose of this program",
			"is quite simply to add two numbers together?",
			"Even if you've never programmed before, based on the operators that exist",
			"and some of the syntax we've seen thus far,",
			"what would your instincts have you type here?",
			"Even if you've never done this before.",
			"Santiago, what do you think?",
			"AUDIENCE: I would say to just write x plus y.",
			"DAVID MALAN: Yeah, it is simple and as straightforward as that.",
			"X plus y is the right intuition.",
			"I'm going to add a semicolon to the very end just to finish my thought.",
			"But indeed, computers, and C in this case,",
			"absolutely understand arithmetic and mathematical operations, so just type",
			"what you mean.",
			"I'm going to go ahead now and save the file and go down below.",
			"And I'm not going to type make hello anymore.",
			"Now I want to type make addition, because that is the name of my file",
			"implicitly.",
			"Addition.c.",
			"I want to compile into a program called addition.",
			"Hopefully, this is where I cross my fingers, I didn't make any mistakes.",
			"And I'm going to go ahead and run make addition.",
			"All this well, no error messages.",
			"If I had made a mistake and it didn't even compile,",
			"help50 might have been my next instinct.",
			"Now I'm going to go ahead and run dot slash addition.",
			"And notice, I'm first prompted for x.",
			"I'm going to go ahead and do one.",
			"I'm next prompted for y.",
			"I'm going to go ahead and do one again.",
			"And voila, as Santiago proposed, I indeed see on the screen x plus y,",
			"or the value two.",
			"And I didn't hardcode two.",
			"I substituted in using i whatever the result of x plus y actually is.",
			"Now notice, some of the features of the get_int function for you.",
			"Suppose that you're not being very cooperative and you type in cat for x.",
			"Notice that get_int just ignores you and prompts you again.",
			"If I type in dog it ignores me and prompts me again.",
			"If I type in 1.23, it ignores me and prompts me again",
			"because it wants an integer in this case.",
			"A number like one, two, three, four.",
			"Or negative one, two, three, four, or zero, or anything above or below.",
			"So fine, I'll cooperate now and give it the number one.",
			"Same for y.",
			"It's going to ignore any non-integer input.",
			"So if I give it a number like two this time,",
			"I'll hopefully get the answer of three.",
			"All right.",
			"So we have a basic calculator in C. We're using some basic building",
			"blocks as before.",
			"We've got these header files, which just give me access to get_int and printf",
			"respectively.",
			"But suppose now I want to count up even higher.",
			"You know what?",
			"Let me try something like this.",
			"Let me run this program once more.",
			"And let me get a little greedy.",
			"How about 4,000,000,000.",
			"So roughly-- well, exactly--",
			"4 billion.",
			"That's the number I want to type in.",
			"Notice that x does not like that.",
			"So get_int does not accept 4 billion.",
			"Well, let me try it maybe 3 billion.",
			"Uh-huh.",
			"Didn't like that.",
			"How about 2 billion?",
			"OK, that one worked.",
			"Let me pause here.",
			"What's going on perhaps?",
			"Now again, we the staff wrote get_int, so we",
			"are the ones that are rejecting cats, and rejecting dogs, and rejecting",
			"4 billion, and even 3 billion.",
			"But in this case, it's a little less clear.",
			"Why did we reject 4 billion and 3 billion do you think?",
			"Based on some of the definitions thus far today.",
			"Why might this be?",
			"Nathaniel, what do you think?",
			"AUDIENCE: There's a cap on the size of the number",
			"since it would take too many bits and bytes after the size of 2 billion.",
			"DAVID MALAN: Perfect.",
			"So integers, again, are implemented in C as these things ints.",
			"Ints only use, it turns out, 32 bits total.",
			"And you would only know that by having been taught it",
			"or looked it up for a particular computer system.",
			"But they on CS50 IDE, and most modern systems, an integer is only 32 bits.",
			"And that then invites the question, well,",
			"if you've got 32 bits or light bulbs, how high can you count?",
			"Well, it turns out with 32 light bulbs, or bits,",
			"you can count roughly as high as 4 billion.",
			"You can absolutely count as high as 3 billion.",
			"And yet, get_int still rejecting it.",
			"But that's because the get_int function supports integers broadly",
			"speaking, which includes not only positive numbers,",
			"but also negative numbers and zero.",
			"And the catch is that if you want to support both positive numbers",
			"and negative numbers, you can represent 4 billion or so total possible values.",
			"But if you want to go as far to the left and as far to the right on the number",
			"line that I'm describing.",
			"You can only really count as high as 2 billion in the positive direction",
			"and negative 2 billion in the negative direction.",
			"Because that still gives you a total of 4 billion,",
			"but not nearly as high as 3 billion or 4 billion.",
			"So what might the solution here be?",
			"Well, I recall earlier noting that there's other data types.",
			"Not just ints and strings, but also longs, which literally",
			"are longer integers, namely 64 bit.",
			"So let me go ahead and try this.",
			"Let me go ahead and change get_int to get_long.",
			"This get_int to get_long.",
			"Let me change this int a long, and this int to a long.",
			"So same program, same calculator, but I'm",
			"now using a different data type that's just",
			"going to use more bits to store values.",
			"Let me run make addition again to recompile my program.",
			"And, oh, damn it.",
			"I screwed up.",
			"So let's see if we can't glean what's wrong here.",
			"Let me scroll up.",
			"And I can't emphasize this enough.",
			"Sometimes-- I got lucky here and I only have one mistake, apparently,",
			"in the error messages-- it is not going to be uncommon",
			"for you to have two errors, 10 errors, in like two lines of code.",
			"This is because sometimes when you have errors in your code,",
			"the compiler sometimes just gets confused.",
			"And if it gets sufficiently confused, it starts thinking everything",
			"is an error in your actual code.",
			"So the most important takeaway is that no matter",
			"how many errors you seem to have, always scroll up to the top of the output",
			"and address the first error first.",
			"So that's why I scrolled up in my window to look immediately below what I typed,",
			"make addition, and here's the first error.",
			"Addition.c on line 10.",
			"All right.",
			"I can't see line 10, so let me scroll my code up.",
			"And it's saying something about format specifies type int,",
			"but the argument has type long.",
			"We haven't seen this error before, but I think I can infer from this.",
			"It's not super cryptic even though it's unfamiliar.",
			"I think what this means is that percent i recall was for integers.",
			"I think what I need is a different format code for long integers, which",
			"is going to be li instead.",
			"And that was from my little cheat sheet earlier.",
			"So let me go ahead and try this again.",
			"Make addition after changing the i to an li.",
			"That indeed works.",
			"Now let me do--",
			"oops, typo.",
			"Now let me dot slash addition.",
			"And now I'll type in 4,000,000,000.",
			"4 billion.",
			"Now get_long is happy, and it will accept such a long integer",
			"because it has enough bits.",
			"All right, questions on types like ints and longs,",
			"or functions like get_int or get_long.",
			"Yeah, Peter.",
			"AUDIENCE: Yeah.",
			"When I typed 2 billion and both were integers, well,",
			"eventually it just gives you the wrong answer.",
			"Some negative numbers.",
			"Is that because of the bits and bytes?",
			"DAVID MALAN: Indeed.",
			"It's the same answer.",
			"So I didn't demonstrate that, but if you inputed both 2 billion",
			"for x and 2 billion for y and then you try to add those together,",
			"that would give you mathematically 4 billion.",
			"But again, an int is not big enough to store 4 billion",
			"if we want to also be able to represent negative numbers.",
			"So Peter what you're seeing is that you can't fit",
			"the result in the data type allowed.",
			"And we'll see in a moment--",
			"in a little bit today, actually, what the ramifications of that",
			"are, but the symptom you're describing is exactly.",
			"That you tried to cram too big of a number into finitely many bits, 32.",
			"You can avoid that problem though, of course, by switching over to long.",
			"Let me try one other thing that's a bit curious.",
			"Let me go ahead and write a slightly different program now.",
			"And I'm going to describe this as truncation.c.",
			"Fancy term, but we'll see what this means in just a moment.",
			"I'm going to give myself at the top, cs50.h.",
			"And I'm going to give myself stdio.h.",
			"And it's certainly fine, once you get started with the first lab or problem",
			"set, if it takes you much longer to type some of these things out.",
			"I'm just doing it for muscle memory.",
			"Int main void.",
			"And now we're good to go with a new program in a file called truncation.c.",
			"I'm going to go ahead and prompt a user for an int, again.",
			"So just like before.",
			"I'm going to prompt the user for another int, just like before.",
			"And then I'm going to go ahead and do this.",
			"I want to do division this time.",
			"So not just a addition, that was a little too easy.",
			"Let me do a division.",
			"So let me give myself another variable, z equals x divided by y.",
			"And let me pause here for a moment and just ask",
			"the question, what data type should I perhaps use for z?",
			"This line of code is not yet correct, because recall that any time you",
			"create a new variable on the left here, I'm",
			"going to need to put something to the left of that variable's name",
			"so that C knows what type of variable I want.",
			"And thus far we've seen string and int and long.",
			"So would you propose we use one of those or something else for z?",
			"How about Jack.",
			"What do you think?",
			"AUDIENCE: Would it be a float?",
			"DAVID MALAN: Yeah, so float.",
			"So float, which is short for floating point value, which is the programmer's",
			"way of describing a real number.",
			"Let me go ahead and do that.",
			"A float.",
			"And I'm guessing your instincts for float were that, well,",
			"if you type in one number for x and another for y",
			"and the result is a fraction of some sort, so something",
			"with a decimal point.",
			"We need to store it in a float so that we can actually",
			"store whatever the numbers are after the decimal point.",
			"So let's go ahead and do this.",
			"Let me now go ahead and print this out.",
			"Percent f backslash n, because I'm printing a float this time.",
			"And then let me go ahead and print out the value of z.",
			"And you know what?",
			"Just for good measure, let me start practicing good style here too.",
			"So get a number from user.",
			"Let me give myself another comment.",
			"Get another number from user.",
			"Or you know what?",
			"This seems a little silly.",
			"I can combine these lines.",
			"And why don't I just say, get, for instance, numbers from user.",
			"That's a reasonable way to comment your code.",
			"And then let's just go ahead and divide x by y.",
			"But even this is getting a little pedantic",
			"because you can kind of read that from the code.",
			"So at some point we might not even need a comment for that.",
			"So let's just simplify as such.",
			"Let's go ahead now and compile this.",
			"Make-- come on--",
			"make truncation.",
			"All right, it compiles OK.",
			"And I like how we used a float here.",
			"That does feel correct.",
			"So let me run truncation.",
			"And let me go ahead and type in, for instance, 4 for x and 2 for y.",
			"OK, I like that.",
			"It's 2.000, so that's the correct math calculation.",
			"How about 1 divided by 2.",
			"So x is 1, y is 2, and it's 0.000000.",
			"All right, well, maybe that was just a fluke.",
			"Let me try running it again.",
			"How about 2/3?",
			"2 divided by 3.",
			"That's not right either.",
			"All right.",
			"How about 4/3?",
			"Let's put a bigger number for the x, so 4/3.",
			"OK, it's closer to right.",
			"But this is an example, this week, of a bug.",
			"So my code compile.",
			"So syntactically it's fine, but this is a logical bug.",
			"Like I've somehow used C code improperly.",
			"So what might be going on here?",
			"Why is 1 divided by 2 and 2 divided by 3 both apparently zero,",
			"followed by six zeros after the decimal point.",
			"And even 4/3 gives me 1.000000 instead of 1.33333.",
			"Nina, what do you think?",
			"AUDIENCE: Because with int they don't recognize decimals.",
			"So 4/3 question three only goes into 4 one time, so it returns a 1.",
			"And you need to use other types of character,",
			"like a float or a double if you want the actual decimal.",
			"DAVID MALAN: Yeah, exactly.",
			"This one's more subtle than the mistakes I've made before.",
			"But C, like most programming languages, is going to take you literally.",
			"So if on the right hand side of this expression, on line 11,",
			"I am literally doing x divided by y.",
			"You first have to ask yourself, well, what is the type of x?",
			"What is the type of y?",
			"If they are both ints, by definition of how C works,",
			"you are going to get back an integer as your answer.",
			"So if you do 1 divided by 2.",
			"Yes, mathematically that's 0.50000.",
			"However, if you convert that to an int, in so far as x and y are ints,",
			"the way C works is it truncates everything after the decimal point.",
			"So it does the math correctly, but because you cannot fit floating point",
			"values, you cannot fit decimal points and numbers thereafter in an integer,",
			"you get you lose all of those digits after the decimal point because you can",
			"only fit the integer part of the answer into an integer.",
			"It's not relevant that I'm saving the result ultimately in a float",
			"because that's too late.",
			"The math has already been done on the right hand side.",
			"And so yes, I'm storing an integer in a float so I can print it as a float,",
			"but it's too late.",
			"Everything after the decimal point has already been thrown away.",
			"So what are the implications of this, or how could I fix?",
			"Well, I could go through and just change all of this right.",
			"Well, if the problem is that x and y are ints,",
			"well, let me just change them to floats.",
			"And change this up here, change x to a float, change y to a float,",
			"and so forth.",
			"That would fix the problem.",
			"But that's kind of a heavy handed solution to this problem.",
			"Go through and change all of your code.",
			"You can instead be a little more clever, and you",
			"can convince the computer to convert an integer to a float",
			"by something known as casting.",
			"So I can actually go in here, and using a new syntax I can say float y.",
			"And I can even, for good measure, but it's not strictly necessary,",
			"also do it to x.",
			"You can in C, cast or typecast one data type to another",
			"by literally in parentheses just putting the new data type that you want.",
			"And if it makes mathematical sense for one to be converted into the other,",
			"the computer will do it for you.",
			"So in this way I'm telling the computer, convert x to a float,",
			"convert y to a float, then do the math.",
			"And so before when I typed in one and two respectively for x and y,",
			"now it's like I typed in 1.0 and 2.0.",
			"And 1.0 divided by 2.0 is going to be mathematically 0.5,",
			"but because x and y now were converted in advance to floats,",
			"the answer is going to remain a float, 0.5.",
			"And that's what's going to get stored in z and ultimately printed.",
			"So if I rerun truncation having now fixed this problem.",
			"Let me do dot slash truncation.",
			"Type in one, type in two.",
			"I don't have to type the 0.0 myself.",
			"The computer's doing that for me via these casts in parentheses.",
			"Now I see that the answer is indeed 0.5.",
			"All right.",
			"So we seem to have now some very basic low level control",
			"over what you can do with the program.",
			"Let's now add back all of the fancy features",
			"that we had from Scratch last week so we can",
			"start making more interesting programs.",
			"So variables and another term of art called syntactic sugar is also",
			"among C's features here.",
			"So recall from last week when we wanted to have a variable called",
			"counter set equal to zero.",
			"We can go ahead and define it like this.",
			"In C, starting today, we're going to instead say something",
			"like, counter equals zero.",
			"But we additionally need to specify the data type of that variable,",
			"and we need to end our thought with a semicolon.",
			"So whereas we set counter to zero like this last week, now",
			"it's going to translate quite simply to this on the right hand side.",
			"Well, what comes after that?",
			"Well, if we wanted to increment a counter variable last week by one,",
			"adding one to it, we used quite simply this puzzle piece.",
			"This week we need to be a little more explicit and say something like this.",
			"Counter equals counter plus one, and semicolon to finish the thought.",
			"Now, this might seem very mathematically paradoxical.",
			"Like, how can counter equal counter plus one?",
			"Like, that just doesn't work logically.",
			"But that's not the equal sign in this case.",
			"In C, as with other languages we'll encounter,",
			"the equals sign is the assignment operator from right to left.",
			"So this is saying, take counter plus one,",
			"and store that mathematical result on the left.",
			"So whatever counter is, add one, store the result in counter thereafter.",
			"Effectively, increasing its total by one.",
			"Now this is a very common operation in programs",
			"we'll see over the term where you just want to add something up",
			"because you want to keep track of the count of something.",
			"So it turns out there's some syntactic sugar, which",
			"means there's a different way of doing this syntactically that doesn't give",
			"you any new capabilities that you didn't already",
			"have in C. It just makes it marginally more pleasant or quicker to type.",
			"So this line of code in C is identical to saying this line of code",
			"in C. Counter plus equals one semicolon means take the variable on the left",
			"and just add one to it.",
			"And it's slightly more succinct, and it just",
			"makes your code a little more readable because it's just fewer things for us",
			"humans to have to read.",
			"But you can even do one step further.",
			"Additional syntactic sugar exists, whereby",
			"you don't even need to type this.",
			"You can instead just do counter plus plus.",
			"Counter plus plus is the shortest hand notation",
			"in C for just adding one to a variable.",
			"All right.",
			"Besides variables, what else do we have in our toolkit as of last week?",
			"Well, we also had in our toolkit last week the notion, of course,",
			"of conditions.",
			"A condition was like a fork in the road that",
			"could allow you to do this thing, this other thing, or something else",
			"altogether.",
			"In Scratch for instance, if we wanted last week to compare two variables,",
			"x and y for inequality.",
			"Is x less than y?",
			"And if so, say x is less than y.",
			"How can we translate this to C?",
			"Well, the syntax is going to be quite simply this.",
			"Some new stuff.",
			"Some more parentheses, some more curly braces.",
			"But it kind of visually looks the same, albeit in text form.",
			"I literally say, if a space, then in parentheses I",
			"include my Boolean expression, recall those from last week.",
			"X less than y is my Boolean expression.",
			"Then notice I use an open curly brace and a close curly brace.",
			"And then I'm just leaving a blank line for one or more lines of code",
			"just like I might of last week.",
			"And in fact, let's put the equivalent line of code here.",
			"Print out using printf, x is less than y, backslash n.",
			"So we've already done that translation before.",
			"Say is just like printf, just like if now is like if.",
			"Strictly speaking, especially if you've programmed before,",
			"you do not need these two curly braces if you only",
			"have one line of code inside of the condition.",
			"However, stylistically for CS50 and for style50's sake,",
			"always include these curly braces nonetheless, and on their own lines.",
			"All right, what else can we do in Scratch?",
			"Recall that we can do if else.",
			"And we can go either one way in the fork or the other way in the fork.",
			"In C, the corresponding code is going to look like this.",
			"So it's almost the same as before.",
			"I've just added else, and then another curly brace and a close curly brace.",
			"And let me just add in the printf's.",
			"And you can see that in C this is really like the black and white,",
			"the text based version of what was very graphical last week,",
			"but the idea is the same.",
			"You just got to start to recognize where the parentheses go,",
			"where the curly braces go, the semicolons,",
			"and all that sort of visual stuff.",
			"All right, let's make one more Scratch comparison.",
			"Here is one where I said if x is less than y, say x is less than y.",
			"Else if x is greater than y, say x is greater than y.",
			"Else if x equals y, then say x equal to y.",
			"Now, here is where Scratch and C diverge.",
			"Because Scratch is meant to be very user friendly",
			"and not require long explanations of assignment operators, MIT for Scratch",
			"just use the equal sign for equality.",
			"Whereas C uses the equal sign for assignment from left to right,",
			"but this means equality as before.",
			"All right.",
			"Now, notice the difference here.",
			"Everything is a line by line translation,",
			"although we can put else if on the same line and else if on the same line.",
			"Except here is kind of a stupid workaround, right?",
			"In some sense humans decades ago realized, oh, shoot, at one point.",
			"We've already used the equal sign for assignment.",
			"What do we use now for equality?",
			"Well, MIT ignored that problem and just used a single equal sign for equality.",
			"Computer scientists inventing C and subsequent languages",
			"when comparing two values on the left and right for equality",
			"used two equal signs just because.",
			"One equal sign is assignment from right to left.",
			"Two equal signs is equality comparisons.",
			"Are these two values equal?",
			"But you know what?",
			"This is not necessarily well designed.",
			"It is correct.",
			"Logically both my scratch code and my C code is correct,",
			"but can anyone make an observation as to why the code is not",
			"necessarily well designed?",
			"I'm doing a little more work than I need to.",
			"I could tighten this code up a little bit.",
			"I could type slightly fewer characters and accomplish",
			"the same correct decision making.",
			"Any thoughts on in what sense this code is not perfectly designed?",
			"[INAUDIBLE], over to you.",
			"AUDIENCE: Yeah, so you used else if two times.",
			"You could have used else in the end and without the condition.",
			"DAVID MALAN: Really good observation.",
			"I'm using else if twice, which logically is fine.",
			"This code is correct.",
			"It's asking and answering the right questions, but consider this.",
			"If x is less than y, is one possibility, one fork in the road.",
			"Else if x greater than y is the second.",
			"What's the only other possibility logically in the world of math?",
			"Either it's less than or greater than or equal to.",
			"There's no reason to belabor the point and ask that third question explicitly.",
			"Let's simplify the code and marginally better design it as this.",
			"Just get rid of the else if as you proposed.",
			"Which isn't that much cleaner, isn't that much shorter,",
			"but it does avoid asking an additional question.",
			"So instead of maybe three questions being asked, now there's only two.",
			"And frankly, if you're writing a lot of code or doing this again and again",
			"and again, that kind of difference might very well add up and indeed",
			"give us now some better code.",
			"So now that I have the ability to use these conditions.",
			"Let's actually try converting this into a program.",
			"Let me go ahead and open up a program that I",
			"wrote in advance called conditions.c.",
			"And I have at the top of the file my two includes as usual.",
			"And then down here, I have pretty much what we just saw on the slide,",
			"plus two calls, or uses, of get_int.",
			"And then I'm just asking this question down here, if x less than y.",
			"Else if x greater than y.",
			"Else go ahead and do the following.",
			"So it's just a copy paste pretty much of the Scratch translation.",
			"Let me go ahead and make conditions, which again, conditions.c",
			"is the name of the file.",
			"No apparent mistakes.",
			"So let me go ahead and run dot slash conditions, Enter.",
			"And x will be 1, y is 2.",
			"And indeed, x is less than y.",
			"If I go ahead and run this, this time for instance, with how about 10 and 5.",
			"X is greater than y.",
			"And then lastly, if I go ahead and run this with 4 and 4.",
			"X is equal to y.",
			"So I now have a C program that is adding conditions",
			"for me, which is actually then allowing me to make decisions and print out",
			"one thing potentially or the other.",
			"But let me do something slightly fancier.",
			"Let me go ahead and open up another--",
			"let me write this program from Scratch.",
			"Suppose I want to write a program called agree.c",
			"that stimulates the idea of like these stupid forms",
			"that you have to agree to when using a piece of software",
			"for the first time or the like.",
			"Or even when I deleted a file before I had to type in yes or y in order",
			"to proceed.",
			"Let me go ahead and include cd50.h at the top.",
			"Let me go ahead and include stdio.h at the top.",
			"And then my int main void, which is copy paste from before.",
			"And now let me do this.",
			"Let me go ahead and get, not an input from the user, and not even a word.",
			"Let's keep it simple and just ask the user for y or n, for yes or no.",
			"Let me go ahead and give myself a char, and I'll call it c.",
			"But I could call it anything, like answer.",
			"But c seems reasonable if I only have one char.",
			"Let me go ahead and call the function, get_char.",
			"And let me just ask, do you agree, question mark.",
			"And then let me go ahead and compare this.",
			"So if c equals y, then let me go ahead and print out agreed backslash n.",
			"Else if c equals n, let me go ahead and print out for instance, not agreed.",
			"Now unfortunately, I've made a couple of mistakes here that at least one",
			"of which might be a little more obvious than the other.",
			"Any thoughts on what mistakes or bugs I might have introduced already",
			"into this program?",
			"Anyone at all?",
			"Yeah, how about, Olivia.",
			"What do you think?",
			"AUDIENCE: For one thing that for the Boolean",
			"you did use a single equals sign instead of the double.",
			"DAVID MALAN: Good.",
			"So I use the single equal sign instead of double, so I need to fix that.",
			"And there's another even more subtle bug.",
			"And this is because C is very specific when it comes to its data types.",
			"All this time I've been using double quotes for strings,",
			"but it turns out in C you have to use single quotes when",
			"you're comparing individual characters.",
			"So I'm going to go in here and change only the quotes around y and n",
			"to be single quotes.",
			"Why?",
			"Because I'm now dealing with the world of chars.",
			"Chars are individual characters like y or n.",
			"And when you are talking about characters,",
			"you need to quote them literally like this.",
			"The variable name, c, doesn't need to be quoted.",
			"But y and n do need to be quoted.",
			"But I don't need to change any of my other quotes in the file",
			"because those are still strings of text that is actual phrases or sentences.",
			"So let me go ahead and try running make agree.",
			"It compiles OK.",
			"Let me go ahead and run dot slash agree.",
			"Do I agree?",
			"Let me go ahead and type in y.",
			"Agreed, I like that.",
			"So let me try n, no.",
			"Not I agreed.",
			"And I left off a backslash n, so let me fix that real quick just",
			"for consistency.",
			"Let me recompile my program and pretend that never happened.",
			"But let me very reasonably now do this.",
			"Dot slash agree.",
			"I want to agree.",
			"And yes, capital y.",
			"Huh, nothing happened.",
			"What about n, capital N?",
			"Nothing happened.",
			"But the program still works.",
			"If I do lower case it works.",
			"And if I do lower case there it works.",
			"So what's going on?",
			"Well, again, the computer's only going to take you literally.",
			"And even though we humans might be, oh, it's fine.",
			"It's upper case or a lower case.",
			"You have to be more explicit.",
			"So we can ask two questions as follows.",
			"We could do something like else if c equals",
			"equals capital Y in single quotes.",
			"You could imagine, again, saying agreed like this.",
			"But just like last week when I started copying and pasting Scratch blocks,",
			"that's probably not very good design.",
			"Similarly, this block of code, lines 11 through 14, is almost identical to 7",
			"through 10.",
			"Let's just get rid of one of them.",
			"And let's see if we can't combine these thoughts.",
			"Let me express if c equals equals y, or c equals equals capital Y.",
			"And indeed, you can use this vertical bar",
			"operator, which is the logical or operator,",
			"and actually say two questions at once.",
			"It turns out you can do this with the notion of and, a logical",
			"and, by using ampersand ampersand.",
			"More on those another time.",
			"But two vertical bars is the equivalent of just saying,",
			"if this on the left or this on the right.",
			"And now if I save and recompile the program with make",
			"agree, and dot slash agree.",
			"You'll see that I can type in y in lowercase, or Y in uppercase,",
			"and now it works.",
			"So again, it would have been correct to just add",
			"another else if and another else if.",
			"But again, not necessary because I can combine these thoughts",
			"and make my program better designed.",
			"And notice too, all this time I've been very religiously",
			"indenting every time I'm inside of curly braces.",
			"Indenting every time I have an if condition or an else if.",
			"So I'm manifesting, hopefully, good style aesthetics as well.",
			"All right.",
			"Well, now let's consider that we have the ability not",
			"only to express conditions, but how about also these things called loops.",
			"Well, turns out in Scratch we had very straightforward loops.",
			"Do the following forever.",
			"C is a little clunkier.",
			"There's no forever keyword in C, but we can mimic this idea as follows.",
			"The closest way to translate forever in C",
			"is actually to say while, which kind of has the right semantics in English.",
			"Like, while something is the case, do this,",
			"but you have to be even more explicit.",
			"You can't just say while and then say printf hello, world.",
			"It turns out in C that while, similar to a condition,",
			"is constantly asking a question to decide whether or not to continue.",
			"Very similar, again, to a condition with its own Boolean expression.",
			"So with while in C, you have to have parentheses after the word while,",
			"and you have to ask a question in those parentheses.",
			"You have to say something like, x greater than y, x less than y,",
			"or the like.",
			"But this is a bit of a corner case in the sense",
			"that if you want to do something forever,",
			"who cares what the question is.",
			"You just want the answer always to be yes.",
			"Or in computer terms, always to be true.",
			"And the most blunt way to express true always",
			"is literally to write the word true.",
			"So even though this looks a little weird, this in C",
			"is how you deliberately induce what we'll",
			"call an infinite loop that never stops because true is always by definition",
			"true.",
			"You don't even have to ask a more complicated question.",
			"You could put a less than sign, a greater than sign, or the like.",
			"But if you just want something to happen forever,",
			"this is the most canonical way to express something forever.",
			"Well, what if you want to do something finitely many times?",
			"Well, we can do that in C as well using what's",
			"going to be called a for loop, or a while loop.",
			"Well, let's consider both of these in turn.",
			"So if I want to do something 50 times, the most mechanical manual way",
			"I can think of is like just count on my fingers, right?",
			"Like, one, two, three, all the way up to 50 somehow.",
			"Or 10 maximally on my hands.",
			"So how can I do something finitely many times in C?",
			"Well, I have at my disposal variables.",
			"So let me give myself a variable called counter.",
			"Initialize it to zero semicolon.",
			"And the data type will be int, because I just",
			"need to count much like on my fingers.",
			"But you know what?",
			"Counter is a little verbose.",
			"Programmers whenever they're counting frequently, just counting up from zero",
			"on up, they'll often just use i for integer, or c for character,",
			"or s for string.",
			"You don't want to do that always in your code.",
			"It's sometimes better for your variables to be more descriptively named,",
			"but for a stupid variable that's just going to count from zero on up,",
			"let's just keep it simple and call it i.",
			"I can now do a while loop again, but now I",
			"have to ask a question because I don't want this running forever.",
			"I want it running 50 times.",
			"What question could I ask?",
			"Well, why don't I just check.",
			"While i is less than 50.",
			"So it's like counting up on 50 fingers.",
			"Let me start at zero and count up to, but not through i equals 50.",
			"So so long as i is less than 50, do the following.",
			"What do I want to do?",
			"I want to keep printing out hello, world.",
			"Hello, world.",
			"Hello, world.",
			"But I'm not done.",
			"Because on every iteration of this loop, on every cycle of this loop,",
			"I need to do one more thing mathematically.",
			"I need to add another finger, add another finger.",
			"Or in other words, I need to add one to i.",
			"So let me go ahead and set i equal to whatever it is now, plus one.",
			"But again, we have some syntactic sugar just",
			"to make this a little cleaner, a little tighter.",
			"I could do i plus equals one.",
			"Or even more succinctly, i plus plus.",
			"So even though this is way more annoying to implement than in Scratch",
			"where MIT just gives you what you want, in C we have all of the building blocks",
			"now with variables and with loops to implement the notion of repeating",
			"some finite number of times.",
			"But there's another way to do this.",
			"And as you might have discovered with problem set zero,",
			"there's different ways to achieve the same goals in Scratch.",
			"Similarly in C, I could do this.",
			"I could just start counting at one and count up through 50.",
			"So there's no greater than or equal sign key on your keyboard,",
			"most likely, or less than or equal to.",
			"So in C, as with other languages, you just use two characters.",
			"You do less than sign followed by the equals sign.",
			"And that expresses less than or equal to.",
			"So this is also correct.",
			"If I start counting at one I need to count through 50.",
			"You can do this.",
			"Don't do this.",
			"This is unconventional.",
			"And like programmers will conventionally,",
			"per last week when we started always counting from zero with all",
			"the light bulbs off, they'll instead start at zero and count up to 50.",
			"Which gives you zero through 49 implicitly.",
			"So do this, not that.",
			"But this does speak to the fact that you can solve",
			"problems in so many different ways.",
			"There's another way, fundamentally, too.",
			"We could start counting from 50 down to zero.",
			"The only difference being we have to do i minus minus instead of i plus plus.",
			"So again, that's three different ways to solve the same problem.",
			"And again, you'll start to have the right instincts and muscle memory,",
			"and you'll also start to see common patterns in lecture code, your TF",
			"or teaching assistants code, books and references online.",
			"There just tend to be the ways to do things even though all of these",
			"are still right.",
			"All right.",
			"One more approach to loops here.",
			"It turns out there's another loop construct that's a little more cryptic,",
			"and it's called a for loop.",
			"And it allows you to automate-- or rather,",
			"allows you to express all of those steps a little more concisely.",
			"So for printf hello, world is going to get us one step closer to printing",
			"hello, world 50 times.",
			"But the for statement, just like the while statement,",
			"comes with necessary parentheses after it,",
			"but this time you can put more stuff in the parentheses.",
			"It's not just a Boolean expression.",
			"First, the first thing in the parentheses",
			"is you can initialize any variable you want to some value.",
			"I might say encounter equals zero, or more succinctly,",
			"int i equals zero semicolon.",
			"But the way the for loop looks, it's a little funky.",
			"You can do multiple things on one line.",
			"The second thing inside of the parentheses to a for loop",
			"is a condition that you want to check again and again and again.",
			"And the last thing in the parentheses of a for loop",
			"is an update, or an incrementation or decrementation",
			"whereby you can do i equals i plus one.",
			"Or rather, let's just do i plus equals one.",
			"Or even more succinctly, i plus plus.",
			"This is perhaps the most conventional way",
			"in C and in other programming languages to do something 50 times,",
			"or a finite number of times.",
			"It's different looking from the things we've seen thus far.",
			"There's semicolons in weirder places.",
			"There's more stuff in parentheses.",
			"So again, you'll develop the muscle memory overall.",
			"But for now just realize this says, initialize i to zero.",
			"Check the condition.",
			"And if i is less than 50 print hello, world.",
			"Then update i.",
			"Then check the condition.",
			"If it's less than 50, print hello, world.",
			"Then increment i.",
			"Then check the condition.",
			"Then if it's less then, print hello, world.",
			"So the initialization of the variable happens once.",
			"Everything else happens again and again and again",
			"until you've done this some 50 times.",
			"All right.",
			"So with those building blocks, that's kind of it",
			"for our translation of Scratch into C. Let's now start",
			"to build up some more interesting programs in practice",
			"for instance, abstraction.",
			"So abstraction, recall, was this problem solving principle",
			"whereby you can simplify otherwise more complicated details.",
			"And abstraction is a simplification on top of more complicated details",
			"or implementation details as a programmer might say.",
			"So for instance, let me go ahead and write",
			"a program here called meow, similar to last week, but this time in C.",
			"And in order to make a cat meow textually,",
			"let me give myself stdio.h at the top.",
			"Int main void down here.",
			"Again, I'm in a file called meow.c.",
			"And I've included stdio.h and int main void.",
			"And now I'm going to go ahead and just do something like this.",
			"Printf, quote unquote, \"meow\", backslash n.",
			"And I want this cat to meow textually three times.",
			"Let me save that file.",
			"Make meow.",
			"All right.",
			"Now, dot slash meow.",
			"Meow, meow, meow all in text.",
			"So not nearly as cute or pretty as the one with the cat last week,",
			"but it's correct.",
			"But it's not very well designed, right?",
			"Because I'm repeating myself.",
			"I literally copied and pasted, and those are bad instincts.",
			"But now we have the ability to do things with loops.",
			"So let me actually delete this part of the function.",
			"And let me try to remember from the example before.",
			"If I want to do something three times I could use a while loop,",
			"but that felt like a bunch of lines of code.",
			"Let me do this.",
			"Int i equals zero.",
			"i less than three.",
			"i plus plus.",
			"So cryptic, but this, again, is the de facto way of doing something",
			"a finite number of times.",
			"Initialize some variable, like i to zero, check a condition,",
			"and keep incrementing your variable again and again",
			"so that it executes a total of that many times.",
			"Now, let me go ahead and printf meow--",
			"mellow-- meow on the inside.",
			"Let me go ahead and recompile meow by make meow.",
			"Let me dot slash meow, and voila.",
			"Now the program is arguably better designed.",
			"But let me take this one step further.",
			"Recall that the trajectory last week was to not only implement meow",
			"with better design, without repeating yourself, thereby using a loop.",
			"But remember we introduced the abstraction that",
			"was a custom puzzle piece called meow.",
			"So in C, turns out we have the ability to make our own functions as well.",
			"And the syntax is going to take a little getting used to, but let me go ahead",
			"and do this.",
			"Let me get rid of my printf here.",
			"And at the bottom of my file-- actually, at the top of my file",
			"I'm going to go ahead and type void meow void.",
			"Which is very cryptic for today, but again, this",
			"is fine to be boilerplate, copy pasted for now.",
			"Let me go ahead and just printf meow here.",
			"Even though we haven't explained and won't explain today",
			"what this keyword void means, what I've done in lines three through six",
			"is create my own custom function.",
			"C does not come with a function called meow.",
			"CS50's library does not come with a function called meow.",
			"But now thanks to me, there exists a function",
			"called meow whose sole purpose in life is just to print out meow.",
			"But what's cool about this now is that down here, just",
			"like with Scratch last week, I can now call a function called meow.",
			"And my code is a little more readable because it rather",
			"says what it does by just by way of the function's name.",
			"And let me go ahead now and compile this.",
			"Make meow.",
			"So far so good.",
			"Dot slash meow, and it seems to work OK.",
			"But I don't love the fact that I've implemented meow",
			"at the top of the file.",
			"It's not a big deal.",
			"By convention we'll typically put custom functions at the bottom of the file.",
			"Why?",
			"Only because when a programmer, or in our case,",
			"a teaching fellow wants to understand your code from top to bottom.",
			"It's just human convention to put the main program, the main function rather,",
			"at the top of your file.",
			"The problem is when I do this, I'm going to have created a problem for myself.",
			"When I run make meow now, darn it.",
			"Two errors generated, and so there's a couple of bugs to be solved.",
			"But first, Brian, a question from the group.",
			"BRIAN YU: There was a question that came in from the chat about why",
			"it is that on line five, for example, you don't have",
			"a semicolon at the end of the for loop.",
			"And on line 11 you don't have a semicolon",
			"at the end of the function name.",
			"So why do some lines need semicolons at the end, but other lines don't?",
			"DAVID MALAN: Really good question.",
			"Why do some of these lines not have semicolons, but others do?",
			"The short answer, not to be glib, is honestly just because.",
			"The way the language was designed was that you should generally",
			"finish your thoughts when expressing verbs or actions or functions",
			"with semicolons.",
			"And we've seen that after printf for instance.",
			"We've just seen that after meow.",
			"However, when you're using other programming constructs,",
			"like loops or like custom functions, you don't have semicolons there.",
			"Why?",
			"Some humans years ago just decided that we",
			"don't need semicolons in those places.",
			"And this is one of those things that it will take a while to develop the muscle",
			"memory and the mental model for recognizing where those things go",
			"and don't.",
			"But thus far the only places we've seen semicolons",
			"are at the ends of functions, like meow and printf here.",
			"And now, admittedly weirdly, inside of the parentheses for the for loop.",
			"But again, when tackling problem sets one and the first lab and so forth,",
			"you'll often want to refer back to examples like these in the slides",
			"and the references in your section so that you can",
			"wrap your mind around these patterns.",
			"So let me go ahead now and solve the two problems I seem to have created here.",
			"It's a little non obvious, but it's reminiscent of what we've seen before.",
			"Implicit declaration of function meow is invalid in C99.",
			"C99 is referring to the 1999 version of C the language we're using,",
			"but it's just getting confused, C is right now.",
			"Well, why is that?",
			"Well, let me scroll up here and let me make the point that frankly C,",
			"and in turn my compiler, they're not that bright.",
			"Like, they're only going to do what I tell them to do explicitly.",
			"And the problem at the moment is that when the compiler reads my code",
			"from top to bottom, left or right, it is not until line 11",
			"the meow function even exists.",
			"However, I am trying on line seven at the moment to use that meow function.",
			"So my compiler, frankly, just doesn't know",
			"what meow is because it hasn't gotten to meow later.",
			"And the compiler is not smart enough, or not",
			"user friendly enough to read everything first and then decide",
			"if there's a problem.",
			"It's only going to read it once through top to bottom,",
			"and it's going to yell at you the moment it encounters the problem.",
			"So the solution to this is quite simply, move the function",
			"to the top of your file.",
			"But again, that just gets annoying eventually because then you",
			"have to go fishing for your main function which might",
			"be dozens of lines down in the file.",
			"Or there's another way, and we'll explain this in due time too.",
			"But you can also copy the very first line only of your custom function.",
			"Put it at the top of your file above main.",
			"And then, to Brian's question end that with a semicolon.",
			"So this is weird.",
			"This is what's generally known as a prototype, which is a hint only.",
			"It's sort of a clever way of telling the compiler there",
			"will exist a function called meow, but just not yet.",
			"But know that it will.",
			"And it's just kind of a workaround, a common workaround,",
			"for that particular problem.",
			"All right.",
			"So let me go ahead and make one more change, one more change here.",
			"Suppose that I want to really finish off this meow example",
			"just like we did in Scratch.",
			"Whereby we also allow meow to take some number of meows as input.",
			"So I don't want to have this for loop anymore in my main function.",
			"Suppose I just want to be able to say, meow three, inside of my main function.",
			"Three thereby being the input to the meow function.",
			"I now need to change my custom function, just like I did last week, as follows.",
			"It turns out-- and more on this in the weeks to come--",
			"that this mention a void here on line 11 refers to the return value or output",
			"of this function.",
			"Long story short, my custom meow function today has no return value.",
			"It doesn't output anything per se, it instead only",
			"has a side effect of printing visually on the screen.",
			"But it does have an input.",
			"And if you want to function in C to take input or arguments,",
			"you can literally do something like, the name of the type you want",
			"and the name of the variable that you want.",
			"So suppose I want meow to take as input some number, we'll call it n.",
			"And I want to use that number in a loop.",
			"I could then do something like this.",
			"For int i gets zero, i is less than n, i plus plus.",
			"I can then surround my printf with curly braces.",
			"And now notice just like last week with my final implementation of meow,",
			"my custom function can take input as denoted by the parentheses. i",
			"doesn't have output per se, that's why I'm leaving void here.",
			"But again, we'll explain void more in detail down the road.",
			"But now I'm using that input inside of the for loop.",
			"So even though this is a new implementation in C,",
			"I'm using the same building blocks.",
			"I'm using a for loop like before, but instead of hard coding three,",
			"or 50 like I did earlier, now I'm actually going to go ahead and just",
			"plug-in that variable just like Scratch allowed me to do as well.",
			"Well, what if I want to do something even fancier.",
			"You know what?",
			"Let me go ahead and do this.",
			"Suppose that we want to get input from the user,",
			"but we really want them to provide a specific type of input.",
			"Let me go ahead and introduce one other type of loop.",
			"And this one I'm going to go ahead and grab from my archives, the code",
			"that I brought with me today.",
			"And I'm going to go ahead and copy over a file called positive.c,",
			"which is going to insist that the user give me a positive value.",
			"So this too is on the course's website.",
			"And let me just walk us through code that I already wrote.",
			"Here at the top of my file, I'm including some now familiar header",
			"files.",
			"And down here, I'm including a prototype.",
			"That is a hint for a function that's going to be called,",
			"quite simply, get_positive_int.",
			"So this is a function that's only going to get a positive integer.",
			"Then in my main function, notice I'm going to use this.",
			"I'm going to get a variable called i on line 10,",
			"and I'm going to get a positive int from the user.",
			"And then I'm just going to print it out.",
			"But what's interesting now is I have this additional abstraction.",
			"The CS50 library does not come with a function called get_positive_int,",
			"but it does come with a function called get_int.",
			"And notice what I've done down here between lines 15 and 24.",
			"Down here I've declared a function called get_positive_int,",
			"and notice that's my own custom function name.",
			"It doesn't take any inputs, it just gets a positive integer from the human.",
			"But now notice it does have a return value.",
			"Previously I used the word void to say the absence of input",
			"or the absence of output.",
			"Here I'm using it's still to say, no inputs.",
			"It just always gets a positive int.",
			"But I'm saying int on the left hand side of this custom function's name",
			"because this function does have output.",
			"What is the output going to be?",
			"We'll, notice here on line 17, I give myself a variable and I call it n.",
			"Then I have one final new feature of C today, this loop which is called,",
			"not a while loop, but a do while loop.",
			"A do while loop is almost the same as a while loop,",
			"except that it blindly does one thing first before checking a condition.",
			"So notice here I'm going to do the following.",
			"Call get_int with this prompt, positive integer,",
			"and then store the return value into the variable called n.",
			"Then down here, notice I'm saying while n less than one.",
			"So this is kind of a weird syntax, but if mathematically I",
			"want the user to give me a positive integer,",
			"that's technically the same thing as wanting the user to give me an integer",
			"and just make sure that it is not less than one.",
			"Because if it's less than one, it's zero or negative one or negative two,",
			"that's obviously not a positive integer.",
			"So how can I express this in code?",
			"The only new thing at the moment now is the fact",
			"that there exists this thing called do while.",
			"And again, the value of do while is that you will do things at least",
			"once and then check a condition.",
			"A while loop checks the condition first and then does something instead.",
			"This is what I want in this case, though.",
			"I want to do this.",
			"Get an integer from the user prompting them for a positive integer.",
			"Then while n is less than one-- so if the human",
			"typed in zero, or negative one, or negative two, what do I want to do?",
			"The same thing again and again and again.",
			"So it reads rather grammatically.",
			"Do the following while n is less than one.",
			"And then lastly, and the only other new line here is return n.",
			"This is the way that a program can actually return some value to you.",
			"It can hand you back a value, not by printing it on the screen,",
			"not by saying it audibly or visually from a cat's mouth.",
			"It returns it in the sense that what's being returned here",
			"is n, which is an integer that matches the output of this function.",
			"Why is this useful?",
			"Well let's scroll back up.",
			"Let's now take for granted that we get_positive_int function exists.",
			"And now notice how we can use it in main.",
			"I call get_positive_int on the right.",
			"It returns a value I claim that is of type integer.",
			"I'm storing that return value on the left in this variable called i.",
			"And then I'm printing out i.",
			"And just like last week with the meow example in Scratch,",
			"now that I have implemented get_positive_int,",
			"it sort of out of sight, out of mind.",
			"I know that it can be done, and I can abstract away",
			"the underlying implementation details by just calling it by its name.",
			"But there's one weird thing that I do want to point out",
			"about these implementation details.",
			"Why did I declare n out here?",
			"Every other time I've created a variable, I've done this.",
			"It turns out we've been getting lucky this whole time,",
			"and any time I've declared variables they've technically",
			"been in between curly braces.",
			"The curly braces belonging to the main function or my other functions",
			"that I've written thus far.",
			"But in this case, the problem is when you",
			"declare a variable inside of curly braces,",
			"you run into what we'll call an issue of scope.",
			"The scope of a variable is the lines of code in which it exists.",
			"The scope of a variable are the lines of code where you can use that variable.",
			"And the rule of thumb for today is that if you",
			"declare a variable inside of curly braces",
			"like those here on line 26 and 28, which you",
			"must do for a do while loop, that variable, n,",
			"only exists inside of those curly braces.",
			"Which means you cannot compare it against one in line 29.",
			"Which means you cannot return it in line 30.",
			"It just no longer exists.",
			"So you're doing all of this work getting the variable n, and then boom.",
			"It's gone once you exit top to bottom these curly braces.",
			"So the workaround for that, stupid though it is frankly,",
			"is that you can declare n initially on its own line, 25.",
			"You don't need to assign it a value even, because you're",
			"going to assign it a value eventually.",
			"But again, to create a variable, as I keep saying, is to declare a variable.",
			"You don't need to define it as having a value necessarily right away.",
			"So this is a way to work around what's otherwise known as an issue of scope.",
			"All right, with all of these puzzle pieces now in place so to speak,",
			"let me go ahead and propose that we solve",
			"something a little more graphical.",
			"So you'll recall, of course, Super Mario Brothers is one of the first problem",
			"sets that we alluded to last week.",
			"And within this game there's a whole bunch of visuals.",
			"For instance, there's this visual early on where",
			"there's four question marks in the sky.",
			"And these question marks, if you jump up and underneath them,",
			"give you coins for instance.",
			"So let me draw our attention to that, and let me ask, well,",
			"how could I write a program in C that just prints out four question marks?",
			"Well, let me go ahead and do this.",
			"Let me go ahead and write a program called mario.c.",
			"Let me go ahead and include stdio.h in a file called mario.c.",
			"Give myself a main function, int main void.",
			"I'm going to keep this simple.",
			"Printf one, two, three, four, backslash n semicolon.",
			"This is not nearly as cool or pretty as the old school game,",
			"but if I run make mario and then do dot slash mario, voila.",
			"I get a very poor approximation of these four blocks in the sky",
			"using just Ascii, or really called Ascii art.",
			"But I can do a little better than that.",
			"Recall that now we have the ability to use loops.",
			"So I could say for int i gets zero.",
			"i is less than four, i plus plus.",
			"And then I could just print out one question mark at a time.",
			"And then at the very end of my program, I",
			"could print out a new line just to move the cursor at the very last moment.",
			"I don't want to do that every question mark,",
			"because then it would be vertical.",
			"I want to do it only at the end.",
			"So now if I make mario, and I run mario now.",
			"Same exact result, but a little better in the sense",
			"that now it's using a loop instead of a hard coded value.",
			"But let me be a little more clever now, and let me do this instead.",
			"Let me borrow the logic of that positive integer example",
			"and do something like this.",
			"Let me give myself a variable called, n, for a number.",
			"And let me do the following just like before.",
			"Let me get an integer from the user, and ask the user",
			"for the width of the bricks that I want to print.",
			"So it's not always four.",
			"Maybe it's a variable number.",
			"And then let me go ahead and do this while n is less than one.",
			"So identical to my logic before.",
			"And then you know what?",
			"Once I have a value of n--",
			"so let me go ahead up here and give myself a comment.",
			"Get positive integer from user.",
			"That rather says what all of these lines of code do.",
			"I don't need to comment every single line.",
			"You can comment every few if it makes logical sense to do so.",
			"Let me go ahead now and print out that many question marks.",
			"So I can do a loop.",
			"For int i gets zero, i is less than n this time, i plus plus.",
			"And now I can print out a single question mark without a new line.",
			"And then at the very end of my program, I",
			"can print out a single new line semicolon.",
			"Let me go ahead now and increase the size of my terminal window.",
			"Let me do make mario.",
			"And now-- oh, darn it.",
			"Implicit declaration of function get_int.",
			"Here's where help50 might be my friend.",
			"So let me go ahead and run help50 make mario.",
			"It's going to ask for help.",
			"You seem to have an error in mario.c on line nine.",
			"By implicit declaration of function get_int,",
			"clang means-- which is the name of the compiler, which we'll see next week--",
			"means that it doesn't recognize get_int.",
			"Did you forget to include cs50.h in which get_int",
			"declared at top of your file.",
			"And indeed, I did.",
			"So let me fix this.",
			"So include cs50.h.",
			"Save the file.",
			"Recompile with make mario.",
			"And now let me go ahead and do dot slash mario,",
			"and I'll give myself a width of four.",
			"It's the same.",
			"Let me give myself a width of 40.",
			"Now I get that dynamism.",
			"Let me give myself a width of 50, and so forth.",
			"So now we have a program that's much more dynamic, but you know what?",
			"Let's go ahead and enhance this a little further.",
			"Later on in Super Mario Brothers, there's like a lot of this underworld",
			"here where you see these grids of bricks,",
			"and let me draw our attention to this.",
			"This looks like multiple bricks both horizontally and vertically.",
			"So there's a width and a height.",
			"So how can I go about printing out, maybe that's three by three.",
			"Three bricks across by three bricks down.",
			"Let me actually go into my program here.",
			"Get rid of all the question mark stuff from before.",
			"And consider how I could print out a three by three grid.",
			"Well, the bad approach here, if I go back into my code,",
			"would be to print out three of these.",
			"And then maybe three more.",
			"Maybe three more, and then three more.",
			"But of course, this copy paste is not going to fly long term,",
			"but that's fine.",
			"Let me do make mario.",
			"Dot slash mario.",
			"All right.",
			"I kind of sort of have a grid that looks like this thing here.",
			"It's not exactly, but at least it's the right idea.",
			"But this is not necessarily the best way to do this.",
			"I really want to go three across and three down.",
			"Well, it turns out using C we can actually express that as well.",
			"Let me go ahead and do this.",
			"Let me go ahead and print out for instance, the following.",
			"Let me go ahead and print out not just hash, hash, hash, again",
			"and again and again.",
			"Let me go ahead and do this.",
			"Let me print out one row at a time.",
			"So for int i gets zero, i less than three, plus plus.",
			"I don't know what I'm about to do yet, but I know",
			"that I'm going to do it three times.",
			"What do I want to do three times?",
			"Well, I want three rows, and on every row I want three hashes.",
			"So you know what you can do?",
			"You can nest loops.",
			"Let me do for int j gets zero, j is less than three, and j plus plus.",
			"I don't know what I'm going to do yet, but I do",
			"know I'm going to do this three times.",
			"And you can perhaps see where this is going.",
			"Three things three times, that's going to give me all nine bricks.",
			"So long as inside of this inner loop, so to speak, this nested loop,",
			"I print one of those hashes.",
			"So long as after that loop, I print out a new line over here.",
			"So to be clear, even if it's not obvious at first glance what's",
			"going on, we already know that this is the type of syntax you use for doing",
			"something finitely many times, three.",
			"This is the same syntax, but I'm using a different variable name.",
			"So I can keep track of two different values.",
			"Essentially, rows and columns.",
			"And then I'm just printing a single brick each time.",
			"But after I'm done printing a whole row, I",
			"do want to move the cursor to a new line.",
			"So let me try this.",
			"Let me go ahead and do make mario on my code.",
			"Dot slash mario, and voila.",
			"Now I'm using a nested loop to print out bricks like this.",
			"And I can change this.",
			"If I want to do a 10 by 10, all I have to do is change that in one place.",
			"Or if I really wanted to be fancy, I could go use get_int again.",
			"I could get the width and the height from the user",
			"and do it completely dynamically.",
			"But now if I do 10 by 10 for instance, I can at least see an even bigger grid.",
			"So if you wonder how things like Super Mario Brothers, or frankly",
			"any game nowadays on a PC or console or phone are made,",
			"it's with this kind of generation of maps.",
			"Maybe back in the day they were hard coded, maybe they were generated.",
			"Using code you can absolutely imagine generating brick after brick",
			"after brick like that so that, ultimately, your game even, your world,",
			"is partly dynamically generated.",
			"And we already have the building blocks via which to do that.",
			"Unfortunately, we haven't really spoken to the limitations",
			"of what computers can do.",
			"And in our final minutes we thought we'd set the stage for things",
			"that computers aren't very good at.",
			"And in fact, problems that are latent in pretty much everything",
			"we've done today, but I've been very carefully avoiding tripping over.",
			"This picture here is a picture of a typical computer's memory,",
			"or RAM, random access memory.",
			"It's just one of the pieces of hardware that you'd",
			"have in your phone, your desktop, your laptop these days.",
			"And it's where programs are stored when they're running.",
			"So in a Mac or PC, if you double click a program",
			"it's ultimately stored in a piece of hardware that looks like this.",
			"When you dot slash mario and hit Enter in a program like this,",
			"you're using CS50 IDE's RAM, but same idea, albeit,",
			"somewhere else in the cloud.",
			"So it turns out, though, that if you only have a finite amount of memory,",
			"like this, you can only do so much with it.",
			"You can't solve all of the world's problems",
			"if you only have a finite amount of memory.",
			"And what do I mean by that?",
			"Well, let me go ahead and create another program here called imprecision.c,",
			"and we'll see why I've named it that in just a moment.",
			"Let me go ahead and include stdio.h, again, and int main void just",
			"to give myself some set up here.",
			"And then let me go ahead and very reasonably very",
			"simply ask the user for a variable called x as a type float.",
			"Let me ask for the value just like before.",
			"Let me ask for another one in the form of y, quote unquote \"y.\"",
			"And then let me go ahead, and you know what?",
			"Let me go ahead and print out with percent f the value of x divided by y.",
			"So I'm pretty sure we did this earlier.",
			"We did division with values.",
			"This time I'm using floats, but let's go ahead and just run this.",
			"Make imprecision-- and I goofed here.",
			"Implicit-- I keep doing it-- implicit declaration of function get_float.",
			"I didn't practice what I've been preaching.",
			"I also need to include cs50.h, which is where it get_float is defined.",
			"Now, let me recompile.",
			"Now it works.",
			"Now, let me go ahead and run imprecision.",
			"And let me go ahead and type in one tenth.",
			"OK.",
			"So one tenth it turns out, according to my very simple calculator here,",
			"is 0.100000.",
			"But I'm getting a little curious now.",
			"It turns out that printf is even more powerful than we've seen,",
			"and you can actually print out more than just single digits.",
			"Suppose I want to print out not six significant digits, but maybe 10.",
			"It's a little funky the syntax, but instead of saying percent f,",
			"you can instead say literally, percent dot the number of digits",
			"you want to see and then the f.",
			"So let me go ahead and recompile this, make imprecision.",
			"Now let me do dot slash imprecision and one tenth--",
			"uh-huh.",
			"Well, that's a little curious.",
			"I don't recall knowing that there's a 15 at the end of one tenth.",
			"Well, let's get a little more curious.",
			"Let's print out 50 decimal points to really dig into what's going on here.",
			"Let me recompile my code.",
			"And let me rerun dot slash imprecision and do one divided by ten,",
			"and oh my God.",
			"I am quite sure in grade school when we all learned one divided by ten,",
			"the teacher did tell us one tenth or 0.1.",
			"And they never mentioned the fact that it's 0.10000000149011, and so forth.",
			"So what is going on?",
			"Well, it turns out as powerful as computers",
			"are and is as sophisticated as all of the syntax we've been looking at today",
			"is, my God, a computer can't even calculate one tenth correctly.",
			"And so we're bumping up against a fundamental limitation here,",
			"which is that if computers are finite in their capacity.",
			"They only have so much RAM, so much hardware, so many bits.",
			"Well, it stands to reason that if you only are using a finite number of bits,",
			"32 for instance, or 64.",
			"Yes, you can count pretty high or pretty precisely.",
			"You cannot count infinitely high or infinitely precisely.",
			"At some point you have to start to approximate values.",
			"And indeed, that's what the computer is doing.",
			"If it only has a finite number of bits, 32, via which to represent a float.",
			"There's an infinite number of floating point real numbers in the world.",
			"Unfortunately, if you have a finite number of bits,",
			"you've got to start cutting some corners.",
			"And that's what the computer is doing.",
			"It's representing one tenth as closely as it can,",
			"and this is what you then see when you look enough significant digits out.",
			"Now, for most problems that's probably not a big deal.",
			"But it could very well be a big deal if you're doing math,",
			"you're dealing with finance or monetary values or military operations",
			"where a lot of small numbers, scientifically, really start to add up.",
			"And indeed, there have been many examples in the real world",
			"where bad things happen because of this so-called imprecision.",
			"And there's another issue that computers run into.",
			"Not only this floating point imprecision, even integers",
			"have their limitations.",
			"Recall that integers, of course, can be represented in decimal or in binary.",
			"And if we have three light bulbs or three bits,",
			"let's consider how we might count in binary.",
			"Zero, zero, zero is where we began last week.",
			"001, 010, 011, 100, 101, 110, 111.",
			"And now, this recall from last week is the number we know is seven in decimal.",
			"How do I count one digit higher?",
			"Well, I just carry the one, so to speak.",
			"But if I only have three light bulbs or in turn three bits, or heck, 32 bits.",
			"That additional bit, the carry, disappears.",
			"And so there's this problem with integers too.",
			"And someone noted earlier when you tried to do 2 billion plus 2 billion,",
			"it couldn't fit in the result. That's because integers",
			"too if they're only 32 bits or a long in C. If it's only 64 bits, those are big",
			"numbers, but they're not infinitely large.",
			"And we humans have tripped over this again and again.",
			"You might recall hearing about if not living through the Y2K problem.",
			"Where a lot of stuff in the world broke or was",
			"worried to be broken on January 1st, 2000, because humans",
			"had made the reasonable but not very long sighted",
			"decision to store years using just two digits.",
			"So 1995 would be represented as 95, 96, 97, 98, 99.",
			"Then around the change of the year from 1999 to 2000,",
			"any computer program or system that was still using two digits",
			"would, of course, add one at the stroke of midnight.",
			"Unfortunately, if there's no third digit available it disappears.",
			"And the entire world confuses the year 2000 for the year 1900,",
			"because 1900 was assumed as being the prefix.",
			"And if you can believe it, we humans are about to do this again",
			"in the year 2038, which is not that far off from now.",
			"We are going to run out of bits via which to keep track of time.",
			"Because years ago, humans decided reasonably at the time,",
			"they are going to use 32 bits to represent numbers.",
			"And we are going to use 32 bits to count up the number of seconds",
			"from the year a date, January 1st, 1970.",
			"So that's when time began computing wise, in some sense,",
			"and we've been counting the seconds ever since.",
			"Unfortunately, with 32 bits you can only count as high as 4 billion",
			"give or take.",
			"And unfortunately, we are going to hit the four billionth second on January 19",
			"in the year 2038.",
			"So unless all of us upgrade our Macs and PCS, and worse,",
			"embedded systems and satellites and any hardware baked into various devices",
			"that we now use, we're about to run into this problem",
			"again where all of a sudden and it's going to be like January 1st, 1970",
			"again.",
			"Unless we stay ahead of this problem.",
			"So with all the power we've seen in C and all of the capabilities",
			"that we've seen in C and in Scratch, there are still",
			"these fundamental limitations.",
			"So when it comes to solving your own problems in C and in turn CS50,",
			"it's going to be ever so important to be mindful of these constraints",
			"and to, ultimately, find solutions even to these problems.",
			"But for now, we'll adjourn here, and leave you",
			"for your first problem set in C on Mario and more.",
			"We'll see you next time.",
			"[MUSIC PLAYING]",
			""
		],
		"is_youtube": false
	},
	"video_003": {
		"section": "CS50x 2021",
		"subsection": "Week 1",
		"unit": "Shorts",
		"video_sources": [
			"https://edx-video.net/HARCS50X2016-V033600_DTH.mp4",
			"https://edx-video.net/HARCS50X2016-V033600/HARCS50X2016-V033600.m3u8"
		],
		"video_duration": 850,
		"speech_period": [
			2.42, 0.791, 2.56, 1.47, 2.33, 2.13, 1.8, 2.2, 1.962, 2.208, 2.91, 0.72,
			1.797, 1.833, 2.06, 3.36, 1.98, 2.12, 3.57, 2.04, 1.942, 3.208, 4.27,
			1.68, 2.98, 4.1, 2.75, 3.63, 2.03, 2.85, 4.66, 2.72, 2.46, 2.34, 1.74,
			3.84, 4.29, 1.67, 3.46, 0.96, 4.66, 2.937, 2.083, 3.2, 3.73, 2.37, 3.4,
			2.86, 3.68, 3.78, 4.04, 1.79, 4.26, 5.88, 2.05, 1.72, 2.166, 2.244, 4.37,
			4.41, 2.6, 2.89, 2.54, 3.77, 1.75, 3.989, 2.041, 3.01, 2.0, 1.25, 2.516,
			0.714, 1.083, 0.807, 0.93, 3.49, 1.23, 3.02, 4.15, 3.68, 6.73, 3.28,
			5.095, 1.377, 2.458, 3.06, 3.032, 2.208, 2.55, 2.36, 4.05, 1.632, 1.708,
			2.75, 2.94, 2.71, 2.75, 4.51, 2.73, 1.49, 3.31, 3.66, 2.8, 2.38, 5.78,
			3.225, 3.685, 2.13, 3.63, 2.48, 2.43, 2.19, 1.949, 2.041, 3.24, 4.79,
			2.41, 1.88, 2.0, 2.94, 3.45, 0.86, 3.5, 3.837, 0.833, 2.791, 3.029, 1.88,
			3.114, 1.916, 4.8, 2.09, 2.62, 4.09, 5.64, 2.67, 0.74, 0.95, 2.166, 2.014,
			2.5, 1.37, 0.707, 1.083, 4.17, 3.169, 2.541, 1.91, 2.47, 3.34, 1.92, 2.12,
			3.03, 1.8, 1.97, 4.799, 2.291, 3.65, 2.09, 2.13, 2.83, 0.89, 0.96, 3.14,
			2.3, 3.26, 3.409, 1.541, 2.506, 1.874, 2.32, 2.73, 3.629, 1.291, 1.47,
			1.22, 0.939, 1.541, 3.39, 4.37, 3.45, 2.21, 2.88, 2.38, 2.35, 2.93, 1.82,
			3.75, 1.334, 1.749, 2.097, 2.48, 1.432, 1.709, 2.916, 2.144, 2.75, 1.802,
			1.208, 3.51, 3.32, 2.57, 4.295, 2.875, 1.52, 4.69, 3.41, 1.08, 1.46, 1.39,
			1.48, 0.64, 0.75, 1.09, 3.37, 3.84, 4.62, 3.299, 1.291, 5.01, 2.25, 1.592,
			1.708, 4.789, 2.041, 1.46, 1.75, 2.22, 1.34, 1.49, 3.083, 0.5, 2.458,
			3.639, 4.3, 4.14, 1.477, 2.083, 2.51, 1.09, 2.54, 3.374, 0.916, 1.45,
			2.08, 4.64, 3.21, 2.2, 1.532, 1.708, 2.77, 2.49, 2.86, 2.63, 3.19, 0.871,
			0.999, 2.749, 0.691, 4.24, 3.26, 3.67, 2.83, 4.19, 2.43, 2.416, 3.456,
			1.958, 6.51, 2.9, 3.46, 3.209, 1.791, 1.895, 2.375, 2.67, 2.71, 3.0, 1.44,
			0.5, 1.51, 1.64, 1.86, 2.587, 2.833, 1.42, 1.875, 3.375, 1.47, 1.672,
			2.208, 1.75, 2.68, 1.0, 1.0, 1.48, 2.67, 2.3, 1.24, 3.56, 1.222, 0.958,
			2.93, 3.88, 1.27, 3.0, 3.54, 1.07, 2.37, 2.02, 2.289, 1.791, 1.291, 0.849,
			2.125, 4.071, 1.874, 2.55, 1.46, 1.85, 2.18, 3.96, 4.509, 2.791, 2.12,
			1.96, 4.216, 1.374, 3.247, 1.083, 2.33, 0.71, 2.21
		],
		"transcript_en": [
			"&gt;&gt; [MUSIC PLAYING]",
			"SPEAKER: All right.",
			"So let&#39;s talk about another thing that&#39;s kind of unique to C,",
			"which is data types and variables.",
			"When I say unique to C, I really only mean in the context of,",
			"if you&#39;ve been a programmer for a really long time,",
			"you&#39;ve probably not worked with data types",
			"if you&#39;ve used modern programming languages.",
			"Modern languages like PHP and JavaScript,",
			"which we&#39;ll also see a little later on in the course,",
			"you don&#39;t actually have to specify the data type of a variable",
			"when you use it.",
			"&gt;&gt; You just declare it and start using it.",
			"If it&#39;s an integer, it know it&#39;s an integer.",
			"If it&#39;s a character, it&#39;s knows it&#39;s a character.",
			"If it&#39;s a word, it knows it&#39;s a string, so-called.",
			"&gt;&gt; But in C, which is an older language, we need",
			"to specify the data type of every variable",
			"that we create the first time that we use that variable.",
			"So C comes with some built-in data types.",
			"And let&#39;s get familiar with some of those.",
			"And then afterwards we&#39;ll also talk a little bit about some of the data types",
			"that we&#39;ve written for you, so you can use them in CS50.",
			"&gt;&gt; The first is int.",
			"The int data type is used for variables that will store integer values.",
			"So 1, 2, 3, negative 1, 2, 3, and so on.",
			"Integers, which is something you should keep in mind for the quiz,",
			"always take up four bytes of memory, which is 32 bits.",
			"There are eight bits in a byte.",
			"&gt;&gt; So this means that the range of values that an integer can store",
			"is limited by what can fit within 32 bits worth of information.",
			"Now as it turns out, it was long ago decided",
			"that we would split up that range of 32 bits",
			"into negative integers and positive integers,",
			"each getting half of the range.",
			"So the range of values that we represent with an integer range from negative 2",
			"to the 31st power to 2 to the 31st power minus 1,",
			"cause you also need a spot for 0.",
			"&gt;&gt; So basically half of the possible values you can fit in an int are negative,",
			"and half are positive.",
			"And roughly here, this is about negative 2 billion to about positive 2 billion.",
			"Give or take a couple hundred million.",
			"So that&#39;s what you can fit in an integer variable.",
			"Now we also have something called an unsigned integer.",
			"Now unsigned ints are not a separate type of variable.",
			"Rather, unsigned is what&#39;s called a qualifier.",
			"It modifies the data type of integer slightly.",
			"&gt;&gt; And in this case, what unsigned means-- and you can also",
			"use unsigned other data types, integer&#39;s not the only one.",
			"What it effectively does is doubles the positive range of values",
			"that an integer can take on at the expense of no longer allowing",
			"you to take on negative values.",
			"So if you have numbers that you know will get higher than 2 billion but less",
			"than 4 billion, for example-- which is 2 to the 32nd power--",
			"you might want to use an unsigned int if you",
			"know your value will never be negative.",
			"&gt;&gt; You&#39;ll occasionally have used for unsigned variables",
			"in CS50, which is why I mention it here.",
			"But again, the range of values that you can represent with an unsigned integer",
			"as to t regular integer, are 0 to 2 to the 32nd power minus 1,",
			"or approximately 0 to 4 billion.",
			"So you&#39;ve effectively doubled the positive range that you can fit,",
			"but you&#39;ve given up all the negative values.",
			"&gt;&gt; Now as an aside, unsigned is not the only qualifier",
			"that we might see for variable data types.",
			"There are also things called short and long and const.",
			"Const we&#39;ll see a little bit later in the course.",
			"Short and long, we probably won&#39;t.",
			"&gt;&gt; But just know that there are other qualifiers.",
			"Unsigned isn&#39;t the only one.",
			"But it&#39;s the only one we&#39;re going to talk about right now.",
			"So all right.",
			"So we&#39;ve covered integers.",
			"What&#39;s next?",
			"&gt;&gt; Chars.",
			"So chars are used for variables that will store single characters.",
			"Char is short for character.",
			"And sometimes you might hear people pronounce it as car.",
			"&gt;&gt; So characters always take up one byte of memory, which is just 8 bits.",
			"So this means that they can only fit values in the range of negative 2",
			"to the seventh power, or negative 128, to 2 to the 7th power minus 1, or 127.",
			"&gt;&gt; Thanks to ASCII, it was long ago decided a way",
			"to map those positive numbers from 0 to 127 to various characters",
			"that all exist on our keyboard.",
			"So as we&#39;ll see later on in the course, and you&#39;ll probably",
			"come to memorize at some point, capital A, for example--",
			"the character capital A-- maps to the number 65.",
			"And the reason for that is because that&#39;s what&#39;s it&#39;s",
			"been assigned by the ASCII standard.",
			"&gt;&gt; Lowercase A is 97.",
			"The character 0 for when you actually type the character, not",
			"representing the number zero, is 48.",
			"You&#39;ll learn a couple of these as you go.",
			"And you&#39;ll certainly come to need them a little bit later in CS50.",
			"&gt;&gt; The next major data type is floating point numbers.",
			"So floating point numbers are also known as real numbers.",
			"They&#39;re basically numbers that have a decimal point in them.",
			"Floating point values like integers are also",
			"contained within 4 bytes of memory.",
			"Now there&#39;s no chart here.",
			"There&#39;s no number line, because describing the range of a float",
			"isn&#39;t exactly clear or intuitive.",
			"&gt;&gt; Suffice it to say you have 32 bits to work with.",
			"And if you have a number like pi, which has",
			"an integer part 3, and a floating point part, or decimal part 0.14159,",
			"and so on, you need to be able to represent all of it--",
			"the integer part and the decimal part.",
			"&gt;&gt; So what do you think that might mean?",
			"One thing is that if the decimal part gets longer and longer,",
			"if I have a very large integer part, I might not",
			"be able to be as precise with the decimal part.",
			"And that&#39;s really the limitation of a float.",
			"&gt;&gt; Floats have a precision problem.",
			"We only have 32 bits to work with, so we can only",
			"be so precise with our decimal part.",
			"We can&#39;t necessarily have a decimal part precise to 100 or 200 digits,",
			"because we only have 32 bits to work with.",
			"So that&#39;s a limitation of a float.",
			"&gt;&gt; Now fortunately there&#39;s another data type called",
			"double, which somewhat deals with this problem.",
			"Doubles, like floats, are also used to store real numbers, or floating point",
			"values.",
			"The difference is that doubles are double precision.",
			"They can fit 64 bits of data, or eight bytes.",
			"What does that mean?",
			"Well, it means we can be a lot more precise with the decimal point.",
			"Instead of having pi to seven places maybe, with a float,",
			"we can maybe have it to 30 places.",
			"If that&#39;s important, you might want to use a double instead of a float.",
			"Basically, if you&#39;re working on anything where",
			"having a really long decimal place and a lot of precision is important,",
			"you probably want to use a double overfloat.",
			"Now for most of your work in CS50, a float should suffice.",
			"But do know that doubles exist as a way to somewhat deal with the precision",
			"problem by giving you an extra 32 bits to work with for your numbers.",
			"&gt;&gt; Now this is not a data type.",
			"This is a type.",
			"And it&#39;s called void.",
			"And I&#39;m talking about it here because we&#39;ve probably",
			"seen it a few times already in CS50.",
			"And you might be wondering what it&#39;s all about.",
			"&gt;&gt; So void is a type.",
			"It does exist.",
			"But it is not a data type.",
			"&gt;&gt; We can&#39;t create a variable of type void and assign a value to it.",
			"But functions, for example, can have a void return type.",
			"Basically, if you see a function that has a void return type,",
			"it means it doesn&#39;t return a value.",
			"Can you think of a common function that we&#39;ve used so far",
			"in CS50 that doesn&#39;t return a value?",
			"&gt;&gt; Printf is one.",
			"Printf does not actually return anything to you.",
			"It prints something to the screen, and it&#39;s basically",
			"a side effect of what printf does.",
			"But it doesn&#39;t give you a value back.",
			"You don&#39;t capture the result and store it in some variable to use it later on.",
			"It just prints something to the screen and you&#39;re done.",
			"&gt;&gt; So we say that printf is a void function.",
			"It returns nothing.",
			"&gt;&gt; The perimeter list of a function can also be void.",
			"And you&#39;ve also seen that quite a bit in CS50 too.",
			"Int main void.",
			"Does that ring a bell?",
			"Basically what that means is that main doesn&#39;t take any parameters.",
			"There&#39;s no argument that get passed into main.",
			"Now later on we&#39;ll see that there is a way to pass arguments into main,",
			"but so far what we&#39;ve seen is int main void.",
			"Main just doesn&#39;t take any arguments.",
			"And so we specify that by saying void.",
			"We&#39;re just being very explicit about the fact",
			"that it doesn&#39;t take any arguments.",
			"&gt;&gt; So for now, suffice it to say that void basically",
			"should just serve as a placeholder for you as thinking about as nothing.",
			"It&#39;s not really doing anything.",
			"There&#39;s no return value here.",
			"There&#39;s no parameters here.",
			"It&#39;s void.",
			"It&#39;s a little more complex than that.",
			"But this should suffice for the better part of the course.",
			"And hopefully now you have a little bit more of a concept of what void is.",
			"&gt;&gt; So those are the five types you&#39;ll encounter that are built-in to C.",
			"But in CS50 we also have a library.",
			"CS50.h, which you can include.",
			"And which will provide you with two additional types",
			"that you&#39;ll probably be able to use on your assignments,",
			"or just working generally programming.",
			"&gt;&gt; The first of these is bool.",
			"So the Boolean data type, bool, is used for variables",
			"that will store a Boolean value.",
			"If you&#39;ve ever heard this term before, you",
			"might know that a Boolean value is capable of only",
			"holding two different distinct values.",
			"True and false.",
			"Now this seems pretty fundamental, right?",
			"It&#39;s kind of a surprise that this doesn&#39;t exist in C as it&#39;s built-in.",
			"And in many modern languages, of course, Booleans",
			"are a standard default data type.",
			"But in C, they&#39;re actually not.",
			"But we&#39;ve created it for you.",
			"So if you ever need to create a variable whose type is bool,",
			"just be sure to #include CS50.h at the beginning of your program,",
			"and you&#39;ll be able to create variables of the bool type.",
			"&gt;&gt; If you forget to #include CS50.h, and you start using Boolean-type variables,",
			"you might encounter some problems when you&#39;re compiling your program.",
			"So just be on the lookout for that.",
			"And maybe you can just fix the problems by pound including CS50.h.",
			"&gt;&gt; The other major data type that we provide for you in the CS50 library",
			"is string.",
			"So what is a string?",
			"Strings are really just words.",
			"They&#39;re collections of characters.",
			"They&#39;re words.",
			"They&#39;re sentences.",
			"They&#39;re paragraphs.",
			"Might be whole books, even.",
			"&gt;&gt; Very short to very long series of characters.",
			"If you need to use strings, for example, to store a word,",
			"just be sure to include CS50.h at the beginning of your program",
			"so you can use the string type.",
			"And then you can create variables whose data type is string.",
			"Now later on in the course, we&#39;ll also see that that&#39;s",
			"not the entire story, either.",
			"We&#39;ll encounter things called structures,",
			"which allow you to group what may be an integer and a string into one unit.",
			"And we can use that for some purpose, which might",
			"come in handy later on in the course.",
			"&gt;&gt; And we&#39;ll also learn about defined types,",
			"which allow you to create your own data types.",
			"We don&#39;t need to worry about that for now.",
			"But just know that that&#39;s something on the horizon,",
			"that there&#39;s a lot more to this whole type thing than I&#39;m telling you just",
			"now.",
			"So now that we&#39;ve learned a little bit about the basic data",
			"types and the CS50 data types, let&#39;s talk about how to work with variables",
			"and create them using these data types in our programs.",
			"If you want to create a variable, all you need to do is two things.",
			"&gt;&gt; First, you need to give it a type.",
			"The second thing you need to do is give it a name.",
			"Once you&#39;ve done that and slapped a semicolon at the end of that line,",
			"you&#39;ve created a variable.",
			"&gt;&gt; So here&#39;s two examples.",
			"Int number; char letter;.",
			"What have I done here?",
			"I&#39;ve created two variables.",
			"&gt;&gt; The first, the variable&#39;s name is number.",
			"And number is capable of holding integer type values, because its type is int.",
			"Letter is another variable that can hold characters",
			"because its data type is char.",
			"&gt;&gt; Pretty straightforward, right?",
			"If you find yourself in a situation where",
			"you need to create multiple variables of the same type,",
			"you only need to specify the type name once.",
			"Then just list as many variables of that type as you need.",
			"&gt;&gt; So I could for example, here in this third line of code,",
			"say int height;, new line.",
			"Int width;.",
			"And that would work too.",
			"I&#39;d still get two variables called height and width, each of which",
			"is an integer.",
			"But I&#39;m allowed to, things to C syntax, consolidate it into a single line.",
			"Int height, width; It&#39;s the same thing.",
			"I&#39;ve created two variables, one called height one called width, both of which",
			"are capable of holding integer type values.",
			"&gt;&gt; Similarly here, I can create three floating point values at once.",
			"I can maybe create a variable called square root of 2--",
			"which presumably will eventually hold the floating point--",
			"that representation of the square root of 2-- square root of 3, and pi.",
			"I could have done this on three separate lines.",
			"Float, square root 2; Float square root 3; float pi; and that would work too.",
			"&gt;&gt; But again, I can just consolidate this into a single line of code.",
			"Makes things a little bit shorter, not as clunky.",
			"&gt;&gt; Now in general, it&#39;s good design to only declare a variable when you need it.",
			"And we&#39;ll talk a little bit more about that",
			"later on in the course when we discuss scope.",
			"So don&#39;t necessarily need to create all of your variables",
			"at the beginning of the program, which some people might have done the past,",
			"or was certainly a very common coding practice many years ago",
			"when working with C. You might just want to create a variable right when",
			"you need it.",
			"All right.",
			"So we&#39;ve created variables.",
			"How do we use them?",
			"After we declare a variable, we don&#39;t need",
			"to specify the data type of that variable anymore.",
			"In fact, if you do so, you might end up with some weird consequences",
			"that we&#39;ll kind of gloss over for now.",
			"But suffice it to say, weird things are going",
			"to start happening if you inadvertently re-declare variables with the same name",
			"over and over.",
			"&gt;&gt; So here I have four lines of code.",
			"And I have a couple of comments there just indicating",
			"what&#39;s happening on each line just to help",
			"you get situated in what&#39;s going on.",
			"So int number;.",
			"You saw that previously.",
			"That&#39;s a variable declaration.",
			"&gt;&gt; I&#39;ve now created a variable called number that&#39;s",
			"capable of holding integer-type values.",
			"I&#39;ve declared it.",
			"&gt;&gt; The next line I&#39;m assigning a value to number.",
			"Number equals 17.",
			"What&#39;s happening there?",
			"I&#39;m putting the number 17 inside of that variable.",
			"&gt;&gt; So if I ever then print out what the contents of number are later on,",
			"they&#39;ll tell me it&#39;s 17.",
			"So I&#39;ve declared a variable, and then I&#39;ve assigned it.",
			"&gt;&gt; We can repeat the process again with char letter;.",
			"That&#39;s a declaration.",
			"Letter equals capital H. That&#39;s an assignment.",
			"Pretty straightforward, too.",
			"&gt;&gt; Now this process might seem kind of silly.",
			"Why are we doing this in two lines of code?",
			"Is there a better way to do it?",
			"In fact, there is.",
			"Sometimes you might see this called initialization.",
			"It&#39;s when you declare a variable and assign a value at the same time.",
			"This is actually a pretty common thing to do.",
			"When you create a variable, you usually want it to have some basic value.",
			"Even if it&#39;s 0 or something.",
			"You just you give it a value.",
			"&gt;&gt; You can initialize a variable.",
			"Int number equals 17 is the same as the first two lines of code up above.",
			"Char letter equals h is the same as the third and fourth lines of code above.",
			"The most important takeaway here when we&#39;re declaring and assigning",
			"variables is after we&#39;ve declared it, notice",
			"I&#39;m not using the data type again.",
			"I&#39;m not saying int number equals 17 on the second line of code, for example.",
			"I&#39;m just saying number equals 17.",
			"&gt;&gt; Again , re-declaring a variable after you&#39;ve already declared it can lead",
			"to some weird consequence.",
			"So just be careful of that.",
			"&gt;&gt; I&#39;m Doug Lloyd.",
			"And this is CS50."
		],
		"is_youtube": false
	},
	"video_004": {
		"section": "CS50x 2021",
		"subsection": "Week 1",
		"unit": "Shorts",
		"video_sources": [
			"https://edx-video.net/HARCS50X2016-V033500_DTH.mp4",
			"https://edx-video.net/HARCS50X2016-V033500/HARCS50X2016-V033500.m3u8"
		],
		"video_duration": 740,
		"speech_period": [
			5.96, 2.58, 4.05, 2.92, 2.536, 2.624, 3.04, 1.833, 1.887, 3.65, 5.44,
			1.902, 2.208, 3.52, 2.31, 2.77, 6.56, 0.91, 1.21, 0.51, 1.37, 3.425,
			1.054, 4.271, 1.2, 4.3, 3.66, 3.537, 0.583, 2.91, 2.23, 3.12, 1.39, 2.13,
			5.28, 4.26, 3.06, 1.71, 2.54, 2.76, 2.18, 2.54, 3.426, 2.374, 2.85, 1.8,
			2.35, 1.78, 6.35, 3.11, 3.46, 3.64, 0.79, 3.52, 3.8, 4.017, 1.833, 2.68,
			2.82, 2.93, 1.47, 2.6, 2.125, 3.305, 2.77, 3.77, 3.035, 3.655, 3.15, 0.98,
			2.84, 3.09, 2.5, 2.124, 2.946, 2.32, 2.88, 4.61, 0.74, 2.4, 4.83, 2.53,
			1.804, 1.916, 2.547, 1.833, 2.86, 2.255, 3.125, 1.3, 4.06, 2.239, 2.13,
			2.991, 2.836, 3.124, 5.2, 4.95, 6.75, 1.53, 2.16, 3.48, 5.03, 2.97, 4.23,
			2.69, 2.83, 3.69, 0.5, 1.69, 4.14, 3.9, 1.87, 1.75, 3.47, 1.795, 1.315,
			1.99, 2.59, 2.23, 0.69, 4.87, 4.061, 2.249, 1.75, 2.051, 1.749, 1.92,
			4.56, 3.99, 3.56, 3.17, 2.17, 3.11, 2.13, 2.342, 1.458, 3.27, 3.09, 2.91,
			2.75, 2.0, 2.33, 4.252, 2.458, 2.57, 1.21, 4.61, 2.55, 2.35, 1.74, 3.76,
			1.305, 0.875, 3.19, 2.47, 3.31, 4.16, 1.95, 3.25, 6.44, 4.96, 2.86, 3.16,
			2.03, 2.51, 5.38, 2.53, 1.52, 5.29, 4.384, 0.666, 3.05, 5.425, 2.125,
			3.15, 3.39, 3.449, 2.531, 2.63, 0.606, 1.124, 1.89, 2.83, 3.11, 4.27, 1.0,
			4.66, 4.67, 1.834, 1.916, 2.692, 1.208, 3.46, 3.21, 2.69, 3.16, 4.45,
			2.46, 2.182, 1.958, 4.5, 1.417, 1.374, 1.699, 3.25, 3.88, 3.89, 1.381,
			1.499, 3.455, 2.125, 1.905, 2.125, 2.3, 2.97, 2.26, 1.541, 4.389, 4.58,
			1.655, 1.875, 5.11, 2.29, 4.0, 2.435, 2.745, 4.1, 3.08, 2.726, 2.624,
			2.854, 1.916, 2.7, 2.208, 2.622, 4.06, 6.23, 6.4, 3.67, 0.65, 4.719,
			0.791, 4.5, 1.101, 2.999, 2.9, 4.35, 0.892, 1.958, 2.19, 3.18, 2.86, 1.94,
			3.26, 4.01, 3.47, 2.95
		],
		"transcript_en": [
			"&gt;&gt; [MUSIC PLAYING]",
			"&gt;&gt; DOUG LLOYD: Hi, so let&#39;s talk about operators in C.",
			"So, we&#39;ve already seen one, in fact, equals the assignment operator.",
			"It allows us to just put a value into a variable.",
			"That&#39;s the assignment operator, single equal sign.",
			"In order to manipulate and work with values and variables in C,",
			"we have a number of operators at our disposal that we can use.",
			"Let&#39;s take a look at some of the common ones",
			"starting with arithmetic operators.",
			"As you might expect, we can do pretty basic math operations in C.",
			"We can add, subtract, multiply, and divide numbers using plus, minus, star,",
			"and slash, respectively.",
			"Here&#39;s a couple of lines of code in which we do that.",
			"So, we have int x equals y plus 1.",
			"Let&#39;s assume that somewhere up above this line of code",
			"we had said int y equals 10.",
			"What&#39;s the value of x after I execute this first line of code?",
			"Did you say 11?",
			"You&#39;d right.",
			"Why is that?",
			"Well, y was 10.",
			"Some I&#39;m saying int x equals 10 plus 1.",
			"10 plus 1 is 11.",
			"So, the value 11 gets stored in the variable x.",
			"Not too bad, right?",
			"&gt;&gt; How about this next line of code? x equals x times 5.",
			"Well, before we executed this line of code, x was 11.",
			"So, what is the value of x after this line of code?",
			"Take a second.",
			"So, x equals x times 5.",
			"x was 11.",
			"So, x equals 11 times 5.",
			"Or 55.",
			"So if you said 55, you&#39;d be right.",
			"&gt;&gt; Now, it may be a little confusing, but with the way that assignment works in C",
			"is the value on the right gets assigned to the value on the left.",
			"So, first we evaluate x times 5.",
			"So, 11 times 5 is 55.",
			"And then we store that value in x.",
			"The 11 that was there before is now overwritten.",
			"So x&#39;s value is now 55.",
			"Hopefully that&#39;s fairly straightforward.",
			"&gt;&gt; There&#39;s another operator that you&#39;ve probably not necessarily heard",
			"called this, but you&#39;ve certainly worked with in the past",
			"if you remember your days of long division way back in grade school.",
			"It&#39;s called the modulus operator.",
			"What modulus does is it gives you the remainder",
			"when you divide two numbers together.",
			"So, if I say 13 divided by 4, what&#39;s the remainder?",
			"And that value would be calculated by the modulus operator.",
			"&gt;&gt; So, I have a line of code here, int m equals 13 mod 4.",
			"And I say here in a comment that m&#39;s value is now 1.",
			"Why do I say that?",
			"Well, do the long division out in your head, if you bear with me for a second.",
			"So, I have 4 divided by 13.",
			"4 goes into 13 three times with a remainder of 1.",
			"So, basically, all the modulus operator does",
			"is it tells you when you divide, you get the remainder.",
			"You might think that&#39;s actually not a terribly useful thing,",
			"but you&#39;d be surprised, actually, by how frequently that modulus",
			"operator can come in handy.",
			"&gt;&gt; There&#39;s a couple of problems we&#39;ll do CS50 that deal with it.",
			"It&#39;s also good for doing things like random number.",
			"So, for example if you&#39;ve ever heard of a random number generator,",
			"that&#39;s going to give you a number from 0 to some huge number.",
			"But maybe you only really need a number from 0 to 20.",
			"If you use the modulus operator on that giant number that",
			"gets generated by the random number generator,",
			"you&#39;re going to take whatever huge value it is, divide it by 20,",
			"and get the remainder.",
			"The remainder can only be a value from 0 to 19.",
			"So, you use modulus operator to take this huge number",
			"and whittle it down into something a little more meaningful.",
			"I&#39;m pretty sure you&#39;ll be able to use both of those",
			"at some point in the future in CS50.",
			"&gt;&gt; So, C also gives us a way to apply an arithmetic",
			"operator to a single variable in a little more shorthand way.",
			"So, in the previous slide, we saw x equals x times 5.",
			"That worked.",
			"x times 5 then gets stored back in x.",
			"There&#39;s a shorter way to do it, thought, and it&#39;s the syntax x times equals 5.",
			"It&#39;s the same exact thing as saying x equals x times 5.",
			"It&#39;s just a slightly shorter way to do it.",
			"And when you see some distribution code or you",
			"see some sample code that does things like this,",
			"just be familiar with what the syntax means.",
			"You certainly don&#39;t have to use it, but if you do,",
			"it might make your code look a little slicker.",
			"And know that you can also use any of the different operators we&#39;ve already",
			"seen before instead of times.",
			"You could say x plus equals 5, minus equals 5, times, divide, and mod.",
			"All of those work.",
			"&gt;&gt; There&#39;s also something that&#39;s so common in C",
			"that we&#39;ve decided to refine that even further.",
			"Incrementing a variable by 1 or decrementing a variable by 1",
			"is such a common thing-- especially when we talk about loops a little later",
			"on-- that we&#39;ve decided instead of saying something like x plus equals 1,",
			"or x equals x plus 1, we&#39;ve even short handed that to x plus plus.",
			"So, x equals x plus 1, x plus equals 1, and x plus plus all do the same thing.",
			"They all increment x by 1.",
			"But that incrementing and decrementing by 1",
			"is so common that we have plus plus and minus minus",
			"that allow us to shorthand that even further.",
			"&gt;&gt; So, let&#39;s switch gears for second and talk about Boolean expressions.",
			"All which are also kind of fall into the overall category of operators.",
			"But Boolean expressions, unlike arithmetic operators,",
			"are used for comparing values.",
			"So, again, all Boolean expressions in C evaluate to one of two possible values,",
			"recall.",
			"True or false.",
			"That&#39;s the only two values that Boolean variable can take on.",
			"We can use the results of a Boolean expression",
			"in a lot of ways in programming.",
			"In fact, you&#39;ll be doing this quite a lot.",
			"&gt;&gt; For example, we might decide, well, if some condition is true,",
			"maybe I&#39;ll take this branch down my code.",
			"A conditional, so to speak.",
			"We&#39;ll learn about those soon too.",
			"Or maybe, as long as this is true, I want",
			"to keep doing this over and over and over.",
			"A loop.",
			"In both cases, know that we&#39;re using a Boolean expression, a true or false,",
			"to decide whether or not to take a particular path.",
			"Sometimes when we&#39;re working with Boolean expressions,",
			"we will use variables of type Bool.",
			"You might have declared a Bool typed variable,",
			"and you&#39;ll use in your Boolean expression.",
			"But you don&#39;t always have to do.",
			"As it turns out, in C, every non-0 value is the same as saying true.",
			"If you had declared a variable of type Boolean,",
			"and assigned it the value true, that&#39;s the same as declaring an integer",
			"and assigning it the value 1, 2, 3, or really any value",
			"whatsoever other than 0.",
			"Because in C, every non-0 value is true.",
			"0, on the other hand, is false.",
			"This might come in handy later on to know,",
			"but just something to keep in mind.",
			"We don&#39;t always have to use Boolean type variables when we",
			"are working with Boolean expressions.",
			"&gt;&gt; There are two main types of Boolean expressions that we&#39;ll work with.",
			"Logical operators and relational operators.",
			"The language there is not terribly important.",
			"It&#39;s really just how I&#39;m grouping them.",
			"And you&#39;ll certainly, I think, quickly realize what a relational operator is,",
			"based on what they are when we talk about them in a second.",
			"But don&#39;t worry about necessarily memorizing the term logical operator",
			"or relational operator.",
			"I&#39;m just using it to group them in a logical way.",
			"&gt;&gt; So, let&#39;s take a look at the three logical operators",
			"that we&#39;ll see quite a bit in programming in CS50",
			"and in programming more generally.",
			"Logical AND is true, if and only if both operands are true.",
			"Otherwise false.",
			"Where does that mean?",
			"So, let&#39;s say that I am at a point in my code where I have",
			"two variables, x and y.",
			"And I want to decide whether to do something in my code",
			"based on if x is true and y is true.",
			"I only want to do it if both of them are true,",
			"otherwise I don&#39;t want to go down that path because it&#39;s not going to help me.",
			"What I can say is if x &amp; &amp; y.",
			"That will be a logical Boolean expression comparing x and y",
			"and taking a certain path based on what their values are.",
			"So, if x is true and y is true based on this truth table here,",
			"only then will we go down that path.",
			"If x, &amp; &amp; y.",
			"It&#39;s only true-- the and is only true if x is true and y is true.",
			"If either one is false, as we see the truth table,",
			"then both x and y are not true.",
			"And so, x &amp; &amp; y is false.",
			"&gt;&gt; Logical OR is true if and only if at least one operand is true.",
			"Otherwise false.",
			"So logical AND required both x and y to be true.",
			"Logical OR requires x to be true or y to be true or both x and y to be true.",
			"So, again, we kind of find ourselves in a situation",
			"where we&#39;re going to our code, and we reached a fork in the road.",
			"And we want to go down a particular path if x is true",
			"or y is true, but not necessarily if both are true.",
			"But possibly if both are true.",
			"So if x is true and y is true, we&#39;ll go down that path.",
			"x is true.",
			"One of them is true, right?",
			"If x is true and y is true.",
			"If x is true, and y is false, one of them is still true.",
			"So, x or y is still true.",
			"If x is false, and y is true, one of them is still true, right?",
			"y is true, in this case.",
			"So, it&#39;s true that x or y is true.",
			"Only if x is false and y is false do we not go down that path,",
			"because neither x nor y is true.",
			"Now, if you&#39;re looking at the screen right now",
			"and wondering what that symbol is for logical OR,",
			"it&#39;s called the vertical bar.",
			"And if you looking at your keyboard for a minute, as I&#39;m doing now,",
			"it&#39;s usually just above the Enter key, on most keyboards,",
			"on the same key as the backslash.",
			"It&#39;s also usually right next to the square brackets.",
			"So, it might be a key that you haven&#39;t typed very much in the past.",
			"But, if you&#39;re ever doing logical comparisons,",
			"as we&#39;ll be doing a lot in the course, it&#39;s",
			"going to be useful to find that key and use it.",
			"So, it&#39;s usually on the same key as backslash just above Enter.",
			"&gt;&gt; The final logical operator is NOT.",
			"And NOT&#39;s pretty straightforward.",
			"It inverts the value of its operand.",
			"If x is true, then not x is false.",
			"If x is false, then not x is true.",
			"Sometimes you&#39;ll hear this symbol pronounced as bang or exclamation",
			"or not.",
			"It&#39;s pretty much all the same thing.",
			"In case you hear that spoken and you&#39;re not sure what that means,",
			"it&#39;s just the exclamation point, but sometimes it&#39;s",
			"called a couple different things.",
			"All right, so that takes care of logical operators.",
			"So, let&#39;s talk about relational operators.",
			"Again, if you&#39;re familiar with this arithmetic back in grade school,",
			"you&#39;re probably familiar with how these work already.",
			"These behave exactly as you&#39;d expect.",
			"So less than it&#39;s true, in this example, if x is less than y.",
			"So, if x is 4 and y is 6, x is less than y.",
			"That&#39;s true.",
			"Less than or equal to works pretty similarly.",
			"If x is 4, and y is 4, then x is less than or equal to y.",
			"Greater than. x is greater than y.",
			"And greater than or equal to, x is greater than or equal to y.",
			"If it&#39;s true, then you&#39;ll pass that expression,",
			"and you&#39;ll go down that path on the road.",
			"If you have an if x is greater than y, and x is, in fact, is greater than y,",
			"you&#39;ll do whatever is subject to that condition.",
			"&gt;&gt; Notice that we don&#39;t have a single character for less than",
			"or equal to, as you might be familiar with from math textbooks.",
			"So, we have the less than symbol, followed by an equal sign.",
			"That&#39;s how we represent less than or equal to.",
			"And similarly, do we do that for greater than or equal to.",
			"&gt;&gt; The final two relational operators that are important",
			"are testing for equality and inequality.",
			"So, if x equals equals y, is true if x and y&#39;s value is the same.",
			"If x is 10, and y is 10, then x equals equals y is true.",
			"If x is 10 and y is 11, x equals equals y is not true.",
			"We can also test for inequality using exclamation point or bang or NOT,",
			"again.",
			"If x is not equal to y, if that&#39;s the test we&#39;re using here,",
			"we&#39;d be good to go.",
			"So, if x is not equal to y, we&#39;ll go down that path.",
			"&gt;&gt; Be really careful here.",
			"It&#39;s a really common mistake-- and one I certainly made quite a lot when",
			"I was getting started-- to accidentally mistake",
			"the assignment operator, single equals, for the equality comparison operator,",
			"double equals.",
			"It&#39;ll lead to some weird behavior in your code,",
			"and usually the compiler will warn you about it when you try",
			"and compile your code, but sometimes you might be able to sneak it by.",
			"It&#39;s not necessarily a good thing that you sneak it by, though.",
			"Just so if you are doing an inequality test,",
			"if you&#39;re checking whether two different variables have the same value",
			"inside of them, make sure to use equals equals, and not single equals.",
			"And that way your program will have the behavior you intend.",
			"I&#39;m Doug Lloyd and this is CS50."
		],
		"is_youtube": false
	},
	"video_005": {
		"section": "CS50x 2021",
		"subsection": "Week 1",
		"unit": "Shorts",
		"video_sources": [
			"https://edx-video.net/HARCS50X2016-V032000_DTH.mp4",
			"https://edx-video.net/HARCS50X2016-V032000/HARCS50X2016-V032000.m3u8"
		],
		"video_duration": 553,
		"speech_period": [
			0.5, 2.69, 1.584, 1.916, 2.708, 3.132, 3.32, 2.14, 3.56, 3.221, 2.999,
			2.28, 2.98, 3.08, 2.31, 6.44, 3.01, 4.38, 3.75, 2.58, 3.48, 2.01, 3.8,
			2.23, 2.48, 5.0, 1.35, 4.61, 2.22, 2.97, 1.83, 2.91, 5.96, 3.97, 2.28,
			5.064, 0.666, 3.87, 4.36, 3.65, 2.03, 4.55, 2.9, 2.64, 1.53, 1.5, 3.9,
			2.62, 4.09, 3.94, 3.87, 0.72, 1.94, 3.62, 2.83, 1.34, 2.85, 3.05, 2.4,
			1.52, 1.66, 1.77, 1.42, 3.89, 3.89, 2.68, 3.37, 3.65, 2.85, 1.946, 2.374,
			3.5, 1.73, 3.45, 2.32, 3.46, 1.81, 3.352, 1.708, 3.39, 4.4, 4.15, 2.54,
			4.192, 2.458, 3.162, 1.977, 2.041, 4.52, 2.996, 2.124, 3.06, 3.06, 3.02,
			4.42, 2.23, 5.75, 1.38, 2.42, 2.4, 3.51, 2.76, 4.087, 0.708, 2.92, 1.18,
			2.37, 1.83, 2.49, 8.0, 1.719, 0.791, 2.59, 3.25, 2.3, 1.0, 0.791, 2.139,
			2.27, 2.67, 2.7, 2.985, 2.625, 2.58, 1.86, 4.09, 4.19, 5.18, 2.71, 3.63,
			2.305, 2.089, 2.916, 2.37, 3.991, 2.749, 4.309, 1.541, 3.65, 2.78, 2.057,
			3.083, 2.21, 6.46, 1.89, 2.958, 1.612, 2.375, 1.775, 3.83, 1.31, 1.66,
			6.667, 1.833, 3.86, 1.099, 1.791, 3.16, 4.72, 4.7, 2.53, 3.22, 2.64, 2.66,
			3.52, 2.36, 2.749, 0.791, 1.26, 1.76, 2.39, 2.89, 1.28, 3.09, 3.166,
			2.884, 2.99, 1.84, 3.25, 2.65, 4.02, 2.84, 3.82, 3.33, 3.79, 3.83, 0.76,
			2.16
		],
		"transcript_en": [
			"All right.",
			"So now let&#39;s talk about something really useful in programming--",
			"conditional statements.",
			"So conditional expressions allow your programs",
			"to make decisions and take different forks in the road, something",
			"I alluded to little earlier, depending on the values of variables,",
			"or based on what the user inputs at the programmer, at the command line,",
			"or if you have a prompt or something like that.",
			"C has a couple of different ways to express conditional expressions, which",
			"we also sometimes will call a conditional branch in your programs.",
			"And some of these are going to look pretty familiar to you from scratch,",
			"so we&#39;ll even pull them up side by side, just",
			"you can make that analogy in your head.",
			"&gt;&gt; So, if-- if is a pretty simple conditional.",
			"If you recall from scratch on the right here",
			"you could fill in that is hexagon with a blue expression if mouse down",
			"or if x is less than 10, or something like that.",
			"And then, if x was less than 10, or if the mouse was in fact, down,",
			"all of the code inside of the puzzle piece would execute.",
			"All the things that fit inside that C shape.",
			"&gt;&gt; Similarly, do we have if on the left there.",
			"If Boolean expression, which I&#39;m just using",
			"as a substitute for one of the Boolean expressions we previously discussed,",
			"open curly brace, close curly brace.",
			"So think of open curly brace and closed curly brace",
			"as sort of analogous to the sandwich effect of the if block on the right",
			"from scratch.",
			"&gt;&gt; If the Boolean expression in the if statement is true,",
			"then all the lines of code between the curly braces",
			"will execute in order from top to bottom.",
			"If the Boolean expression is false, we&#39;ll",
			"skip over everything in between the curly braces, because we only",
			"want to go down that fork in the road if the Boolean expression is true.",
			"&gt;&gt; We can take this one step further with if else.",
			"So this Scratch block is pretty similar to the one",
			"we saw just a second ago, except it takes two different paths based",
			"on what happens.",
			"So if the mouse was down, or if x was less than 10,",
			"we&#39;ll do everything that&#39;s in between that first fork, that first C. ,",
			"&gt;&gt; Otherwise, if the mouse is up, or x is not less than 10,",
			"we will do everything in the second set.",
			"And that&#39;s analogous to what you see here for C. If Boolean expression,",
			"do the stuff between the first set of curly braces.",
			"Else, do the stuff between the second set of curly braces.",
			"So if the Boolean expression is true, we&#39;ll",
			"do whatever&#39;s between the first set.",
			"If the Boolean expression is false, that would trigger the else,",
			"and we would do whatever&#39;s in the second set of curly braces.",
			"Again, top to bottom, all lines in between the braces.",
			"&gt;&gt; In C, it&#39;s possible to create an if-else if-else chain.",
			"In fact you can have if-else if-else if-else, if, and so on and so on and so",
			"on.",
			"In Scratch, this required nesting the blocks.",
			"You add an if-else, and you had to put another one inside of the else,",
			"and so on, and it got kind of nested and complicated.",
			"But C, we don&#39;t have to do that.",
			"We can actually just have it be a chain like this.",
			"Again, as you might expect, all of these branches are mutually exclusive.",
			"You can only ever go down one of the branch.",
			"If this is true.",
			"Otherwise, if this is true.",
			"Otherwise, if this is true.",
			"Otherwise, do this.",
			"So all four of the branches in this example are mutually exclusive.",
			"It&#39;s an if-else if-else chain.",
			"&gt;&gt; It is possible though, and sometimes very useful,",
			"to create a chain of not mutually exclusive branches.",
			"In this example, only the third and fourth branches are mutually exclusive.",
			"It could be that you could satisfy the first condition,",
			"and you could satisfy the second condition,",
			"and you could satisfy the third condition-- in which case",
			"you would go down the first branch, then you go down a second branch,",
			"then you would go down the third branch.",
			"Or perhaps you satisfy the first condition, and the second condition,",
			"but you don&#39;t satisfy the third condition.",
			"In this case you go down the first branch and the second branch,",
			"and then the fourth branch,",
			"&gt;&gt; The reason for this is that the else will only bind to the nearest if.",
			"So even though there&#39;s an else here, that",
			"doesn&#39;t necessarily create a mutually exclusive chain of everything.",
			"It&#39;s only the expression there with Boolean",
			"expression 3-- that&#39;s the mutually exclusive with the else.",
			"So it is possible, and sometimes quite useful,",
			"as I said, to create a chain of not mutually exclusive branches.",
			"Let&#39;s take a look at a different kind of conditional, which",
			"you have not seen before in Scratch.",
			"There&#39;s something called the switch statement.",
			"The switch statement is kind of neat because it&#39;s",
			"a conditional statement that allows you to specify distinct cases,",
			"instead of relying on Boolean expressions to make decisions for you.",
			"So for example, let&#39;s say that I have this program,",
			"and I&#39;m asking the user to provide input to me.",
			"So I say, int x = Get Int(), and if you&#39;re not familiar yet,",
			"get int is a function that is also included in the CS50 library,",
			"so if you #include CS50.H you&#39;ll have access to Get Int() and all of its",
			"cousins-- GetFloat, GetString, and so on.",
			"Basically one Get function for every data type that we&#39;ve already discussed.",
			"&gt;&gt; So Int x equals GetInt.",
			"Basically what&#39;s happening is I&#39;m at the terminal.",
			"I&#39;m asking the user to type in a number.",
			"&gt;&gt; And here I&#39;m switching what I&#39;m doing, depending",
			"on what the user typed at the prompt.",
			"So if they typed one, I print out one.",
			"And then I break.",
			"If they type two, I print out two.",
			"And then I break.",
			"It&#39;s important to break between each case",
			"because otherwise you will fall through.",
			"So if I didn&#39;t have any breaks there, and the user",
			"typed one, what would happen is it would print one, two, three, sorry.",
			"That&#39;s kind of strange behavior, right?",
			"You might think so.",
			"But there are actually some cases where this could be a pretty useful thing.",
			"So here&#39;s another example of a switch statement where I omit the breaks.",
			"But I do it on purpose.",
			"&gt;&gt; So what happens here?",
			"Think for a second.",
			"You may even want to pause the video.",
			"&gt;&gt; What happens here if the user types four?",
			"So I&#39;ve asked the user for input.",
			"And they provide the value 4.",
			"What gets printed when I do that?",
			"On the previous slide, there were breaks between all the cases.",
			"And so it would just print four and then stop.",
			"But in this case, it won&#39;t.",
			"What will happen is you will fall through each case.",
			"&gt;&gt; So in this case I&#39;ve organized my cases in such a way that if the user types 4,",
			"I will print four, three, two, one, blast off.",
			"And if they typed 5, I would start at five and do the same thing.",
			"If they typed 1, I would just do one, blast off.",
			"&gt;&gt; So in this case, I&#39;m using a switch kind of cleverly so",
			"that I do intend to fall through all the cases.",
			"But generally you&#39;re probably gonna want to break between all of them,",
			"unless you have a situation like this one where you&#39;re",
			"kind of leveraging the fact that you&#39;ll fall through the cases without a break.",
			"So that&#39;s the second of the major types of conditional statements.",
			"The last of which is ?: So I have two snippets of C code here.",
			"One on the left and one on the right.",
			"The one on the left should probably be pretty familiar to you.",
			"&gt;&gt; I have Int x.",
			"And I probably should have asked the user",
			"for-- this should probably be Int x equals GetInt, or something like that.",
			"And then I&#39;m making a decision.",
			"If some Boolean expression is true, assign x the value 5.",
			"Otherwise, assign x the value 6.",
			"&gt;&gt; That on the left should probably be pretty familiar from our discussion",
			"of If Else just a moment ago.",
			"Would you be surprised to know that the line on the right",
			"does the exact same thing?",
			"&gt;&gt; So this is called ?: or sometimes called the ternary operator.",
			"And it&#39;s pretty cool.",
			"It&#39;s usually used as a cute trick.",
			"&gt;&gt; But what it allows you to do is to simulate an If Else with really small,",
			"really trivially short conditional branches.",
			"You generally wouldn&#39;t use ?: if you had six lines of code between each set",
			"of curly braces.",
			"But if you&#39;re just making a quick decision,",
			"if you&#39;re going to do one thing or the other and it&#39;s very simple,",
			"this might be an example of how to do it with ?: the ternary operator.",
			"So Int x equals expression ?",
			"The thing after the question mark is what x&#39;s value",
			"will be if expression is true.",
			"&gt;&gt; The thing after the colon is what x&#39;s value",
			"would be if the expression was false.",
			"So I&#39;m asking myself, is the expression true?",
			"If it is, assign x the value 5.",
			"If it&#39;s not, assign x the value 6.",
			"Again, like I said.",
			"This is usually just a cute trick.",
			"And sometimes if you become really comfortable with it,",
			"you&#39;ll do this because it looks kind of cool in your programs.",
			"Generally I&#39;m presenting it to you now so you&#39;re familiar with it",
			"if you see it.",
			"But certainly know you don&#39;t have to write it in any of your code.",
			"But it is something to be familiar with, because you&#39;ll definitely encounter",
			"snippets of code here and there where this ?: syntax,",
			"AKA the ternary operator, is used.",
			"&gt;&gt; So quick summary on what conditionals are,",
			"and what the options are available to you in C. You have If and if-else,",
			"and if else if, et cetera.",
			"You can use Boolean expressions for those to make decisions.",
			"&gt;&gt; With switch statements you use discrete cases to make decisions.",
			"You would specifically say, if it&#39;s one, or if it&#39;s two, or if it&#39;s three,",
			"I&#39;ll do this thing, or this thing, or this thing.",
			"And ?: can to be used to replace very simple if-else branches,",
			"or if-else chains to make your code look a little fancy.",
			"&gt;&gt; I&#39;m Doug Lloyd.",
			"And this is CS50."
		],
		"is_youtube": false
	},
	"video_006": {
		"section": "CS50x 2021",
		"subsection": "Week 1",
		"unit": "Shorts",
		"video_sources": [
			"https://edx-video.net/HARCS50X2016-V029800_DTH.mp4",
			"https://edx-video.net/HARCS50X2016-V029800/HARCS50X2016-V029800.m3u8"
		],
		"video_duration": 562,
		"speech_period": [
			2.23, 2.375, 2.035, 3.55, 2.03, 3.38, 1.93, 2.874, 3.116, 4.67, 1.79,
			3.17, 2.63, 4.1, 0.795, 2.625, 2.35, 2.19, 4.977, 1.833, 2.84, 3.45,
			2.375, 2.385, 2.374, 3.043, 1.833, 1.458, 3.04, 2.27, 1.987, 1.083, 3.65,
			3.71, 2.39, 3.61, 3.67, 3.92, 3.274, 2.166, 4.1, 4.93, 4.2, 2.79, 2.4,
			3.656, 2.404, 4.05, 3.24, 4.52, 2.34, 4.49, 3.4, 5.021, 2.749, 3.51,
			3.009, 2.041, 2.67, 4.2, 2.47, 2.17, 2.64, 3.35, 5.68, 2.71, 1.931, 1.999,
			2.32, 2.31, 2.17, 3.326, 1.874, 2.0, 3.33, 1.91, 2.16, 1.16, 4.15, 2.5,
			0.914, 1.416, 1.874, 2.26, 2.666, 3.62, 1.0, 2.21, 3.529, 3.861, 2.91,
			1.27, 3.35, 1.26, 1.05, 3.62, 2.01, 2.6, 0.84, 4.9, 1.44, 3.63, 4.0, 3.61,
			1.77, 3.01, 3.95, 2.71, 2.75, 2.52, 1.699, 2.041, 3.166, 2.984, 3.2, 4.24,
			1.8, 3.425, 2.265, 3.5, 4.2, 1.66, 1.25, 2.6, 3.404, 2.166, 2.26, 3.49,
			1.43, 2.74, 1.97, 2.18, 4.41, 3.21, 1.98, 2.49, 3.957, 2.333, 2.69, 2.88,
			3.73, 1.77, 1.579, 2.291, 4.44, 2.74, 2.54, 2.56, 2.4, 3.53, 2.52, 1.62,
			1.34, 2.291, 1.389, 2.1, 3.516, 2.624, 2.05, 4.189, 2.041, 3.25, 2.95,
			0.749, 2.301, 1.237, 3.333, 2.16, 3.14, 2.64, 3.94, 4.19, 2.52, 3.17, 2.0,
			1.81, 5.47, 2.15, 2.85, 1.97, 2.09, 2.417, 1.833, 2.19, 4.0, 2.117, 2.084,
			2.291, 2.609, 2.78, 2.97, 3.82, 1.46, 2.459, 2.915, 3.216, 2.442, 1.708,
			2.91, 1.833, 2.967, 2.26, 3.25
		],
		"transcript_en": [
			"&gt;&gt; DOUG LLOYD: All right, so let&#39;s talk about loops.",
			"So loops are kind of cool because they allow your program",
			"to execute lines of code over and over and over.",
			"Repeatedly, without having to copy and paste or otherwise repeat them.",
			"There are three major kinds of loops you&#39;ll see.",
			"You&#39;ll probably have occasion to use each one as you progress through CS50.",
			"Some of these loops are pretty familiar to you from Scratch,",
			"so again, as we did with conditionals, we&#39;ll put them up side by side",
			"if there is an analogy we can draw.",
			"&gt;&gt; First is forever from Scratch, which compares to while (true).",
			"This is what we call an infinite loop.",
			"The lines of code between the curly braces, much like the puzzle pieces",
			"that fit inside the C of the forever block,",
			"will execute repeatedly from top to bottom, over and over and over,",
			"forever.",
			"After all, if you recall our discussion of Boolean expressions,",
			"true is always true.",
			"So if we&#39;re doing something so long as true",
			"is true-- it seems a little silly-- true is always true, so it&#39;ll always run.",
			"It&#39;ll run forever and ever and ever until we",
			"find a way to break out of it with a break statement, which again,",
			"we saw a little while ago we were talking about switch.",
			"&gt;&gt; Or otherwise just kill our program, which incidentally,",
			"if you ever find yourself in a situation with an infinite loop",
			"and you don&#39;t know how to stop your program from running.",
			"Just hit control and C and that&#39;ll kill your program for you.",
			"But this, again, is called an infinite loop.",
			"It is a loop that will run forever.",
			"Now, while loops are not always infinite, because also",
			"we can replace the Boolean expression with something",
			"a little more useful than just true.",
			"So here&#39;s another example.",
			"While and some Boolean expression and then curly braces.",
			"That&#39;s pretty much analogous to repeat until, from scratch.",
			"Although in a second, I&#39;ll explain the difference.",
			"&gt;&gt; So in C, if the Boolean expression inside of the while loop",
			"evaluates to true, the lines of code between the curly braces",
			"will execute repeatedly over and over and over until Boolean expression",
			"evaluates to false.",
			"So for example, you might have some sort of counter.",
			"So say you at the beginning of this loop say int x equals zero.",
			"While x is less than 100, do a couple things inside that curly braces,",
			"then in the end of your loop, you say x plus plus, you&#39;re incrementing x.",
			"Eventually x will get to 100 and you will",
			"stop because the condition x is less than 100",
			"will no longer be true as soon as x is equal to 100.",
			"100 is not less than 100.",
			"&gt;&gt; Now somewhat confusingly, the behavior of the scratch block is reversed.",
			"So be really careful if this is your first foray into using loops.",
			"Basically, the repeat until block in Scratch",
			"will repeat something over and over and over,",
			"until the expression, the Boolean expression in the hexagon is true.",
			"So it will keep doing it until it is true.",
			"Meanwhile, the while loop will continue to do it until it is false.",
			"So they&#39;re quite similar, but there&#39;s that little distinction just",
			"to be careful of especially as you make your first foray from transitioning",
			"to Scratch into c.",
			"The next kind of loop is actually pretty similar.",
			"It&#39;s called the do while loop.",
			"This loop will execute all the lines of code between the curly braces once,",
			"and then it will check the Boolean expression.",
			"If the Boolean expression evaluates to true,",
			"it&#39;ll go back and repeat that process over and over",
			"and over until the Boolean expression evaluates to false.",
			"So this loop, unlike a while loop, is guaranteed to run at least one time.",
			"This can be pretty useful.",
			"&gt;&gt; Lastly, we have a for loop.",
			"For loops are kind of syntactically unattractive",
			"and there&#39;s a lot going on here, so bear with me",
			"as we try and break these pieces apart.",
			"Generally, the use case of a for loop is you",
			"want to repeat something a specific number of times.",
			"In this example here, I have the repeat block",
			"from Scratch, which is analogous to the for loop",
			"in C, repeating something 10 times.",
			"And the for loop on the left there, which",
			"is a four loop that would do the same thing.",
			"This would go 10 times.",
			"Counting from zero, we increment each pass of the loop.",
			"And we keep doing that until i is less than 10.",
			"&gt;&gt; So what happens?",
			"There&#39;s a whole lot of code there.",
			"Let&#39;s break it down to what is happening step",
			"by step as we dig through a for loop.",
			"The first thing that happened is the counter variable is center.",
			"Everything to the left of that first semicolon inside the parentheses",
			"is executed.",
			"In this case, we are saying int i equals 0.",
			"Declaring a new variable called i, that variables is a type integer",
			"and we&#39;re saying the value inside that variable is going to be zero.",
			"&gt;&gt; The second thing we do is we then immediately evaluate",
			"the Boolean expression.",
			"Boolean expression is in the middle of the two semicolons.",
			"I is less than 10.",
			"That&#39;s true here, right?",
			"We just said i is equal to zero, and so 0 is less than 10,",
			"and so that condition is true and we will now",
			"proceed to execute the body of the loop.",
			"If it was false.",
			"If, for example, I said instead of i equals 0 there I said i equals 15,",
			"int i equals 15.",
			"Well 15 is not less than 10, so we would never enter the body of the loop",
			"because the Boolean expression there would evaluate to be false.",
			"&gt;&gt; After we go through from top to bottom, we encounter that closing curly brace,",
			"a third thing happens.",
			"The counter variable is incremented, or rather, the lines",
			"of code of a statement after the second semicolon inside of the",
			"for loops parentheses is executed.",
			"So we start out by saying int i equals 0.",
			"Then we check whether or not the Boolean expression is true.",
			"0 is less than, 10 so it&#39;s true.",
			"So we&#39;re going to proceed into the body the loop.",
			"Things will happen inside the loop, and when we encounter that closing curly",
			"brace, the next thing we do is we say i plus, plus.",
			"I was zero now i is one.",
			"Then, we again check the value of the Boolean expression in the middle.",
			"One is less than 10.",
			"So we&#39;ll go through this process again and again.",
			"We&#39;ll get to the closing curly brace again.",
			"We&#39;ll increment i from 1 to 2 and from 2 to 3.",
			"And so on and so on and so on, until eventually i&#39;s value becomes 10.",
			"Is 10 less than 10?",
			"No.",
			"Counting from 0, we&#39;ve gone through 10 iterations of loop.",
			"We&#39;ve repeated 10 times, just as we did in the Scratch block.",
			"And so that&#39;s basically the process for a four loop.",
			"&gt;&gt; Now taking away the actual code and putting it",
			"in just some basic general statements.",
			"Here&#39;s what happens.",
			"All the statements in start are executed first.",
			"You might have more than one.",
			"Then, the Boolean expression is checked.",
			"If the expression evaluates to true, execute the body the loop one time.",
			"If the expression evaluates to false, we&#39;re done.",
			"We don&#39;t execute the body of the loop at all.",
			"After we&#39;ve executed the body the loop one time,",
			"we then do what is in the increment part there.",
			"Which is usually going to be something like i plus, plus",
			"or something like that, that modifies a counter variable.",
			"Then, after we increment, we check the expression again",
			"and repeat those steps over and over and over until the expression is",
			"no longer true.",
			"&gt;&gt; So what are the use cases for a loop?",
			"Use you use a while loop when you want a loop to repeat",
			"an unknown number of times, but it possibly might not run all.",
			"A really common example of a while looping being used",
			"is to run the control flow for a game.",
			"You might not know how long the user is going to be playing,",
			"but you want to keep doing the same thing.",
			"Updating the positions of various sprites on the board.",
			"You want to keep things moving at all times,",
			"but you don&#39;t know when the user is going to stop playing",
			"or when they&#39;re going to run out of lives.",
			"So a while loop is really good for something like that.",
			"That&#39;s a good use case.",
			"&gt;&gt; For a do while loop, it&#39;s pretty similar.",
			"You want a loop to repeat an unknown number of times, but at least once.",
			"You might use this for a game too, but a really common use case",
			"is prompting the user for input.",
			"Generally, you might say something like, give me a positive integer,",
			"and you might put that inside of a do while loop.",
			"So it will always ask them at least once for a positive integer.",
			"If they give you a positive integer, you might break out of the loop.",
			"You might be done.",
			"The Boolean expression in the do while might be false.",
			"&gt;&gt; And you won&#39;t ask them again.",
			"If they give you a negative number where they type some word or something that&#39;s",
			"not really useful to you, you might use the",
			"do while loop to go back and do it again and again and again.",
			"You definitely want to ask them to give you a number once,",
			"but you don&#39;t know how many times after that they might be pests.",
			"And so a do while it&#39;s a great use case for prompting the user for input.",
			"And a for loops use case typically is when",
			"you want to repeat a loop a discrete number of times,",
			"though you might not know the number of times",
			"the moment the program is compiled.",
			"&gt;&gt; So for example, maybe you have a program where you prompt the user for a number.",
			"And they enter 100.",
			"And then your for loop will in that case run 100 times.",
			"Or maybe they enter 1,000 in your program",
			"and then run the loop 1,000 times.",
			"It&#39;s a specific number of times.",
			"They don&#39;t necessarily know what that number",
			"is the moment program is compiled.",
			"It&#39;s not like a while loop where it could be infinite.",
			"It&#39;s rather a number that you just don&#39;t know.",
			"Now even though I&#39;ve outlined all these use cases,",
			"you should know that in pretty much every circumstance,",
			"you can interchange all three of these loops.",
			"You can use a for loop where you would otherwise use a while loop.",
			"You can use a for loop wherever you&#39;d use a do while loop and so on.",
			"It can be a little tricky sometimes, so generally it&#39;s a good practice",
			"to adhere to a typical use case.",
			"Use a do while loop if you wanted something once, at least.",
			"Use a for loop if you want to do something a specific number of times.",
			"After all, that&#39;s why there are three different kinds of loops.",
			"&gt;&gt; So they can be used in the right context.",
			"But you can interchange them if you want.",
			"If you feel comfortable with while loops and you always want to use while loops.",
			"It is something that you can do, although it",
			"might be a little syntactically tricky, where a for loop",
			"would be a lot more straightforward.",
			"&gt;&gt; My name is Doug Lloyd and this is CS50."
		],
		"is_youtube": false
	},
	"video_007": {
		"section": "CS50x 2021",
		"subsection": "Week 1",
		"unit": "Shorts",
		"video_sources": [
			"https://edx-video.net/HARCS50X2016-V039800_DTH.mp4",
			"https://edx-video.net/HARCS50X2016-V039800/HARCS50X2016-V039800.m3u8"
		],
		"video_duration": 1071,
		"speech_period": [
			5.06, 0.83, 2.79, 3.18, 3.35, 2.21, 2.839, 2.041, 3.39, 3.48, 4.54, 3.21,
			3.041, 2.249, 2.59, 2.6, 2.797, 2.083, 1.625, 2.916, 1.229, 4.44, 4.3,
			6.14, 2.775, 2.166, 2.209, 2.54, 3.48, 4.31, 3.31, 1.95, 3.76, 2.115,
			2.995, 2.7, 2.34, 3.083, 2.031, 3.166, 1.1, 1.94, 3.14, 3.42, 4.9, 4.65,
			3.51, 2.35, 4.23, 3.91, 1.96, 4.11, 3.79, 6.35, 2.4, 2.8, 2.083, 1.787,
			4.63, 2.67, 2.777, 1.583, 2.13, 3.39, 4.47, 2.0, 4.852, 2.708, 3.65, 2.55,
			3.55, 3.64, 3.79, 3.99, 6.15, 2.031, 2.499, 4.08, 3.397, 1.333, 3.77,
			2.279, 2.041, 2.97, 2.52, 2.42, 2.26, 3.98, 2.895, 2.015, 6.07, 1.954,
			1.666, 5.51, 5.0, 5.05, 3.25, 1.54, 3.21, 4.04, 3.456, 2.124, 0.7, 1.85,
			1.791, 2.139, 3.78, 3.14, 0.5, 1.25, 2.15, 2.333, 1.727, 2.41, 2.5, 5.35,
			2.98, 5.28, 2.215, 1.875, 1.86, 1.87, 4.847, 1.083, 3.44, 4.11, 4.04,
			2.04, 2.93, 0.91, 2.66, 3.006, 1.374, 4.6, 1.8, 3.11, 3.57, 1.89, 5.25,
			4.16, 1.529, 2.541, 4.25, 2.52, 2.14, 1.458, 3.612, 0.89, 1.45, 3.9, 2.7,
			1.534, 0.916, 4.17, 2.46, 5.31, 0.5, 3.03, 3.099, 2.041, 1.07, 2.68, 1.75,
			4.729, 1.041, 6.0, 3.862, 2.458, 1.24, 3.81, 1.03, 3.712, 1.208, 0.9,
			2.375, 6.434, 3.61, 2.051, 2.4, 2.504, 2.916, 4.964, 2.666, 2.377, 2.333,
			2.78, 3.31, 4.84, 4.01, 3.68, 1.15, 3.9, 3.77, 3.81, 3.849, 2.291, 4.26,
			3.33, 3.0, 2.208, 2.632, 0.93, 3.31, 1.29, 1.87, 2.94, 4.3, 1.46, 2.89,
			3.83, 7.44, 2.302, 0.958, 2.59, 3.07, 3.76, 6.31, 3.28, 1.219, 2.291,
			3.42, 2.44, 4.08, 4.05, 3.81, 1.22, 4.52, 2.39, 9.62, 1.57, 2.44, 2.89,
			4.81, 2.604, 0.916, 3.309, 2.041, 3.97, 0.5, 1.99, 1.375, 1.155, 1.98,
			1.48, 2.32, 2.69, 2.26, 3.034, 2.666, 1.097, 3.083, 1.55, 1.7, 2.02, 2.38,
			4.01, 2.52, 0.92, 2.62, 3.32, 1.696, 0.624, 0.99, 6.41, 1.75, 2.208,
			2.606, 2.416, 1.11, 2.46, 2.458, 3.162, 4.23, 1.38, 2.41, 2.49, 3.62,
			1.57, 1.97, 1.43, 1.23, 2.46, 3.22, 2.4, 2.83, 3.84, 5.14, 1.88, 0.88,
			7.34, 2.82, 0.5, 1.333, 4.237, 2.15, 3.804, 2.041, 2.585, 2.859, 2.041,
			3.041, 4.129, 2.35, 3.27, 1.17, 2.01, 2.11, 3.99, 0.5, 2.089, 2.541, 1.14,
			2.47, 2.92, 7.31, 3.78, 2.884, 1.416, 2.18, 1.96, 2.749, 2.131, 3.69,
			1.64, 3.87, 4.22, 2.0, 1.2, 1.84, 4.05, 3.89, 2.771, 2.569, 4.91, 5.53,
			2.67, 1.79, 4.76, 2.76, 1.25, 3.59, 7.74, 1.62, 2.6, 8.157, 0.833, 3.75,
			3.85, 3.69, 1.71, 1.5, 0.75, 3.39, 2.87, 1.67, 3.12, 7.899, 1.101, 2.74,
			1.67, 1.83, 2.45, 1.48, 2.35, 2.958, 2.592, 4.45, 2.78, 2.81, 2.84, 3.51,
			0.89, 2.04, 2.738
		],
		"transcript_en": [
			">> [MUSIC PLAYING]",
			">> DOUG LLOYD: OK.",
			"So let's talk about how to use the Linux command line.",
			"Now, the CS50 IDE, or in fact, even a CS50 appliance,",
			"if you're familiar with that, or you're taking an older version of CS50,",
			"is a cloud-based machine which runs Ubuntu,",
			"which is one of the many flavors of the Linux operating system.",
			"Linux operating system is favored by programmers,",
			"because it's just cooler, right?",
			">> Many modern Linux distributions have graphical user interfaces,",
			"which we also call GUIs, G-U-I, to allow easy mouse-based navigation,",
			"which you're probably familiar with, if you're a Windows or Mac user,",
			"moving around your mouse, double-clicking on icons, and so on.",
			"Still though, as a programmer, and even though the IDE",
			"contains the ability to do some graphical user",
			"stuff, clicking, and dragging, and all that,",
			"you'll still be using your terminal window pretty frequently.",
			"And you can do many of the same tasks that you can",
			"do with a mouse with keyboard commands.",
			"And we're going to talk a little bit about what some of those commands",
			"are right now.",
			">> Now, these commands can be used on any Unix-based operating",
			"system, which includes Linux, but also includes Mac OS.",
			"If you open up Terminal on your Mac, you can use these exact commands.",
			"Windows also has Command Prompt, but some of the commands",
			"are slightly different, so it doesn't actually work,",
			"because Windows is not a Unix-based system.",
			">> So let's take a look at some of these Linux commands.",
			"The first one that you'll probably use quite a lot is ls.",
			"That's a lowercase l, followed by a lowercase s, which is short for list.",
			"And what the list command does is it gives you a readout of all the files",
			"and folders in your current directory.",
			"So you can see everything you can get to from where you currently are.",
			">> So I've opened up here the CS50 IDE.",
			"And I'm going to zoom-in in a second to give you a closer look,",
			"but here's the broad picture of what the IDE looks like.",
			"On the left, you can see we have a file tree, which you're probably",
			"familiar with, double-clicking, and files and folders, and all that stuff.",
			"So that's still there in the CS50 appliance.",
			"At the center in the top is where you're going to be writing your code, once",
			"you click on a file.",
			"And at the bottom, we have a terminal window,",
			"which is where we can execute these terminal commands.",
			">> I'm going to zoom-in and head over here, just",
			"to show you that, in fact, I can click on these files and folders.",
			"So clearly, where I currently am, I have two folders, called pset0 and pset1,",
			"and three files, one called hello, one called hello.c,",
			"and one called hello.txt.",
			">> So let's move down to the terminal window and get a closer look.",
			"So we just talked, again, about the fact that we have three files and two",
			"folders in the current directory.",
			"If I type ls, which again is the command to list",
			"the contents of the current directory, and then I hit Enter,",
			"look what I see, hello, hello.c, hello.txt, pset0 and pset1.",
			">> pset0 and pset1 are colored blue, to indicate",
			"to you that those are directories that we could navigate into.",
			"And we'll learn a little bit about how to navigate",
			"into directories in a minute.",
			"And every other thing is colored black, if it's a text file or a source code",
			"file, and green, if it's an executable file.",
			"So clearly, that means that I could run a program called, hello.",
			"That's what the green one there means.",
			"But basically, typing the ls command has allowed",
			"me to look at everything that exists in my current directory, which",
			"matches what we see here, in the graphical display of the same.",
			"The next command you'll probably use quite a bit",
			"is cd, lowercase c, lowercase d, which is short for change directory.",
			"This allows us to do what I was talking about a second ago, which",
			"is to navigate between directories at the command",
			"line, as opposed to double-clicking on folders.",
			"So if we type cd and then the name of a directory,",
			"we can get into that directory.",
			">> As an aside, know that the name of the current directory is always",
			"dot, and the name of the directory one level above where we are now,",
			"that is the name of the folder in which our folder is, dot, dot--",
			"or in which our folder is, is dot, dot.",
			"And if you're ever curious about the name of your directory,",
			"you can type pwd, which stands for present working directory.",
			"We'll take a look at all of these now, by heading back to the CS50 IDE.",
			"So I'm back in my workspace now.",
			"And I'll zoom-in again on the terminal, so we can take a look",
			"at moving around within the IDE.",
			"So I'm going to list the contents of my directory",
			"again, just to reground us in where we are.",
			"So if I type ls, which is for list again,",
			"I see that I can get to pset0 and pset1.",
			"Those are the directories I can get to from here.",
			"I know that, because the IDE gives me a clue by coloring them blue.",
			">> Let's say that I want to get into my pset1 directory,",
			"because I'm working on problem set 1.",
			"I can type cd-- again, short for change directory-- space, pset1.",
			"And if I hit Enter, notice what happens.",
			"It doesn't look like a lot has happened.",
			"But if you look at the prompt, it now tells me that I'm in ~/workspace/pset1.",
			"I've navigated into the pset1 folder that was within my workspace.",
			">> And if I type ls, I see some different stuff here, right?",
			"This isn't the same list that I saw before.",
			"I've navigated into pset1.",
			"And so now, when I type ls, I'm getting the context of what can I",
			"see from within the pset1 folder.",
			">> Now, I'm going to type control l, which just clears the screen.",
			"And I'm going to list the contents of the directory",
			"again, just so you can see.",
			"I just wanted to do that to clear out some of the stuff",
			"that you saw down below and to prevent this",
			"from going too far down out of range.",
			">> Now, I said earlier that, if I want to navigate to the current directory,",
			"I can type cd space dot.",
			"Hit Enter.",
			"It doesn't do anything, right?",
			"I'm changing directories to the current directory.",
			"You're not always going to find a need for a single dot,",
			"but you will occasionally.",
			">> Let's say that I want to move up one level.",
			"I want to get back to my workspace directory.",
			"I can't type cd workspace, there's no such file or directory.",
			"And the reason for that-- if I type ls one more time--",
			"is that there is no directory called workspace inside of my pset1 directory.",
			"I'm going to clear my screen again with control l.",
			"Remember what I said earlier, though, that we",
			"can navigate back with dot, dot.",
			"That's the name of the parent directory.",
			"So if I type cd, space, dot, dot, and then hit Enter,",
			"now look at what happened.",
			"My command prompt tells me that I'm back in my ~/workspace directory.",
			"I moved up one level, thanks to dot, dot.",
			">> Now, let's say that I'm using an operating system that is Linux-based,",
			"but doesn't necessarily tell me where I am.",
			"This one happens to tell us that I'm in ~/workspace right now,",
			"right at the prompt.",
			"But I could be completely lost in a mess of folders,",
			"and I have no idea where I am and no idea where I want to get back to.",
			"There's two things that I can do.",
			">> First of all, I can figure out where I am, by typing pwd.",
			"That's my present working directory.",
			"And if I hit Enter, it tells me exactly where I am.",
			"Now /home/ubuntu is the long way of saying, tilde,",
			"which is your home directory.",
			"But it tells me that I'm in home/ubuntu/workspace, or ~/workspace.",
			">> I'm going to navigate to my pset1 directory again,",
			"and I'm going to list the contents.",
			"And I see that I have another directory there, called extras.",
			"So I'm going to cd into extras, and then I'm going to clear my screen.",
			">> So now, I'm pretty far in, right?",
			"What if I want to back to workspace immediately?",
			"There's a couple things I could do.",
			"I could type cd, dot, dot, slash, dot, dot, to move up one level and then",
			"another level.",
			"But that's kind of annoying.",
			">> So if I ever want to get back to just my home directory, tilde,",
			"I can type cd with nothing after it.",
			"Cd, Enter.",
			"And now, I'm in tilde.",
			"And if I want to get to workspace, I can just type cd workspace.",
			"And that's how you work changing directories",
			"within the CS50 IDE or any Linux operating system at the command line.",
			"All right.",
			"The next one that might come in handy is mkdir,",
			"which is short for make a directory, if I need to create a new folder.",
			"If you're familiar with the GUI operating system,",
			"you might right-click.",
			"And then, when the context menu pops up, choose New Folder.",
			"That's probably how you've done it before.",
			"But we can also create directories at the command line.",
			"So we're back in the IDE.",
			"I'll zoom-in on the terminal and list the contents of my directory",
			"again, just to give us a frame of reference.",
			"Let's say that, now, I've finished working on problem set 0",
			"and problem set 1.",
			"So I want to create a new directory to work on for problem set 2.",
			"How do I do that?",
			">> Well, again, I could right-click in the left side there and choose New Folder",
			"and create a pset2 directory.",
			"That would work too.",
			"But then I also do it at the command line pretty quickly,",
			"by typing mkdir, space-- I typed in n, but-- space pset2.",
			"If I hit Enter and then I list the contents of my directory again,",
			"I see that, look, now I have a pset2 folder.",
			"And I can navigate into that using cd and do",
			"all the work I need to do for pset2.",
			"Incidentally, I'll just pop over here really quickly to the file tree.",
			"And you can see that, also, in the graphical File Explorer,",
			"we can see that the pset2 directory has also been created there.",
			"And I can navigate to it, using the GUI as well.",
			"The next time and that's probably going to come in handy",
			"is cp, which is short for copy.",
			"Copy, unlike all the other commands we've seen before,",
			"takes two arguments, a source, the name of the file that you want to copy,",
			"and a destination, where you want to copy the file to.",
			"It's pretty easy to copy a file, so let's do that.",
			">> So we're back in the IDE.",
			"I'm going to list the contents of my current directory with ls.",
			"Now, let's say that I want to make a copy of hello.txt.",
			"Again, from the file tree on the left, the graphical interface,",
			"I could right-click on hello.txt, make a copy, paste the copy.",
			"But I can do it pretty quickly at the command line too.",
			">> Let's say I want to copy hello.txt to hi.txt.",
			"I can cp, space, hello.txt.",
			"That's my source file, so that's why I'm going to choose that one first.",
			"And then I need to name the destination file, hi.txt.",
			"",
			"I hit Enter.",
			"And if I list the contents of my directory again, there's hi.txt.",
			"I made a copy of it.",
			"And in fact, if I went into hi.txt, I could",
			"see that it would be an exact duplicate of everything that",
			"existed in my hello.txt file.",
			">> So that's how you copy a file.",
			"But what if you want to copy an entire directory?",
			"So for a second, let's take a look at what's in my pset0 directory.",
			"If I cd pset0 and list the contents, I have a directory called, sample,",
			"and a scratch file, scratch.sb2.",
			"So that's good to know.",
			"So let's clear the screen, and I'm going to go back",
			"to my workspace directory for a second.",
			">> Let's say that, now, I want to make a copy of my pset0 directory.",
			"I can't just say cp pset0 pset3, for instance.",
			"You get this weird message, omitting directory pset0.",
			"Why do you get that message?",
			"Well, it turns out that, when you have a directory that",
			"has other stuff inside of it, the cp command doesn't really",
			"necessarily know what to do with it.",
			">> We need to explicitly tell Linux, the terminal,",
			"I want you to copy the pset0 directory and copy",
			"every folder that exists inside of it and every file that",
			"exists inside of it.",
			"In other words, I need you to recursively dive down into pset0",
			"and make a copy of everything in there.",
			">> If I want to do that, what I can do is cp-r, for recursive, pset0 pset3.",
			"Hit Enter.",
			"Now, if I list the contents of my directory,",
			"I see there's the pset3 directory that I can work with.",
			"And if I cd into pset3 now and then list the contents, look,",
			"there's sample and scratch.sb2 again.",
			"So that's pretty cool.",
			"So that's how you can copy an entire directory, and not just a single file.",
			"So if you want to copy a directory, just remember",
			"to use the -r flag when you're working with the cp command.",
			"All right.",
			"So I've copied a file, but I've done it by mistake.",
			"And now, I want to get rid of it.",
			"How do I do that?",
			"Again, if you're familiar with a GUI interface,",
			"you can right-click and just choose Delete.",
			"And it'll send it to the trash or the Recycle Bin.",
			"But at the command line, we can just type rm, for remove,",
			"and then the name of the file we want to get rid of.",
			">> Now, rm is very careful.",
			"It does a lot of double-checking, to make sure that you actually",
			"want to delete the file.",
			"It doesn't want to make any mistakes, because there's no Recycle Bin here.",
			"Once we delete a file, it's gone.",
			"And there's really no way to recover it.",
			"So we need to be pretty careful, and so rm",
			"is going to be really careful for us.",
			">> So let's go back to the IDE and get rid of that hi.txt file",
			"that I created a minute ago with copy.",
			"So we're in the IDE.",
			"And I list the contents of my directory again, just to give us some context.",
			"I mean, you can see that there's hi.txt, which I created a little while ago.",
			"Now, I want to get rid of it.",
			"How do I do it?",
			">> Again, just rm.",
			"So I can type rm hi.txt and hit Enter.",
			"And there's rm being really careful for us",
			"and making sure we actually want to delete this file.",
			"Do you really want to remove regular empty file hi.txt?",
			"That's just like an operating system, like Windows or Mac,",
			"that you might be familiar with popping up",
			"that box says are you really sure you want to do this.",
			">> I'm pretty sure I want to this, so I'm going to type, yes--",
			"or I could also just type y-- and hit Enter.",
			"And if I list the contents of my directory again, hi.txt is gone.",
			"Not bad, right?",
			"Let's press Control L, just to get rid of all this stuff",
			"and get us back at the top of the screen.",
			">> Now, there is a way to short circuit rm, so",
			"that it doesn't ask us that question.",
			"We really know we want to get rid of that file,",
			"and we don't even want to be asked the question.",
			"How do we do that?",
			"Well, we can specify an extra flag, just like we",
			"did with cp where we could add the -r flag,",
			"to recursively copy into a directory.",
			"There's another flag for rm, which is -f,",
			"which is to force rm to do exactly what we're telling it to do.",
			">> So let's say that, now, I want to get rid of my hello.txt file.",
			"I don't want that one either.",
			"What can I do?",
			"Well, I can rm -f hello.txt.",
			"What do you think is going to happen here?",
			"It's gone.",
			"Didn't even ask me the question.",
			"And in fact, if I list the contents of my directory again, it's gone.",
			"There's no undo here.",
			"hello.txt is gone, and I wasn't even asked if I wanted to delete it.",
			"What if I want to get rid of an entire directory?",
			"",
			"The way you do that is very similar to copy.",
			"If you want to delete a directory, you don't just",
			"want to delete the directory, you want to delete everything inside of it.",
			"And so you use -r, to recursively delete a directory.",
			">> So let's rm -r pset2.",
			"I'm not actually working on pset2, so I can get rid of that directory.",
			"I hit Enter.",
			"Do I want to remove the directory, pset2?",
			"Yes, I do.",
			"And if I list the contents of my directory again, it's gone.",
			"All right?",
			">> One more variation on this theme.",
			"So I'll clear the screen again, to put everything at the top.",
			"Hit ls.",
			"Now, I want to get rid of my pset3 directory,",
			"and I really know I want to get rid of my pset3 directory.",
			"I can recursively and forcibly remove my pset3 directory.",
			">> Now, you're going to be really careful when you're using rm -rf.",
			"As you program more, it'll be something you just do really quickly.",
			"And in fact, I do it all the time.",
			"But it can lead to some disastrous consequences,",
			"if you accidentally delete the wrong thing.",
			"So I want you to be aware that this is an option available to you,",
			"but use it sparingly, and use it with caution.",
			">> I know for a fact I'm not working on my problem set 3 anymore, so I'm",
			"going to get rid of all of those files.",
			"And I know I don't want to be asked every single time if I want to delete",
			"a file, so I'm going to rm -rf pset3.",
			"Didn't even ask me if I wanted to get rid of it.",
			"I hit ls.",
			"pset3 is gone.",
			"So that's all the variations that you can use to get rid of files with rm.",
			">> The last command line command that's going to pretty useful for you",
			"is mv, which is short for move.",
			"Move Is basically equivalent to rename.",
			"It moves a file from one location to another, the source to the destination.",
			"Let's see where using a move might be handy at the terminal window.",
			">> So I'm in my pset1 directory, and I've noticed",
			"something has gone a little wrong.",
			"I was working on my greedy problem, but I accidentally named it greddy.",
			"So when I try and run it through check50, it doesn't really work.",
			"I do have a couple of options.",
			"We could do what we've done before, which is to make a copy of the file.",
			"I could copy greddy.c to greedy.c, right?",
			"Hit Enter.",
			"I see that both files are there.",
			"And then I could rm, to remove, greddy.c.",
			"That gets rid of it.",
			"So that would work, after I confirm that I want to get rid of it.",
			"And I effectively have renamed greddy.c to greedy.c.",
			"I copied it, and then removed the original.",
			">> But that's a multi-step process.",
			"And certainly, there's a better way.",
			"In fact, there is.",
			"So let's hit Control L, just to bring this back up,",
			"and list the contents of my directory again.",
			">> So let's say, oh, I made a mistake.",
			"I actually really did want to call that file greddy.c.",
			"In one fell swoop, I can type move greedy.c to greddy.c.",
			"Hit Enter.",
			"And now, I didn't have to copy and remove it,",
			"I just was able to rename it.",
			"One-stop shopping.",
			">> Now, there are a lot of other basic command line utilities",
			"that you can use with the Linux command line.",
			"And we'll be discussing a lot of them in the future in CS50.",
			"But for now, just getting your feet wet with working with this terminal",
			"environment, these five commands should get you pretty far",
			"in navigating around and working with files in your IDE",
			"or in whatever Linux-based operating system you're using.",
			">> If you're curious and you want to look ahead a little bit at some",
			"of the command line commands we'll be using in the future,",
			"here's a list of a couple of the more common ones.",
			"I'm Doug Lloyd.",
			"This is CS50.",
			""
		],
		"is_youtube": false
	},
	"video_008": {
		"section": "CS50x 2021",
		"subsection": "Week 2",
		"unit": "Lecture",
		"video_sources": [
			"https://edx-video.net/6e4854b7-b6fa-44f6-8b93-161fc9c5f217.m3u8",
			"https://edx-video.net/6e4854b7-b6fa-44f6-8b93-161fc9c5f217-mp4_720p.mp4"
		],
		"video_duration": 8698,
		"speech_period": [
			3.493, 45.927, 2.34, 3.69, 1.27, 2.0, 3.63, 2.4, 2.08, 3.05, 2.07, 2.59,
			4.367, 1.833, 2.4, 1.89, 3.57, 3.0, 3.48, 2.56, 2.48, 4.26, 0.87, 2.91,
			1.68, 3.93, 0.72, 1.35, 3.3, 2.58, 2.13, 3.39, 4.15, 2.97, 3.26, 3.03,
			1.86, 2.13, 2.73, 4.44, 2.31, 1.77, 2.37, 3.78, 3.73, 3.47, 2.16, 2.128,
			2.042, 5.25, 3.4, 3.8, 4.89, 1.54, 2.48, 4.8, 2.77, 2.27, 5.1, 3.99, 3.15,
			2.58, 3.27, 3.34, 2.99, 2.97, 1.74, 4.11, 4.59, 2.4, 3.21, 3.33, 0.78,
			2.23, 3.38, 3.45, 1.59, 2.37, 2.07, 2.288, 1.792, 2.22, 4.08, 2.91, 1.92,
			3.6, 3.3, 2.94, 1.21, 2.0, 1.92, 5.55, 3.0, 1.14, 4.92, 1.35, 2.97, 2.62,
			6.56, 2.25, 3.13, 4.25, 2.13, 2.04, 3.48, 1.68, 2.21, 2.16, 2.88, 3.07,
			1.5, 3.23, 4.59, 2.93, 1.645, 1.125, 1.83, 2.38, 3.32, 4.68, 2.81, 3.25,
			4.29, 3.03, 3.72, 2.46, 4.44, 1.08, 3.135, 1.125, 2.49, 3.69, 3.21, 4.088,
			1.292, 3.74, 6.45, 4.5, 2.88, 5.1, 1.35, 3.75, 4.02, 1.8, 2.85, 2.38,
			5.06, 2.37, 1.68, 5.13, 5.22, 1.53, 2.94, 1.81, 2.0, 2.56, 2.552, 1.458,
			2.07, 3.27, 1.65, 3.24, 1.42, 4.04, 4.019, 2.491, 2.58, 6.12, 1.94, 4.57,
			1.68, 2.37, 2.82, 4.83, 0.91, 3.71, 1.53, 5.43, 4.11, 5.19, 2.31, 1.81,
			3.77, 3.33, 4.44, 4.47, 1.62, 3.69, 3.73, 1.91, 3.78, 2.22, 2.22, 2.28,
			2.94, 3.69, 4.8, 2.88, 2.04, 3.99, 1.44, 2.79, 2.44, 3.68, 1.29, 2.4,
			3.77, 3.16, 2.16, 3.98, 3.03, 2.4, 2.91, 2.64, 3.96, 3.24, 1.45, 2.6,
			1.95, 3.09, 1.5, 3.93, 2.73, 3.092, 2.458, 3.21, 1.95, 3.19, 4.1, 3.0,
			3.06, 3.39, 2.34, 4.14, 1.85, 0.958, 2.022, 2.49, 2.49, 1.62, 3.39, 2.52,
			3.33, 4.8, 3.93, 3.1, 7.46, 4.5, 4.47, 5.89, 1.64, 1.95, 4.05, 4.59, 3.03,
			4.67, 5.14, 3.63, 4.065, 0.625, 4.7, 1.428, 2.792, 1.78, 0.6, 1.725,
			1.583, 3.465, 2.167, 1.68, 4.39, 3.26, 1.83, 1.78, 4.82, 2.91, 3.21, 1.69,
			3.69, 3.86, 2.79, 4.05, 4.47, 2.98, 2.0, 2.79, 2.35, 2.12, 0.827, 2.083,
			2.292, 3.648, 2.97, 1.23, 3.69, 5.525, 2.875, 2.1, 3.27, 3.09, 2.1, 5.08,
			3.95, 4.2, 2.717, 3.083, 3.78, 3.11, 3.6, 3.25, 1.4, 3.81, 1.33, 2.36,
			1.89, 3.375, 2.625, 2.1, 3.87, 1.56, 1.5, 2.67, 2.67, 4.77, 2.37, 1.74,
			3.24, 2.85, 5.1, 1.96, 3.77, 3.989, 2.911, 2.4, 2.79, 3.48, 4.32, 4.17,
			3.0, 4.83, 2.76, 3.558, 2.292, 0.922, 1.958, 1.77, 6.39, 3.84, 2.37, 2.67,
			2.61, 5.43, 4.44, 5.52, 5.07, 3.09, 4.29, 3.84, 2.25, 3.54, 3.84, 1.59,
			2.07, 2.94, 3.15, 3.93, 3.3, 2.91, 4.2, 4.343, 0.667, 1.98, 2.19, 3.87,
			2.94, 4.86, 3.39, 2.07, 2.43, 3.09, 1.9, 2.75, 0.97, 3.8, 3.66, 3.07,
			1.22, 2.365, 1.625, 1.02, 1.583, 2.717, 2.51, 3.98, 4.69, 1.2, 4.25, 1.0,
			3.42, 2.91, 4.44, 4.46, 3.07, 3.21, 2.16, 3.75, 2.76, 2.88, 2.76, 2.22,
			1.02, 2.79, 5.16, 4.427, 1.833, 2.35, 5.07, 3.91, 0.5, 1.11, 1.708, 2.732,
			3.45, 0.97, 2.72, 3.75, 2.333, 2.167, 2.34, 4.23, 1.71, 2.22, 2.31, 3.27,
			3.37, 2.337, 2.333, 1.425, 2.083, 2.492, 3.6, 3.0, 3.15, 1.77, 3.51, 3.93,
			4.23, 3.03, 4.59, 1.2, 3.33, 2.4, 2.13, 2.58, 2.605, 3.125, 1.38, 1.72,
			3.93, 4.08, 2.84, 2.13, 2.76, 4.05, 3.34, 2.54, 4.53, 2.16, 1.92, 2.46,
			3.93, 3.03, 3.72, 3.63, 1.8, 1.59, 1.5, 4.44, 3.0, 2.13, 2.94, 4.27, 2.75,
			1.9, 3.26, 4.115, 2.375, 2.1, 2.64, 3.15, 2.07, 2.55, 3.03, 1.71, 2.37,
			2.43, 3.67, 1.22, 2.873, 1.417, 4.05, 2.138, 1.792, 1.75, 3.8, 2.55, 3.12,
			3.75, 1.77, 1.02, 2.46, 4.84, 3.92, 2.06, 3.19, 3.62, 4.66, 2.58, 3.15,
			1.74, 1.56, 2.73, 1.59, 2.85, 2.76, 2.83, 2.81, 2.31, 1.422, 2.208, 1.42,
			2.01, 2.042, 2.236, 2.792, 2.7, 1.71, 5.19, 0.898, 2.042, 3.643, 0.917,
			3.96, 4.145, 1.375, 3.44, 1.6, 4.53, 2.07, 1.51, 3.53, 1.59, 4.17, 1.38,
			5.477, 1.333, 2.49, 2.25, 1.03, 1.58, 4.74, 2.64, 3.01, 1.56, 2.78, 3.9,
			3.33, 2.55, 2.7, 1.86, 4.05, 5.49, 2.79, 2.25, 2.16, 2.46, 1.77, 2.88,
			1.63, 2.3, 2.71, 4.05, 3.23, 3.0, 1.41, 4.35, 6.06, 2.55, 4.59, 3.51,
			1.04, 2.44, 1.41, 3.06, 1.81, 3.59, 2.61, 2.94, 3.88, 1.22, 3.522, 2.958,
			4.36, 3.48, 1.7, 1.92, 2.263, 1.667, 1.5, 2.25, 3.36, 3.24, 3.57, 4.86,
			2.942, 1.708, 3.78, 5.61, 2.73, 3.42, 0.6, 1.09, 4.46, 1.35, 2.52, 4.35,
			2.97, 3.18, 2.94, 5.08, 3.35, 4.26, 4.32, 3.51, 4.56, 3.01, 1.25, 2.58,
			4.26, 4.23, 2.79, 3.09, 2.52, 2.55, 1.11, 3.15, 4.8, 3.66, 0.91, 4.13,
			4.02, 5.97, 1.53, 3.72, 2.37, 2.16, 2.22, 4.42, 5.06, 4.35, 2.52, 2.01,
			2.875, 1.625, 1.83, 1.86, 0.96, 1.68, 2.64, 1.24, 1.88, 3.78, 1.9, 2.78,
			3.51, 3.6, 1.36, 2.0, 1.44, 2.625, 1.825, 2.48, 2.85, 1.4, 3.25, 1.2,
			1.92, 4.2, 4.29, 1.11, 2.76, 0.75, 3.93, 3.6, 1.11, 2.969, 5.281, 0.54,
			3.927, 2.042, 2.29, 4.221, 3.509, 3.661, 2.49, 2.76, 2.76, 2.309, 2.221,
			5.04, 1.66, 3.53, 1.44, 3.33, 0.78, 5.43, 0.647, 1.333, 1.53, 2.31, 1.96,
			3.95, 2.37, 2.28, 2.05, 2.97, 1.363, 2.167, 3.48, 2.76, 5.58, 1.948,
			1.292, 2.05, 2.45, 2.94, 2.52, 4.59, 1.17, 0.75, 4.11, 3.06, 6.12, 0.84,
			2.5, 2.51, 4.41, 0.73, 2.33, 4.8, 4.47, 1.53, 1.92, 5.19, 4.235, 2.875,
			1.792, 2.476, 1.792, 1.92, 4.92, 2.463, 1.417, 1.75, 3.82, 1.72, 0.97,
			5.03, 1.815, 3.605, 0.97, 2.4, 2.395, 2.125, 1.66, 2.75, 2.46, 3.18, 1.89,
			3.03, 2.31, 3.18, 1.14, 2.37, 3.72, 1.95, 3.81, 2.55, 1.76, 2.5, 1.29,
			2.91, 1.89, 4.56, 1.47, 1.65, 2.35, 2.66, 1.92, 2.1, 4.41, 3.03, 2.88,
			3.51, 1.835, 2.875, 3.51, 3.09, 2.935, 2.375, 2.58, 1.292, 2.098, 2.82,
			2.29, 2.75, 4.83, 0.9, 4.32, 4.32, 2.58, 2.22, 4.47, 2.91, 2.01, 3.99,
			1.02, 2.28, 2.28, 3.99, 3.81, 1.83, 3.062, 1.708, 2.07, 6.26, 2.73, 2.61,
			2.46, 3.22, 3.775, 0.875, 2.99, 2.04, 3.45, 3.66, 3.15, 3.3, 2.43, 5.07,
			3.93, 2.62, 2.5, 2.11, 2.01, 3.15, 3.16, 0.5, 1.915, 3.125, 0.84, 2.82,
			2.34, 1.8, 3.48, 3.09, 1.89, 2.5, 1.82, 3.54, 0.602, 2.458, 1.68, 2.79,
			1.56, 3.75, 3.45, 3.42, 4.17, 3.75, 4.56, 5.44, 2.33, 3.81, 1.23, 4.11,
			4.68, 1.83, 1.92, 3.93, 3.33, 1.5, 4.14, 1.98, 2.82, 3.36, 4.11, 0.6, 4.2,
			5.02, 3.0, 2.61, 2.09, 1.86, 2.91, 2.22, 4.2, 1.95, 3.12, 4.08, 2.43, 2.1,
			2.22, 4.5, 3.93, 1.95, 1.75, 1.37, 4.03, 4.25, 1.11, 2.07, 3.33, 1.74,
			2.55, 2.85, 3.24, 1.56, 1.68, 3.15, 5.43, 3.01, 3.92, 6.36, 3.68, 5.01,
			4.14, 1.56, 2.31, 3.12, 0.905, 0.875, 1.833, 2.042, 2.035, 2.39, 1.92,
			3.21, 3.99, 3.3, 2.865, 1.125, 1.0, 1.34, 2.4, 3.21, 1.23, 2.64, 3.36,
			1.09, 6.41, 3.21, 2.12, 2.61, 1.26, 3.48, 1.645, 0.875, 3.42, 2.22, 3.468,
			2.292, 3.45, 1.05, 2.85, 0.52, 1.833, 1.347, 2.63, 2.43, 1.56, 2.833,
			2.817, 1.64, 2.25, 5.19, 1.0, 3.845, 2.375, 1.042, 2.418, 1.8, 4.14, 5.85,
			4.17, 1.14, 2.93, 2.5, 1.977, 1.833, 3.24, 3.11, 1.0, 1.898, 3.292, 2.28,
			2.43, 3.42, 1.71, 4.2, 0.99, 3.45, 3.75, 2.52, 3.27, 2.31, 4.5, 1.288,
			2.042, 2.53, 3.32, 1.71, 3.6, 3.18, 2.82, 2.2, 1.875, 3.875, 3.03, 4.35,
			1.71, 2.07, 2.64, 1.35, 3.21, 2.19, 1.56, 2.16, 4.32, 5.31, 3.87, 2.07,
			1.44, 1.92, 1.83, 2.97, 0.88, 1.97, 1.74, 2.88, 2.16, 1.98, 4.17, 2.94,
			3.13, 3.36, 1.67, 2.58, 5.49, 3.48, 3.12, 4.0, 3.11, 3.81, 1.77, 4.11,
			3.24, 2.2, 3.47, 2.34, 4.74, 1.15, 2.28, 1.763, 1.917, 2.61, 1.5, 2.59,
			2.82, 3.63, 1.38, 1.71, 1.95, 1.625, 2.665, 1.62, 2.91, 3.47, 1.0, 3.09,
			3.51, 3.58, 3.325, 1.375, 2.16, 1.63, 3.26, 2.07, 3.06, 3.6, 3.3, 4.35,
			3.36, 1.71, 1.02, 1.65, 3.67, 2.0, 1.8, 2.34, 4.77, 2.88, 2.67, 1.86,
			4.47, 2.7, 3.78, 2.19, 3.06, 3.34, 3.74, 3.24, 3.48, 1.86, 2.85, 2.76,
			3.42, 1.98, 3.72, 3.72, 2.31, 1.56, 1.8, 4.45, 2.978, 1.542, 3.36, 2.31,
			1.8, 3.43, 2.3, 3.3, 1.787, 2.083, 1.27, 2.51, 2.73, 3.55, 3.74, 3.81,
			4.14, 2.61, 4.44, 0.72, 0.875, 2.305, 3.27, 3.72, 0.84, 2.94, 2.64, 3.09,
			3.69, 2.14, 3.36, 0.86, 1.89, 2.58, 1.93, 2.042, 4.188, 2.49, 1.83, 4.5,
			4.62, 3.57, 3.69, 3.27, 1.45, 1.5, 3.86, 2.88, 5.663, 2.917, 4.38, 5.28,
			2.783, 2.417, 2.63, 2.43, 2.062, 1.958, 4.92, 4.65, 3.33, 4.23, 3.4, 3.38,
			0.9, 4.2, 3.67, 2.15, 2.19, 2.94, 3.45, 1.39, 1.655, 1.875, 2.7, 1.44,
			3.75, 2.08, 4.04, 1.39, 2.18, 3.54, 2.16, 4.35, 2.97, 4.44, 1.71, 5.79,
			2.34, 4.11, 3.87, 2.167, 0.833, 3.06, 3.12, 3.15, 5.13, 2.742, 0.708,
			1.292, 3.088, 4.2, 1.95, 3.898, 1.542, 3.98, 4.013, 2.167, 2.25, 2.34,
			1.44, 7.35, 2.94, 4.23, 1.78, 3.71, 3.03, 1.62, 2.43, 2.375, 2.485, 2.74,
			1.55, 3.13, 1.59, 2.87, 4.83, 2.55, 3.93, 4.65, 3.18, 4.72, 2.6, 2.7,
			4.62, 3.06, 2.85, 2.94, 2.73, 3.72, 3.81, 1.502, 2.458, 1.05, 2.91, 2.46,
			2.76, 2.61, 3.12, 6.72, 4.47, 3.09, 3.24, 2.43, 2.1, 3.39, 4.768, 2.042,
			2.94, 3.6, 5.52, 1.895, 2.125, 5.308, 1.292, 3.84, 3.45, 1.11, 3.57,
			1.455, 1.875, 2.89, 2.8, 1.0, 2.833, 3.137, 2.13, 4.41, 1.86, 2.77, 2.04,
			2.88, 3.06, 1.51, 3.115, 2.125, 1.66, 3.56, 2.502, 1.708, 3.2, 4.377,
			1.083, 1.56, 3.06, 2.34, 1.56, 2.34, 1.35, 1.62, 3.51, 1.72, 2.6, 2.31,
			2.31, 2.89, 2.78, 2.88, 3.3, 5.97, 3.84, 4.15, 3.165, 2.375, 2.92, 3.23,
			2.61, 4.02, 3.51, 3.78, 1.89, 3.03, 3.18, 4.2, 4.05, 2.34, 2.94, 3.57,
			4.35, 3.97, 1.79, 4.3, 2.09, 2.7, 3.21, 3.81, 3.12, 2.22, 3.57, 2.58,
			3.48, 3.18, 2.37, 3.48, 4.05, 2.88, 2.7, 1.5, 3.96, 5.152, 1.958, 4.03,
			2.82, 5.24, 1.47, 2.46, 3.87, 2.01, 1.59, 6.03, 4.5, 3.03, 3.96, 1.87,
			3.38, 1.95, 2.7, 4.32, 2.52, 1.872, 2.208, 4.14, 2.07, 1.77, 2.59, 2.69,
			5.25, 3.12, 1.71, 1.033, 0.917, 3.15, 1.92, 2.07, 2.55, 2.14, 1.61, 2.91,
			4.022, 1.708, 2.48, 3.0, 3.44, 1.01, 4.76, 1.469, 2.491, 3.27, 2.58, 1.8,
			1.109, 1.17, 1.917, 2.703, 3.121, 6.24, 3.57, 2.73, 2.43, 1.81, 6.09,
			3.719, 2.951, 0.93, 0.5, 1.71, 3.72, 3.689, 2.25, 3.626, 6.825, 4.518,
			1.292, 2.279, 3.0, 1.861, 2.172, 2.208, 1.69, 0.89, 3.36, 5.04, 1.23, 1.5,
			2.52, 2.4, 2.41, 3.83, 1.98, 2.04, 2.62, 4.58, 2.16, 3.15, 2.94, 1.63,
			2.19, 4.19, 3.45, 2.97, 1.83, 6.19, 3.14, 3.48, 1.98, 3.0, 5.22, 2.32,
			2.19, 2.688, 1.542, 3.23, 3.15, 4.47, 1.2, 3.78, 3.6, 3.51, 4.98, 3.16,
			4.28, 1.77, 2.5, 2.15, 1.583, 2.857, 2.643, 1.917, 2.83, 4.43, 1.5, 2.79,
			3.39, 2.86, 3.5, 2.94, 4.29, 5.13, 3.872, 0.708, 1.01, 2.99, 1.81, 3.71,
			1.87, 2.75, 1.62, 3.54, 3.15, 2.61, 7.38, 3.66, 2.58, 4.11, 0.75, 2.23,
			2.06, 1.5, 2.385, 1.875, 2.048, 2.542, 2.73, 1.5, 4.38, 0.87, 5.07, 4.29,
			2.59, 1.85, 6.73, 3.71, 7.17, 2.34, 6.73, 3.11, 3.93, 3.96, 6.463, 0.917,
			3.3, 3.15, 1.0, 4.34, 2.64, 3.0, 3.21, 3.42, 2.91, 3.43, 2.96, 2.73, 1.54,
			3.41, 2.07, 5.25, 2.52, 4.62, 2.28, 1.08, 3.3, 3.9, 2.49, 4.16, 3.36,
			1.89, 3.51, 1.21, 1.31, 4.17, 3.48, 5.04, 2.97, 4.44, 1.02, 1.41, 1.29,
			3.06, 3.435, 1.875, 1.465, 0.875, 2.1, 2.31, 4.05, 2.79, 1.32, 1.92, 3.21,
			2.74, 4.22, 1.252, 1.958, 2.37, 0.96, 0.81, 2.76, 3.72, 2.1, 3.21, 3.69,
			1.8, 2.07, 5.1, 2.64, 2.53, 3.08, 3.832, 2.208, 3.33, 3.27, 1.77, 3.54,
			2.61, 0.87, 3.27, 1.23, 0.93, 1.74, 2.37, 3.15, 2.88, 3.51, 3.24, 4.14,
			2.01, 1.652, 1.708, 5.19, 6.31, 2.97, 4.83, 2.22, 1.08, 1.05, 1.42, 3.5,
			4.98, 3.79, 2.36, 2.52, 1.41, 7.65, 3.6, 6.09, 5.13, 3.52, 4.423, 1.417,
			0.87, 0.93, 2.41, 3.87, 3.59, 6.96, 1.65, 3.63, 2.52, 2.91, 2.28, 2.64,
			3.42, 5.34, 4.89, 4.23, 4.02, 2.43, 4.27, 3.69, 2.57, 3.03, 2.61, 3.12,
			3.27, 5.86, 2.78, 3.398, 2.542, 2.04, 2.205, 1.375, 2.49, 3.39, 2.66, 3.0,
			2.55, 0.84, 3.06, 2.55, 2.91, 3.39, 3.12, 3.18, 3.66, 5.46, 3.63, 4.02,
			2.64, 4.71, 0.602, 2.458, 2.967, 1.833, 1.98, 3.12, 5.64, 2.55, 1.44,
			3.18, 2.73, 3.585, 2.625, 2.88, 4.41, 3.66, 4.17, 2.85, 3.0, 3.72, 2.23,
			5.04, 2.48, 4.35, 3.7, 2.36, 5.67, 3.6, 4.56, 3.07, 1.58, 3.15, 4.41, 2.1,
			1.44, 1.56, 1.71, 5.4, 4.087, 0.833, 0.96, 3.96, 3.3, 5.19, 2.77, 6.12,
			2.46, 2.13, 2.39, 1.98, 2.1, 4.41, 2.16, 4.14, 4.59, 4.29, 3.15, 3.39,
			3.78, 3.05, 2.05, 5.55, 3.96, 2.1, 4.033, 0.917, 1.99, 1.402, 2.458,
			1.522, 1.958, 2.82, 5.1, 6.12, 4.87, 1.55, 2.1, 5.17, 2.43, 1.47, 2.57,
			4.38, 5.07, 1.74, 3.45, 2.46, 1.89, 2.56, 2.75, 2.23, 3.02, 6.24, 6.27,
			4.77, 2.73, 1.403, 1.417, 2.04, 1.05, 1.678, 2.042, 1.375, 1.535, 1.56,
			3.3, 4.33, 3.8, 4.11, 3.12, 5.19, 0.96, 4.052, 1.708, 1.333, 3.218, 2.169,
			3.22, 3.05, 2.01, 1.14, 2.44, 1.313, 2.667, 1.917, 4.803, 3.93, 2.64,
			3.24, 2.31, 2.25, 3.13, 2.57, 3.93, 1.41, 2.4, 3.54, 2.37, 0.54, 1.11,
			1.515, 4.245, 2.13, 1.5, 3.57, 1.89, 3.3, 4.29, 3.87, 4.51, 2.34, 4.13,
			2.34, 1.89, 2.58, 4.56, 4.77, 4.35, 0.57, 3.49, 3.94, 4.17, 1.5, 4.87,
			3.99, 2.42, 0.51, 1.62, 3.578, 1.792, 2.935, 0.875, 2.19, 1.17, 3.75, 1.8,
			4.05, 0.93, 3.69, 3.15, 2.64, 4.03, 6.33, 2.9, 1.23, 1.568, 1.792, 2.94,
			0.96, 3.15, 3.66, 4.23, 1.56, 5.01, 1.26, 3.75, 4.74, 3.81, 5.16, 2.58,
			1.38, 5.53, 5.42, 4.23, 4.38, 2.61, 3.64, 6.2, 2.79, 3.12, 3.863, 2.917,
			2.4, 2.52, 3.84, 3.16, 5.96, 1.47, 4.59, 6.18, 1.71, 1.89, 3.48, 4.09,
			3.02, 4.02, 1.99, 3.08, 2.79, 1.65, 3.18, 0.66, 4.14, 3.42, 3.21, 2.107,
			2.333, 2.7, 1.39, 1.75, 1.51, 5.76, 6.18, 2.73, 5.79, 4.08, 3.84, 1.505,
			1.375, 4.2, 5.22, 5.1, 1.48, 1.58, 2.49, 2.7, 3.135, 1.285, 3.95, 0.6,
			2.64, 6.15, 4.75, 3.6, 6.78, 1.35, 0.75, 1.375, 3.545, 3.21, 3.24, 1.9,
			5.18, 2.16, 6.42, 4.26, 2.64, 3.54, 3.54, 3.18, 2.97, 2.73, 1.78, 2.07,
			1.55, 2.04, 3.952, 2.958, 3.23, 2.08, 3.14, 3.63, 4.26, 8.07, 1.62, 2.97,
			4.028, 1.792, 1.958, 2.122, 3.33, 3.09, 4.95, 4.02, 2.012, 1.708, 1.6,
			3.23, 1.777, 2.333, 2.1, 1.29, 0.88, 2.25, 2.42, 2.252, 1.708, 4.17, 3.36,
			4.32, 4.89, 1.95, 2.22, 2.76, 5.19, 4.92, 3.51, 2.16, 3.66, 3.69, 2.67,
			2.94, 3.75, 3.24, 2.4, 3.78, 2.25, 3.45, 6.21, 3.91, 1.23, 4.19, 3.14,
			4.21, 2.655, 2.45, 2.125, 2.97, 2.94, 4.05, 2.46, 5.52, 2.542, 2.448,
			2.75, 2.078, 2.542, 3.822, 1.708, 1.75, 1.57, 2.54, 4.95, 2.88, 3.09,
			3.18, 1.29, 2.46, 5.19, 2.58, 2.68, 1.55, 4.77, 4.41, 2.14, 1.34, 5.19,
			3.12, 3.18, 3.15, 1.447, 3.083, 3.24, 2.31, 3.87, 2.4, 1.98, 2.28, 3.84,
			4.11, 1.86, 3.3, 2.01, 2.52, 4.59, 4.59, 3.57, 6.42, 1.89, 0.99, 2.58,
			2.55, 1.77, 4.14, 2.68, 3.11, 3.93, 2.64, 1.65, 2.61, 4.62, 2.88, 4.05,
			2.64, 2.65, 5.45, 1.123, 0.917, 1.27, 2.33, 2.94, 2.255, 1.0, 2.0, 2.635,
			5.64, 3.69, 2.46, 1.98, 2.59, 3.47, 6.13, 1.596, 4.344, 1.685, 2.125,
			3.09, 2.04, 3.66, 1.3, 2.54, 3.88, 4.43, 4.05, 3.78, 2.7, 1.24, 3.17,
			3.922, 1.958, 3.253, 1.667, 1.333, 3.287, 2.19, 1.23, 0.72, 1.68, 0.84,
			4.06, 2.0, 2.667, 1.833, 2.25, 3.39, 2.34, 3.6, 1.11, 2.44, 3.657, 2.083,
			0.95, 5.78, 2.25, 3.22, 3.35, 3.51, 3.69, 3.22, 2.53, 2.5, 3.69, 1.71,
			2.76, 5.4, 2.62, 2.06, 2.58, 1.92, 2.04, 3.63, 2.37, 4.35, 4.71, 5.91,
			1.65, 3.54, 2.97, 3.15, 3.0, 1.48, 2.24, 2.49, 3.645, 2.625, 2.052, 2.958,
			3.06, 1.017, 1.833, 2.4, 2.43, 3.99, 4.23, 3.51, 2.37, 2.19, 3.72, 2.22,
			2.55, 3.12, 3.45, 2.19, 3.57, 2.62, 4.73, 2.76, 4.56, 4.38, 5.79, 1.26,
			4.41, 2.1, 3.67, 2.72, 1.41, 1.02, 2.76, 1.68, 5.91, 3.03, 5.36, 1.0,
			1.38, 1.59, 2.28, 2.49, 4.26, 0.84, 2.16, 4.35, 0.94, 2.21, 3.75, 2.85,
			2.67, 1.68, 3.37, 3.15, 2.93, 2.41, 4.58, 3.76, 3.86, 3.6, 4.59, 2.85,
			4.77, 3.37, 3.83, 4.26, 3.18, 3.31, 8.698, 2.542, 3.15, 5.88, 4.2, 3.4,
			3.78, 2.803, 2.167, 1.53, 2.28, 2.88, 1.42, 2.84, 3.67, 3.11, 1.83, 2.68,
			3.61, 2.75, 2.34, 2.58, 2.94, 4.44, 3.36, 3.42, 2.07, 2.02, 5.54, 1.35,
			2.25, 3.06, 2.513, 1.417, 2.343, 1.167, 3.63, 3.51, 2.1, 2.18, 3.28, 1.74,
			6.39, 8.04, 4.56, 3.48, 3.57, 2.64, 1.5, 5.79, 5.02, 0.5, 2.102, 3.208,
			1.23, 1.083, 2.937, 3.15, 1.052, 1.708, 3.57, 3.06, 0.9, 3.09, 4.51, 2.78,
			3.39, 1.9, 2.66, 4.83, 5.82, 3.43, 5.42, 3.81, 4.59, 3.54, 3.78, 2.952,
			1.458, 1.59, 2.76, 2.65, 1.34, 1.65, 2.25, 2.55, 2.04, 3.03, 2.31, 2.1,
			2.43, 2.535, 7.365, 3.99, 3.223, 0.917, 2.83, 3.23, 3.21, 3.06, 2.312,
			1.708, 1.83, 1.958, 2.452, 3.872, 1.708, 3.24, 3.91, 2.48, 4.32, 1.91,
			1.0, 2.04, 3.09, 2.97, 3.06, 0.75, 1.65, 3.72, 2.7, 1.06, 2.82, 3.54,
			1.54, 2.51, 3.33, 2.07, 3.402, 1.458, 3.03, 3.54, 1.92, 4.08, 1.77, 4.51,
			4.22, 1.38, 3.34, 5.99, 2.58, 2.67, 1.54, 2.84, 2.67, 3.39, 6.45, 3.99,
			2.88, 1.41, 2.14, 2.36, 3.9, 1.098, 1.542, 3.57, 4.44, 2.91, 5.15, 1.95,
			3.41, 0.93, 1.01, 0.88, 1.375, 1.325, 0.96, 2.057, 0.583, 2.67, 5.04,
			5.248, 1.792, 0.708, 3.892, 6.42, 3.0, 4.62, 1.89, 4.8, 1.71, 1.59, 3.93,
			1.8, 3.69, 2.28, 2.07, 3.0, 1.95, 3.39, 2.062, 1.208, 3.16, 4.09, 1.75,
			2.46, 1.48, 2.99, 1.89, 2.94, 3.15, 2.055, 1.875, 3.033, 1.917, 3.39,
			5.08, 4.11, 3.92, 2.4, 4.44, 2.64, 2.94, 2.5, 5.18, 6.33, 1.66, 2.66,
			2.73, 5.94, 2.97, 2.01, 4.05, 3.12, 1.74, 3.0, 2.79, 5.13, 2.85, 4.53,
			3.51, 2.13, 2.73, 2.58, 2.52, 1.65, 2.61, 5.4, 3.94, 4.55, 3.88, 1.07,
			2.583, 3.417, 2.79, 4.35, 3.21, 3.91, 3.38, 1.86, 2.61, 2.1, 5.04, 4.47,
			2.77, 3.62, 0.63, 2.623, 3.167, 4.33, 3.77, 3.54, 7.03, 2.03, 4.32, 1.42,
			2.06, 2.43, 3.63, 3.0, 2.32, 3.15, 4.57, 0.5, 0.97, 5.33, 2.58, 1.71,
			2.43, 0.57, 3.84, 2.43, 5.32, 0.5, 2.97, 4.21, 1.49, 5.79, 3.63, 4.29,
			3.838, 2.417, 4.005, 2.52, 2.73, 4.23, 3.24, 4.45, 4.22, 3.6, 3.63, 1.98,
			3.57, 4.92, 4.77, 2.16, 2.88, 5.79, 4.17, 1.32, 1.17, 4.89, 0.6, 0.583,
			1.49, 1.167, 4.08, 4.29, 2.65, 4.53, 2.97, 3.16, 1.23, 5.15, 1.59, 2.4,
			5.79, 6.48, 3.87, 4.66, 3.2, 2.77, 2.51, 1.625, 2.035, 5.26, 5.76, 1.29,
			4.68, 4.78, 2.93, 3.412, 2.208, 3.2, 4.21, 4.55, 4.05, 3.03, 2.49, 2.79,
			2.91, 3.87, 3.66, 1.68, 1.47, 3.57, 3.37, 1.63, 2.3, 3.75, 1.71, 2.62,
			2.45, 3.36, 4.58, 2.25, 6.21, 3.54, 2.58, 0.63, 3.33, 2.97, 3.9, 4.06,
			2.027, 1.833, 4.56, 2.01, 3.0, 1.83, 5.67, 1.45, 4.625, 1.665, 4.69, 3.23,
			3.36, 1.35, 3.78, 3.0, 5.61, 2.17, 4.55, 2.6, 1.75, 2.54, 3.38, 1.94,
			3.75, 1.44, 2.74, 3.32, 1.98, 1.98, 3.21, 2.55, 4.26, 2.76, 3.55, 1.79,
			3.93, 3.09, 3.69, 3.64, 3.53, 2.07, 3.03, 2.01, 4.53, 3.45, 1.86, 4.14,
			2.37, 2.41, 3.18, 2.075, 2.625, 1.41, 2.49, 2.94, 3.42, 3.45, 2.55, 3.99,
			4.86, 4.29, 1.86, 2.52, 2.73, 6.69, 2.97, 3.45, 1.44, 2.22, 3.24, 7.05,
			3.63, 3.36, 4.11, 4.65, 2.36, 1.75, 3.81, 3.12, 2.52, 3.21, 3.42, 3.09,
			1.83, 3.34, 3.26, 1.23, 3.03, 2.22, 3.547, 2.333, 3.69, 3.06, 3.46, 3.98,
			2.888, 1.792, 2.25, 3.042, 1.008, 4.65, 0.87, 2.58, 3.24, 5.79, 3.968,
			1.292, 0.86, 2.34, 2.58, 3.083, 2.077, 1.9, 2.21, 3.27, 3.03, 2.85, 3.0,
			4.71, 2.76, 2.88, 1.46, 3.34, 4.86, 2.369, 4.08, 4.871, 2.75, 4.5, 3.84,
			3.629, 1.981, 4.29, 2.129, 2.191, 0.87, 0.875, 2.645, 2.929, 2.007, 1.833,
			1.417, 4.044, 3.907, 1.792, 4.051, 4.81, 3.2, 1.252, 1.958, 2.309, 1.533,
			3.208, 1.875, 2.745, 2.43, 3.119, 3.281, 2.479, 2.851, 1.62, 3.15, 4.17,
			1.6, 2.66, 2.34, 2.47, 3.53, 1.63, 1.76, 3.123, 1.167, 4.679, 2.221, 2.58,
			9.15, 3.48, 1.84, 5.51, 3.54, 4.05, 3.57, 2.399, 2.089, 2.292, 2.519,
			6.721, 4.98, 4.83, 3.1, 1.97, 3.18, 2.64, 2.43, 2.46, 3.507, 1.833, 3.3,
			2.19, 4.29, 1.41, 3.45, 0.9, 3.36, 2.583, 1.417, 2.96, 1.59, 3.45, 5.16,
			3.01, 4.05, 2.48, 3.45, 3.623, 0.667, 2.61, 2.91, 3.58, 2.51, 4.11, 2.7,
			2.322, 0.958, 0.81, 0.455, 1.365, 0.91, 1.368, 2.292, 0.876, 0.669, 2.625,
			2.18, 5.98, 3.72, 2.58, 4.17, 2.58, 2.28, 1.95, 1.83, 4.71, 1.86, 0.24,
			2.417, 2.893, 1.74, 1.22, 2.964, 1.976, 3.99, 2.085, 9.435, 2.61, 2.067,
			2.445, 0.978, 1.956, 0.978, 2.936, 4.08, 1.26, 2.133, 0.667, 1.79, 1.38,
			1.23, 1.89, 1.9, 1.93, 1.01, 2.466, 0.5, 0.5, 1.89, 3.346, 1.848, 1.07,
			3.63, 1.964, 2.37, 5.806, 0.93, 3.88, 1.24, 3.14, 1.427, 0.583, 2.13,
			2.28, 3.35, 57.34
		],
		"transcript_en": [
			"[MUSIC PLAYING]",
			"",
			"DAVID MALAN: All right, so this is CS50.",
			"And this is week 2, wherein we're going to dive in a little more deeply",
			"to see this new language.",
			"And we're also going to take a look back at some",
			"of the concepts we looked at last week so that you can better understand some",
			"of the features of C and some of the steps",
			"you've been taking to make your code work.",
			"So we'll peel back some of the layers of abstraction from last week",
			"so that you better understand really what's going",
			"on underneath the hood of the computer.",
			"So, of course, last week, we began with perhaps the most canonical of programs",
			"in C, the most canonical of programs you can",
			"write pretty much in any language, which is that which",
			"says, quite simply, \"hello, world.\"",
			"But recall that before actually running this program,",
			"we have to convert it into the language that computers themselves speak,",
			"which we defined last week as binary, 0's and 1's, otherwise known",
			"as machine language in this context.",
			"So we have to go somehow from this source code to something",
			"more like this machine code, the 0's and 1's that the computer actually",
			"understands.",
			"Now, you may recall too that we introduced a command for this.",
			"And that command was called make.",
			"And literally via this command, \"make hello,\" could we make a program",
			"called hello.",
			"And make was a little fancy.",
			"It assumed that if you want to make a program called hello,",
			"it would look for a file called hello.c.",
			"That just happens automatically for you.",
			"And the end result, of course, was an additional file called hello",
			"that would end up getting put into your current directory.",
			"So you could then do ./hello and be on your way.",
			"But it turns out that make is actually automating",
			"a more specific set of steps for us that we'll",
			"see a little more closely now instead.",
			"So on the screen here is exactly the same code",
			"that we wrote last week to say, quite simply, \"hello, world.\"",
			"And recall that any time you run \"make hello\" or \"make mario\"",
			"or \"make cash\" or \"make credit,\" any of the problems",
			"that you might have tackled more recently,",
			"you see some cryptic output on the screen.",
			"Hopefully, no red or yellow error messages, but even when all is well,",
			"you see this white text which is indicative of all having been well.",
			"And last week, we just kind of ignored this and moved on and immediately did",
			"something like ./hello.",
			"But today, let's actually better understand",
			"what it is that we've been turning a blind eye to",
			"so that each week, as it passes, there's less and less that you don't understand",
			"the entirety of with respect to what's going on your screen.",
			"So again, if I do ls here, we'll see not only hello.c, but also",
			"the executable program called hello that I actually created via make.",
			"But look at this output.",
			"There's some mention of something called Clang here.",
			"And then there's a lot of other words or cryptic phrases, something in computer",
			"speak here that has all of these hyphens in front of them.",
			"And it turns out that what make is doing for us",
			"is it's automating execution of a command more specifically called clang.",
			"Clang is actually the compiler that we alluded to last week, a compiler",
			"being a program that converts source code to machine code.",
			"We've actually been using Clang this whole time.",
			"But notice that Clang requires a bit more sophistication.",
			"You have to understand a bit more about what's going on in order to use it.",
			"So let me go ahead and remove the program called hello.",
			"I'm going to use the rm command that we saw briefly last time.",
			"I'm going to confirm by hitting y.",
			"And if I type ls again now, hello.c is the only file that remains.",
			"Well, temporarily, let me take away the ability to use make.",
			"And let's now use Clang directly.",
			"Clang is another program installed in CS50 IDE.",
			"It's a very popular compiler that you can download onto your own Macs and PCs",
			"as well.",
			"But to run it is a little different.",
			"I'm going to go ahead and say clang and then the name of the file",
			"that I want to compile, hello.c being this one.",
			"I'm going to go ahead and hit Enter.",
			"And now nothing happens, seemingly.",
			"But frankly, as you've probably gleaned already,",
			"when nothing bad seems to happen, that implicitly",
			"tends to mean that something good happened.",
			"Your program compiled successfully.",
			"But curiously, if I type ls now, you don't see the program, hello.",
			"You see this weird file name called a.out.",
			"And this is actually a historical remnant.",
			"Years ago, when humans would use a compiler to compile their code,",
			"the default file name that every program was given",
			"was a.out for assembly output.",
			"More on that in a moment.",
			"But this is kind of a stupid name for a program.",
			"It's not at all descriptive of what it does.",
			"So it turns out that programs like Clang can be configured at the command line.",
			"The command line, again, refers to the blinking prompt where you can",
			"type commands.",
			"So indeed, I'm going to go ahead and remove this file now-- rm space a.out,",
			"and then confirm with y.",
			"And now I'm back to where I began with just hello.c.",
			"And let me go ahead now and do something a little different.",
			"I'm going to do \"clang -o hello\" and then the word \"hello.c.\"",
			"And what I'm doing here is actually providing",
			"what we're going to start calling a command-line argument.",
			"So these commands, like make and rm, sometimes",
			"can just be run all by themselves.",
			"You just type a single word and hit Enter.",
			"But very often, we've seen that they take inputs in some sense.",
			"You type, \"make hello.\"",
			"You type, \"rm hello.\"",
			"And the second word, \"hello,\" in those cases,",
			"is kind of an input to the command, otherwise",
			"now known as a command-line argument.",
			"It's an input to the command.",
			"So here, we have more command-line arguments.",
			"We've got the word \"clang,\" which is the compiler we're about to run, \"-o,\"",
			"which it turns out is shorthand notation for \"output,\"",
			"so please output the following.",
			"What do you want to output?",
			"Well, the next word is \"hello.\"",
			"And then the final word is \"hello.c.\"",
			"So long story short, this command now more verbose",
			"though it is, is saying, run Clang, output a file called hello,",
			"and take as input file called hello.c.",
			"So when I run this command after hitting Enter, nothing again seems to happen.",
			"But if I type ls, I don't see that stupid default file name of a.out.",
			"Now I see the file name, hello.",
			"So this is how ultimately Clang is helping me compile my code.",
			"It's kind of automating all of those processes.",
			"But recall that that's not the only type of program we ran last week",
			"or wrote last week.",
			"We rather took code like this and began to enhance it",
			"with some additional lines.",
			"So version 2 of Hello, World actually involved",
			"prompting the user for input using CS50's get_string function,",
			"storing the output in a variable called name.",
			"But recall that we also had to add cs50.h at the top of the file.",
			"So let me go ahead and do that.",
			"Let me go ahead and remove hello because that's now the old version.",
			"Let me go in now and start updating my code here and go into my hello.c file,",
			"include cs50.h, now get myself a string called name,",
			"but we could call it anything, call the function get_string,",
			"and ask, \"What's your name,\" question mark with a space at the very end",
			"just to create a gap.",
			"And then down here, instead of printing out \"hello, world\" always,",
			"let me print out \"Hello, %s,\" which is a placeholder recall,",
			"and output the person's name.",
			"So last week, the way we compiled this program was just",
			"\"make hello,\" no different from now.",
			"But this week, suppose I were to instead get rid of make, only",
			"because it's sort of automating steps for me that I now",
			"want to understand in more detail.",
			"I could compile this program again with clang -o hello hello.c, so just",
			"a reapplication of that same idea of passing in three arguments, -o, hello,",
			"and hello.c.",
			"But the catch now is that I'm actually going",
			"to see one of these red error messages.",
			"And let's consider what this is actually saying.",
			"There's still going to be a bunch of cryptic stuff here.",
			"But notice, as always, we're going to see, hopefully,",
			"something that's a little familiar.",
			"So \"undefined reference to get_string.\"",
			"I don't yet know what an undefined reference is, necessarily.",
			"I don't know what a linker command is.",
			"But I at least recognize there's something going on with get_string.",
			"And there's a reason for this.",
			"It turns out that when using a library, whether it's CS50's library or others'",
			"as well, it's sometimes not sufficient only to include the header",
			"file at the top of your own code.",
			"Sometimes, you additionally have to tell the computer",
			"where to find the 0's and 1's that someone has written to implement",
			"a function like get_string.",
			"So the header file, like cs50.h, just tells the compiler",
			"that the function exists.",
			"But there's a second mechanism that, up until now,",
			"has been automated for us, that tells the computer where",
			"to find the actual 0's and 1's that implements the functions in that header",
			"file.",
			"So with that said, I'm going to need to actually add another command line",
			"argument to this command.",
			"And instead of doing clang -o hello hello.c, I'm going to additionally,",
			"and admittedly, cryptically, do -lcs50 at the end",
			"of this command, which quite simply refers to link in the CS50 library.",
			"So \"link\" is a term of art that we'll see what it",
			"means in more detail in just a moment.",
			"But this additional final command-line argument tells Clang,",
			"you already know that a function like get_string exists.",
			"-lcs50 means when compiling hello.c, make",
			"sure to incorporate all of the machine code from CS50's library",
			"into your program as well.",
			"In short, it's something you have to do when you use certain libraries.",
			"So now when I hit Enter, all seems to be well because nothing bad got printed.",
			"If I type ls, I see hello.",
			"And voila, I can do ./hello, type in my name, David.",
			"And voila, \"hello, David.\"",
			"So why didn't we do all of this last week?",
			"And frankly, we've made no fundamental progress.",
			"All we've done is reveal what's going on underneath the hood.",
			"But I'll claim that, frankly, compiling your code by typing out",
			"all of these verbose command-line arguments just gets tedious quickly.",
			"And so computer scientists and programmers, more specifically,",
			"tend to automate monotonous steps.",
			"So what's happening ultimately with make is that all of this",
			"is being automated for us.",
			"So when you typed \"make hello\" last week-- and henceforth,",
			"you're welcome to continue using make as well--",
			"notice that it generates this extra long command, some of which",
			"we haven't even talked about.",
			"But I do recognize clang at the beginning.",
			"I recognize hello.c see here.",
			"I recognize -lcs50 here.",
			"But notice there's a bunch of other stuff as well,",
			"not only the -o hello, but also -lm, which",
			"refers to a math library, -lcrypt, which refers",
			"to a cryptography or an encryption library.",
			"In short, we the staff have preconfigured",
			"make to just make sure that when you compile your code,",
			"all of the requisite dependencies, libraries, and so forth,",
			"are available to you without having to worry about all",
			"of these command-line arguments.",
			"So henceforth, you can certainly compile your code",
			"in this way using Clang directly.",
			"Or you can come back full circle to where we were last week",
			"and just run \"make hello.\"",
			"But there's a reason we run make hello, because executing all of those steps",
			"manually tends to just get tedious quickly.",
			"And so indeed, what we've done here is compile our code.",
			"And compiling means going from source code to machine code.",
			"But today, we revealed that there's a little more, indeed,",
			"going on underneath the hood, this \"linking\"",
			"that I referred to and a couple of other steps as well.",
			"So it turns out when you compile your code from source code to machine code,",
			"there's a few more steps that are ultimately involved.",
			"And when we say \"compiling,\" we actually mean these four steps.",
			"And we're not going to dwell on these kinds of low-level details.",
			"But it's perhaps enlightening just to see",
			"a brief tour of what's going on when you start with your source code",
			"and end up trying to produce machine code.",
			"So let's consider this.",
			"This is step 1 that the computer is doing",
			"for you when you compile your code.",
			"So step 1 takes your own source code that",
			"looks a little something like this.",
			"And it preprocesses your code, top to bottom, left to right.",
			"And to preprocess your code essentially means",
			"that it looks for any lines that start with a hash symbol, so",
			"#include cs50.h, #include stdio.h.",
			"And what the preprocessing step does is it's kind of like a find and replace.",
			"It notices, oh, here's a #include line.",
			"Let me go ahead and copy the contents of that file, cs50.h, into your own code.",
			"Similarly, when I encounter #include stdio.h, let me,",
			"the so-called preprocessor, open that file, stdio.h, and copy/paste",
			"the contents of that file so that what's in the file now looks more like this.",
			"So this is happening automatically.",
			"You never have to do this manually.",
			"But why is there this preprocessing step?",
			"If you recall our discussion last week of these lines of code that",
			"tend to go at the top of your file, does anyone",
			"perceive what the preprocessor is doing for me and why?",
			"Why do I write code that has these hash symbols, like #include cs50.h",
			"and #include stdio.h, but this preprocessor apparently",
			"is automatically replacing those lines with the actual contents",
			"of those files?",
			"What are these things here in yellow now?",
			"Yeah, Jack, what do you think?",
			"JACK: Is it defining all the functions for you to use in your code,",
			"otherwise the computer wouldn't know what to do?",
			"DAVID MALAN: Exactly.",
			"It's defining all of the functions in my code",
			"so that the computer knows what to do.",
			"Because remember that we ran into that sort of annoying bug last week,",
			"whereby I was trying to implement a function called,",
			"I think, get_positive_int.",
			"And recall that when I implemented that function at the bottom of my file,",
			"the compiler was kind of dumb in that it didn't realize",
			"that it existed because it was implemented",
			"all the way at the bottom of my file.",
			"So to Jack's point, by putting a mention of this function, a hint, if you will,",
			"at the very top, it's like training the compiler",
			"to know in advance that I don't know how it's implemented yet,",
			"but I know get_string is going to exist.",
			"I don't know how it's implemented yet, but I know printf is going to exist.",
			"So these header files that we've been including for the past week essentially",
			"contain all of the prototypes--",
			"that is, all of the hints for all the functions that exist in the library--",
			"so that your code, when compiled, know from the top down",
			"that those functions will indeed exist.",
			"So the preprocessor just saves us the trouble",
			"of having to copy and paste all of these prototypes, if you will,",
			"all of these hints, ourselves.",
			"So what happens after that step there?",
			"What comes next?",
			"Well, there might very well be other header files.",
			"There might very well be other contents in those files.",
			"But for now, let's just assume that only in there is the prototype.",
			"So now compiling actually has a more precise meaning",
			"that we'll define today.",
			"To compile your code now means to take this C code",
			"and to convert it from source code here to another type of source code here.",
			"Now, this is probably going to be the most cryptic stuff we ever see.",
			"And this is not code you need to understand.",
			"But what's on the screen here is what's called assembly code.",
			"So long story short, there's a lot of different computers in the world.",
			"And specifically, there's a lot of different types",
			"of CPUs in the, Central Processing Units, the brains of a computer.",
			"And a CPU understands certain commands.",
			"And those commands tend to be expressed in this language called assembly code.",
			"Now, I honestly don't really understand most of this myself.",
			"It's certainly been a while even since I thought hard about assembly code.",
			"But if I highlight a few operative characters here,",
			"notice that there's mention of main, get_string, printf.",
			"So this is of like a lower-level implementation of main,",
			"of get_string and printf, in a different language called assembly.",
			"So you write the C code.",
			"The computer, though, converts it to a more computer-friendly language",
			"called assembly code.",
			"And decades ago, humans wrote this stuff.",
			"Humans wrote assembly code.",
			"But nowadays, we have C. And nowadays, we have languages like Python--",
			"more on that in a few weeks-- that are just more user friendly,",
			"even if it didn't feel like that this past week.",
			"Assembly code is a little closer to what the computer itself understands.",
			"But there's still another step.",
			"There's this step called assembling.",
			"And again, all of this is happening when you simply run",
			"make and, in turn, this command, clang.",
			"To assemble your code means to take this assembly code and finally convert it",
			"to machine code, 0's and 1's.",
			"So you write the source code.",
			"The compiler assembles it into assembly code.",
			"Then it compiles it into assembly code.",
			"Then it assembles it into machine code until we have the actual 0's and 1's.",
			"But there's actually one final step.",
			"Just because your code that you wrote has been converted into 0's and 1's, it",
			"still needs to be linked in with the 0's and 1's that CS50 wrote",
			"and that the designers of the C language wrote years ago",
			"when implementing the CS50 library in our case,",
			"and the printf function in their case.",
			"So this is to say that when you have code like this that's not only",
			"including the prototypes for functions like get_string and printf at the very",
			"top, these lines here in yellow are what are ultimately converted",
			"into 0's and 1's.",
			"We now have to combine those 0's and 1's with the 0's and 1's from cs50.c,",
			"which the staff wrote some time ago, and even a file",
			"called stdio.c, which the designers of C wrote years ago.",
			"And technically, it might be called something different",
			"underneath the hood.",
			"But there's really three files that are getting",
			"combined when you write your program.",
			"The first, I just claimed, once it's preprocessed and compiled",
			"and assembled, it's then in this form of all 0's and 1's.",
			"Somewhere on the CS50 IDE, there's a whole bunch",
			"of 0's and 1's representing cs50.c.",
			"Somewhere in CS50 IDE, there's another file",
			"representing the 0's and 1's for stdio.c So this final fourth step, a.k.a.",
			"linking, just takes all of my 0's and 1's, all of CS50 0's and 1's, all",
			"of printf's 0's and 1's, and links them all together into one big blob,",
			"if you will, that collectively represent your program, hello.",
			"So, my god, like, that's quite a mouthful and so many steps.",
			"And none of the steps have I described are really germane to you implementing",
			"Mario's pyramid or cash or credit, because what we've really",
			"been doing over the past week is taking all four",
			"of these fairly low-level, sophisticated concepts and, if you will,",
			"abstracting them away so that we just refer to this whole process",
			"as compiling.",
			"So we even though, yes, technically, compiling",
			"is just one of the four steps, what a programmer typically",
			"does when saying compiling is they're, just with a wave of the hand,",
			"referring to all of those lower-level details.",
			"But it is the case that there's multiple steps happening underneath the hood.",
			"And this is what make and, in turn, Clang are doing for you,",
			"automating this process of going from source code to assembly code",
			"to machine code and then linking it all together with any libraries you",
			"might have used.",
			"So no longer take for granted what's happening.",
			"Hopefully, that offers you a glimpse a bit more",
			"of what's actually happening when you compile your own code.",
			"Well, let me pause there, because that's quite a mouthful,",
			"and see if there's any questions on preprocessing, compiling,",
			"or assembling, or linking, a.k.a.",
			"compiling.",
			"And again, we won't dwell at this low level.",
			"We'll tend to now just abstract this all away if we can sort of agree",
			"that, OK, yes, there's those steps.",
			"But what's really important is the whole process, not the minutia.",
			"Sophia?",
			"SOPHIA: I had a question about with the first step, when",
			"we're replacing all the information at the top,",
			"is that information contained within the IDE?",
			"Or where do we--",
			"are there files saved somewhere in that IDE, like, where",
			"it's getting all this information from?",
			"DAVID MALAN: Yeah, really good question.",
			"Where are all these files coming from?",
			"So yes, when you are using CS50 IDE, or frankly,",
			"if you're using your own Mac or your own PC,",
			"and you have preinstalled a compiler into your Mac or PC just like we have",
			"to CS50 IDE, what you get is a whole bunch of .h files somewhere",
			"on the computer system.",
			"You might also have a whole bunch of .c files, or compiled versions thereof,",
			"somewhere on the system.",
			"So yes, when you download and install a compiler,",
			"you are getting all of these libraries added for you.",
			"And we preinstalled an additional library called CS50's library that",
			"additionally comes with its own .h file and its own machine code as well.",
			"So all of those files are somewhere in CS50 IDE,",
			"or equivalently, in your own Mac or PC if you're working locally.",
			"And the compiler, Clang, in this case, just",
			"knows how to find that because one of the steps involved in installing",
			"your own compiler is making sure it's configured to know,",
			"per Sophia's question, where all those files are.",
			"",
			"[? Basili? ?] I'm sorry if I'm mispronouncing it.",
			"[? Basili? ?]",
			"[? BASILI: ?] So whenever we're compiling hello,",
			"for example, is the compiler also compiling, for example, CS50?",
			"Or does CS50 already exist in machine code somewhere beneath?",
			"DAVID MALAN: Yeah, really good question too.",
			"So I was kind of skirting this part of Sophia's question",
			"because technically speaking, probably cs50.c is not installed on the system.",
			"And technically, stdio.c is probably not installed in the system.",
			"Why?",
			"It just doesn't need to be.",
			"It would be kind of inefficient, that is,",
			"slow, if every time you compiled your own program,",
			"you had to additionally compile CS50's program, and stdio's program,",
			"and so forth.",
			"So it actually stands to reason that what computers typically do",
			"is they precompile all of those library files for you",
			"so that more efficiently they can just be linked in.",
			"And you don't have to keep preprocessing, compiling,",
			"and assembling third-party code.",
			"You only perform those steps on your own code and then link everything together.",
			"And indeed, that's the case.",
			"It's all done in advance.",
			"Iris, question from you.",
			"IRIS: When we replace the header files with prototypes,",
			"are we only replacing it with the prototypes that get used?",
			"Or are all the prototypes technically substituted?",
			"DAVID MALAN: Yeah, so I was kind of sweeping that detail",
			"under the rug with my dot, dot, dot.",
			"There's a whole lot of other stuff in those files.",
			"You're getting the entire contents of those files,",
			"even if the only thing you need is the prototype.",
			"But, and this is why I alluded to the fact too that technically,",
			"there probably isn't a stdio.c file, because there",
			"would be so much stuff in it.",
			"There's probably not just one stdio.h file with everything in it.",
			"There's probably some smaller files that get magically included as well.",
			"But yes, there are many more lines of code in those files.",
			"But that's OK.",
			"Your compiler is only going to use the lines that it actually cares about.",
			"Good question.",
			"All right, so with that said, this past week",
			"undoubtedly was a bit frustrating in some ways",
			"because you probably ran into problems.",
			"You ran into bugs, mistakes in your own code.",
			"You probably saw one or more yellow or red error messages.",
			"And you might have struggled a little bit just to get your code to compile.",
			"And again, that's normal.",
			"That will go away over time.",
			"But honestly, whenever I write C, let's say 20% of the time,",
			"I still have a compilation error, let alone logical errors, in my own code.",
			"So this is just part of the experience of writing code.",
			"Humans make mistakes in all forms of life.",
			"And that's ever more true in the context of code, where again,",
			"per our first two weeks precision is important as is correctness.",
			"And it's hard sometimes to achieve both of those goals.",
			"So let's consider now how you might be more",
			"empowered to debug your own code-- that is, find problems in your own code.",
			"And this word actually has some etymology.",
			"This isn't necessarily the first bug.",
			"But perhaps the most famous bug is this one pictured",
			"here from the research notebook of Grace Hopper,",
			"a famous computer scientist, who had discovered",
			"that there were some problems with the Harvard Mark II computer, a very",
			"famous computer nowadays that actually lives over soon",
			"in the new engineering school on campus--",
			"used to live in the Science Center.",
			"The computer was having problems.",
			"And sure enough, when the engineers took a look inside of this big mainframe",
			"computer, there was actually a bug, pictured here",
			"and taped to Grace Hopper's notebook.",
			"So this wasn't necessarily the first use of the term \"bug,\"",
			"but it is a very well-known example of an actual bug in an actual computer.",
			"Nowadays, we speak a little more metaphorically that a bug is just",
			"a mistake in one program.",
			"And we did give you a few tools last week for troubleshooting bugs.",
			"Help50 allows you to better understand some of the cryptic error messages.",
			"And that's just because the staff wrote this program that",
			"analyzed the problem you're having, and we try",
			"to translate it to just more human-friendly speak.",
			"We saw a tool called style50, which helps you not with your correctness,",
			"but just with the aesthetics of your code,",
			"helping you better indent things and add white space-- that",
			"is, blank lines or space characters-- so it's a little more user",
			"friendly to the human to read.",
			"And then check50, which, of course, the staff",
			"write so that we can give you immediate feedback on",
			"whether or not your code is correct per the problem sets or the lab",
			"specification.",
			"But there's some other tools that you should have in your toolkit.",
			"And we'll give those to you today.",
			"And one, frankly, is this universal debugging tool just called,",
			"in the context of C, printf.",
			"So printf, of course, is just this function",
			"that prints stuff out onto the screen.",
			"But that in and of itself is a wonderfully powerful tool",
			"via which you can chase down problems in your code.",
			"And even after we leave C in a few weeks and introduce",
			"Python and other languages, almost every programming language out there",
			"has some form of printf.",
			"Maybe it's called print.",
			"Maybe it's called say, as it was in Scratch,",
			"but some ability to display information or present information to a human.",
			"So let's try to use this primitive, this notion of print f,",
			"to chase down a bug in one's code.",
			"So let me go ahead and deliberately write a buggy program.",
			"I'm going to even call the file buggy0.c.",
			"And at the top of this file, I'm going to go ahead and #include stdio.h.",
			"No need for the CS50 library for this one.",
			"And then I'm going to do int main(void), which we saw last week,",
			"and we'll explain in more detail today.",
			"And then I'm going to give myself a quick loop.",
			"I just want to go ahead and print out, oh, I don't know, like,",
			"10 hashes on the screen.",
			"So I want to print a vertical column, kind of like one",
			"of those screenshots from Super Mario Bros., not a pyramid,",
			"just a single column of hashes, and 10 of them.",
			"So I'm going to do something like, int i = 0,",
			"because I feel like I learned in class that I generally",
			"should start counting from 0.",
			"Then I'm going to have my condition in this for loop.",
			"And I want to do this 10 times.",
			"I'm going to do it less than or equal to 10.",
			"Then I'm going to go ahead and have my increment,",
			"which quite simply can be expressed as i++.",
			"And then inside this loop, I'm just going to go ahead and print out",
			"a single hash followed by a new line.",
			"I'm going to save the program.",
			"I'm going to compile it with clang -o buggy0 buggy0--",
			"I mean, no.",
			"You don't have to use Clang manually in this way.",
			"It's a lot simpler to just abstract that away--",
			"that's not a command--",
			"to abstract that away and run make buggy0.",
			"And make will take care of the process of invoking Clang for you.",
			"I'm going to go ahead and run it.",
			"Seems to be compiling successfully, so no need for help50.",
			"It's already pretty well styled.",
			"In fact, if I run style50 on this buggy0, I don't have any comments yet.",
			"But at least it looks very nicely indented.",
			"So I think I'm OK with that.",
			"But let me add that comment and do \"Print 10 hashes\" just",
			"to remind myself of my goal.",
			"And now let me go ahead and run this, ./buggy0, Enter.",
			"And I see, OK, good.",
			"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, I think.",
			"All right, so it's a stupid bug.",
			"And maybe it's jumped out obviously to some of you.",
			"But maybe it's a little more subtle to others of you.",
			"But where do you begin?",
			"Suppose I were to run check50.",
			"And check50 were to say, nope, you printed out 11 hashes instead of 10.",
			"But my code looks right to me, at least at first glance.",
			"Well, how can I go about debugging this or solving this?",
			"Well, again, printf is your friend.",
			"If you want to understand more about your own program,",
			"use printf to temporarily print more information to the screen,",
			"not that we want in the final version, not that your TF wants to see,",
			"but that you, the programmer, can temporarily see.",
			"So before I print this hash, let me print something",
			"a little more pedantic like this--",
			"\"i is now %i backslash n.\"",
			"So I literally want to know, just for my own mental math, what is the value of i",
			"at this point before I print that hash?",
			"Now I'm going to go ahead and paste in the value of i.",
			"So I'm using %i as a placeholder.",
			"I'm plugging in the value of the variable i.",
			"I'm going to save my code now.",
			"I'm going to recompile it with make buggy0.",
			"And I'm going to rerun it now.",
			"And let me go ahead and increase the size of my window",
			"just so we can focus now on the output.",
			"And I'm going to go ahead and ./buggy0, Enter.",
			"OK, so now I see not only my output, but also",
			"commingled with that output, some diagnostic output, if you will,",
			"some debugging output.",
			"And it's just more pedantically telling me, \"i is now 0,\" \"i is now 1,\"",
			"\"i is now 2,\" dot, dot, dot, \"i is now 9,\" \"i is now 10.\"",
			"OK, I don't hate the fact that i is 10.",
			"But I'm not loving the fact that if I started at 0 and printed a hash,",
			"and I'm hitting 10 and printing another hash, well, obviously,",
			"there's my problem.",
			"So it might not have been all that much more obvious",
			"than looking at the code itself.",
			"But by using printf, you can just be a lot more clear",
			"to yourself what's going on.",
			"So if now I see, OK, well, if I start at 0, I have to go up to 10.",
			"I could change my code to do this to be less than 10.",
			"I could leave that alone and go from 1 through 10.",
			"But again, programmer convention would be to go from 0 up to 10.",
			"So I think I'm good now.",
			"And in fact, now I'll go ahead and recompile this, make buggy0.",
			"Let me go ahead and increase the size of the window again just so I can",
			"temporarily see this and ./buggy0.",
			"OK, I start now at 0, 1, 2, dot, dot, dot.",
			"Now I stop at 9.",
			"And that, of course, gives me 10 hashes.",
			"So again, I don't need this in the final output.",
			"And I'm to go ahead and delete this now.",
			"It's temporary output.",
			"But again, having those instincts-- if you don't quite",
			"understand why your code is compiling but not running properly,",
			"and you want to better see what the computer is clearly seeing,",
			"its mind eye, use printf to just tell yourself",
			"what the value of some variable or variables are anywhere in your code",
			"that you want to see a little more detail.",
			"All right, let me pause for just a moment",
			"to see if there's any questions on this technique of just using printf",
			"to begin to debug your code and to see the values of variables",
			"in a way that's a little more explicit.",
			"",
			"No?",
			"All right.",
			"Well, let me propose an even more powerful tool that admittedly",
			"takes a little getting used to.",
			"But this is kind of one of those lessons,",
			"trust me, if you will, that if you spend a few more minutes, maybe even",
			"an hour or so this week, learning the following tool,",
			"you will save yourself hours, plural, maybe even",
			"tens of hours over the course of the next many weeks",
			"because this tool can help you truly see what's going on inside of your code.",
			"So this tool we're going to add to the list today is called debug50.",
			"And while this one does end with 50, implying that it's a CS50 tool,",
			"it's built on top of an industry standard tool known as GDB, the GNU",
			"DeBugger, that's a standard tool that a lot of different computer systems",
			"use to provide you with the ability to debug your code in a more sophisticated",
			"way than just using printf alone.",
			"So let's go ahead and do this.",
			"Let me go back to the buggy version of this program",
			"which, recall, had me going from 0 through 10, which was too many steps.",
			"A moment ago, I proposed that we just use printf to see the value of i.",
			"But frankly, the bigger our programs get, the more complicated",
			"they get, the more output they need to have on the screen.",
			"It's just going to get very messy quickly",
			"if you're printing out stuff that shouldn't be there, right?",
			"Think back to Mario.",
			"Mario's pyramid is this sort of graphical output.",
			"And it would very quickly get ugly and kind of hard to understand your pyramid",
			"if you're comingling that pyramid with actual textual output from printf",
			"as well.",
			"So debug50, and in turn a debugger in any language,",
			"is a tool that allows you to run your code step by step",
			"and look inside of variables and other pieces of memory inside of the computer",
			"while your program is running.",
			"Right now, pretty much every program we run takes a split second to run.",
			"That's way too fast for me, the human, to wrap my mind",
			"around what's going on step by step.",
			"A debugger allows you to run your program,",
			"but much more slowly, step by step, so you can see what's going on.",
			"So I'm going to go ahead now and run debug50 ./hello.",
			"No, sorry, debug50 ./buggy0.",
			"So I write debug50 first, a space, and then",
			"dot slash and the name of the program that's",
			"already compiled that I want to debug.",
			"So I'm going to go ahead and hit Enter.",
			"And notice that, oh, it was smart.",
			"It noticed that I changed my code.",
			"And I did a moment ago.",
			"I reverted it back to the buggy version.",
			"So let me fix this-- make buggy0.",
			"All right, no errors.",
			"Now let me go ahead and run debug50 again.",
			"And if you haven't noticed this already, sometimes I seem to type crazy fast.",
			"I'm not necessarily typing that fast.",
			"I'm going through my history in CS50 IDE.",
			"Using your arrow keys, Up and Down, you can scroll back",
			"in time for all of the commands you've typed over the past few minutes",
			"or hours or even days.",
			"And this will just start to save you keystrokes.",
			"So I'm going to go ahead and hit Up.",
			"And now I don't have to bother typing this whole command again.",
			"It's a helpful way to just save time.",
			"I'm going to go head in now and hit Enter.",
			"And now notice this error message--",
			"I haven't set any breakpoints.",
			"\"Set at least one breakpoint by clicking to the left of a line number and then",
			"re-run debug50!\"",
			"Well, what's going on here?",
			"Well, debug50 needs me to tell the computer in advance at what line",
			"I want to break into and step through step by step.",
			"So, I can do that.",
			"I'm going to go over to the side of the file here, as it says.",
			"And you know what?",
			"The first interesting line is this one here, line 6.",
			"So I clicked in the so-called gutter, the left-hand side of the screen,",
			"on line 6.",
			"And that automatically put a red dot there, like a stop sign.",
			"Now, one last time, I'm going to go ahead and run debug50 ./buggy0 and hit",
			"Enter.",
			"And now notice this fancy new panel opens up on the right-hand side.",
			"And it's going to look a little cryptic at first.",
			"But let's consider what has changed on the screen.",
			"Notice now that highlighted in this sort of off-yellow color is line 6.",
			"And that's because what debug50 is doing is it's running my program,",
			"but it has paused execution on line 6.",
			"So it's done everything from line 1 through 5,",
			"but now it's waiting for me on line 6.",
			"And what's interesting over here is this-- let",
			"me zoom in on this window over here.",
			"And there's a lot going on here, admittedly.",
			"But let's focus for just a moment not on Watch Expressions, not on Call Stack,",
			"but only on Local Variables.",
			"And notice, I have a variable called i whose initial value is 0,",
			"and it's of type int.",
			"Now, this is kind of interesting because watch what I can do via these icons",
			"up here.",
			"I can click on this Step Over line and start to step through my code line",
			"by line.",
			"So let me go ahead and zoom out.",
			"Let me go ahead and click Step Over.",
			"And watch what happens to the yellow highlighting.",
			"It moves down to the next line.",
			"But notice, if I zoom in again up here, the value of i has not changed.",
			"Now let me go ahead and step over again.",
			"And notice the yellow highlighting doubles back.",
			"That makes sense because I'm in a loop.",
			"So it should be going back and forth, back and forth.",
			"But what next happens in a loop?",
			"Every time you go back to the beginning of the loop,",
			"remember that your incrementation happens, like the i++.",
			"So watch now closely in the top right-hand corner,",
			"when I Step Over now, notice that the value of i in my debugger",
			"has just been changed to 1.",
			"So I didn't have to use printf.",
			"I didn't have to mess up the output of my screen.",
			"I can literally see in this GUI, this Graphical User",
			"Interface on the right-hand side, what the value of i is.",
			"Now if I just start clicking a little more quickly,",
			"notice that as the loop is executing, again and again, the value of i",
			"keeps getting updated.",
			"And you know what?",
			"I bet, even though we started at 0, if I do this enough times,",
			"I will see that the value is 10 now, thereby",
			"giving me another printf at the bottom, thereby explaining the 11 total hashes",
			"that I saw.",
			"So I haven't gotten any new information here.",
			"But notice I've gotten unperturbed information.",
			"I've not messily and sloppily printed out all of these printf statements",
			"on the screen.",
			"I'm just kind of watching a little more methodically",
			"what's happening to the state of my variable over on the top right there.",
			"All right, let me pause here too to see if there's any questions on what",
			"this debugger does.",
			"Again, you compile your code.",
			"You run debug50 on your code, but only after setting a so-called breakpoint,",
			"where you decide in advance where do you want to pause execution of your code.",
			"Even though here I did it pretty much at the beginning of my program,",
			"for bigger programs, it's going to be super",
			"convenient to be able to pause halfway through your code",
			"and not have to go through the whole thing.",
			"Peter, question.",
			"PETER: About the debugger, what's the difference between Step Over",
			"and Step Into and Step Out and--",
			"DAVID MALAN: Really good question.",
			"Let me come back to that in just a moment,",
			"because we'll do one other example where Step Into and Step Out actually",
			"are germane.",
			"But before we do that.",
			"Any other questions about debug50 before we reveal what Step Into and Step",
			"Over do for us as well?",
			"",
			"Oh, all right.",
			"Well, let's take Peter's question right there.",
			"Let me go ahead now and get out of the debugger.",
			"And honestly, I don't see an obvious way to get out",
			"of the debugger at the moment.",
			"But Control-C is your new friend today too.",
			"Pretty much any time you lose control of a program",
			"because the debugger's running, and you've lost interest in it.",
			"Or maybe last week, you wrote a program that",
			"has an infinite loop that just keeps going and going and going,",
			"Control-C will break out of that program.",
			"But let's now write quickly another program that, this time,",
			"has a second function.",
			"And we'll see one other feature of the debugger today.",
			"I'm going to go ahead and create a new file now called buggy1.c.",
			"Again, it's going to be deliberately flawed.",
			"But I'm going to first going to go ahead and #include cs50.h this time.",
			"And I'm going to #include stdio.h.",
			"I'm going to do int main void.",
			"And I'm going to go ahead and do the following-- give myself",
			"a variable called i.",
			"And I'm going to try to get a negative int by calling",
			"a function called get_negative_int.",
			"And then quite simply, I'm going to print out this value, \"%i backslash n\",",
			"i, semicolon.",
			"Now, there's only one problem--",
			"get_negative_int does not exist.",
			"So like last week, where we implemented get_positive_int,",
			"this week, I'll implement get_negative_int.",
			"But I'm going to do it incorrectly at first.",
			"Now, get_negative_int, as the name implies, needs to return an integer.",
			"And even though we only spent brief time on this last week,",
			"recall that you can specify the output of a function,",
			"a custom function that you wrote, by putting its so-called return",
			"value first on this line.",
			"And then you can put the name of the function, like get_negative_int,",
			"and then in parentheses, you can put the input to the function.",
			"But if it takes no input, you can literally write the word \"void,\"",
			"which is a term of art that just means, nothing goes here.",
			"I'm going to go ahead now and implement get_negative_int.",
			"And frankly, I think it's going to be pretty similar to last week.",
			"But my memory is a little hazy.",
			"So again, it will be deliberately flawed.",
			"But I'm going to go ahead and declare a variable called n.",
			"Then I'm going to do the following--",
			"I'm going to set n equal to get_int.",
			"And I'm just going to explicitly ask the user for \"Negative integer\" followed",
			"by a space.",
			"And then I'm going to keep doing this while n is less than 0.",
			"And then at the very last line, I'm going to return n.",
			"So again, I claim that this function will",
			"get me a negative int from the user.",
			"And it's going to keep doing it again and again until the user cooperates.",
			"However, there is a bug.",
			"And there's a couple of bugs, in fact.",
			"Right now, let me go ahead and make a deliberate mistake-- make buggy1,",
			"Enter.",
			"And I see a whole bunch of errors here.",
			"I could use help50 on this.",
			"But based on last week, does anyone recall what the error here might be?",
			"\"Error-- implicit declaration of function 'get_negative_int'",
			"is invalid in C99.\"",
			"So I don't know all of that, but implicit declaration of function",
			"is something you're going to start to see",
			"more often if you make this mistake.",
			"Anyone recall what this means and what the fix is without resorting to help50?",
			"Yeah, Jasmine, what do you think?",
			"JASMINE: So basically, since you declared it",
			"after you already used it in your code, it",
			"doesn't know what to read that as when it's processing it.",
			"So you have to move the first line above when you actually start the code.",
			"DAVID MALAN: Perfect.",
			"And this is the only time I will claim that copy/paste",
			"is acceptable and encouraged.",
			"I'm going to copy the very first line only of that function.",
			"And as Jasmine proposed, I'm going to paste it at the very top of the file,",
			"thereby giving myself a hint otherwise known as a prototype.",
			"So I'll even label it as such to remind myself why it's there--",
			"prototype of that function.",
			"And here, I'm going to go ahead and \"Get negative integer from user.\"",
			"And then this function is as left as written.",
			"So I now have this prototype at the very top",
			"of my file, which I think will indeed get rid of this error.",
			"Let me go to make buggy1 again.",
			"Now I see that indeed compiled OK.",
			"But when I run it now, ./buggy1--",
			"let me go ahead and input a negative integer, negative 1.",
			"Hm.",
			"Negative 2, negative 3--",
			"I feel like the function should be happy with this, and it's obviously not.",
			"So there's a bug.",
			"I'm going to go ahead and hit Control-C to get out of my program",
			"because otherwise, it would run potentially forever.",
			"And now I'm going to use debug50.",
			"But debug50 just got really interesting, to Peter's question",
			"earlier, because now I have things I can step into.",
			"I'm not writing all of my code in main.",
			"There's this other function now called get_negative_int.",
			"So let's see what happens now.",
			"Let me go ahead and set a breakpoint on the first interesting line of code,",
			"line 10.",
			"And it's interesting only in the sense that everything else",
			"is kind of boilerplate at this point.",
			"You just have to do it to get your program started.",
			"I'm going to now go down here.",
			"And I'm going to do debug50 ./buggy1.",
			"And in a moment, it's going to open up that sidebar.",
			"And I'm going to focus now not only on local variables--",
			"like I did before, notice that i is again equal to 0 here by default.",
			"But I'm also going to reveal this option here, Call Stack.",
			"So Call Stack is a fancy way of referring to all of the functions",
			"that your program at this point in time has executed and not yet returned from.",
			"So right now, there's only one thing on the call stack",
			"because the only function that is currently executing is, of course,",
			"main, because why?",
			"I set a breakpoint at line 10, which is, by definition, inside of main.",
			"But to Peter's question earlier, I feel like lines 10 and 11--",
			"frankly, they look pretty correct, right?",
			"It's hard at this point to have screwed up",
			"lines 10 and 11 except syntactically, because I'm getting a negative int.",
			"I'm storing it in i, and then I'm printing out the value of i",
			"on those two lines.",
			"But what if instead, I'm curious about get_negative_int?",
			"I feel like the bug-- logically, it's got",
			"to be in there because that's the harder code that I wrote.",
			"Notice this time, instead of clicking Step Over,",
			"let me go ahead and click on Step Into, which is one of the buttons Peter",
			"alluded to.",
			"And when I click Step Into, notice that you sort of go down the rabbit hole.",
			"And debug50 jumps into the function get_negative_int,",
			"and it focuses on the first interesting line of code.",
			"So do, in and of itself, really isn't that interesting.",
			"Int n isn't that interesting because it's not",
			"assigning a value to it even yet.",
			"The first juicy line of code seems to be line 19.",
			"And that's why the debugger has jumped to that line.",
			"Now, n = get_int feels pretty correct.",
			"It's hard to misuse get_int.",
			"But notice now on the right-hand side what has happened.",
			"Under Call Stack, you now see two things, not only main,",
			"but also get_negative_int in a stack.",
			"It's like a stack of trays in a cafeteria.",
			"The first tray at the bottom is like main.",
			"The second tray on the stack in the cafeteria is now get_negative_int.",
			"And what's cool about this is that notice that right now, I",
			"can see my local variables, n.",
			"And that's indeed the variable I used.",
			"So I no longer see i.",
			"I see n because I'm into the get_negative_int function.",
			"And now if I keep clicking Step Over again and again",
			"after typing in a number.",
			"Let me type in negative 1 here.",
			"Now notice on the top right of the screen, you can see in the debugger",
			"that n equals negative 1.",
			"I'm going to now go ahead and click Step Over.",
			"And I think I'm going to end up in line 22.",
			"If the human has typed in a negative integer like negative 1,",
			"obviously, that's negative.",
			"Let's proceed to line 22.",
			"But watch what happens when I click Step Over.",
			"It actually seems to be going back to the do loop again and again",
			"and again, as it will, I keep providing negative integers.",
			"So my logic then should be, well, OK, if n is negative 1,",
			"but my loop is still running, what should your logical takeaway here be?",
			"If n is negative 1, and that is by definition a negative integer,",
			"but my loop is still running, what could be your diagnostic conclusion",
			"if the debugger is essentially revealing this hint to you? n is negative 1,",
			"but the loop is still going.",
			"Omar, what would you conclude?",
			"OMAR: Either the condition is wrong, or maybe some sort of Boolean logic",
			"could be flawed.",
			"DAVID MALAN: Perfect.",
			"So obviously, either the condition is wrong,",
			"or there's something wrong with my Boolean logic.",
			"And Boolean logic just refers to true or false.",
			"So somewhere, I'm saying true instead of false,",
			"or I'm saying false instead of true.",
			"And frankly, the only place where I have code",
			"that's going to make this loop go again and again must logically be on line 21.",
			"So even if you're not quite sure how to fix it yet, just by deduction,",
			"you should realize that, OK, negative 1 is what's in the variable.",
			"But that's not good enough.",
			"The loop is still going.",
			"I must have screwed up the loop.",
			"And indeed, let me just now call it out.",
			"Line 21 is indeed the source of the bug.",
			"So we've isolated it.",
			"Out of 23 lines, we've at least found the one line",
			"where I know the solution has to be.",
			"What's the solution?",
			"How do I fix the logic now thanks to the debugger having led me down this road?",
			"How do I fix line 21 here?",
			"What's the fix?",
			"What do you propose?",
			"Yeah, Jacob?",
			"JACOB: You would have to change it from while n is less than 0",
			"to while n is greater than 0.",
			"DAVID MALAN: Exactly.",
			"So instead of n less than 0, I want to say n greater than 0.",
			"And I think-- slight clarification, I think",
			"I want to include 0 here because 0 is not negative.",
			"And if I want a negative int, I think what I'm probably",
			"going to want to say is while n is greater than or equal to 0,",
			"keep doing the loop.",
			"So I very understandably sort of just inverted the logic.",
			"No big deal.",
			"I'm thinking negatives, and I did less than.",
			"But the fix is easy.",
			"The point is the debugger led you to this point.",
			"Now, those of you who have programmed before probably",
			"saw the bug jumping out at you.",
			"Those of you who haven't programmed before, probably with some time,",
			"would have figured out what the bug was, because out of 23 lines,",
			"it's got to be one of those.",
			"But as our programs get more sophisticated,",
			"and we start writing more lines of code, debug50 and debuggers in general",
			"will be your friend.",
			"And I realize that this is easier said than done because at first,",
			"when using a debugger, you're going to feel like, ah, I'm",
			"just going to use printf.",
			"Ah, I'm just going to fight through this.",
			"Because there's a bit of a learning curve,",
			"you will gain back that time and more by just",
			"using a debugger as your first instinct when chasing down problems like this.",
			"All right, so that's it for debug50, a new tool in your toolkit in addition",
			"to printf.",
			"But debug50 is hands down the more powerful of the two.",
			"Now, some of you have wondered over the past couple of weeks",
			"why there's this little rubber duck here.",
			"And there actually is a reason for this too.",
			"And there's one final debugging technique that, in all seriousness,",
			"we'll introduce you today to known as rubber duck debugging.",
			"And you can google this.",
			"There's a whole Wikipedia article about it.",
			"And this is kind of a thing in computer science circles for computer scientists",
			"or programmers to have rubber ducks on their desk.",
			"And the point here is that sometimes, when",
			"trying to understand what is wrong in your code,",
			"it helps to just talk it through.",
			"And in an ideal world, we would just talk to our colleague or our partner",
			"on some project.",
			"And just in hearing yourself vocalize what it is your code",
			"is supposed to do, very often, that proverbial light bulb goes off.",
			"And you're like, oh, wait a minute, never mind, I got it,",
			"just because you heard yourself speaking illogically when",
			"you intended something actual logical.",
			"Now, we don't often all have colleagues or partners or friends with whom we're",
			"working on a project with.",
			"And we don't often have family members or friends",
			"who want to hear about our code of all things.",
			"And so a wonderful proxy for that conversant partner",
			"would be literally a rubber duck.",
			"And so here in healthier times, we would be giving all of you rubber ducks.",
			"Here on stage, we brought a larger one for us all to share.",
			"If you've noticed in some of the wide shots on camera,",
			"there's a duck who's been watching this whole time.",
			"So that any time I screw up, I literally have",
			"someone I can sort of talk to nonverbally, in this case.",
			"But we can't emphasize enough that in addition to printf, in addition to",
			"the more sophisticated debug50, talking through your problems with code",
			"is a wonderfully valuable thing.",
			"And if your friends or family are willing to hear",
			"about some low-level code you're writing and some bug you're",
			"trying to solve, great.",
			"But in the absence of that, talk to a stuffed animal in your room.",
			"Talk to an actual rubber duck if you have one.",
			"Talk even aloud or think aloud.",
			"It's just a wonderful compelling habit to get",
			"into because just in hearing yourself vocalize what you think is logical",
			"will the illogical very often jump out at you instead.",
			"All right, so with that said, that's been a lot.",
			"Let's go ahead here and take a five-minute break,",
			"give everyone a bit of a breather.",
			"And when we come back, we'll take a look now",
			"at some of the more powerful features of C",
			"now that we can trust that we can solve any problems with all",
			"of these new tools.",
			"So we'll be back in five.",
			"All right, we are back.",
			"So let's take a look underneath the hood, so to speak,",
			"of a computer, because as fancy as these devices",
			"are and as powerful as they seem, they're",
			"relatively simple in their capabilities and what they can actually do.",
			"And let's reveal as much by way of last week's discussion of type.",
			"So recall that C supports different data types.",
			"So we saw char, and string, and int, and so forth.",
			"So to recap, we had all of these.",
			"Well, it turns out that each of these data types",
			"is defined on a typical computer system as taking up a fixed amount of space.",
			"And it depends on the computer, whether it's Mac or PC, or old or new,",
			"just how much space is used typically by these data types.",
			"But on CS50 IDE, the sizes of all of these types are as follows--",
			"a bool, true or false, uses just 1 byte.",
			"Now, that's actually a little wasteful because 1 byte is 8 bits, and gosh,",
			"for a bool, you should only need 1 bit.",
			"You can't work at the single-bit level easily in C.",
			"And so we just typically spend 1 whole byte on a bool.",
			"Char is going to be 1 byte as well.",
			"And that might sound familiar, because last week when we talked about ASCII,",
			"we proposed that the total number of possible characters",
			"you can represent with a char was 256 because of 8 bits and 2",
			"to the eighth power.",
			"So one char is 1 byte.",
			"And that's fixed in C, no matter what.",
			"Then there were all of these other data types.",
			"There was float, which is a real number with a decimal point.",
			"That happens to use 4 bytes.",
			"A double is also a real number with a decimal point,",
			"but it uses 8 bytes, which gives you even more precision.",
			"You can have more significant digits after the decimal point, for instance.",
			"Ints, we've used a bunch.",
			"Those are 4 bytes, typically.",
			"A long is twice as big, and that just allows",
			"you to represent an even bigger number.",
			"And some of you might have done that exactly on credit when",
			"storing a whole credit card number.",
			"Strings, for now, are a variable number of bytes.",
			"It could be a short string of text, a long string of text, a whole paragraph.",
			"So that's going to vary.",
			"So we'll come back to this notion of string next time.",
			"But today, focus on just these primitive types, if you will.",
			"And here is a picture of what is inside of your computer.",
			"So this is a piece of memory or RAM, Random Access Memory.",
			"And it might be a little smaller.",
			"It might be a little bigger depending on whether it's a laptop,",
			"or desktop, or phone, or the like.",
			"But it's in memory, or RAM, that programs",
			"are stored while they're running.",
			"And it's where files are stored when they are open.",
			"So typically, if you save, install programs, or save files,",
			"those are saved on what's generally called your hard drive, or hard disk,",
			"or solid-state disk, or CD, or some other physical medium.",
			"And that, the [INAUDIBLE] of which is that they don't require electricity",
			"to store your data long term.",
			"RAM is different.",
			"It's volatile, so to speak.",
			"But it's much faster than a hard disk or a solid-state disk, even.",
			"It's much faster because it's purely electronic.",
			"And indeed, there are no moving parts.",
			"It's purely electronic, as pictured here.",
			"And so with RAM, you have the ability to open files and run programs",
			"more quickly because when you double-click a program to run it,",
			"or you open a file in order to view or edit it,",
			"it's stored temporarily in RAM.",
			"And long story short, if your laptop battery has ever died,",
			"or your computer's gotten unplugged, or your phone dies,",
			"the reason that you and I tend to lose data, the paragraph that you just",
			"wrote in the essay that you hadn't yet saved,",
			"is because RAM, memory, is volatile.",
			"That is, it requires electricity to continue powering it.",
			"But for our purposes, we're only going to focus on RAM,",
			"not so much long-term disk space yet, because when",
			"you're running a program in C, it is indeed, by definition,",
			"running in your computer's memory.",
			"But the funny thing about something as simple as this picture",
			"is that each of these black rectangles is kind of a chip.",
			"And in those chips are stored all of the 0's and 1's, the little",
			"switches that we alluded to in week 0.",
			"So let's focus on and just zoom in on just one of these chips.",
			"Now, it stands to reason that I don't know how big this stick of RAM is.",
			"Maybe it's 1 gigabyte, a billion bytes.",
			"Maybe it's 4 gigabytes.",
			"Maybe it's even smaller or bigger.",
			"There's some number of bytes represented physically by this hardware.",
			"So if we zoom in further, let me propose that, all right,",
			"I don't know how many bytes are here.",
			"But if there's some number of bytes, whether it's a billion or 2 billion,",
			"or fewer or more, it stands to reason that we",
			"could just number all of these bytes.",
			"We could sort of think of this physical device, this memory,",
			"as just being a grid, top to bottom, left to right.",
			"And each of the squares I've just overlaid on this physical device",
			"might represent an individual byte.",
			"And again, in reality, maybe there's more of them.",
			"Maybe there's fewer of them.",
			"But it stands to reason, no matter how many there are,",
			"we can think of each of these as having a location.",
			"Like, this is the first byte, second byte, third byte, and so forth.",
			"Well, what does it mean, then, for a char to take up 1 byte?",
			"That means that if your computer's memory is running a program maybe",
			"that you wrote or I wrote that's using a char variable somewhere in it,",
			"the char you're storing in that variable may very well",
			"be stored in the top left-hand corner physically of this piece of RAM.",
			"Maybe it's there.",
			"Maybe it's elsewhere.",
			"But it's just one physical square.",
			"If you're storing something like an int, which takes up 4 bytes,",
			"well, that frankly might take up all four squares along the top there",
			"or somewhere else.",
			"If you're using a long, that's going to take up twice as much space.",
			"So representing an even bigger number in your computer's memory",
			"is going to require that you use all of the 0's and 1's",
			"comprising these 8 bytes instead.",
			"but let's now move away from physical hardware.",
			"Let's abstract it away, if you will, and just now start to think of our memory",
			"as just this grid.",
			"And technically, it's not a two-dimensional structure.",
			"I could just as easily draw all of these bytes from left to right.",
			"I could just fit fewer of them on the screen.",
			"So we'll take the physical metaphor a bit further",
			"and just think of our computer's memory as this grid, this grid of bytes.",
			"And those bytes are each 8 bits.",
			"Those bits are just 0's and 1's.",
			"So what we've really done is zoom in metaphorically on our computer's memory",
			"to start thinking about where things are going to end up in memory when you",
			"double-click on a program on your Mac or PC or, in CS50 IDE,",
			"when you do ./hello or ./buggy0 or ./buggy1,",
			"it's these bytes in your computer's memory that are filled with all",
			"of your variables' values.",
			"So let's consider an example here.",
			"Suppose I had written some code that involved declaring three scores.",
			"Maybe it's a class that's got, like, three tests.",
			"And you want to average the student's grade across all three of those tests.",
			"Well, let's go ahead and write a quick program that does exactly this.",
			"In CS50 IDE, I'm going to create a program called scores.c.",
			"And in scores.c, I'm going to go ahead and #include stdio.h.",
			"I'm going to then do my int main(void) as usual.",
			"And then inside of here, I'm going to keep it very simple.",
			"I'm going to give myself one int called score1.",
			"And just to be a little playful, I'm going",
			"to set it equal to 72, like last week.",
			"I'm going to give myself a second score and set",
			"it equal to 73, and then a third score whose value is going to be 33.",
			"And then let me go ahead and print out the average of those three values",
			"by plugging in a placeholder for floating point value, right?",
			"If you add three integers together and divide them by 3,",
			"I may very well get a fraction or a real number with a decimal point.",
			"So I'm going to use %f instead of %i because I don't want to truncate",
			"someone's grade.",
			"Otherwise, if they have, like, a 99.9%, they're not being rounded up to 100%.",
			"They're going to get the 99% because of truncation, as we discussed last week.",
			"So how do I do now the math of an average?",
			"Well, it's pretty straightforward-- score1",
			"plus score2 plus score3 in parentheses, just",
			"like in math, divided by 3, semicolon.",
			"Let me save that file.",
			"Let me do make scores at the bottom.",
			"Again, we're not going to use Clang manually.",
			"No need to, because it's a lot easier to run make.",
			"But I did mess up here.",
			"\"Format specifies type 'double', but the argument has type 'int'.\"",
			"So I don't quite understand that.",
			"But it's drawing my attention to the %f and the fact that my math looks like",
			"this.",
			"So any thoughts here?",
			"I don't think printf is going to help me here because the bug is",
			"within the printf line.",
			"I don't think that debug50 is going to really help me here because I already",
			"know what line of code the bug is in.",
			"This feels like an opportunity to talk to the physical duck",
			"or some other inanimate object.",
			"Or we can perhaps think about what errors we ran into even last week.",
			"[? Arpan, ?] what do you think?",
			"[? ARPAN: ?] I think it's telling you this because it's",
			"receiving in all the values are integer type,",
			"but you are telling it to be in float.",
			"DAVID MALAN: Indeed.",
			"So score1, score2, score3 are all integers,",
			"and the number 3 is literally an integer.",
			"And so this time, the compiler is smart enough to realize, wait a minute,",
			"you're trying to coerce an integer result into a floating point value,",
			"but you haven't done any floating point arithmetic, if you will.",
			"So you know what?",
			"There's a few ways to fix this.",
			"Last week, recall we proposed that you could use a cast,",
			"and you could explicitly cast one or more of those values to a float.",
			"So I could do this, for instance.",
			"Or I could cast all of these to floats or one of these to floats.",
			"There's many different possibilities.",
			"But frankly, the simplest fix is just to divide, for instance, by 3.0.",
			"I can avoid some of the headaches of casting from one to another by just",
			"making sure that there's at least one floating point",
			"value involved in this arithmetic.",
			"So now let me recompile scores.",
			"This time, it compiles OK.",
			"Let me do ./scores, and voila, my average isn't so high, 59.333333.",
			"All right, so what is actually going on inside",
			"of the computer irrespective of the floating point arithmetic, which was,",
			"again, a topic of last week?",
			"Well, let's consider these three variables, score1, score2, score3--",
			"where are they actually being stored in the computer's memory?",
			"Well, let's consider that grid again.",
			"And again, I'm going to start at top left for convenience.",
			"But technically speaking-- we'll see this down the road--",
			"your computer's memory is just like this big canvas.",
			"And values can end up in all different places.",
			"But for today, we'll keep it clean.",
			"The first variable, score1, I claim is going to be here,",
			"top left, for simplicity.",
			"But what's important about where score1--",
			"that is, 72-- is being stored, is it's taking up four of these boxes.",
			"Each of these boxes, recall, represents 1 byte.",
			"And an integer, recall, in CS50 IDE is 4 bytes.",
			"Therefore, I have used 4 bytes of space to represent the number 72.",
			"The number 73 in score2 similarly is going",
			"to take up four boxes, as is score3 going to take up four boxes as well.",
			"But what's really going on underneath the hood here?",
			"Well, if each of these squares represents a byte,",
			"and each of those bytes is 8 bits, and a bit is just a 0 or 1,",
			"what's really going on underneath the hood is something like this.",
			"Somehow, this electronic memory is storing",
			"electricity in just the right way so that it's storing",
			"this pattern of 0's and 1's, a.k.a.",
			"72 in decimal, this pattern of 0's and 1's, a.k.a.",
			"73 in decimal, this pattern of 0's and 1's, a.k.a.",
			"33 in decimal.",
			"But again, we don't have to keep thinking about or dwelling",
			"on the binary level.",
			"But this is only to say that everything we've discussed thus far",
			"is coming together now in this one picture",
			"because a computer is just storing these patterns for us,",
			"and we are allocating space now thanks to our programming",
			"language via code like this.",
			"But this code, correct though it may be, indeed 59.333333 and so forth",
			"was my average if my test scores were 72, 73, and 33.",
			"But I feel like there's an opportunity for better design here.",
			"So not just correctness, not just style, recall that design",
			"is this other metric of code quality.",
			"And it's a little more subjective, and it's",
			"a little more subject to debate among reasonable people.",
			"But I don't really love what I was doing with this naming scheme.",
			"And in fact, if we look at the code, there really",
			"wasn't much more to my program than these three lines.",
			"I worry this program isn't particularly well designed.",
			"What rubs you the wrong way, perhaps, about those three lines of code?",
			"What could be better?",
			"And even if you don't know the solution, especially",
			"if you've never programmed before, what kind of smells about those three lines?",
			"This is actually a term of art.",
			"\"Code smell\" is like something-- not loving that for some reason.",
			"If you can't put your finger on it, it's not the best design.",
			"The code smells.",
			"What's smelly, if you will, about score1, score2, score3?",
			"Ryan, what do you think?",
			"RYAN: If you're doing an average calculation,",
			"you don't need to add them up all together in the code.",
			"You can add them up beforehand and store it as one variable.",
			"DAVID MALAN: Absolutely.",
			"If I'm computing the average, I don't need to keep all three around.",
			"I can just keep a sum and then divide the whole sum by the total number.",
			"I like that, that instinct.",
			"What else might you not like about the design of this code now?",
			"Score1, score2, score3.",
			"",
			"Score1, score2, score3.",
			"Might there be opportunity still for improvement?",
			"I feel like any time you start to see this repetition, maybe.",
			"Andrew, your thoughts?",
			"ANDREW: Not hard code the three scores together?",
			"DAVID MALAN: OK, so not hard code the three scores.",
			"And what would you do instead?",
			"ANDREW: Maybe take an input, or I would--",
			"yeah, I wouldn't write out the scores themselves.",
			"DAVID MALAN: Yeah, another good instinct.",
			"It's kind of stupid that I've written a program, compiled a program,",
			"that only computes the average for some student who literally got those three",
			"test scores and no others.",
			"Like, there's no dynamism here.",
			"Moreover, it's a little lazy too that I called",
			"my variables score1, score2, score3.",
			"I mean, where does it end after that?",
			"If I want to have a fourth test next semester, now",
			"I have to go and have score4.",
			"If I've got a fifth, score5.",
			"That starts to be reminiscent of last week's copy/paste, which",
			"really wasn't the best practice.",
			"And so let me propose that we clean this up.",
			"And it turns out we can clean this up by way",
			"of another topic, another feature of C that's",
			"also present in other languages, known as arrays.",
			"And if you happened to use something called a list in Scratch,",
			"very similar in spirit to Scratch's lists.",
			"But we didn't see those in lecture that first week.",
			"An array in C, as in other languages, is a sequence",
			"of values stored in memory back to back to back,",
			"a sequence of contiguous values, so to speak, back to back to back.",
			"So in that sense, it's like a list of values from left to right",
			"if we use the metaphor of the picture we've been drawing.",
			"So how might this be germane here?",
			"Well, it turns out that if you want to store a whole bunch of values,",
			"but they're all kind of interrelated, like they're all scores,",
			"you don't have to resort to this sort of lazy, score1, score2, score3, score4,",
			"score5, up to score99, depending on how many scores there are.",
			"Why don't you just call all of those numbers scores,",
			"but use a slightly different syntax?",
			"And that syntax gives you access to what are called arrays.",
			"So the syntax here on the screen is an example",
			"of declaring space for three integers all at once",
			"and collectively referring to all of them as the word \"scores.\"",
			"So there's no more scores 1, 2, and 3.",
			"All three of those scores are in a variable called \"scores.\"",
			"And what's new here is the square brackets, inside of which",
			"is a number that literally connotes how many integers do you",
			"want to store under the name \"scores.\"",
			"So what does this allow me to do?",
			"It allows me still to define three integers in that array.",
			"So this array is going to be a chunk of memory",
			"back to back to back that I can put values in.",
			"And the way I put those values is going to look syntactically like this.",
			"I still use numbers, but now I'm using a new notation.",
			"And it's similar to what I resorted to before,",
			"but it's a little more generalized now and dynamic.",
			"Now if I want to update the very first score in that array,",
			"I literally write the name of the variable scores,",
			"bracket[0] and then assign it the value.",
			"If I want to get at the second score, I do scores[1].",
			"If I want the third score, it's scores[2].",
			"And the only thing that's a little weird and takes some getting used to is",
			"the fact that we are \"zero-indexing\" our arrays.",
			"So in past examples, like for loops and while loops,",
			"I've sort of said, eh, it's a convention in programming",
			"to start counting from 0.",
			"When it comes to arrays, which are contiguous",
			"sequences of values in a computer's memory, they have to start at 0.",
			"So otherwise, if you don't start counting at 0,",
			"you're literally going to be wasting space by overlooking one value.",
			"So now if we were to rename things on the screen,",
			"instead of calling these three rectangles score1, score2, score3,",
			"they're all called scores.",
			"But if you want to refer specifically to the first one,",
			"you use this fancy bracket notation, and the second one, this bracket notation,",
			"and the third one, this bracket notation.",
			"But notice the dichotomy.",
			"When declaring the array, when creating the array, saying, give me three ints,",
			"you use [3] where [3] is the total number of values.",
			"When you index into the array--",
			"that is, when you go to a specific location in that chunk of memory--",
			"you similarly use numbers.",
			"But now those are referring to their relative positions, position 0,",
			"position 1, position 2.",
			"This is the total number of spaces.",
			"This is the specific space first, second, and third.",
			"All right, so pictorially, nothing has changed,",
			"just our nomenclature really has.",
			"So let me go ahead and start to improve this program,",
			"taking in the advice that was offered too on how we can improve the design",
			"and get rid of the smelliness of it.",
			"Let me take the first--",
			"let me take the easiest of these approaches",
			"first by just getting rid of these three separate variables",
			"and instead giving me one variable called scores, an array of size 3.",
			"And then I don't need to declare score1, score2.",
			"Again, that's all going away.",
			"That's all going away.",
			"That's all going away.",
			"Now if I want to initialize that array with these three values,",
			"I say scores[0].",
			"And down here, I say scores[1].",
			"And down here, I say scores[2].",
			"So I've added one line of code.",
			"But notice the dynamism now.",
			"If I want to have a fourth one, I can just allocate here and then",
			"put in the value with another line of code, or 5, or 6, or 7, or 8.",
			"I don't have to start copying and pasting",
			"all of these different variable names by convention.",
			"But I think if we take some of the advice that was offered a moment ago,",
			"we can also clean this up by way of a loop or such as well.",
			"So let's do that.",
			"Let me go ahead and give myself, actually, first the CS50 library so",
			"that I can use get_int.",
			"And let's take this first piece of advice, which is,",
			"let's start asking for a score using get_int.",
			"And I'm going to do this three times.",
			"And yeah, I'm getting a little lazy.",
			"I'm getting a little bored already.",
			"So I'm going to copy/paste.",
			"And again, that does not bode well in general.",
			"When copying and pasting, we can probably do better still.",
			"But now I think I need to change just one more thing here.",
			"When doing the math, I want scores[0] plus scores[1] plus scores[2].",
			"But before I solve this problem here-- the logic is still the same,",
			"but I'm now taking in dynamically three integers--",
			"there's still a smell to it as well.",
			"It's still not as well designed.",
			"And so just to make clear, what could I do be doing better now?",
			"How could I clean up this code and make it not just correct, not just",
			"well styled, but better designed?",
			"What remains here?",
			"Nina?",
			"What do you think?",
			"NINA: The code is specific for only three scores.",
			"So you could, as an input, [INAUDIBLE] how many scores",
			"it wants at the very beginning.",
			"And then instead of having scores[0], scores[1],",
			"you could use a for loop that goes through from 0 to n minus 1 or less",
			"than n that will ask, and it should be one line of code instead.",
			"DAVID MALAN: Yeah, really good.",
			"It's the fact that we have get_int, get_int, get_int.",
			"That's the first sign that you're probably doing something suboptimally.",
			"It might be correct, but it's probably not well designed",
			"because I did literally resort to copy/paste.",
			"There's sort of a pattern here that I could certainly",
			"integrate into something like a loop.",
			"So let me do that.",
			"Let me actually get rid of two of these lines of code.",
			"Let me go up here and do something like for int i get 0, i less than 3 for now,",
			"i++.",
			"Let me open up this for loop.",
			"Let me indent that remaining line of code.",
			"And instead of scores[0]--",
			"this is where arrays get really powerful--",
			"you can use a variable to index into an array--",
			"that is, to go to a specific location.",
			"What do I want to use for my variable?",
			"Well, I would think i here.",
			"So now I've whittled my lines of code down from all three triplicate, three",
			"nearly identical lines, into just one really",
			"inside of a loop that's going to do the same thing for me again and again.",
			"And as Nina proposed too, I don't have to hard code",
			"these 3's all over the place.",
			"Maybe I could do something like this.",
			"I could say something like, int total gets get_int.",
			"And I might ask, \"Total number of scores.\"",
			"And I could literally ask the human from the get-go",
			"how many total scores are there.",
			"Then I can even more powerfully use this variable, total, in multiple places",
			"so that now, I'm doing my math much more dynamically.",
			"This, though-- I'm afraid, Nina, this broke a bit.",
			"I'm going to be a little more--",
			"I need to exert a little more effort here on line 14 because now I",
			"can't hard code scores[0], [1], and [2] because if the total number of scores",
			"is more than that, I need to do more addition.",
			"If it's fewer than that, I need to do less addition.",
			"So I think we've introduced a bug, but we can fix that.",
			"But let me propose for just a moment.",
			"Let's not make it dynamic because I worry that's just made my life harder.",
			"Let's at least introduce one other feature here first.",
			"I'm going to go ahead up here and define a new feature of C today, which",
			"is known as a constant.",
			"If I know in advance that I want to declare a number that I want",
			"to use again and again and again without copying and pasting",
			"literally that number 3, I can give myself a constant int",
			"by a const int total = 3.",
			"This declares what's called a constant in programming,",
			"which is a feature of many languages whereby you declare a variable of sorts",
			"whose value can never change.",
			"Once you set it, you cannot change it.",
			"And that's a good thing because, one, it shouldn't",
			"change in the context of this program.",
			"And two, just in case you, the human, are fallible,",
			"you don't want to accidentally change it when you don't intend.",
			"So this is a feature of a programming language",
			"that sort of protects you from yourself.",
			"So now I can sort of take an amalgam of my instincts and Nina's and use",
			"this variable, total.",
			"And actually, another convention when declaring constants",
			"is to capitalize them just to make visually clear that there's",
			"something different or special about this variable.",
			"So I'm going to change this to TOTAL, and I'm going to use that value here",
			"and here and also down here.",
			"But I'm afraid both Nina and I have a little bit of cleanup here to do",
			"in that I still have hard coded scores[0], scores[1], and scores[2].",
			"And I want to add a changing number of values together.",
			"So you know what?",
			"I've got an idea.",
			"Let me go ahead and create a function that's",
			"going to compute an average for me.",
			"So if I want to create my own function that computes an average,",
			"I want it to return a floating point value,",
			"just so that we don't truncate any math.",
			"I'm going to call this average.",
			"And the input to this function is going to be the length",
			"of an array and the actual array.",
			"And this is the last piece of funky syntax for now.",
			"It turns out that when you want to pass an array as input to a custom function,",
			"you literally use those square brackets again, but you don't specify the size.",
			"And the upside of this is that your function then",
			"can support an array that's got one space in it, two spaces, three,",
			"a hundred.",
			"It's more dynamic this way.",
			"So how do I compute an average here?",
			"I can do this a few different ways.",
			"But I think what was suggested earlier makes",
			"sense, where I can do some kind of summation.",
			"So let me do int sum = 0.",
			"Because how do you compute the average of a bunch of numbers?",
			"Well, you add them all together, and you divide by the total.",
			"Well, let's see how I might do that.",
			"Let me do for int i gets 0, i less than--",
			"what should this be?",
			"Well, if I'm being passed as this custom function the length of the array",
			"and the actual array, I think I can iterate from i up to length,",
			"and then i++ on each iteration.",
			"And then on each iteration, I think I want",
			"to do sum plus whatever is in the array's i-th location, so to speak.",
			"So again, this is shorthand notation per last week for this.",
			"Sum equals whatever sum is plus whatever is in location i of the array.",
			"And once I've done all of that, I think what",
			"I can do is return the total sum divided by the length of the array.",
			"And what I like about this whole approach-- assuming my code's correct,",
			"and I don't think it is just yet-- notice what I can do back up in main.",
			"Now I can abstract away the notion of calculating an average",
			"and just do something like this with this line of code here.",
			"So what did I just do?",
			"A lot's going on, but let's focus for a moment on line 14 here.",
			"On line 14, I'm still just printing the average of some floating point",
			"placeholder.",
			"But what I'm passing as input now is this function, average,",
			"whose inputs are going to be TOTAL, which again is just",
			"this constant at the very top-- oh, sorry, I goofed.",
			"I should have capitalized it, which is just that constant at the very top.",
			"And I'm passing in scores, which again, is just",
			"this array of all of those scores.",
			"Meanwhile, in the function, in the context of the function,",
			"notice that the names of the inputs to a function",
			"do not need to match the names of the variables being",
			"passed into that function.",
			"So even though in main, they're called TOTAL and scores,",
			"in the context of my function, average, I",
			"can call them x and y, a and b, or more generically, length and array.",
			"I don't know what the array is, but it's an array of ints.",
			"And I don't know how long it is, but that answer is going to be in length.",
			"But there's still a bug here.",
			"There's still a bug.",
			"And if we ignore main for a moment, this is a subtle one.",
			"Does anyone see a mistake that I've made probably for the third time",
			"now over the past two weeks?",
			"What mistake subtle have I made here with my code",
			"only in this average function?",
			"This one's a little more subtle.",
			"But the goal is to compute the average of a whole bunch of integers",
			"and return the answer.",
			"Nicholas?",
			"NICHOLAS: You've declared the variable within the function.",
			"DAVID MALAN: I've declared the variable within the function.",
			"That's OK because I've declared my variable sum here, I think you mean.",
			"But that's inside of the average function.",
			"And I'm using sum inside of the outermost curly braces",
			"that was defined.",
			"And so that's OK.",
			"That's OK.",
			"Let's take another thought here.",
			"Olivia, where might the bug still be?",
			"OLIVIA: The return type's a float, but you're",
			"returning an int divided by an int.",
			"DAVID MALAN: Perfect.",
			"So I again made that same stupid mistake that's",
			"just going to get more obvious as time goes on",
			"that if I want to do floating point arithmetic, just like the Ariane rocket",
			"discussion, the Patriot missile-- like, these kinds of details",
			"matter in a program.",
			"Now it's correct because I'm actually going",
			"to ensure that even though the context here",
			"is much less important than those real-world contexts,",
			"just computing some average of scores, I'm not going to accidentally truncate",
			"any of my values.",
			"So again, in the context here of this function,",
			"average is just applying some of last week's principles.",
			"I've got a variable.",
			"I've got a loop.",
			"And I'm doing some floating point arithmetic, ultimately.",
			"And I'm now creating a function that takes two inputs.",
			"One is length, and one is the length--",
			"one is the array itself, and the return type, as Olivia notes,",
			"is a float so that my output is also well defined.",
			"But what's nice about this is, again, you",
			"can think of these functions as abstractions.",
			"Now I don't need to worry about how I calculate an average because I now",
			"have this helper function, a custom function",
			"I wrote that can help me answer that question.",
			"And here, notice that the output of this average function",
			"will become an input into printf.",
			"And the only other feature I've added to the mix here",
			"now are not only arrays, which allow us to create",
			"multiple variables, a variable number of variables, if you will,",
			"but also this notion of a constant.",
			"If I find myself using the same number again and again and again,",
			"this constant can help me keep my code clean.",
			"And notice this.",
			"If next year, maybe another semester, there's four scores or four tests,",
			"I change it in one place.",
			"I recompile.",
			"Boom, I'm done.",
			"A well-designed program does not require that you",
			"go reading through the entirety of it, fixing numbers here, numbers there.",
			"Changing it in one place can allow me to improve this program,",
			"make it support four tests next year instead of just the three.",
			"But better still would be to take, I think,",
			"Nina's advice before, which was to maybe just use get_int and ask the human",
			"for how many tests they actually have.",
			"That too would work.",
			"Well, let me pause here to see if there's",
			"any questions then about arrays or about constants",
			"or passing them around as inputs and outputs in this way.",
			"Yeah, over to Sophia.",
			"SOPHIA: I had question about the use of float and why the use of one float",
			"causes the whole output to be a float.",
			"Why does that occur?",
			"DAVID MALAN: Yeah, really good question.",
			"That's just how C behaves.",
			"So long as there is one or more floating point values involved",
			"in a mathematical formula, it is going to use that data type, which",
			"is the more powerful one, if you will, rather than risk truncating anything.",
			"So you just need one float to be participating",
			"in the formula in question.",
			"Good question.",
			"Other questions on arrays or constants or this passing around of them?",
			"Yeah, over to Alexandra.",
			"ALEXANDRA: I have a question about the declaring of the array, scores.",
			"When you declared it in main, you said int scores.",
			"And in the brackets, you have TOTAL.",
			"Can you declare it without the TOTAL--",
			"DAVID MALAN: Really good question.",
			"ALEXANDRA: --only the brackets?",
			"DAVID MALAN: Short answer, no.",
			"So the way I did it is the way you do have to do it.",
			"And in fact, if I highlight what I did here, now it currently says TOTAL.",
			"If I get rid of that, and I go back to our first version where I said",
			"something like 3 and 3 and 3 over here, you cannot do this, which I think,",
			"Alexandra, is what you were proposing.",
			"The computer needs to know how big the array is when you are creating it.",
			"The exception to that is that when you're",
			"passing an array from one function to another,",
			"you do not need to tell that custom function",
			"how big the array is because, again, you don't know in advance.",
			"You're writing a fairly generic, dynamic function whose purpose in life",
			"is to take any array as input of integers and any length",
			"and respond accordingly with an average that matches the size of that thing.",
			"And those of you, as an aside, who have programmed before, especially in Java,",
			"unlike in Java and certain other languages, the length of an array",
			"is not built into the array itself.",
			"If you do not pass in the length of an array to another function,",
			"there is no way to determine how big the array is.",
			"This is different from Java and other languages,",
			"where you can ask the array, in some sense, what is its length.",
			"In C, you have to pass both the array itself",
			"and its length around separately. [? Sina? ?]",
			"[? SINA: ?] I just-- I'm still a little bit confused about how,",
			"when we write that second command, when is it void in the parentheses?",
			"And when do we define the int?",
			"Because as I remember when we did the--",
			"get a negative number, we get a positive number, it was void,",
			"but we still kind of gave it an input.",
			"I'm just not completely sold on that.",
			"DAVID MALAN: Sure, good question.",
			"Let me go ahead and open up that previous example,",
			"which was a little buggy, but it has the right syntax here.",
			"So here was the get_negative_int function from before.",
			"And, [? Sina, ?] you know it was void as input.",
			"So there was one comment you made where it still took input.",
			"That was not so.",
			"So get_negative_int did not take any input.",
			"And case in point, if we scroll up to main,",
			"notice that when I called it on line 10, I",
			"said get_negative_int, open parenthesis, close parenthesis,",
			"with no inputs inside of those parentheses.",
			"This keyword \"void,\" which we've seen a few times now last week",
			"and this week, is just an explicit keyword in C that says,",
			"do not put anything here, which is to say, it would be incorrect for me up",
			"here to do something like this, like to pass in a number,",
			"or to pass in a prompt, or anything inside of those parentheses.",
			"The fact that this function, get_negative_int",
			"takes void as its input means it does not take any inputs whatsoever.",
			"That's fine.",
			"For get_negative_int, the name of the function says it all.",
			"Like, there's no need to parameterize or customize",
			"the behavior of getting negative int itself.",
			"You just want to get a negative int.",
			"By contrast, though, with the function we just wrote,",
			"average, this function does make conceptual sense to take inputs,",
			"because you can't just say, give me the average.",
			"Like, average of what?",
			"Like, it needs to take input so as to answer that question for you.",
			"And the input, in this case, is the array itself of numbers",
			"and the length of that array so you can do the arithmetic.",
			"And so, [? Sina, ?] hopefully, that helps make the distinction.",
			"You use void when you don't want to take input.",
			"And you actually specify a comma-separated list of arguments",
			"when you do want to take input.",
			"All right, so we focused up until now on integers, really.",
			"But let's simplify a little bit because it turns out",
			"that arrays and memory actually intersect",
			"to create some very familiar features of most any computer program, namely",
			"text or strings more generally.",
			"So suppose we simplify further, no more integers, no more arrays of integers.",
			"Let's just start for a moment with a single character",
			"and write a program that just creates a single brick from that Mario game.",
			"Let me go ahead and create a program here called brick.c.",
			"And in brick.c, I'm just going to #include",
			"stdio.h, int main(void) And more on this void a little later today.",
			"Char c gets, quote unquote, '#'.",
			"And then down here, let me just go ahead and print very simply a placeholder,",
			"%c, backslash n, and then output c.",
			"So this is a pretty stupid program.",
			"Its sole purpose in life is to print a single hash",
			"as you might have in a Mario pyramid of height 1, so very simple.",
			"Let me go ahead and make brick.",
			"It seems to compile OK.",
			"Let me run it with ./brick.",
			"And voila, we get a single brick.",
			"But let's consider for just a moment exactly what just happened here",
			"and what actually was going on underneath the hood.",
			"Well, you know what?",
			"I'm kind of curious.",
			"I remember from last week, we could cast values from one thing to another.",
			"What if I got a little curious, and I didn't print out c,",
			"which is this hash character, as %c, which is a placeholder for a character?",
			"What if I got a little crazy and said %i?",
			"I think I could probably coerce this char by casting it to an int",
			"so I can see its decimal equivalent.",
			"I could see its actual ASCII code.",
			"So let me rebuild this with make brick.",
			"Now let me do ./brick.",
			"And what number might we see?",
			"Last week, we saw 72 a lot, 73, and 33 for \"HI!\"",
			"This week, you can see 35.",
			"It turns out it's the code for and an ASCII hash.",
			"And you can see this, for instance, if I go to a website like--",
			"let's go to asciichart.com.",
			"And sure enough, if I go to the same chart from last week,",
			"and I look for the hash symbol here, its ASCII code is 35.",
			"And it turns out, in C, if it's pretty straightforward to the computer",
			"that, yes, if this is a character, I know I can convert it to an int,",
			"you don't have to explicitly cast it.",
			"You can instead implicitly cast one data type to another just from context here.",
			"So printf and C are smart enough here to know, OK, you're giving me",
			"a character in the form of variable c.",
			"But you want to display it as a %i, an integer.",
			"That's going to be OK.",
			"And indeed, I still see the number 35.",
			"So that's just simple casting.",
			"But let's now put this into the context of today's picture.",
			"How is that character laid out?",
			"Well, quite simply, if this is my memory again,",
			"and we've gotten rid of all of the numbers, c,",
			"otherwise storing this hash, is just being stored in one of these bytes.",
			"It only requires one square because, again, a char is a single byte.",
			"But equivalently, 35 is the number that's actually being stored there.",
			"But I wonder, I wonder.",
			"Last week, we spent quite a bit of time storing",
			"not just single characters, but actual words like \"hi\" and other expressions.",
			"And so what if I were to do something like this?",
			"Let me go back to my code.",
			"And let me not quite yet practice what I just preached.",
			"And let me give myself three variables this time-- c1, c2, and c3.",
			"And let me deliberately store in those three variables H, I, in all caps,",
			"followed by an exclamation point.",
			"And per last week, when you're dealing with individual characters,",
			"you must, in C, use single quotes.",
			"When you're dealing with multiple characters,",
			"otherwise known last week as strings, use double quotes.",
			"But that's why I'm using single quotes, because we're only playing",
			"at the moment with single characters.",
			"Now let me go ahead and print these values out.",
			"Let me print out %c, %c, %c, and output c1, c2, c3.",
			"So this is perhaps the stupidest way you could print out a full word like \"HI!\"",
			"in C by storing every single character in its own variable, but so be it.",
			"I'm just using these first principles here.",
			"I'm using %c as my placeholder.",
			"I'm printing out these characters.",
			"So let me do make brick now.",
			"Compiles OK.",
			"And if I do a dot slash--",
			"you know, I really should have renamed this file,",
			"but we'll rename it in a moment--",
			"./brick, \"HI!\"",
			"And let me go ahead and do this.",
			"Let me go ahead now and actually close the file.",
			"And recall from last week, if I want to rename my file from brick.c,",
			"let's say, to hi.c, I can use the move command, mv.",
			"And now if I open up this file, sure enough, there's hi.c.",
			"And I've fixed my renaming mistake.",
			"All right, so again, if I now do make hi, and I do ./hi, voila,",
			"I see the \"HI!\"",
			"But again, this is kind of a stupid way of implementing a string.",
			"But let's still look underneath the hood.",
			"Let me go ahead and get curious.",
			"Let me print out %i, %i, and %i.",
			"And Let me include spaces this time just so I",
			"can see separation between the numbers.",
			"Let me make hi again, ./hi.",
			"OK, there's that 72.",
			"There's that 73.",
			"And there's that 33 from last week.",
			"So that's interesting too.",
			"So what's going on underneath the hood in the computer's memory?",
			"Well, when I'm storing these three characters,",
			"now I'm just storing them in three different boxes, so c1, c2, c3.",
			"And when you look at it collectively, it kind of looks like a whole word",
			"even though it's, of course, just these individual characters.",
			"So what's underneath the hood, of course, though, is 72, 73, 33.",
			"Or equivalently, in binary, just this.",
			"So the story is the same even though we're now talking",
			"about chars instead of integers.",
			"But what happens when I do this?",
			"What happens when I do string s gets, quote unquote, \"HI!\"",
			"using double quotes?",
			"Well, let's change this program accordingly.",
			"Let me go ahead and do what we would have done last week, string--",
			"I'll call it s just for s for string--",
			"\"HI!\"",
			"in all caps.",
			"I can simplify this next line.",
			"I'm going to use %s as a placeholder for string s.",
			"But let's, for now, reveal what a string really",
			"is, because string is a term of art.",
			"Every programming language has \"strings\" even if it doesn't technically",
			"have a data type called string.",
			"C does not technically have a data type called string.",
			"We have added this type to C by way of CS50's library.",
			"But now if I do make hi, notice that my code compiles OK.",
			"And if I do ./hi Enter, voila, I still see \"HI!\",",
			"which is what I would have seen last week as well.",
			"And if we depict this in the computer's memory, because \"HI!\" is three letters,",
			"it's kind of like saying, well, give me three boxes,",
			"and let me call this string s.",
			"So this feels like a reasonable artist's rendition",
			"of what s is if it's storing a three-letter word like \"HI!\"",
			"But any time we have sequences of characters like this,",
			"I feel like we're now seeing the capability of a proper programming",
			"language.",
			"We introduced a little bit ago the notion of a string.",
			"So maybe could someone redefine string as we've",
			"been using it in terms of some of today's nomenclature?",
			"Like, what is a string?",
			"There's an example of one, \"HI!\", taking up three boxes.",
			"But how did we, CS50 maybe implement string underneath the hood,",
			"would you say?",
			"What is it?",
			"Tucker?",
			"TUCKER: Well, it's an array of characters and integers.",
			"Well, it's integers are used in the string,",
			"but it's an array of basically single characters.",
			"DAVID MALAN: Perfect.",
			"If we now have the ability to express--",
			"very nicely done, Tucker.",
			"If we now have the ability to represent sequences of things, integers,",
			"for instance, like scores, well, it stands",
			"to reason that we can take another primitive, a very basic data type",
			"like a char.",
			"And if we want to spell things with those chars, like English words,",
			"well, let's just think of a string really as an array",
			"of characters, an array of chars.",
			"And indeed, that's exactly what string actually is.",
			"So this thing here, \"HI!\", technically speaking is an array called s.",
			"And this is s[0] This is s[1].",
			"This is s[2].",
			"It's just an array called s.",
			"Now, we didn't use the word array last week",
			"because it's not as familiar as the notion of a \"string of text,\"",
			"for instance.",
			"But a string is apparently just an array.",
			"And if it's an array, that means we can access, if we want to,",
			"the individual characters of that array by way of the square bracket",
			"notation from today.",
			"But it turns out there's something a little special about strings",
			"as they're implemented.",
			"Recall in our example involving scores, the only way",
			"we knew how long that array was was because I",
			"had a second variable called length or TOTAL",
			"that stored the total number of integers in that array.",
			"That is to say in our scores example, not only did we",
			"allocate the array itself.",
			"We also kept track of how many things were in that array with two variables.",
			"However, up until now, every time you and I have used the printf function,",
			"and we have passed to that printf function a string like s,",
			"we have only provided printf with the string itself.",
			"Or logically, we have only provided printf",
			"with the array of characters itself.",
			"And yet somehow, printf is magically figuring out how long the string is.",
			"After all, when printf prints the value of s,",
			"it is printing H, I, exclamation point, and that's it.",
			"It's not going and printing 4 characters or 5 or 20, right?",
			"It stands to reason that there's other stuff in your computer's memory",
			"if you've got other variables or other programs running.",
			"Yet printf seems to be smart enough to know,",
			"given an array, how long the array is because, quite simply, it",
			"only prints out that single word.",
			"So how then does a computer know where a string ends in memory if all a string",
			"is is a sequence of characters?",
			"Well, it turns out that if your string is length 3, as is this one, H, I,",
			"exclamation point, technically a string, implemented underneath the hood,",
			"uses 4 bytes.",
			"It uses 4 bytes.",
			"It uses a fourth byte to be initialized to what",
			"we would describe as backslash 0, which is a weird way of describing it.",
			"But this just represents a special character, otherwise known",
			"as the null character, which is just a special value that",
			"represents the end of a string.",
			"So that is to say when you create a string, quote",
			"unquote with double quotes, \"HI!\"--",
			"yes, the string is length 3.",
			"But you're wasting or spending 4 total bytes on it.",
			"Why?",
			"Because this is a clue to the computer as to where \"HI!\"",
			"ends and where the next string maybe begins.",
			"It is not sufficient to just start printing characters inside",
			"of printf one at a time, left to right.",
			"There needs to be this sort of equivalent of a stop sign",
			"at the end of the string, saying, that's it for this string.",
			"Well, what are these values?",
			"Well, let's convert them back to decimal--",
			"72, 73, 33.",
			"That fancy backslash 0 was just a way of saying, in character form, it's 0.",
			"More specifically, it is eight 0 bits inside of that square.",
			"So to store a string, the computer, unbeknownst to you,",
			"has been using one extra byte all, 0 bits, otherwise written as backslash 0,",
			"but otherwise known as literally the value 0.",
			"So this thing, otherwise colloquially known as null,",
			"is just a special character.",
			"And we can actually see it again.",
			"If I go back to my asciichart.com from before,",
			"notice number 0 is known as NUL, N-U-L in all caps.",
			"All right, so with that said, what is powerful then about strings",
			"once we have this capability?",
			"Well, let me go ahead and do this.",
			"Let me go back into my code from a moment ago.",
			"And let me go ahead and enhance this program a little bit",
			"just to get a little curious as to what's going on.",
			"You know what I can do?",
			"I bet what I can do here in this version here is this.",
			"You know what?",
			"If I want to print out all of these characters of s,",
			"I can get a little curious again and print out %c, %c, %c.",
			"And if s is an array, per today's syntax, I can technically do s[0],",
			"s[1], s[2].",
			"And then if I save this, recompile my code with make hi, OK, ./hi,",
			"I still see \"HI!\"",
			"But you know what?",
			"Let me get a little more curious.",
			"Let me use %i so I can actually see those ASCII codes.",
			"Let me go ahead and recompile with make hi, ./hi.",
			"There's the 72, 73, 33.",
			"Now let me get even more curious.",
			"Let me print a fourth value like this here, s[3],",
			"which is the fourth location, mind you.",
			"So if I now do make hi and ./hi, voila, now you see 0.",
			"And what this hints at is actually a very dangerous feature of C. You know,",
			"suppose I'm curious at seeing what's beyond that.",
			"I could technically do s[4], the fifth location,",
			"even though according to my picture, there really shouldn't be anything",
			"at the fifth location, at least not that I know about just yet.",
			"But I can do it in C. Nothing's stopping me.",
			"So let me do make hi, ./hi.",
			"And that's interesting.",
			"Apparently there's the number 37.",
			"What is the number 37?",
			"Well, let me go back to my ASCII chart.",
			"And let me conclude that number 37 is a percent sign.",
			"So that's kind of weird because I didn't print out an explicit percent.",
			"Now I'm kind of poking around the computer's memory in places",
			"I shouldn't be looking, in some sense.",
			"In fact, if I get really curious, let's look not at location 4.",
			"How about location 40, like way off into that picture?",
			"Make hi, ./hi, 24, whatever that is.",
			"I can look at location 400, recompile my code, make hi, ./hi.",
			"And now it's 0 again.",
			"So this is what's both powerful and also dangerous about C.",
			"You can touch, look at, change any memory you want.",
			"You're essentially just on the honor system",
			"not to touch memory that does it belong to you.",
			"And invariably, especially next week, are",
			"we going to start accidentally touching memory that doesn't belong to you.",
			"And you'll see that it actually can cause computer programs to crash,",
			"including programs on your own Mac and PC, yet another source of common bugs.",
			"But now that we have this ability to store different strings",
			"or to think about strings as arrays, well,",
			"let's go ahead and consider how you might",
			"have multiple strings in a program.",
			"So for instance, if you were to store two strings in a program-- let's call",
			"them s and t respectively.",
			"Another programmer convention-- if you need two strings,",
			"call the first one s then the second one t.",
			"Maybe I'm storing \"HI!\"",
			"then \"BYE!\"",
			"Well, what's the computer's memory going to look like?",
			"Well, let's do some digging.",
			"\"HI!\", as before, is going to be stored here.",
			"So this whole thing refers to s, and it's",
			"taking 4 bytes because the last one is that special null character that",
			"just is the stop sign that demarcates the end of the string.",
			"\"BYE!\", meanwhile, is going to take up another B, Y, E, exclamation point,",
			"five bytes because I need a fifth byte to represent another null character.",
			"And this one deliberately wraps around.",
			"Though again, this is just an artist's rendition.",
			"There's not necessarily a grid in reality.",
			"B, Y, E, exclamation point, backslash 0 now represents t.",
			"So this is to say, if I had a program like this, where I had \"HI!\"",
			"and then \"BYE!\", and I started poking around the computer's memory",
			"just using the square bracket notation, I",
			"bet I could start accessing the value of B or Y",
			"or E just by looking a little past the string s.",
			"So again, as complicated as our programs get,",
			"all that's going on underneath the hood is you just plop things down",
			"in memory in locations like these.",
			"And so now that we have this ability or maybe this mental model",
			"for what's going on inside of a computer,",
			"we can consider some of the features that you might want",
			"to now use in programs that you write.",
			"So let me go ahead here and whip up a quick program,",
			"for instance, that goes ahead and, let's say,",
			"prints out the total length of a string.",
			"Let me go ahead and do this.",
			"I'm going to go ahead and create a new program here in CS50's IDE.",
			"And I'm going to call this one string.c.",
			"And I'm going to very quickly at the top include as usual cs50.h.",
			"And I'm going to go ahead and #include stdio.h.",
			"And I'm going to give myself int main(void).",
			"And then in here, I'm going to get myself a string.",
			"So string s equals get_string.",
			"Let me just ask the human for some input, whatever it is.",
			"Then let me go ahead and print out literally the word \"Output\"",
			"just so that I can actually see the result.",
			"And then down here, let me go ahead and print out that string, for int i get 0,",
			"i is less than--",
			"huh, I don't know what the length of the string is yet.",
			"So let me just put a question mark there, which is not valid code,",
			"but we'll come back to this-- i++.",
			"And then inside of the loop, I want to go ahead and print out",
			"every character one at a time by using my new array notation.",
			"And then at the very end of this program,",
			"I'm going to print a new line just to make",
			"sure the cursor is on its own line.",
			"So this is a complete program that is now,",
			"as of this week, going to treat a string as an array, ergo, my syntax in line 10",
			"that's using my new fancy square bracket notation.",
			"But the only question I haven't answered yet is this--",
			"how do I know when to stop printing the string?",
			"How do I know when to stop?",
			"Well, it turns out, thus far, when we're using for loops,",
			"we've typically done something like just count from 0 on up to some number.",
			"This condition, though, is any Boolean expression.",
			"I just need to have a yes/no or a true/false answer.",
			"So you know what I could do?",
			"Keep looping so long as character at location i",
			"and s does not equal backslash 0.",
			"So this is now definitely some new syntax.",
			"Let me zoom in here.",
			"But s[i] just means the i-th character in s, or more specifically,",
			"the character at position i in s.",
			"Bang equals-- so bang is how a programmer pronounces",
			"exclamation point because it's a little faster-- bang equals",
			"means does not equal.",
			"So this is how you would do an equal sign with a slash through it in math.",
			"It's, in code, exclamation point, equals sign.",
			"And then notice this funkiness-- backslash",
			"0 is again, the \"null character,\" but it's in single quotes",
			"because, again, it is by definition a character.",
			"And for reasons we'll get into another time,",
			"backslash 0 is how you express it.",
			"Just like backslash n is kind of a weird escape character for the new line,",
			"backslash 0 is the character that is all 0's.",
			"So this is kind of a different for loop.",
			"I'm still starting at 0 for i.",
			"I'm still incrementing i as always.",
			"But I'm now not checking for some preordained length",
			"because just like a computer, I do not know a priori where these strings end.",
			"I only know that they end once I see backslash 0.",
			"So when I now go down here and do make string--",
			"it compiles OK-- ./string, let me type in something like \"HELLO\" in all caps.",
			"Voila, the output is \"HELLO\" again.",
			"Let me do it again--",
			"\"BYE\" in all caps, and the output is \"BYE.\"",
			"So it's kind of a useless program in that it's just printing",
			"the same thing that I typed in.",
			"But I'm conditionally using this Boolean expression",
			"to decide whether or not to keep printing characters.",
			"Now thankfully, C comes with a function that can answer this for me.",
			"It turns out there is a function called strlen",
			"so I can literally just say, well, figure out",
			"what the length of the string is.",
			"The function is called strlen for string length.",
			"And it exists in a file called, not surprisingly, perhaps,",
			"string.h, string.h.",
			"So now let me go ahead down here and do make string--",
			"compiles OK-- ./string.",
			"Type in \"HELLO,\" and it still works.",
			"So this function strlen that does exist in a library via the header file",
			"string.h already exists.",
			"Someone else wrote it.",
			"But how did they write it?",
			"Odds are they wrote the first version that I",
			"did by checking for that backslash 0.",
			"But let me ask a subtle question here.",
			"This program is correct.",
			"It iterates over the whole length of the string,",
			"and it prints out every character therein.",
			"Can anyone observe a poor design decision in this function?",
			"This one's subtle, but there's something I don't",
			"like about my for loop in particular.",
			"And I'll isolate it to line 9.",
			"I've not done something optimally on line 9.",
			"There's an opportunity for better design.",
			"Any thoughts here on what I might do better?",
			"Yeah, Jonathan?",
			"JONATHAN: Yeah, to create basically another variable for the string length",
			"and to remember it.",
			"DAVID MALAN: Yeah, and why are you suggesting that?",
			"JONATHAN: If you want to use a different value for the string length,",
			"or if it might fluctuate or change, you want",
			"to just have a different variable as a sort of placeholder value for it.",
			"DAVID MALAN: OK, potentially.",
			"But I will claim in this case that because the human has",
			"typed in the word, once you type in the word, it's not going to change.",
			"But I think you're going down the right direction because",
			"in this Boolean expression here, i less than the string length of s,",
			"recall that this expression gets evaluated again and again and again.",
			"Every time through a for loop, recall that you're constantly",
			"checking the condition.",
			"The condition in this case is i less than the length of s.",
			"The problem is that strlen in this case is a function, which",
			"means there's some piece of code someone wrote,",
			"probably similar to what I wrote a few minutes ago, that you're constantly",
			"asking, what's the length of the string?",
			"What's the length of the string?",
			"And recall from our picture, the way you figure out the length of a string",
			"is you start at the beginning of the string, and you keep checking,",
			"am I at backslash 0?",
			"OK.",
			"Am I at backslash 0?",
			"OK.",
			"So to figure out the length of \"HI!\", it's going to take me 1, 2, 3, 4 steps,",
			"right, because I have to start at the beginning.",
			"And I iterate from location 0 on to the end.",
			"To find out the length of \"BYE!\", it's going",
			"to take me five steps because that's how long it's",
			"going to take me from left to right to find that backslash 0.",
			"So what I don't like about this line of code is,",
			"why are you asking for the string length of s again and again",
			"and again and again?",
			"It's not going to change in this context.",
			"So Jonathan's point is taken if we keep asking the user for more input.",
			"But in this case, we've only asked the human once.",
			"So you know what?",
			"Let's take Jonathan's advice and do int n equals the string length of s.",
			"And then maybe you know what we could do?",
			"Put n in this condition instead.",
			"So now I'm asking the same question, but I'm not foolishly,",
			"inefficiently asking the same question again and again,",
			"whereby the same question requires a good amount of work",
			"to find the backslash 0 again and again and again.",
			"Now, there's some cleaning up we can do here too.",
			"It turns out there's this other subtle feature of for loops.",
			"If you want to initialize another variable to a value,",
			"you can actually do this all at once.",
			"And you can do so before the semicolon.",
			"You can do comma n equals strlen of s.",
			"And then you can use n, just as I have here.",
			"So it's not all that much better, but it's",
			"a little cleaner in that now I've taken two lines of code",
			"and collapsed them into one.",
			"They both have to be of the same data types,",
			"but that's OK here because both i and n are.",
			"So again, the inefficiency here is that it was foolish",
			"before that I kept asking the same question again and again and again.",
			"But now I'm asking the question once, remembering it in a variable called n,",
			"and only comparing i against that integer which does not actually change.",
			"All right, I know that too was a lot.",
			"Let's go ahead here and take a 3-minute break just to stretch legs and whatnot.",
			"In 3 minutes, we'll come back and start to see applications",
			"now of all of these features ultimately to some problems that",
			"are going to lie ahead this week on the readability of language",
			"and also on cryptography.",
			"So we'll see you in 3 minutes.",
			"All right, so we're back.",
			"And this has been a whole bunch of low-level details, admittedly.",
			"And where we're going with this ultimately this week and beyond",
			"is applications of some of these building blocks.",
			"And one of those applications this coming week and the next problem set",
			"is going to be that of cryptography, the art of scrambling or encrypting",
			"information.",
			"And if you're trying to encrypt information,",
			"like messages, well, those messages might very well",
			"be written in English or in ASCII, if you will.",
			"And you might want to convert some of those ASCII characters from one thing",
			"to another so that if your message is intercepted by some third party,",
			"they can't actually decipher or figure out what it is that you've sent.",
			"So I feel like we're almost toward--",
			"we're almost at the ability where, in code, we",
			"can start to convert one word to another or to scramble our text.",
			"But we do need a couple of more building blocks.",
			"So recall that we left off with this picture",
			"here, where we had two words in the computer's memory, \"HI!\" and \"BYE!\",",
			"both with exclamation points, but also both with these backslash 0's",
			"that you and I do not put there explicitly.",
			"They just happen for you any time you use the double quotes and any time",
			"you use the get_string function.",
			"So once we have those in memory, you can think of them as s and t respectively.",
			"But a string, s or t, is just an array.",
			"So again, you can also refer to all of these individual characters or chars",
			"via the new square bracket notation of today, s[0], s[1], s[2], s[3],",
			"and then t[0], t[1], [2], [3], and [4], and then whatever else is",
			"in the computer's memory.",
			"But you know what you can even do is this-- suppose that instead we",
			"wanted to have an array of words.",
			"So before, we had an array of scores, an array of integers.",
			"But now suppose we wanted in the context of some other program",
			"to have an array of words.",
			"You can totally do that.",
			"There's nothing stopping you from having an array of words.",
			"And the syntax is going to be identical.",
			"Notice, if I want an array called words that has room for two strings,",
			"I literally just say, string words[2].",
			"This means, hey, computer, give me an array of size 2, each of whose members",
			"is going to be a string.",
			"How do I populate that array?",
			"Same as before with the scores--",
			"words[0] gets, quote unquote, \"HI!\"",
			"Words[1] gets, quote unquote, \"BYE!\"",
			"So that is to say with this code, could we create a picture similar to the one",
			"previously?",
			"But I'm not calling these strings s and t.",
			"Now I'm calling them both \"words\" at two different locations, 0 and 1",
			"respectively.",
			"So we could redraw that same picture like this.",
			"Now this word is technically named words[0].",
			"And this one is referred to by words[1].",
			"But again, what is a string?",
			"A string is an array.",
			"And yet, here we have an array of strings.",
			"So we kind of sort of have an array of arrays.",
			"So we've got an array of words, but a word is just a string.",
			"And a string is an array of characters.",
			"So what I really have on the board is an array of arrays.",
			"And so here-- and this will be the last weird syntax for today--",
			"you can actually have multiple square brackets back to back.",
			"So if your variable's called words, and that variable's an array,",
			"if you want to get the first word in the array, you do words[0].",
			"Once you're at that word, \"HI!\", and you want",
			"to get the first character in that word, you can similarly do [0].",
			"So the first bracket refers to what word do you want in the array.",
			"The second bracket refers to what character do you want in that word.",
			"So now the I is that words[0][1].",
			"The exclamation point is that words[0][2].",
			"And the null character's at words[0][3].",
			"Meanwhile, the B is that words[1][0], [1][1], [1][2], [1][3], [1][4].",
			"So it's almost kind of like a coordinate system, if you will.",
			"It's a two-dimensional array, or an array of arrays.",
			"So this is only to say that if we wanted to think of arrays of strings",
			"as individual characters, we can.",
			"We have that expressiveness now to encode.",
			"So what more can I do now that I can manipulate things at this level?",
			"Let me do a program that'll be pretty applicable,",
			"I think, with some of our upcoming programs as well.",
			"Let me call this one uppercase.",
			"Let me quickly write a program whose purpose in life",
			"is just to convert an input word to uppercase.",
			"And let's see how we can do this.",
			"So let me go ahead and #include cs50.h.",
			"Let me go ahead and #include stdio.h.",
			"Let me also include this time string.h, which is",
			"going to give us functions like strlen.",
			"And then let me do int main(void).",
			"And then let me go ahead here and get a string from the user like before.",
			"So I'm just going to ask the user for a string.",
			"And I want them to give me whatever the string should",
			"be before I uppercase everything.",
			"Then I'm just going to go ahead and print out literally \"After,\"",
			"just so I can see what happens after I capitalize everything in the string.",
			"And now let me go ahead and do this-- for int i get 0,",
			"i less than string length of s, i++.",
			"Wait a minute, I made that mistake before.",
			"Let's not repeat this question.",
			"Let's give myself a second variable-- n gets string length of s, i less than n,",
			"i++.",
			"So again, this is now becoming boilerplate.",
			"Any time you want to iterate over all of the characters in the string,",
			"this probably is a reasonable place to start.",
			"And then let me ask the question--",
			"I want to iterate over every character in the string",
			"that the human has typed in.",
			"And I want to ask myself a question, just as we've done with any algorithm.",
			"Specifically, I want to ask if the current letter is lowercase,",
			"let me somehow convert it to uppercase.",
			"Else, let me just print it out unchanged.",
			"So how can I express that using last week and this week's building blocks?",
			"Well, let me say something like this--",
			"if the character at location i in s, or if the i-th character in s",
			"is greater than or equal to a lowercase a, and the i-th character in s",
			"is less than or equal to a lower case z, what do I want to do?",
			"Let me go ahead and print out a character.",
			"But that character should be what? s bracket i,",
			"but I'm not sure what to do here yet.",
			"But let me come back to that.",
			"Else, let me go ahead and just print out that character unchanged, s[i].",
			"So minus the placeholder, the question marks I've put, I'm kind of all the way",
			"there.",
			"Line 10 initializes i to 0.",
			"It's going to count all the way up to n, where n is the length of the string.",
			"And it's going to keep incrementing i.",
			"So we've seen that before.",
			"And again, that's going to become muscle memory before long.",
			"Line 12 is a little new, but it uses building blocks",
			"from last week and this.",
			"This week, we have the new square bracket",
			"notation to get the i-th character in the string s.",
			"Greater than or equal to, less than or equal to-- we saw at least one",
			"of those last week.",
			"That just means greater than or equal to, less than or equal to.",
			"I mentioned && last week, which is the logical AND operator,",
			"which means you can check one condition and another.",
			"And the whole thing is true if both of those are true.",
			"This is a bit weird today.",
			"But if you want to express, is the current character",
			"between lowercase a and lowercase z, totally fine",
			"to implicitly treat a and z as numbers, which they really are.",
			"Because again, if we come back to our favorite ASCII chart,",
			"you'll see again that lowercase a has a number associated with it, 97.",
			"Lowercase z has a number associated with it, 122.",
			"So if I really wanted to be pedantic, I could go back into my code",
			"and do something like, well, if this is greater than or equal to 97,",
			"and it's less than or equal to 122, but bad design.",
			"Like, I'm never going to remember that lowercase z is 122.",
			"Like, no one is going to know that.",
			"It makes the code less obvious.",
			"Go ahead and write it in a way that's a little more",
			"friendly to humans like this.",
			"But notice this question mark.",
			"How do I fill in this blank?",
			"Well, let me go back to the ASCII chart.",
			"This is subtle, but this is kind of cool.",
			"And humans were definitely thinking ahead.",
			"Notice that lowercase a is 97.",
			"Capital A is 65.",
			"Lowercase b is 98.",
			"Capital B is 66.",
			"And notice these two numbers--",
			"65 to 97, 66 to 98, 67 to 99.",
			"It would seem that no matter what letters we compare, lowercase",
			"and uppercase, they're always 32 apart.",
			"And that's consistent.",
			"We could do it for all 26 English letters.",
			"So if they're always 32 apart, you know what I could do--",
			"if I want to take a lowercase letter, which",
			"is what I'm thinking about in line 14, I could just",
			"subtract off 32 in this case.",
			"It's not the cleanest, because again, I'm",
			"probably going to forget that math at some point.",
			"But at least mathematically, I think that'll do",
			"the trick because 97 will become 65.",
			"98 will become 66, which is forcing those characters to lowercase.",
			"But they're not being printed as numbers.",
			"I'm still using %c to coerce it to be a char.",
			"So if I didn't mess any syntax up here, let me make uppercase.",
			"OK, ./uppercase.",
			"And let me go ahead and type in, for instance, my name in all lowercase.",
			"And voila, uppercase.",
			"Now, it's a little ugly.",
			"I forgot my backslash n, so let me go ahead",
			"and add one of those real quick just to fix the cursor.",
			"Let me recompile the code with make uppercase.",
			"Let me rerun the program with ./uppercase and now type in my name,",
			"David.",
			"Let me do it again with Brian.",
			"And notice that it's capitalizing everything character by character",
			"using only today's building blocks.",
			"This is correct.",
			"It's pretty well styled because everything's nicely indented.",
			"It's very readable even though it might look a little cryptic at first glance.",
			"But I think I can do better.",
			"And I can do better by using yet another library.",
			"And here's where C, and really programming in general, gets powerful.",
			"The whole point of using popular languages",
			"is because so many other people before you have solved problems",
			"that you don't need to solve again.",
			"And I'm sure over the past, like, 50 years, someone has probably",
			"written a function that capitalizes letters for me.",
			"I don't have to do this myself.",
			"And indeed, there is another library that I'm going",
			"to include by way of its header file.",
			"In ctype.h, type which is the language C and a bunch of type-related things.",
			"And in ctype.h, it turns out there's a function call--",
			"there's a couple of functions.",
			"Specifically, let me get rid of all of this code.",
			"And let me call a function called islower and pass to islower s[i].",
			"And islower, as you might guess, its purpose in life",
			"is to return essentially a Boolean value, true or false,",
			"if that character is lower.",
			"And if so, well, let me go ahead and print out a placeholder",
			"followed by the capitalization of that letter.",
			"Now, before I had to do that annoying math with minus 32 and figure it out,",
			"uh-uh, toupper of parentheses s[i].",
			"And now I can otherwise just print out that character unchanged,",
			"just as before, s[i].",
			"But now notice my program--",
			"honestly, it's definitely a little shorter.",
			"It's a little simpler in that there's just less code.",
			"And hopefully, if the person that wrote islower and toupper did a good job,",
			"I know it's correct.",
			"I'm just standing on their shoulders.",
			"And frankly, my code's more readable because I understand what islower",
			"means, whereas that crazy && syntax and all of the additional code--",
			"that was just a lot harder to wrap your mind around, arguably.",
			"So now if I go ahead and compile this-- make uppercase.",
			"OK, that seemed to work well.",
			"And now I'm going to go ahead and do ./uppercase and type in my name in all",
			"lowercase again.",
			"David seems to work.",
			"Brian seems to work.",
			"And I could do this all day long.",
			"It seems to still work.",
			"But you know what?",
			"I don't think I have to be even this explicit.",
			"You know what?",
			"I bet if the human who wrote toupper was smart,",
			"I bet I can just blindly pass in any character to toupper,",
			"and it's only going to uppercase it if it can be converted to uppercase.",
			"Otherwise, it'll pass it through unchanged.",
			"So you know what?",
			"Let me get rid of all of this stuff and really tighten this program up",
			"and print out a placeholder for c and then toupper of s[i].",
			"And sure enough, if you read the documentation for this function,",
			"it will handle the case where it's either lowercase or not lowercase.",
			"And it will do the right thing.",
			"So now if I recompile my code, make uppercase, so far so good.",
			"./uppercase, David again.",
			"Voila, it still works.",
			"And notice truly just how much tighter, how much cleaner,",
			"how much shorter my code is.",
			"And it's more readable in the sense that this function is pretty well named.",
			"Toupper is what it's indeed called.",
			"But there is an important detail here.",
			"Toupper expects as input a character.",
			"You cannot pass a whole word to it.",
			"It is still necessary at this point for me to be using this loop",
			"and doing it character by character.",
			"Now, how would you know this?",
			"Well, you'll see multiple examples of this over the weeks to come.",
			"But if I go to what's called the manual pages for the language C,",
			"we have our own web-based version of them.",
			"And we'll link this for you in the course's labs",
			"and problem sets as needed.",
			"You can see a list of all of the available functions in C",
			"at least that are frequently used in CS50.",
			"And if we uncheck a box at the top, we can see even more functions.",
			"There's dozens, maybe hundreds of functions, most of which",
			"we will not need or use in CS50.",
			"But this is going to be true in any language.",
			"You sort of pick up the building blocks that you need over time.",
			"So we'll refer you to these kinds of resources",
			"so that you don't rely only on what we show in section and lecture,",
			"but you have at your disposal these other functions and toolkits as well.",
			"And we'll do the same with Python and SQL and other languages as well.",
			"So those are what we call, again, manual pages.",
			"All right, a final feature before we even",
			"think about cryptography and scrambling information as for problem set 2.",
			"So a command-line argument I mentioned by name before--",
			"it's like a word you can type after a program's name",
			"in order to provide it input at the command line.",
			"So make hello-- hello is a command-line argument to the program, hello.",
			"Rm space a.out-- a.out was an argument, a command-line argument to the program",
			"rm when I wanted to remove it.",
			"So we've already seen command-line arguments in action.",
			"But we haven't actually written any programs",
			"that allow you to accept words or other inputs from the so-called command line.",
			"Up until now, all of the input you and I have gotten in our programs",
			"comes from get_string, get_int, and so forth.",
			"We have never been able to look at words that the human might very well have",
			"typed at the prompt when running your program.",
			"But that's all about to change now.",
			"Let me go ahead and create a program called argv.c,",
			"and it'll become clear why in just a moment.",
			"I'm going to go ahead and include, shall we say, stdio.h.",
			"And then I'm going to give myself int main(void).",
			"And then I'm just going to very simply go back and change the void.",
			"So just as our own custom functions can take inputs--",
			"and we saw that with get_negative_int.",
			"We saw that with average today--",
			"so does main potentially take inputs.",
			"Up till now though, we've been saying void.",
			"And we told you to say void last week.",
			"And we told you to say void in problem set 1.",
			"But now it turns out that C does allow you to put other inputs into main.",
			"You can either say, nope, main does not take any command-line arguments.",
			"But if it does, you can say literally, int argc",
			"and string argv with square brackets.",
			"So it's a little cryptic.",
			"And technically, you don't have to type it precisely this way.",
			"But human convention would have you do it, at least for now, in this way.",
			"This says that main, your function, main,",
			"takes an integer as one input and not a string",
			"but an array of strings as input.",
			"And argc is shorthand notation for argument count.",
			"Argument count is an integer that's going to represent the number of words",
			"that your users type at the prompt.",
			"Argv is short for argument vector.",
			"Vector is a fancy way of saying list.",
			"It is a variable that's going to store in an array all of the strings",
			"that a human types at the prompt after your own program's name.",
			"So we can use this, for instance, as follows.",
			"Suppose that I want to let the user type their own name at the command prompt.",
			"I don't want to use get_string.",
			"I don't want to have to prompt the human later for their name.",
			"I want them to be able to run my program and give me their name all at once,",
			"just like make, just like rm, and Clang, and other programs we've seen.",
			"So I'm going to do this-- if argc == 2--",
			"so if the number of arguments to my program is 2--",
			"go ahead and print out, \"hello, %s\", and plug in whatever is that argv[1].",
			"So more on this in just a moment.",
			"Else, if argc is not equal to 2, let's just go with last week's default,",
			"\"hello, world.\"",
			"So what is this program's purpose in life?",
			"If the human types two words at the prompt,",
			"I want to say, \"hello, David,\" \"hello, Brian,\" \"hello, so-and-so.\"",
			"Otherwise, if they don't type two words at the prompt,",
			"I'm just going to say the default \"hello, world.\"",
			"So let me compile this, make argv.",
			"And, hm, I didn't get it right here-- unknown type string, unknown type",
			"string.",
			"All right, I goofed.",
			"If I'm using string, recall that now I need to start using the CS50 library.",
			"And again, we'll see all the more why in the coming weeks as",
			"we take those training wheels off.",
			"But now I'm going to do this again, make argv.",
			"There we go.",
			"Now it works-- ./argv, Enter, \"hello, world.\"",
			"That's pretty much equivalent to what we did last week.",
			"But notice if I type in, for instance, argv[1] David, Enter, it says, \"hello,",
			"David.\"",
			"If I type in argv Brian, it says that.",
			"If I type in Brian Yu, it says \"hello, world.\"",
			"So what's going on?",
			"Well, the way you write programs in C that accept zero or more command-line",
			"arguments-- that is, words at the prompt after your program's name--",
			"is you change what we have been doing all this time from void",
			"to be this into argc string argv with square brackets.",
			"And what the computer is going to do for you automatically",
			"is it's going to store in argc a number of the total number of words",
			"that the human typed in, not just the arguments, technically",
			"all of the words, including your own program's name.",
			"It's then going to fill this array of strings, a.k.a. argv,",
			"with all of the words the human typed at the prompt, so not just",
			"the arguments like Brian or David, but also the name of your program.",
			"So if the human typed in two total words, which they did, argv Brian,",
			"argv David, then I want to print out, \"hello\"",
			"followed by a placeholder and then whatever value is at argv[1].",
			"And I'm deliberately not doing 0.",
			"If I did 0, based on the verbal definition I just gave,",
			"if I recompile this program, I don't want to see this, hello, ./argv.",
			"So the program's own name is automatically always stored for you",
			"at the first location in that array.",
			"But if you want the first useful piece of information,",
			"you actually would, after recompiling the code here, access it at [1].",
			"And so in this way do we see in argv that we can actually",
			"access individual words.",
			"But notice this too--",
			"suppose I want to print out all of the individual characters in someone's",
			"input.",
			"You know what?",
			"I bet I could even do this.",
			"Let me go ahead and do this.",
			"Instead of just printing out \"hello,\" let me do for int i get 0,",
			"n equals the string length of argv[1].",
			"",
			"And then over here, I'm going to do i is less than n, i++.",
			"All right, so I'm going to iterate over all of the characters",
			"in the first real word in argv.",
			"And what am I going to do?",
			"Well, let me go ahead and print out a character that's at argv[1]",
			"but at location i.",
			"So I said a moment ago with our picture that we",
			"could think of an array of strings as really just being an array of arrays.",
			"And so I can employ that syntax here by going into argv[1] to get me the word",
			"like \"David\" or \"Brian\" or so forth, and then further index into it with more",
			"square brackets that get me the D, the A, the V, the I, the D, and so forth.",
			"And just to be super clear, let me put a new line character there",
			"just so we can see explicitly what's going on.",
			"And let me go ahead now and just delete this \"hello, world\"",
			"because I don't want to see any hellos.",
			"I just want to see the word the human typed in.",
			"Make argv-- whoops, what did I do wrong?",
			"Oh, I used strlen when I shouldn't have because I haven't included string.h",
			"at the top.",
			"OK, now if I recompile this code and recompile make argv--",
			"there we go-- ./argv David, you'll see one character per line.",
			"And if I do the same with Brian's name or anyone's name",
			"and change it to Brian, I'm printing one character at a time.",
			"So again, I'm not sure why you would want to do that.",
			"But in this case, my goal simply was to not only iterate over",
			"the characters in that first word, but print them out.",
			"So again, just by applying twice over this time this principle,",
			"can we actually see that a program has access",
			"to the individual characters in each of these strings.",
			"All right, and one last explanation before we",
			"introduce the crypto and application thereof.",
			"This thing here, this thing here-- does anyone",
			"have any idea as to why main, last week and this week,",
			"seems to return an int even though it's not an average function?",
			"It's not a get_positive_int function.",
			"It's not get_negative_int.",
			"Somehow, for some reason, main keeps returning an int even though we",
			"have never seen this int in action.",
			"What might this mean?",
			"This is the one last piece that we promised",
			"last week we would eventually explain.",
			"What might this mean?",
			"And this one's a tough one.",
			"Brian, who do we have?",
			"How about [? Gred, ?] is it?",
			"[? GRED: ?] Usually, the functions in the end have returned 0.",
			"And that means that the function stops.",
			"And the 0 is the integer that pops out of the main function.",
			"DAVID MALAN: Yeah, and this one's subtle in that if you had programmed before,",
			"odds are-- and I'm guessing you have, [? Gred-- ?] you've seen this in use",
			"before.",
			"We humans, though, in the real world of using Macs and PCs--",
			"you've actually seen numbers, integers in weird places.",
			"Frankly, almost any time your computer freezes or you see an error message,",
			"odds are you see an English or some spoken language in the error message.",
			"But you very often see a numeric code.",
			"For instance, if you're having Zoom trouble,",
			"you'll often see the number 5 in the error window in Zoom's program.",
			"And 5 just means you're having network issues.",
			"So programmers often associate integers with things",
			"that can go wrong in a program.",
			"And as [? Gred ?] notes, they use 0 to connote that nothing has gone wrong,",
			"that all as well.",
			"So let me write one final program here just called exit.c",
			"that puts this to the test.",
			"Let me go ahead and write a program in a file called exit.c",
			"that's going to introduce what we're going to call an exit status.",
			"This is a subtlety that will be useful as our programs get",
			"a little more complicated.",
			"I'm going to go in here and do #include cs50.h.",
			"And I'm going to go ahead and #include stdio.h.",
			"And I'm going to give myself the longer version of main, so int argc, string",
			"argv with the square brackets.",
			"And in here, I'm going to say, if argc does not equal 2,",
			"uh-uh, the human is not doing what I want them to,",
			"and I'm going to yell at them in some way.",
			"I'm going to say missing command-line arguments.",
			"So any kind of error message that I want the human to see on the screen,",
			"I'm just going to tell them with that message.",
			"But I'm going to very subtly return the number 1.",
			"I'm going to return an error code.",
			"And the human is not necessarily going to see this code.",
			"But if we were to have a graphical user interface or some other feature",
			"to this program, that would be the number",
			"they see in the error window that pops up,",
			"just like Zoom might show you the number 5 if something has gone wrong.",
			"Similarly, if you've ever visited a page, frankly,",
			"and the web page doesn't exist, you see the integer 404.",
			"That's not technically the exact same incarnation of this,",
			"but it is representative of programmers using numbers to represent errors.",
			"So that one, you probably have seen.",
			"Here, I'm going to go ahead, though, and by default, say, \"hello, %s,\"",
			"just like before, passing in whatever's in argv[1].",
			"So same program as before, but I'm not going to do any of this lame, \"hello,",
			"world\" if the human doesn't type in their name as I expect.",
			"Instead, I am going to check, did the human",
			"give me two words at the command line?",
			"If not, I'm going to print, \"missing command-line argument,\"",
			"and then return this exit code.",
			"Otherwise, if all is well, I'm going to go ahead and return explicitly 0.",
			"This is another number that the human, you and I, are never going to see,",
			"but we could have access to it.",
			"And frankly, for course purposes, check50 can have access to this.",
			"And graphical user interfaces, when we get to those,",
			"can have access to these values.",
			"So 0, as [? Gred ?] notes, is just all as well.",
			"But 1 would mean that something goes wrong.",
			"So let me go ahead and make exit, which is kind of appropriate,",
			"as we're wrapping up here.",
			"And let me go ahead and do ./exit.",
			"\"Missing command-line argument\" is what's displayed.",
			"If I go ahead and say, exit David, now I see \"hello, David.\"",
			"Or exit Brian, I'll see \"exit Brian.\"",
			"Now, this is not a technique you'll need to use often,",
			"but you can actually see these return values if you want.",
			"If I run exit, and I see this error message, I can very weirdly say,",
			"echo $?, which is a very admittedly cryptic way of saying,",
			"what was my exit status?",
			"And if you hit Enter, you'll see 1.",
			"By contrast, if I run exit of David, and I actually",
			"see \"hello, David,\" and I do echo $?, now I will see 0.",
			"So again, this is not a technique you and I will use very frequently.",
			"But it's a capability of a program, and it's a capability of C,",
			"that you do now have access to.",
			"And so in writing programs moving forward,",
			"what we will often do in labs and in problem sets and the like",
			"is ask you to return from main either 0 or 1 or maybe 2 or 3 or 4",
			"based on the problems that might have gone wrong in your program",
			"that you have detected and responded to appropriately.",
			"So it's a very effective way of handling errors in a standard way",
			"so that you know that you are being proactive about detecting mistakes.",
			"So what kinds of mistakes might we handle this week?",
			"And what kinds of problems might we solve?",
			"Well, today was entirely about deconstructing what a string is.",
			"Last week, it was just a sequence of text, a chunk of text.",
			"Today, it's now an array of characters.",
			"And we have new syntax in C for accessing those characters.",
			"We also today have access to more libraries, more header files,",
			"the documentation, therefore, so that we can actually solve problems",
			"without writing as much code ourselves.",
			"We can use other people's code in the form of these libraries.",
			"So one problem we will solve this coming week by way of problems set 2",
			"is that of readability.",
			"Like, when you're reading a book or an essay or a paper or anything,",
			"what is it that makes it like a 3rd-grade reading",
			"level or a 12th-grade reading level or university reading level?",
			"Well, all of us probably have an intuitive sense, right?",
			"Like, if it's big font and short words, it's probably for younger kids.",
			"And if it's really complicated words with big vocabulary and things",
			"we don't know, maybe it's meant for university audiences.",
			"But we can quantify this a little more formulaically,",
			"not necessarily the only way, but we'll give you a few definitions.",
			"So for instance, here's a famous sentence--",
			"\"Mr. And Mrs. Dursley, of number four, Privet Drive,",
			"we're proud to say that they were perfectly normal, thank you very much,\"",
			"and so forth.",
			"Well, what is it about this text that puts Harry Potter at grade seven",
			"reading level?",
			"Well, it probably has to do with the vocabulary words.",
			"But it probably has to do with the lengths of the sentences, the amount",
			"of punctuation perhaps, the total number of characters that you might count up.",
			"You can imagine quantifying it just based generically on the look",
			"and the aesthetics of the text.",
			"What about this?",
			"\"In computational linguistics, authorship attribution",
			"is the task of predicting the author of document of unknown authorship.",
			"This task is generally performed by the analysis of stylometric features--",
			"particular\"-- this is Brian's senior thesis.",
			"So this is not a seventh-grade reading level.",
			"This was actually rated at grade 16.",
			"So Brian's pretty sophisticated when it comes to writing theses.",
			"But there too, you could perhaps glean from the sophistication",
			"of the sentences, the length thereof, and the words therein--",
			"there's something we could perhaps quantify so as to apply numbers.",
			"And indeed, that's one way you could assess the readability of a text",
			"even if you don't have access to a dictionary with which",
			"to figure out which are the actual big or small words.",
			"And what about cryptography?",
			"So it's incredibly common these days and so important",
			"these days for you and I to use cryptography, not necessarily using",
			"algorithms we ourselves come up with, but rather using",
			"software, like WhatsApp and Signal and Telegram and Messenger and others,",
			"that support encryption between you and the third party or friend or family,",
			"or at least minimally the website with which you're interacting.",
			"So cryptography is the art of scrambling information, or hiding information.",
			"And if that information is text, well, frankly, as of this third week of CS50,",
			"we already have the requisite building blocks for not only representing text,",
			"but we saw today manipulating it.",
			"Even just uppercasing characters allows us to start mutating text.",
			"Well, what does it mean to encrypt information?",
			"Well, it's like our black box from last week.",
			"You have some input.",
			"You want some output.",
			"The input, we're going to start calling plaintext.",
			"The message, you want to send from yourself to someone else.",
			"Ciphertext is the output that you want.",
			"And so in between there, there's going to be",
			"what we're going to call a cipher.",
			"A cipher is an algorithm that encrypts or scrambles",
			"its input so as to produce output that a third party can't understand.",
			"And hopefully, that cipher, that algorithm,",
			"is a reversible process so that when you receive the scrambled ciphertext,",
			"you can figure out what it was that the person sent to you.",
			"But the key to using cryptography-- pun intended--",
			"is to also have a secret key.",
			"So if you think back to grade school, maybe you",
			"were flirting with someone in class, and you sent them",
			"a note on a piece of paper.",
			"Well, hopefully, you didn't just say, like, I love you, on the piece of paper",
			"and then pass it through all of your friends,",
			"or let alone the teacher, to the ultimate recipient.",
			"Maybe you did something like, an A becomes",
			"a B. A B becomes a C. A C becomes a D. Like,",
			"you kind of apply an algorithm to add 1 to all of the letters",
			"so that if the teacher does intercept it and look at it,",
			"they probably don't have enough care in the world to figure out what this is.",
			"It's just going to look like nonsense.",
			"But if your friend knows that you changed A to B, B",
			"to C by adding 1 to every letter, they could reverse that process",
			"and decrypt it.",
			"So the key, for instance, might be literally the number 1.",
			"The message literally might be, \"I LOVE YOU.\"",
			"But what would the ciphertext be, or the output?",
			"Well, let's consider \"I LOVE YOU\" is a string which, as of today,",
			"is an array of characters.",
			"So what use is that?",
			"Well, let's consider exactly that phrase as though it's an array.",
			"It's an array of characters.",
			"We know from last week, characters are just integers, decimal integers,",
			"thanks to ASCII, and in turn, Unicode.",
			"So it turns out I, we already know, is 73.",
			"And if we looked up all the others on a chart, L is 76, 79, 86, 69, 89, 79, 85.",
			"So we could relatively easily and see-- you might have to check your notes",
			"and check my sample code and so forth--",
			"but relatively easily in C convert \"I LOVE YOU\" to the corresponding integers",
			"by just casting, so to speak, chars to integers.",
			"I could very easily mathematically, using the plus operator in C,",
			"start to add 1 to every one of these characters,",
			"thereby encrypting my message.",
			"But I could send my friend these numbers.",
			"But I might as well make it a little more user friendly",
			"and cast it back from integers to chars.",
			"So now it would seem that the ciphertext for \"I LOVE YOU,\" if using a key of 1--",
			"and 1 just means change A to B, not A to C, just move it by one place--",
			"this is the ciphertext for an encrypted message of, \"I LOVE YOU.\"",
			"And so the whole process becomes 1 is the input as the key.",
			"\"I LOVE YOU\" is the input as the plaintext.",
			"And the output ultimately is this unpronounceable phrase",
			"that, again, if the teacher or some friend intercepts,",
			"they probably don't know what's going on.",
			"And indeed, this is the essence of cryptography.",
			"The algorithms that protect our emails and texts and financial information",
			"and health information is hopefully way more",
			"sophisticated than that particular algorithm as it is.",
			"But it reduces to the same process--",
			"an input key and an input text followed by some output,",
			"the so-called ciphertext.",
			"And this has been with us for decades now in some form, sometimes even",
			"mechanical form.",
			"Back in the day, you could actually get these little circular devices",
			"that have letters on the alphabet on one side, other letters",
			"on the alphabet on the other side.",
			"And if you rotate one or the other, A might line up",
			"with B, B might line up with C.",
			"So you can have even a physical incarnation of cryptography,",
			"just as was popular in a movie that seems to play endlessly on TV,",
			"at least here in the US around Christmas time.",
			"And you might recognize if you've seen A Christmas Story one such look.",
			"So we'll use just a couple of minutes of our final moments",
			"together to take a look at this real-world incarnation of cryptography",
			"that undoubtedly you can probably see on TV this fall.",
			"[VIDEO PLAYBACK]",
			"- \"Be it known to all and sundry that Ralph Parker is hereby",
			"appointed a member of the Little Orphan Annie secret circle",
			"and is entitled to all the honors and benefits occurring thereto.\"",
			"- \"Signed, Little Orphan Annie.\"",
			"\"Countersigned, Pierre Andre,\" in ink.",
			"Honors and benefits already at the age of nine.",
			"[RADIO CHATTER]",
			"- (ON RADIO) Attention!",
			"[INAUDIBLE] overboard!",
			"[CLANGING]",
			"- (ON RADIO) Come [INAUDIBLE] Gone overboard!",
			"- (ON RADIO) [INAUDIBLE]",
			"- Come on, let's get on with it.",
			"I don't need all that jazz about smugglers and pirates.",
			"[BARKING]",
			"",
			"- (ON RADIO) Listen tomorrow night for the concluding adventure",
			"of the Black Pirate Ship.",
			"Now it's time for Annie's secret message for you members of the secret circle.",
			"Remember kids, only members of any secret circle",
			"can decode any secret message.",
			"Remember, Annie is depending on you.",
			"Set your pins to B-2.",
			"Here is the message.",
			"12, 11, 2, 8--",
			"- I am in my first secret meeting.",
			"- (ON RADIO) --25, 14, 11, 18, 16, 23--",
			"- Old Pierre was in great voice tonight.",
			"- (ON RADIO) --12, 23--",
			"- I could tell that tonight's message was really important",
			"- (ON RADIO) --21, 3, 25.",
			"That's a message from Annie herself.",
			"Remember, don't tell anyone.",
			"[FOOTSTEPS AND PANTING]",
			"",
			"- 90 seconds later, I'm in the only room in the house where a boy of nine",
			"could sit in privacy and decode.",
			"[CHUCKLES] Aha, B. [CHUCKLES] I went to the next, E. The first word is \"be.\"",
			"S, it was coming easier now.",
			"U. [CHUCKLES] 25, that's R.",
			"- Aw, come on, Ralphie, I gotta go.",
			"- Come on.",
			"- I'll be right down, Ma!",
			"- Gee whiz.",
			"",
			"- T, O. \"Be sure to.\"",
			"Be sure to what?",
			"What was Little Orphan Annie trying to say?",
			"Be sure to what?",
			"- Ralphie, Randy has got to go.",
			"Will you please come out?",
			"- All right, Ma!",
			"I'll be right out!",
			"- I was getting closer now.",
			"The tension was terrible.",
			"What was it?",
			"The fate of the planet may hang in the balance.",
			"[KNOCKING]",
			"- Ralphie!",
			"Randy's got to go!",
			"- I'll be right out, for crying out loud!",
			"- [CHUCKLES] Almost there.",
			"My fingers flew.",
			"My mind was a steel trap, every pore vibrated.",
			"It was almost clear.",
			"Yes, yes, yes, yes.",
			"- \"Be sure to drink your Ovaltine.\"",
			"Ovaltine?",
			"",
			"A crummy commercial?",
			"[MUSIC PLAYING]",
			"Son of a bitch.",
			"[END PLAYBACK]",
			"DAVID MALAN: All right, that's it for CS50.",
			"We will see you next time.",
			"[MUSIC PLAYING]",
			""
		],
		"is_youtube": false
	},
	"video_009": {
		"section": "CS50x 2021",
		"subsection": "Week 2",
		"unit": "Shorts",
		"video_sources": [
			"https://edx-video.net/HARCS50X2016-V042000_DTH.mp4",
			"https://edx-video.net/HARCS50X2016-V042000/HARCS50X2016-V042000.m3u8"
		],
		"video_duration": 1224,
		"speech_period": [
			4.664, 0.916, 3.297, 2.583, 1.509, 1.291, 2.68, 1.833, 1.634, 2.583, 3.27,
			0.94, 4.2, 3.29, 5.03, 3.52, 3.8, 3.346, 1.874, 2.711, 2.999, 1.32, 2.99,
			1.11, 2.59, 3.59, 2.38, 2.33, 1.849, 1.541, 3.02, 1.79, 0.83, 3.16, 4.96,
			1.99, 2.09, 3.82, 3.25, 2.52, 3.58, 1.824, 1.916, 6.33, 2.26, 4.18, 1.83,
			2.73, 3.47, 4.72, 3.13, 1.85, 2.16, 4.07, 1.94, 1.417, 2.333, 2.029,
			3.041, 2.395, 1.875, 4.27, 3.26, 2.03, 4.162, 0.958, 2.51, 3.38, 1.49,
			2.93, 3.98, 4.85, 6.27, 3.43, 6.79, 3.01, 2.0, 1.99, 2.916, 1.764, 2.875,
			1.585, 3.35, 1.44, 2.08, 2.52, 3.57, 1.4, 3.57, 1.3, 4.36, 2.9, 2.86,
			4.56, 3.59, 4.95, 2.81, 2.51, 3.71, 0.96, 1.84, 3.49, 1.48, 2.0, 1.833,
			2.817, 3.15, 2.47, 2.12, 0.56, 1.21, 0.82, 1.84, 2.13, 3.039, 2.291, 2.74,
			1.95, 2.137, 1.833, 3.08, 1.66, 3.44, 2.492, 2.958, 3.422, 2.458, 3.89,
			2.55, 2.73, 2.59, 5.35, 1.98, 3.76, 3.53, 4.98, 2.812, 2.208, 3.457,
			1.833, 3.33, 1.497, 2.333, 3.083, 0.877, 3.354, 2.291, 1.885, 3.23, 3.15,
			4.23, 2.58, 2.92, 6.934, 1.166, 1.36, 2.91, 1.795, 2.875, 0.65, 3.16,
			3.58, 3.609, 2.791, 2.04, 3.944, 2.666, 2.19, 3.88, 3.34, 3.21, 2.37,
			1.73, 2.94, 2.93, 2.24, 2.11, 4.22, 1.74, 1.117, 1.833, 3.407, 2.333,
			2.871, 2.999, 1.62, 3.109, 1.561, 2.297, 2.583, 4.07, 2.97, 2.21, 5.21,
			2.191, 1.249, 1.333, 1.477, 3.61, 4.45, 1.69, 3.62, 4.39, 1.75, 2.62,
			5.06, 1.8, 1.89, 1.5, 1.85, 2.81, 2.92, 1.929, 2.791, 2.13, 2.255, 2.375,
			2.29, 2.14, 3.65, 3.23, 1.29, 1.05, 2.041, 1.699, 2.474, 1.666, 3.15,
			1.93, 3.12, 2.09, 3.43, 3.49, 3.02, 2.57, 3.21, 3.16, 1.45, 4.6, 1.64,
			4.39, 3.26, 6.73, 1.416, 2.374, 1.96, 5.027, 1.333, 4.47, 3.65, 3.286,
			1.124, 2.66, 2.31, 4.76, 2.572, 1.458, 2.86, 0.82, 0.79, 1.83, 2.26, 6.0,
			1.82, 3.11, 1.41, 3.35, 1.98, 3.66, 3.45, 0.85, 2.41, 6.25, 4.169, 2.791,
			2.21, 0.92, 2.042, 1.708, 2.52, 4.03, 1.849, 2.791, 1.78, 4.61, 3.72, 0.5,
			2.392, 2.958, 1.29, 2.38, 5.56, 2.5, 1.42, 3.36, 1.88, 5.779, 1.791,
			5.642, 0.708, 2.86, 3.33, 1.98, 2.36, 4.931, 0.499, 2.02, 1.17, 1.05,
			4.48, 2.94, 3.11, 2.53, 3.59, 4.2, 3.02, 5.32, 3.312, 2.458, 1.96, 2.24,
			1.87, 3.28, 2.93, 1.58, 4.59, 6.3, 2.79, 2.2, 4.42, 2.226, 3.184, 4.92,
			5.78, 2.21, 3.73, 1.51, 3.35, 3.73, 2.0, 2.0, 2.63, 0.71, 3.04, 2.61,
			4.76, 5.93, 4.23, 2.124, 0.791, 2.145, 3.12, 1.03, 1.85, 4.81, 0.92,
			2.791, 5.729, 2.25, 4.14, 2.15, 2.32, 2.82, 2.415, 8.205, 1.3, 2.12, 4.37,
			3.678, 1.791, 1.532, 1.708, 3.79, 1.821, 1.858, 1.791, 3.457, 2.264, 3.55,
			3.36, 3.67, 2.02, 3.73, 3.78, 4.52, 2.62, 2.79, 3.78, 3.84, 4.97, 1.506,
			2.374, 1.67, 2.812, 0.708, 2.432, 1.958, 2.094, 2.166, 1.04, 5.46, 2.12,
			2.6, 3.87, 3.62, 3.45, 1.84, 5.38, 4.92, 2.7, 1.12, 2.0, 3.27, 3.41, 2.18,
			2.3, 3.35, 4.23, 2.15, 1.356, 3.124, 3.87, 4.04, 1.33, 3.41, 3.22, 2.82,
			2.7, 2.53, 4.67, 2.07, 3.1, 2.54, 2.207, 0.583, 1.6, 3.5, 2.14, 1.18,
			2.17, 1.52
		],
		"transcript_en": [
			"",
			"DOUG LLOYD: All right.",
			"So now let's tackle a really big topic, functions.",
			"So far in the course, all the programs that we've been writing",
			"have been written inside of main.",
			"They're pretty simple programs.",
			"You don't need to have all these branches and things going on.",
			"We can just fit it all inside of main and it",
			"doesn't get terribly overwhelming.",
			"But as the course goes on and as you begin to develop programs",
			"independently, they're probably going to start to get a lot more than 10",
			"or 15 lines.",
			"You might get hundreds or thousands or tens of thousands of lines of code.",
			"And it's really not that crazy a thought.",
			"As such, it's probably not a good idea to keep everything inside of main.",
			"It can get a little difficult to find what you're looking for if you do that.",
			">> Fortunately, though C, and pretty much every other programming language that",
			"might work with, allows us to write functions.",
			"And I'm just going to take a quick aside here",
			"to mention that functions is one area of computer science.",
			"And you'll see many more of them at various points throughout the course",
			"and if you continue on.",
			"Where there's a lot of synonyms for the same word.",
			"So we call the functions.",
			"But you might also hear them referred to as procedures,",
			"or methods, particularly, if you've ever done any object oriented programming",
			"before-- and don't worry if you haven't, not",
			"a big deal-- but in audit oriented languages",
			"are frequently called methods.",
			"Sometimes they're called subroutines.",
			"But they really all refer to the same basic idea.",
			">> Let's see what that idea is.",
			"What is a function?",
			"Well a function is really nothing more than a black box.",
			"A black box that has a set of zero or more inputs and a single output.",
			"So for example, this might be a function.",
			"This is a function called func.",
			"And it takes three inputs a, b, and c.",
			"And inside that black box, we don't know exactly what it does,",
			"but it processes the inputs in some way and then it",
			"gives a single output, in this case, z.",
			"Now to make it a little less abstract, we",
			"could say that maybe we have a function called",
			"add that takes three inputs a, b, and c and processes the output in some way",
			"inside the black box to produce a single output.",
			"So in this case, if add takes 3, 6, and 7.",
			"Somewhere inside the add function, we would",
			"expect them to be added together to produce the output, which",
			"is 3 plus 6 plus 7 or 16.",
			">> Similarly, you have a function called mult that takes two inputs, a and b,",
			"processes them in some way such that the output of the function",
			"is the product of the two inputs.",
			"The two inputs multiplied together.",
			"4 and 5 being passed into mult, something happens, the output we expect",
			"is 20.",
			"Why do we call it a black box?",
			"Well if we aren't writing the functions ourselves, which",
			"we've done quite a bit so far cs50.",
			"We've seen print f, for example, which is a function that we didn't write",
			"ourselves, but we do use all the time.",
			"If we aren't writing the functions ourselves,",
			"we don't really need to know how it's actually implemented under the hood.",
			">> So for example the black box I just showed you for multiplication,",
			"mult a, b could be defined-- and this is just",
			"some pseudocode-- could be defined as output a times b.",
			"That make sense, right.",
			"If we have a function called mult that takes two inputs.",
			"We would expect that the output would be the two inputs multiplied together,",
			"a times b.",
			"But mult could also be implemented like this,",
			"we have a counter variable to get set inside of mult to 0.",
			"And then we repeat this process b times add a to counter.",
			"For example, if we multiply 3a by 5b, we could say set counter to 0,",
			"repeat five times, add 3 to counter.",
			"So we start at 0 and then we do this five times 3, 6, 9, 12, 15.",
			"It's the same result. We still get 3 times 5 just",
			"the implementation is different.",
			">> That's what we mean when we say a black box.",
			"It just means we don't really care how it's implemented under the hood",
			"as long as the output is what we expect.",
			"In fact, that's part of the contract of using functions, particularly",
			"functions that others write.",
			"The behavior is always going to be typical, unpredictable",
			"based on the name of the function.",
			"And that's why it's really important when you write functions",
			"or when other people write functions that you might use,",
			"that those functions have clear, relatively obvious names,",
			"and are well documented.",
			"Which is certainly the case for function like print f.",
			">> So why do we use functions?",
			"Well as I said earlier, if we write all of our code inside of main things",
			"can get really cumbersome and really complicated.",
			"Functions allow us the ability to organize things and break up",
			"a very complicated problem into a lot more manageable sub parts.",
			"Functions also allow us to simplify the coding process.",
			"It's a lot easier to debug a 10 line function versus a 100 line",
			"function or a 1,000 line function.",
			"If we only have to debug small pieces at a time,",
			"or write small pieces at the time, it makes that programming experience",
			"a lot better.",
			"Trust me on that one.",
			">> Lastly, if we write functions we can reuse those various parts.",
			"Functions can be recycled.",
			"They can be used in one program or another.",
			"You've already written the function, all you",
			"need to do is tell that program where to find that function.",
			"We've been recycling and using print f for over 40 years.",
			"But it was only written one time.",
			"Pretty useful, right.",
			"All right.",
			"So functions are great.",
			"We know that.",
			"Now let's start writing them.",
			"Let's start getting them into our programs.",
			"In order to do that, the first thing we do is declare the function.",
			"When you declare a function what you're basically doing",
			"is telling the compiler, hey, just so you know,",
			"I am going to be writing a function later on",
			"and here's what it's going to look like.",
			"The reason for this is because compilers can",
			"do some weird things if they see a set of symbols",
			"that they're not familiar with.",
			"So we just give the compiler a heads up, I'm creating a function",
			"and it's going to do this.",
			"Function declarations generally if you're organizing your code in a way",
			"that others will be able to understand and make use of,",
			"you generally want to put all of your function declarations",
			"at the very top of your code, right before you start writing main even.",
			"And conveniently, there's a very standard form",
			"that every function declaration follows.",
			"They all pretty much look like this.",
			"There are three parts to a function declaration, return type, name,",
			"and argument list.",
			">> Now the return type is what kind of variable the function will output.",
			"So for example, if we think back a minute ago to the multiplying two",
			"numbers function, what do we expect if we multiply an integer by an integer",
			"the output will be probably an integer, right.",
			"Multiplied two integers together, you get an integer.",
			"So the return type of that function would be int.",
			"Name is what you want to call your function.",
			"This is probably the least important part of the function declaration,",
			"in terms of functionality.",
			"But is actually probably one of the most important parts",
			"of the function declaration in terms of knowing what the function actually",
			"does.",
			"If you name your function f or g or h or mystery or something like that,",
			"you're probably going to get a little tripped up trying",
			"to remember what those functions do.",
			"So it's important to give your function's meaningful names.",
			">> Lastly, argument list is the comma separated list",
			"of all the inputs to your function, each of which has a type and a name.",
			"So not only do you have to specify what type of variable",
			"the function will output, you also want to specify",
			"what type and types of variables the function will be accepting as inputs.",
			"So let's do an example here.",
			"Let's just take a look at a more concrete one.",
			"So here's an example of a function declaration for a function that",
			"would add two integers together.",
			"The sum of two integers is going to be an integer as well, as we just",
			"discussed.",
			"And so the return type, here in green, would be int.",
			"That just tells us that add two ints is going to, at the end of the day,",
			"output, or spit it back out to us, an integer.",
			"Given what this function does we want to give it a meaningful name.",
			"Add two ints seems appropriate, considering",
			"we're taking two integers as inputs and hopefully adding them together.",
			"It might be a bit of a cumbersome name and frankly this function",
			"is probably not necessary since we have the addition",
			"operator, if you recall from our discussion of operators, previously.",
			"But let's just say for sake of argument that this function is useful",
			"and so we'll call it add two ints.",
			"Lastly, this function takes two inputs.",
			"Each of which is an integer.",
			"So we have this comma separated list of inputs.",
			"Now we generally want to give a name to each of them",
			"so that they can be used within the function.",
			"The names aren't terribly important.",
			">> In this case, we don't necessarily have any meaning attached to them.",
			"So we can just call them a and b.",
			"That's totally fine.",
			"If however, you find yourself in a situation",
			"where the names of the variables might actually be important,",
			"you might want to call them something other than a and b",
			"to give them something more symbolically meaningful.",
			"But in this case, we don't really know anything else about the function.",
			"We just want to add two integers.",
			"So we'll just call those integers a and b.",
			"That's one example.",
			">> Why don't you take a second to think about this one,",
			"how would you write a function declaration for a function that",
			"multiplies two floating point numbers?",
			"Do you remember what a floating point number is?",
			"What would this function declaration look like?",
			"I actually recommend you pause the video here and take how much time you need.",
			"Think about what this function declaration would be?",
			"What would the return type be?",
			"What would a meaningful name be?",
			"What would the inputs be?",
			"So why don't you pause the video here and write-up a function declaration",
			"for a function that would multiply two floating point numbers together.",
			"Hopefully you paused the video.",
			">> So let's take a look at an example of one possible declaration.",
			"Float mult two reals float x, float y.",
			"The product of two floating point numbers,",
			"which recall are how we represent real numbers",
			"or numbers with decimal values in c, is going to be a floating point number.",
			"When you multiply a decimal by a decimal,",
			"you're probably going to get a decimal.",
			"You want to give it a relevant name.",
			"Multiply two reals seems fine.",
			"But you could really call it mult two floats, or mult floats.",
			"Anything like that, as long as it gave some actual meaning to what",
			"this black box was going to do.",
			"And again, in this case, we don't seem to have any meaning attached",
			"to the names of the variables we're passing in,",
			"so we just call them x and y.",
			"Now if you call them something else, that's totally fine.",
			"In fact, if you did this declaration instead",
			"using doubles instead of floats, if you recall",
			"that doubles are a different way to more precisely",
			"specify real numbers or floating point variables.",
			"That's totally fine too.",
			"Either one of those would be fine.",
			"In fact, there are several different combinations",
			"of ways to declare this function.",
			"But these are two pretty good ones.",
			"We've declared a function, that's great.",
			"We've told the compiler what it is, what we're going to be doing.",
			"Now let's actually write that function.",
			"Let's give it a definition, so that inside the black box",
			"predictable behavior is happening.",
			"In fact, we are multiplying two real numbers together, or adding numbers",
			"together, or doing whatever it is that we asked our function to do.",
			">> So in fact, let's try and define multiply two reals which we just",
			"talked about a second ago.",
			"Now the beginning of a function definition",
			"looks almost exactly the same as a function declaration.",
			"I have both of them here.",
			"At the top is the function declaration, type, name, comma separated argument",
			"list, semicolon.",
			"The semicolon indicates that that is a function declaration.",
			"The beginning of the function definition looks almost exactly",
			"the same, type, name, comma separated argument list, no semicolon,",
			"open curly brace.",
			"The open curly brace, just as we've been doing with main,",
			"means that we are now beginning to define",
			"what happens inside the black box that we've decided to call mult two reals.",
			"Here is one way to implement it.",
			"We could say, we could declare a new variable of type float called product",
			"and assign that variable to the value x times y.",
			"And then return product.",
			"What does return mean here.",
			"Well return is the way we indicate that's how",
			"we're passing the output back out.",
			"So return something, is the same as, this is the output of the black box.",
			"So that's how you do it.",
			"Here's another way to implement it.",
			"We could just return x times y.",
			"x is a float.",
			"y is a float.",
			"So x times y is also a float.",
			"We don't even need to create another variable.",
			"So that's a different way to implement the exact same black box.",
			">> Now take a moment, pause the video again,",
			"and try and define add two ints, which is the other function that we",
			"talked about a moment ago.",
			"Again here, I've put the function declaration, and so the semicolon,",
			"and an open curly brace and a closed curly",
			"brace to indicate where we will fill in the contents of add two ints,",
			"so that we define the particular behavior inside the black box.",
			"So pause the video.",
			"And take as much time as you need to try and define",
			"an implementation of add two ints, such that when the function outputs a value,",
			"it does, in fact, return the sum of the two inputs.",
			"So just like the previous example, there are several different ways",
			"that you could implement add two ints.",
			"Here's one.",
			"In here in orange I've just had some comments--",
			"I've just added some comments to indicate",
			"what's happening on each line of code.",
			"So I declare a variable called sum of type int.",
			"I say sum equals a plus b.",
			"That's where we're actually doing the work adding a and b together.",
			"And I return sum.",
			"And that makes sense because sum is a variable of type int.",
			"And what's the data type that this function tells me it's going to output?",
			"Int.",
			"So I'm returning sum, which is an integer variable.",
			"And that makes sense given what we've declared and defined our function",
			"to do.",
			">> Now you can also define the function this way,",
			"int sum equals a plus b-- skip that first step-- and then, return sum.",
			"Now you could have also implemented it this way,",
			"which I highly do not recommend.",
			"This is bad style for one thing and really bad design,",
			"but it does, in fact, work.",
			"If you take this code, which is int add bad adder dot c, and use it.",
			"It actually does add two integers together.",
			"It's a very poor implementation of this particular behavior.",
			"But it does work.",
			"It's just here to illustrate the point that we don't really",
			"care what happens inside the black box, as long",
			"as it has the output that we expect.",
			"This is a poorly designed black box.",
			"But at the end the day, it does still output the sum of a plus b.",
			"All right.",
			"So we've declared functions.",
			"And we've defined function.",
			"So that's really good.",
			"Now let's start to use the functions that we've declared and we've defined.",
			"To call a function-- it's actually pretty easy-- all you need to do",
			"is pass it appropriate arguments, arguments of the data type",
			"that it expects, and then assign the return",
			"value of that function and this-- excuse me--",
			"assign the return value of that function to something of the correct type.",
			">> So let's have a look at this in practice in a file",
			"called adder 1 dot c, which I have in my cs50 IDE.",
			"So here is adder 1 dot c.",
			"At the beginning you see I have my includes, pound include,",
			"standard IO, and cs50 dot h.",
			"And then I have my function declaration.",
			"This is where I'm telling the compiler I'm",
			"going to be writing a function called add two ints.",
			"It's going to output an integer type variable.",
			"That's what this part is right here.",
			"And then I have two inputs to it a and b, each of which is an integer.",
			"Inside of main, I ask the user for input by saying, give me an integer.",
			"And they are prompted to forget int, which is a function that",
			"is included in the cs50 library.",
			"And that gets stored in x, an integer variable.",
			">> Then we prompt them for another integer.",
			"We get another integer and store that in y.",
			"And then, here on line 28, is where we make our function call.",
			"We are saying, int z equals add 2 ints x comma y.",
			"Do you see why this makes sense?",
			"x is an integer type variable and y is an integer type variable.",
			"So that's good.",
			"That make sense with what our function declaration on line 17 looks like.",
			"The comma separated input list expects two integers, a and b.",
			"In that case, we can call them whatever we want.",
			"It just expects two integers.",
			"And x is an integer and y is an integer.",
			"That works.",
			">> And we know that function is going to output an integers as well.",
			"And so we are storing the output of the function,",
			"add two ints, in an integer type variable, which we're calling z.",
			"And then we can say, the sum of percent i and percent i is percent i.",
			"x, y and z respectively filling in those percent i's.",
			"What is the definition of add two ints look like?",
			"It's pretty simple.",
			"It's one of the ones we just saw a second ago,",
			"int sum equals a plus b return sum.",
			"Does this work?",
			"Let's save the file.",
			"And then down here on my terminal I'm going to make adder 1,",
			"and I clear my screen.",
			"I'm going to zoom in because I know it's a little difficult to see.",
			"",
			">> So we compile this program as adder 1.",
			"So we can do dot slash adder 1.",
			"Give me an integer, 10.",
			"Give me another integer, 20.",
			"The sum of 10 and 20 is 30.",
			"So we made a successful function call.",
			"You can run the function again, negative 10, 17 sum of negative 10 and 17 is 7.",
			"This function works.",
			"It has the behavior that we expect it to.",
			"And so we've made a successful function, definition, declaration,",
			"and a successful function call.",
			"Couple miscellaneous points about functions",
			"before we conclude this section.",
			"Recall from our discussion of data types,",
			"previously, that functions can sometimes take no inputs.",
			"If that's the case, we declare the function",
			"as having a void argument list.",
			"Do you recall what the most common function",
			"we've seen so far that takes a void argument list is?",
			"It's main.",
			"Recall also that function sometimes don't actually have an output.",
			"In that case, we declare the function as having a void return type.",
			"Let's conclude this section by tackling a practice problem.",
			">> So here's the problem laid out.",
			"I want you to write a function called valid triangle.",
			"What this function should do is take three real numbers",
			"that represent the lengths of the three sides of a triangle as its parameters,",
			"or its arguments, or its inputs-- another set of synonyms",
			"that you might encounter.",
			"This function should either output true or false",
			"depending on whether those three lengths are capable of making a triangle.",
			"Do you remember the data type that we used to indicate true or false?",
			"Now how do you implement this?",
			"Well know there are a couple of rules regarding triangles",
			"that are actually useful to know.",
			"A triangle can only have sides with positive length.",
			"That makes sense.",
			"You're probably saying, duh.",
			"The other thing to note though, is that the sum",
			"of the lengths of any two sides of the triangle",
			"has to be greater than the length of the third side.",
			"That's actually true.",
			"You can't have a triangle of sides 1, 2 and 4, for example, because 1 plus 2",
			"is not greater than 4.",
			"So those are the rules that determine whether or not the three",
			"inputs can conceivably form a triangle.",
			"So take a couple of minutes and declare and then define",
			"this function called valid triangle, such that it actually",
			"has the behavior specified here.",
			">> It will output true if those three sides are capable of comprising a triangle,",
			"and false otherwise Ready to see how you did?",
			"Here's one implementation of valid triangle.",
			"It's not the only one.",
			"Yours might vary slightly.",
			"But this one does, in fact, have the behavior that we expect.",
			"We declare our function at the very top, bool valid triangle",
			"float x float y float z.",
			"So again, this function takes three real numbers",
			"as its arguments, floating point value variables,",
			"and outputs a true or false value, which is a Boolean, recall.",
			"So that's why the return type is bool.",
			"Then we define the function.",
			"First thing we do is check to make sure that all of the sides are positive.",
			"If x is less than or equal to 0, or if y is equal to 0,",
			"or if z is less than or equal to 0, that can't possibly be a triangle.",
			"They don't have positive sides.",
			"And so we can return false in that situation.",
			"Next, we check to make sure that every pair of inputs",
			"is greater than the third one.",
			">> So if x plus y is less than or equal to z,",
			"or if x plus z is less than or equal to y,",
			"or if y plus z is less than or equal to x, that also can't be a valid triangle.",
			"So we return false again.",
			"Assuming we passed both of the checks though, then we can return true.",
			"Because those three sides are capable of returning--",
			"of creating a valid triangle.",
			"And that's it.",
			"You've now declared and defined.",
			"And you may be able to now use and call this function.",
			"Great job.",
			"I'm Doug Lloyd.",
			"This is cs50.",
			""
		],
		"is_youtube": false
	},
	"video_010": {
		"section": "CS50x 2021",
		"subsection": "Week 2",
		"unit": "Shorts",
		"video_sources": [
			"https://edx-video.net/HarvardXCS50-V006200_DTH.mp4",
			"https://edx-video.net/HarvardXCS50-V006200/HarvardXCS50-V006200.m3u8"
		],
		"video_duration": 461,
		"speech_period": [
			5.3, 2.0, 2.666, 2.414, 2.11, 4.37, 5.735, 3.235, 1.215, 3.125, 2.014,
			2.166, 1.369, 2.541, 1.181, 2.249, 5.25, 3.07, 2.27, 4.04, 2.36, 2.5,
			4.22, 1.84, 3.06, 1.959, 2.791, 2.31, 4.16, 3.46, 3.03, 2.57, 2.995,
			2.715, 5.72, 1.82, 2.89, 1.0, 3.22, 5.14, 5.4, 6.96, 5.64, 0.54, 7.804,
			2.916, 2.92, 2.39, 1.93, 4.19, 3.59, 1.84, 3.87, 5.81, 2.207, 0.833, 3.96,
			3.47, 4.115, 4.025, 1.86, 3.9, 4.99, 3.15, 2.53, 3.14, 4.307, 1.458,
			2.625, 5.15, 4.82, 5.03, 3.4, 2.6, 2.01, 3.06, 1.21, 3.77, 5.399, 4.781,
			5.66, 4.769, 1.541, 2.166, 2.304, 2.75, 4.16, 3.57, 2.59, 3.73, 3.9, 3.31,
			3.95, 4.92, 2.9, 4.12, 2.35, 2.71, 3.71, 3.4, 1.09, 2.102, 2.208, 1.76,
			3.45, 1.81, 2.21, 3.32, 1.11, 1.89, 3.1, 3.87, 3.65, 6.34, 0.5, 2.833,
			1.937, 2.652, 1.208, 1.34, 1.309, 2.041, 2.41, 2.33, 2.9, 4.47, 1.06,
			4.74, 2.06, 5.01, 5.14, 3.18, 5.58, 2.52, 3.667, 1.833, 5.41, 1.47, 3.299,
			2.791, 5.11, 3.86, 5.46, 3.2, 2.122
		],
		"transcript_en": [
			"",
			"DOUG LLOYD: As you start working with functions,",
			"another thing is going to become really important to understand,",
			"which is the concept of variable scope.",
			"So scope is a characteristic of a variable",
			"that defines from which functions that variable can be accessed.",
			">> There are two primary scopes in C, local variables and global variables.",
			"Now, local variables can only be accessed within the functions",
			"in which they're created.",
			"They can't be accessed by every other function that exists in your program,",
			"only the function in which it was created.",
			"Global variables, on the other hand, can be accessed",
			"by any function in the program.",
			"And the reason for that is because they're not created inside",
			"of any particular function.",
			"We declare them outside of all of the functions, which",
			"means that every function knows where it is and can access and manipulate it.",
			">> So far in the course you've pretty much been working exclusively",
			"with local variables.",
			"Here's an example of a very, very simple main function and a very simple",
			"additional function that we've written.",
			"In this case, x, which I've colored green just",
			"to highlight the locality or the scope of that variable,",
			"is local to the function triple.",
			"main cannot refer to x at all.",
			"It doesn't know what it is.",
			"No other function, in fact, if we had additional functions in here,",
			"could refer to x.",
			">> Similarly, results which I've colored blue, is local only to main.",
			"Only main knows what the variable result is.",
			"triple cannot use it.",
			">> Now as I mentioned, global variables do exist.",
			"If you declare that variable outside of any function,",
			"all of the functions in the program can refer to it.",
			"So in this case I've highlighted in green a global variable declaration.",
			"In this case, the variable being declared",
			"is called global, just to be extremely clear about it.",
			"It is of type float.",
			"And I assign it the value 0.5050.",
			">> You'll notice that in main and in triple, I am able to refer to global.",
			"And in fact, if I go through the program as indicated, main first calls triple,",
			"triple multiplies global by 3, which sets its value to 1.5-something,",
			"1.51 or something like that, and then main also prints out the value",
			"of global.",
			"So main will not print out 0.5050, it will print out global times 3, 1.51.",
			"So you've got to be careful when you're working with global variables.",
			"While they're very flexible in being able to pass information",
			"around so that every function can use it,",
			"it also can have some dangerous consequences",
			"if one function changes the value of a variable",
			"before you expect it to be changed.",
			">> Why does this distinction matter?",
			"Why do we care whether some variables are local and others are global?",
			"Well, for the most part, local variables in C are what's called passed by value",
			"when we make a function call.",
			"What does that mean?",
			">> Well, when a variable is passed by value, the callee, which",
			"is another way of saying the function that is receiving the variable that",
			"gets passed in as an input, it actually doesn't receive that variable itself.",
			"It receives its own copy of it to work with.",
			"This is a really important distinction.",
			"We just saw a second ago that with global variables,",
			"if we manipulate the global variable in one function, the effect",
			"in that one function carries through to every other function.",
			">> But with local variables, that's not true.",
			"Each function when it receives variables as input",
			"receive copies of those variables, not the variables themselves.",
			"So what is the side effect of that?",
			"That means that the variable in the caller, the function that",
			"is making the function call, is unchanged unless you override it.",
			">> For example, in this code foo is not changed at all.",
			"Int foo equals 4, call triple of foo, inside of triple,",
			"we would expect that foo would be multiplied by 3 and returned,",
			"but there's actually no effect.",
			">> Here though, a very subtle difference.",
			"This does have the effect we want.",
			"Do you see why?",
			"We're overriding foo in main this time.",
			">> So int foo equals 4, foo equals triple foo, when we make that call,",
			"triple gets its own copy of foo, its own copy of 4.",
			"It says return 4 times 3, or whatever variable gets passed in times 3.",
			"And then we assign the return value of triple to foo again.",
			"So this actually would overwrite foo.",
			"This is the only way to do this with local variable.",
			"So now if we add another line of code here",
			"at the end of main to print out the value of foo,",
			"it would in fact print out 12.",
			">> Variable scope is generally not too much of a problem",
			"if you name all of your variables different things.",
			"But it can get kind of nasty if the same variable name",
			"appears in multiple functions, which will happen a lot.",
			"If you ever do work in the real world where",
			"you are working on collaborative programs and people in different teams",
			"are working together to write the same program or the same set of programs,",
			"they'll frequently reuse variable names, particularly common ones",
			"like x, y, i, j, and so on.",
			">> But when variables have the same name, scope issues",
			"can get a little trickier to parse.",
			"For example, do you know what would be printed out",
			"at the end of this particular program?",
			"Take a minute.",
			"Pause the video and read through this program.",
			"You can see at the top we have a function declaration",
			"for a function called increment.",
			"That function takes a single parameter, an integer which we call x.",
			"And it outputs an integer.",
			"That's the return type at the beginning.",
			">> Then we have main, a couple of lines of code in main, the last of which",
			"is a print statement.",
			"And remember, that's the question here.",
			"What is actually going to be printed at the end of this function?",
			"And then we actually have the definition of increment below.",
			">> So take a minute, step through the code, trace things out.",
			"Do you know what will be printed at the end of this particular program?",
			">> All right.",
			"Hopefully, you've taken a few seconds to try and parse this one out.",
			"Let's do it together.",
			">> So I've crossed out increment's declaration at the top there.",
			"It was kind of a distraction.",
			"It's not its own variable.",
			"It doesn't have its own scope.",
			"It's just a function declaration, so for purposes",
			"of trying to parse out what's happening in this program,",
			"we might as well just avoid it.",
			">> Now we have in this case, the reason this problem is tricky",
			"is because we have local variables in both main and increment, each of which",
			"is called x.",
			"And of course the crux of this issue is trying to suss out which x gets changed",
			"and how does it get changed.",
			"So I've colored every instance of x that's local to main red.",
			"And I've colored every instance of x that's local to increment blue.",
			">> Notice in that third line of main, y equals increment",
			"x, that increment is not being passed main's x, or the red x.",
			"It's getting passed a copy of it.",
			"And it's only going to work with that copy of it, the blue x.",
			"If you're mathematically inclined, you might",
			"have instead thought of this as x sub m for main and x sub i for increment.",
			"But it's the same idea.",
			"x sub m, or the red x's in the previous slide,",
			"are the variables that are local-- is the instance of x rather that",
			"is local to main, and x sub i, or the blue variables in the previous slide,",
			"are the instances of x that are local to increment.",
			">> So, were you able to figure out what this function printed at the end?",
			"I'm Doug Lloyd, and this is CS50.",
			""
		],
		"is_youtube": false
	},
	"video_011": {
		"section": "CS50x 2021",
		"subsection": "Week 2",
		"unit": "Shorts",
		"video_sources": [
			"https://edx-video.net/HARCS50X2016-V048500/HARCS50X2016-V048500.m3u8",
			"https://edx-video.net/HARCS50X2016-V033200/HARCS50X2016-V033200.m3u8",
			"https://edx-video.net/HARCS50X2016-V048500_DTH.mp4"
		],
		"video_duration": 841,
		"speech_period": [
			3.388, 1.716, 0.916, 1.66, 1.82, 3.26, 3.22, 3.53, 0.75, 4.19, 3.42, 1.96,
			2.6, 3.0, 2.84, 3.66, 2.57, 3.63, 0.87, 2.82, 2.3, 3.04, 3.33, 3.02, 2.61,
			5.11, 4.52, 4.18, 3.91, 3.72, 4.09, 5.89, 4.0, 3.76, 2.0, 3.13, 4.62,
			4.72, 2.98, 2.79, 2.86, 4.782, 1.208, 4.14, 3.62, 2.51, 4.07, 4.23, 3.65,
			6.55, 3.66, 4.24, 2.88, 2.23, 3.31, 3.6, 4.32, 3.66, 3.29, 3.11, 1.8,
			1.99, 1.87, 3.82, 4.31, 0.63, 2.208, 2.882, 2.89, 1.97, 3.73, 1.59, 1.86,
			2.75, 2.785, 1.875, 4.55, 2.28, 1.45, 1.41, 2.5, 3.57, 1.35, 2.04, 3.5,
			6.95, 2.16, 1.15, 2.23, 3.05, 3.69, 3.7, 3.75, 4.11, 2.91, 3.67, 1.83,
			3.35, 3.97, 4.06, 3.82, 4.57, 2.31, 1.45, 3.89, 2.99, 4.88, 1.49, 3.95,
			3.37, 4.39, 3.53, 3.3, 2.67, 6.08, 3.67, 3.1, 4.87, 0.73, 5.049, 2.541,
			1.66, 2.29, 3.88, 3.3, 1.42, 1.52, 3.1, 4.89, 3.7, 2.46, 3.39, 2.18, 3.18,
			4.08, 6.03, 2.36, 3.66, 1.39, 3.93, 2.757, 3.083, 1.23, 2.02, 3.509,
			2.041, 2.83, 2.03, 3.95, 1.66, 2.17, 2.38, 3.111, 2.249, 3.24, 1.66, 3.5,
			2.13, 3.11, 2.62, 4.47, 4.44, 1.54, 3.58, 3.56, 3.12, 2.866, 1.833, 5.031,
			3.63, 3.35, 1.71, 2.35, 3.61, 2.15, 3.74, 2.199, 1.791, 2.37, 4.47, 2.2,
			1.215, 2.595, 2.46, 3.67, 1.75, 4.54, 3.72, 5.8, 1.17, 1.71, 3.28, 2.28,
			3.61, 2.74, 2.15, 5.322, 1.208, 2.63, 2.0, 3.27, 2.45, 2.49, 1.9, 4.2,
			4.22, 4.97, 3.37, 3.279, 2.041, 3.56, 4.01, 2.406, 2.624, 1.34, 3.87,
			5.08, 3.68, 3.95, 3.72, 1.44, 3.12, 3.22, 3.53, 3.76, 2.847, 1.833, 3.71,
			4.72, 3.82, 2.747, 2.083, 1.59, 1.291, 5.209, 1.8, 2.28, 1.88, 1.8, 1.81,
			2.43, 2.11, 2.49, 2.66, 3.28, 4.36, 3.29, 2.0, 3.26, 3.09, 4.61, 1.46,
			3.86, 3.087, 1.583, 3.339, 1.791, 3.25, 4.35, 1.65, 3.46, 3.72, 1.73,
			3.13, 2.25, 4.99, 1.87, 5.602, 2.708, 3.49, 2.45, 3.53, 2.96, 2.83, 3.23,
			3.08, 1.707
		],
		"transcript_en": [
			">> [MUSIC PLAYING]",
			"",
			"DOUG LLOYD: All right.",
			"Working with single variables is pretty fun.",
			"But what if we want to work with a lot of variables,",
			"but we don't want to have a bunch of different names flying around our code?",
			"In this case, arrays are going to come in really handy.",
			"Arrays are a really fundamental data structure for any programming language",
			"that you will use.",
			"And they're really, really useful, particularly, as we'll see, in CS 50.",
			">> We use arrays to hold values of the same data type",
			"at contiguous memory locations.",
			"That is to say, it's a way that we can group",
			"a bunch of integers together in memory or a bunch of characters",
			"or floats in memory really close together and work",
			"with them without having to give each one its own unique name, which can",
			"get cumbersome after a little while.",
			">> Now, one way to analogize arrays is to think about your local post",
			"office for a second.",
			"So step away from programming and just close your eyes",
			"and visualize in your mind your local post office.",
			"Usually, in most post offices, there's a large bank",
			"a post office boxes on the wall.",
			">> An array is a giant block of contiguous memory,",
			"the same way that a mail bank in your post office",
			"is a large space on the wall of the post office.",
			"Arrays have been partitioned into small, identically sized blocks of space,",
			"each of which is called an element, in the same way that the wall of the post",
			"office has been partitioned into small, identically sized blocks of space,",
			"which we call a PO box.",
			"Each element of the array can store a certain amount of data,",
			"just as each post office box is able to hold a certain amount of mail.",
			">> What can be stored in each element of the array is variables of the same data",
			"type, such as int or char, just like in your post office box,",
			"you can only fit things of a similar type,",
			"such as letters or small packages.",
			"Lastly, we can access each element of the array directly by index number,",
			"just as we can access our post office box by knowing its mailbox number.",
			"Hopefully, that analogy helps you get your head",
			"around the idea of arrays by analogizing to something else",
			"that you are probably already familiar with.",
			">> In C, the elements of an array are indexed starting from 0, not from 1.",
			"And this is really important.",
			"And in fact, this is why we, in CS 50, and why computer scientists frequently",
			"will count from 0, is because of C's array",
			"indexing, which always starts at 0.",
			"So if an array consists of n elements, the first element of that array",
			"is located at index 0, and the last element of the array",
			"is located at index n minus 1.",
			"Again, if there's n elements in our array, the last index is n minus 1.",
			">> So if our array has 50 elements, the first element is located at index 0,",
			"and the last element is located at index 49.",
			"Unfortunately, or fortunately, depending on your perspective,",
			"C is very lenient here.",
			"It will not prevent you from going out of bounds of your array.",
			"You could access the minus 3 element of your array",
			"or the 59th element of your array, if your array only has 50 elements.",
			"It won't stop your program from compiling, but at run time,",
			"you might encounter a dreaded segmentation fault",
			"if you start to access memory that is outside the bounds of what",
			"you asked your program to give you.",
			"So do be careful.",
			">> What does an array declaration look like?",
			"How do we code an array into existence like we code any other variable?",
			"There are three parts to an array declaration-- a type, a name,",
			"and a size.",
			"This is very similar to a variable declaration, which",
			"is just a type and a name, the size element being",
			"the special case for an array, because we are getting a bunch of them",
			"at the same time.",
			">> So the type is what kind of variable you want each element of the array to be.",
			"Do want it to an array of integers?",
			"Then, your data type should be int.",
			"Do you want it to be an array of doubles or floats?",
			"Data type should be double or float.",
			"The name is what you want to call your array.",
			"What do you want to name this giant bank of integers or floats or chars",
			"or doubles, or whatever have you?",
			"What do you want to call it?",
			"Pretty self explanatory.",
			">> Lastly, size, which goes inside of square brackets,",
			"is how many elements you would like your array to contain.",
			"How many integers do you want?",
			"How many floats do you want?",
			">> So for example, int student grades 40.",
			"This declares an array called Student grades, which consists of 40 integers.",
			"Pretty self explanatory, I hope.",
			"Here's another example.",
			"Double menu prices 8.",
			"This creates an array called Menu prices, which consists",
			"of room in memory for eight doubles.",
			"",
			">> If you think of every element of an array of type data-type,",
			"so for example, a single element of an array of type int, the same way you",
			"would think of any other variable of type int,",
			"all the familiar operations that we discussed previously in the Operations",
			"video will make sense.",
			"So here, we could declare an array of Booleans called Truthtable,",
			"which consists of room for 10 Booleans.",
			">> And then, just like we could just assign a value to any other variable of type",
			"Boolean, we could say something like Truthtable square bracket",
			"2, which is how we indicate, which element of the truth table?",
			"The third element of the truth table, because remember,",
			"we're counting from 0.",
			"So that's how we indicate the third element of the truth table.",
			"Truthtable 2 equals false, just like we could declare--",
			"or we could assign, rather, any Boolean type variable to be false.",
			">> We can also use it in conditions.",
			"if(truthtable 7 == true), which is to say,",
			"if the eighth element of Truthtable is true,",
			"maybe we want to print a message to the user, printf(\"TRUE!n\");.",
			"That causes us to say Truthtable 10 equals true, right?",
			"Well, I can, but it's pretty dangerous, because remember,",
			"we have an array of 10 Booleans.",
			"So the highest index that the compiler has given us is 9.",
			">> This program will compile, but if something else in memory",
			"exists where we would expect Truthtable 10 to go,",
			"we could suffer a segmentation fault. We might get away with it, but in general,",
			"pretty dangerous.",
			"So what I'm doing here is legal C, but not necessarily the best move.",
			"Now, when you declare and initialize an array simultaneously,",
			"there's actually a pretty special syntax that you",
			"can use to fill up the array with its starting values.",
			"It can get cumbersome to declare an array of size 100,",
			"and then have to say, element 0 equals this; element 1 equals this;",
			"element 2 equals that.",
			"What's the point, right?",
			">> If it's a small array, you could do something like this.",
			"Bool truthtable 3 equals open curly brace and then comma",
			"separate the list of elements that you want to put in the array.",
			"Then close curly brace semicolon.",
			"This creates an array of size three called Truthtable,",
			"with elements false, true, and true.",
			"And in fact, the instantiation syntax I have here is",
			"exactly the same as doing the individual element syntax below.",
			"These two ways of coding would produce the exact same array.",
			">> Similarly, we could iterate over all of the elements",
			"of an array using a loop, which, in fact, is a very strongly recommended",
			"at-home exercise.",
			"How do you create an array of 100 integers, where",
			"every element of the array is its index?",
			"So for example, we have a array of 100 integers, and in the first element,",
			"we want to put 0.",
			"In the second element, we want to put 1.",
			"In the third element, we want to put 2; and so on and so on.",
			"That's a really good at-home exercise to do that.",
			"",
			">> Here, it doesn't look like too much has changed.",
			"But notice that in between the square brackets, this time,",
			"I've actually omitted the number.",
			"If you're using this very special instantiation",
			"syntax to create an array, you actually don't",
			"need to indicate the size of the array beforehand.",
			"The compiler is smart enough to know that you actually",
			"want an array of size 3, because you put three elements",
			"to the right of the equal sign.",
			"If you had put four, it would have given you a truth table of size four;",
			"and so on and so on.",
			">> Arrays are not restricted to a single dimension, which is pretty cool.",
			"You can actually have as many side specifiers as you wish.",
			"So for example, if you want to create a board for the game Battleship, which,",
			"if you ever played, is a game that is played with pegs on the 10 by 10 grid,",
			"you could create an array like this.",
			"You could say Bool battleship square bracket 10",
			"closed square bracket square bracket 10 closed square bracket.",
			">> And then, you can choose to interpret this in your mind as a 10",
			"by 10 grid of cells.",
			"Now, in fact, in memory, it really does just",
			"remain a 100 element, single dimensional array.",
			"And this, in fact, goes for if you have three dimensions or four or five.",
			"It really just does multiply all of the indices--",
			"or all of the size specifiers-- together,",
			"and you just get a one-dimensional array of that size.",
			">> But in terms of organization and visualization and human perception,",
			"it can be a lot easier to work with a grid",
			"if you're working on a game like Tic-tac-toe or Battleship,",
			"or something like that.",
			"It's a great abstraction, instead of having",
			"to think about a Tic-tac-toe board as a line of nine",
			"squares or a Battleship board as a line of 100 squares.",
			"A 10 by 10 grid or a three by three grid is probably",
			"a lot more easy to perceive.",
			"",
			">> Now, something really important about arrays.",
			"We can treat each individual element of the array as a variable.",
			"We saw that earlier when we were assigning",
			"the value True to certain Booleans or testing them in conditionals.",
			"But we can't treat entire arrays themselves as variables.",
			"We cannot, for example, assign one array to another array using the assignment",
			"operator.",
			"It's not legal C.",
			">> If we want to, for example-- what we would be doing in that example",
			"would be to copy one array into another.",
			"If we want to do that, we actually need to use a loop to copy over",
			"each individual element one at a time.",
			"I know it's a little time consuming.",
			">> So for example, if we had these couple of lines of code, would this work?",
			"Well, no, it wouldn't, right?",
			"Because we're trying to assign food to bar.",
			"That's not going to work, because it's an array,",
			"and we just described that that's not legal C.",
			">> Instead, if we want to copy the contents of food",
			"into bar, which is what we're trying to do here,",
			"we would need a syntax like this.",
			"We have a for loop that goes from J is equal to 0 up to 5,",
			"and we increment J on every iteration of the loop and assign elements like that.",
			"This would result in bar also being one, two, three, four, five,",
			"but we have to do it this very slow element-by-element way,",
			"instead of by just copying the entire array.",
			"In other programming languages, more modern ones,",
			"you can, in fact, do just that simple equals syntax.",
			"But C, unfortunately, we're not allowed to do that.",
			">> Now, there's one other thing I want to mention",
			"about arrays that can be a little bit tricky the first time you",
			"work with them.",
			"We discussed in a video about variable scope,",
			"that most variables in C, when you call them in functions, are passed by value.",
			"Do you remember what it means to pass something by value?",
			"It means we're making a copy of the variable that's being passed in.",
			"The callee function, the function that's receiving the variable,",
			"doesn't get the variable itself.",
			"It gets its own local copy of it to work with.",
			">> Arrays, of course, do not follow this rule.",
			"Rather, what we call this is passing by reference.",
			"The callee actually does receive the array.",
			"It does not receive its own local copy of it.",
			"And if you think about it, this makes sense.",
			"If arrays are really large, it takes so much time and effort",
			"to make a copy of an array of 100 or 1,000 or 10,000 elements,",
			"that it's not worth it for a function to receive a copy of it,",
			"do some work with it, and then just be done with the copy;",
			"it doesn't need to have it hanging around anymore.",
			">> Because arrays are some bulky and cumbersome,",
			"we just pass them by reference.",
			"We just trust that function to, don't break anything.",
			"So it does actually get the array.",
			"It doesn't get its own local copy of it.",
			">> So what does this mean, then, when the callee",
			"manipulates elements of the array?",
			"What happens?",
			"For now, we'll gloss over why exactly this",
			"happens, why arrays are passed by reference",
			"and everything else is passed by value.",
			"But I promise you, we will return and give you the answer",
			"to this in a later video.",
			">> Here's one more exercise for you before we wrap up things on arrays.",
			"The bunch of code here, that's not particularly good style,",
			"just I'll make that caveat.",
			"There's no comments in here, which is pretty bad form.",
			"But it's only because I wanted to be able to fit everything on the screen.",
			">> At the top, you can see that I have two function declarations for set array",
			"and set int.",
			"Set array apparently takes an array of four integers as its input.",
			"And set int apparently takes a single integer as its input.",
			"But both of them don't have an output.",
			"The output, the return type, of each one is void.",
			"In Main, we have a couple of lines of code.",
			"We declare an integer variable called A and assign it the value 10.",
			"We declare an array of four integers called B and assign the elements 0, 1,",
			"2, and 3, respectively.",
			"Then, we have a call to set int and a call to set array.",
			"The definitions of set array and set int are down below, at the bottom.",
			">> And so, again, I ask you the question.",
			"What gets printed out here at the end of Main?",
			"There's a printout col. I'm printing out two integers.",
			"I'm printing out the contents of A and the contents of B square bracket 0.",
			"Pause the video here and take a minute.",
			"Can you figure out what this function will print at the end?",
			"Hopefully, if you recall the distinction between passing by value",
			"and passing by reference, this problem wasn't too tricky for you.",
			"And the answer you would have found is this.",
			"If you're not really sure as to why that's the case, take a second,",
			"go back, review what I was just discussing about passing arrays",
			"by reference, versus passing other variables by value,",
			"and hopefully, it'll make a little bit more sense.",
			">> I'm Doug Lloyd, and this is CS50.",
			""
		],
		"is_youtube": false
	},
	"video_012": {
		"section": "CS50x 2021",
		"subsection": "Week 2",
		"unit": "Shorts",
		"video_sources": [
			"https://edx-video.net/HarvardXCS50-V006100_DTH.mp4",
			"https://edx-video.net/HarvardXCS50-V006100/HarvardXCS50-V006100.m3u8"
		],
		"video_duration": 470,
		"speech_period": [
			2.48, 3.98, 2.89, 2.45, 4.56, 1.95, 2.77, 1.91, 2.2, 5.494, 1.666, 2.105,
			1.945, 2.23, 1.95, 2.74, 2.59, 2.21, 5.2, 4.22, 2.27, 3.33, 7.31, 2.22,
			1.745, 4.995, 4.39, 2.63, 3.21, 1.5, 1.041, 2.929, 4.53, 3.272, 1.208,
			2.45, 3.74, 2.29, 2.11, 4.03, 2.167, 2.791, 1.872, 1.93, 4.069, 2.291,
			2.21, 2.489, 2.291, 1.62, 3.31, 2.89, 6.13, 3.15, 2.25, 2.39, 4.12, 5.06,
			6.14, 1.61, 4.2, 2.31, 2.2, 5.63, 1.86, 8.32, 2.56, 2.64, 2.27, 4.03,
			3.69, 1.76, 3.39, 4.77, 2.65, 3.92, 4.01, 8.86, 1.71, 3.88, 2.48, 4.619,
			5.791, 3.12, 3.81, 3.93, 3.77, 2.29, 5.52, 2.91, 5.55, 2.75, 3.33, 2.98,
			2.63, 1.82, 4.24, 1.322, 1.988, 3.59, 3.79, 4.61, 3.12, 2.39, 3.67, 3.57,
			5.005, 1.5, 3.595, 2.81, 4.05, 10.85, 3.97, 2.37, 4.1, 1.92, 4.799, 2.041,
			3.6, 2.01, 3.531, 2.541, 1.358, 2.16, 2.31, 4.99, 1.28, 2.166, 1.274,
			0.62, 2.73, 1.6, 2.02, 3.09, 3.55, 3.05, 3.91, 4.32, 2.49, 2.68, 2.656,
			3.124, 1.708, 3.112, 4.096, 4.414, 0.93, 2.07, 1.287
		],
		"transcript_en": [
			">> [MUSIC PLAYING]",
			"",
			">> DOUG LLOYD: All right, so let's talk about command-line arguments.",
			"So, so far in the course pretty much all of your programs",
			"have probably started like this-- int main void.",
			"We've been collecting user input if we need it",
			"in our programs, such as the Mario program, for example,",
			"by in-program prompts.",
			"We haven't needed to modify the declaration of main,",
			"because instead inside of main we just say, you may call it to get int.",
			"How large do you want the pyramid to be?",
			"Or you may call it to get float-- how much change",
			"should I output to the user?",
			">> There is another way though, and if we want our users",
			"to be able to provide data to our program",
			"at runtime instead of while the program is running,",
			"a subtle distinction but sometimes a very useful one,",
			"we need a new form of declaring main.",
			"We can't use int main void if we want to collect other data at the command-line",
			"when the user runs the program, hence command-line arguments.",
			">> To collect these command-line arguments from the user,",
			"change your declaration of main to look like this-- int",
			"main, open paren, int argc, comma, string argv, square brackets,",
			"and then open curly brace.",
			"So what does that mean already?",
			"Well, we are passing in two parameters, or arguments, or inputs to main.",
			"One, an integer called argc, and the other is what?",
			"",
			"It's an array of strings, right?",
			"We see that square bracket notation.",
			"It's an array of strings.",
			"It's not an individual string, it's an array of strings.",
			"And these two arguments, argc and argv, enable you to know what data the user",
			"has provided at the command-line and how many things they",
			"provided at the command-line.",
			"Pretty useful things to work with.",
			">> Argc stands for argument count, and you should know, by the way,",
			"that you could call argc whatever you want it.",
			"You can call argv whatever you wanted.",
			"These are just conventional names that we use for them-- argument count,",
			"and as we'll see in a second, argument vector, argv.",
			"But you don't have to call them argc and argv if you don't want to,",
			"but conventionally, that's what we do.",
			">> So anyway, argc, the argument count.",
			"It's an integer-type variable and so, as you might expect, if we have two things",
			"that we're going to be finding out what these are typed",
			"and how much stuff the user typed, argc is",
			"going to tell us how much stuff the user typed.",
			"So it gives you a number of command-line arguments user",
			"typed when the program was executed.",
			"So if your program is run dot slash greedy,",
			"and inside of your greedy program your main function",
			"has the declaration int main int argc, string argv square brackets, then",
			"argc in that case is one.",
			"Now notice we don't count how many things",
			"the user typed after the program name.",
			"The program name itself counts as a command-line argument.",
			">> So dot slash greedy, in that case, argc is one.",
			"If the user typed slash greedy 1024 CS50 at the command-line, argc in that case",
			"would be three.",
			"And we know this because the way that the division between the strings",
			"is detected is whether there is a space, or a tab,",
			"or something like that between them.",
			"So any amount of white space, so-called, between the values typed command-line",
			"indicates how many there are.",
			"So dot slash greedy space 1024 space CS50, argc, in that case, is three.",
			">> Argv is the argument vector.",
			"Vector, by the way, is just another word for an array,",
			"and this is an array that stores strings.",
			"One string per element, which is the strings that the user actually",
			"typed at the command-line when the program was executed.",
			"Now, as is the case with any array, if you",
			"recall from our discussion of arrays, the first element of argv",
			"is always going to be found at argv square bracket zero.",
			"That's the first index of the argv array.",
			"So that will-- and in fact, that will always be the name of the program,",
			"will always be located at argv square bracket zero.",
			">> The last element of argv is always found at argv square brackets argc minus one.",
			"Do you see why?",
			"Remember how many elements exist in this array.",
			"Well, we know that-- it's argc number of elements.",
			"If the user typed three things at the command-line, argc is three.",
			"But because in c, when we're working with arrays, each element of the array,",
			"or rather the indices of the array, start at zero.",
			"If we have three elements in our array, we have an element at argv zero,",
			"an element at argv one, and an element at argv two.",
			"There is no element at argv three, and an array of size three.",
			"So that's why the last element of argv can always",
			"be found at argv square brackets argc minus one.",
			">> So let's assume the user executes the greedy program as follows--",
			"if they type in the command-line dot slash greedy space 1024 space CS50,",
			"and for whatever reason we've already prepared our greedy program",
			"to know and work with these command-line arguments.",
			"We didn't previously when we worked on it for the greedy problem,",
			"but let's say we've now modified it so that we do process",
			"the command-line arguments in some way.",
			"In this case, argv zero is dot slash greedy.",
			"What's argv one?",
			"Well, it's 1024, right?",
			"It is 1024, but here's a really important distinction--",
			"do you remember the data type of argv?",
			">> It stores strings, right?",
			"But it looks like 1024 is an integer value.",
			"This is a really important distinction, and is actually",
			"going to become something that you might encounter in later problems.",
			"Everything in argv is stored as a string.",
			"So argv one's contents are the string one, zero, two, four,",
			"consisting of those four characters.",
			"It's as if the user typed one, zero, two, four",
			"as individual letters or characters.",
			"It is not the integer 1024, and so you can't directly",
			"work with it by saying int 1,000, or rather int x equals argv one minus 24.",
			">> Intuitively, you might think of that as, OK, well it's 1,024 minus 24,",
			"so x is equal to 1,000.",
			"But in fact, that's not the case, because argv one is a string.",
			"The string 1024.",
			"Now there is a function that can be used to convert strings to integers.",
			"I won't spoil it for you now, but I'm sure Zamyla",
			"will be happy to tell you about it in the walkthrough for a future problem.",
			"But you can also find problems like-- excuse",
			"me, functions that would do this in reference 50,",
			"if you go to the reference guide you can find a function that",
			"will make this conversion for you.",
			"But again, in the walkthrough for a future problem,",
			"Zamyla will be happy to tell you what function",
			"it is that will convert the string 1024 to the integer 1024.",
			">> All right, so moving on.",
			"We've covered our argv zero, we've covered argv one.",
			"What's in argv two?",
			"CS50.",
			"That one's probably pretty self-explanatory.",
			"What's in argv three?",
			"Well again, we don't really know, right?",
			"We have an array of size three, that's how many elements the user",
			"typed at the command-line, so if we go to argv three,",
			"we're now overstepping the bounds of our array.",
			"The compiler will let us do this, there's no intuitive problem with it,",
			"but in terms of actually what's going to happen, we don't really know.",
			"It depends on what is located at the memory where",
			"argv three would be expected to be.",
			"And so we could end up getting away scot free.",
			"More likely than not, particularly when you're working with argv as opposed",
			"to any other array that's in our program,",
			"we're probably going to suffer a segmentation fault. So again,",
			"be sure not to overstep the bounds of your arrays, particularly argv,",
			"given its high degree of importance in your programs.",
			">> I'm Doug Lloyd.",
			"This is CS50.",
			""
		],
		"is_youtube": false
	},
	"video_013": {
		"section": "CS50x 2021",
		"subsection": "Week 3",
		"unit": "Lecture",
		"video_sources": [
			"https://edx-video.net/e3a37303-e03a-41f5-a397-e769f455b8d5.m3u8",
			"https://edx-video.net/e3a37303-e03a-41f5-a397-e769f455b8d5-mp4_720p.mp4"
		],
		"video_duration": 8725,
		"speech_period": [
			4.96, 44.222, 0.958, 3.12, 3.3, 3.27, 2.28, 3.87, 3.6, 1.92, 2.73, 4.32,
			2.85, 3.24, 2.545, 3.125, 1.035, 1.875, 2.97, 3.87, 2.91, 3.18, 2.4,
			3.392, 1.708, 5.25, 3.6, 3.99, 1.38, 2.4, 6.15, 2.73, 2.94, 2.31, 2.928,
			3.042, 2.19, 4.14, 1.83, 3.72, 2.85, 2.852, 1.583, 4.025, 4.44, 4.02,
			1.02, 3.12, 2.94, 2.37, 3.15, 1.53, 2.64, 2.57, 4.43, 4.37, 3.34, 4.14,
			3.47, 3.6, 2.76, 3.72, 4.35, 2.32, 4.46, 2.25, 2.43, 4.05, 2.22, 4.14,
			2.58, 1.71, 3.705, 1.875, 3.083, 3.277, 4.23, 3.51, 3.99, 0.88, 2.54,
			3.155, 2.125, 3.3, 2.67, 4.23, 2.68, 2.04, 3.86, 3.99, 2.25, 2.07, 2.66,
			3.61, 3.21, 0.54, 1.875, 2.535, 2.1, 2.85, 2.29, 3.86, 3.02, 1.013, 2.167,
			3.54, 3.21, 1.63, 4.07, 4.29, 1.02, 4.53, 4.95, 3.06, 2.34, 3.15, 1.8,
			3.45, 1.74, 2.43, 2.73, 4.23, 1.93, 1.79, 2.73, 1.98, 1.05, 2.79, 3.49,
			0.5, 2.82, 3.21, 3.072, 2.958, 2.64, 3.3, 3.9, 2.25, 2.94, 3.0, 1.9, 1.41,
			3.47, 3.61, 3.14, 3.75, 1.37, 2.5, 5.07, 2.67, 4.05, 2.43, 3.517, 2.583,
			2.57, 2.64, 2.31, 2.11, 2.475, 3.125, 3.57, 4.08, 3.63, 0.899, 3.401,
			2.87, 2.467, 2.333, 2.157, 1.833, 4.5, 4.02, 2.34, 3.27, 5.34, 2.22, 1.86,
			1.62, 4.38, 3.34, 2.228, 3.042, 3.36, 2.267, 2.833, 1.23, 4.17, 2.01,
			4.032, 1.458, 3.01, 3.14, 2.85, 3.107, 1.333, 4.23, 1.26, 4.59, 2.45,
			2.41, 4.56, 1.08, 3.39, 2.55, 3.408, 1.042, 2.42, 3.42, 3.82, 2.55, 2.55,
			1.92, 1.8, 2.055, 2.625, 5.14, 1.79, 1.14, 2.4, 3.495, 3.735, 0.9, 4.38,
			1.348, 1.292, 2.22, 2.97, 3.16, 1.88, 1.59, 2.97, 3.827, 2.083, 2.04,
			4.62, 3.36, 3.04, 2.0, 2.25, 2.44, 2.488, 1.792, 3.96, 0.81, 1.68, 3.72,
			2.97, 2.04, 3.76, 2.563, 2.167, 1.28, 2.41, 3.7, 2.0, 2.78, 1.75, 3.96,
			2.28, 4.47, 1.51, 2.48, 3.57, 3.1, 3.26, 3.7, 4.702, 3.208, 3.87, 2.04,
			2.1, 4.53, 1.35, 3.3, 2.47, 2.33, 3.06, 1.23, 2.25, 3.54, 0.99, 3.45, 3.9,
			1.27, 4.137, 3.083, 2.91, 4.47, 2.31, 1.98, 1.83, 1.41, 2.01, 3.248,
			3.292, 4.65, 5.07, 1.5, 4.11, 2.31, 5.92, 2.0, 2.49, 2.25, 4.243, 0.917,
			1.44, 2.75, 2.41, 0.81, 1.17, 0.9, 3.23, 4.64, 3.743, 0.667, 1.167, 1.333,
			2.99, 0.93, 1.74, 3.46, 1.25, 1.5, 2.75, 2.92, 3.45, 2.98, 2.48, 3.27,
			2.07, 0.667, 3.263, 2.13, 1.14, 2.13, 3.24, 3.07, 4.86, 5.85, 3.65, 1.29,
			0.63, 3.37, 2.64, 3.87, 1.793, 0.667, 1.62, 2.833, 1.517, 1.68, 2.52,
			3.57, 1.619, 1.887, 2.583, 1.5, 2.051, 2.18, 3.15, 2.6, 3.582, 2.458, 2.4,
			1.917, 3.723, 4.32, 4.08, 4.38, 2.61, 5.73, 3.93, 3.75, 3.42, 3.73, 2.75,
			2.25, 3.395, 0.625, 1.62, 2.375, 0.925, 1.5, 2.042, 2.875, 2.853, 3.88,
			3.47, 3.51, 3.12, 3.81, 5.02, 3.17, 2.85, 2.13, 2.94, 1.57, 2.03, 2.52,
			5.91, 2.7, 4.05, 2.34, 3.82, 3.39, 2.18, 2.25, 1.2, 3.48, 4.0, 4.07, 3.24,
			3.87, 4.26, 4.07, 1.75, 4.02, 1.68, 3.3, 4.56, 3.27, 2.92, 2.03, 2.58,
			3.24, 1.56, 4.32, 1.65, 1.77, 4.26, 3.3, 2.93, 3.38, 2.51, 5.07, 3.96,
			0.5, 2.23, 1.167, 0.571, 2.042, 2.76, 3.607, 1.583, 1.92, 4.5, 1.71, 2.52,
			4.15, 7.74, 3.07, 2.52, 2.42, 2.61, 1.8, 1.59, 1.703, 0.667, 1.917, 4.383,
			1.17, 4.2, 1.95, 2.39, 3.52, 0.29, 1.42, 2.07, 1.39, 3.47, 4.77, 2.01,
			1.48, 0.65, 1.708, 4.502, 3.06, 2.82, 3.48, 1.29, 3.72, 2.7, 5.19, 2.85,
			2.52, 3.93, 3.57, 0.61, 1.52, 2.79, 4.602, 2.208, 2.89, 2.36, 4.59, 1.95,
			4.08, 3.15, 5.63, 2.365, 2.625, 0.48, 2.2, 2.45, 3.04, 3.35, 1.54, 2.15,
			2.7, 2.19, 1.333, 1.497, 0.5, 2.04, 1.89, 2.34, 3.84, 3.87, 2.55, 3.09,
			2.79, 2.31, 2.89, 4.16, 3.82, 1.16, 3.328, 1.292, 5.22, 2.07, 4.23, 3.69,
			2.67, 1.8, 2.37, 2.73, 5.1, 0.76, 3.29, 1.33, 2.69, 3.85, 2.582, 1.958,
			1.167, 0.973, 2.125, 3.667, 2.458, 4.11, 3.025, 2.375, 1.95, 3.63, 4.17,
			4.26, 3.842, 1.708, 2.88, 3.42, 3.47, 2.07, 4.8, 2.01, 4.68, 1.598, 2.542,
			4.47, 3.0, 4.29, 4.3, 5.45, 2.82, 2.46, 2.0, 2.198, 2.042, 2.88, 1.96,
			7.14, 3.47, 2.28, 3.21, 2.11, 1.94, 3.21, 2.893, 2.417, 2.26, 2.69, 4.17,
			4.14, 4.0, 1.44, 3.26, 2.76, 4.17, 3.09, 2.728, 2.792, 2.91, 2.01, 3.51,
			2.56, 1.62, 3.8, 3.51, 2.46, 2.49, 2.7, 3.51, 1.32, 2.1, 2.41, 4.52, 4.09,
			3.3, 2.833, 3.157, 4.2, 2.25, 3.51, 3.25, 3.11, 2.82, 3.41, 3.252, 1.458,
			1.32, 3.45, 4.59, 3.48, 3.0, 3.455, 0.625, 2.61, 3.84, 2.55, 2.91, 6.96,
			4.5, 2.65, 2.06, 3.19, 2.21, 3.0, 3.88, 2.93, 1.74, 3.78, 2.97, 3.483,
			1.917, 3.96, 0.76, 2.542, 2.755, 1.833, 3.82, 3.27, 3.83, 4.89, 3.33,
			2.73, 2.14, 2.36, 2.28, 2.37, 3.117, 2.583, 1.59, 2.85, 2.58, 2.49, 2.37,
			3.33, 7.68, 1.36, 2.0, 3.21, 3.87, 1.23, 2.85, 3.32, 3.46, 1.98, 2.327,
			2.083, 2.67, 3.415, 1.875, 1.79, 2.61, 2.94, 2.35, 2.24, 3.03, 2.25, 3.42,
			0.73, 4.2, 1.76, 2.37, 6.81, 3.9, 1.89, 1.56, 3.24, 2.927, 2.833, 1.38,
			2.11, 4.279, 1.221, 2.109, 2.281, 1.949, 2.071, 2.73, 5.159, 1.111, 2.55,
			3.03, 3.869, 3.0, 3.48, 1.621, 3.54, 4.44, 4.32, 4.92, 1.715, 1.375, 3.92,
			5.766, 5.364, 3.7, 1.75, 1.77, 1.56, 1.63, 3.26, 3.89, 2.68, 6.205, 0.875,
			1.667, 1.663, 2.76, 3.66, 2.97, 2.28, 2.88, 3.0, 2.28, 2.325, 2.625, 0.67,
			2.15, 3.327, 1.833, 1.99, 2.09, 0.72, 1.08, 3.48, 1.96, 4.73, 3.108,
			2.292, 1.53, 3.84, 3.96, 1.62, 3.06, 2.16, 2.333, 1.897, 4.5, 3.09, 1.827,
			1.833, 1.62, 2.37, 3.36, 1.89, 2.95, 5.39, 1.74, 2.7, 3.54, 3.81, 0.5,
			4.068, 1.792, 2.13, 2.49, 4.34, 3.72, 1.75, 4.86, 2.872, 1.708, 3.07,
			1.99, 2.69, 2.4, 2.07, 3.565, 1.625, 1.95, 2.16, 2.92, 2.87, 6.12, 6.01,
			2.03, 3.19, 3.41, 3.51, 3.69, 5.28, 2.76, 3.06, 3.12, 2.84, 1.163, 1.667,
			0.3, 2.832, 1.458, 1.29, 1.89, 2.37, 3.24, 3.09, 2.49, 3.455, 2.125,
			5.185, 2.375, 0.878, 1.292, 4.73, 3.0, 2.43, 3.57, 3.27, 3.81, 4.28, 1.77,
			5.01, 2.74, 1.79, 4.05, 2.083, 2.417, 3.85, 3.5, 3.27, 2.56, 2.96, 4.23,
			2.61, 3.6, 4.59, 1.29, 2.37, 1.58, 1.75, 3.18, 2.67, 2.73, 5.25, 4.14,
			4.92, 3.29, 2.38, 4.41, 2.77, 4.37, 1.77, 3.63, 4.8, 3.9, 2.28, 2.55,
			2.91, 3.06, 4.08, 5.16, 4.74, 1.87, 2.24, 3.1, 4.01, 2.173, 2.417, 3.075,
			2.625, 4.54, 4.13, 3.54, 2.19, 4.3, 3.69, 2.787, 1.583, 3.0, 3.87, 2.65,
			3.26, 3.69, 2.26, 1.91, 3.48, 3.24, 1.11, 1.41, 3.18, 1.56, 3.69, 2.16,
			6.72, 2.37, 4.74, 1.98, 3.42, 2.04, 2.31, 2.22, 2.04, 5.58, 3.64, 2.18,
			4.77, 3.33, 3.63, 2.39, 0.73, 7.185, 1.375, 4.683, 1.417, 3.45, 0.947,
			1.333, 2.208, 2.562, 1.86, 1.8, 2.08, 4.52, 4.08, 5.05, 3.91, 0.71, 3.12,
			1.27, 3.95, 2.37, 1.53, 2.79, 2.717, 1.583, 3.17, 1.47, 1.8, 2.31, 1.59,
			4.2, 1.98, 6.45, 3.18, 3.43, 3.44, 3.39, 1.29, 1.08, 4.65, 2.58, 5.563,
			3.167, 2.19, 5.04, 2.01, 4.02, 2.23, 9.11, 4.08, 2.31, 4.01, 2.71, 2.56,
			2.12, 3.235, 0.875, 4.26, 2.67, 3.51, 1.8, 3.75, 3.15, 5.31, 2.88, 2.76,
			2.01, 3.63, 5.01, 3.46, 2.21, 3.28, 4.52, 3.72, 0.66, 4.47, 3.33, 4.23,
			3.78, 2.19, 3.09, 2.7, 2.46, 4.47, 3.42, 5.37, 3.57, 1.53, 3.51, 3.81,
			3.6, 1.62, 4.68, 1.89, 3.51, 2.73, 2.34, 1.56, 3.99, 2.91, 1.77, 4.71,
			5.31, 3.27, 1.86, 2.41, 2.54, 5.55, 2.52, 1.69, 0.5, 2.04, 1.98, 1.9,
			2.24, 1.49, 3.26, 4.11, 0.5, 3.09, 1.05, 1.98, 2.28, 3.81, 4.42, 3.56,
			3.24, 3.93, 3.39, 2.55, 2.625, 3.045, 2.76, 4.08, 3.6, 1.3, 4.82, 2.88,
			2.94, 4.83, 2.85, 2.138, 1.792, 3.72, 3.01, 3.98, 4.8, 2.16, 1.29, 3.27,
			3.78, 2.25, 2.22, 3.57, 4.41, 2.09, 1.42, 1.5, 3.495, 1.875, 3.22, 1.25,
			3.37, 2.93, 2.31, 1.62, 2.16, 1.92, 4.537, 1.833, 3.62, 3.87, 4.59, 2.4,
			2.19, 3.96, 0.93, 2.25, 3.66, 2.25, 3.6, 1.98, 4.41, 3.63, 3.42, 4.92,
			3.11, 1.93, 2.43, 2.88, 2.49, 3.99, 1.38, 3.63, 3.33, 1.83, 3.55, 4.04,
			1.53, 3.42, 2.827, 2.333, 1.8, 2.58, 4.44, 1.99, 2.51, 4.23, 2.04, 2.956,
			3.404, 2.61, 3.15, 2.92, 4.1, 2.85, 1.32, 3.57, 4.26, 0.662, 1.708, 2.32,
			9.0, 3.78, 2.58, 1.21, 6.56, 2.88, 1.14, 5.37, 3.97, 3.322, 3.208, 2.04,
			3.57, 3.06, 3.33, 2.44, 5.24, 4.77, 1.84, 8.09, 4.36, 2.26, 1.25, 2.57,
			2.7, 3.66, 5.11, 1.67, 2.88, 3.78, 3.52, 0.71, 2.97, 1.98, 1.277, 1.083,
			1.96, 1.958, 3.242, 3.26, 2.582, 1.708, 2.25, 0.5, 4.91, 3.6, 0.5, 2.56,
			3.89, 5.04, 3.06, 2.89, 2.392, 2.458, 2.88, 2.79, 0.625, 1.253, 3.042,
			2.5, 2.09, 4.26, 2.12, 3.422, 1.958, 4.02, 0.9, 1.667, 3.343, 3.18, 2.01,
			3.57, 3.25, 2.81, 0.69, 4.08, 1.77, 5.26, 3.71, 1.59, 4.86, 2.73, 2.7,
			2.31, 3.6, 2.55, 3.88, 3.555, 2.375, 0.93, 4.92, 2.54, 2.08, 3.14, 3.04,
			2.55, 4.14, 6.51, 2.708, 2.542, 1.41, 1.792, 1.928, 4.48, 2.48, 3.87,
			3.12, 5.58, 2.275, 1.625, 2.1, 4.29, 2.82, 1.41, 1.92, 4.89, 1.62, 2.46,
			4.38, 1.72, 1.26, 4.91, 3.96, 3.3, 2.11, 7.64, 1.11, 2.352, 2.208, 1.32,
			2.01, 3.39, 7.23, 2.07, 4.11, 2.94, 3.083, 2.737, 1.478, 1.792, 3.24,
			2.22, 6.12, 2.37, 2.58, 4.98, 2.77, 3.268, 1.792, 3.87, 2.94, 3.69, 4.62,
			0.91, 2.99, 4.3, 2.81, 0.68, 1.24, 5.56, 4.01, 3.63, 1.58, 1.83, 2.67,
			4.2, 4.26, 4.21, 3.08, 2.64, 2.7, 2.01, 2.58, 3.0, 3.24, 2.215, 3.125,
			1.56, 4.71, 4.232, 1.708, 2.818, 2.792, 0.9, 3.93, 2.55, 3.03, 3.75, 0.99,
			3.36, 4.02, 4.35, 3.9, 4.14, 4.23, 2.4, 0.96, 0.87, 4.86, 0.5, 1.417,
			2.703, 1.2, 3.0, 1.92, 2.34, 3.84, 1.56, 3.057, 2.583, 3.36, 4.17, 2.52,
			1.38, 1.02, 4.14, 2.19, 1.417, 3.663, 0.5, 1.29, 3.99, 4.56, 3.3, 4.14,
			4.66, 0.5, 1.083, 3.537, 3.14, 1.45, 3.54, 2.25, 10.895, 6.325, 6.9, 7.29,
			2.522, 1.708, 0.69, 2.22, 4.8, 2.55, 1.799, 2.5, 3.741, 2.61, 5.54, 2.5,
			2.43, 2.67, 4.469, 4.381, 2.29, 1.88, 1.917, 2.913, 2.489, 3.721, 2.56,
			2.81, 3.09, 2.68, 0.599, 1.708, 2.042, 4.771, 2.25, 2.91, 1.816, 1.333,
			2.101, 4.237, 2.333, 1.05, 2.79, 1.582, 1.958, 3.78, 3.0, 3.69, 3.42,
			3.73, 2.75, 3.76, 0.76, 2.042, 3.528, 1.11, 2.19, 2.0, 1.96, 2.54, 2.21,
			0.64, 1.25, 1.917, 0.833, 0.6, 3.855, 3.125, 2.517, 1.833, 2.4, 4.868,
			1.792, 7.83, 1.71, 2.07, 1.69, 1.79, 2.52, 2.19, 2.56, 1.46, 2.7, 3.827,
			2.083, 2.46, 1.68, 4.11, 3.67, 3.2, 2.73, 3.3, 0.69, 2.938, 1.292, 2.083,
			2.777, 1.71, 4.65, 1.505, 2.125, 5.75, 1.78, 7.53, 0.9, 3.93, 3.3, 1.84,
			3.1, 2.38, 1.08, 3.55, 1.52, 1.78, 3.23, 2.91, 2.22, 5.28, 1.62, 5.53,
			0.75, 0.5, 1.44, 2.7, 2.61, 2.205, 1.875, 2.22, 3.66, 3.39, 1.08, 5.25,
			4.14, 3.78, 3.06, 3.21, 1.83, 3.628, 2.042, 3.215, 2.125, 2.11, 3.5, 2.11,
			2.09, 3.58, 2.21, 2.43, 4.44, 1.31, 0.88, 1.26, 4.71, 1.11, 3.69, 4.35,
			1.197, 1.833, 1.41, 3.21, 3.41, 1.0, 1.02, 2.37, 2.102, 1.958, 1.85, 4.44,
			2.94, 2.82, 4.41, 4.83, 2.34, 3.544, 1.526, 2.37, 3.7, 2.54, 2.91, 2.76,
			2.88, 4.71, 5.01, 1.57, 3.89, 6.39, 2.09, 2.43, 4.64, 1.61, 2.523, 1.167,
			3.63, 2.91, 2.19, 2.75, 2.62, 2.208, 2.562, 2.677, 1.333, 1.16, 1.28,
			3.24, 1.29, 1.29, 3.042, 1.893, 3.378, 1.417, 2.3, 5.4, 3.54, 2.73, 1.78,
			1.55, 2.94, 2.76, 3.86, 1.88, 1.5, 2.03, 3.6, 4.08, 1.45, 0.5, 3.125,
			2.995, 3.15, 2.46, 3.39, 3.51, 2.632, 1.458, 2.208, 2.162, 2.79, 2.37,
			3.99, 2.16, 2.76, 2.31, 2.22, 2.743, 2.417, 2.685, 1.875, 4.62, 3.63, 3.4,
			3.29, 2.37, 3.78, 2.85, 2.19, 2.26, 2.233, 2.167, 1.708, 2.702, 4.29,
			3.09, 2.94, 3.36, 2.97, 3.99, 2.07, 2.04, 3.09, 1.89, 2.73, 4.83, 2.52,
			3.81, 3.12, 3.39, 1.63, 2.75, 3.15, 2.46, 5.04, 2.19, 3.39, 1.54, 2.63,
			4.29, 3.36, 3.42, 1.81, 2.57, 2.34, 4.08, 1.71, 1.03, 3.74, 0.75, 3.7,
			1.5, 4.74, 7.81, 1.583, 1.084, 0.513, 3.79, 6.72, 5.51, 3.13, 0.77, 2.64,
			2.01, 4.0, 3.53, 0.75, 2.34, 2.31, 2.25, 2.95, 2.833, 1.75, 1.987, 4.49,
			2.85, 2.67, 2.19, 1.76, 2.24, 0.75, 2.52, 1.97, 0.24, 1.292, 2.008, 3.24,
			2.042, 2.488, 2.04, 4.02, 3.3, 1.75, 0.5, 2.85, 2.11, 3.27, 2.42, 2.27,
			3.25, 3.27, 1.74, 2.667, 1.413, 2.16, 2.225, 0.875, 0.875, 2.835, 1.5,
			2.76, 2.273, 0.667, 2.542, 2.635, 2.083, 3.15, 1.08, 0.24, 0.84, 1.67,
			1.83, 1.49, 1.333, 2.8, 0.667, 0.45, 2.875, 1.333, 2.459, 1.363, 0.5,
			2.313, 1.417, 1.507, 3.083, 1.44, 0.27, 2.11, 0.5, 1.208, 3.782, 0.5,
			3.15, 2.97, 2.25, 2.49, 0.5, 2.208, 2.042, 2.55, 2.78, 0.27, 2.74, 0.5,
			0.21, 2.667, 1.893, 2.25, 2.05, 1.53, 1.58, 1.08, 2.058, 0.792, 3.03,
			1.24, 1.07, 1.963, 3.167, 2.368, 1.542, 3.523, 0.667, 1.518, 1.792, 1.46,
			3.39, 1.32, 0.75, 2.13, 2.22, 1.8, 2.04, 2.458, 0.833, 0.5, 0.724, 2.543,
			1.792, 1.2, 3.09, 2.05, 1.48, 1.45, 2.85, 2.86, 3.62, 1.325, 2.125, 1.43,
			1.51, 2.64, 2.687, 2.083, 3.39, 2.22, 3.33, 2.55, 2.28, 2.73, 2.85, 0.75,
			2.19, 1.35, 2.208, 1.324, 1.958, 4.78, 4.25, 3.777, 1.833, 3.27, 2.44,
			0.5, 3.25, 3.06, 2.29, 0.75, 3.22, 2.25, 3.54, 3.33, 2.5, 1.31, 2.61,
			3.378, 2.292, 0.84, 2.792, 0.578, 1.792, 2.068, 4.68, 2.35, 2.46, 1.71,
			0.54, 1.85, 3.15, 3.3, 1.83, 2.16, 1.86, 3.93, 3.69, 2.65, 3.5, 3.37,
			1.663, 2.167, 2.65, 2.09, 2.582, 1.708, 3.79, 2.0, 3.21, 3.72, 5.16, 1.87,
			0.5, 1.65, 1.32, 4.68, 3.0, 3.12, 3.84, 4.29, 4.42, 2.405, 1.875, 4.26,
			4.89, 2.46, 2.94, 2.25, 2.887, 3.083, 2.282, 1.208, 1.58, 5.43, 1.08,
			4.26, 3.06, 3.48, 1.62, 2.19, 1.92, 3.24, 2.82, 3.338, 1.792, 1.44, 1.667,
			4.813, 4.02, 2.97, 3.21, 1.71, 4.38, 2.967, 1.083, 3.24, 2.73, 2.34, 2.73,
			1.84, 4.46, 1.53, 3.0, 3.45, 4.08, 2.4, 5.07, 1.77, 4.26, 4.462, 2.208,
			2.827, 2.833, 2.88, 2.13, 2.417, 1.643, 3.29, 2.97, 2.14, 1.82, 2.71,
			3.05, 2.52, 2.82, 5.38, 3.41, 2.94, 3.07, 2.708, 3.042, 2.667, 3.633,
			2.362, 2.708, 2.88, 3.72, 3.15, 4.5, 4.35, 3.77, 3.67, 2.46, 4.5, 2.64,
			3.93, 3.73, 1.46, 3.6, 1.32, 4.77, 3.27, 3.09, 4.16, 2.44, 2.62, 3.65,
			6.24, 5.77, 3.54, 0.5, 2.088, 0.792, 1.625, 1.637, 1.208, 0.5, 2.41, 2.76,
			1.57, 2.75, 5.46, 2.22, 2.61, 3.69, 3.63, 3.09, 3.72, 1.8, 2.73, 2.95,
			1.88, 2.29, 2.6, 3.78, 3.49, 4.355, 1.375, 2.33, 2.337, 1.833, 2.16, 3.18,
			3.63, 1.97, 1.3, 1.89, 2.2, 3.92, 1.83, 3.9, 3.77, 2.35, 1.547, 2.083,
			2.07, 3.66, 3.478, 2.042, 1.41, 4.02, 3.81, 4.59, 0.75, 3.033, 2.667,
			2.77, 3.557, 2.583, 0.33, 1.792, 2.138, 1.562, 1.708, 2.35, 1.523, 1.917,
			3.232, 0.708, 1.49, 0.958, 0.862, 1.54, 1.38, 1.89, 0.958, 0.722, 1.667,
			1.8, 1.333, 4.463, 1.292, 2.543, 1.042, 1.375, 2.527, 1.958, 2.03, 1.44,
			2.73, 3.0, 3.48, 0.75, 0.29, 1.708, 4.592, 2.5, 2.76, 1.98, 2.25, 1.26,
			3.63, 3.39, 1.53, 0.36, 2.58, 1.59, 3.75, 3.75, 1.35, 4.78, 1.73, 2.61,
			1.26, 3.81, 1.617, 2.833, 1.458, 0.732, 0.5, 2.64, 1.05, 2.83, 1.0, 0.88,
			2.745, 0.885, 1.102, 0.708, 0.95, 2.845, 0.875, 2.89, 3.5, 0.983, 1.417,
			3.9, 3.45, 2.94, 3.12, 1.92, 2.16, 0.58, 1.56, 1.58, 2.66, 2.26, 3.87,
			3.31, 3.17, 1.33, 2.81, 1.56, 2.7, 4.44, 1.805, 1.375, 2.37, 2.04, 3.68,
			3.93, 2.98, 3.2, 3.79, 3.59, 2.16, 0.75, 2.67, 1.902, 2.958, 2.65, 3.9,
			3.157, 1.083, 1.97, 2.75, 2.13, 1.77, 2.13, 3.12, 3.0, 2.79, 3.3, 3.036,
			3.114, 1.38, 4.15, 3.33, 2.42, 2.49, 4.29, 5.64, 3.45, 2.7, 2.97, 3.64,
			3.83, 3.42, 2.94, 4.29, 1.05, 2.67, 2.97, 3.58, 2.26, 3.79, 3.9, 4.27,
			3.02, 4.09, 2.24, 3.87, 2.64, 4.308, 2.292, 4.08, 4.35, 3.75, 3.12, 4.58,
			3.4, 0.66, 2.4, 3.06, 3.43, 3.02, 2.79, 3.84, 0.93, 4.8, 4.51, 1.25,
			3.328, 2.792, 1.66, 4.13, 2.01, 3.0, 2.292, 1.848, 1.89, 5.79, 2.26, 2.36,
			2.67, 2.7, 3.98, 1.75, 2.418, 3.042, 3.13, 2.51, 1.98, 4.242, 1.208, 3.31,
			3.6, 2.625, 2.625, 1.792, 3.158, 0.81, 1.2, 1.94, 1.54, 1.71, 2.24, 3.22,
			0.877, 1.583, 3.03, 1.86, 1.5, 1.17, 1.375, 1.685, 1.26, 1.917, 2.673,
			1.71, 3.03, 1.417, 0.833, 2.875, 3.575, 3.24, 0.78, 2.91, 1.105, 1.875,
			1.82, 2.28, 3.04, 2.388, 2.542, 3.45, 1.75, 2.28, 1.44, 2.59, 1.09, 3.82,
			5.04, 0.9, 1.26, 4.8, 2.71, 1.87, 2.5, 5.01, 2.91, 3.82, 4.7, 0.99, 3.55,
			3.03, 3.92, 1.743, 2.667, 1.08, 4.53, 3.193, 1.917, 2.79, 2.69, 5.4, 4.8,
			4.08, 3.39, 3.36, 4.26, 3.24, 1.17, 1.98, 1.35, 3.33, 1.71, 2.385, 1.875,
			2.07, 2.97, 1.62, 1.98, 1.163, 1.417, 1.09, 1.55, 3.93, 2.73, 3.54, 2.82,
			0.833, 2.767, 2.7, 3.99, 3.36, 2.34, 2.22, 3.6, 2.46, 4.14, 1.14, 2.76,
			2.52, 2.73, 1.62, 3.6, 3.15, 4.8, 2.05, 3.48, 4.97, 2.82, 4.27, 3.78,
			1.747, 2.333, 4.26, 1.84, 3.95, 3.09, 3.66, 2.31, 2.91, 2.79, 4.71, 1.41,
			6.94, 4.6, 2.19, 5.04, 2.46, 3.9, 3.035, 3.125, 2.63, 4.45, 2.12, 3.69,
			3.07, 4.22, 2.07, 2.94, 2.79, 3.45, 2.08, 2.18, 4.15, 3.38, 3.06, 3.9,
			3.42, 3.79, 1.91, 2.58, 2.64, 5.85, 4.59, 2.16, 3.18, 3.69, 3.42, 3.75,
			3.12, 6.33, 2.1, 2.0, 2.08, 1.62, 1.8, 5.93, 3.86, 0.63, 3.15, 2.31, 2.04,
			4.8, 1.32, 4.593, 1.167, 2.25, 4.11, 2.67, 4.6, 1.97, 2.1, 4.23, 1.68,
			3.96, 1.36, 1.32, 1.22, 3.84, 4.44, 4.39, 0.5, 3.36, 3.798, 1.792, 2.625,
			2.375, 2.432, 1.708, 2.16, 4.05, 3.37, 2.75, 1.65, 1.47, 6.51, 2.82, 2.31,
			2.1, 1.83, 3.93, 1.77, 3.07, 2.87, 2.46, 2.19, 2.73, 1.8, 1.667, 0.645,
			1.708, 1.655, 2.125, 2.25, 3.9, 3.39, 3.45, 1.35, 3.87, 0.96, 3.39, 2.34,
			4.43, 4.0, 3.69, 2.95, 2.69, 2.01, 2.94, 1.17, 1.83, 3.39, 0.93, 4.56,
			1.89, 2.31, 2.97, 3.63, 5.04, 1.71, 3.12, 5.1, 4.26, 1.62, 2.34, 2.91,
			1.83, 2.43, 3.42, 2.67, 2.25, 4.08, 2.97, 2.55, 6.0, 4.59, 1.47, 4.26,
			1.91, 4.39, 3.63, 3.06, 3.24, 2.388, 2.292, 2.52, 2.16, 3.42, 3.57, 4.47,
			3.19, 3.35, 2.7, 2.49, 2.19, 3.15, 3.3, 3.24, 2.94, 2.31, 2.89, 2.72,
			1.83, 0.54, 4.03, 1.76, 4.53, 3.99, 3.27, 3.21, 3.49, 1.55, 0.77, 3.76,
			2.19, 0.72, 2.97, 3.21, 2.37, 2.43, 0.73, 1.04, 0.667, 3.053, 3.51, 1.44,
			0.48, 1.625, 3.95, 1.875, 2.57, 2.67, 1.71, 1.56, 3.06, 2.94, 3.09, 1.83,
			4.32, 2.105, 2.875, 1.15, 3.09, 2.21, 3.06, 1.815, 2.875, 3.12, 1.7,
			0.983, 1.417, 1.95, 2.25, 2.25, 4.14, 1.26, 3.81, 1.42, 1.82, 2.52, 1.74,
			3.6, 1.99, 4.5, 0.5, 1.8, 0.75, 2.52, 2.73, 1.59, 2.04, 4.53, 4.05, 2.648,
			1.042, 1.59, 1.89, 1.708, 2.042, 1.24, 2.112, 2.708, 2.26, 3.09, 1.64,
			1.92, 5.1, 3.9, 3.18, 2.607, 2.583, 1.08, 1.65, 4.95, 3.63, 1.17, 4.47,
			3.323, 2.917, 0.93, 2.88, 2.13, 3.72, 3.267, 0.583, 3.0, 1.343, 2.167,
			2.083, 2.507, 1.29, 1.98, 3.49, 2.03, 3.908, 1.792, 1.98, 4.02, 1.95,
			3.72, 3.27, 3.3, 3.95, 2.26, 3.69, 2.67, 3.51, 2.25, 2.22, 4.66, 4.79,
			2.25, 1.167, 1.023, 3.413, 0.667, 4.8, 0.64, 2.39, 3.577, 2.333, 2.67,
			0.87, 1.83, 3.6, 4.95, 3.37, 1.58, 2.4, 4.03, 3.71, 4.5, 4.17, 3.78, 2.7,
			3.21, 3.51, 1.6, 0.5, 2.7, 3.81, 3.63, 1.97, 2.8, 4.68, 2.97, 3.15, 1.89,
			3.45, 3.0, 5.07, 3.197, 2.083, 2.58, 2.1, 3.06, 3.15, 2.82, 1.68, 3.27,
			2.13, 3.85, 2.99, 2.37, 2.75, 3.84, 2.841, 3.069, 4.32, 3.09, 2.36, 2.88,
			1.75, 4.62, 2.61, 3.93, 3.447, 0.833, 1.21, 2.19, 3.24, 5.07, 2.65, 0.56,
			1.41, 1.87, 1.875, 2.435, 3.21, 3.18, 3.15, 1.92, 3.48, 3.72, 2.41, 3.92,
			2.07, 1.597, 2.333, 2.667, 0.633, 3.09, 2.52, 2.257, 2.333, 3.47, 0.77,
			3.17, 2.61, 2.34, 3.97, 3.45, 4.19, 2.46, 3.37, 2.81, 1.95, 2.58, 0.24,
			1.125, 3.585, 3.21, 0.75, 2.583, 3.177, 2.58, 2.11, 3.92, 2.73, 1.8, 1.85,
			3.712, 0.708, 1.08, 1.208, 1.665, 2.167, 0.33, 3.1, 2.87, 0.81, 3.087,
			2.083, 2.81, 2.97, 1.14, 1.92, 1.65, 4.39, 1.43, 3.3, 1.67, 2.15, 0.75,
			1.37, 2.82, 3.32, 1.24, 4.02, 1.932, 0.708, 1.74, 1.86, 1.77, 2.4, 3.192,
			0.958, 2.875, 2.125, 1.33, 1.94, 3.24, 3.27, 3.36, 2.61, 4.662, 0.708,
			1.8, 3.66, 3.36, 1.45, 2.585, 1.425, 1.93, 0.958, 3.124, 0.708, 3.86,
			1.63, 3.697, 0.833, 3.76, 4.19, 4.3, 4.46, 4.992, 0.708, 3.608, 2.292,
			1.81, 2.46, 3.39, 2.25, 2.62, 1.7, 3.72, 3.72, 1.26, 0.33, 1.65, 2.125,
			1.095, 1.43, 2.292, 2.368, 3.693, 0.917, 0.833, 0.709, 1.668, 3.33, 1.51,
			1.75, 3.31, 1.84, 1.292, 1.728, 2.31, 3.75, 4.38, 0.96, 2.76, 1.86, 0.97,
			1.11, 1.75, 2.24, 3.14, 3.54, 2.49, 2.1, 1.47, 2.07, 1.98, 1.59, 1.62,
			1.29, 2.73, 1.8, 2.73, 3.78, 3.51, 2.92, 0.5, 2.07, 2.208, 2.352, 1.56,
			3.6, 1.56, 3.27, 2.28, 2.58, 2.49, 2.22, 3.81, 2.22, 3.26, 3.7, 1.24,
			2.45, 3.78, 3.1, 2.9, 1.507, 0.833, 2.67, 2.19, 3.81, 3.54, 2.67, 3.965,
			2.125, 5.1, 2.23, 3.11, 3.959, 4.231, 3.88, 2.18, 2.49, 4.56, 3.87, 4.067,
			0.792, 4.83, 2.363, 1.958, 4.439, 3.84, 3.481, 4.589, 2.254, 2.917, 3.52,
			4.08, 1.02, 1.469, 3.091, 3.75, 6.7, 4.879, 2.461, 2.609, 1.711, 3.57,
			4.08, 2.94, 4.8, 2.43, 2.12, 2.98, 2.28, 3.0, 2.49, 3.929, 2.521, 3.42,
			4.649, 3.701, 4.19, 5.435, 1.375, 1.98, 2.97, 2.099, 3.121, 4.62, 3.66,
			3.74, 1.72, 2.639, 2.551, 3.3, 4.47, 1.998, 3.042, 0.5, 3.52, 3.72, 2.19,
			1.92, 2.25, 2.7, 2.79, 2.22, 3.48, 2.49, 3.48, 3.87, 1.17, 2.79, 3.81,
			3.337, 2.333, 2.19, 1.2, 3.06, 5.27, 2.41, 5.82, 1.62, 2.94, 1.35, 3.15,
			1.863, 1.917, 3.69, 1.56, 4.32, 2.94, 1.522, 1.958, 2.31, 2.5, 2.3, 1.75,
			1.88, 3.75, 3.63, 1.08, 2.52, 5.04, 0.57, 2.25, 3.91, 5.42, 4.98, 4.02,
			4.65, 3.57, 2.91, 4.93, 3.395, 3.495, 4.14, 1.2, 2.1, 5.55, 3.29, 4.45,
			2.49, 3.66, 2.01, 2.8, 2.27, 7.465, 0.625, 2.375, 1.195, 4.862, 1.928,
			3.622, 1.708, 4.45, 2.36, 1.89, 1.38, 1.192, 2.708, 2.49, 4.14, 1.08,
			3.81, 2.87, 3.515, 0.875, 1.44, 1.8, 3.78, 4.55, 58.06
		],
		"transcript_en": [
			"[MUSIC PLAYING]",
			"",
			"DAVID MALAN: All right.",
			"This is CS50, and this is week 3.",
			"And you'll recall that last week, we equipped you with a lot more tools",
			"by which to solve problems-- not only problems that we had proposed,",
			"but problems in your own code, that is to say bugs.",
			"And recall that those tools involve command line tools like help50",
			"for help with cryptic error messages that the compiler might spit out;",
			"style50 which, gives you a bit of feedback",
			"on the stylization of your code, the aesthetics thereof;",
			"check50, which checks the correctness of your code against the specifications",
			"in a given problem set or lab; printf, which",
			"is a function that it exists in some form in almost any programming",
			"language that you might ultimately learn, and this",
			"is simply a way of printing out anything you might want from the computer's",
			"memory onto the screen.",
			"Then perhaps the most powerful of these tools",
			"was debug50, which was this interactive debugger.",
			"And even though this command debug50 is a little specific to CS50,",
			"what it triggers to happen, that little side window",
			"where you can see the stack of functions that you",
			"might have called during some break point,",
			"and you can see the local variables that you might have defined at some point",
			"during the execution of your code, that's",
			"a very common conventional feature of any debugger with most any language.",
			"And then lastly, recall there was this ddb, duck debugger, which",
			"of course, takes this physical form, if you happen to have a rubber duck lying",
			"around with whom you can talk.",
			"But I'm so pleased to say that if you lack",
			"that currently while at home, CS50's own Kareem and Brenda and Sophie",
			"have wonderfully added, if you haven't noticed already,",
			"that same virtual duck to CS50 IDE.",
			"So if you click in the top corner, you can actually",
			"begin to have a chat of sorts with the rubber duck.",
			"And while this is a certainly more playful incarnation of that same idea,",
			"we really can't emphasize enough the value",
			"of talking through problems when you're experiencing them in code with someone",
			"else or with something else.",
			"This particular duck, not all that large of a vocabulary,",
			"but it's not so much what the other person says but what you say",
			"and what you hear yourself saying that is undoubtedly",
			"the most valuable part of the process.",
			"So our thanks to Kareem and Brenda and Sophie on that.",
			"Recall last week, 2, that we took a look underneath the hood,",
			"literally in some sense, at the computer's memory in your laptop",
			"or desktop or phone.",
			"And then we decided to think about this more",
			"artistically as just a grid of bytes.",
			"So within that chip, there's a whole bunch of bits.",
			"And if you look at eight of them at a time, there's a whole bunch of bytes.",
			"And it stands to reason that we could think",
			"of this as the first byte, the second byte, the third byte,",
			"and so forth, and sort of chop this up pictorially",
			"into just a whole sequence of bytes in the computer's memory.",
			"And recall that if we zoom in on that and focus on just one continuous block",
			"of memory, otherwise known as an \"array,\"",
			"we can do things within this array like storing a bunch of different values.",
			"So recall last week, we started by defining a little--",
			"goofily, multiple variables that were almost identically names,",
			"like scores1, scores2, scores3.",
			"And then we began to clean up the design of our code by introducing an array,",
			"so we can have just one variable called scores, that is of size 3",
			"and has room for multiple values.",
			"So today, we'll continue to leverage this feature of many programming",
			"languages-- being able to store things continuously,",
			"back to back to back to back, in a computer's memory,",
			"because this very simple layout, this very simple feature of the language,",
			"is going to open up all sorts of powerful features.",
			"And in fact, we can even revisit some of the problems",
			"we tried to solve way back in week 0.",
			"But there is a catch with arrays.",
			"And we didn't really emphasize this much last week.",
			"And that's because, even though you and I can",
			"glance at this picture on the screen and see immediately that, oh, there's",
			"seven boxes on the screen, there are seven locations in which you",
			"can store values, you and I can sort of have this bird's eye view of everything",
			"and just see what's inside that entire array all at once.",
			"But computers, recall, are much more methodical, more algorithmic,",
			"if you will.",
			"And so a computer, as powerful as they are,",
			"can technically only look at one location in an array at a time.",
			"So whereas you and I can glance at this and sort of",
			"take it all in at once a computer just can't glance at its memory",
			"and take in all at once all of the values therein,",
			"it has to do so more methodically, for instance, from left to right, maybe",
			"right to left, maybe middle onward.",
			"But it has to be an algorithm.",
			"And so today we'll formalize that notion and really kind of hide the fact that",
			"this array cannot be seen all at once, you can only look at one location",
			"in an array at a given time.",
			"And this is going to have very real implications.",
			"For instance, if we consider that very first problem",
			"in the very first week where we tried to find my phone number in a phone book,",
			"the very naive approach was to start at the beginning and search from left",
			"to right.",
			"And we tried a couple of variants thereafter.",
			"But the problem, quite simply, is that of searching.",
			"And this is a term of art in computer science,",
			"super common, certainly for you and I as users on Google",
			"and the like to search for things all day long.",
			"And so certainly searching well, designing a search algorithm well,",
			"is certainly a compelling feature of so many of today's tools",
			"that you and I use.",
			"So if we think of this really as a problem to solve,",
			"we've got some input, which, for instance, might be an array of numbers,",
			"or maybe an array of web pages in the case of Google.",
			"And the goal is to get some output.",
			"So if the input to the problem is an array of values, the output,",
			"hopefully, is going to be something as simple, really, as a bool--",
			"yes or no.",
			"Is the value you're looking for discoverable?",
			"Can you search for and find that value, yes or no, true or false?",
			"Now, within this black box, recall, is going to be some algorithm.",
			"And that's where today we'll spend most of our time.",
			"Indeed, we won't really introduce that many more features of C.",
			"We won't introduce that much more code.",
			"We'll focus again on ideas, just taking for granted now that you",
			"have some more tools in your toolkit.",
			"Beyond loops and conditions and Boolean expressions,",
			"we now have this other tool known as arrays.",
			"But let's first introduce some other terms of art, some jargon if you will,",
			"related to what we'll call running time.",
			"So we've alluded to this a few times.",
			"When we're thinking about just how good or bad an algorithm is,",
			"we describe how long it takes to run.",
			"That is its running time.",
			"The running time of an algorithm is how long it takes--",
			"how many steps it takes, how many seconds it takes, how many iterations",
			"it takes.",
			"It doesn't really matter what your unit of measure is.",
			"Maybe it's time, maybe it's iterations or something else.",
			"But running time just refers to how long does an algorithm take.",
			"And there are ways that we can think about this a little more formally.",
			"And we kind of did this already in the first week,",
			"but we didn't give it this name, this italicized O,",
			"this capital O on the screen, is otherwise known as Big O notation.",
			"And computer scientists and some mathematicians",
			"will very frequently use, literally, this symbol",
			"to describe the running times of algorithms,",
			"or mathematically like a function.",
			"So recall this picture, in fact.",
			"When we were searching that phone book, we did it sort of good, better, best.",
			"We did it linearly-- that is, searching one page at a time,",
			"we did it twice as fast by doing two pages at a time--",
			"and then we did it logarithmically by dividing and conquering,",
			"in half and half and half.",
			"And at the time, I proposed that if we think of a phone book",
			"as having n pages, where n is just a number in computer science vernacular,",
			"we might describe the running time, or the number of steps",
			"involved for that first algorithm, as being maybe in the worst case n steps.",
			"If the person you're looking for in a phone book maybe",
			"alphabetically has the last name starting with Z in English,",
			"well, the Z might be all the way at the end of the phone book.",
			"So at the worst case, you might be taking n steps",
			"to find someone like myself in that phone book.",
			"The second algorithm, though, was twice as fast,",
			"because we went two pages at a time.",
			"So we might describe its running time as n divided by 2.",
			"And then the third algorithm, where we divided the problem in half and half",
			"and half, literally throwing half of the problem away again and again,",
			"was logarithmic-- technically log base 2 of n, which, again, is just",
			"a mathematical formula that refers to halving something again",
			"and again and again.",
			"And you start with, of course, n pages in that scenario.",
			"Well, it turns out that a computer scientist would actually",
			"wave their hands at some of these mathematical details.",
			"Indeed, we're not going to get into the habit of writing",
			"very precise mathematical formulas.",
			"What we're instead going to do is try to get",
			"a sense of the order on which the running time of an algorithm",
			"is, just roughly how fast or how slow it is, but still",
			"using some symbology like n as a placeholder.",
			"And so a computer scientist would describe the running time of all three",
			"of those algorithms from week 0 as being big O of n, or big O of n/2,",
			"or big O of log base 2 of n.",
			"So \"big O\" just means \"on the order of.\"",
			"It's sort of a wave of the hand.",
			"Maybe it's n minus 1, maybe it's n plus 1, maybe it's even 2n.",
			"But it's on the order of n or these other values.",
			"But in fact, too, notice that this chart,",
			"there's something kind of curious. , Like these first two algorithms from",
			"week 0 kind of pictorially look pretty much the same.",
			"Like undoubtedly, the yellow line is a little lower",
			"and therefore a little better and a little faster than the red line.",
			"But they have the same shape.",
			"And in fact, I bet if we zoomed way out, these two straight lines",
			"would pretty much look identical.",
			"If you change your axis to be big enough and tall enough,",
			"these would start to blur together.",
			"But clearly, the green line is fundamentally different.",
			"And so this speaks to a computer scientist's tendency",
			"to not really quibble over these details.",
			"Like, yes, the second algorithm in week 0 was better.",
			"Yes, this yellow line is better.",
			"But, eh, let's just call both of those algorithms running times",
			"on the order of n.",
			"That is to say, a computer scientist tends to throw away constant factors,",
			"like the 1/2 or the divided by 2.",
			"And they tend to focus only on the dominant factor,",
			"like which value in that mathematical expression is going to grow the most,",
			"grow the fastest.",
			"And n divided by 2n it's going to dominate over time.",
			"The bigger the phone book gets, the more pages you have.",
			"It's really n that's going to matter less so than that divided by 2.",
			"And same thing over here.",
			"If you're familiar with and remember your logarithms,",
			"we don't really have to even care about the base of that logarithm.",
			"Yes, it's base 2, but eh, we can just multiply that logarithm",
			"by some other number to convert it to any base we want--",
			"base 10, base 3, base 7, anything.",
			"So let's just say it's on the order of log n.",
			"So this is good, because it means we're not really",
			"going to waste time getting really into the weeds",
			"mathematically when we talk about the efficiency of algorithms.",
			"It suffices to describe things really in terms of the variable, n in this case,",
			"if you will, that dominates over time.",
			"And indeed, let's zoom out.",
			"If I zoom out on this picture, boom, you begin",
			"to see that, yeah, these are really starting to look almost identical.",
			"And if we kept zooming out, you would see that they're essentially",
			"one in the same.",
			"But the green one stands out, so that's indeed on the order of log of n",
			"as opposed to n itself.",
			"So here's a little cheat sheet.",
			"It turns out that within computer science,",
			"and within the analysis of algorithms, we're",
			"going to tend to see some common formulas like this.",
			"So we've just seen on the order of n.",
			"We've seen on the order of log n.",
			"It turns out that the very common two is going to be n times",
			"log n, maybe even n squared, and then even big O of 1.",
			"And the last of those just means that an algorithm",
			"takes, wonderfully, one step--",
			"or maybe two steps, maybe even 10 steps, but a constant number of steps.",
			"So that's sort of the best case scenario, at least among these options.",
			"Whereas, n squared is going to start to take a long time.",
			"It's going to start to feel slow, because if you",
			"take any value of n and square it, that's",
			"going to imply more and more steps.",
			"So just a bit of jargon, then, to start off today,",
			"whereby we now have this sort of vocabulary",
			"with which to describe the running times of an algorithm in terms of this Big O",
			"notation.",
			"But there's one other notation.",
			"And just as big O refers to an upper bound",
			"on running times, like how many steps maximally,",
			"how much time maximally might an algorithm take,",
			"this omega notation refers to the opposite.",
			"What's a lower bound on the running time of an algorithm?",
			"And we don't need another picture or other formulas.",
			"We can reuse the same one.",
			"So this cheat sheet here just proposes that,",
			"when describing the efficiency or inefficiency of an algorithm",
			"and you want to come up with a lower bound--",
			"like minimally, how many steps does my algorithm take--",
			"we can use the same mathematical formulas,",
			"but we can note that with omega instead of big O.",
			"So again, looks fancy, but it really just refers",
			"to a wave of the hand trying to sort of ballpark exactly what the running time",
			"is of an algorithm.",
			"And thankfully, we've seen a few algorithms already,",
			"including in that week 0, and now we're going to give it a more formal name.",
			"Linear search is what we did with that phone book",
			"first off by searching it page by page by page,",
			"looking for my phone number in that particular example.",
			"And so the difference today is that, unlike us humans, who",
			"can look down at a phone book page and see a whole bunch of names and numbers",
			"at once, unlike a human who can look at an array on the board a moment ago",
			"and sort of see everything at once, we need",
			"to be more methodical, more deliberate today so",
			"that we can translate week 0's ideas now, not into even pseudocode,",
			"but actual C code.",
			"And so wonderfully, here at the American Repertory Theater",
			"as we are on Harvard's campus this semester,",
			"we've been collaborating with the whole team",
			"here who are much more artistically inclined than certainly I",
			"could be on my own here.",
			"And we have these seven wonderful doors that",
			"were previously used in various theatrical shows that took place here",
			"in this theater.",
			"And we've even collaborated with the theater's prop shop,",
			"who in back have wonderfully manufactured some delightful numbers",
			"and brought them to life.",
			"Which is to say that, behind each of these seven doors is a number.",
			"And this is going to be an opportunity now to really hammer home the point",
			"that when we want to search for some number in an array,",
			"it's pretty equivalent to having to search for a number, in this case,",
			"behind an otherwise closed door.",
			"You and I can't just look at all of these doors",
			"now and figure out where a number is.",
			"We have to be more methodical.",
			"We have to start searching these doors, maybe",
			"from left to right, maybe from right to left, maybe from the middle on out.",
			"But we need to come up with an algorithm and ultimately translate that to code.",
			"So for instance, suppose I were to search for the number 0.",
			"How could we go about searching, methodically, these seven wooden doors",
			"for the number 0?",
			"Let me take a suggestion from the audience.",
			"What approach might you take?",
			"What first step would you propose I take here on my own with these doors?",
			"Any recommendations?",
			"How do I begin to find myself the number 0?",
			"Florence, what do you propose?",
			"AUDIENCE: I would propose starting form the left, since 0 is a smaller number.",
			"DAVID MALAN: OK, good.",
			"And hang in there for with me for just a moment.",
			"Let me go ahead and started on the left edge as Florence proposes.",
			"Go ahead and open the door, and hopefully, voila--",
			"no.",
			"It's a number 4.",
			"So it's not a 0.",
			"So Florence, what would you propose I do next?",
			"AUDIENCE: I'd probably start in the middle somewhere,",
			"if, like, in case, I don't know, it's going down by 1.",
			"DAVID MALAN: OK.",
			"So maybe it's going down.",
			"So let me go ahead and try that.",
			"So you propose middle, I could go over here, and voila--",
			"nope.",
			"That's the number 2.",
			"And I wonder, where else should I look.",
			"Let me-- I'm a little curious.",
			"I'm a little nervous that I ignored these doors.",
			"So Florence, if you don't mind, let's go ahead and look here and--",
			"no, that's the number 6, it seems.",
			"Let's go ahead and check in here, the number 8.",
			"So they're kind of going up and down.",
			"So Florence, how might I finish searching for this number?",
			"What remains to be done, would you say?",
			"AUDIENCE: Probably start from the right now.",
			"DAVID MALAN: OK.",
			"So I could start from the right now, and maybe just go over here.",
			"And voila-- and there it is.",
			"So we found the number 0.",
			"So let me ask Florence, what was your algorithm?",
			"How did you go about so successfully finding the number 0 for us?",
			"",
			"AUDIENCE: I guess I initially tried starting, like, by going down by 1.",
			"So like, if the number was not at the left,",
			"then going to the center, which is, like, halfway in between",
			"and then going to [INAUDIBLE].",
			"I don't know.",
			"DAVID MALAN: And playfully, how did that work out for you, going to the middle?",
			"Better or worse, no different?",
			"AUDIENCE: I mean, I guess maybe it helped a little bit",
			"to then go all the way to the right.",
			"DAVID MALAN: OK.",
			"Yeah, we might have gleaned some information.",
			"But let's go ahead and take a look at all of the doors for a moment.",
			"There's that 4 and the 6 again.",
			"Here is that 8 again.",
			"Over in the middle we have the 2 again.",
			"Over here we have a 7 for the first time.",
			"Over here we have a 5.",
			"And then of course, we have a 0.",
			"And if you took all of that in, honestly, Florence, you and I,",
			"we couldn't really have done any better.",
			"Because these door-- these numbers, it turns out,",
			"are just randomly arranged behind these doors.",
			"So it wasn't bad at all that you kind of hopped around.",
			"Although, the downside is if you hop around,",
			"you and I as humans can pretty easily remember where we've been before.",
			"But if you think about how we would translate that to code,",
			"I feel like we're starting to accumulate a bunch of variables",
			"maybe, because you have to keep track of that.",
			"So frankly, maybe the simplest solution-- whoops--",
			"maybe the simplest solution would have been where we started in week 0,",
			"where we just take a very simple if naive approach of starting",
			"with our array, this time of size 7, behind which are some numbers.",
			"And if you don't know anything about those numbers,",
			"honestly the best you can do is just that same linear search from week 0,",
			"and just check, one at a time, the values behind each of these doors",
			"and just hope that eventually you will find it.",
			"So this is already sort of taking a lot of time, right?",
			"If I do this linear search approach like I did in week 0,",
			"I'm potentially going to have to search behind all of those doors.",
			"I'm going to have to search behind all of those doors.",
			"So let's consider a little more formally exactly how I could at least implement",
			"that algorithm.",
			"Because I could take the approach that Florence",
			"proposed, and just kind of jumping around and maybe using",
			"a bit of intuition.",
			"But again, that's not really an algorithm.",
			"We really need to do something more step by step.",
			"And in the meantime, let's go ahead, Joe, and let's close the curtain",
			"and see if we can't clean those up with another problem in a moment,",
			"while we consider now linear search and the analysis thereof.",
			"So with linear search, I would propose that we",
			"could implement it in pseudocode first, if you will, like this.",
			"For i from 0 to n minus 1--",
			"we'll see where we're going with this-- if the number is behind the i-th door,",
			"return true, otherwise at the very end return false.",
			"So it's a relatively simple translation into pseudocode,",
			"much like we did with the phone book some time ago.",
			"And why, though, these values?",
			"Because I'm now starting to express myself a little more like C,",
			"even though it's still pseudocode.",
			"So for i from 0 to n minus 1.",
			"So computer scientists tend to start counting from 0.",
			"If there's n doors, or 7 doors in this case, you want to go from 0 on up to 6,",
			"or from 0 on up to n minus 1.",
			"So this is just a very common way of setting yourself up with a for loop,",
			"maybe in C, maybe in pseudocode in this case, that",
			"just gets you from left to right, algorithmically step by step.",
			"If a condition, number is behind the i-th door--",
			"i-th just being a colloquial way of saying,",
			"what is behind the door at location i--",
			"go ahead and return true.",
			"I have found myself the number I want, for instance, the number 0.",
			"And then notice that this return false is not part of an else,",
			"because I don't want to abort this algorithm prematurely and abort simply",
			"because a number is not behind the current door.",
			"I essentially want to wait all the way to the end of the algorithm,",
			"after I've checked all n doors, and if I have still not found",
			"the number I care about, then and only then am I going to return false.",
			"So a very common programming mistake might",
			"be to nest this internally and think about things in terms of ifs and elses.",
			"But you don't need to have an else.",
			"This is kind of a catchall here at the very end.",
			"But now let's consider, if this is the pseudocode for linear search, just what",
			"is the efficiency of linear search?",
			"What is the efficiency of linear search, which is to say,",
			"how well-designed is this algorithm?",
			"We put or gave ourselves a framework a moment ago,",
			"Big O notation, which is an upper bound, which we can think of for now",
			"as meaning like a worst case.",
			"In the worst case, how many steps might it take me to find the number 0--",
			"or any number for that matter--",
			"among n doors?",
			"Is it big O of n squared, big O of n times log n, big O of n,",
			"big O of log n, or big O of one, which, again, just means",
			"a constant fixed number of steps?",
			"Brian, could we go ahead and pull up this question?",
			"Let me go ahead and pull it up on my screen as well.",
			"If you go to our usual URL to propose what you think an upper bound",
			"is on the running time of linear search.",
			"OK.",
			"Indeed, if we consider now the running time of linear search,",
			"it's going to be big O of n.",
			"Why is that?",
			"So in the worst case, the number I'm looking for,",
			"0, might very well be at the end of that list, which",
			"is going to be on the order of n steps, or in this case precisely n steps.",
			"So that's one way to think about this.",
			"Well, now let me ask a follow-up question.",
			"Proposing instead that we consider omega notation, which is a lower bound",
			"on the running time of an algorithm--",
			"Brian, could we go ahead and ask this question next?",
			"At that same URL, we'll see a question asking now",
			"for the possible answers for the running time--",
			"for a lower bound on the running time of linear search.",
			"So let's go ahead and take a look at this one here.",
			"And in just a moment, we'll see as the responses come in,",
			"about 75-plus percent of you are proposing",
			"that it's actually omega of 1.",
			"So omega is a lower bound.",
			"1 refers to constant time.",
			"And why is that?",
			"Let me just take a quick answer on this point.",
			"Among the 75% of you who said one step, or a constant number of steps,",
			"why is that?",
			"How do you think about this lower bound on running time?",
			"How about from Keith?",
			"Why omega of 1?",
			"AUDIENCE: Yeah, you can just open it and be lucky and find it in the first door.",
			"DAVID MALAN: Yeah.",
			"So it really speaks to just that.",
			"You might just get lucky, and the number you're looking for",
			"might be at the very first door.",
			"So the lower bound, in the best case, if you will, of this algorithm,",
			"linear search might very well be omega of 1 for exactly that reason--",
			"that you have-- get lucky and the element",
			"might be there at the beginning.",
			"So that's pretty good.",
			"You really can't do any better than that.",
			"So we this range now of a lower bound from omega of 1 on up to big O of n",
			"being an upper bound on the running time of linear search.",
			"But of course, we have this other algorithm in our toolkit.",
			"And recall from week 0 that we looked at binary search-- although,",
			"not necessarily by name.",
			"It was that divide-and-conquer third algorithm, where we took the phone book",
			"and split it in half and half and half again.",
			"Now, while I fumbled there, Joe kindly has given us a new set of doors.",
			"If Joe, you could go ahead and reveal our seven doors again,",
			"behind which we still have some numbers.",
			"But I think this time, I'm going to be a little better off.",
			"Cue Joe and the doors behind.",
			"There we go.",
			"So we have our same seven doors.",
			"But behind those doors now is a different arrangement of numbers.",
			"And suppose this time, I want to find myself the number 6.",
			"So the number 6-- we'll change the problem slightly--",
			"but I'm going to give you one other ingredient this time,",
			"which is going to be key to this working.",
			"Why were Florence and I able to do no better than linear search before?",
			"Why were Florence and I able to do no better",
			"than randomly searching even last time?",
			"What was it about the array of numbers, or the array",
			"of doors, that did not allow me previously to use binary search?",
			"Iris, what do you think?",
			"AUDIENCE: Because we didn't know the numbers are sorted or not.",
			"DAVID MALAN: Yeah.",
			"We didn't know if the numbers were sorted or not.",
			"And indeed, barring that detail, Florence and I",
			"really couldn't have done any better than, say, linear search.",
			"So this time, though, Joe has kindly sorted some numbers",
			"behind these doors for us.",
			"And so if I want to search for the number 6,",
			"now I can begin to use a bit of that information.",
			"So you know what, I'm going to start just like we did with the phone book",
			"and start roughly in the middle.",
			"And voila, number 5.",
			"All right.",
			"So we're pretty close, we're pretty close.",
			"But the thing about binary search, recall,",
			"is that this is now useful information.",
			"If the numbers are sorted behind these doors all, of the doors to the left",
			"should presumably be lower than 5, and all of the doors to the right",
			"should presumably be larger than 5.",
			"Now, I might kind of cut a corner here and be like, well, if this is 5,",
			"6 is probably right next door, literally.",
			"But again, algorithmically, how might we do this?",
			"We don't want to necessarily consider these special cases.",
			"So more generally, it looks like I now have an array of size 3.",
			"So let me go ahead and apply that same algorithm, voila, to the middle.",
			"Now I have the number 7.",
			"And now it's becoming pretty clear that if the number 6 is present,",
			"it's probably behind this door.",
			"And indeed, if I now look at my remaining array of size 1, and voila,",
			"in the middle there is that number 6.",
			"So this time, I only had to open up three doors instead of all seven,",
			"potentially, or maybe all six doors to find my way to that number,",
			"because I was given this additional ingredient of all",
			"of those numbers being sorted.",
			"So it would seem, then, that you can apply",
			"the better, more efficient, better designed algorithm, now known",
			"as binary search, if only someone like Joe would sort the numbers for you",
			"in advance.",
			"So let's consider now a little more algorithmically",
			"how we might implement this.",
			"So with binary search, let me propose this pseudocode.",
			"If the number is behind the middle door, return true-- we found it.",
			"So if we got lucky, then we might very well",
			"have found the number 6 behind the middle door,",
			"and we would have been done.",
			"But that didn't happen.",
			"And in the general case that probably won't happen.",
			"So if the number is less than that behind the middle door, then",
			"just like with the phone book, I'm going to go to the left,",
			"and I'm going to search the left half of the remaining doors in the array.",
			"Else if the number is greater than that behind the middle door,",
			"then like the phone book I'm going to go ahead and search",
			"the right half of the phone book.",
			"But there might still be one final case potentially,",
			"whereby if there's no doors left at all, or no doors in the first place,",
			"I should at least have this one special case where I do say return false.",
			"For instance, if 6, for whatever reason, weren't be among those doors",
			"and I were searching for it, I still need",
			"to be able to handle that situation where I can say definitively",
			"return false if I'm left with no further doors to search.",
			"So here, then, might be the pseudocode for this algorithm a bit more formally.",
			"Now let's consider the analysis thereof.",
			"Before, where we left off, linear search was big O of n.",
			"Linear search was big O of n.",
			"This time let's consider where binary search actually falls into place",
			"by asking a different question.",
			"I'm going to go ahead and go back and ask this question now--",
			"what's an upper bound on the running time of binary search?",
			"An upper bound on the running time of binary search--",
			"and go ahead and buzz in, if you'd like, similarly to before.",
			"What's an upper bound on the running time of binary search?",
			"And you can see here answers are getting pretty dominant around log n.",
			"And indeed, that jives with exactly what we did in week 0.",
			"The correct answer is indeed log of n, because that's",
			"going to be the maximum number of times that you",
			"can take a list or an array of a given size",
			"and split it in half and half and half, until you",
			"find the number you're looking for, or ultimately you",
			"don't find that number at all.",
			"Meanwhile, if we consider now not just the upper bound on this algorithm--",
			"so in the worst case, binary search takes big O of log n--",
			"now let's consider a related question which",
			"is, what's a lower bound on the running time of this same algorithm?",
			"What's a lower bound on the running time?",
			"I'll go ahead and pluck this one off myself",
			"and go back to some of the suggestions thus far.",
			"In the best case, maybe, too, you do get lucky,",
			"and the number you're looking for, 6 or some other number,",
			"is smack dab in the middle of the array.",
			"And so maybe indeed you can get away with just one step.",
			"And indeed, a lower bound on binary search now might very well just",
			"be an omega of 1, because in that best case you just get lucky,",
			"and it's right where you happen to start, in this case in the middle.",
			"So we seem to have a range there.",
			"But strictly speaking, it would seem that binary search is better.",
			"Binary search is better than linear search,",
			"because as n gets big, big, big, you can really feel that difference.",
			"In fact, recall from week 0 we played a little bit with these light bulbs.",
			"And right now, all 64 of these light bulbs are on.",
			"And let's consider for a moment, just to put this into perspective,",
			"how long it would take to use linear search to find",
			"one light bulb among these 64.",
			"And recall that in the worst case, maybe the light bulb, or the number",
			"that we're looking for, is way down there at the end,",
			"but we don't know in advance.",
			"And so Sumner, if you wouldn't mind executing linear search",
			"on these light bulbs, let's just get a feel for the efficiency",
			"or inefficiency of this algorithm.",
			"Linear search in light bulb form.",
			"So you'll notice that one light bulb at a time",
			"is going out, implying that I've searched that door, searched that door,",
			"searched that door.",
			"But we've only gone through 10 or so bulbs,",
			"and we've got another 50-plus to go.",
			"And you can see that if we look inside of these doors one per second,",
			"or turn off these light bulbs one per second, it's going to take a long time.",
			"In fact, it doesn't seem worthwhile to even wait until the very end.",
			"So Sumner, if you wouldn't mind, let's bring all the lights back up,",
			"and let's try once more another algorithm, this one binary search, just",
			"to get, again, a feel of what the running time is of an algorithm,",
			"like binary search that runs in logarithmic time.",
			"So in just a moment, we'll go ahead and execute binary search",
			"on these light bulbs, the idea being that there's one bulb we care about.",
			"Let's see how fast we can get down to just one bulb out of 64.",
			"So Sumner, on your marks, get set, go.",
			"",
			"And we're done just a few steps later.",
			"And then have this sole light bulb.",
			"That was so much faster.",
			"And in fact, we did this deliberately one iteration at a time.",
			"The algorithm that we just executed with Sumner's and Matt's help,",
			"algorithmically was operating at what's called 1 hertz, 1 hertz.",
			"And if you're unfamiliar with hertz, it's just one something per second.",
			"It's very often used in physics or just in discussions of electricity",
			"more generally.",
			"And indeed, in this case if you're doing one thing per second,",
			"that first algorithm, linear search, might have taken us like 64 seconds",
			"to get all the way to that final light bulb.",
			"But that second algorithm was logarithmic.",
			"And so by going from 64 to 32 to 16 to 8 to 4 to 2 to 1,",
			"we get to the final result much faster, even going at the same pace.",
			"So in fact, if you think of your computer's CPU,",
			"CPUs are also measured in hertz--",
			"H-E-R-T-Z. Probably measured in gigahertz,",
			"which is billions of hertz per second.",
			"So your CPU, the brain of your computer, If it's 1 gigahertz,",
			"that means it can literally do 1 billion things at a time.",
			"And here we have this sort of simpler setup of just light bulbs doing",
			"one thing per second.",
			"Your computer can do 1 billion of these kinds of operations at once.",
			"So just imagine, therefore, how much these savings tend",
			"to add up over time if you can take big bites out of these problems at once,",
			"as opposed to doing things like we did in week",
			"0, just one single step at a time.",
			"All right.",
			"Well, let's now go ahead and start to translate this to code.",
			"We have enough tools in our toolkit in C that I think,",
			"based on our discussion of arrays last week,",
			"we can now actually start to build something in code on our own.",
			"So I'm going to go ahead and create a file here in just a moment,",
			"in CS50 IDE, called, for instance, numbers.c.",
			"Let me go ahead and translate this to a file in C code called numbers.c.",
			"The goal at hand is just to implement linear search in code,",
			"just so that we're no longer waving our hands at the pseudocode",
			"but doing things a little more concretely.",
			"So I'm going to go ahead and include cs50.h.",
			"I'm going to go ahead and include stdio.h.",
			"And I'm going to start with no command line arguments,",
			"like we left off last week, but just with main void.",
			"And I'm going to go ahead and give myself an array of numbers,",
			"seven numbers, just like the doors.",
			"And I'm going to go ahead and say int numbers.",
			"And then this is a little trick that we didn't see last week,",
			"but it's handy for creating an array when",
			"you know in advance what numbers you want, which I do,",
			"because I'm going to mimic the doors that Joe kindly set up for us here, I'm",
			"going to go ahead and say give me an array that is equal to 4, 6, 8, 2, 7,",
			"5, 0.",
			"And this is the feature we didn't see last week.",
			"If you know in advance the numbers that you want to assign to an array,",
			"you actually don't have to bother specifying the size of the array",
			"explicitly.",
			"The compiler can figure that out intelligently for you.",
			"But you can use these curly braces with commas",
			"inside to enumerate from left to right the values",
			"that you want to put into that array.",
			"So after this line 6 has executed in my computer,",
			"I'm going to be left with an array called numbers,",
			"inside of which are seven integers listed",
			"from left to right in the computer's memory, so to speak, in this way.",
			"Now, what do I want to do with these numbers?",
			"Well, let's implement linear search.",
			"Linear search, as we latched on to earlier,",
			"is a searching from left to right or equivalently right to left--",
			"but convention tends to go left to right.",
			"So I'm going to do a standard for loop.",
			"For int i gets 0, i is less than--",
			"I'm going to keep it simple for now and hardcode this,",
			"but we could clean this up if we want, and I'm going to do i++ on each",
			"iteration.",
			"So I'm pretty sure that my line 8 will induce a for loop that",
			"iterates eight total times.",
			"And what question do I want to ask on each iteration?",
			"Well, if the numbers array at location i equals equals--",
			"for instance, the number I was searching for initially,",
			"let's go ahead and search for 0--",
			"then what do I want to do?",
			"Let me go ahead and print out something arbitrary but useful,",
			"like \"Found,\" quote, unquote, so the human knows.",
			"And then let me go ahead, and just for good measure, let me go ahead",
			"and return 0.",
			"And we'll come back to that in just a moment.",
			"But at the end of this program, I'm also going to do this-- printf \"Not found\"",
			"with a backslash n.",
			"And then I'm going to go ahead and return 1.",
			"But before we tease apart those returns, just",
			"consider the code in the aggregate.",
			"Here's my entire main function.",
			"And on line 6, to recap, I initialized the array,",
			"just as we did at the very beginning, with a seemingly random list of numbers",
			"behind the doors.",
			"Then on line 8, I'm going to iterate with this for loop",
			"seven total times, incrementing i in each turn.",
			"And then line 10, just like I was opening the doors one at a time,",
			"I'm going to check if the i-th number in this array",
			"equals equals the number I care about, 0, with that first demo.",
			"I'm going to print \"Found.\"",
			"Otherwise-- not else, per se-- but otherwise,",
			"if I go through this entire loop, checking if, if, if, if, if, and I",
			"never actually find 0, I'm going to have this catchall at the end that just",
			"says no matter what, if you reach line 16, print \"Not found,\"",
			"and then return 1.",
			"Now, this is a bit of a subtlety.",
			"But could someone remind us what's going on with the return 0",
			"on line 13 and the return 1 on line 17?",
			"Why 0 in 1, and why am I returning at all?",
			"What problem is this solving for me?",
			"Even though most of our programs thus far,",
			"we haven't bothered too much with this.",
			"Demi, is it?",
			"What do you think?",
			"AUDIENCE: It's Demi, but basically, return 0",
			"is like it was executed correctly, or it found it,",
			"and it kind of exits that loop saying that it was found.",
			"And then return 1 is like the return false, and it exits as well.",
			"DAVID MALAN: Exactly.",
			"And \"exit\" really is the operative word.",
			"In main, when you are done--",
			"ready to quit the program, as we've done with the word",
			"\"quit\" in some of our pseudocode in the past, you can literally return a value.",
			"And recall at the end of last week, we introduced the fact",
			"that main always returns an int.",
			"You and I have ignored that for at least a week or two,",
			"but sometimes it's useful to return an explicit value,",
			"whether it's for autograding purposes, whether it's",
			"for automated testing of your code in the real world,",
			"or just so it's a signal to the user that something indeed went",
			"Wrong.",
			"So you can return a value from main.",
			"And as Demi proposed, 0 means \"all is well.\"",
			"And it's a little counter-intuitive, because",
			"thus far true tends to be a good thing.",
			"But in this case, 0 is a good thing.",
			"All is well.",
			"It's success.",
			"And if you return any other value, for instance 1,",
			"that indicates that something went wrong.",
			"So the reason I'm printing out, after the word \"Found\" I'm returning 0,",
			"is so that effectively the program exits at that point.",
			"I don't want to keep going again and again if I already",
			"found the number I care about.",
			"And down here, this one admittedly isn't strictly necessary,",
			"because if I hit line 16 and maybe deleted line 17,",
			"the program's going to end anyway.",
			"But there wouldn't be that so-called exit status",
			"that we discussed last week briefly, whereby",
			"you can kind of signal to the computer whether something",
			"was successful or unsuccessful.",
			"And the reason that 0 is a good thing and 1 or any other number is not,",
			"consider how many things can go wrong in programs that you write",
			"or that companies in the real world write",
			"when you get those error messages, sometimes",
			"with those cryptic error codes.",
			"There are hundreds, thousands of problems",
			"that might happen in a computer program that could be that many error",
			"codes that you see on the screen, reasons",
			"explaining why the program crashed or froze or the like.",
			"But 0 is sort of special in that it's just one value that the world has",
			"decided means \"success.\"",
			"So there's only one way to get your program right, in a sense,",
			"but there's so many millions of ways in which things can go wrong.",
			"And that's why humans have adopted that particular convention.",
			"All right.",
			"But let's consider now not just numbers, but let's make things more interesting.",
			"Besides the doors, suppose that we actually",
			"had people's names behind them.",
			"Well, let's go ahead and write a program this time",
			"that not only searches for numbers, but instead searches for names.",
			"So I'm going to go ahead and create a different file here called names.c.",
			"And I'm going to start a little similarly.",
			"I'm going to include cs50.h at the top, I'm going to include stdio at the top.",
			"But I'm also this time going to include string.h,",
			"which we introduced briefly last week, so",
			"that we have access to strlen for getting the length of a string,",
			"and, it turns out, some other functions.",
			"Let me go ahead and declare int main void as usual.",
			"And then inside here, I need some arbitrary names.",
			"So let's come up with seven names here.",
			"And here, too, I can declare an array just as I did before.",
			"But it doesn't have to store only ints.",
			"It can store strings instead.",
			"So I've changed the data type from int to string,",
			"and I've changed the variable name from numbers to names.",
			"And I can still use this new curly brace notation,",
			"and I can give myself a name like Bill, and maybe Charlie, and maybe Fred,",
			"and maybe George, and maybe Ginny, and maybe Percy, and lastly,",
			"maybe a name like Ron.",
			"And it just barely fits on my screen.",
			"So with that said, I now have this array of names.",
			"And beyond there being a perhaps obvious pattern to them,",
			"there's a second less obvious, or maybe obvious, pattern to them.",
			"How would you describe the list of names I arbitrarily just came up with?",
			"What's a useful characteristic of them?",
			"What do you notice about these names?",
			"And there's at least two right answers to this question, I think.",
			"What do you notice about these names?",
			"Jack?",
			"AUDIENCE: They're in alphabetical order.",
			"DAVID MALAN: Yes.",
			"So beyond being the names of the Weasley children in Harry Potter,",
			"they're also in alphabetical order.",
			"And that's the more salient detail.",
			"For our purposes, I've had the forethought",
			"this time to sort these names in advance.",
			"And if I've sorted these names, that means implicitly",
			"I can use a better algorithm than linear search.",
			"I can use, for instance, our old binary search.",
			"But let's go ahead first and just search them naively for now.",
			"Let's still apply linear search, because, you know,",
			"what we haven't yet done is necessarily compare strings against one another.",
			"We've done a lot of comparisons of numbers like integers.",
			"But what about names?",
			"So let me go ahead and do this.",
			"So for int i gets 0, just like before, i less than 7, i++--",
			"and I'm doing this only because I know in advance there are seven names.",
			"I think we could probably improve the design of this code,",
			"too, by having a variable or a constant storing that value.",
			"But I'm going to keep it simple and focus only on the new details for now.",
			"And it turns out, for reasons we'll explore in more detail next week,",
			"it is not sufficient to do what we did before and do something like this",
			"if I'm searching for \"Ron.\"",
			"It turns out that in C, you can't use equals equals to compare two strings.",
			"You can for an int, you can for a char.",
			"And we've done both of those in the past.",
			"But there's a subtlety that we'll dive into in more detail next week that",
			"means you can't actually do this.",
			"And this is curious, because if you have prior programming",
			"experience in languages like Python or the like, you can do this.",
			"So in C you can't, but we'll see next time why.",
			"But for now, it turns out that C can solve this problem,",
			"and historically the way you do this is with a function.",
			"So inside of the string.h header file, there",
			"is not only a declaration for strlen, the length of a string like last week.",
			"There's another function called strcmp.",
			"And \"stir compare,\" for short, S-T-R-C-M-P,",
			"allows me to pass in two strings, one string that I want to compare against",
			"another string.",
			"So it's not quite the same syntax.",
			"Indeed, it's a little harder to read.",
			"It's not quite as simple as equals equals.",
			"But strcmp, if we read the documentation for it,",
			"will tell us that this compares two strings.",
			"And it returns one of three possible values.",
			"If those two strings are equal, that is, identically the same letter for letter,",
			"then this function is going to return 0, it turns out.",
			"If the first string is supposed to come before the second string",
			"alphabetically, in some sense, then this function",
			"is going to return a negative value.",
			"If the first string is supposed to come after the second string alphabetically,",
			"if you will, then it's going to return a positive value.",
			"So there's three possible outcomes-- either equal to 0, or less than 0,",
			"or greater than 0.",
			"But you'll notice, and in fact, if you look at the documentation some time,",
			"it doesn't specify what value less than 0 or what value greater than 0.",
			"You have to just check for any negative value or any positive value.",
			"And I also told a bit of a white lie a moment ago.",
			"This does not check things alphabetically,",
			"even though it coincidentally does sometimes.",
			"Actually compares strings in what's called ASCII order,",
			"or ASCIIbetically which is kind of a goofy way of describing",
			"this function looks at every character in the two strings, from left to right,",
			"it checks the ASCII values of them, and then it compares those ASCII values",
			"character by character.",
			"And if the ASCII value is less than the other,",
			"then it returns a negative value or vice versa.",
			"So if you have, for instance, the letter A, capital A in the string,",
			"that gets converted first to 65.",
			"And then if you have an A in the other string capitalized,",
			"it, too, gets compared to 65, and those would be equal.",
			"But of course, all of these names have more than one character,",
			"so this ASCII order, or ASCIIbetical, precedes left to right",
			"so that strcmp checks every character in the names for you.",
			"And it stops when it hits that terminating null character.",
			"Recall that strings, underneath the hood,",
			"always end in C with this backslash 0, or eight 0 bits.",
			"So that's how strcmp knows when to stop comparing values.",
			"But if I go ahead and find someone like Ron, let me go ahead",
			"and print out quote, unquote, \"Found.\"",
			"And like before, I'll go ahead and return, like Demi proposed,",
			"0, just to imply that all is successful.",
			"Otherwise, if we get all the way to the bottom of my code,",
			"I'm going to print out \"Not found\" to tell the story that we did not",
			"find Ron in this array, even though he does happen to be there,",
			"and I'm going to go ahead and return 1.",
			"So even though I've hardcoded everything--",
			"to hardcode something in a program means to type it out explicitly--",
			"you could imagine using a command line argument like last week",
			"to get user's input.",
			"Who would you like to search for?",
			"You could imagine using get_string to get user's input and ask them,",
			"who would you like to search for?",
			"But for now, just for demonstration sake, I've used only Ron's name.",
			"And if I haven't made any typos--",
			"let me go ahead and type in make names, Enter, so far so good, ./names.",
			"And hopefully, we'll see, indeed, \"Found,\"",
			"because \"Ron\" is very much in this array of seven siblings.",
			"But the building blocks that are new here",
			"are, again, the fact that when we declare an array of some fixed size",
			"we don't strictly need to put a number here,",
			"and we have this curly brace notation when we",
			"know the array's contents in advance.",
			"But perhaps lastly and most powerfully, we",
			"do have this function in C called strcmp that will allow us to actually",
			"store and compare strings in this way.",
			"So let me pause here and just ask if there's",
			"any questions about how we translated these ideas to code for numbers,",
			"and how we translated these ideas to code for now",
			"names, each time using linear search, not, binary.",
			"Caleb, question?",
			"AUDIENCE: Yeah.",
			"So would that program still work if \"Ron,\" for example, was like all caps,",
			"like if you're trying to search--",
			"like, if the cases are different in terms of uppercase and lowercase?",
			"DAVID MALAN: Really good question.",
			"And let me propose an instinct that's useful to acquire in general--",
			"when in doubt, try it.",
			"So I'm going to do exactly that.",
			"I do happen to know the answer, but suppose I didn't.",
			"Let me go ahead and change \"Ron\" to all caps, just because.",
			"Maybe the human, the Caps Lock key was on,",
			"and they typed it in a little sloppily.",
			"Let me go ahead and make no other changes.",
			"Notice that I'm leaving the original array alone with only a capital R.",
			"Let me remake this program, make name, ./names.",
			"And voila, he's still, in fact, found.",
			"",
			"Stand by.",
			"",
			"Oh, OK.",
			"",
			"Caleb, you have just helped me unearth, a bug that",
			"was latent in the previous example.",
			"None of you should have accepted the fact",
			"that the previous program worked with \"RON,\" because I didn't",
			"practice literally what I'm preaching.",
			"So Caleb, hold that thought for just a moment so I can rewind a little bit",
			"and fix my apparent bug.",
			"So \"RON\" was indeed found.",
			"But he wasn't found because \"RON\" was found.",
			"I did something stupid here.",
			"And it's perhaps all the more pedagogically appropriate",
			"now to highlight that.",
			"So how did this program say \"Ron\" was found, even though this time it also",
			"says \"RON\" was found in all caps?",
			"And you know what, let me get a little curious here.",
			"Let me go ahead and search for, not even \"Ron.\"",
			"How about we search for Ron's mom, \"Molly\"?",
			"Make names.",
			"All right.",
			"And now, just to reveal that I really did do something stupid, ./names.",
			"OK, now something's clearly wrong, right?",
			"I can even search for the father \"Arthur\", make names, ./name.",
			"It seems that I wrote you a program that just literally always says \"Found.\"",
			"So we shouldn't have accepted this as correct.",
			"Can anyone spot the bug based on my definition thus far?",
			"Can anyone spot the bug?",
			"In the meantime, this isn't really a bad time to open up the duck",
			"and say, \"Hello, duck.",
			"I am having a problem whereby my program is always printing Found",
			"even when someone is not in the array.",
			"And I could proceed to explain my logic to the duck,",
			"but hopefully Sophia can point me at the solution even faster than the duck.",
			"AUDIENCE: You need to compare the value that we",
			"received from strcmp with something.",
			"So we need to compare it with like 0 and make sure",
			"that we receive the value that they're equal.",
			"DAVID MALAN: Perfect.",
			"So I said the right thing, but I literally did not do the right thing.",
			"If I want to check for equality, I literally",
			"need to check the return value when comparing names bracket i",
			"against \"Ron\" to equal 0.",
			"Because only in the case when the return value of strcmp is 0",
			"do I actually have a match.",
			"By contrast, if the function returns a negative value or the function",
			"returns a positive value, that means it's not a match.",
			"That means that one name is supposed to come before the other",
			"or after the other.",
			"But the catch with my shorthand syntax here, which is not always",
			"an incorrect syntax to use, whenever you have a Boolean expression inside",
			"of which is a function call like this--",
			"notice that the entirety of my Boolean expression",
			"is just a call, so to speak, to strcmp.",
			"I'm passing in two inputs, names bracket i and quote, unquote \"Ron.\"",
			"And therefore, I'm expecting strcmp to return output, a so-called return",
			"value.",
			"That return value is going to be negative or positive or 0.",
			"And in fact, to be clear, if the first name being searched",
			"for is \"Bill\" and names bracket i or names bracket 0",
			"is \"Bill,\" \"Bill\" comma \"Ron\" is effectively what",
			"my input is on the first iteration.",
			"\"Bill,\" alphabetically and ASCIIbetically,",
			"comes before \"Ron,\" which means it should",
			"be returning a negative value to me.",
			"And the problem with Boolean expressions is, as implemented in this context,",
			"is that only 0 is false.",
			"Any other return value is by definition true or a Yes answer,",
			"whether it's negative 1 or positive 1, negative 1 million",
			"or positive 1 million--",
			"any non-zero value in a computer language like C",
			"is considered true, also known as truthy.",
			"Any value that is 0 is considered false, but only",
			"that value is considered false.",
			"So really, I was getting lucky at first, because my program was finding \"Bill,\"",
			"but I was confusing \"Bill\" for \"Ron.\"",
			"Then when I did it again for Caleb and I capitalized \"Ron,\"",
			"I was getting unlucky, because suddenly I",
			"knew \"RON\" capitalized wasn't in the array,",
			"and yet I'm still saying he's found.",
			"But that's because I didn't practice what I preach per Sophia's find.",
			"And so if I actually compare this against 0-- and now, Caleb,",
			"we come full circle to your question--",
			"I rebuild this program with make names, I now do ./names and search for all",
			"caps \"RON,\" I should now see, thankfully, \"Not found.\"",
			"So I wish I could say that was deliberate, but thus",
			"is the common case of bugs.",
			"So here I am 20 years later making bugs in my code.",
			"So if you run up to a similar problem this week,",
			"rest assured that it never ends.",
			"But hopefully you won't have several people watching you",
			"while you do your problem set this week.",
			"All right.",
			"Any questions, then, beyond Caleb's?",
			"So great question, Caleb, and the answer is no.",
			"It is case sensitive.",
			"So it does not find \"Rob\"--",
			"\"RON.\"",
			"Any questions here?",
			"Any questions on linear search using strings?",
			"No?",
			"All right, well, let's go ahead and do one final example, I think,",
			"with searching.",
			"But let's introduce just one other feature.",
			"And this one's actually pretty cool and powerful.",
			"Up until now, we've been using data types that just come with C",
			"or come from CS50, like int, and char, and float, and the like.",
			"And you'll see now that there's actually sometimes",
			"reasons where you or I might want to create our own custom data types,",
			"our own types that didn't exist when C itself was invented.",
			"So for instance, suppose that I wanted to represent not just",
			"a whole bunch of numbers and not just a whole bunch of names,",
			"but suppose I want to implement like a full-fledged phone book.",
			"A phone book, of course, contains both names and numbers.",
			"And suppose I want to combine these two ideas together.",
			"Wouldn't it be nice if I could have a data structure that",
			"is a data type that has some structure to it that can actually",
			"store both at once?",
			"And in fact, wouldn't it be nice if C had a data type called person,",
			"so that if I want to represent a person, like in a phone book, who",
			"had both a name and a number, I can actually",
			"implement that and code by calling that variable of type person?",
			"Now, of course, the designers of C did not have the foresight",
			"to create a data type called person.",
			"And, indeed, that would be a slippery slope",
			"if they had a data type for every real-world entity you can think of.",
			"But they did give us the capabilities to do this.",
			"So if a person, in our limited world here of phone books,",
			"has both a name and a number, we might think of it as follows--",
			"a name and a number, both of type string.",
			"But a quick check here.",
			"Why have I now decided, somewhat presumptuously,",
			"to call phone numbers strings as well?",
			"We've been talking about ints behind these doors.",
			"We've been searching for ints in code.",
			"But why did I just presume to propose that we instead",
			"implement a phone book using strings for names and numbers?",
			"Any thoughts here, Kurt?",
			"AUDIENCE: Yeah.",
			"Because we're not doing math on it.",
			"It's like-- a phone number could be, like, letters for all we care.",
			"And in fact, I mean, sometimes you see, like,",
			"1-800 Contacts or something like that, and maybe we want to allow that.",
			"DAVID MALAN: Yeah, absolutely.",
			"A phone number, despite its name, isn't necessarily just a number.",
			"It might be 1-800 Contacts, which is an English word.",
			"It might have hyphens in it or dashes.",
			"It might have parentheses in it.",
			"It might have a plus sign for country codes.",
			"There's a lot of characters that we absolutely",
			"can represent in C using strings that we couldn't represent in C using int.",
			"And so indeed, even though in the real world",
			"there are these \"numbers\" that you and I talk about once in a while like phone",
			"numbers, maybe in the US Social Security numbers, credit card numbers,",
			"those aren't necessarily values that you want to treat as actual integers.",
			"And in fact, those of you who did the credit problem",
			"and tried to validate credit card numbers",
			"may very well have run into challenges by using a long to represent a credit",
			"card number.",
			"It probably in retrospect might very well",
			"have been easier for you to treat credit card numbers as strings.",
			"The catch, of course, by design is that you didn't yet",
			"have strings in your vocabulary, at least in C yet.",
			"So suppose I want to create my own custom data",
			"type that encapsulates, if you will, two different types of values.",
			"A person shall be henceforth a name and a number.",
			"It turns out that C gives us this syntax here.",
			"This is the only juicy piece of new syntax besides those curly braces",
			"a moment ago that we'll see today in C, typedef.",
			"And as the name rather succinctly suggests,",
			"this allows you to define a type.",
			"And the type will be a structure of some sort.",
			"So a data structure in a programming language",
			"is typically a data type that has some structure to it.",
			"What do we mean by \"structure\"?",
			"It typically has one or more values inside of it.",
			"So using typedef, and in turn using the struct keyword,",
			"we can create our own custom types that's",
			"a structure, a composition of multiple other data types.",
			"So if we want to keep persons together as their own custom data type,",
			"the syntax is a little cryptic here.",
			"You literally do typedef struct open curly brace,",
			"then one per line you specify the data types that you want",
			"and the names that you want to give to those data types,",
			"for instance name and number.",
			"And then outside of the closing curly brace,",
			"you literally put the word \"person,\" if that's indeed the data type",
			"that you want to invent.",
			"So how can we use this more powerfully?",
			"Well, let's go ahead and do things the wrong way without this feature first,",
			"so as to motivate its existence.",
			"Let me go ahead and save this file as phonebook.c.",
			"And let me start, as always, with includes cs50.h.",
			"And then let me go ahead and include stdio.h.",
			"And then lastly, let me also include string.h,",
			"because I know I'm going to be manipulating some strings in a moment.",
			"Let me go ahead now, and within my main function, let me go ahead",
			"and give myself initially, for the first version of this program,",
			"a whole bunch of names.",
			"Specifically, how about \"Brian\" comma \"David\"?",
			"We'll keep it short, just so as to focus on the ideas and not the actual data",
			"they're in.",
			"Then Brian and I each have phone numbers.",
			"So let's go ahead and store them in an array--",
			"numbers equals, again the curly braces as before, and +1-617-495-1000--",
			"and indeed, there's already motivation, per Kurt's comment, to use strings,",
			"because we've got a plus and a couple of dashes in there--",
			"and then my number here.",
			"So we'll do +1-949-468-2750 close curly brace, semicolon.",
			"So I've gone ahead and declared two arrays, one called names,",
			"one called numbers.",
			"And I'm just going to have sort of a handshake agreement",
			"that the first name in names corresponds to the first number in numbers,",
			"the second name in names corresponds to the second number in numbers.",
			"And you can imagine that working well so long as you don't make any mistakes,",
			"and you have just the right number in each.",
			"Now let me go ahead and do int i equals 0, i less than 2--",
			"I'm going to keep that hardcoded for now just to do the demonstration.",
			"And then inside of this loop, let me go ahead and search for my phone number,",
			"for instance, even though I happen to be at the end.",
			"So if strcmp of names bracket i equals--",
			"rather, comma \"David\" equals equals 0--",
			"so I'm not going to make that mistake again.",
			"Let me go ahead inside of this loop, inside of this condition here.",
			"And I'm going to go ahead and do the following-- print out that I found,",
			"for instance my number.",
			"And I'm going to plug that in.",
			"So numbers bracket i.",
			"And then as before, I'm going to go ahead and return 0.",
			"And if none of this works out, and I happen not to be in this array,",
			"I'll go ahead and print out as before \"Not found\" with a semicolon.",
			"And then I'll return 1 arbitrarily.",
			"I can return negative 1, I could return a million, negative million.",
			"But human convention would typically have you go from 0 to 1 to 2 to 3",
			"on up, if you have that many possible error conditions.",
			"All right.",
			"So I essentially have implemented in C a phone book of sorts.",
			"We did this verbally in week 0.",
			"Now I'm doing it in code.",
			"It's a limited phone book.",
			"It's only got two names and two numbers.",
			"But I could certainly implement this phone book",
			"by just using two arrays, two parallel arrays, if you will,",
			"by just using the honor system that the first element and names lines",
			"up with the first elements and numbers and so forth.",
			"Now hopefully, if I don't make any typos,",
			"let me go ahead and make phonebook.",
			"All right.",
			"It compiled OK. ./phonebook, and it found what seems to be my number there.",
			"So it seems to work correctly, though I've tried to pull that one over you",
			"before.",
			"But I'm pretty sure this one actually works correctly.",
			"And so we found my name and in turn number.",
			"But why is the design of this code not necessarily the best?",
			"This is starting to get more subtle, admittedly.",
			"And we've seen that we can do this differently.",
			"But what rubs you the wrong way about here?",
			"This is another example of what we might call \"code smell.\"",
			"Like, something's a little funky here, like, ah, this",
			"might not be the best solution long term Nick, what do you think?",
			"AUDIENCE: Yeah.",
			"So what I'm guessing is that--",
			"like, you know how you made the data frame before the new data structure,",
			"where the two things were linked together?",
			"In this case, we're just banking on the fact",
			"that we don't screw something up and unintentionally unlink them",
			"from the same index.",
			"So they're not intrinsically linked, which might not be--",
			"DAVID MALAN: That's exactly the right instinct.",
			"In general, as great as a programmer as you're maybe aspiring to be,",
			"you're not all that.",
			"And like, you're going to make mistakes.",
			"And the more you can write code that's self-defensive,",
			"that protects you from yourself, the better off you're going to be,",
			"the more correct your code is going to be,",
			"and the more easily you're going to be able to collaborate successfully,",
			"if you so choose in the real world, on real-world programming projects,",
			"whether for a research project, a full-time job, a personal project",
			"or the like.",
			"Generally speaking, you should not trust yourself or other people",
			"that-- with whom you're writing code, you",
			"should have as many defense mechanisms in place exactly along these lines.",
			"So yes, there's nothing wrong with what I have done in the sense",
			"that this is correct.",
			"But as noted, if you screw up, and maybe you get an off by one error--",
			"maybe you transpose two names or two numbers.",
			"I mean, imagine if you've got dozens of names and numbers,",
			"hundreds of names and numbers, thousands of them",
			"the odds that you or someone messes the order up at some point",
			"is just probably going to be too, too high.",
			"So it would be nice, then, if we could sort of keep related data together.",
			"This is kind of a hack, to just on the honor system say, my arrays line up,",
			"I'm just going to make sure to keep them the same length.",
			"We can do better.",
			"Let's keep related data together and design this a little more cleanly.",
			"And I can do this by defining my own type",
			"that I'll call for instance, a person.",
			"So at the top of this file, before main, I'm",
			"going to go ahead and typedef a structure, inside",
			"of which are the two types of data that I care about,",
			"string name and string number, just as before.",
			"Notice, though, here that what I have done here is not give myself an array.",
			"I've given myself one name and one number.",
			"Outside of this curly brace, I'm going to give this data type",
			"a name, which I could call \"person.\"",
			"I could call it anything I want, but person",
			"seems pretty reasonable in this case.",
			"And now down here, I'm going to go ahead and change this code a little bit.",
			"I'm going to go ahead and give myself an array still,",
			"but this time I'm going to give myself an array of persons.",
			"And I'm going to call that array, somewhat playfully, \"people,\"",
			"because I want to have two persons, two people, in this program, me and Brian.",
			"Now I want to go ahead and populate this array.",
			"That is, I want to fill it with values.",
			"And this syntax is a little new, but it's just",
			"to enable us to actually store values inside of a structure.",
			"If I want to index into this array, there's",
			"nothing different from last week.",
			"I do people bracket 0.",
			"That's going to give me the first person variable inside, so probably where",
			"\"Brian\" is supposed to go.",
			"The one last piece of syntax I need is how do I",
			"go inside of that structure, that person data structure,",
			"and access the person's name?",
			"I literally just do a dot.",
			"So people bracket 0 gives me the first person in the people array.",
			"And then the dot means, go inside of it and grab the person variable.",
			"I'm going to go ahead and set that name equal to quote, unquote \"Brian.\"",
			"The syntax now for his name is almost identical--",
			"people bracket 0 dot number equals quote, unquote \"+1-617-495-1000\"",
			"semicolon.",
			"Meanwhile, if I want to access a location for myself,",
			"I'm going to go ahead and put it at location 1, which",
			"is the second location.",
			"Name will be, quote, unquote \"David.\"",
			"And then over here, I'm going to do people bracket 1 dot number equals",
			"quote, unquote \"+1-949-468-2750\" close quote, semicolon.",
			"So it's a bit verbose, admittedly.",
			"But you could imagine, if we just let our thoughts run ahead of ourselves",
			"here, if you used get_string, could sort of automatically do this.",
			"If you used command line arguments, maybe you could populate some of this.",
			"We don't just have to hardcode, that is, write my name and number",
			"and Brian's into this program.",
			"You can imagine doing this more dynamically",
			"using some of our techniques, using get_string and so forth, from week 1.",
			"But for now, it's just for demonstration's sake.",
			"So now if I want to search this new array, this new single array of people,",
			"I think my for loop can stay the same.",
			"And I think I can still use strcmp.",
			"But now I need to go inside of not names but people,",
			"and look for the dot name field.",
			"So data structures have fields or variables inside of them.",
			"So I'm going to use the dot notation there,",
			"too, go into the i-th person in the people array,",
			"and compare that name against, for instance, quote, unquote \"David.\"",
			"And then if I have found \"David,\" in this case myself,",
			"go ahead and access the people array again, but print out using printf",
			"the number.",
			"So again, the dot operator is the only new piece of syntax",
			"that's letting us go inside of this new feature known as a data structure.",
			"If I go ahead and make phonebook again after making those changes,",
			"all is well.",
			"It compiled OK.",
			"And if I run ./phonebook, I now have hopefully found my number again.",
			"So here is a seemingly useless exercise, in that all",
			"I really did was re-implement the same program using more lines of code",
			"and making it more complicated.",
			"But it's now better designed.",
			"Or it's a step toward being better designed, because now I've",
			"encapsulated all inside of one variable, for instance, people bracket 0,",
			"people bracket 1, all of the information we care about with respect to Brian,",
			"or me, or anyone else we might put into this program.",
			"And indeed, this is how programs, this is how Googles, of the world,",
			"Facebooks of the world store lots of information together.",
			"Consider any of your social media accounts like Instagram,",
			"or Facebook, or Snapchat and the like.",
			"You have multiple pieces of data associated",
			"with you on all of those platforms-- not just your username",
			"but also your password, also your history of posts,",
			"also your friends and followers and the like.",
			"So there's a lot of information that these companies, for better for worse,",
			"are collecting on all of us.",
			"And can you imagine if they just had one big array with all of our usernames,",
			"one big array with all of our passwords, one big array with all of our friends?",
			"Like, you can imagine certainly at scale,",
			"that's got to be a bad design, to just trust",
			"that you're going to get the ordering of all of these things right.",
			"They don't do that.",
			"They instead write code in some language that somehow encapsulates",
			"all the information related to me and Brian",
			"and you inside of some kind of data structure.",
			"And that's what they put in their database or some other server",
			"on their back end.",
			"So this encapsulation is a feature we now have in terms of C.",
			"And it allows us to create our own data structures that we can then use",
			"in order to keep related data together.",
			"All right, any questions, then, on data structures, or more",
			"specifically typedef and struct, the C keywords",
			"with which you can create your own custom types",
			"that themselves are data structures?",
			"Besley?",
			"AUDIENCE: Hi.",
			"So is it typical to define the new data structure outside of main, like",
			"in a header?",
			"DAVID MALAN: Really good question.",
			"Is it typical to define a new data structure outside of main?",
			"Quite often yes.",
			"In this case, it's immaterial, because I only have",
			"one function in this program, main.",
			"But as we'll see this week and next week and onward,",
			"our programs are going to start to get a little more complicated by nature",
			"of just having more features.",
			"And once you have more features, you probably have more functions.",
			"And when you have more functions, you want your data structure",
			"to be available to all of those functions.",
			"And so we'll begin to see definition of some of these structures being,",
			"indeed, outside of our own functions.",
			"Peter, over to you.",
			"AUDIENCE: Oh, yeah.",
			"Will we define new classes in header files later,",
			"or will we keep defining them outside of main?",
			"DAVID MALAN: Really good question.",
			"Might we define our own types and our own data structures in header files?",
			"Yes.",
			"Eventually we'll do that, too.",
			"Thus far, you and I have only been using header files that other people wrote.",
			"We've been using stdio.h, string.h, that the authors of C created.",
			"You've been using cs50.h which we the staff wrote.",
			"It turns out, you can also create your own header files, your own .h files,",
			"inside of which are pieces of code that you want to share across multiple files",
			"of your own.",
			"We're not quite there yet.",
			"But yes, Peter, that would be a solution to this problem",
			"by putting it in one central place.",
			"Thiago, over to you.",
			"",
			"AUDIENCE: I was--",
			"I was thinking, this course really takes enough information to solve the sets,",
			"because I feel there is missing information.",
			"I am a freshman, and I was taking--",
			"I was so concentrating, and I can't go on, go ahead on the sets.",
			"Is there anything that I'm missing?",
			"DAVID MALAN: It's a really good question.",
			"And quite fair.",
			"We do move quite quickly, admittedly.",
			"So indeed, recall from week 0 the fire hose metaphor",
			"that I borrowed from MIT's water fountain.",
			"Indeed, that's very much the case.",
			"There's a lot of new syntax, a lot of new ideas all at once.",
			"But when it comes to individual problems in the problem sets,",
			"do realize that you should take those step by step.",
			"And invariably, they tend to work from less complicated to more complicated.",
			"And throughout each of the lectures and each of the examples",
			"that we do, either live or via the examples that",
			"are premade on the course's website for your review,",
			"there's always little clues or hints or examples that you can then do.",
			"And certainly, by way of other resources like labs and the like,",
			"will you see additional building blocks as well.",
			"So feel free to reach out more individually afterword.",
			"Happy to point you at some of those resources.",
			"In fact, most recently, too, will you notice on the course's website",
			"what we call \"shorts,\" which are shorter videos made",
			"by another colleague of mine, CS50's own Doug Lloyd, which are literally",
			"short videos on very specific topics.",
			"So after today, you'll see short videos by Doug",
			"with a different perspective on linear search, on binary search,",
			"and on a number of other algorithms as well.",
			"Good question.",
			"Sophia, back to you.",
			"AUDIENCE: I was wondering, with the return values",
			"that we have for different error cases, would that be--",
			"like, what's an example of what we would use that for?",
			"Is that for later if there are like several different cases",
			"and we want to somehow keep track of them?",
			"DAVID MALAN: Exactly the latter.",
			"So right now, honestly, it's kind of stupid",
			"that we're even bothering to spend time returning 0 or returning 1.",
			"Like, we don't really need to do that, because we're not",
			"using the information.",
			"But what we're trying to do is lay the foundation",
			"for more complicated programs.",
			"And indeed, this week and next week and beyond,",
			"as your own programs get a little longer, and as we, the course,",
			"start providing you with starter code or distribution",
			"code, that is, lines of code that the staff and I write that you then",
			"have to build upon, it's going to be a very useful mechanism",
			"to be able to signal that this went wrong or this other thing went wrong.",
			"So all we're doing is preparing for that inevitability,",
			"even if right now it doesn't really seem to be scratching an itch.",
			"Anthony?",
			"AUDIENCE: I was just going to ask really quickly,",
			"obviously in this code we have \"Brian\" and your name, \"David.\"",
			"And that's two people.",
			"So let's say we had 10 or 20 or even 30 people.",
			"I know it was a question in the chat, but I just",
			"wanted to clarify for myself, too.",
			"DAVID MALAN: And the \"what if\" being what would change?",
			"Or, what was the end of that question?",
			"AUDIENCE: Yeah.",
			"What would change in the code?",
			"Or what we do exactly to address that problem?",
			"DAVID MALAN: Ah, OK.",
			"Good question.",
			"So if we were to have more names, like a third name or a tenth name or the like,",
			"the only things that we would have to change in this version of the program",
			"is first, on line 14, the size of the array.",
			"So if we're going to have 10 people, we need",
			"to decide in advance that we're going to have 10 people.",
			"Better still, I could, for instance, allocate myself a constant up here.",
			"So let me actually go up here, just like we",
			"did in a previous class, where we did something like this-- const int NUMBER.",
			"And I'll just initialize this to 10.",
			"And recall that const means constant.",
			"That means this variable can't change.",
			"Int, of course means it's an integer.",
			"The fact that I've capitalized it is just a human convention",
			"to make a little visually clear that this is",
			"a constant, just so you don't forget.",
			"But it has no functional role.",
			"And then this, of course, is just the value to assign to NUMBER.",
			"Then I could go down here on line 16 and plug in that variable",
			"so that I don't have to hardcode what people would",
			"call a \"magic number,\" which is just a number that",
			"appears seemingly out of nowhere.",
			"Now I've put all of my special numbers at the top of my file,",
			"or toward the top of my file, and now I'm using this variable here.",
			"And then what I could do-- and I alluded to this only verbally before--",
			"I could absolutely start hardcoding in, for instance,",
			"Montague's name and number, and Rithvik's and Benedict's, and Cody's",
			"and others.",
			"But honestly, this seems kind of stupid if you're just hardcoding",
			"all of these names and numbers.",
			"And in a few weeks, we'll see how you can actually",
			"store all of the same information in like a spreadsheet,",
			"or what's called a CSV file--",
			"Comma Separated Values-- or even in a proper database, which the Facebooks",
			"and Googles of the world would use.",
			"But what I could do for now is something like this.",
			"For int i gets 0, i less than the number of people, i++.",
			"And maybe I could do something like this--",
			"people bracket i dot name equals get_string, \"What's the name\"",
			"question mark.",
			"And then here I could do people bracket i dot number equals",
			"get_string, \"What's their number?\"",
			"And I could ask that question, too.",
			"So now the program's getting to be a little better designed.",
			"I'm not arbitrarily hardcoding just me and Brian.",
			"Now it's dynamic.",
			"And technically, the phone book only supports 10 people at the moment,",
			"but I could make that dynamic, too.",
			"I could also call get_int.",
			"Or, like you did this past week, use a command line argument",
			"and parameterize the code so that it can actually",
			"be for 2 people, 10 people-- whatever you want,",
			"the program can dynamically adapt to it for you.",
			"Other questions?",
			"On structs, on types, or the like?",
			"No?",
			"All right.",
			"So how did we get here?",
			"Recall that we started with this problem of searching,",
			"whereby we just want to find someone in the doors.",
			"We just want to find someone in the array.",
			"We've sort of escalated things pretty quickly",
			"to finding not just numbers or names but now",
			"names with numbers in the form of these data structures.",
			"But to do this efficiently really requires a smarter algorithm",
			"like binary search.",
			"Up until now, we've only used in C code linear search, even though, recall,",
			"that we did have at our disposal the pseudocode for binary search.",
			"But with binary search, we're going to need the data to be sorted.",
			"And so if you want to get the speed benefits of searching",
			"more quickly by having sorted numbers, somehow someone",
			"is going to have to do that for us.",
			"Joe, for instance, sorted behind the curtain all of these numbers for us.",
			"But what algorithm did he use is going to open up",
			"a whole can of worms as to how we can sort numbers efficiently.",
			"And indeed, if you're the Googles and the Facebooks",
			"and the Instagrams of the world, with millions,",
			"billions of pieces of data and users, you surely",
			"want to keep that data sorted, presumably,",
			"so that you can use algorithms like binary search",
			"to find information quickly when you're searching for friends or for content.",
			"But let's go ahead and here take a five-minute break.",
			"And when we come back, we'll consider a few algorithms",
			"for sorting that's going to enable us to do everything we've just now discussed.",
			"See you in five.",
			"All right.",
			"We are back.",
			"So to recap, we have a couple different algorithms for searching, linear search",
			"and binary search.",
			"Binary search is clearly the winner from all measures we've seen thus far.",
			"The catch is that the data needs to be sorted in advanced in order",
			"to apply that algorithm.",
			"So let's just give ourselves a working model",
			"for what it means to sort something.",
			"Well, as always, if you think of this as just another problem to be solved,",
			"it's got input and output, and the goal is to take that input",
			"and produce that output.",
			"Well, what's the input?",
			"It's going to be a whole bunch of unsorted values.",
			"And the goal, of course, is to get sorted values.",
			"So the interesting part of the process is going",
			"to be whatever there is in the middle.",
			"But just to be even more concrete, if we think now in terms of this unsorted",
			"input as being an array of input-- because after all,",
			"that's perhaps the most useful mechanism we've seen thus far,",
			"to pass around a bunch of values at once using just one variable name--",
			"we might have an array like this, 6 3 8 5 2 7 4 1, which seems to be, indeed,",
			"randomly ordered, that is unsorted.",
			"And we want to turn that into an equivalent array that's just 1 2",
			"3 4 5 6 7 8.",
			"So eight numbers this time instead of seven.",
			"But the goal this time is not to search them, per se, but to sort them.",
			"But before I get ahead of myself, could someone",
			"push back on this whole intellectual exercise",
			"we're about to do with sorting in the first place?",
			"Could someone make an argument as to why we might not",
			"want to bother using a sorted array, why we might not",
			"want to bother sorting the elements, and heck, let's just use linear search",
			"to find some element--",
			"whether it's a number behind a door, a name in an array.",
			"Like, when might we want to just use linear search and not bother sorting?",
			"Sophia, what do you think?",
			"AUDIENCE: We could encounter errors in sorting,",
			"and that might cause errors, like, unpredictability in terms of,",
			"like, if we can find something.",
			"Versus linear search, we know we can find it.",
			"DAVID MALAN: OK, quite fair.",
			"I will concede that implementing binary search, not in pseudocode, which we've",
			"already done, but in code is actually more difficult,",
			"because you have to deal with rounding, especially",
			"if you've got a weird number of doors, like an odd number of doors",
			"versus an even number of doors or an array of those lengths.",
			"Honestly, you've got to deal with these corner cases,",
			"like rounding down or rounding up, because anything time",
			"you divide something by 2, you might get a fractional value",
			"or you might get a whole number.",
			"So we've got to make some decisions.",
			"So it's totally solvable.",
			"And humans for decades have been writing code that implements binary search.",
			"It's totally possible.",
			"There's libraries you can use.",
			"But it's definitely more challenging, and you open yourselves up to risk.",
			"But let me stipulate that that's OK.",
			"I am good enough at this point in my progression where I'm pretty",
			"sure I can implement it correctly.",
			"So correctness is not my concern.",
			"What else might demotivate me from sorting an array of elements?",
			"And what might motivate me to, ah, just use linear search.",
			"It's so simple.",
			"Can anyone propose why?",
			"Olivia, what do you think?",
			"AUDIENCE: If the name of the game is efficiency,",
			"and you have a small enough data set, then",
			"you might as well just search it versus sort",
			"it, which would be an extra expense.",
			"DAVID MALAN: Yeah, really well said.",
			"If you've got a relatively small data set,",
			"and your computer operates at a billion operations per second,",
			"for instance, my God, who cares if your code sucks and it's a little bit slow?",
			"Just do it the inefficient way.",
			"Why?",
			"Because it's going to take you maybe a few minutes to implement the simpler",
			"algorithm like linear search, even though it's going to take longer",
			"to run, whereas it might take you tens of minutes, maybe an hour",
			"or so, to not only write but debug something",
			"like a fancier algorithm, like binary search, at which point",
			"you might have spent more time writing the code, the faster code, than you",
			"would have just running the slower code.",
			"And I can speak to this personally.",
			"Back in grad school, some of the research I was doing",
			"involved analysis of very large data sets.",
			"And I had to write code in order to analyze this data.",
			"And I could have spent hours, days, even,",
			"writing the best designed algorithm I could to analyze",
			"the data as efficiently as possible.",
			"Or, frankly, I could write the crappy version of the code,",
			"go to sleep for eight hours, and my code will just",
			"produce the output I want by morning.",
			"And that is a very real-world, reasonable trade-off to make.",
			"And indeed, this is going to be thematic in the weeks that",
			"proceed in the course, where there's going to be this trade-off.",
			"And quite often, the trade-off is going to be",
			"time, or complexity, or the amount of space or memory that you're using.",
			"And part of the art of being a good computer scientist,",
			"and in turn programmer, is trying to decide where the line is.",
			"Do you exert more effort upfront to make a better, faster, more efficient",
			"algorithm, or do you maybe cut some corners",
			"there so that you can focus your most precious resource, human time,",
			"on other, more fundamentally challenging problems?",
			"So we for the course's problem sets and labs",
			"will always prescribe what's most important.",
			"But in a few weeks' time, with one of our problem",
			"sets will you implement your very own spell checker.",
			"And among the goals of that spell checker",
			"are going to be to minimize the amount of time",
			"your code is taking to run, and also to minimize the amount of space or memory",
			"that your program is taking while running.",
			"And so we'll begin to appreciate those trade-offs ever more.",
			"But indeed, it's the case-- and I really like Olivia's formulation of it--",
			"if your data set is pretty small, it's probably not worth",
			"writing the fastest, best designed algorithm as possible.",
			"Just write it the simple way, the correct way,",
			"and get the answer quickly, and move on.",
			"But that's not going to be the case for a lot of problems, dare I say,",
			"most problems in life.",
			"If you're building Facebook or Instagram or Whatsapp,",
			"or any of today's most popular services that are getting thousands, millions",
			"of new pieces of data at a time, you can't just",
			"linearly search all of your friends or connections on LinkedIn efficiently.",
			"You can't just linearly search the billions of web pages",
			"that Google and Microsoft index in their search engines.",
			"You've got to be smarter about it.",
			"And undoubtedly, the more successful your programs are",
			"and your code are, or websites, your apps, whatever the case may be,",
			"the more important design does come into play.",
			"So indeed, let's stipulate now that the goal is not to search these doors once;",
			"the goal is not to search these light bulbs once;",
			"the goal is not to search the phone book once, but rather again",
			"and again and again.",
			"And if that's going to be the case, then we probably",
			"should spend a little more time and a little more complexity upfront",
			"getting our code, not only right but also efficient,",
			"so that we can benefit from that efficiency again and again",
			"and again, over time.",
			"So how might we go about sorting some numbers.",
			"So in fact, let me see, to do this, if we can maybe",
			"get a hand from Brian in back.",
			"Brian, do you mind helping with sorting?",
			"BRIAN: Yeah, absolutely.",
			"So I've got eight numbers here right now that all seem to be in unsorted order.",
			"DAVID MALAN: Yeah.",
			"And Brian, could you go ahead, and could you sort these eight numbers for us?",
			"BRIAN: Yeah, I'll put them in order.",
			"So we'll take these and--",
			"um-- and all right.",
			"I think these are now in sorted order.",
			"DAVID MALAN: Yeah, indeed.",
			"I agree.",
			"And now let's take some critique from the audience, some observations.",
			"Would someone mind explaining how Brian just sorted those eight numbers?",
			"What did Brian just do, step by step, in order to get to that end result?",
			"The input was unsorted, the output now is sorted.",
			"So what did he do?",
			"Peter, what did you see happen?",
			"AUDIENCE: He went through them step by step.",
			"And if they were in increasing order, he flipped them,",
			"and kept doing it until they were all in the correct [INAUDIBLE]..",
			"DAVID MALAN: Yeah.",
			"He kept step by step kind of looking for small values",
			"and moving them to the left, and looking for big values",
			"and moving them to the right, so effectively selecting",
			"numbers one at a time and putting it into its right place.",
			"So let's see this is, maybe in more slow motion, if you will, Brian.",
			"And if you could be a little more pedantic",
			"and explain exactly what you're doing.",
			"I see you've already reset the numbers to their original, unsorted order.",
			"Why don't we go ahead and start a little more methodically?",
			"And could you go ahead and for us, more slowly this time,",
			"select the smallest value.",
			"Because I do think, per Peter, it's going",
			"to need to end up at the far left.",
			"BRIAN: Yeah, sure.",
			"So I'm looking at the numbers, and the 1 is the smallest.",
			"So I now have the smallest value.",
			"DAVID MALAN: All right.",
			"So you did that really quickly.",
			"But I feel like you took the liberty of being",
			"a human who can kind of have this bird's eye view of everything all at once.",
			"But be a little more computer-like, if you could.",
			"And if these eight numbers are technically in an array,",
			"kind of like my seven doors out here, such",
			"that you can only look at one number at a time, can you be even more methodical",
			"and deliberate this time in telling us how you found the smallest",
			"number to put into place?",
			"BRIAN: Sure.",
			"I guess, since the computer can only look at one number at a time,",
			"I would start at the left side of this array",
			"and work my way through the right, looking at each number one at a time.",
			"So I might start with the 6 and say, OK, this right now",
			"is the smallest number I've looked at so far.",
			"But then I look at the next number, and it's a 3, and that's smaller than a 6.",
			"So now the 3, that's the smallest number I found so far.",
			"So I'll remember that and keep looking.",
			"The 8 is bigger than the 3, so I don't need to worry about that.",
			"The 5 is bigger than the 3.",
			"The 2 is smaller than the 3, so that now is",
			"the smallest number I've found so far.",
			"But I'm not done yet.",
			"So I'll keep looking.",
			"The 7 is bigger than the 2, the 4 is bigger than the 2.",
			"But the 1 is smaller than the 2.",
			"So now I've made my way all the way to the end of the array.",
			"And 1, I can say, is the smallest number that I found.",
			"DAVID MALAN: OK.",
			"So what I'm hearing is you're doing all of these comparisons,",
			"also similar to what Peter implied, and you keep checking,",
			"is this smaller, is this smaller, is this smaller,",
			"and you're keeping track of the currently smallest number you've seen?",
			"BRIAN: Yeah, that sounds about right.",
			"DAVID MALAN: All right.",
			"So you found it.",
			"And I think it belongs at the beginning.",
			"So how do we put this into place now?",
			"BRIAN: Yeah, so I want to put it at the beginning.",
			"There's not really space for it.",
			"So I could make space for it, just by shifting these numbers over.",
			"DAVID MALAN: OK.",
			"Wait, wait.",
			"But I feel like you're just-- now you're doubling the amount of work.",
			"I feel like-- don't do all that.",
			"That feels like you're going to do more steps than we need.",
			"What else could we do here?",
			"BRIAN: OK.",
			"So the other option is, it needs to go in this spot,",
			"like this first spot in the array.",
			"So I could just put it there.",
			"But if I do that, I'm going to have to take the 6 which is there right now",
			"and pull the 6 out.",
			"DAVID MALAN: All right, but I think that's--",
			"BRIAN: So the 1 is in the right place, but the 6 isn't.",
			"DAVID MALAN: Yeah, I agree.",
			"But I think that's OK, right?",
			"Because these numbers started randomly, and so the 6 is in the wrong place",
			"anyway.",
			"I don't think we're making the problem any worse by just moving it elsewhere.",
			"And indeed, it's a lot faster, I would think, to just swap two numbers,",
			"move one to the other and vice versa, then",
			"shift all of those numbers in between.",
			"BRIAN: Yeah.",
			"So I took the 1 out of the position at the very end",
			"of the array, all the way on the right-hand side.",
			"So I guess I could take the 6 and just put it there,",
			"because that's where there's an open space to put the number.",
			"DAVID MALAN: Yeah.",
			"And it's not exactly in the right space, but again, it's no worse off.",
			"So I like that.",
			"All right.",
			"But now, the fact that the 1 is in the right place-- and indeed,",
			"you've illuminated it to indicate as much--",
			"I feel like we can pretty much ignore the 1 henceforth",
			"and now just select the next smallest element.",
			"So can you walk us through that?",
			"BRIAN: Yeah, so I guess I'd repeat the same process.",
			"I'd start with the 3.",
			"That's the smallest number I've found so far.",
			"And I keep looking.",
			"The 8 is bigger than the 3, the 5 is bigger than the 3.",
			"The 2 is smaller than the 3.",
			"So I'll remember that 2.",
			"That's the smallest thing I've seen so far.",
			"And then I just need to check to see if there's anything smaller than the 2.",
			"And I look at the 7, the 4, and the 6.",
			"None of those are smaller than the 2.",
			"So the 2, I can say is the next smallest number for the array.",
			"DAVID MALAN: OK.",
			"And where would you put that then?",
			"BRIAN: That needs to go in the second spot.",
			"So I need to pull the 3 out.",
			"And I guess I can take the 3 and just put it into this open spot, where",
			"there's available space.",
			"DAVID MALAN: Yeah.",
			"And I feel like it's starting to become clear",
			"that we're inside some kind of loop, because you pretty much told",
			"the same story again but with a different number.",
			"Do you mind just continuing the algorithm to the end",
			"and select the next smallest, next smallest, next smallest,",
			"and get that sorted?",
			"BRIAN: Sure.",
			"So we got the 8.",
			"5 is smaller than that, 3 is smaller than that.",
			"And then the rest of the number is 7, 4, 6.",
			"Those are all bigger.",
			"So the 3, that's going to go into sorted position here.",
			"And I'll take the 8 and swap it.",
			"Now I'm going to look at the 5.",
			"8 and 7 are both bigger.",
			"The 4 is smaller than the 5, but the 6 is bigger.",
			"So the 4, that's the smallest number I've seen so far.",
			"So the 4, that's going to go into place, and I'll swap it with the 5.",
			"And now I've got the 8.",
			"The 7 is smaller than the 8, so I'll remember that.",
			"5 is smaller than that.",
			"The 6 is bigger.",
			"So the 5, that's going to be the next number.",
			"And now I'm left with 7.",
			"8 is bigger, so 7 is still the smallest I've seen.",
			"But 6 is smaller, so 6 goes next.",
			"And now I'm down to the last two.",
			"And between the last two, the 8 and the 7, the 7 is smaller.",
			"So the 7 is going to go in this spot.",
			"And at this point, I've only got one number left.",
			"So that number must be in sorted position.",
			"And now I would say that this is a sorted array of numbers.",
			"DAVID MALAN: Nice.",
			"So it definitely seems to be correct.",
			"It felt a little slow.",
			"But of course, the computer could do this much faster",
			"than we, using an actual array.",
			"And if you don't mind my making an observation,",
			"it looks like if we have eight numbers to begin with, or n more generally,",
			"it looks like you essentially did n minus 1 comparisons,",
			"because you kept comparing numbers again-- actually, did n comparisons.",
			"You looked at the first number, and then you",
			"compared it again and again and again at all of the other possible values",
			"in order to find the smallest element.",
			"BRIAN: Yeah.",
			"Because for each of the numbers in the array, I had to do a comparison to see,",
			"is it smaller than the smallest thing that I've seen so far?",
			"And if it is smaller, than I needed to remember that.",
			"DAVID MALAN: Yeah.",
			"So in each pass you considered every number, so a total of n numbers first.",
			"And so you found the number 1 you put it in its place,",
			"and that left you to be clear with n minus 1 numbers thereafter.",
			"And then after that, n minus 2 numbers, n minus 3 numbers, dot,",
			"dot, dot, all the way down to one final number.",
			"So I think this is correct.",
			"And I think that's a pretty deliberate way",
			"of sorting these elements, a little more deliberately than your first approach,",
			"Brian, which I might describe as a little more organic.",
			"You kind of did it like--",
			"more like a human, just kind of eyeballing things and moving things",
			"around.",
			"But if we were to translate this into code,",
			"recall that we have to be ever so precise.",
			"And so let me consider altogether how exactly we might translate what Brian",
			"did ultimately to, again, pseudocode.",
			"So what he did is actually an algorithm that has a name.",
			"It's called selection sort.",
			"Why?",
			"Well, it's sorting the elements ultimately.",
			"And it's doing so by having Brian, or really the computer,",
			"select the smallest elements again and again and again.",
			"And once you found each such small element,",
			"you get the added benefit of just ignoring it.",
			"Indeed, every time Brian lit up a number,",
			"he didn't need to keep comparing it, so the amount of work he was doing",
			"was decreasing each iteration-- n numbers, then n minus 1,",
			"then n minus 2, n minus 3, and so forth.",
			"And so we can think about the running time of this algorithm",
			"as being manifest in its actual pseudocode.",
			"So how might we define the pseudocode?",
			"Well, let me propose that we think of it like this--",
			"for i from 0 to n minus 1.",
			"Now, undoubtedly this is probably the most cryptic",
			"looking line of the three lines of pseudocode on the screen.",
			"But again, this is the kind of thing that",
			"should become rote memory over time, or just instincts with code.",
			"We've seen in C how you can write a for loop.",
			"For loops typically, by convention, start counting at 0.",
			"But if you have n elements, you don't want to count up through n.",
			"You want to count up to n or equivalently up through n minus 1,",
			"so from 0 to n minus 1.",
			"All right.",
			"Now what do I want to do on the next--",
			"on the first iteration?",
			"Find the smallest item between the i-th item and the last item.",
			"So this is not quite obvious, I think, at first glance.",
			"But I do think it's a fair characterization of what Brian did.",
			"Because if i is initialized to 0, that was like Brian pointing",
			"his left hand at the first number on the very left of the shelf.",
			"And what he then did was he found the smallest element between the i-th item,",
			"the first item 0, and the last item.",
			"So that's kind of a very fancy way of saying,",
			"Brian, find the smallest elements among all n elements.",
			"Then what he did was swapped the smallest item with the i-th item.",
			"So he just did that switcheroo, so as to not have",
			"to waste time shifting everything over.",
			"He instead just made room for it by swapping it",
			"with the value that was in its wrong place.",
			"But now in the next iteration of this loop, consider how a for loop works.",
			"You do an i++ implicitly in pseudocode.",
			"That's what's happening here.",
			"So now i equals 1.",
			"Find the smallest item between the i-th item, item 1 0 indexed,",
			"and the last item.",
			"So this is a fancy way of saying, Brian, check all of the n elements",
			"again, except for the first, because now you're",
			"starting at location 1 instead of location 0.",
			"And now the algorithm proceeds.",
			"So you could write this code in different ways",
			"in English like pseudocode, but this seems",
			"to be a reasonable formulation of exactly that algorithm.",
			"But let's see it a little more visually now,",
			"without all of the switching around of the humans moving around the numbers.",
			"Let me go ahead and use this visualization.",
			"And we'll put a link on the course's website",
			"if you'd like to play with this as well.",
			"This is just someone's visualization of an array of numbers.",
			"But this time, rather than represent the numbers as symbols, decimal digits,",
			"now this person is using vertical bars, like a bar chart.",
			"And what this means is that a small bar is like a small number,",
			"and a big bar is a big number.",
			"So the goal here is to these bars, which equivalently might as well be numbers,",
			"from short bars over to tall bars, left to right.",
			"And I'm going to go ahead.",
			"And along the top of the here, I can choose my sorting algorithm.",
			"And the one we just described, recall, was selection sort.",
			"So let me go ahead and do this.",
			"And notice, it takes a moment, I think, to wrap your mind",
			"around what's happening here.",
			"But notice that this pink line is going from left to right, because that's",
			"essentially what Brian was doing.",
			"He was walking back and forth, back and forth, back and forth",
			"through that shelf of numbers, looking for the next smallest number,",
			"and he kept putting the smallest number over on the left where it belongs.",
			"And indeed, that's why in this visualization",
			"you see the small numbers beginning to be put into place on the left",
			"as we keep swooping through.",
			"But notice, the colored bar keeps starting later and later,",
			"more rightward and more rightward, just like Brian was not retracing his steps.",
			"As soon as he lit up the numbers, he left them alone.",
			"And voila, all of these numbers are now sorted.",
			"So that's just a graphical way of thinking about the same algorithm.",
			"But how efficient or inefficient was that?",
			"Well, let's see if we can apply some numbers here.",
			"But there's also ways to do this a little more intuitively",
			"over time, which we'll do, too.",
			"So if the first time through the shelf of numbers, he",
			"had eight numbers at his disposal-- he had to look at all eight numbers",
			"in order to decide which of these is the smallest.",
			"So that's n steps initially.",
			"The next time he did a pass through the shelf,",
			"he ignored the brightly lit number 1, because it was already",
			"in place by definition of what he had already done.",
			"So now he had n minus 1 steps to go.",
			"Then he did another n minus 2 steps, then n minus 3, n minus 4, n minus 5,",
			"dot, dot, dot, all the way down to the final step, where he just",
			"had to find and leave alone the number 8,",
			"because that was the biggest number, so one single step.",
			"So this is some kind of series here, mathematically.",
			"You might recall something like this in, like, the back of your math book",
			"or in high school, or back of your physics textbook or the like.",
			"It turns out that this actually sums up to this formula here--",
			"n times n plus 1 divided by 2.",
			"And if that's not familiar, you don't remember that, no big deal.",
			"Just let me stipulate that the mathematical formula with which we",
			"began, where we had the series of n, plus n minus 1, plus n minus 2,",
			"plus n minus 3, dot, dot, dot, simply sums up ultimately",
			"to the more succinct n times n plus 1 divided by 2.",
			"This, of course, if we multiply it out, gives us n squared plus n divided by 2.",
			"And this now, I will propose, gives us just this--",
			"n squared divided by 2 plus n/2.",
			"So if we really wanted to be nit-picky, this",
			"is the total number of steps, or operations, or seconds,",
			"however we want to measure Brian's running time.",
			"This seems to be the precise mathematical formula therefore.",
			"But at the beginning of this week, we considered again,",
			"the sort of Big O notation.",
			"With a wave of the hand, we care more about the order of magnitude",
			"on which an algorithm operates.",
			"I really don't care about these divided by 2 and n/2.",
			"Because which of these factors is going to matter as n gets big?",
			"The bigger the phone book gets, the more doors we have,",
			"the more light bulbs we have, the more numbers we have on the shelf,",
			"n is going to keep getting bigger and bigger and bigger.",
			"And given that, which is the dominant factor?",
			"Rongxin, if we could call on someone here, which of these factors,",
			"n squared divided by 2, or n divided by 2, really matters in the long run",
			"as our problems get bigger and bigger, as n gets bigger and bigger?",
			"Which of those factors mathematically dominates?",
			"Anika?",
			"AUDIENCE: Oh, it's Anika, but--",
			"DAVID MALAN: Anika.",
			"AUDIENCE: It would be the-- no problem.",
			"It would be the n squared.",
			"DAVID MALAN: Yeah, n squared.",
			"Right.",
			"If you take any number for n and you square it,",
			"that's going to be bigger, certainly in the long run,",
			"than just doing n divided by 2.",
			"And so with our Big O notation, we could describe the running time",
			"of Brian's selection sort implementation as, ah, it's on the order of n squared.",
			"Yes, I'm ignoring some numbers, and yes, if we really",
			"wanted to be nit-picky and count up every single step",
			"that Brian took, yes, it's n squared divided by 2 plus n/2.",
			"But again, if you think about the problem over time and n",
			"getting really large, sort of Facebook-sized, Twitter-sized,",
			"Google-sized, what's really going to dominate mathematically",
			"is this bigger factor here.",
			"That's what's going to make the total number of steps way",
			"bigger than just those smaller order terms.",
			"So in Big O notation, selection sort would",
			"seem to be on the order of n squared.",
			"So if we consider our chart from before where",
			"we had the upper bounds on our searching algorithms,",
			"both linear and binary, this one, unfortunately,",
			"is at really the tip top of this particular list of running times.",
			"And there's infinitely many more.",
			"These are just a subset of the more common formulas",
			"that a computer scientist might use and think about.",
			"Selection sort is kind of a top of the list.",
			"And being number one on this list is bad.",
			"n squared is certainly much slower than, say,",
			"big O of 1, which, of course, was constant time or one step.",
			"So I wonder if we could be--",
			"if we could do a little better.",
			"I wonder if we could do a little better.",
			"And Peter actually did say something else earlier,",
			"which was about like sharing two numbers and fixing problems.",
			"And if I can kind of run with that, let me",
			"propose that we, Brian, return to you for a look at an algorithm that",
			"might be called instead bubble sort, bubble sort",
			"being a different algorithm, this one that",
			"tries to fix problems more locally.",
			"So in fact, Brian, if you look at the numbers that",
			"are in front of you, which you've kindly reset",
			"to their original, unsorted location, I feel like this really,",
			"if we focus on just pairs of numbers, it's just a lot of small numbers.",
			"Like last time, we tried to solve the big problem",
			"and sorting the whole thing.",
			"What if we just look at pairs of numbers that are adjacent to one another?",
			"Can we maybe make some little tweaks and change our algorithm fundamentally?",
			"So for instance, Brian, 6 and 3, what observation can you make there for us?",
			"BRIAN: Yeah, sure.",
			"So 6 and 3 that's, the first pair of numbers in the array.",
			"And if I want the array to be sorted, I want the smaller numbers",
			"to be on the left and the bigger numbers to be on the right.",
			"So just looking at this pair, I can tell you that the 6 and 3 or out of order.",
			"The 3 should be on the left, and the 6 should be on the right.",
			"DAVID MALAN: All right.",
			"So let's go ahead and do that, and go ahead",
			"and fix that by swapping those two.",
			"And just fix a small little problem.",
			"And now let's repeat this process, right?",
			"Loops seem to be omnipresent in a lot of our algorithms.",
			"So 6 and 8 is the next such pair.",
			"What you want-- what do you think about those?",
			"BRIAN: That particular pair seems OK, because the 6 is smaller and already",
			"on the left side.",
			"So I think I can leave this pair alone.",
			"DAVID MALAN: All right.",
			"How about 8 and 5?",
			"BRIAN: The 8 is bigger than the 5.",
			"So I'm going to swap these two.",
			"The 5 should be on the left of the 8.",
			"DAVID MALAN: All right.",
			"And 8 and 2?",
			"BRIAN: Same thing here, the 8 is bigger.",
			"So the 8 is going to be swapped with the 2.",
			"DAVID MALAN: All right, 8 and 7.",
			"BRIAN: The 8 is bigger than the 7, so the 8 I should switch with the 7.",
			"DAVID MALAN: All right 8 and 4?",
			"BRIAN: 8 and 4, same thing, it's bigger than the 4.",
			"DAVID MALAN: And 8 and 1.",
			"BRIAN: I can do it one last time.",
			"The 8 is bigger than the 1, and I think that's all.",
			"DAVID MALAN: And with a nice dramatic flourish,",
			"if you step off to the side, voila--",
			"not sorted.",
			"In fact, it doesn't really look all that much better.",
			"But I do think Brian's done something smart here.",
			"Brian, can you speak to at least some of the marginal improvements",
			"that you've made?",
			"BRIAN: Yeah.",
			"So there are some improvements, at least.",
			"The 1 originally was all the way at the very end, and it moved back one spot.",
			"And the other improvement, I think, is that the 8 originally",
			"was way over here on the left side of the array somewhere.",
			"But because the 8 is the biggest number, I",
			"kept switching it over and over again until it made it",
			"all the way to the end.",
			"And so now actually, I think this 8 is in the correct place.",
			"It's the biggest number, and it ended up moving its way all the way",
			"to the right side of the array.",
			"DAVID MALAN: Yeah.",
			"And this is where this algorithm that we'll see the rest of in just a moment",
			"gets its name, bubble sort--",
			"alludes to the fact that the biggest numbers start bubbling their way up",
			"to the top of, or the end of, the list, at the right-hand side",
			"of the shelf as Brian notes.",
			"But notice, as Brian does, too, the number 1 only moved over one position.",
			"So there's clearly more work to be done.",
			"And that's obvious from the other numbers being misordered as well.",
			"But we have improved things.",
			"The 8 is in place, and the 1 is closer to being in place.",
			"So how might we proceed next?",
			"Well, Brian, let's continue to solve some small bite-sized problems.",
			"Let's start at the beginning again.",
			"3 and 6?",
			"BRIAN: Sure.",
			"The 3 and the 6, those seem to be in order, so I'll leave those alone.",
			"DAVID MALAN: 6 and 5.",
			"BRIAN: 6 and 5 or out of the order, so I'll go ahead and take the 6",
			"and put it to the right.",
			"DAVID MALAN: 6 and 2.",
			"BRIAN: Those are out of order as well, so I'll swap the 2 and the 6.",
			"DAVID MALAN: 6 and 7.",
			"BRIAN: 6 and 7 are OK.",
			"They're in order.",
			"DAVID MALAN: 7 and 4.",
			"BRIAN: Those are out of order, so I'll switch the 4 and the 7.",
			"DAVID MALAN: 7 and 1.",
			"BRIAN: And those two are out of order as well, so I'll swap those.",
			"And now I think the 7 has made its way to the sorted position as well.",
			"DAVID MALAN: Indeed.",
			"So now we're making some progress.",
			"7 has bubbled its way up to the top of the list, stopping just before the 8,",
			"whereas the 1 has continued its advance to its correct location.",
			"So I bet, Brian, if we keep doing this again and again",
			"and again, so long as the list remains in part unsorted,",
			"I think we'll probably get to the finish line.",
			"Do you want to take it from here and sort the rest?",
			"BRIAN: Yeah, sure.",
			"So I just repeat the process again.",
			"The 3 and the 5 are OK.",
			"The 2 and the 5 are out of order, so I'll swap them.",
			"The 5 and the 6, those are fine as a pair.",
			"The 6 and the 4, out of order relative to each other, so I'll switch those.",
			"And the 6 and the 1, those are out of order as well, so I'll swap those.",
			"And now the 6, that I can say is in its correct position.",
			"And I'll repeat it again.",
			"The 3 and the 2 are out of order, so those get switched.",
			"The 3 and the 5 are OK.",
			"The 5 and the 4 are out of order, so those get switched.",
			"And then the 5 and the 1 need to be switched as well.",
			"So there's the 5 in sorted position.",
			"And now I'm left with these four.",
			"The 2 and the 3 are OK, the 3 and the 4 OK.",
			"But the 4 and the 1 are out of order.",
			"So those get switched, and now the four, that's in its place.",
			"The 2 and the 3 are OK, but the 3 and the 1 are not, so I'll swap those.",
			"And now the 3 goes into its sorted place.",
			"And then finally, the last pair to consider is just the 2 and the 1.",
			"Those are out of order, so I'll swap those, and now the 2 is in place.",
			"And 1 is the only remaining number, so I can say that that one's in place, too.",
			"And now I think we have a sorted array.",
			"DAVID MALAN: Nice.",
			"So it felt like this was a fundamentally different approach,",
			"but we still got to the same end point.",
			"So that really now invites the question as to whether bubbles or it was",
			"better or worse or maybe no different.",
			"But notice, too, that we've solved the same problem fundamentally differently.",
			"The first time, we took the more human natural intuition of just,",
			"find the smallest element.",
			"All right, do it again, do it again, do it again.",
			"This time, we sort of viewed the problem through a different lens.",
			"And we thought about, it would seem, what does it",
			"mean for the list to be unsorted?",
			"As Peter noted, it's when things are out of order.",
			"Like that very basic primitive where something is out of order",
			"suggests an opportunity to solve the problem that way.",
			"Just fix all of the tiny bite-sized problems.",
			"And it would seem that using a loop, if we repeat that intuition,",
			"is going to pay off eventually by fixing, fixing, fixing,",
			"fixing all of the little problems until the big one itself",
			"would seem to go away.",
			"Well, let me return to the visualization from before, re-randomize the bars--",
			"short bar is small number, big bar is big number.",
			"And let me go ahead and run the bubble sort algorithm,",
			"this time with this visualization.",
			"And you'll notice now sweeping from left to right are two colored bars that",
			"represent the comparison of two adjacent numbers again and again and again.",
			"And you'll see this time that the bars are being a little smart,",
			"and they're not going all the way to the end every time,",
			"just like Brian illuminated the numbers and stopped",
			"looking at the 8 and the 7 and the 6 once they were in place.",
			"But he and this visualization do indeed keep returning to the beginning,",
			"doing another pass, another pass, and another pass.",
			"So if we think ahead to the analysis of this algorithm,",
			"it sort of invites us to consider, well, how many total comparisons are there",
			"this time?",
			"It would seem that the very first time through the bars,",
			"or equivalently the very first time through the shelf, Brian",
			"and this visualization did like n minus 1 comparisons.",
			"So n minus 1 comparisons from left to right, out",
			"of n elements you can compare n minus 1 adjacencies.",
			"After that it was n minus 2, n minus 3, n minus 4,",
			"n minus 5, until just two or one remain, and at that point you're done.",
			"So even though this algorithm fundamentally took a different approach",
			"and achieved the same goal, it sorted the elements successfully.",
			"Let's consider how it was implemented in code",
			"and whether it's actually a little faster or a little slower.",
			"And let's set one final bar, in fact, too.",
			"Earlier, we considered only the upper bound on selection sort,",
			"just so that we have something to compare this against.",
			"Let's also consider for a moment what the running time is",
			"of selection sort in terms of a lower bound-- best case scenario.",
			"With selection sort, if you have n elements,",
			"and you keep looking for the next smallest element, again and again",
			"and again, it turns out that selection sort is not really our friend.",
			"Here's, for instance, the chart of where we left off in terms of omega notation",
			"before.",
			"Linear search and binary search could very well",
			"get lucky and take just one step if you happen to open a door",
			"and, voila, the number you're looking for is already there.",
			"But with selection sort, as we've implemented it,",
			"both with Brian and with the visualization,",
			"unfortunately it's none so good with the lower bound.",
			"Why?",
			"Well, Brian pretty naively, every time he searched for a number,",
			"started at the left and went all the way to the right, started at the left,",
			"went all the way to the right.",
			"To be fair, he did ignore the numbers that were already in place.",
			"So he didn't keep looking at the 1, he didn't keep looking at the 2",
			"once they were in place.",
			"But he did keep repeating himself again and again, touching",
			"those numbers multiple times each.",
			"So again, even though you and I, the humans, could look at those numbers",
			"and be like, obviously there's the 1, obviously there's",
			"the 2, the obviously there's the 3, Brian",
			"had to do it much more methodically.",
			"And in fact, even if that list of numbers were perfectly sorted,",
			"he would have wasted just as much time.",
			"In fact, Brian, if you don't mind, could you quickly",
			"sort all eight numbers again?",
			"And Brian, if we start with a sorted list,",
			"this is kind of a nice perversion to consider, if you will, algorithmically.",
			"When analyzing an algorithm, sometimes you",
			"want to consider best cases and worst cases.",
			"And there would seem to be nothing better than, heck, the list is already",
			"sorted, you got lucky, there's really no work to be done.",
			"The worst case is the list is maybe completely backwards,",
			"and that's a huge amount of work to be done.",
			"Unfortunately, selection sort doesn't really optimize for that lucky case",
			"where they're already sorted.",
			"So Brian, I see you've resorted the numbers for us from left to right.",
			"If we were to re-execute selection sort as before,",
			"how would you go about finding the smallest number?",
			"BRIAN: So we decided earlier that, to find the smallest number,",
			"I need to look at all the numbers from left",
			"to right in the array and each time check to see if I found something.",
			"smaller.",
			"So I would start with the 1.",
			"That's the smallest thing I've seen so far.",
			"But I would have to keep looking, because maybe there's",
			"a 0 or a negative number later on.",
			"I need to check to see if there's anything smaller.",
			"So I would check, the 2 is bigger, the 3, 4, 5, 6, 7, 8.",
			"They're all bigger.",
			"So it turns out I was right all along.",
			"The 1 was the smallest number, and it's already in place.",
			"So now that number is in place.",
			"DAVID MALAN: And then to find the next smallest number,",
			"what would you have done?",
			"BRIAN: I would do the same thing.",
			"2 is the smallest number I found so far.",
			"And then I would look through all the rest",
			"to see if there's anything smaller than the 2.",
			"And I would look at 3, 4, 5, 6, 7, 8.",
			"Nothing's smaller than the 2.",
			"So I go back to the two and say, OK, that number must now",
			"be in its sorted position.",
			"DAVID MALAN: Indeed.",
			"And that story would be the same for the 3, for the 4, and for the 5.",
			"Like, nowhere in selection sort pseudocode or actual code",
			"is there any sort of intelligence of, eh, if the numbers are already sorted,",
			"quit.",
			"Like, there was no opportunity to short circuit and abort",
			"that algorithm earlier.",
			"Brian would literally be doing the same work,",
			"whether they're all sorted from the get-go",
			"or completely unsorted, and even backwards.",
			"And so selection sort doesn't really perform very highly.",
			"So now we're hoping bubble sort, indeed, does.",
			"So toward that end, let's take a look at some proposed pseudo",
			"code for bubble sort, assuming that the input is anything.",
			"Whether sorted or unsorted, the pseudocode",
			"is always going to look like this.",
			"Repeat until sorted.",
			"For i from 0 to n minus 2--",
			"now, what does this mean?",
			"0 to n minus 1 goes from the first element to the last.",
			"So 0 to n minus 2 goes from the first element to the second to last.",
			"Why am I doing that?",
			"We'll see in just a moment.",
			"The condition inside of this loop is, if the i-th and the i plus 1th elements",
			"are out of order, swap them.",
			"So this is me being a little clever.",
			"If you think about all of these numbers as being in an array",
			"or behind doors, if you iterate from 0 to n minus 2,",
			"that's like going from the first door to the second to last door.",
			"But that's good, because my condition is checking door i and i plus 1.",
			"So if I start at the beginning here, and I only iterate up to this door,",
			"that's a good thing.",
			"Because when I compared door i and i plus 1, at the very end",
			"I'm going to compare door i and i plus 1.",
			"What I don't want to do is compare this door i against door i",
			"plus 1, which doesn't even exist.",
			"And indeed, that's going to be an error that probably all of you",
			"make at some point--",
			"going beyond the boundary of an array, touching memory",
			"that is going one or more spaces too far in the array,",
			"even though you didn't allocate memory for it.",
			"So this hedges against that possibility.",
			"So this would seem to be a pretty smart algorithm.",
			"But as written, it's not actually as performant as might be ideal.",
			"With bubble sort, suppose the list were entirely sorted.",
			"Brian, not to make you sort and resort numbers too many times.",
			"Do you mind giving us a sorted list one more time real quick?",
			"In a moment, I want to see, if we consider that same sorted list as",
			"before, this time with bubble sort, can we do fundamentally better?",
			"I have this code saying, repeat until sorted.",
			"So how might this change?",
			"So Brian, you've got the sorted numbers again.",
			"This should be a good case.",
			"But selection sort did not benefit from this input,",
			"even though we could have gotten lucky.",
			"Bubble sort, what would your thought process be here?",
			"BRIAN: So the thought process for bubble sort",
			"was to go through each of the pairs one at a time",
			"and see if I need to make a swap for that particular pair.",
			"So I'd look at the 1 and the 2.",
			"Those two are OK, I don't need to swap them.",
			"The 2 and the 3 are OK.",
			"I don't need to make a swap there.",
			"The 3 and the 4 are OK.",
			"The 4 and the 5 are OK.",
			"Same with the 5 and the 6, and the 6 and the 7, and the 7 and the 8.",
			"So I made my way through all the entire array,",
			"and I never needed to make any swap, because every pair that I looked at,",
			"they were already in the correct order relative to each other.",
			"DAVID MALAN: Indeed.",
			"And so it would be foolish and so obvious this time",
			"if Brian literally retraced those steps and did it",
			"again with n minus 1 elements, and then did it again with n minus 2 elements.",
			"I mean, if he didn't do any work, any swaps the first pass,",
			"he's literally wasting his own time by even",
			"doing another pass or another pass.",
			"And so that's kind of implicit in the pseudocode, this repeat until sorted.",
			"Even though it doesn't translate perfectly into a for loop",
			"or a while loop in C, it kind of says intuitively what he should do--",
			"repeat until sorted.",
			"Brian has already identified the fact, by nature of him",
			"not having made any swaps, that this list is sorted.",
			"Therefore, he can just stop, and this loop does not",
			"have to continue again and again.",
			"We can map this to C-like code a little more explicitly.",
			"We can by default say, do the following n minus 1 times.",
			"Because among n elements, you can look at n minus 1 total pairs from left",
			"to right without going too far.",
			"But notice, I can add an additional line of code here",
			"which might say, if no swaps, quit from the algorithm altogether.",
			"So, so long as Brian is keeping track of how many swaps",
			"he made or didn't make through one pass, as with a variable called counter",
			"or whatever, he can simply abort this algorithm early and certainly",
			"then save us some time.",
			"So with that said, let's consider for just a moment what",
			"the running time of bubble sort might be in terms of an upper bound,",
			"in the worst case, if you will.",
			"Well, in the case of bubble sort, notice with the pseudocode",
			"where we're doing something n minus 1 times,",
			"and inside of that we're doing something n minus 1 times.",
			"So again, repeat n minus 1 times literally",
			"says, do the following n minus 1 times.",
			"The for loop here, which is just a different way in pseudocode",
			"of expressing a similar idea but giving us a variable this time, for i from 0",
			"to n minus 1--",
			"n minus 2, is a total number of n minus 1 comparisons.",
			"So this is an n minus 1 thing inside the repeat,",
			"and an n minus 1 outside the repeat.",
			"So I think what that gives me is n minus 1 things times n minus 1 times.",
			"So now if I just kind of FOIL this, sort of in high school",
			"or middle school math, n squared minus 1n minus 1n plus 1.",
			"We can combine like terms, n squared minus 2n plus 1.",
			"But per our discussion earlier, ugh, this is really getting into the weeds.",
			"Who cares about the 2n or the 1?",
			"The dominant factor as n gets large is definitely going to be the n squared.",
			"So it would seem that bubble sort, if you actually",
			"do out the math and the formulas, is going to have an upper bound of n",
			"squared, or rather, on the order of n squared steps.",
			"So in that sense, it is equivalent to selection sort.",
			"It is no better fundamentally.",
			"It's what we would say ask asymptotically equivalent.",
			"That is, as n gets really large, this formula",
			"is, for all intents and purposes, equivalent to the selection sort",
			"formula, even though they differed slightly",
			"in terms of their lower order terms.",
			"For all intents and purposes, ah, they're on the order of n squared both.",
			"But if we consider a lower bound, perhaps,",
			"even though bubble sort has the same upper bound running time,",
			"if we consider a lower bound, as with this smarter code, where Brian might",
			"actually have the wherewithal to notice, wait a minute, I didn't do any swaps,",
			"I'm just going to exit out of this looping pretty much early--",
			"not even prematurely but early, because it",
			"would be fruitless to keep doing more and more work--",
			"we can then whittle down this running time.",
			"I think-- not quite as good as omega of 1, which was constant time--",
			"like, you cannot conclude definitively that an array is sorted unless you",
			"minimally look at all of the elements once.",
			"So constant time is completely naive and unrealistic.",
			"You can't look at one element, or two or three, and say, yes, this is sorted.",
			"You've got to obviously look at all of the elements at least once.",
			"So this would seem to suggest that the omega notation for it, that",
			"is, the lower bound on bubble sort's running time,",
			"if we're clever and don't retrace our steps unnecessarily, is in omega of n.",
			"Or technically, it's n minus 1 steps, right?",
			"Because if you've got n elements and you compare",
			"these two, these two, these two, these two,",
			"that's n minus 1 total comparisons.",
			"But who cares about the minus 1?",
			"It's on the order of n, or omega of n notation here.",
			"So to recap, selection sort selects the next smallest element again and again",
			"and again.",
			"Unfortunately, based on how it's implemented in pseudocode and actual",
			"code, it's in Big O of n squared.",
			"But it's also an omega of n squared, which",
			"means it's always going to take the same amount of time asymptotically, that is,",
			"as n gets large.",
			"Unfortunately, too, bubble sort is no better, it would seem,",
			"in terms of the upper bound.",
			"It's going to take as many as n squared steps, too.",
			"But it's at least marginally better when it comes to using something",
			"like an input that's already sorted.",
			"It can short circuit and not waste time.",
			"But honestly, n squared is bad.",
			"Like, n squared is really going to add up quickly.",
			"If you've got n squared and n is a million or n is a billion, I mean,",
			"my God, that's a lot of 0's.",
			"That's a lot of steps in the total running time of your algorithm.",
			"Can we do better?",
			"Can we do better?",
			"And it turns out we can.",
			"And we'll consider one final algorithm today that does fundamentally better.",
			"Just like in week 0, we sort of latched onto binary search and again today--",
			"it's just fundamentally better than linear search by an order of magnitude,",
			"so to speak.",
			"Its picture representation was fundamentally different.",
			"I think we can do fundamentally better than bubble sort and selection sort.",
			"And so while both bubble sort and selection",
			"sort might be the sort of thing that I was using in grad school",
			"just to rip up the code quickly and then go to sleep,",
			"it's not going to work well for very large data sets.",
			"And frankly, it wouldn't have worked well",
			"if I didn't want to just sleep through the problem.",
			"Rather, we want to do things as efficiently as we can from the get go.",
			"And let me propose that we leverage a technique--",
			"and this is a technique that you can use in almost any programming",
			"language, C among them--",
			"known as recursion.",
			"And recursion, quite simply, is the ability for a function to call itself.",
			"Up until now, we have not seen any examples of this.",
			"We've seen functions calling other functions.",
			"Main keeps calling printf.",
			"Main has started to call strlen.",
			"Main called strcmp, compare, earlier today.",
			"But we've never seen main call main.",
			"And people don't do that, so that's not going to solve the problem.",
			"But we can implement our own functions and have",
			"our own functions call themselves.",
			"Now, this would seem to be a bad idea in principle.",
			"If a function calls itself, my God, where does it end?",
			"It would seem to just do something forever,",
			"and then something bad probably happens.",
			"And it could.",
			"And that's the danger of using recursion.",
			"You can screw it up easily.",
			"But it's also a very powerful technique, because it",
			"allows us to think about potential solutions",
			"to problems in a very interesting, and daresay elegant, way.",
			"So we're not only going to be able to achieve correctness but also better",
			"design, because of better efficiency, it would seem, here.",
			"So let me propose this.",
			"Recall this code from week 0, which was the pseudocode for finding someone",
			"in a phone book.",
			"And recall that, among the features of this pseudocode,",
			"were these lines here, \"Go back to line 3.\"",
			"And we describe those in week 0 as being representative of loops,",
			"a programming construct that has something happen again and again.",
			"But you know what, there's a missed opportunity here in this pseudocode",
			"to use a technique known as recursion.",
			"This implementation is what we would call iterative.",
			"It is purely loop based.",
			"It tells me literally, go back to this line, go back to this line,",
			"go back to this line.",
			"There's no calling yourself.",
			"But what if I changed week 0's pseudocode to be a little more",
			"like this?",
			"Let me go ahead and get rid of, not just that one line but two lines",
			"in both of those conditions.",
			"And let me quite simply say, instead of open",
			"to the middle of the left half of the book and then go back to line 3,",
			"or open to the middle of the right half of the book and then go back to line 3,",
			"why don't I just more elegantly say, search left half of book,",
			"search right half of book?",
			"Now, immediately I can shorten the code a little bit.",
			"But I claim that by just saying search left half of book and search right",
			"half of book, I claim that this is enough information",
			"to implement the very same algorithm.",
			"But it's not using a loop per se.",
			"It's going to induce me the human or me the computer",
			"to do something again and again.",
			"But there's other ways to do things again and again--",
			"not by way of a for loop, or a while loop, or a do while loop,",
			"or a repeat block, or a forever block--",
			"you can actually use recursion.",
			"And recursion, again, is this technique where a function can call itself.",
			"And if we consider, after all, the pseudocode we are looking at",
			"is the pseudocode for searching.",
			"And on line 7 and 9 now, I am literally saying, \"Search left half of book,\"",
			"and \"Search right half of book,\" this is already, even in pseudocode form,",
			"an example of recursion.",
			"Here I have in 11 lines of code an algorithm or a function",
			"that searches a phone book.",
			"In lines 7 and 9, I have lines of code that literally say, search",
			"a phone book, but more specifically, search half of the phone book.",
			"And that's where recursion really works its magic.",
			"It would be foolish and incorrect and completely counterproductive",
			"to just have a function call itself with the same input,",
			"with the same input, with the same input, because you'd",
			"have to be kind of crazy to expect different output",
			"if the input is constantly the same.",
			"But that's not what we did in week 0, and that's not what we're doing now.",
			"If you use the same function, or equivalently algorithm,",
			"but change the input to be smaller and smaller and smaller,",
			"it's probably OK that a function is calling itself,",
			"so long as you have at least one line of code in there",
			"that very intelligently says, if you're out of doors,",
			"if you're out of phone book pages, quit.",
			"You need to have a so-called base case.",
			"You need some line of code that's going to notice, wait a minute, there's",
			"no more problem to be solved, quit now.",
			"And so how can we map this to actual code?",
			"Well, let's consider something very familiar from week 1.",
			"Recall when you reconstructed one of Mario's pyramids.",
			"It looked a little something like this.",
			"And let's consider that this is a pyramid of blocks,",
			"of bricks, that's of height 4.",
			"Why 4?",
			"Well, there's 1, then 2, then 3, then 4 bricks from top to bottom.",
			"So the total height here is 4.",
			"But let me ask the question, a little naively, how do you go about creating,",
			"or how do you go about printing a pyramid of height 4?",
			"Well, it turns out that this simple Mario pyramid, that's",
			"ever more clear if we get rid of the unnecessary background,",
			"is a recursive structure of some sort.",
			"It's a recursive physical structure.",
			"Why?",
			"Well, notice that this structure, this brick, this pyramid,",
			"is kind of defined in terms of itself.",
			"Why?",
			"Well, how do you make a pyramid of height 4?",
			"I would argue, a little obnoxiously, a little circularly, well,",
			"you create a pyramid of height 3, and then",
			"you add an additional row of bricks.",
			"All right.",
			"Well, let's continue that logic.",
			"All right, fine.",
			"How do you build a pyramid of height 3?",
			"Well, you sort of smile and say, well, you build a pyramid of height 2,",
			"and then you add one more layer.",
			"All right, fine.",
			"How do you build a pyramid of height 2?",
			"Well, you build a pyramid of height 1, and then you add one more layer.",
			"Well, how do you build a pyramid of height 1?",
			"Well, you just put the stupid brick down.",
			"You have a base case, where you sort of state the obvious",
			"and just do something once.",
			"You hardcode the logic.",
			"But notice what's kind of mind bending, or kind",
			"of obnoxious in a human interaction, like,",
			"you're just defining the answer in terms of itself.",
			"I keep saying the same thing.",
			"But that's OK, because the pyramid keeps getting smaller and smaller and smaller",
			"until I can handle that one special case.",
			"And so we can do this just for fun with these little cardboard bricks",
			"here, for instance.",
			"If I want to build a pyramid of height 4, how do I do it?",
			"Well, I can build a pyramid of height 3.",
			"All right, let me go ahead and build a pyramid of height 3.",
			"How do I build a pyramid of height 3?",
			"All right, well, I build a pyramid of height 2, and then I add to it.",
			"OK, how do I build a pyramid of height 2?",
			"Well, you build a pyramid of height 1.",
			"How do I do that?",
			"Well, you just put the brick down.",
			"And so here's where things kind of bottom out,",
			"and it's no longer a cyclical argument.",
			"You eventually just do some actual work.",
			"But in my mind, I have to remember all of the instructions you just gave me,",
			"or I gave myself.",
			"I had to build a pyramid of height 4; nope, 3; nope, 2; nope, 1.",
			"Now I'm actually doing that.",
			"So here's a pyramid of height 1.",
			"How do I now build a pyramid of height 2?",
			"Well, rewind in the story.",
			"To build a pyramid of height 2, you build a pyramid of height 1,",
			"and then you add one more layer.",
			"So I think to add one more layer, I essentially need to do this.",
			"All right.",
			"Now I have a pyramid of height 2.",
			"But wait a minute.",
			"The story began with, how do I build a pyramid of height 3?",
			"Well, you take a pyramid of height 2, which I have here,",
			"and you add an additional layer.",
			"So I've got to build this additional layer.",
			"I'm going to go ahead and give myself the layer, the layer, the layer.",
			"And then I'm going to put the original pyramid of height to on top of it.",
			"And voila, it's a pyramid of height 3 now.",
			"Well, how did I get here?",
			"Well, let me keep rewinding in the story.",
			"The very first question I asked myself was,",
			"how do you build a pyramid of height 4?",
			"Well, the answer was build a pyramid of height 3.",
			"Great, that's done.",
			"Then add one additional layer.",
			"And if I had more hands, I could do this a little more elegantly,",
			"but let me go ahead and just lay this out.",
			"Here's the new level of height 3.",
			"And now I'm going to go--",
			"of width 4.",
			"Now I'm going to go and put the pyramid of height 3 on top of it, until voila,",
			"I have this form here of Mario's pyramid.",
			"So it's a bit cyclical in that, every time I",
			"asked myself to build a pyramid of a certain height,",
			"I kind of punted and said, no, build a pyramid of this height.",
			"No, build a pyramid of this height.",
			"No, build a pyramid of this height.",
			"But the magic of that algorithm was that there was constantly",
			"this, do a little more work, build a layer, do a little more work,",
			"build a layer.",
			"And it's in that implicit building of layer after layer after layer",
			"that the pyramid itself, the end goal, actually emerges.",
			"So you could implement the same thing with a for loop or a while loop.",
			"And frankly, you did.",
			"It was a slightly different shape for problem set 1,",
			"but you did the same thing using a loop.",
			"And you kind of had to do it that way, at least as we prescribed it.",
			"Because with printf, you have to print from the top of the screen",
			"to the bottom.",
			"Like, we haven't shown you a technique yet to print a layer",
			"and then go back on top.",
			"So I'm kind of taking some real-world liberties here",
			"by lifting these things up and moving them around.",
			"You'd have to be a little more clever in code.",
			"But the idea is the same.",
			"And so even physical objects like this can",
			"have some recursive definition to them.",
			"And so we present this sort of goofy example,",
			"because this notion of recursion is a fundamental programming technique",
			"that you can leverage now to solve problems",
			"in a fundamentally different way.",
			"And I think for this, we need one final visualization of merge sort,",
			"with both Brian's help and the computer's.",
			"And merge sort is going to be an algorithm whose pseudocode is, daresay,",
			"the simplest we've seen thus far, but deceptively simple.",
			"The pseudocode for merge sort, quite simply, is this--",
			"sort the left half of numbers, sort the right half of numbers,",
			"merge the sorted halves.",
			"And notice, even at first glance this feels kind of unfair.",
			"Like, here's an algorithm for sorting, and yet I'm",
			"literally using the word \"sort\" in my algorithm for sorting.",
			"It's like in English if you're asked to define a word,",
			"and you literally use the word in the definition.",
			"Like, that rarely flies, because you're just making a circular argument.",
			"But in code, it's OK, so long as there's one special step that's doing something",
			"a little differently, and so long as the problem keeps",
			"getting smaller and smaller.",
			"And indeed it is.",
			"This pseudocode is not saying, sort the numbers, sort the numbers,",
			"sort of numbers.",
			"No, it's dividing the problem in half and then solving the other half",
			"as well.",
			"So it's shrinking the problem on each iteration.",
			"Now, I will disclaim we're going to need that so-called base case again.",
			"I'm going to have to do something stupid, but necessary,",
			"and say, if there's only one number, quit.",
			"It's sorted.",
			"That's the so-called base case.",
			"The recursive case is where the function calls itself.",
			"But this is, indeed, our third and final sorting algorithm called merge sort.",
			"And we'll focus here really on the juiciest pieces,",
			"one, this notion of merging.",
			"So in fact, Brian, can we come over to you",
			"just so we can define, before we look at the merge sort algorithm itself,",
			"what do we even mean when we say merge sorted halves?",
			"So for instance, Brian has on his shelf here two arrays of size 4.",
			"In the first array on the left are four integers, 3, 5, 6, 8.",
			"And in the right side, in another array of size 4,",
			"are four numbers, too, 1, 2, 4, 7.",
			"Both the left is sorted and the right is sorted.",
			"But now, Brian, I would like you to merge these sorted halves.",
			"Tell us what that means.",
			"BRIAN: Sure.",
			"So if I have a left half that sorted from smallest",
			"to largest and a right half that's also sorted from smallest to largest,",
			"I want to merge them into a new list that has all of the same numbers",
			"also from smallest to largest.",
			"And I guess where I could start here is that the smallest",
			"number of the combined array needs to begin with either the smallest",
			"number of the left half or the smallest number of the right half.",
			"So on the left the smallest number is the 3, and on the right",
			"the smallest number is the 1.",
			"Of those two has got to be the smallest number for the entire array.",
			"And between the 3 and the 1, the 1 is smaller.",
			"So I would take that 1, and that's going to be the first number, the smallest",
			"number, of the merged two halves.",
			"And then I guess I would repeat the process again.",
			"On the left side the smallest number is the 3.",
			"On the right side the smallest number is the 2.",
			"And between the 3 and the 2, 2 is smaller.",
			"So I would take the 2 [INAUDIBLE] and that's going to be the next number.",
			"So I'm slowly building up this sorted array that",
			"is the result of combining these two.",
			"Now I'm comparing the 3 on the left to the 4 on the right.",
			"Between the 3 and the 4, the 3 is smaller.",
			"So I'll take the 3, and we'll put that one into position.",
			"Now I'm comparing the 5 on the left with the 4 on the right.",
			"Between the 5 and the 4, the 4 is smaller.",
			"So that one goes into position.",
			"And then now I'm comparing the 5 on the left with the 7 on the right.",
			"5 is smaller, so the 5 goes next.",
			"Next I'm comparing the 6 on the left with the 7 on the right.",
			"The 6 is still smaller, so that one is going to go next.",
			"Now I'm comparing the 8 and the 7, the only two numbers left.",
			"The 7 is the smaller between the two.",
			"So I'll take the 7 and put that into place.",
			"And now I'm only left with one number that",
			"hasn't been put into the merging of the two halves, and that's the number 8.",
			"So that number is going to take up the final position.",
			"And now I've taken these to halves, each of which was originally sorted,",
			"and made one complete array that has all of those numbers in sorted order.",
			"DAVID MALAN: Indeed.",
			"And consider what we've done.",
			"We've essentially verbally and physically kind of",
			"defined a helper function, our own custom function if you will,",
			"whereby Brian has defined what does it mean to merge two arrays--",
			"specifically merge two sorted arrays.",
			"Because why?",
			"Well, that's a building block that I think",
			"we're going to want in this merge sort algorithm.",
			"So just like in actual C code, you might have",
			"defined a function that does some small task,",
			"so have we now verbally and physically defined the notion of merging.",
			"The mind bending part here is that \"Sort left",
			"half of numbers\" and \"Sort right half of numbers\"",
			"is kind of already implemented.",
			"There's nothing more for Brian or me to define.",
			"All that remains is for us to execute this algorithm, focusing especially",
			"on these three highlighted lines of code.",
			"And let me disclaim that of the algorithms we've looked at thus far,",
			"odds are this will be the one that doesn't really",
			"sink in as quickly as the others.",
			"Even if the others might have taken you a moment, a day,",
			"a week to settle in-- or maybe you're still not quite there yet,",
			"that's fine--",
			"merge sort is a bit of a mind bending one,",
			"because it seems to work magically.",
			"But it really just works more intelligently.",
			"And you'll begin to get more comfortable with harnessing",
			"these kinds of primitives so that we can ultimately, indeed, solve problems",
			"more efficiently.",
			"So Brian has kindly put the numbers again on the top shelf.",
			"And he has put them into their original, unsorted order,",
			"just like for selection sort and bubble sort.",
			"And Brian, I'd like to propose now that we execute this merge sort algorithm.",
			"And if you don't mind, I'll recite aloud first the few steps.",
			"So here is one array of size 8 with unsorted numbers.",
			"The goal is to these numbers using merge sort.",
			"And recall that merge sort essentially is just three steps--",
			"sort left half, sort right half, merge sorted halves.",
			"So Brian, looking at those numbers there,",
			"could you go ahead and sort the left half of numbers?",
			"BRIAN: All right.",
			"So there are eight numbers.",
			"The left half would be these four numbers, so I will sort those.",
			"Except I'm not really sure how do I now sort these four numbers.",
			"DAVID MALAN: Yeah.",
			"So granted, we've seen selection sort, we've seen bubble sort.",
			"But we don't want to regress to those older, slower algorithms.",
			"Brian, I can kind of be a little clever here.",
			"Well, I'm giving you a sorting algorithm.",
			"So now you effectively have a smaller problem, an array of size 4,",
			"and I'm pretty sure we can use the same algorithm, merge sort,",
			"by sorting left half, sorting right half,",
			"and then merging the sorted halves.",
			"So could you go ahead and sort the left half of these four numbers?",
			"BRIAN: All right.",
			"So I have these four numbers.",
			"I want to sort the left half.",
			"That's these two numbers.",
			"So now I need to figure out how to sort two numbers.",
			"DAVID MALAN: All right.",
			"Now, us with human intuition might obviously know what we have to do here.",
			"But again, let's apply the algorithm-- sort left half, sort right half,",
			"merge sorted half.",
			"Brian, could you sort the right half of this array of size 2?",
			"BRIAN: So I've got the array of two, so I'll first",
			"sort the left half of the array of two, which is the 6.",
			"DAVID MALAN: And this is where the base case in white on the slide",
			"comes into play--",
			"if only one number, quit.",
			"So Brian, I can let you off the hook.",
			"That list of size one with the number 6 is sorted.",
			"So that's step one of three done.",
			"Brian, could you sort the right half of that array of size two?",
			"BRIAN: The right half is the number 3.",
			"It's also just one number, so that one is done.",
			"DAVID MALAN: Good.",
			"So think about where we are on the story.",
			"We've sorted the left half, and we've started the right half,",
			"even though it looks like neither Brian nor I have done any useful work yet.",
			"But now the magic happens.",
			"Brian, you now have two arrays of size 1.",
			"Could you merge them together?",
			"BRIAN: All right.",
			"So I'm going to merge these two together.",
			"Between the 6 and the 3, the 3 is smaller.",
			"So that one I'll put there first.",
			"And then I'll take the 6, and that one goes next.",
			"And now I have a sorted array of size 2 that is now done.",
			"DAVID MALAN: All right.",
			"And this is where you now need to start remembering step by step sort",
			"of in your brain as the things pile up.",
			"How did we get to this point?",
			"We started with a list of size 8.",
			"We then looked at the left half, which was an array of size 4.",
			"We then looked at the left half of that, which was an array of size 2,",
			"then two arrays of size 1, then we merged those two sorted halves.",
			"So I think now if I rewind in that story, Brian,",
			"you need to sort the right half of the left half of the original numbers.",
			"BRIAN: All right.",
			"So the left half is these four.",
			"The right half of the left half is going to be these two numbers.",
			"And so now to those two, I guess I would repeat the process again--",
			"look at the numbers individually.",
			"I would look at the left half of these two, which is the 8.",
			"That one is done.",
			"And the 5, that one is done as well.",
			"DAVID MALAN: All right.",
			"So step three of three, then, is merge those two sorted halves.",
			"BRIAN: All right.",
			"So between the 8 and the 5, the 5 is smaller, so that one will go in first.",
			"And the 8 will go after that.",
			"And now I have a second array of size 2 that is also now sorted.",
			"DAVID MALAN: Indeed.",
			"So here's where, again, you have to rewind in your mind's eye.",
			"We've just now sorted the left half, and we've",
			"sorted the left half and the right half of the left half.",
			"So I think the third and final step at this part of the story is, Brian,",
			"to merge those sorted halves, each of which now is of size 2.",
			"BRIAN: All right.",
			"I have two arrays of size 2, each of which is sorted, that I need to merge.",
			"So I'm going to compare the smallest numbers from each.",
			"I'm going to compare the 3 and the 5.",
			"The 3 is smaller, so that one will go in first.",
			"Now between these two arrays, I have a 6 and a 5 to compare.",
			"The 5 is smaller, so that one will go next.",
			"Between the 6 and the 8, the 6 is smaller.",
			"And I'm left with just the 8.",
			"So if we go back to the original story of eight numbers that I was sorting,",
			"I think I have now sorted the left half of the left four numbers",
			"from that original array.",
			"DAVID MALAN: Indeed.",
			"So if you're playing along at home, think",
			"about-- you've got all these thoughts probably kind",
			"of piling up in your mind.",
			"That's indeed supposed to be the case.",
			"And admittedly, it's hard to keep track of all of that.",
			"So we'll let Brian now execute this altogether",
			"together doing the same thing now, by sorting the right half all",
			"the way to completion.",
			"Brian, if you could.",
			"BRIAN: All right.",
			"So the right half, you got four numbers.",
			"I'm going to start by sorting the left half of the right half, which",
			"is these two numbers here.",
			"To do that, I'll repeat the same process--",
			"sort the left half of these two numbers, which is just the 2.",
			"That one's done, it's only one number.",
			"Same thing with the right half.",
			"The 7 is only one number, so it's done.",
			"And now I'll merge the sorted halves together.",
			"Between the 2 and the 7, the 2 is smaller and then the 7.",
			"So here now is the left half of the right half, an array of size 2,",
			"that is sorted.",
			"And I'll do the same thing with the right half of the right half,",
			"starting with the left half, which is 4.",
			"That's done.",
			"The 1 is done.",
			"And now to merge these two together, I'll",
			"compare them and say the 1 is smaller.",
			"So I'll put the 1 down and then the 4.",
			"So now I have two sorted arrays, each of size 2,",
			"that I now need to backtrack and now merge together",
			"to form an array of size 4.",
			"So I'll compare the 2 and the 1.",
			"Between those two, the 1 is smaller.",
			"Then I'll compare the 2 with the 4.",
			"The 2 is smaller.",
			"Then I'll compare the 7 with the 4.",
			"The 4 is smaller.",
			"And then finally, I'll just take the 7, the last number,",
			"and put that in the final spot.",
			"And so now from the original array of eight numbers,",
			"I've now sorted the left half, and I've sorted the right half.",
			"DAVID MALAN: And now that brings us to our third and very final step.",
			"Could you, Brian, merge the sorted halves?",
			"BRIAN: Yeah.",
			"And I think this is actually an example we've seen already.",
			"And what I'm going to do in order to these two halves",
			"is just take the smaller number from each half",
			"and compare them again and again.",
			"So between the 3 and the 1, the 1, that's the smallest number.",
			"So that goes into place.",
			"Then between the 3 and the 2, the 2 is smaller,",
			"so we'll take that and put that into place.",
			"Now I'm comparing the 3 with the 4.",
			"The 3, that goes next.",
			"Next I'm comparing the 5 with the 4.",
			"4 is smaller, so the 4 goes into place next.",
			"Now I'm comparing the 5 with the 7.",
			"5 is smaller, so that one goes into place.",
			"And next, comparing the 6 with the 7, so the 6 is smaller.",
			"That goes next.",
			"And now I'm left with two numbers, the 8 and the 7.",
			"The 7 is the smaller of the 2, so that one goes next.",
			"And at this point, I only have one number left, which is the 8.",
			"And so that one's going to go into its sorted position",
			"at the end of the array.",
			"DAVID MALAN: Indeed.",
			"So even though it felt like we weren't really doing anything",
			"at several points in that story, it all sort of",
			"came together when we started merging and merging and merging these lists.",
			"And it's not an accident that Brian was using multiple shelves,",
			"moving the numbers from top to bottom, to make clear",
			"just how many times he was effectively dividing that list up.",
			"We started with a list of eight, and we essentially",
			"took it to two lists of size 4, four lists of size 2, eight lists of size 1.",
			"And while it wasn't exactly in that order,",
			"if you rewind and analyze all of the steps, that's indeed what he did.",
			"He went from 8 to two 4's to four 2's to eight 1's.",
			"And that's why he moved those numbers from the top shelf down three times--",
			"from 8's, to 4's, to 2's, to 1'r.",
			"So how many times did he move the numbers?",
			"He moved them three times total.",
			"And on each of those shelves, how many numbers did he have to merge together?",
			"On each of those shelves, he ultimately touched all eight numbers.",
			"He first inserted the smallest number, then the second smallest, then",
			"the third smallest.",
			"But unlike selection sort, he had smartly already sorted those halves,",
			"so he was just plucking them off one at a time.",
			"He wasn't going back and forth, back and forth.",
			"He was constantly taking from the beginning of each of those half lists.",
			"So on every shelf, he was doing, let's say, n steps,",
			"because he was merging in all n elements of that shelf.",
			"But how many times did he merge n elements together?",
			"Well, he did that three total times.",
			"But if you think about binary search, and really the process of divide",
			"and conquer more generally, anytime you divide something in half and half",
			"and half, as he was doing from 8's to 4's to 2's to 1's.",
			"That's a logarithm.",
			"That's log base 2.",
			"And indeed, that is wonderfully the height of this shelf.",
			"If you have eight elements on the shelf, the number of additional shelves",
			"Brian used, 3, is exactly what you get by doing the math log base 2 of 8.",
			"Which is to say, Brian did n things log n times.",
			"And again with a wave of the hand, computer scientists",
			"don't bother mentioning the base with Big O notation.",
			"It suffices just to say log n--",
			"Brian did n things log n times.",
			"And so if we consider, then, the asymptotic complexity",
			"of this algorithm, that is to say the running time of this algorithm,",
			"in terms of big O notation, notice that it performs strictly better then",
			"selection sort and bubble sort--",
			"n times log n.",
			"And even, again, if you're a little rusty on logarithms, log n,",
			"we have seen as of week 0 in binary search,",
			"is definitely faster than n steps.",
			"So n squared is n times n.",
			"n log n is n times log n, which is indeed mathematically",
			"better then n squared.",
			"As with merge sort, though, if we consider the lower bound,",
			"notice that bubble sort, yes, got us as low as omega of n.",
			"Turns out merge sort is a little bit like selection sort",
			"in that it doesn't optimize itself and get you out of the algorithm early.",
			"It's always n log n, so it's lower bound omega of n log n.",
			"And that might not be acceptable.",
			"Sometimes you might have certain data inputs",
			"where maybe it tends to be sorted and you don't want to waste time.",
			"So maybe you'd be OK with bubble sort.",
			"But honestly, as n gets large, the probability",
			"that the input to your sorting algorithm is just by chance going to be sorted",
			"is probably so, so low that you're just better",
			"off in the general case using an algorithm like merge sort that's",
			"n log n always.",
			"We can see this visually using our bars, too.",
			"And notice, just as Brian was dividing and conquering",
			"the problem in half and half and half, and then reconstituting",
			"the array by merging those halves, you can kind of see that visually here.",
			"There's a lot more going on.",
			"And it's going to seem in a moment that everything just kind of magically",
			"worked.",
			"But you can see in the faded purple bars that, indeed, this",
			"is sorting things in halves and then merging those halves together.",
			"And this visualization was a little different.",
			"It did not have the luxury of three shelves.",
			"It just moved top to bottom, top to bottom.",
			"And honestly, Brian could have been a little more optimal there.",
			"We wanted to make clear how many total shelves there were.",
			"But honestly, there's no reason he couldn't have just",
			"moved the numbers down then back up, then back down then back up.",
			"And, indeed that's the price you pay with merge sort.",
			"Even though n log n is better than n squared, and ergo",
			"merge sort is arguably better than selection sort and bubble sort,",
			"you pay a price.",
			"And this speaks to the trade-off I mentioned earlier.",
			"Almost always, when you do something better in code",
			"or solve a problem more intelligently, you have paid a price.",
			"Maybe you spent more time as the human writing the code,",
			"because it was harder and took more sophistication.",
			"That is a cost.",
			"Maybe you had to use actually more space.",
			"Brian had to have at least one extra shelf in order to implement merge sort.",
			"If implementing merge sort in code and C,",
			"you will need at least a second array to temporarily put the numbers into as you",
			"merge things back and forth.",
			"If you want to be extravagant, you can have three separate arrays",
			"or four separate arrays.",
			"But it's suffices, per the graphical representation of merge sort,",
			"to just use a second array.",
			"Now, that might not seem like such a big deal.",
			"But implicitly, you need twice as much space.",
			"And that might be a big deal.",
			"If you've got a million things to sort, and you now need two arrays,",
			"that's 2 million chunks of memory that you need.",
			"And maybe that's not tenable.",
			"So there, too, there's going to be a trade-off.",
			"And maybe while slower, selection sort of bubble sort, maybe",
			"it's better because it's a little more efficient with space.",
			"It's going to depend on what you care about",
			"and what you want to optimize for.",
			"And honestly, money is sometimes a factor.",
			"In the real world, maybe it's better to write slightly slower code",
			"so that you don't have to buy twice as many servers or twice as much memory",
			"for your computer.",
			"It depends there on what resource is more important--",
			"your time, the computer's time, your wallet, or some other resource",
			"altogether.",
			"So we'll continue to see these kinds of trade-offs.",
			"But perhaps the most mind blowing thing we can do as we wrap up here",
			"is share a few visualizations of how these algorithms actually compare.",
			"And one last piece of jargon is this one final Greek symbol, theta.",
			"It turns out that, thanks to selection sort and merge sort,",
			"we can actually apply one more term of art here, this theta notation.",
			"Anytime an algorithm has both the same upper bound",
			"as its lower bound running time, you can actually",
			"describe it in just one sentence instead of two in terms of theta notation.",
			"So because selection sort was in both big O of n squared and omega",
			"of n squared, you can actually just say, ah, it's in theta of n squared.",
			"It's always n squared either in the upper bound or in the lower bound.",
			"Same thing for merge sort.",
			"It's in theta of n log n.",
			"We cannot use theta for bubble sort or for binary search or for linear search,",
			"because they had different upper and lower bounds.",
			"Well, let me go ahead now and prepare a final demonstration,",
			"this time using some random inputs.",
			"So you'll see here a video comparing selection sort, bubble sort,",
			"and merge sort all together.",
			"All three of them start with random data.",
			"But let's just see what it means for an algorithm",
			"to be an n squared in the worst case or in n log n in this case instead.",
			"[MUSIC PLAYING]",
			"Selection sort's on the top, bubble sort's on the bottom,",
			"merge sort's in the middle.",
			"And would you believe it, merge sort is already done.",
			"[MUSIC INTENSIFIES]",
			"And meanwhile, we have some very trendy music we can listen to,",
			"which is really just there to distract us",
			"from the fact at how slow n squared actually is in practice.",
			"And notice, there's not that many bars here.",
			"There's maybe like a hundred or so bars.",
			"Like, n is 100.",
			"That's not even a big value.",
			"When we're talking about the Twitters, the Facebooks, the Googles",
			"of the world, these are trivial sizes.",
			"And yet, my God, we're still waiting for selection sort and bubble sort",
			"to finish.",
			"And so you can see here that it really matters when you exercise a little bit",
			"more cleverness, and you leverage a more efficient algorithm--",
			"and finally, selection sort is done, bubble sort still taking",
			"a little longer here.",
			"And this is going to depend on the input.",
			"Sometimes you can get lucky or unlucky.",
			"But I think it's convincing that merge sort has won in this case.",
			"[MUSIC PLAYING]",
			""
		],
		"is_youtube": false
	},
	"video_014": {
		"section": "CS50x 2021",
		"subsection": "Week 3",
		"unit": "Shorts",
		"video_sources": [
			"https://edx-video.net/HARCS50X2016-V033100_DTH.mp4",
			"https://edx-video.net/HARCS50X2016-V033100/HARCS50X2016-V033100.m3u8"
		],
		"video_duration": 170,
		"speech_period": [
			2.892, 2.455, 1.833, 2.66, 2.15, 3.04, 2.45, 4.72, 4.18, 3.46, 4.09,
			2.459, 2.291, 3.65, 1.54, 2.1, 1.92, 2.33, 1.29, 1.22, 2.884, 2.166, 3.25,
			2.88, 1.877, 2.333, 3.79, 3.46, 1.67, 0.5, 2.407, 1.833, 1.02, 2.22, 4.03,
			2.67, 2.03, 4.54, 2.15, 2.6, 3.37, 2.771, 0.749, 2.46, 1.68, 3.24, 3.24,
			4.68, 2.277, 2.083, 5.0, 3.92, 1.25, 2.67, 1.93, 2.499, 1.541, 1.45,
			3.134, 2.666, 3.28, 2.61, 3.21, 1.03, 2.24, 1.856
		],
		"transcript_en": [
			">> [MUSIC PLAYING]",
			"",
			"DOUG LLOYD: Linear search is an algorithm we",
			"can use to find an element in an array.",
			"An algorithm recall is a step-by-step set",
			"of instructions for completing a task.",
			">> The linear search algorithm works as follows.",
			"Iterate across the array from left to right, looking for a specified element.",
			">> In pseudocode, which is a more distilled version of this sentence,",
			"if the first element is what you're looking for, you can stop.",
			"Otherwise, move to the next element and keep going over and over until you find",
			"the element, or you don't.",
			"So we can use the linear search algorithm, for example,",
			"to find the target value nine in this array.",
			"Well we start at the beginning.",
			"If it's what we're looking for, we can stop.",
			"It's not, we're not looking for 11.",
			"So otherwise, move to the next element.",
			">> So we look at 23.",
			"Is 23 what we're looking for?",
			"Well no, so we move on to the next element, and the next element,",
			"and we keep going through this process over and over",
			"and over, until we land on a situation like this.",
			">> Nine is what we're looking for, and this element of the array",
			"is, it's value is nine.",
			"And so we found what we're looking for, and we can stop.",
			"The linear search has completed, successfully.",
			">> But what about if we're looking for an element that's not in our array.",
			"Does linear search still work?",
			"Well sure.",
			"So we repeat this process starting at the first element.",
			"If it's what we're looking for, we can stop.",
			"It's not.",
			"Otherwise, we move to the next element.",
			">> But we can keep repeating this process, examining each element in turn,",
			"hoping that we find the number 50.",
			"But we won't know if we've found the number 50",
			"or if we didn't, until we've stepped over every single element of the array.",
			">> Only once we've done that and come up short,",
			"can we conclude that 50 is not in the array.",
			"And so the linear search algorithm, well it failed, per se.",
			"But not in the sense that it was unsuccessful in doing what",
			"we asked it to do.",
			">> It was unsuccessful in as much as it didn't find 50,",
			"but 50 wasn't in the array.",
			"But we have exhaustively searched through every single element",
			"and so, while we didn't find anything, linear search still",
			"succeeds even if the element is not in the array.",
			">> So what's the worst case scenario with linear search?",
			"Well we have to look through every single element,",
			"either because the target element is the last element of the array,",
			"or the element we're looking for doesn't actually exist in the array at all.",
			"What's the best case scenario?",
			"Well we might find the element immediately.",
			"And how many elements do we then have to look",
			"at in the best case, if we're looking for it",
			"and we find it at the very beginning?",
			"We can stop immediately.",
			">> What does this say about the complexity of linear search?",
			"Well in the worst case, we have to look at every single element.",
			"And so it runs in O of n, in the worst case.",
			">> In the best case, we're gonna find the element immediately.",
			"And so runs in omega of 1.",
			">> I'm Doug Lloyd.",
			"This is CS50.",
			""
		],
		"is_youtube": false
	},
	"video_015": {
		"section": "CS50x 2021",
		"subsection": "Week 3",
		"unit": "Shorts",
		"video_sources": [
			"https://edx-video.net/HARCS50X2016-V033900_DTH.mp4",
			"https://edx-video.net/HARCS50X2016-V033900/HARCS50X2016-V033900.m3u8"
		],
		"video_duration": 571,
		"speech_period": [
			3.346, 1.912, 0.962, 1.92, 2.39, 4.18, 4.31, 1.45, 1.31, 3.32, 2.14, 2.28,
			3.22, 3.33, 3.13, 3.67, 2.754, 2.416, 2.46, 1.8, 2.74, 3.67, 3.6, 5.43,
			3.22, 3.5, 0.57, 1.52, 3.06, 3.82, 3.35, 2.52, 4.81, 4.83, 3.27, 2.45,
			3.46, 3.025, 2.625, 1.98, 3.77, 1.16, 2.54, 2.0, 3.4, 2.78, 2.47, 1.999,
			2.611, 3.396, 1.374, 2.04, 3.36, 3.78, 2.07, 2.3, 3.21, 1.004, 1.916,
			1.98, 1.33, 1.92, 2.795, 4.865, 1.83, 2.27, 2.654, 2.666, 1.46, 3.67,
			2.19, 2.27, 3.15, 2.64, 1.67, 3.09, 3.5, 2.55, 3.957, 1.333, 3.47, 3.18,
			0.57, 1.33, 4.13, 3.07, 4.81, 4.41, 5.53, 2.35, 3.94, 2.1, 2.096, 1.894,
			1.83, 1.38, 4.32, 1.53, 1.45, 2.82, 1.791, 3.559, 3.52, 2.98, 3.68, 3.09,
			5.66, 2.19, 3.5, 2.174, 1.666, 1.04, 2.781, 0.499, 2.87, 2.14, 2.99, 1.75,
			2.57, 2.24, 1.49, 1.48, 3.9, 3.567, 3.083, 4.31, 2.86, 1.88, 2.04, 2.56,
			1.62, 3.15, 1.72, 0.5, 3.15, 3.38, 2.23, 3.91, 3.68, 2.0, 3.02, 2.6, 1.16,
			4.44, 1.71, 0.81, 3.06, 2.92, 2.185, 3.405, 3.54, 1.68, 0.98, 3.46, 1.65,
			0.75, 2.55, 4.01, 3.472, 2.388, 2.33, 3.209, 1.291, 1.589, 1.041, 2.78,
			1.775, 1.125, 3.55, 2.445, 3.065, 1.25, 2.6, 3.65, 2.632, 1.708, 4.0,
			2.15, 3.83, 2.34, 2.06, 3.0, 1.56, 2.13, 3.84, 2.95, 3.69, 1.67, 3.08,
			2.99, 4.52, 5.34, 4.72, 2.68, 2.1, 2.55, 1.35, 2.389, 1.291, 1.96, 3.339,
			1.541, 1.291, 2.879, 2.75, 2.4, 5.23, 4.63, 2.78, 4.28, 2.87, 0.99, 2.34,
			1.6
		],
		"transcript_en": [
			">> [MUSIC PLAYING]",
			"",
			">> DOUG LLOYD: All right.",
			"So binary search is an algorithm we can use",
			"to find an element inside of an array.",
			"Unlike linear search, it requires a special condition be met beforehand,",
			"but it's so much more efficient if that condition is, in fact, met.",
			">> So what's the idea here?",
			"it's divide and conquer.",
			"We want to reduce the size of the search area by half each time",
			"in order to find a target number.",
			"This is where that condition comes into play, though.",
			"We can only leverage the power of eliminating half of the elements",
			"without even looking at them if the array is sorted.",
			">> If it's a complete mix up, we can't just out of hand",
			"discard half of the elements, because we don't know what we're discarding.",
			"But if the array is sorted, we can do that, because we",
			"know that everything to the left of where we currently are",
			"must be lower than the value we're currently at.",
			"And everything to the right of where we are",
			"must be greater than the value we're currently looking at.",
			">> So what's the pseudocode steps for binary search?",
			"We repeat this process until the array or, as we proceed through,",
			"sub arrays, smaller pieces of the original array, is of size 0.",
			"Calculate the midpoint of the current sub array.",
			">> If the value you're looking for is in that element of the array, stop.",
			"You found it.",
			"That's great.",
			"Otherwise, if the target is less than what's at the middle,",
			"so if the value we're looking for is lower than what we see,",
			"repeat this process again, but change the end point, instead",
			"of being the original complete full array,",
			"to be just to the left of where we just looked.",
			">> We knew that the middle was too high, or the target was less than the middle,",
			"and so it must exist, if it exists at all in the array,",
			"somewhere to the left of the midpoint.",
			"And so we'll set the array location just to the left",
			"of the midpoint as the new end point.",
			"Conversely, if the target is greater than what's at the middle,",
			"we do the exact same process, but instead we",
			"change the start point to be just to the right of the midpoint",
			"we just calculated.",
			"And then, we begin the process again.",
			">> Let's visualize this, OK?",
			"So there's a lot going and on here, but here's an array of the 15 elements.",
			"And we're going to be keeping track of a lot more stuff this time.",
			"So in linear search, we were just caring about a target.",
			"But this time we want to care about where are we",
			"starting to look, where are we stopping looking,",
			"and what's the midpoint of the current array.",
			"So here we go with binary search.",
			"We're pretty much good to go, right?",
			"I'm just going to put down below here a set of indices.",
			"This is basically just what element of the array we're talking about.",
			"With linear search, we care, inasmuch as we",
			"need to know how many elements we're iterating over,",
			"but we don't actually care what element we're currently looking at.",
			"In binary search, we do.",
			"And so those are just there as a little guide.",
			">> So we can start, right?",
			"Well, not quite.",
			"Remember what I said about binary search?",
			"We can't do it on an unsorted array or else,",
			"we are not guaranteeing that the certain elements or values aren't",
			"being accidentally discarded when we just",
			"decide to ignore half of the array.",
			">> So step one with binary search is you must have a sorted array.",
			"And you can use any of the sorting algorithms we've talked about",
			"to get you to that position.",
			"So now, we're in a position where we can perform binary search.",
			">> So let's repeat the process step by step and keep",
			"track of what's happening as we go.",
			"So the first we need to do is calculate the midpoint of the current array.",
			"Well, we'll say we're, first of all, looking for the value 19.",
			"We're trying to find the number 19.",
			"The first element of this array is located at index zero,",
			"and the last element of this array is located at index 14.",
			"And so we'll call those start and end.",
			">> So we calculate the midpoint by adding 0 plus 14 divided by 2;",
			"pretty straightforward midpoint.",
			"And we can say that the midpoint is now 7.",
			"So is 15 what we're looking for?",
			"No, it's not.",
			"We're looking for 19.",
			"But we know that 19 is greater than what we found at the middle.",
			">> So what we can do is change the start point",
			"to be just to the right of the midpoint, and repeat the process again.",
			"And when we do that, we now say the new start point is array location 8.",
			"What we've effectively done is ignored everything to the left of 15.",
			"We've eliminated half of the problem, and now,",
			"instead of having to search over 15 elements in our array,",
			"we only have to search over 7.",
			"So 8 is the new start point.",
			"14 is still the end point.",
			">> And now, we go over this again.",
			"We calculate the new midpoint.",
			"8 plus 14 is 22, divided by 2 is 11.",
			"Is this what we're looking for?",
			"No, it's not.",
			"We're looking for a value that's less than what we just found.",
			"So we're going to repeat the process again.",
			"We're going to change the end point to be just to the left of the midpoint.",
			"So the new end point becomes 10.",
			"And now, that's the only part of the array we have to sort through.",
			"So we have now eliminated 12 of the 15 elements.",
			"We know that if 19 exists in the array, it",
			"must exist somewhere between element number 8 and element number 10.",
			">> So we calculate the new midpoint again.",
			"8 plus 10 is 18, divided by 2 is 9.",
			"And in this case, look, the target is at the middle.",
			"We found exactly what we're looking for.",
			"We can stop.",
			"We successfully completed a binary search.",
			"All right.",
			"So we know this algorithm works if the target is",
			"somewhere inside of the array.",
			"Does this algorithm work if the target is not in the array?",
			"Well, let's start it again, and this time,",
			"let's look for the element 16, which visually we can see",
			"does not exist anywhere in the array.",
			">> The start point is again 0.",
			"The end point is again 14.",
			"Those are the indices of the first and last elements of the complete array.",
			"And we'll go through the process we just went through again, trying to find 16,",
			"even though visually, we can already tell that it's not going to be there.",
			"We just want to make sure this algorithm will, in fact, still work in some way",
			"and not just leave us stuck in an infinite loop.",
			">> So what's the step first?",
			"Calculate the midpoint of the current array.",
			"What's the midpoint of the current array?",
			"Well, it's 7, right?",
			"14 plus 0 divided by 2 is 7.",
			"Is 15 what we're looking for?",
			"No.",
			"It's pretty close, but we're looking for a value slightly bigger than that.",
			">> So we know that it's going to be nowhere to the left of 15.",
			"The target is greater than what's in the midpoint.",
			"And so we set the new start point to be just to the right of the middle.",
			"The midpoint is currently 7, so let's say the new start point is 8.",
			"And what we've effectively done again is ignored",
			"the entire left half of the array.",
			">> Now, we repeat the process one more time.",
			"Calculate the new midpoint.",
			"8 plus 14 is 22, divided by 2 is 11.",
			"Is 23 what we're looking for?",
			"Unfortunately, no.",
			"We're looking for a value that is less than 23.",
			"And so in this case, we're going to change the end point to be just",
			"to the left of the current midpoint.",
			"The current midpoint is 11, and so we'll set the new end point",
			"for the next time we go through this process to 10.",
			">> Again, we go through the process again.",
			"Calculate the midpoint.",
			"8 plus 10 divided by 2 is 9.",
			"Is 19 what we're looking for?",
			"Unfortunately, no.",
			"We're still looking for a number less than that.",
			"So we'll change the end point this time to be just to the left of the midpoint.",
			"The midpoint is currently 9, so the end point will be 8.",
			"And now, we're just looking at a single element array.",
			">> What's the midpoint of this array?",
			"Well, it starts at 8, it ends at 8, the midpoint is 8.",
			"Is that what we're looking for?",
			"Are we looking for 17?",
			"No, we're looking for 16.",
			"So if it exists in the array, it must exist somewhere",
			"to the left of where we currently are.",
			"So what are we going to do?",
			"Well, we'll set the end point to be just to the left of the current midpoint.",
			"So we'll change the end point to 7.",
			"Do you see what just happened here, though?",
			"Look up here now.",
			">> Start is now greater than end.",
			"Effectively, the two ends of our array have crossed,",
			"and the start point is now after the end point.",
			"Well, that doesn't make any sense, right?",
			"So now, what we can say is we have a sub array of size 0.",
			"And once we're gotten to this point, we can now",
			"guarantee that element 16 does not exist in the array,",
			"because the start point and end point have crossed.",
			"And so it's not there.",
			"Now, notice that this is slightly different than the start point and end",
			"point being the same.",
			"If we had been looking for 17, it would have",
			"been in the array, and the start point and end point of that last iteration",
			"before those points crossed, we would have found 17 there.",
			"It's only when they cross that we can guarantee that the element does not",
			"exist in the array.",
			">> So let's take a lot fewer steps than linear search.",
			"In the worst case scenario, we had to split up a list of n elements",
			"repeatedly in half to find the target, either because the target element",
			"will be somewhere in the last division, or it doesn't exist at all.",
			"So in the worst case, we have to split up the array-- do you know?",
			"Log of n times; we have to cut the problem",
			"in half a certain number of times.",
			"That number of times is log n.",
			">> What's the best case scenario?",
			"Well, the first time we calculate the midpoint,",
			"we find what we're looking for.",
			"In all the previous examples on binary search",
			"we've just gone over, if we had been looking for the element 15,",
			"we would have found that immediately.",
			"That was at the very beginning.",
			"That was the midpoint of the first attempt at a split",
			"of a division in binary search.",
			">> And so in the worst case, binary search runs",
			"in log n, which is substantially better than linear search, in the worst case.",
			"In the best case, binary search runs in omega of 1.",
			"So binary search is a lot better than linear search,",
			"but you have to deal with the process of sorting your array first before you can",
			"leverage the power of binary search.",
			">> I'm Doug Lloyd.",
			"This is CS 50.",
			""
		],
		"is_youtube": false
	},
	"video_016": {
		"section": "CS50x 2021",
		"subsection": "Week 3",
		"unit": "Shorts",
		"video_sources": [
			"https://edx-video.net/HARCS50X2016-V034300/HARCS50X2016-V034300.m3u8",
			"https://edx-video.net/HARCS50X2016-V034300_DTH.mp4"
		],
		"video_duration": 354,
		"speech_period": [
			3.36, 1.162, 2.208, 2.0, 2.12, 2.39, 4.1, 3.0, 2.916, 1.714, 1.16, 1.91,
			2.28, 2.25, 3.52, 3.82, 3.26, 3.25, 3.13, 2.07, 2.25, 3.601, 3.249, 3.22,
			3.095, 3.469, 2.916, 1.42, 3.13, 2.64, 3.23, 2.7, 2.86, 2.21, 2.0, 4.29,
			2.614, 1.166, 2.75, 2.23, 2.48, 3.27, 1.42, 4.03, 1.51, 4.17, 3.42, 1.94,
			4.93, 1.72, 3.08, 1.62, 4.67, 1.31, 3.284, 2.666, 3.11, 4.35, 3.56, 3.52,
			2.38, 4.74, 2.325, 2.965, 2.15, 2.57, 2.449, 2.041, 3.601, 1.749, 1.72,
			3.77, 2.71, 1.73, 1.87, 1.57, 1.36, 1.73, 2.365, 2.615, 3.75, 2.04, 3.44,
			2.82, 2.95, 1.69, 2.539, 2.541, 2.16, 1.297, 1.833, 2.1, 1.26, 1.27, 2.99,
			2.07, 1.71, 1.42, 4.24, 3.28, 2.99, 2.82, 3.66, 3.56, 2.6, 2.22, 2.88,
			2.98, 3.63, 1.91, 3.57, 1.7, 4.9, 2.152, 1.708, 2.07, 2.16, 2.51, 2.39,
			3.64, 0.96, 2.85, 2.94, 2.44, 4.65, 1.8, 2.33, 2.03, 4.09, 3.11, 3.45,
			1.04, 1.87, 2.242
		],
		"transcript_en": [
			">> [MUSIC PLAYING]",
			"",
			"DOUG LLOYD: All right, so bubble sort is an algorithm",
			"you can use to sort a set of elements.",
			"Let's take a look at how it works.",
			">> So the basic idea behind bubble sort is this.",
			"We generally want to move higher valued elements generally to the right,",
			"and lower valued elements generally to the left, as we would expect.",
			"We want the lower things to be at the beginning, and the higher things",
			"to be at the end.",
			">> How do we do this?",
			"Well in pseudocode code, we could say, let's",
			"set a swap counter to a non-zero value.",
			"We'll see why we do that in a second.",
			"And then we repeat the following process until the swap counter is 0,",
			"or until we make no swaps at all.",
			">> Reset the swap counter to 0 if it's not already 0.",
			"Then look at every adjacent pair of elements.",
			"If those two elements are not in order, swap them,",
			"and add 1 to the swap counter.",
			"If you're thinking about this before you visualize it,",
			"notice that this will move lower valued elements to the left",
			"and higher valued elements to the right, effectively doing what we want to do,",
			"which is move those groups of elements in that way.",
			"Let's visualize how this might look using our array",
			"that we used to test out these algorithms.",
			"We have an unsorted array here again, indicated by all of the elements",
			"being in red.",
			"And I set my swap counter to a nonzero value.",
			"I arbitrarily chose negative 1-- it's not 0.",
			"We want to repeat this process until the swap counter is 0.",
			"This is why I set my swap counter to some non-zero value,",
			"because otherwise the swap counter would be 0.",
			"We wouldn't even begin the process of the algorithm.",
			"So again, the steps are-- reset the swap counter",
			"to 0, then look at every adjacent pair, and if they're out of order,",
			"swap them, and add 1 to the swap counter.",
			"So let's begin this process.",
			"So the first thing we do is we set the swap counter to 0,",
			"and then we start looking at each adjacent pair.",
			">> So we first start looking at 5 and 2.",
			"We see that they are out of order and so we swap them.",
			"And we add 1 to the swap counter.",
			"So now our swap counter is 1, and 2 and 5 have been switched.",
			"Now we repeat the process again.",
			">> We look at the next adjacent pair, 5 and 1-- they're also out of order,",
			"so we swap them and add 1 to the swap counter.",
			"Then we look at 5 and 3.",
			"They are out of order, so we swap them and we add 1 to the swap counter.",
			"Then we look at 5 and 6.",
			"They're in order, so we don't actually need to swap anything this time.",
			"Then we look at 6 and 4.",
			"They're also out of order, so we swap them and we add 1 to the swap counter.",
			">> Now notice what's happened.",
			"We've moved 6 all the way to the end.",
			"So in selection sort, if you've seen that video, what we did was",
			"we ended up moving the smallest elements in building",
			"the sorted array essentially from left to right, smallest to largest.",
			"In the case of bubble sort, if we're following this particular algorithm,",
			"we're actually going to be building the sorted array from right",
			"to left, largest to smallest.",
			"We have effectively bubbled 6, the largest value, all the way to the end.",
			">> And so we can now declare that that is sorted,",
			"and in future iterations-- going through the array again--",
			"we don't have to consider 6 anymore.",
			"We only have to consider the unsorted elements",
			"when we're looking at adjacent pairs.",
			"So we have finished one pass through bubble sort.",
			"So now we go back to the question, repeat until the swap counter is 0.",
			"Well the swap counter is 4, so we're going",
			"to keep repeating this process again.",
			">> We're going to reset the swap counter to 0, and look at each adjacent pair.",
			"So we start with 2 and 1-- they're out of order, so we swap them",
			"and we add 1 to the swap counter.",
			"2 and 3, they're in order.",
			"We don't need to do anything.",
			"3 and 5 are in order.",
			"We don't need to do anything there.",
			">> 5 and 4, they are out of order, and so we",
			"need to swap them and add 1 to the swap counter.",
			"And now we've moved 5, the next largest element,",
			"to the end of the unsorted portion.",
			"So we can now call that part of the sorted portion.",
			">> Now you're looking at the screen and probably can tell,",
			"as can I, that the array is sorted right now.",
			"But we can't prove that yet.",
			"We don't have a guarantee that it's sorted.",
			"But this is where the swap counter's going to come into play.",
			">> So we've completed a pass.",
			"The swap counter is 2.",
			"So we're going to repeat this process again,",
			"repeat until the swap counter is 0.",
			"Reset the swap counter to 0.",
			"So we'll reset it.",
			">> Now look at each adjacent pair.",
			"That's in order, 1 and 2.",
			"2 and 3 are in order.",
			"3 and 4 are in order.",
			"So at this point, notice we've completed looking at every adjacent pair,",
			"but the swap counter is still 0.",
			">> If we don't have to switch any elements, then they",
			"must be in order, by virtue of this process.",
			"And so an efficiency of sorts, that we computer scientists love,",
			"is we can now declare the entire array must",
			"be sorted, because we didn't have to swap any elements.",
			"That's pretty nice.",
			">> So what's the worst case scenario with bubble sort?",
			"In the worst case the array is in completely reverse order,",
			"and so we have to bubble each of the large elements all",
			"the way across the array.",
			"And we effectively also have to bubble all of the small elements back",
			"all the way across the array, too.",
			"So each of the n elements has to move across all of the other n elements.",
			"So that's the worst case scenario.",
			"In the best case scenario though, this is",
			"slightly different from selection sort.",
			"The array is already sorted when we go in.",
			"We don't have to make any swaps on the first pass.",
			"So we might have to look at fewer elements, right?",
			"We don't have to repeat this process a number of times over.",
			">> So what does that mean?",
			"So what's the worst case scenario for bubble sort, and what's",
			"the best case scenario for bubble sort?",
			"Did you guess this?",
			"In the worst case you have to iterate across all the n elements n times.",
			"So the worst case is n squared.",
			">> If the array is perfectly sorted though, you only",
			"have to look at each of the elements once.",
			"And if the swap counter is still 0, you can say this array is sorted.",
			"And so in the best case, this is actually better than selection",
			"sort-- it's omega of n.",
			">> I'm Doug Lloyd.",
			"This is CS50.",
			""
		],
		"is_youtube": false
	},
	"video_017": {
		"section": "CS50x 2021",
		"subsection": "Week 3",
		"unit": "Shorts",
		"video_sources": [
			"https://edx-video.net/HARCS50X2016-V035200_DTH.mp4",
			"https://edx-video.net/HARCS50X2016-V035200/HARCS50X2016-V035200.m3u8"
		],
		"video_duration": 240,
		"speech_period": [
			5.726, 2.874, 1.87, 2.0, 2.79, 2.32, 4.5, 4.89, 2.83, 4.69, 4.17, 5.47,
			3.0, 2.58, 3.33, 1.38, 3.25, 4.35, 3.276, 2.624, 4.07, 2.39, 2.154, 2.166,
			1.833, 3.097, 1.23, 4.58, 1.9, 3.64, 2.34, 3.94, 2.66, 3.6, 4.56, 1.78,
			3.57, 1.57, 3.1, 3.44, 3.11, 2.607, 2.583, 1.19, 2.62, 1.8, 2.99, 5.63,
			1.84, 2.99, 1.84, 1.92, 1.916, 3.164, 3.166, 2.624, 5.13, 2.26, 2.91,
			4.34, 2.58, 4.34, 3.09, 1.415, 1.445, 3.4, 3.6, 4.72, 2.2, 2.98, 3.4,
			3.91, 2.59, 2.92, 4.565, 0.625, 2.54, 2.61, 1.16, 2.34, 1.679
		],
		"transcript_en": [
			">> [MUSIC PLAYING]",
			"DOUG LLOYD: Selection sort is an algorithm that, as you might expect,",
			"sorts a set of elements.",
			"And algorithm recall is a step-by-step set",
			"of instructions for completing a task.",
			">> In selection sort the basic idea is this,",
			"find the smallest unsorted element and add it to the end of the sorted list.",
			"Effectively what this does is build a sorted list, one element at a time.",
			"Breaking it down to pseudocode we could state this algorithm",
			"as follows, repeat this until no unsorted elements remain.",
			"Search through the unsorted data to find the smallest value,",
			"then swap the smallest value with the first element of the unsorted part.",
			">> It may help to visualize this, so let's take a look at this.",
			"So this, I contend, is an unsorted array and I've",
			"indicated it by indicating that all of the elements are colored red,",
			"they are not yet sorted.",
			"This is the entire unsorted part of the array.",
			">> So let's go through the steps of selection sort to sort this array.",
			"So again, we're gonna repeat until no unsorted elements remain.",
			"We're gonna search through the data to find the smallest value,",
			"and then swap that value with the first element of the unsorted part.",
			">> Right now, again, the entire array is the unsorted part.",
			"All of the red elements are unsorted.",
			"So we search through and we find the smallest value.",
			"We start at the beginning, we go to the end,",
			"we find the smallest value is, one.",
			"So that's part one.",
			"And then part two, swap that value with the first element of the unsorted part,",
			"or the first red element.",
			">> In this case that would be five, so we swap one and five.",
			"When we do this, we can visually see that we've",
			"moved the smallest valued element of the array, to the very beginning.",
			"Effectively sorting that element.",
			">> And so we can indeed confirm and state that one, is sorted.",
			"And so we'll indicate the sorted portion of our array, by coloring it blue.",
			">> Now we just repeat the process again.",
			"We search through the unsorted part of the array to find the smallest element.",
			"In this case, it's two.",
			">> We swap that with the first element of the unsorted part.",
			"In this case two also happens to be the first element of the unsorted part.",
			"So we swap two with itself, which really just leaves two",
			"where it is, and it's sorted.",
			"Continuing on, we search through to find the smallest element.",
			"It's three.",
			"We swap it with the first element, which is five.",
			"And now three is sorted.",
			">> We search through again, and we find the smallest element is four.",
			"We swap it with the first element of the unsorted part, and now four is sorted.",
			">> We find that five is the smallest element.",
			"We swap it with the first element of the unsorted part.",
			"And now five is sorted.",
			">> And then lastly, our unsorted part consists",
			"of just a single element, so we search through",
			"and we find that six is the smallest, and in fact, only element.",
			"And then we can state that it is sorted.",
			"And now we've switched our array from being completely unsorted",
			"in red, to completely sorted in blue, using selection sort.",
			">> So what's the worst case scenario here?",
			"Well in the absolute worst case, we have to look over",
			"all of the elements of the array to find the smallest unsorted element,",
			"and we have to repeat this process n times.",
			"Once for each element of the array because we only, in this algorithm,",
			"sort one element at time.",
			">> What's the best case scenario?",
			"Well it's exactly the same, right?",
			"We actually have to still step through every single element of the array",
			"in order to confirm that it is, in fact, the smallest element.",
			">> So the worst case runtime, we have to repeat a process n times,",
			"once for each of n elements.",
			"And in the best case scenario, we have to do the same.",
			">> So thinking back to our computational complexity toolbox,",
			"what do you think is the worst case runtime for selection sort?",
			"What do you think is the best case runtime for selection sort?",
			"",
			">> Did you guess Big O of n squared, and Big Omega of n squared?",
			"You'd be right.",
			"Those are, in fact, the worst case and best case run",
			"times, for selection sort.",
			">> I'm Doug Lloyd.",
			"This is CS50.",
			""
		],
		"is_youtube": false
	},
	"video_018": {
		"section": "CS50x 2021",
		"subsection": "Week 3",
		"unit": "Shorts",
		"video_sources": [
			"https://edx-video.net/HARCS50X2016-V031000_DTH.mp4",
			"https://edx-video.net/HARCS50X2016-V031000/HARCS50X2016-V031000.m3u8"
		],
		"video_duration": 829,
		"speech_period": [
			5.86, 3.67, 0.92, 1.214, 0.916, 0.58, 0.833, 1.377, 2.15, 3.03, 2.725,
			3.235, 2.24, 2.78, 2.56, 3.65, 2.07, 3.38, 6.101, 2.499, 1.96, 1.81, 2.17,
			2.68, 2.3, 3.6, 4.3, 1.95, 2.32, 3.322, 2.708, 4.43, 3.51, 2.2, 2.7, 1.13,
			4.97, 3.17, 1.78, 2.26, 4.78, 5.057, 2.333, 3.15, 2.63, 3.3, 1.859, 2.921,
			2.6, 2.78, 2.34, 3.13, 4.28, 2.91, 3.81, 3.58, 2.38, 3.18, 6.27, 2.18,
			2.13, 2.21, 3.04, 4.93, 4.05, 4.52, 2.03, 2.03, 3.52, 1.49, 2.82, 1.57,
			2.177, 1.333, 2.0, 2.38, 2.416, 1.814, 3.22, 3.8, 1.68, 2.92, 2.16, 2.45,
			1.6, 2.375, 3.005, 3.74, 2.94, 2.617, 2.833, 3.12, 2.84, 5.094, 2.166,
			2.92, 3.66, 1.18, 2.5, 2.75, 2.23, 2.458, 2.352, 3.01, 3.97, 2.08, 2.03,
			4.42, 1.88, 5.16, 1.74, 1.97, 1.16, 2.15, 2.45, 5.11, 2.59, 5.125, 3.335,
			2.38, 3.97, 0.94, 4.26, 4.38, 1.5, 4.15, 4.08, 3.05, 2.36, 2.79, 4.21,
			4.65, 2.66, 2.64, 4.551, 1.499, 4.0, 3.25, 2.29, 2.24, 5.34, 2.74, 2.027,
			2.083, 4.36, 2.36, 3.36, 2.86, 3.33, 3.89, 3.13, 1.797, 1.833, 3.07, 1.49,
			4.0, 2.227, 1.083, 2.87, 3.1, 2.61, 4.91, 3.55, 2.52, 2.82, 3.33, 3.73,
			0.89, 3.85, 3.1, 4.71, 5.38, 2.45, 3.34, 1.9, 3.98, 0.72, 2.95, 2.51,
			3.719, 4.191, 1.15, 2.34, 6.69, 4.41, 2.95, 3.27, 1.957, 0.833, 2.34,
			3.17, 3.71, 7.37, 1.25, 2.091, 2.249, 3.11, 3.54, 5.05, 3.54, 2.06, 2.68,
			3.56, 2.5, 2.51, 5.6, 2.53, 5.06, 2.292, 1.458, 1.42, 1.8, 3.5, 5.02, 5.2,
			5.17, 3.32, 5.2, 4.79, 4.23, 3.53, 6.01, 1.9, 3.09, 4.5, 1.75, 2.95,
			3.832, 1.958, 1.42, 2.95, 1.26, 1.29, 3.48, 1.435, 3.265, 1.63, 4.29,
			2.52, 2.65, 1.22, 3.12, 2.094, 2.416, 1.25, 1.5, 5.24, 2.18, 2.75, 5.827,
			3.083, 2.77, 3.3, 3.95, 2.54, 2.64, 4.46, 4.454, 1.916, 4.97, 1.42, 5.9,
			2.88, 5.02, 4.64, 2.15, 3.41, 3.14, 2.0, 2.01, 3.6, 2.54, 3.195, 2.375,
			3.03, 4.57, 1.05, 1.8, 1.448
		],
		"transcript_en": [
			">> [MUSIC PLAYING]",
			">> DOUG LLOYD: You probably think that code is just used to accomplish a task.",
			"You write it out.",
			"It does something.",
			"That's pretty much it.",
			">> You compile it.",
			"You run the program.",
			"You're good to go.",
			">> But believe it or not, if you code for a long time,",
			"you actually might come to see code as something that's beautiful.",
			"It solves a problem in a very interesting way,",
			"or there's just something really neat about the way it looks.",
			"You might be laughing at me, but it's true.",
			"And recursion is one way to sort of get this idea",
			"of beautiful, elegant-looking code.",
			"It solves problems in ways that are interesting, easy to visualize,",
			"and surprisingly short.",
			">> The way recursion works is, a recursive function",
			"is defined as a function that calls itself as part of its execution.",
			"That might seem a little strange, and we'll see a little bit",
			"about how this works in a moment.",
			"But again, these recursive procedures are",
			"going to be so elegant because they're going",
			"to solve this problem without having all these other functions",
			"or these long loops.",
			"You'll see that these recursive procedures are going to look so short.",
			"And they really are going to make your code look a lot more beautiful.",
			">> I'll give you an example of this to see how",
			"a recursive procedure might be defined.",
			"So if you're familiar with this from math class many years ago,",
			"there's something called the factorial function, which is usually",
			"denoted as an exclamation point, which is defined over all positive integers.",
			"And the way that n factorial is calculated",
			"is you multiply all of the numbers less than",
			"or equal to n together-- all the integers less than",
			"or equal to n together.",
			">> So 5 factorial is 5 times 4 times 3 times 2 times 1.",
			"And 4 factorial is 4 times 3 times 2 times 1 and so on.",
			"You get the idea.",
			">> As programmers, we don't use n, exclamation point.",
			"So we'll define the factorial function as fact of n.",
			"And we'll use factorial to create a recursive solution to a problem.",
			"And I think you might find that it's a lot more visually",
			"appealing than the iterative version of this, which",
			"we'll also take a look at in a moment.",
			">> So here are a couple of facts-- pun intended--",
			"about factorial-- the factorial function.",
			"The factorial of 1, as I said, is 1.",
			"The factorial of 2 is 2 times 1.",
			"The factorial of 3 is 3 times 2 times 1, and so on.",
			"We talked about 4 and 5 already.",
			">> But looking at this, isn't this true?",
			"Isn't factorial of 2 just 2 times the factorial of 1?",
			"I mean, the factorial of 1 is 1.",
			"So why can't we just say that, since factorial of 2 is 2 times 1,",
			"it's really just 2 times the factorial of 1?",
			">> And then extending that idea, isn't the factorial of 3",
			"just 3 times the factorial of 2?",
			"And the factorial of 4 is 4 times the factorial of 3, and so on?",
			"In fact, the factorial of any number can just",
			"be expressed if we kind of carry this out forever.",
			"We can kind of generalize the factorial problem",
			"as it's n times the factorial of n minus 1.",
			"It's n times the product of all the numbers less than me.",
			">> This idea, this generalization of the problem,",
			"allows us to recursively define the factorial function.",
			"When you define a function recursively, there's",
			"two things that need to be a part of it.",
			"You need to have something called a base case, which, when you trigger it,",
			"will stop the recursive process.",
			">> Otherwise, a function that calls itself-- as you might imagine--",
			"could go on forever.",
			"Function calls the function calls the function calls",
			"the function calls the function.",
			"If you don't have a way to stop it, your program",
			"will be effectively stuck at an infinite loop.",
			"It will crash eventually, because it'll run out of memory.",
			"But that's beside the point.",
			">> We need to have some other way to stop things besides our program crashing,",
			"because a program that crashes is probably not beautiful or elegant.",
			"And so we call this the base case.",
			"This is a simple solution to a problem which stops",
			"the recursive process from occurring.",
			"So that's one part of a recursive function.",
			">> The second part is the recursive case.",
			"And this is where the recursion will actually take place.",
			"This is where the function will call itself.",
			">> It won't call itself in exactly the same way it was called.",
			"It'll be a slight variation that makes the problem it's",
			"trying to solve a teeny bit smaller.",
			"But it generally passes the buck of solving the bulk of the solution",
			"to a different call down the line.",
			">> Which of these looks like the base case here?",
			"Which one of these looks like the simplest solution to a problem?",
			"We have a bunch of factorials, and we could continue",
			"going on-- 6, 7, 8, 9, 10, and so on.",
			">> But one of these looks like a good case to be the base case.",
			"It's a very simple solution.",
			"We don't have to do anything special.",
			">> The factorial of 1 is just 1.",
			"We don't have to do any multiplication at all.",
			"It seems like if we're going to try and solve this problem,",
			"and we need to stop the recursion somewhere,",
			"we probably want to stop it when we get to 1.",
			"We don't want to stop before that.",
			">> So if we're defining our factorial function,",
			"here's a skeleton for how we might do that.",
			"We need to plug in those two things-- the base case and the recursive case.",
			"What's the base case?",
			"If n is equal to 1, return 1-- that's a really simple problem to solve.",
			">> The factorial of 1 is 1.",
			"It's not 1 times anything.",
			"It's just 1.",
			"It's a very easy fact.",
			"And so that can be our base case.",
			"If we get passed 1 into this function, we'll just return 1.",
			">> What's the recursive case probably look like?",
			"For every other number besides 1, what's the pattern?",
			"Well, if we're taking the factorial of n,",
			"it's n times the factorial of n minus 1.",
			">> If we're taking the factorial of 3, it's 3 times the factorial of 3 minus 1,",
			"or 2.",
			"And so if we're not looking at 1, otherwise",
			"return n times the factorial of n minus 1.",
			"It's pretty straightforward.",
			">> And for the sake of having slightly cleaner and more elegant code,",
			"know that if we have single-line loops or single-line conditional branches,",
			"we can get rid of all of the curly braces around them.",
			"So we can consolidate this to this.",
			"This has exactly the same functionality as this.",
			">> I'm just taking away the curly braces, because there's only one line",
			"inside of those conditional branches.",
			"So these behave identically.",
			"If n is equal to 1, return 1.",
			"Otherwise return n times the factorial of n minus 1.",
			"So we're making the problem smaller.",
			"If n starts out as 5, we're going to return 5 times the factorial of 4.",
			"And we'll see in a minute when we talk about the call stack-- in another video",
			"where we talk about the call stack-- we'll learn",
			"about why exactly this process works.",
			">> But while factorial of 5 says return 5 times factorial of 4, and 4",
			"is going to say, OK, well, return 4 times the factorial of 3.",
			"And as you can see, we're sort of approaching 1.",
			"We're getting closer and closer to that base case.",
			">> And once we hit the base case, all of the previous functions",
			"have the answer they were looking for.",
			"Factorial of 2 was saying return 2 times the factorial of 1.",
			"Well, factorial of 1 returns 1.",
			"So the call for factorial of 2 can return 2 times 1,",
			"and give that back to factorial of 3, which is waiting for that result.",
			">> And then it can calculate its result, 3 times 2 is 6,",
			"and give it back to factorial of 4.",
			"And again, we have a video on the call stack",
			"where this is illustrated a little more than what I'm saying right now.",
			"But this is it.",
			"This alone is the solution to calculating the factorial of a number.",
			">> It's only four lines of code.",
			"That's pretty cool, right?",
			"It's kind of sexy.",
			">> So in general, but not always, a recursive function",
			"can replace a loop in a non-recursive function.",
			"So here, side by side, is the iterative version of the factorial function.",
			"Both of these calculate exactly the same thing.",
			">> They both calculate the factorial of n.",
			"The version on the left uses recursion to do it.",
			"The version on the right uses iteration to do it.",
			">> And notice, we have to declare a variable an integer product.",
			"And then we loop.",
			"So long as n is greater than 0, we keep multiplying that product by n",
			"and decrementing n until we calculate the product.",
			"So these two functions, again, do exactly the same thing.",
			"But they don't do it in exactly the same way.",
			">> Now, it is possible to have more than one base",
			"case or more than one recursive case, depending",
			"on what your function is trying to do.",
			"You aren't necessarily just limited to a single base case or a single recursive",
			"case.",
			"So an example of something with multiple base cases",
			"might be this-- the Fibonacci number sequence.",
			">> You may recall from elementary school days",
			"that the Fibonacci sequence is defined like this-- the first element is 0.",
			"The second element is 1.",
			"Both of those are just by definition.",
			">> Then every other element is defined as the sum of n minus 1 and n minus 2.",
			"So the third element would be 0 plus 1 is 1.",
			"And then the fourth element would be the second element, 1,",
			"plus the third element, 1.",
			"And that would be 2.",
			"And so on and so on.",
			">> So in this case, we have two base cases.",
			"If n is equal to 1, return 0.",
			"If n is equal to 2, return 1.",
			"Otherwise, return Fibonacci of n minus 1 plus Fibonacci of n minus 2.",
			">> So that's multiple base cases.",
			"What about multiple recursive cases?",
			"Well, there's something called the Collatz conjecture.",
			"I'm not going to say, you know what that is,",
			"because it's actually our final problem for this particular video.",
			"And it's our exercise to work on together.",
			">> So here's what the Collatz conjecture is--",
			"it applies to every positive integer.",
			"And it speculates that it's always possible to get back",
			"to 1 if you follow these steps.",
			"If n is 1, stop.",
			"We've got back to 1 if n is 1.",
			">> Otherwise, go through this process again on n divided by 2.",
			"And see if you can get back to 1.",
			"Otherwise, if n is odd, go through this process again on 3n plus 1,",
			"or 3 times n plus 1.",
			"So here we have a single base case.",
			"If n is equal to 1, stop.",
			"We're not doing any more recursion.",
			">> But we have two recursive cases.",
			"If n is even, we do one recursive case, calling n divided by 2.",
			"If n is odd, we do a different recursive case on 3 times n plus 1.",
			">> And so the goal for this video is to take a second, pause the video,",
			"and try and write this recursive function Collatz",
			"where you pass in a value n, and it calculates how many steps it",
			"takes to get to 1 if you start from n and you follow those steps up above.",
			"If n is 1, it takes 0 steps.",
			"Otherwise, it's going to take one step plus however",
			"many steps it takes on either n divided by 2 if n is even, or 3n plus 1",
			"if n is odd.",
			">> Now, I've put up on the screen here a couple of test things for you,",
			"a couple of tests cases for you, to see what these various Collatz numbers are,",
			"and also an illustration of the steps that",
			"need to be gone through so you can sort of see this process in action.",
			"So if n is equal to 1, Collatz of n is 0.",
			"You don't have to do anything to get back to 1.",
			"You're already there.",
			">> If n is 2, it takes one step to get to 1.",
			"You start with 2.",
			"Well, 2 is not equal to 1.",
			"So it's going to be one step plus however many steps it",
			"takes on n divided by 2.",
			"",
			">> 2 divided by 2 is 1.",
			"So it takes one step plus however many steps it takes for 1.",
			"1 takes zero steps.",
			">> For 3, as you can see, there's quite a few steps involved.",
			"You go from 3.",
			"And then you go to 10, 5, 16, 8, 4, 2, 1.",
			"It takes seven steps to get back to 1.",
			"And as you can see, there's a couple other test cases here",
			"to test out your program.",
			"So again, pause the video.",
			"And I'll go jump back now to what the actual process is here,",
			"what this conjecture is.",
			">> See if you can figure out how to define Collatz of n",
			"so that it calculates how many steps it takes to get to 1.",
			"So hopefully, you have paused the video and you aren't just waiting for me",
			"to give you the answer here.",
			"But if you are, well, here's the answer anyway.",
			">> So here's a possible definition of the Collatz function.",
			"Our base case-- if n is equal to 1, we return 0.",
			"It doesn't take any steps to get back to 1.",
			">> Otherwise, we have two recursive cases-- one for even numbers and one for odd.",
			"The way I test for even numbers is to check if n mod 2 equals 0.",
			"This is basically, again, asking the question,",
			"if you recall what mod is-- if I divide n by 2 is there no remainder?",
			"That would be an even number.",
			">> And so if n mod 2 equals 0 is testing is this an even number.",
			"If so, I want to return 1, because this is definitely",
			"taking one step plus Collatz of whatever number is half of me.",
			"Otherwise, I want to return 1 plus Collatz of 3 times n plus 1.",
			"That was the other recursive step that we",
			"could take to calculate the Collatz-- the number of steps",
			"it takes to get back to 1 given a number.",
			"So hopefully, this example gave you a little bit",
			"of a taste of recursive procedures.",
			"Hopefully, you think code is a little more beautiful if implemented",
			"in an elegant, recursive way.",
			"But even if not, recursion is a really powerful tool nonetheless.",
			"And so it's definitely something to get your head around,",
			"because you'll be able to create pretty cool programs using recursion",
			"that might otherwise be complex to write if you're using loops and iteration.",
			"I'm Doug Lloyd.",
			"This is CS50.",
			""
		],
		"is_youtube": false
	},
	"video_019": {
		"section": "CS50x 2021",
		"subsection": "Week 3",
		"unit": "Shorts",
		"video_sources": [
			"https://edx-video.net/HARCS50X2016-V043800_DTH.mp4",
			"https://edx-video.net/HARCS50X2016-V043800/HARCS50X2016-V043800.m3u8"
		],
		"video_duration": 627,
		"speech_period": [
			3.227, 1.338, 1.875, 3.005, 2.125, 2.729, 2.041, 5.22, 1.87, 2.15, 3.0,
			3.66, 3.49, 3.24, 3.88, 3.179, 2.291, 1.56, 1.407, 1.333, 3.56, 2.71,
			3.029, 1.791, 2.76, 3.33, 2.284, 2.666, 1.8, 1.17, 4.472, 1.708, 4.85,
			1.68, 3.447, 2.583, 1.249, 4.781, 3.01, 4.14, 2.3, 1.35, 2.469, 1.791,
			4.56, 3.78, 1.23, 2.85, 2.23, 2.4, 2.86, 1.72, 1.249, 1.881, 2.926, 2.374,
			1.26, 1.14, 1.13, 1.81, 3.01, 4.17, 3.71, 2.52, 2.91, 3.63, 3.48, 1.09,
			3.3, 4.1, 2.28, 3.6, 1.74, 2.19, 1.14, 0.96, 1.75, 3.95, 2.79, 1.21, 1.1,
			3.45, 1.971, 0.999, 1.041, 1.869, 2.94, 2.38, 4.52, 5.1, 2.14, 2.48, 3.42,
			3.93, 0.93, 2.22, 2.49, 2.37, 3.0, 2.67, 3.45, 3.21, 2.522, 1.708, 2.05,
			3.334, 2.416, 2.28, 3.42, 4.5, 2.52, 3.33, 3.03, 2.657, 1.333, 2.85, 2.52,
			1.5, 3.18, 0.93, 4.32, 3.42, 3.3, 2.73, 3.12, 5.16, 2.52, 3.93, 2.22,
			2.34, 3.27, 2.77, 2.041, 1.999, 2.23, 3.38, 2.659, 1.041, 1.679, 0.541,
			2.147, 1.833, 1.499, 2.671, 3.24, 3.642, 0.708, 1.33, 2.541, 1.929, 1.97,
			0.51, 1.26, 2.31, 0.75, 1.142, 1.708, 2.49, 1.14, 2.311, 2.249, 2.597,
			2.083, 2.67, 4.44, 3.39, 4.0, 2.25, 2.14, 2.51, 1.65, 2.539, 1.791, 2.0,
			2.43, 2.833, 3.287, 2.32, 3.08, 3.31, 3.41, 3.84, 3.39, 4.5, 4.68, 2.947,
			3.083, 0.9, 2.6, 1.36, 3.9, 1.62, 2.98, 1.45, 1.3, 1.22, 1.32, 1.77, 1.78,
			0.961, 1.999, 3.06, 3.45, 1.44, 2.27, 2.74, 3.03, 3.03, 2.04, 2.85, 3.99,
			4.717, 0.833, 3.124, 2.115, 1.541, 2.31, 3.954, 2.166, 2.64, 3.09, 2.91,
			3.48, 3.93, 1.53, 2.14, 3.8, 6.12, 0.87, 3.125, 2.185, 2.7, 2.499, 3.891,
			3.55, 3.11, 2.28, 3.03, 3.64, 3.44, 2.96, 1.09, 2.11, 1.63
		],
		"transcript_en": [
			"[MUSIC PLAYING]",
			"",
			"DOUG LLOYD: All right, so by now we've talked",
			"about a couple of different sorting algorithms that",
			"are pretty straightforward to work with, hopefully.",
			"We've got bubble sort, insertion sort, and selection sort.",
			"And what we do know is what all of have in common",
			"is that they have a sort of worst case scenario runtime of n squared.",
			"Can we do any better than that?",
			"Well, the answer happens to be yes, we can,",
			"using an algorithm called merge sort.",
			"Now in merge sort, the idea is to sort smaller arrays",
			"and then combine those arrays together or merge them,",
			"as in the name of the algorithm itself, in sorted order.",
			"So instead of having to think about, we have one six-element array,",
			"let's think instead that we have six one-element arrays,",
			"and then let's just recombine them in the correct order",
			"and merge them together.",
			"That would be one way to sort it.",
			"And that's what merge sort does.",
			"And it leverages something called recursion, which",
			"we'll talk about soon in another video.",
			"And if you want to get a better understanding of how recursion works,",
			"you might want to take a look at that video",
			"before coming and watching this one, because this is going",
			"to talk about recursion quite a bit.",
			"Merge sort is definitely the most complicated",
			"of the four different types of sorts that we cover in the class.",
			"And so I'm going to go through this one a little more slowly",
			"than the other ones.",
			"But the algorithm for merge sort itself is actually pretty few steps.",
			"We're basically going to say, we're going",
			"to sort the left half of the array, sort the right half of the array,",
			"and then merge the two halves together.",
			"That is fundamentally what merge sort is all about.",
			"Of course, in practice, it's a little more detailed than that,",
			"but let's go through that now.",
			"So here's the same six-element array we've been sorting all the time.",
			"And we're going to start to follow our steps of pseudocode,",
			"which is we want to sort the left half of this brick red array.",
			"So we're just going to focus on this part for now.",
			"And actually, just to make things a little bit easier,",
			"and because I've colored different things in different ways",
			"throughout this video, we're going to refer",
			"to this half of the array, this left half of the overall red array,",
			"from this point forward, this is the purple half of the array.",
			"All right?",
			"So we are now in the middle of sorting the left half of the array.",
			"But we don't know how to do that.",
			"We don't know how to sort the left half of the array.",
			"So why don't we just go back to our merge sort steps again?",
			"All right, well, if I don't know how to sort the left half of the array,",
			"I'm just going to start again.",
			"Sort the left half of this array.",
			"Now I just want to focus on this part of the array, the left half.",
			"And I'm sort of arbitrarily deciding that my left half is",
			"going to be smaller than my right half.",
			"I have three elements.",
			"I can't divide it evenly.",
			"I can't have one and 1/2 elements on each side.",
			"So as long as I'm consistent, as long as I always choose, in this case,",
			"the left side is smaller, that will be fine for merge sort's purposes.",
			"So now I'm left with this single element, this five.",
			"How do I sort a one-element array?",
			"Well, the good news here is I actually don't have to sort it at all.",
			"A single-element array must necessarily be sorted.",
			"So I can say that if I'm sorting the left half of the purple part,",
			"that is sorted.",
			"So we're just going to call that sorted and set it aside for now.",
			"So now I want to go back to the right half of the purple part.",
			"That's this.",
			"How do I sort this array, this sub-array?",
			"Let's just go back to our steps again.",
			"I want to sort the left half only.",
			"The left half is now two.",
			"It's a single element.",
			"I know how to sort a single element.",
			"So I've sorted the left half of this, the left half",
			"of the right half of the purple.",
			"That's where we are.",
			"That's sorted.",
			"Now I go back and sort the right half of the left half",
			"of the purple, which is the one.",
			"One is a single element.",
			"It's really easy to sort.",
			"It's in sorted position.",
			"Now is the first time I finally get to this third step of merge sort,",
			"where I merge the two halves together.",
			"So here, what I have to do is consider these two light green halves.",
			"And I have to decide which one has the lower element.",
			"In this case, it's one.",
			"So what I do is I take the one and I put it",
			"in the first position of some new hypothetical array.",
			"Then I compare the two against nothing, and I ask which one is lower.",
			"Well, two or nothing.",
			"What's lower is two.",
			"So now let's reframe the picture, because if we remember",
			"talking about recursion, we're only focusing",
			"on the left half of the overall brick red array,",
			"which we then called the purple array.",
			"By this point in our steps, with respect to the purple array,",
			"we have sorted the left half, which is five,",
			"and the right half, which was originally two and one,",
			"but now we have done these merging steps,",
			"and we've got that in the correct order.",
			"So now we are on step three for the entire purple array,",
			"because we've already sort of the purple array's left half",
			"and the purple array's right half.",
			"So now we need to merge these two halves together.",
			"And just like we did a second ago with the two and the one,",
			"we're going to compare the first element of the left part",
			"and the first element of the right part and figure out which one is smaller,",
			"and make that the first element of our new array.",
			"So I compare five and one.",
			"And I say, which one is smaller?",
			"Well, it's one, so one becomes the first element",
			"of this new three-element array.",
			"Now I have to make another decision.",
			"Is five lower, or is two lower?",
			"Well, two is lower.",
			"So two becomes the next element of our merging step.",
			"Then I say, is five lower or is nothing lower?",
			"Well, clearly, in this case, the only option I have left is five.",
			"And so now, at this point in the process,",
			"let's again think recursively about where we are.",
			"We have sorted, for the entire red array, we have just done step one.",
			"We have sorted the left portion.",
			"We've done so recursively, but we have sorted the left portion",
			"of the overall red array.",
			"So we can kind of put this aside for now,",
			"because now we have to go to the next step of the merge sort process, which",
			"is to sort the right half of that red array.",
			"So let's go over and focus on the right half.",
			"We're going to go through exactly the same steps",
			"that we just went through with the left part.",
			"But now we're going to do it with this red part on the right.",
			"So I want to sort the left half of this array.",
			"Well, that's pretty easy.",
			"I just arbitrarily again divide it.",
			"I look at it.",
			"I say, OK, well, three is a single element.",
			"Single element is already sorted, so I don't",
			"have to do anything, which is great.",
			"I can just set that one aside and say, three is already sorted.",
			"Now I want to sort the right half of the not so brick red,",
			"but is still red, half of the array, which is this section.",
			"How do I do this?",
			"Well, it's more than one element.",
			"So I'm going to go back to the beginning of my process again.",
			"I'm going to sort the left half of that array.",
			"So I look, and I say, here's the left half.",
			"It's six.",
			"It's already sorted.",
			"Now I'm going to sort the right half of the array.",
			"It's four.",
			"It's already sorted.",
			"Now I get to that merge step again, where",
			"I have to again do these sort of side-by-side comparisons.",
			"Which one is lower?",
			"Is six lower, or is four lower?",
			"Well, four is lower, so that becomes the first element",
			"of our new merged little sub-array here.",
			"And then I have to choose between six and nothing.",
			"And I say, six is the lowest remaining.",
			"So now I've sorted the left half of the right half.",
			"And I've sorted the right half of the right half.",
			"So now I want to merge those two portions together.",
			"And again, we're going to do exactly the same process",
			"that we did for the left portion.",
			"I'm going to say, is three lower, or is four?",
			"Well, it's three.",
			"And then I'm going to say, is four lower, or is nothing?",
			"There's nothing left on the left side, then",
			"I must know that everything on the right has",
			"to be bigger than everything that's in the merged array right now.",
			"So instead of saying, OK, I'll put four in and then I'll put six in,",
			"because the only thing left is on one side, everything must go.",
			"So that all comes down.",
			"And let's again take a second and think about where we are.",
			"At this point, for the original brick red array that we started with,",
			"we have gone through two of our pseudocode steps.",
			"We've sort of the left half of that overall brick red array.",
			"And we've sorted the right half of that overall brick red array.",
			"And so now the final thing we have to do is merge those two halves together.",
			"And just like before, we continue to ask ourselves the same question again.",
			"Which is lower, one or three?",
			"Notice the little black line there dividing the two halves to make it more",
			"visually clear.",
			"Which is lower, one or three?",
			"Well, one is.",
			"Now again I ask myself the question, which is lower, two or three?",
			"That would be two.",
			"Which is a lower, five or three?",
			"That's three.",
			"Five or four?",
			"It's four.",
			"Five or six.",
			"It's five.",
			"Six or nothing?",
			"It's six.",
			"And so by going through this process recursively",
			"and breaking my problem down into smaller and smaller sub-arrays,",
			"sorting those, merging them together, after a number of steps,",
			"I have now completed my sort.",
			"And I have everything in order here in dark blue.",
			"One, two, three, four, five, six.",
			"It's not necessarily as straightforward as something",
			"like bubble sort, insertion sort, or selection sort.",
			"But are there some advantages here?",
			"Well, the answer is, yes, there are.",
			"In the worst case scenario, we have to split up n elements.",
			"And then we have to recombine them, effectively doubling the sorted arrays",
			"as we build them up.",
			"So we take two one-element arrays, and we turn it into a two-element array.",
			"We take two two-element arrays.",
			"We make it into a four-element array.",
			"And so on and so on and so on as we go.",
			"In the best case scenario, sort of like selection sort,",
			"the array is already sorted, but we don't know this.",
			"We don't know this until we split it and recombine it back with this algorithm.",
			"There's no sort of shortcut here other than doing a search beforehand.",
			"But that's going to add extra time as well.",
			"So the result here is that we have n elements--",
			"and we might have to combine them if we're doubling-- log n times.",
			"Mathematically, that's how it works.",
			"And so actually, unlike the other algorithms",
			"we've covered, in the worst case scenario, the runtime of merge sort",
			"is O of n log n, which in general is going to be less than or faster than n",
			"squared.",
			"In the best case scenario, because we still have to go through this process",
			"again, it is still n log n.",
			"So in the best case scenario, it can be slower than, say,",
			"bubble sort, where the array happens to be perfectly sorted.",
			"As you may recall the omega there is n, and not n log n.",
			"But in the worst case or maybe even in an average case,",
			"merge sort is actually going to be faster, at the expense of maybe taking",
			"up more memory because we have to recombine and create",
			"new segments in memory for our sub-arrays.",
			"So merge sort is a really powerful tool to have in your toolbox",
			"once you understand recursion, because it can make the speed of sorting",
			"an array that much faster.",
			"My name is Doug Lloyd.",
			"This is CS50.",
			""
		],
		"is_youtube": false
	},
	"video_020": {
		"section": "CS50x 2021",
		"subsection": "Week 4",
		"unit": "Lecture",
		"video_sources": [
			"https://edx-video.net/2e0432ed-d0ab-43a7-a7a1-2b4e0f59320f.m3u8",
			"https://edx-video.net/2e0432ed-d0ab-43a7-a7a1-2b4e0f59320f-mp4_720p.mp4"
		],
		"video_duration": 9683,
		"speech_period": [
			4.482, 44.888, 3.9, 1.92, 3.027, 2.833, 4.53, 1.07, 2.083, 3.347, 3.21,
			2.61, 3.39, 3.69, 2.43, 3.43, 2.9, 2.58, 3.39, 2.64, 3.57, 0.9, 2.35,
			3.17, 2.74, 1.34, 3.0, 5.13, 1.06, 2.63, 2.37, 2.46, 2.76, 3.18, 2.01,
			2.19, 3.91, 2.24, 4.62, 3.37, 3.62, 2.29, 4.01, 1.71, 2.15, 1.75, 4.56,
			5.19, 6.0, 3.67, 2.18, 4.17, 2.5, 2.39, 2.15, 3.67, 1.5, 2.46, 2.13, 2.11,
			3.53, 4.02, 4.26, 1.23, 4.08, 2.4, 4.09, 1.19, 1.23, 1.5, 1.5, 2.98, 1.71,
			2.27, 7.74, 1.62, 3.75, 5.22, 1.08, 5.97, 1.74, 2.91, 2.97, 3.27, 5.52,
			2.01, 2.325, 2.205, 1.8, 3.37, 2.93, 2.627, 2.083, 2.25, 2.37, 2.985,
			1.875, 2.82, 2.54, 1.0, 6.297, 1.333, 5.9, 5.15, 1.25, 2.54, 2.73, 4.41,
			2.34, 2.13, 7.84, 2.828, 2.292, 2.43, 2.34, 3.18, 3.21, 4.02, 4.23, 5.04,
			3.72, 2.82, 3.03, 4.68, 4.32, 4.57, 1.16, 2.92, 2.52, 2.9, 3.0, 2.2, 1.86,
			2.36, 3.48, 5.85, 1.14, 1.17, 1.14, 0.96, 3.24, 3.21, 1.52, 3.37, 2.43,
			6.27, 0.673, 1.667, 4.14, 5.922, 2.208, 3.51, 5.1, 2.16, 2.61, 3.45,
			2.879, 3.24, 2.88, 2.191, 1.45, 1.917, 2.993, 3.6, 2.74, 2.75, 3.25, 3.11,
			2.67, 2.5, 2.15, 2.37, 3.64, 0.69, 7.115, 2.625, 3.45, 3.96, 5.34, 4.08,
			3.91, 2.0, 2.4, 2.28, 1.45, 5.81, 4.53, 4.36, 4.61, 3.47, 1.75, 2.35,
			2.75, 4.41, 3.93, 2.65, 2.33, 2.73, 2.4, 3.69, 7.05, 5.1, 1.94, 2.88,
			1.02, 4.44, 4.35, 6.0, 3.21, 3.63, 3.57, 1.59, 1.5, 2.167, 2.763, 1.792,
			3.058, 2.07, 2.34, 4.35, 3.24, 3.21, 3.33, 2.88, 2.28, 2.43, 2.025, 4.905,
			1.41, 2.7, 1.86, 2.333, 2.257, 1.55, 3.64, 2.31, 2.07, 2.29, 2.96, 3.3,
			3.37, 3.14, 3.99, 2.13, 4.44, 4.26, 1.54, 3.26, 3.31, 3.95, 2.77, 2.87,
			3.09, 4.32, 1.59, 5.88, 1.14, 2.14, 3.17, 4.68, 1.21, 5.96, 5.04, 1.27,
			2.06, 2.4, 4.03, 3.32, 2.88, 1.875, 4.005, 4.47, 3.24, 1.77, 4.29, 2.22,
			2.52, 4.74, 4.2, 1.59, 4.2, 5.76, 3.93, 3.66, 2.7, 2.43, 4.6, 3.59, 3.81,
			2.88, 1.86, 1.35, 1.84, 2.61, 5.22, 5.91, 1.89, 1.3, 4.52, 3.15, 2.67,
			2.865, 1.875, 3.28, 1.82, 1.8, 3.06, 4.41, 8.49, 1.05, 1.71, 3.66, 2.37,
			1.17, 1.923, 2.667, 1.0, 1.76, 3.0, 4.03, 3.78, 2.6, 1.5, 2.759, 2.071,
			5.85, 5.16, 3.0, 4.179, 4.011, 2.76, 2.44, 4.19, 4.08, 1.45, 2.36, 3.42,
			2.04, 1.785, 3.165, 2.28, 2.503, 3.167, 3.36, 3.51, 2.04, 2.76, 5.57,
			1.55, 3.98, 3.66, 3.21, 5.61, 1.62, 4.11, 2.243, 1.417, 1.98, 2.22, 4.59,
			4.44, 3.99, 3.0, 3.36, 1.39, 2.51, 1.23, 1.38, 6.51, 5.53, 2.06, 2.19,
			1.89, 4.35, 1.95, 4.2, 4.83, 4.32, 2.79, 2.97, 1.8, 1.5, 3.42, 4.41, 3.66,
			5.01, 1.35, 4.44, 4.77, 2.1, 2.59, 4.79, 5.29, 4.59, 2.49, 3.87, 3.09,
			4.56, 2.25, 2.34, 3.75, 2.67, 2.19, 4.15, 1.91, 3.81, 3.375, 1.875, 6.27,
			2.332, 1.958, 1.89, 3.84, 1.95, 9.27, 3.03, 6.62, 3.76, 3.57, 1.782,
			2.458, 3.6, 2.67, 2.24, 1.805, 1.375, 0.93, 4.2, 1.17, 1.48, 3.86, 1.74,
			1.71, 1.71, 1.71, 1.89, 1.98, 2.57, 1.9, 4.18, 0.75, 1.81, 2.99, 2.34,
			2.46, 1.95, 4.41, 1.96, 2.06, 2.85, 2.61, 3.06, 3.03, 2.34, 2.95, 2.15,
			5.53, 3.98, 3.24, 2.79, 3.24, 2.67, 2.82, 1.47, 2.16, 2.035, 2.375, 1.555,
			2.625, 3.95, 3.0, 4.11, 2.01, 2.85, 3.36, 2.28, 1.89, 3.72, 1.44, 2.88,
			2.67, 3.0, 4.47, 1.0, 4.76, 3.03, 2.25, 4.77, 3.03, 3.69, 4.05, 4.36,
			6.86, 4.62, 3.54, 3.57, 2.46, 1.208, 2.182, 4.39, 1.67, 1.62, 4.44, 3.045,
			1.125, 0.542, 3.658, 4.5, 3.52, 1.25, 3.27, 4.94, 2.59, 3.63, 2.46, 3.6,
			3.45, 3.09, 1.53, 0.87, 2.5, 4.52, 3.0, 1.27, 1.43, 1.78, 2.87, 4.11,
			1.62, 2.82, 4.05, 2.55, 5.56, 3.38, 3.078, 3.042, 4.29, 0.69, 3.7, 2.87,
			3.15, 3.33, 3.41, 4.64, 4.21, 3.56, 2.94, 2.43, 1.57, 0.77, 1.38, 3.45,
			2.25, 1.75, 1.833, 4.037, 2.85, 3.34, 4.43, 3.87, 2.76, 2.11, 3.11, 2.187,
			1.083, 1.59, 1.25, 2.83, 2.97, 3.18, 2.55, 3.33, 2.49, 5.75, 3.97, 2.688,
			1.292, 3.09, 3.24, 2.49, 1.92, 4.89, 2.43, 2.13, 3.42, 0.658, 2.042, 3.24,
			3.06, 1.32, 4.32, 4.93, 2.06, 4.0, 2.21, 4.095, 1.845, 1.762, 2.708,
			2.375, 4.405, 2.44, 5.06, 5.2, 2.06, 2.25, 3.84, 4.09, 2.63, 3.517, 1.583,
			2.89, 5.33, 0.73, 3.68, 6.84, 2.67, 1.41, 3.31, 2.27, 3.78, 2.61, 2.82,
			3.12, 2.67, 3.39, 2.31, 0.87, 4.24, 5.93, 3.72, 2.79, 3.45, 2.46, 3.48,
			5.517, 1.833, 1.68, 3.9, 1.23, 5.17, 2.84, 3.16, 6.44, 2.91, 2.76, 2.61,
			4.53, 6.06, 2.298, 3.762, 2.01, 4.92, 2.4, 3.75, 5.335, 0.875, 3.03, 0.99,
			2.022, 2.208, 4.26, 4.02, 2.25, 1.98, 2.189, 2.821, 3.389, 1.781, 2.449,
			2.52, 5.29, 3.02, 3.0, 2.581, 3.359, 4.651, 3.12, 1.86, 2.7, 1.898, 1.792,
			4.092, 1.458, 2.468, 1.792, 2.97, 1.05, 2.67, 1.62, 3.36, 2.22, 4.44,
			1.14, 2.67, 2.88, 2.37, 3.54, 3.27, 3.12, 3.12, 2.82, 1.63, 5.39, 2.13,
			1.35, 1.17, 4.14, 3.46, 3.77, 1.5, 2.79, 3.91, 2.17, 2.63, 1.48, 1.4,
			1.292, 2.518, 2.55, 3.99, 2.49, 1.92, 2.1, 4.15, 3.44, 4.645, 1.625, 1.56,
			3.21, 3.42, 7.11, 4.23, 2.22, 5.61, 2.37, 4.77, 3.27, 1.74, 1.51, 1.38,
			2.54, 2.28, 3.09, 1.35, 2.46, 6.12, 1.98, 4.84, 2.66, 1.95, 2.88, 3.03,
			4.32, 1.98, 5.07, 3.33, 2.05, 3.14, 2.37, 2.85, 2.61, 4.602, 2.208, 1.62,
			3.27, 2.88, 2.34, 2.22, 4.11, 3.09, 2.91, 7.74, 1.5, 0.81, 3.203, 2.917,
			1.86, 1.89, 1.86, 2.34, 3.96, 3.61, 3.65, 2.22, 4.95, 3.03, 4.17, 3.42,
			3.09, 4.89, 2.76, 2.537, 2.083, 4.53, 4.8, 3.3, 3.14, 2.18, 5.0, 3.42,
			4.44, 4.445, 2.125, 5.34, 2.56, 1.88, 6.33, 5.99, 1.9, 4.1, 3.66, 2.37,
			3.0, 3.24, 3.21, 4.26, 2.76, 3.12, 3.24, 4.65, 3.51, 4.148, 2.542, 2.37,
			5.215, 2.375, 1.167, 1.083, 4.35, 3.27, 2.46, 2.37, 2.76, 4.32, 3.57,
			2.43, 3.33, 3.69, 1.93, 3.83, 3.79, 2.9, 4.65, 1.27, 4.07, 2.91, 4.77,
			3.93, 2.37, 1.92, 3.21, 4.65, 4.17, 2.91, 2.52, 2.31, 5.6, 4.03, 1.75,
			2.375, 2.275, 2.25, 1.44, 4.2, 2.46, 1.71, 4.68, 1.62, 4.327, 2.333, 2.13,
			1.44, 3.84, 1.62, 1.71, 3.027, 1.833, 2.98, 3.65, 4.44, 4.32, 2.47, 2.9,
			2.25, 2.23, 4.04, 4.6, 2.03, 2.37, 3.93, 3.04, 1.91, 2.22, 3.36, 2.92,
			3.68, 3.09, 1.17, 2.13, 3.81, 2.77, 3.36, 4.88, 1.44, 2.37, 2.55, 2.85,
			4.98, 2.61, 5.1, 4.41, 3.72, 2.32, 4.34, 2.25, 2.1, 6.06, 2.19, 1.917,
			2.443, 2.54, 2.98, 3.74, 1.6, 5.24, 3.69, 1.56, 3.51, 4.62, 3.51, 2.32,
			4.88, 1.77, 5.22, 5.34, 3.64, 1.71, 3.41, 3.39, 5.43, 0.96, 3.215, 2.125,
			2.7, 2.7, 3.09, 3.27, 2.67, 3.72, 5.52, 2.34, 3.18, 2.16, 1.93, 6.02,
			2.76, 4.22, 2.5, 2.443, 3.167, 1.833, 4.527, 3.36, 2.94, 1.485, 1.125,
			2.46, 1.65, 1.95, 2.25, 3.79, 1.25, 3.15, 2.5, 2.21, 2.07, 1.74, 2.25,
			3.6, 4.86, 1.17, 2.4, 3.45, 5.16, 5.19, 2.22, 2.46, 2.01, 2.16, 1.65,
			3.72, 1.02, 4.02, 1.41, 2.167, 2.933, 1.89, 2.57, 1.0, 3.75, 2.67, 3.25,
			2.22, 2.11, 2.47, 3.66, 3.45, 2.01, 1.77, 1.5, 3.4, 2.36, 2.95, 3.26,
			2.52, 2.13, 5.1, 2.01, 2.45, 2.77, 2.94, 2.43, 2.34, 1.17, 2.76, 2.46,
			2.43, 1.93, 3.395, 4.125, 2.98, 4.16, 2.37, 4.69, 1.94, 1.02, 3.36, 1.32,
			2.77, 2.87, 1.59, 4.77, 3.21, 2.148, 2.292, 5.02, 2.0, 2.28, 3.93, 1.59,
			1.63, 3.41, 4.17, 3.69, 3.24, 1.59, 4.53, 4.41, 1.8, 1.65, 2.28, 3.51,
			4.23, 1.89, 1.88, 0.57, 1.66, 1.91, 0.99, 1.23, 3.23, 2.97, 2.61, 4.402,
			1.708, 2.46, 1.62, 3.007, 1.583, 2.79, 2.7, 2.247, 1.833, 2.46, 4.02,
			1.74, 3.81, 0.57, 2.1, 2.82, 4.56, 1.74, 4.48, 0.5, 1.98, 2.4, 3.06, 2.31,
			2.25, 3.81, 4.47, 1.08, 4.41, 3.72, 5.277, 1.833, 1.56, 3.0, 1.75, 3.44,
			3.54, 2.55, 2.73, 3.31, 2.5, 3.7, 0.63, 1.17, 1.25, 3.19, 3.43, 1.64,
			3.78, 1.62, 1.72, 2.333, 1.077, 2.88, 2.22, 3.09, 4.77, 6.15, 1.71, 2.97,
			4.33, 1.71, 4.52, 4.83, 1.71, 2.31, 2.76, 3.6, 6.33, 3.66, 2.64, 4.95,
			3.51, 1.38, 3.03, 3.48, 1.11, 9.66, 3.713, 2.917, 1.875, 2.205, 2.85,
			2.47, 3.11, 1.77, 4.42, 3.05, 3.9, 8.1, 1.59, 6.51, 2.13, 2.55, 3.6, 2.19,
			2.52, 0.882, 1.458, 3.51, 3.475, 1.625, 2.46, 3.533, 2.167, 4.17, 2.88,
			2.37, 2.55, 2.16, 3.81, 5.49, 3.42, 2.85, 0.958, 0.992, 2.61, 5.04, 3.39,
			2.17, 2.84, 2.16, 2.62, 0.83, 2.04, 1.14, 1.71, 2.64, 4.23, 3.24, 5.37,
			0.753, 1.917, 2.07, 4.43, 1.25, 2.39, 2.07, 3.9, 1.59, 3.84, 5.82, 2.55,
			2.79, 1.75, 1.49, 2.35, 2.932, 1.708, 1.042, 2.168, 1.17, 3.39, 2.1, 1.8,
			3.84, 2.07, 4.09, 1.58, 5.01, 1.5, 2.16, 4.23, 1.95, 3.12, 3.75, 2.76,
			2.53, 4.22, 6.49, 2.69, 3.81, 3.78, 3.06, 2.31, 1.5, 3.15, 2.22, 3.51,
			0.9, 2.91, 6.93, 6.32, 7.74, 1.44, 3.475, 3.125, 0.5, 4.96, 3.22, 4.34,
			2.16, 1.35, 1.65, 3.78, 1.0, 5.36, 2.95, 4.0, 2.5, 1.458, 1.482, 1.72,
			2.96, 5.07, 3.03, 3.39, 5.22, 2.01, 2.7, 2.1, 2.25, 4.05, 1.68, 2.547,
			1.833, 2.79, 2.19, 3.18, 2.46, 1.45, 4.19, 2.58, 3.27, 2.37, 5.46, 3.15,
			1.77, 5.31, 1.05, 3.99, 4.41, 6.27, 2.59, 1.85, 2.97, 2.518, 1.292, 2.88,
			1.68, 1.86, 1.922, 3.208, 2.76, 3.24, 5.73, 3.87, 1.95, 1.98, 2.88, 2.55,
			3.09, 2.31, 5.17, 5.07, 1.97, 4.11, 3.21, 2.04, 3.48, 2.19, 4.09, 1.52,
			4.11, 1.74, 4.56, 3.96, 4.83, 1.89, 3.683, 1.417, 3.06, 2.82, 2.64, 3.09,
			2.49, 4.29, 7.53, 2.47, 2.69, 2.56, 2.042, 2.666, 0.842, 2.67, 2.76,
			1.469, 4.801, 5.609, 5.25, 1.081, 1.62, 2.49, 6.53, 1.17, 3.42, 3.06,
			3.839, 1.981, 1.809, 5.63, 3.21, 3.064, 2.667, 3.51, 3.27, 2.16, 1.5,
			1.449, 3.5, 2.641, 1.05, 3.12, 5.04, 4.02, 2.31, 6.03, 2.22, 3.36, 2.207,
			2.833, 1.833, 3.177, 3.57, 1.8, 3.69, 1.41, 3.15, 1.32, 2.95, 1.83, 4.1,
			2.88, 2.43, 2.04, 4.8, 6.15, 0.72, 2.43, 3.13, 1.22, 2.28, 6.55, 3.888,
			1.542, 4.02, 5.52, 2.41, 3.35, 5.43, 2.82, 2.25, 1.375, 2.195, 3.81, 5.31,
			1.78, 2.66, 2.76, 1.23, 2.04, 2.55, 3.09, 3.01, 3.02, 7.2, 2.51, 2.59,
			1.65, 2.1, 2.22, 1.65, 1.84, 3.26, 1.917, 1.875, 2.208, 5.22, 3.18, 3.42,
			1.38, 1.83, 3.6, 1.92, 1.92, 1.89, 3.69, 2.59, 2.09, 3.57, 2.79, 1.92,
			1.48, 2.85, 2.61, 4.13, 4.86, 1.77, 2.31, 4.08, 1.5, 1.71, 2.37, 2.28,
			4.77, 3.39, 3.82, 2.6, 2.94, 3.0, 4.77, 3.67, 3.42, 1.56, 2.75, 3.6, 3.21,
			4.06, 3.62, 4.54, 1.25, 3.63, 2.37, 3.69, 2.94, 2.47, 5.197, 2.083, 2.47,
			2.18, 4.62, 3.48, 1.83, 2.91, 3.36, 2.73, 3.092, 2.458, 2.708, 3.292,
			1.66, 2.54, 3.87, 3.19, 3.98, 3.09, 3.03, 5.14, 3.8, 3.09, 4.05, 2.61,
			6.06, 3.39, 4.98, 4.17, 2.52, 2.52, 6.09, 1.92, 2.46, 3.072, 2.958, 5.11,
			3.5, 2.04, 1.98, 1.44, 2.82, 1.65, 3.3, 2.18, 3.13, 3.18, 5.4, 4.17, 1.77,
			2.41, 1.82, 1.17, 3.33, 3.39, 2.29, 6.74, 1.95, 2.94, 4.5, 4.42, 2.21,
			2.28, 5.55, 5.64, 3.39, 4.48, 5.58, 2.25, 3.84, 3.51, 1.44, 3.66, 2.73,
			4.44, 2.34, 3.6, 1.95, 1.125, 2.775, 4.8, 4.35, 3.9, 2.85, 3.3, 3.0, 0.5,
			4.39, 3.06, 2.61, 3.72, 3.03, 1.86, 3.66, 1.89, 2.37, 3.12, 0.69, 3.73,
			3.38, 3.0, 4.86, 3.21, 2.46, 2.07, 4.56, 2.79, 4.38, 3.27, 3.06, 2.4,
			4.11, 2.7, 4.433, 2.167, 3.0, 4.62, 2.625, 1.125, 2.49, 2.7, 2.52, 4.47,
			3.39, 1.98, 2.91, 2.79, 2.43, 2.82, 1.5, 2.667, 2.283, 2.76, 2.92, 2.96,
			0.87, 3.78, 3.63, 2.04, 2.61, 1.69, 2.18, 2.34, 2.97, 3.27, 2.34, 3.69,
			2.55, 2.04, 3.96, 4.56, 2.73, 2.063, 2.167, 1.92, 2.37, 5.64, 3.54, 2.04,
			2.37, 4.26, 2.34, 2.4, 4.35, 0.81, 2.83, 1.88, 1.65, 1.86, 3.36, 1.417,
			1.833, 2.21, 3.18, 2.44, 1.1, 2.19, 2.61, 2.04, 1.98, 3.49, 3.292, 1.708,
			4.74, 1.78, 3.3, 1.44, 2.67, 1.4, 1.03, 1.125, 2.615, 4.98, 3.42, 2.59,
			4.7, 3.88, 1.94, 2.19, 3.61, 2.21, 1.95, 5.22, 3.09, 1.63, 3.26, 3.12,
			2.07, 3.21, 3.87, 3.84, 1.983, 1.917, 4.03, 3.14, 1.86, 1.21, 2.43, 2.91,
			0.5, 0.917, 2.053, 3.54, 1.86, 3.0, 2.64, 3.57, 2.453, 2.917, 2.1, 1.638,
			3.042, 4.95, 1.2, 3.75, 2.773, 2.417, 2.25, 4.05, 2.1, 1.56, 1.5, 2.83,
			2.66, 2.31, 1.77, 2.34, 1.47, 1.89, 3.06, 1.5, 2.6, 4.39, 1.26, 4.11,
			2.49, 2.14, 4.02, 5.28, 3.26, 1.92, 4.92, 4.26, 5.07, 2.463, 1.917, 4.59,
			3.09, 2.47, 2.34, 2.51, 1.333, 0.917, 2.07, 4.21, 1.58, 3.33, 3.7, 1.19,
			4.23, 4.53, 2.79, 1.92, 4.65, 3.03, 2.58, 2.1, 2.94, 3.75, 2.573, 2.167,
			3.87, 2.44, 3.86, 2.1, 2.19, 1.86, 2.46, 4.83, 1.77, 3.72, 2.82, 3.54,
			3.04, 2.0, 4.59, 0.917, 1.916, 0.957, 4.01, 3.068, 1.792, 3.63, 4.12,
			1.34, 3.15, 3.3, 4.35, 2.61, 1.14, 3.3, 2.94, 2.76, 4.602, 0.958, 2.54,
			2.85, 2.25, 2.85, 2.25, 4.74, 4.24, 4.07, 4.05, 1.53, 3.6, 4.42, 0.82,
			3.78, 1.35, 1.98, 2.97, 3.57, 2.61, 4.56, 4.18, 3.99, 3.12, 2.4, 2.55,
			0.945, 3.135, 2.94, 3.18, 3.925, 0.875, 1.65, 4.56, 4.23, 3.165, 5.145,
			2.49, 3.83, 4.35, 2.68, 2.18, 4.15, 2.21, 1.8, 3.99, 2.19, 3.45, 4.35,
			3.21, 2.435, 1.375, 4.6, 3.14, 4.14, 0.61, 2.54, 3.0, 2.25, 1.92, 3.3,
			4.38, 4.5, 2.25, 3.06, 4.62, 4.03, 1.23, 3.14, 3.93, 2.38, 2.458, 3.622,
			1.77, 4.44, 0.81, 2.61, 3.21, 4.15, 0.77, 6.12, 3.15, 1.02, 5.55, 4.47,
			3.87, 2.94, 1.8, 3.912, 2.958, 1.51, 0.5, 1.77, 3.63, 1.92, 2.04, 4.08,
			6.54, 3.63, 2.88, 4.32, 1.45, 1.82, 0.93, 3.35, 1.17, 1.56, 1.77, 3.04,
			4.51, 2.102, 1.958, 0.78, 2.19, 2.22, 1.92, 0.99, 0.69, 1.96, 2.3, 3.75,
			3.08, 1.3, 1.52, 5.76, 3.51, 3.69, 1.51, 1.74, 1.89, 1.1, 2.1, 4.83, 2.19,
			4.43, 1.12, 4.53, 3.87, 1.61, 2.35, 5.44, 1.47, 1.975, 1.615, 2.37, 2.77,
			1.91, 1.83, 2.94, 3.37, 2.18, 1.83, 3.54, 1.14, 2.73, 1.8, 1.11, 3.81,
			1.333, 0.542, 1.265, 1.26, 1.71, 4.11, 1.74, 1.89, 1.66, 0.5, 0.27, 1.53,
			2.458, 2.882, 1.35, 3.12, 1.57, 1.91, 3.54, 1.417, 2.083, 3.07, 4.32, 1.8,
			4.32, 2.88, 1.71, 2.715, 1.875, 2.58, 2.28, 5.61, 5.01, 3.15, 3.21, 1.8,
			2.94, 2.977, 1.583, 2.92, 2.0, 3.4, 1.25, 3.84, 6.09, 2.55, 1.98, 2.73,
			3.31, 1.77, 2.75, 4.17, 2.37, 4.35, 2.79, 3.12, 3.51, 2.4, 3.69, 3.63,
			2.61, 2.29, 3.14, 1.5, 3.12, 2.7, 2.73, 0.792, 2.208, 3.0, 3.72, 4.47,
			2.74, 3.59, 1.18, 2.75, 6.63, 3.97, 3.44, 1.683, 1.917, 2.34, 4.47, 4.35,
			1.18, 1.61, 2.64, 1.99, 2.0, 1.23, 2.49, 2.49, 1.5, 1.98, 2.55, 2.79,
			3.69, 2.22, 1.87, 3.16, 0.5, 2.64, 2.75, 0.21, 1.018, 1.292, 2.43, 3.13,
			1.73, 2.53, 0.75, 2.75, 2.907, 1.083, 3.96, 2.22, 2.56, 2.87, 2.94, 2.75,
			1.557, 2.583, 3.03, 0.37, 2.09, 2.49, 1.02, 4.86, 3.39, 3.69, 1.11, 2.61,
			3.58, 3.14, 1.75, 3.0, 1.67, 3.15, 0.91, 3.51, 3.26, 1.708, 3.462, 2.27,
			2.16, 1.05, 0.35, 0.7, 2.05, 2.48, 3.842, 1.458, 2.83, 2.99, 3.46, 3.45,
			4.22, 2.94, 2.1, 2.965, 0.875, 2.43, 2.49, 3.032, 1.458, 1.57, 2.46,
			1.875, 3.125, 2.452, 2.208, 1.51, 2.81, 1.53, 2.67, 3.7, 0.5, 3.96, 2.64,
			2.58, 2.47, 1.91, 2.43, 1.65, 3.72, 2.277, 0.583, 0.96, 1.25, 1.57, 3.243,
			2.417, 2.79, 1.81, 2.72, 2.43, 1.32, 4.17, 2.43, 2.52, 4.14, 2.73, 2.66,
			3.37, 2.94, 2.28, 1.51, 2.06, 3.381, 3.489, 1.05, 1.14, 1.83, 3.125,
			2.155, 2.76, 6.36, 2.59, 1.7, 1.38, 2.94, 1.85, 2.17, 4.38, 4.38, 2.76,
			3.22, 1.2, 2.72, 1.542, 3.108, 2.01, 1.71, 3.54, 2.94, 3.18, 3.3, 4.35,
			3.59, 0.5, 2.72, 2.46, 3.27, 3.33, 1.8, 3.63, 1.56, 3.0, 3.75, 0.87, 3.24,
			5.34, 3.36, 4.32, 4.44, 2.712, 2.208, 3.78, 6.002, 3.208, 1.53, 2.49,
			2.74, 2.55, 2.25, 2.84, 1.86, 1.74, 3.84, 2.86, 5.63, 3.93, 2.07, 3.85,
			5.45, 4.26, 3.24, 3.6, 3.87, 3.36, 5.55, 2.88, 2.82, 4.71, 1.98, 1.71,
			2.833, 1.885, 1.792, 3.31, 3.2, 2.14, 2.0, 1.98, 1.593, 1.917, 2.04, 2.97,
			2.46, 2.19, 5.58, 4.57, 2.9, 2.01, 3.87, 4.56, 1.06, 5.27, 1.33, 1.22,
			2.38, 3.2, 2.73, 3.06, 1.41, 3.63, 3.33, 3.54, 1.24, 3.32, 2.94, 4.05,
			5.34, 1.47, 2.76, 2.16, 3.87, 0.82, 2.54, 1.048, 2.042, 2.068, 2.042,
			2.52, 3.6, 3.42, 1.54, 2.0, 2.64, 3.75, 1.68, 2.79, 6.24, 2.88, 3.69, 5.2,
			1.04, 2.88, 3.45, 4.56, 5.4, 2.85, 2.25, 3.45, 4.71, 2.01, 1.96, 2.75,
			2.73, 4.05, 4.77, 1.41, 3.405, 1.275, 2.4, 1.23, 3.03, 3.37, 2.65, 2.23,
			2.115, 2.875, 2.61, 2.52, 2.505, 4.035, 2.31, 1.86, 1.44, 1.443, 1.167,
			2.94, 4.71, 1.26, 4.05, 2.88, 3.18, 3.21, 4.53, 4.08, 2.62, 2.36, 5.4,
			4.32, 1.05, 2.31, 4.53, 7.77, 2.46, 2.58, 2.583, 2.277, 2.16, 3.33, 4.44,
			3.69, 3.6, 4.23, 4.59, 1.51, 1.02, 2.0, 3.06, 3.07, 2.24, 1.95, 4.44,
			3.802, 1.958, 2.34, 2.122, 1.958, 2.07, 3.24, 3.66, 4.53, 2.31, 5.01, 3.3,
			3.75, 3.42, 2.97, 2.25, 3.57, 2.22, 2.83, 2.33, 5.01, 3.27, 2.46, 0.99,
			2.28, 1.56, 0.69, 2.4, 2.22, 2.7, 3.81, 3.91, 2.78, 4.965, 2.625, 1.26,
			2.1, 0.9, 2.34, 1.06, 3.23, 4.47, 6.78, 3.06, 3.06, 6.24, 5.29, 2.99,
			1.95, 1.57, 3.23, 3.01, 4.08, 2.91, 2.97, 5.67, 3.04, 2.0, 3.33, 1.62,
			3.27, 2.687, 2.083, 2.7, 1.62, 1.44, 5.43, 1.83, 1.65, 3.36, 1.62, 3.06,
			1.63, 2.33, 1.86, 1.24, 2.03, 4.32, 3.36, 3.81, 2.19, 2.05, 1.82, 4.92,
			3.63, 1.23, 4.02, 3.69, 3.06, 3.99, 5.04, 2.61, 3.465, 1.875, 2.52, 1.65,
			3.3, 3.27, 3.27, 2.91, 3.34, 2.84, 4.5, 1.77, 2.67, 3.0, 2.43, 2.34, 2.19,
			1.73, 1.75, 4.02, 3.42, 2.19, 5.4, 2.31, 1.77, 4.63, 2.78, 3.96, 2.4,
			4.86, 1.47, 1.26, 2.458, 3.662, 2.82, 3.6, 3.36, 2.82, 3.96, 3.33, 0.69,
			4.2, 3.6, 1.48, 3.5, 2.73, 1.45, 2.39, 2.88, 1.68, 2.01, 1.86, 2.43, 1.75,
			2.75, 3.78, 3.13, 1.34, 0.69, 2.705, 2.125, 1.413, 1.917, 2.52, 2.37,
			3.57, 4.2, 3.32, 2.53, 5.45, 4.028, 1.792, 3.27, 2.37, 2.22, 1.74, 2.31,
			7.83, 4.5, 3.66, 1.77, 4.53, 2.49, 1.65, 1.72, 1.49, 2.46, 1.89, 3.03,
			4.08, 2.07, 1.38, 2.28, 2.64, 2.25, 2.16, 2.22, 2.82, 4.17, 3.21, 2.4,
			3.93, 3.15, 4.32, 3.36, 3.63, 2.58, 3.0, 3.93, 1.78, 1.08, 5.18, 4.24,
			3.5, 2.82, 1.558, 1.292, 0.57, 2.85, 2.1, 3.75, 2.67, 3.07, 2.84, 4.48,
			2.098, 1.792, 5.16, 1.83, 2.82, 1.02, 1.29, 3.602, 3.208, 2.37, 1.8, 3.48,
			4.11, 1.89, 1.77, 1.453, 3.167, 1.08, 4.102, 3.308, 3.93, 1.53, 2.52,
			3.48, 0.6, 5.46, 3.13, 2.99, 2.01, 2.85, 3.3, 5.47, 4.16, 3.39, 2.25,
			1.66, 1.91, 1.77, 0.66, 1.59, 4.02, 0.85, 0.5, 2.083, 2.687, 4.14, 0.72,
			2.34, 2.76, 1.38, 5.2, 1.2, 4.68, 4.35, 1.11, 1.53, 1.5, 1.41, 1.32, 4.65,
			0.84, 1.57, 2.6, 3.3, 4.8, 3.27, 2.25, 5.01, 1.95, 2.22, 3.51, 1.54, 2.24,
			3.0, 1.8, 2.125, 4.395, 3.44, 1.98, 2.34, 2.73, 1.98, 3.06, 2.37, 3.99,
			0.54, 4.68, 2.7, 2.195, 2.125, 1.8, 1.65, 3.39, 2.82, 2.97, 2.7, 3.63,
			3.31, 1.7, 1.71, 4.75, 5.15, 3.91, 5.33, 3.93, 2.83, 2.06, 2.965, 1.625,
			3.12, 2.25, 2.88, 5.76, 2.25, 2.52, 3.72, 3.3, 2.23, 3.14, 3.21, 3.34,
			2.27, 2.64, 3.15, 2.8, 1.88, 4.23, 3.538, 2.042, 4.59, 1.08, 1.41, 3.75,
			2.64, 3.24, 4.41, 1.63, 4.13, 5.16, 4.32, 3.81, 1.14, 2.14, 3.063, 3.167,
			1.917, 2.823, 2.542, 3.278, 3.24, 1.92, 4.23, 3.66, 2.4, 1.59, 1.65, 1.27,
			1.85, 0.695, 1.375, 1.11, 2.2, 3.74, 2.49, 1.53, 1.827, 1.833, 3.03, 1.68,
			2.43, 4.38, 2.88, 1.71, 2.513, 2.167, 2.25, 1.38, 3.3, 2.19, 4.38, 4.12,
			3.26, 5.01, 1.65, 4.8, 3.24, 3.42, 1.96, 3.53, 1.38, 2.34, 3.27, 2.13,
			2.19, 2.64, 2.01, 2.82, 1.2, 1.599, 1.711, 2.719, 2.981, 1.89, 1.25, 3.9,
			2.19, 2.73, 4.049, 5.161, 4.169, 4.621, 2.58, 1.86, 3.99, 2.52, 4.529,
			4.621, 1.8, 1.86, 3.69, 5.099, 4.231, 2.939, 1.111, 1.32, 5.13, 1.949,
			3.9, 1.831, 2.88, 2.85, 1.98, 2.219, 3.481, 0.87, 2.91, 1.229, 2.131,
			4.539, 3.228, 1.083, 3.46, 2.899, 2.92, 1.25, 1.351, 3.399, 1.341, 2.917,
			5.673, 2.809, 3.061, 3.96, 4.56, 4.56, 3.63, 1.944, 1.625, 0.781, 1.74,
			2.7, 2.25, 2.609, 3.961, 2.14, 2.72, 5.81, 3.12, 2.1, 3.72, 4.17, 6.003,
			1.917, 3.7, 3.27, 2.72, 3.84, 4.72, 3.843, 0.917, 1.5, 1.5, 2.83, 3.05,
			1.897, 3.083, 2.478, 3.042, 2.37, 3.4, 2.33, 4.95, 2.64, 1.84, 3.44, 2.53,
			1.1, 1.68, 0.99, 1.47, 3.24, 1.518, 2.292, 3.45, 2.52, 1.38, 2.79, 1.36,
			2.72, 1.71, 2.43, 2.16, 3.18, 2.73, 3.57, 5.19, 4.92, 2.49, 4.21, 3.29,
			1.737, 2.583, 4.26, 3.03, 2.88, 3.87, 2.68, 3.59, 2.22, 1.57, 2.045,
			8.775, 3.33, 4.59, 2.22, 4.29, 3.15, 3.9, 4.41, 2.58, 3.933, 2.167, 1.04,
			2.125, 1.925, 3.27, 3.66, 2.76, 4.23, 2.79, 4.112, 1.708, 2.94, 3.9, 2.31,
			2.25, 2.67, 2.34, 4.59, 2.13, 4.11, 3.42, 1.27, 1.76, 1.83, 4.047, 1.083,
			2.67, 3.48, 5.49, 2.38, 3.86, 2.567, 2.833, 3.12, 2.88, 4.78, 1.43, 3.227,
			2.083, 3.54, 4.68, 0.51, 0.96, 2.19, 3.6, 3.45, 2.8, 1.64, 2.1, 2.57,
			0.991, 4.81, 2.409, 3.72, 1.11, 1.452, 3.444, 6.414, 1.78, 1.01, 2.445,
			2.085, 1.54, 0.583, 3.125, 2.242, 2.6, 2.5, 2.37, 2.46, 2.35, 2.48, 4.32,
			2.43, 2.208, 3.942, 2.16, 3.72, 2.64, 3.593, 0.667, 4.16, 1.52, 1.94,
			2.34, 2.17, 0.8, 0.15, 3.042, 2.118, 4.642, 1.958, 1.92, 2.155, 1.625,
			1.83, 4.83, 3.96, 3.45, 2.833, 2.125, 1.912, 2.37, 1.5, 2.37, 4.3, 3.68,
			3.85, 3.05, 4.44, 2.15, 3.31, 2.01, 1.12, 4.01, 1.977, 1.833, 3.45, 2.58,
			2.82, 2.13, 1.96, 3.27, 3.822, 2.708, 1.792, 3.758, 1.62, 2.82, 2.97,
			2.247, 1.833, 3.12, 1.138, 2.042, 2.16, 4.14, 1.62, 2.01, 2.732, 3.208,
			2.43, 5.65, 3.35, 4.11, 3.25, 2.27, 1.83, 3.87, 4.02, 4.74, 2.1, 5.55,
			2.95, 2.79, 3.11, 3.48, 1.62, 2.07, 3.57, 4.59, 2.8, 2.57, 4.62, 1.5,
			2.49, 2.108, 3.292, 2.64, 3.66, 2.97, 3.72, 1.84, 4.22, 1.39, 3.26, 3.07,
			3.05, 2.67, 3.18, 4.75, 0.5, 2.58, 1.63, 4.64, 2.92, 2.33, 0.72, 1.11,
			1.23, 2.61, 4.11, 3.75, 3.3, 2.25, 3.06, 2.34, 2.22, 2.85, 1.35, 4.92,
			0.99, 5.2, 3.23, 6.75, 1.54, 3.69, 1.19, 2.05, 1.49, 4.92, 3.97, 1.88,
			2.61, 3.33, 4.53, 4.02, 0.9, 1.95, 4.2, 1.23, 2.91, 4.38, 2.13, 1.77,
			2.35, 4.43, 1.92, 4.59, 1.95, 5.85, 1.86, 2.16, 3.18, 2.04, 4.62, 5.49,
			3.63, 4.56, 1.08, 1.8, 2.208, 1.912, 4.04, 3.72, 2.265, 1.875, 3.51, 1.83,
			3.69, 2.34, 3.75, 2.16, 3.93, 0.99, 4.44, 2.01, 2.83, 1.07, 1.8, 7.29,
			3.36, 5.13, 0.6, 1.23, 3.69, 1.258, 1.292, 4.38, 0.84, 1.83, 3.93, 1.53,
			4.2, 2.01, 3.42, 2.3, 2.07, 4.59, 3.12, 5.07, 3.01, 2.81, 3.33, 2.7, 2.22,
			2.25, 2.1, 4.77, 0.76, 4.67, 2.05, 3.365, 3.825, 1.95, 0.93, 1.2, 3.36,
			4.18, 4.14, 1.02, 2.42, 2.938, 2.792, 2.85, 2.34, 2.73, 3.33, 3.87, 2.25,
			3.12, 2.49, 3.0, 2.22, 3.36, 1.87, 4.31, 2.08, 2.99, 2.038, 2.042, 1.708,
			2.582, 3.3, 4.14, 4.117, 2.333, 5.01, 1.535, 2.875, 1.41, 3.06, 2.49, 5.4,
			2.43, 3.69, 3.39, 1.9, 1.743, 2.417, 3.87, 6.33, 0.87, 1.74, 1.86, 1.583,
			2.737, 3.15, 3.75, 1.95, 4.14, 4.92, 2.64, 3.96, 2.88, 1.95, 1.53, 3.35,
			56.64
		],
		"transcript_en": [
			"[MUSIC PLAYING]",
			"",
			"DAVID MALAN: All right, this is CS50, and this is week four.",
			"And for the past several weeks, we've had",
			"training wheels of sorts on, while using this language known as C.",
			"And those training wheels have been in the form of the CS50 library.",
			"And you use this library, of course, by selecting and including cs50.h",
			"atop your code.",
			"And then if you think about how [INAUDIBLE] works,",
			"you've been linking your code via dash L CS50.",
			"But all of that has been automated for you up until now, using make.",
			"Today, we'll transition from last week's focus",
			"on algorithms to a little more focus on machines",
			"and on the machines we now use to implement these algorithms all the more",
			"powerfully, as we begin to take off these training wheels",
			"and look at what's really going on underneath the hood of your computer.",
			"And as complicated as some aspects of C have been,",
			"as new is programming may very well be to you,",
			"realize that there's not all that much going on underneath the hood",
			"that we need to understand to now move onward",
			"and start solving far more interesting and more sophisticated and more",
			"fun problems.",
			"We just need a few additional building blocks.",
			"And so today, we'll do this, first, by relearning how to count.",
			"Here, for instance, is what we'll call the computer's memory.",
			"And we've seen this grid before.",
			"And we can number recall all of the bytes in your computer's memory.",
			"We might call this byte number 0, 1, 2, 3, 4, all the way up to byte 15,",
			"and so forth.",
			"But it turns out, when talking about computers' memories,",
			"computers and computer scientists and programmers",
			"actually don't tend to use decimal.",
			"They definitely don't tend to use binary at that low level.",
			"Instead, they tend to use, just for conventional sake,",
			"something called hexadecimal.",
			"Hexadecimal is a different base system that,",
			"instead of using 10 digits or 2 digits, uses 16 instead.",
			"And so a computer scientist, when numbering things",
			"like bytes in a computer memory, would still do 0, 1, 2, 3, 4, 5, 6, 7, 8, 9.",
			"But after that, instead of going onward with decimal to, say, 10,",
			"11, 12, 13, 14, 15, they instead, conventionally,",
			"would start using a few letters of the alphabet.",
			"And so, in hexadecimal, this different base system base 16,",
			"you start counting at 0 still.",
			"You count up to and through 9.",
			"But when you want to keep counting higher,",
			"you then go to A, B, C, D, E, and F.",
			"And the upside of this is that, within hexadecimal-- and that hex implies 16--",
			"you have 16 total individual digits, 0 through 9, and also now, A through F.",
			"So we don't have to introduce second digits just to count up as high as 16.",
			"We can use individual digits 0 through F.",
			"And we can keep counting up further by using multiple hexadecimal digits.",
			"But to get there, let's introduce this vocabulary.",
			"So in binary, of course, we use 0's and 1's.",
			"In decimal, of course, we use 0 through 9's.",
			"And in hexadecimal, to be clear, we're going to use 0 through F's, otherwise",
			"known as base-16.",
			"And it's just a convention that we use A through F. We",
			"could have used any other six symbols.",
			"But these are what humans have chosen.",
			"So hexadecimal works quite similarly to our familiar decimal system.",
			"And it's even familiar to, now, what you know as the binary system, as follows.",
			"Let's consider a two-digit value using hexadecimal instead of decimal",
			"and instead of binary.",
			"Well, just like in the world of decimal, we used base-10,",
			"or in the world of binary, we used base-2.",
			"We're just going to use, now, base-16, ergo, hexadecimal.",
			"So this is 16 to the first.",
			"This is 16 to the--",
			"sorry 16 to the 0.",
			"This is 16 to the first.",
			"And of course, if we multiply that out, it's just the ones column",
			"and now the 16's column.",
			"And so if you want to count up in hexadecimal,",
			"you still start with 0 as usual, then 01, 02, 03, 04, 05, 06, 07, 08, 09.",
			"And then things get interesting.",
			"Now, you don't go to 01, because that would be incorrect.",
			"01, in this base system, would be like 16 times 1 plus 1 times 0.",
			"That's not what we want.",
			"After the number we know is 9, we now count up to A, B, C, D, E, F.",
			"And now, things get interesting again.",
			"But just like in the decimal system, when you count up to, like, 99,",
			"you have to start carrying the 1, same thing here.",
			"If you want to count past F, you carry the 1.",
			"And so now, to represent one value greater than F, we use 01,",
			"which looks like 10, but is not 10.",
			"In hexadecimal, it is 01.",
			"16 times 1 gives us 16.",
			"1 times 0 gives us 0.",
			"And of course, that gives us the decimal number we now know is 16.",
			"So we will no longer introduce more and more base systems.",
			"But let me stipulate that just by using these columns",
			"that you learned back in grade school, presumably,",
			"can you implement any base system now.",
			"It just so happens that in the world of computers,",
			"and today in the world of memory, and soon, also files,",
			"it's just going to be very conventional to be",
			"able to recognize and use hexadecimal.",
			"And in fact, there's a reason humans like hexadecimal,",
			"or at least some humans.",
			"Computer scientists recall that if we count up as high as FF, in this case,",
			"we would still do the same math.",
			"So 16 times 15 plus 1 times 15 is going to give us, really, this,",
			"or of course, 240 plus 15, or 255.",
			"And I did that pretty quickly.",
			"But that's just the sort of grade school math of multiplying",
			"the column by the value that's in it, where again,",
			"each of these F's is how we now express 15 using a single digit.",
			"But recall that we've seen 255 before.",
			"Back when we talked about binary a few weeks ago,",
			"255 also happened to be the pattern that we see here, eight 1 bits using binary.",
			"And so the reason that computer scientists tend to hexadecimal,",
			"is that, you know what, in eight bits, there's actually",
			"two pairs here, like four on the left, four on the right.",
			"If we sort of scooch these things over, it",
			"turns out that because hexadecimal allows",
			"you to represent 16 possible values, it's",
			"a perfect system for representing four bits at a time.",
			"After all, if you've got four bits here, each of which can be a 0 or 1,",
			"that's 2 times 2 times 2 times 2 possible values for each of those,",
			"or 16 total values, which is to say that in the world of computers,",
			"if you ever want to talk in units of four bits,",
			"it's wonderfully convenient to use hexadecimal instead,",
			"only because, conveniently, one hexadecimal digit happens to be",
			"equivalent to four binary digits, 0's and 1's.",
			"So 0, 0, 0, 0, all the way up through 1, 1, 1, 1.",
			"So why do humans do this?",
			"It's just now the human convention because of that convenience.",
			"Now, some of you may very well have seen hexadecimal before.",
			"In fact, recall our discussion in week 0 of RGB,",
			"where we discussed the representation of colors using",
			"some amount of red, green, and blue.",
			"And at the time, we used this example.",
			"We took our example out of context.",
			"And instead of using hi as a string of text,",
			"we reinterpreted 72, 73, and 33 as a sequence of colors.",
			"How much red do you want?",
			"How much green do you want?",
			"How much blue do you want?",
			"And that's fine.",
			"It's perfectly fine to think and express yourself in terms of decimal.",
			"But computer scientists tend not to do it that way in the context of colors",
			"and in the context of memory.",
			"Instead, they tend to use something called hexadecimal.",
			"And hexadecimal, here, would actually just",
			"have you change these values from 72, 73, 33, to the equivalent hexadecimal",
			"representation.",
			"And we won't bother doing the math here.",
			"But let me just stipulate that 72, 73, 33 in decimal",
			"is the same thing as 48, 49, 21 in hexadecimal.",
			"Now, obviously, if you glance at these three numbers,",
			"it's not at all obvious if you're looking at hexadecimal digits",
			"or decimal digits, because they do use the same subset, 0's through 9's.",
			"And so a convention, too, in the computing world,",
			"is any time you represent hexadecimal digits,",
			"you tend to prefix them, just because, with 0x.",
			"And there's no mathematical meaning to the 0 or the x.",
			"It's just a prefix you put there to make clear to the viewer",
			"that these are hexadecimal digits, even if they might otherwise",
			"look like decimal digits.",
			"So where are we going with this?",
			"Well, those of you who might have experimented",
			"in the past with making your own web pages and making them colorful,",
			"or those of you who are artists and have used programs like Photoshop, odds",
			"are, you've seen these codes before.",
			"In fact, here are a few screenshots of Photoshop itself.",
			"If you click on a color in Photoshop and you pull up this window,",
			"you can change the color that you're drawing on the screen",
			"to be any of the colors of the rainbow.",
			"But more arcanely, if you look down here,",
			"you can actually see these hexadecimal codes,",
			"because it's become human convention over the years",
			"to use hexadecimal to represent different amounts of red, green,",
			"and blue.",
			"So if you have no red, no green, no blue, otherwise represented as 000000,",
			"well, that's going to give you the color we know here as black.",
			"It's sort of the absence of any wavelengths of light there.",
			"If by contrast, though, you change all of those six digits",
			"to the highest possible value, which, again, is F. The range in hexadecimal 0",
			"through F, otherwise in decimal, being 0 through 15, well,",
			"with FFFFFF, that's a lot of red, a lot of green, a lot of blue.",
			"And when you combine those wavelengths of light,",
			"you get the color we see here as white.",
			"And you can imagine, now, combining different amounts",
			"of red or green or blue.",
			"So for instance, in hexadecimal, FF0000, is the color we know as red.",
			"00FF00 is the color we know as green.",
			"And finally, 0000FF is the color we know as blue, because again,",
			"the system that programmers and artists often but don't always use, is indeed,",
			"this system of RGB for red, green, and blue.",
			"So we introduced this here not because you",
			"have to start thinking any differently, because again,",
			"the mathematical mechanism is the same as week 0.",
			"But you're going to start seeing numbers in examples, in programs,",
			"as just appearing in hexadecimal by convention, as opposed to actually",
			"being interpreted as decimal.",
			"So if we consider, now, our computer's memory,",
			"we'll now start thinking of this whole canvas of memory,",
			"all of these bytes inside of our computer's memory,",
			"as being innumerable as 0, 1, 2, all the way through F.",
			"And then if we keep counting, we can go to 10, 11, 12, 13, 14, 15, 16, 17, 18,",
			"19, 1A, 1B, 1C, 1D, and so forth.",
			"And it's fine if it's not nearly that obvious,",
			"as you look at these things, what the decimal equivalents are.",
			"That's not a problem.",
			"It's just a different way of thinking about the locations, in this case,",
			"of a computer's memory, or the representation of one color or another.",
			"All right, well, let's now use this as an example of an opportunity,",
			"rather, to consider what's actually being stored in our computer's memory.",
			"And to be clear, I'll start prefixing all of these memory addresses,",
			"so to speak, with 0x, just to make clear that we're now talking, indeed,",
			"in terms of 0's and 1's.",
			"So here's a simple line of code.",
			"Out of context, we would need to, actually, put this",
			"in main or some other program to actually do anything with it.",
			"But we've seen this before many times, now,",
			"where you declare a variable, for instance, n for number.",
			"Declare it as an int for its type.",
			"And then, perhaps, even assign it a value.",
			"Well, what's actually going on when we use this kind of code in our computer?",
			"Well, let's go ahead and whip this thing up in a actual program.",
			"Let me create a file called address.c because I",
			"want to start experimenting with some addresses in the computer's memory.",
			"I'm going to go ahead and include standard io dot h.",
			"I'm going to give myself int main void.",
			"And down here, I'm going to go ahead and declare exactly",
			"that variable, int n equals 50.",
			"And then I'm going to go ahead and print out, with percent i and a backslash 0,",
			"the value of n.",
			"So nothing interesting there, nothing too complicated.",
			"I'm going to go ahead and make address.",
			"And then I'm going to go ahead and do dot slash address.",
			"And of course, as per week one, we should hopefully",
			"see just the number 50.",
			"But today, we're going to give you some more tools with which you can actually",
			"start poking around your computer's memory.",
			"But let's first consider this line of code",
			"in the context of your computer's hardware.",
			"So if you're writing a program with a line of code like this,",
			"that n needs to be somewhere in your computer's memory.",
			"That 50 needs to be put somewhere in your computer's memory.",
			"So if we, again, consider this to be just part of our computer's",
			"memory, a few dozen bytes, well, suppose that that variable, n,",
			"happens to end up down here.",
			"I've deliberately drawn n as taking up four bytes, four squares, because we",
			"call that an integer, typically, at least on CS50 IDE and modern systems,",
			"tends to be four bytes.",
			"So I made sure to have it fill four complete boxes.",
			"And then value might be 50 that's actually stored there.",
			"Well, it turns out that within your computer's memory, again,",
			"there are these addresses that are implicitly there.",
			"So even though, yes, we can refer to this variable, n,",
			"based on the variable name I gave it in my code,",
			"surely this variable exists at a specific location in memory.",
			"I don't know offhand where it is.",
			"But let me just propose that maybe it's at location 0x12345678, just",
			"an arbitrary address.",
			"I have no idea, in actuality, where it is.",
			"But it certainly does have an address, because every one of these squares",
			"inside of your computer's memory has an address, a unique identifier like 0, 1,",
			"2, and so forth.",
			"Maybe the 50 ended up at memory address 0x12345678.",
			"Well, that's kind of cool about C, is that we can actually begin to see this,",
			"no pun intended.",
			"So let me go ahead and modify this program",
			"and introduce a little bit of new syntax that",
			"will allow us to start poking around the inside of your computer's memory",
			"so we can actually see what's going on underneath.",
			"So I'm going to go ahead and change this program to do this instead.",
			"I'm going to go ahead and say, you know what?",
			"Don't just print out the value, n, which, of course, is 50.",
			"Let me see, just out of curiosity, what is the actual address of n.",
			"And to do that today, we're going to introduce one new piece of syntax,",
			"which happens to be this here.",
			"There's two new operators, today, in C. The first is an ampersand, which",
			"does not represent a logical and.",
			"Recall a couple of weeks ago, we did see that if you",
			"want to combine Boolean expressions, this and that, you use two ampersands.",
			"It's an unfortunate coincidence that an ampersand, solo like this,",
			"will mean something different today.",
			"Specifically, this ampersand is going to be our address of operator.",
			"By simply prefixing any variable name with an ampersand, we can tell C,",
			"please tell me what address this variable is stored in.",
			"And this star, not to be confused with multiplication,",
			"also has another meaning in today's context.",
			"When you use this asterisk, you can actually",
			"tell your program to look inside of a particular memory address.",
			"So the ampersand tells you what address a variable is at.",
			"The star operator, otherwise known as the dereference operator,",
			"means, go to the following address.",
			"So they sort of are reverse operations.",
			"One figures out the address.",
			"One goes to the address.",
			"And so let's see this for real here.",
			"Let me go ahead and change my n in my program here to ampersand n.",
			"So I want to print out, not the number in n, but the address of n.",
			"And now, how do I print out an address?",
			"Well, it is just a number.",
			"But actually, printf supports a different format code for addresses.",
			"You can do percent p, for reasons we'll soon see,",
			"that says to print out the address of this variable",
			"and interpret it as hexadecimal, again, by convention.",
			"So I'm going to go ahead and make address now",
			"after only making two changes to this file.",
			"Everything seems to compile OK.",
			"Now, I'm going to go ahead and run address.",
			"And we will see that, in this particular program,",
			"address.c, for whatever reason, that variable, n,",
			"ended up at crazy location 0x7ffd80792f7c.",
			"Now, is that useful?",
			"Not in practice, necessarily.",
			"We're going to make this become useful by leveraging these addresses.",
			"But the specific address is not interesting.",
			"I'm glancing at this number.",
			"I have no idea what that number is in decimal.",
			"I would have to do the math, or frankly, just Google a converter",
			"and do it for me.",
			"So again, that's not the interesting part.",
			"The fact that this is in hexadecimal is just an implementation detail.",
			"It happens to represent the location of this variable.",
			"And again, we won't want to do this, necessarily.",
			"But just to be clear that one of these operators,",
			"the ampersand gets the address.",
			"And the star operator goes to an address.",
			"We can actually undo the effects of these things.",
			"For instance, if I print out now, not ampersand n, but just out of curiosity,",
			"star ampersand n, I can kind of undo the effects of this operator.",
			"Ampersand n is going to say, what is the address of n?",
			"Star ampersand n is going to say, go to that address.",
			"So this is kind of a pointless exercise, because if I just want what's in n,",
			"I can just, obviously, print n like we began.",
			"But again, just as an intellectual exercise,",
			"if I prefix n with the address of operator, and then use the asterisk",
			"and say, go to that address, it's the same exact thing",
			"as just printing n itself.",
			"So let me change the format code back to an integer.",
			"Instead percent p, let me go ahead and make address now,",
			"seems to compile OK, and run address.",
			"And voila, we're back at the 50.",
			"So as weird as the syntax today might start to feel,",
			"realize that these operators, at the end of the day,",
			"are relatively simple in what they do.",
			"And if you understand that one just kind of undoes the effects of the other,",
			"can we start to build up some pretty interesting programs with them.",
			"And we're going to do so by leveraging a special type of variable,",
			"a variable called a pointer.",
			"And there is that p in percent p.",
			"A pointer is a variable that contains the address of some other value.",
			"So we've seen integers before.",
			"We've seen floats and chars and strings and other types as well.",
			"Pointers, now, are just a different type of variable",
			"that store the address of some value.",
			"And you can have pointers to integers, pointers to chars, pointers to bools,",
			"or any other data type.",
			"A pointer references the specific type of the value",
			"that it actually is referring to.",
			"So let's see this more concretely.",
			"Let me go back, now, to my program here.",
			"And let me introduce another variable here.",
			"Instead of immediately printing out something like n, let me go ahead",
			"and introduce a second variable that is of type int star.",
			"And this, I will admit, is probably the most confusing piece of C syntax",
			"that we'll, in general, see, just because, my god, star is now",
			"used for multiplication, for going to an address, and also, now,",
			"declaring a variable.",
			"This is, arguably, not the best design decision.",
			"But it was made decades ago.",
			"So this is what we have.",
			"But if I do int star p equals ampersand n, now, what I can do down here,",
			"is print out the address of n by temporarily storing it in a variable.",
			"So I'm not doing anything new just yet.",
			"I'm still declaring on line 5, an integer",
			"called n, assigning at the value 50.",
			"What's new now on line 6, is that I'm introducing a new type of variable.",
			"This type of variable is known as a pointer.",
			"A pointer, again, is just a variable that stores the address of some value.",
			"And the syntax, admittedly weird, for declaring a pointer to an integer,",
			"is literally say int, because that's the type you're pointing to,",
			"star, and then the name of the variable you want to create.",
			"And I could call this anything, but I'll call it p to keep it succinct.",
			"And again, on the right hand side of the equals sign",
			"is the same operator as before.",
			"If you want to figure out what is the address of n, it's just ampersand n.",
			"And so we can store that address, now, somewhere longer-term.",
			"Before, I just passed in ampersand n and printf did it's thing.",
			"Now, I'm temporarily, on line 6, storing that address in a new variable",
			"called p.",
			"And its type is technically int star, is what a programmer might say.",
			"So it would be incorrect to say int p equals ampersand n.",
			"And indeed, our compiler, Clang, won't like that.",
			"It won't let you compile the code, most likely.",
			"And so, instead, I do int star p to make clear that I know what I'm doing.",
			"I am storing the address of an int, not an integer, per say.",
			"So if I go ahead, now, and save this, recompile with make address.",
			"And notice, I changed one line of code 2 earlier.",
			"I went back to percent p to print a pointer that is an address.",
			"And I'm pointing out the value of p, no longer the value of n.",
			"If I now run dot slash address, voila, there's that cryptic address.",
			"And these addresses may very well change over time.",
			"Depending on what's going on inside of your program",
			"or other things on the system, these addresses might be different each time.",
			"And that's to be expected and not something to be relied on.",
			"But it's clearly some random cryptic address,",
			"similar to my arbitrary 0x12345678 before.",
			"But now, let's just undo this operation.",
			"Just so we can come full circle here, let me now propose",
			"how I can print out the value of n.",
			"And let me call on someone for this if I can.",
			"If my goal, now, on line 7, is no longer to print the address of n, but to print",
			"n itself using p.",
			"I'm going to go ahead and change, preemptively,",
			"the format code to percent i.",
			"And a shorthand notation would, obviously, be just print n.",
			"But suppose I don't want to print n for this",
			"exercise, how can I now print the value in n by referring to it by way of p?",
			"What should I literally type as printf's second argument",
			"to print out the value of n by using this new variable, p, in some way.",
			"Yeah, let's call on Joshua.",
			"AUDIENCE: I believe, if you use the ampersand before the p,",
			"it will probably do it.",
			"DAVID MALAN: OK, ampersand p, let me go ahead and try that.",
			"Let's try ampersand p to print out this value.",
			"So ampersand p, I'm going to save the file.",
			"I'm going to do make address and enter.",
			"And it doesn't seem to be the case.",
			"Notice that I'm getting an error.",
			"It's a little cryptic.",
			"Format specifies type int, but the argument has type int star star,",
			"more on that another time.",
			"So it turns out this was incorrect.",
			"Let's take one other suggestion, because the ampersand, recall,",
			"gets the address of something.",
			"But p is already an address.",
			"So Joshua, what you technically proposed,",
			"was get me the address of the address.",
			"And that's not the direction we want to go.",
			"We want to go to what is at that address.",
			"Sophia, what do you think?",
			"AUDIENCE: We want to add a percent--",
			"or a star p when we print it.",
			"DAVID MALAN: Yeah.",
			"So I had a little trouble hearing you.",
			"But I think if we instead use not the ampersand operator,",
			"but the star operator, that's going to be,",
			"indeed, the dereference operator, which essentially means,",
			"go to the value in p.",
			"And if the value in p is an address, I think, let's try this, make address.",
			"Yep, that compiled OK this time.",
			"Now, if I do dot slash address, hopefully, I",
			"will now see, indeed, the number 50.",
			"So again, we don't seem to have made any fundamental progress.",
			"At the end of the day, I'm still just printing out the value of n.",
			"But we've introduced this new primitive, this new puzzle piece,",
			"if you will, that allows you, programmatically,",
			"to figure out the address of something in the computer's memory",
			"and to actually go to that address.",
			"And we'll soon see exercise more sophisticated control over it as well.",
			"But let's come back to a pictorial representation of this",
			"and consider what it is we just did in the context, now, of this code.",
			"So inside of my main, the two interesting lines of code,",
			"really, were these two lines first before we made Sophia's addition",
			"and actually dereferenced p and printed it out with printf.",
			"But let's consider, for a moment, what these values now",
			"look like in a computer's memory.",
			"And again, the syntax is a little cryptic",
			"because we now have a star and an ampersand.",
			"But again, that just means, now, we get to start thinking",
			"in terms of the computer's memory.",
			"So for instance, here's a grid of memory inside of my computer.",
			"And maybe, for instance, the 50 and the n end up down there.",
			"They could end up anywhere, not even pictured on the screen here.",
			"They end up somewhere in the computer's memory, for our purposes thus far.",
			"But it technically lives in an address.",
			"And let me simplify the address just so it's quicker to say.",
			"This 50, now, stored in the variable n, maybe it actually",
			"lives at address 0x123.",
			"I have no idea where it is, but we've clearly",
			"seen that it can live in a seemingly random address like that.",
			"Now, what about p?",
			"p is technically a variable itself.",
			"It's a variable that stores the address of something else.",
			"But it's still a variable, which means, when you declare p",
			"with the code earlier, it actually does take up some bytes of memory",
			"on the screen.",
			"And so let me go ahead and propose that p happens to end up in memory here.",
			"Now, p is deliberately drawn to be longer here.",
			"I'm consuming eight total bytes this time,",
			"because it turns out, on modern computer systems, including CS50 IDE,",
			"pointers tend to take up eight bytes.",
			"So not one, not four, but eight bytes, so I've simply drawn it to be bigger.",
			"So what is actually stored in the variable p?",
			"Well, it turns out that, again, it's just storing the address of some value.",
			"So if the integer n, which itself is storing 50, is at location 0x123,",
			"and pointer p is being assigned that address, it's just like saying,",
			"well, stored in this variable p, is literally just a number",
			"represented here in hexadecimal notation, 0x123.",
			"So that's all that's going on inside the computer's memory",
			"with those two lines of code.",
			"There's nothing fundamentally new, except the fact",
			"that we have new syntax with which to refer to these addresses explicitly.",
			"This is n down here.",
			"This is p up here.",
			"And the value of p just happens to be an address.",
			"Now, I keep saying that these addresses are a little cryptic.",
			"They're a little arbitrary.",
			"And they are.",
			"And honestly, it is rarely, if ever, going to be enlightening to know,",
			"as a human, what address this integer n is actually at.",
			"Who cares if it's at 0x123 or 0x456?",
			"Generally, we don't.",
			"And so computer scientists, when talking about computers' memory,",
			"tend not to talk at these low level details, in terms of actual numbers. ,",
			"Instead, they tend to simplify the picture,",
			"sort of abstract away all of the other memory, which frankly, is not",
			"relevant to the discussion thus far, and just",
			"say, you know what, I know that p is storing an address.",
			"And that address happens to be that of 50 down here.",
			"But I really don't care, in my everyday programming life,",
			"what these specific addresses are.",
			"So you know what?",
			"Let's just abstract it away as an arrow.",
			"And again, abstraction is all about simplifying lower level details",
			"that you may very well need to understand but you don't necessarily",
			"need to keep thinking about.",
			"You don't need to keep thinking at this level.",
			"It suffices to think at this level.",
			"So we might as well draw a pointer, pictorially,",
			"as pointing at some value and irrespective of what",
			"the actual address is.",
			"And so this is very much the case in our human world.",
			"We have very similar conventions whether or not",
			"it might be obvious at first glance, such",
			"that we may very well be using these same mechanisms in our everyday lives.",
			"So for instance, if you happen to have a mailbox out in the street on your home",
			"or down in the basement of Harvard Science Center when on campus, it",
			"may very well look like something like this, at least more residentially.",
			"And suppose that this mailbox here is representing, in this case, p,",
			"in the story.",
			"It's storing a pointer, that is, the address of something else.",
			"Well, if there's a whole bunch of other mailboxes on the street,",
			"well, we can put anything we want in these mailboxes.",
			"We can put postcards, letters, packages even.",
			"And just as in the real world, can we do the same in the virtual.",
			"I can store chars or integers or other things, including addresses.",
			"So for instance, Brian, I think you have your own mailbox somewhere else.",
			"And Brian, of course, has a mailbox that itself has a unique address.",
			"So Brian, for instance, what happens to be the unique address",
			"of the mailbox on your street there?",
			"BRIAN: Yeah, so here is my mailbox.",
			"It's labeled n.",
			"And its address is over here.",
			"The address of my mailbox appears to be 0x123.",
			"DAVID MALAN: Yeah, so my mailbox, too, has an address.",
			"Frankly, again, I don't really care about it.",
			"So I've not even put it on the mailbox here.",
			"But if my mailbox represents p, a pointer, and Brian's mailbox",
			"represents n, an integer, well, it should",
			"mean that if I look inside the contents of my pointer",
			"and I see the value 0x123, that is now my clue,",
			"a breadcrumb of sorts, that can now let me go look inside of Brian's mailbox.",
			"And Brian, if you wouldn't mind doing that for us,",
			"what do you have at that address?",
			"BRIAN: And if I look in my mailbox at address 0x123,",
			"I have the number 50 inside of this mailbox.",
			"DAVID MALAN: Yeah, indeed.",
			"So in this case, he happens to be storing an int.",
			"But it could be anything else.",
			"And again, we don't typically care about these specific addresses.",
			"Once you understand the metaphor, really, we can do something silly",
			"and really just think of this mailbox as storing a value that's",
			"pointing at Brian's mailbox.",
			"It's some kind of direction drawn there, pictorially as an arrow,",
			"here as a silly foam finger.",
			"Or if you prefer, a foam Yale finger pointing, instead, at Brian's mailbox,",
			"just as a sort of breadcrumb leading us to some other value on the screen.",
			"So when we talk today and beyond about addresses,",
			"that's all we're talking about.",
			"We humans in the real world have been using addresses for eons, now,",
			"to uniquely identify our homes or businesses or the like.",
			"Computers do the exact same thing at a lower level",
			"using their computer's memory.",
			"So let me pause here to see if there are any questions on pointers, variables",
			"that store addresses, or on these new operators,",
			"like the ampersand or the asterisk, which",
			"now has a new meaning today onward.",
			"Nothing yet.",
			"All right, seeing none, well, let's consider now,",
			"the same story in the context of a completely different data type.",
			"Thus far, we've played only with ints.",
			"But consider strings.",
			"We've spent a lot of time on strings, using encryption with them",
			"and solving implementing electoral algorithms using user's input.",
			"So let's consider a fundamentally different data",
			"type that stores, not individual integers, but strings of text instead.",
			"So for instance, in any program involving a string,",
			"you might have a line of code that looks like this. string s equals, quote",
			"unquote, \"HI!\"",
			"in all caps with an exclamation point.",
			"So that may very well be a line of code that we've seen thus far.",
			"What's actually going on inside of the computer's memory?",
			"Well, let me propose that when you type in quote unquote, \"HI!\" in a computer,",
			"it ends up somewhere in your computer's memory.",
			"So HI exclamation point, plus, per last week, a backslash 0-- or two weeks ago,",
			"a backslash 0, which is how a computer represents the end of that string.",
			"But let's look a little more carefully at",
			"what is going on underneath this hood here.",
			"Technically speaking, I could address those individual characters",
			"we have seen as of week two, by using bracket notation like s bracket 0,",
			"s bracket 1, s bracket 2, and s bracket 3.",
			"We use the square bracket notation to treat a string",
			"as though it's an array of characters.",
			"And it is, it was, and it still is.",
			"But it turns out, strings can also be manipulated by way of their addresses",
			"as well.",
			"And so for instance, maybe this same exact string, HI,",
			"is stored at memory address 0x123 and then 0x124, 0x125, and 0x126.",
			"Notice that they're deliberately contiguous",
			"addresses, back to back to back.",
			"And they're only one byte apart, because each of these chars, of course,",
			"is just one byte in C.",
			"So those numbers are not important, specifically.",
			"But the fact that they're one byte apart from each other",
			"is important, because that's the definition of a string,",
			"and indeed, an array, to have memory back to back to back.",
			"Now, what exactly, though, is S?",
			"S was the name of the variable I gave a moment ago to go to that line of code,",
			"string S equals quote unquote, \"HI.\"",
			"well, what is S?",
			"S is a variable that has to go somewhere in the computer's memory.",
			"And suppose that S is, indeed, HI with an exclamation point.",
			"And the HI happens to live at this location here.",
			"You know what you can think of S as being now,",
			"isn't, at a high level, a string, but at a lower level,",
			"it's just the address of a string.",
			"More specifically, let's start thinking about a string",
			"as technically being just the address of the first character in the string.",
			"Now, that might give you pause for a moment,",
			"because why the first character?",
			"How are you going to remember that, wait a minute, this string isn't at and only",
			"at 0x123.",
			"It also continues at 0x124, 0x125, and so forth.",
			"But let me pause and ask the group here, why",
			"might it very well be sufficient for a computer",
			"and us programmers to just think of strings in terms of being",
			"the address of the very first byte.",
			"Like, why is it sufficient, no matter how long",
			"the string is, even if it's a whole paragraph of text,",
			"why is it very cleverly sufficient to think of a string like S",
			"as just being identical to the address of the first byte?",
			"Ginni, is it?",
			"AUDIENCE: Possibly because it happens that strings, whenever we are defining",
			"a new string, that is altogether.",
			"Suppose, if I'm writing my name, Ginni, so it will be G-I-N-N-I altogether.",
			"So it will be sufficient if something is pointed",
			"towards just first character of my name, so that I can just",
			"follow up for the first character and then get all the characters afterwards.",
			"DAVID MALAN: Perfect.",
			"So all of these basic definitions we had over the past couple of weeks",
			"now come together.",
			"If a string is just an array of characters--",
			"and by definition of array, those characters are back",
			"to back to back, and per two weeks ago, every string",
			"ends with this conventional backslash zero or nul character.",
			"All you need to do when thinking about a string",
			"is just to know where does the string begin,",
			"because you can use a four loop or a while loop",
			"or some other heuristic with a condition and a Boolean expression",
			"to figure out where the string ends without even knowing,",
			"in advance, its length.",
			"So that is to say, let's start, for the moment,",
			"thinking of about strings as being quite simply",
			"that, just the address of the first character in the string.",
			"And if we then take that as fact, let's go ahead, now,",
			"and start playing with a program that doesn't use integers, but instead,",
			"used strings, using this basic primitive.",
			"So let me go ahead and delete the code I'd written before, an address.c.",
			"Let me just change it up to be string equals quote unquote, \"HI\" semicolon.",
			"And notice, I'm not manually typing any backslash 0's.",
			"C does that for us automatically.",
			"When you close the quote, the compiler takes care",
			"of adding that backslash 0 for you.",
			"Now, I'm going to go ahead on the next line",
			"and go ahead and print out percent s backslash n comma s,",
			"if I want to print out that string.",
			"Now, this program is not at all interesting anymore.",
			"Back in week one, we wrote something like--",
			"OK, yes it is interesting because I screwed up.",
			"So five errors.",
			"I've written seven lines of code and five errors.",
			"And let's see what's going on.",
			"As always, always go to the top, because odds are,",
			"there's just some confusing cascading effect.",
			"The very first error I see is use of undeclared identifier string.",
			"Did I mean standard n?",
			"I didn't mean standard n, string, string, string.",
			"So I could run help 50 as my frontier, but honestly, I",
			"make this mistake often enough that I kind of know now",
			"that I forgot to include cs50.h.",
			"And indeed, if I now do this and recompile make address--",
			"OK, all five errors are gone just by that one simple change.",
			"And if I run address now, it's just going to, quite simply, say HI.",
			"But let's now start to consider what's going",
			"on underneath the hood of this program.",
			"Suppose I am curious and want to print out what is actually",
			"the address at which this string lives.",
			"Well, it turns out--",
			"let me be clever here.",
			"Let me print out, not a format code of percent s, but percent p.",
			"Show me this same string as an address.",
			"Let me go ahead and recompile, make address, seems to compile OK.",
			"Let me run dot slash address.",
			"And again, I'm still printing s, but I'm asking printf",
			"to present it as though it's a pointer.",
			"And interesting, it's not the same as before.",
			"But again, that's reasonable because the memory addresses",
			"aren't going to always be the same.",
			"But it doesn't matter what it is.",
			"But that's kind of interesting.",
			"All this time, any time you've been using strings,",
			"had you just changed your percent s to a percent p,",
			"you could have seen where, in memory, that string actually starts.",
			"It's not functionally useful to us just yet.",
			"But it's been there this whole time.",
			"And let me go ahead and do the following now.",
			"Suppose I get a little curious further, and I do printf.",
			"Let me go ahead and print out another address followed by a new line.",
			"And let me go ahead and print out the address of the first character.",
			"So again, this is a little weird to do.",
			"And we wouldn't typically do this that often.",
			"But again, just to make the point that these operators give us very simple",
			"answers to questions like, what is the address of this thing?",
			"If s bracket i, as of week two in CS50, represented the second character in s,",
			"because 0 index means s bracket 0 is the first, s bracket 1 is the second.",
			"If I play around with today's new operator,",
			"this ampersand, I bet I can see the address of that second character.",
			"And in fact, let me go ahead and be more explicit.",
			"Let me change this first s to be s bracket 0 and put an ampersand here.",
			"And let me go ahead, now, and make this program, make address.",
			"OK, a little funky--",
			"I just missed a semicolon.",
			"So easy fix there.",
			"Let me go ahead and recompile with make address.",
			"Let me go ahead and run dot slash address.",
			"And interesting, well, maybe--",
			"interesting to me.",
			"So you see, now, two addresses, the first of which",
			"is 0x4006a4, which apparently, is the address of the first character in s.",
			"But notice what's curious about the next one.",
			"It's almost the same except the byte is one further away.",
			"And I bet if I do this, not just for the h and the i,",
			"but also the exclamation point-- let me do",
			"one more line of almost identical code, just",
			"to make the point that all this time it's, indeed,",
			"been the case that all characters in a string are back to back to back.",
			"And you can now see it in code.",
			"b4, b5, b6, are just one byte apart.",
			"So we see some visual confirmation, now, that strings are indeed",
			"laid out in memory just like this.",
			"Now, again, this is not a very useful programmatic exercise",
			"to look at the address of individual characters.",
			"But again, this is just to emphasize that underneath the hood,",
			"some relatively simple operations are being",
			"enabled by way of this new ampersand, and in turn, star operator.",
			"So let's consider for a moment what this really looks",
			"like inside the computer's memory.",
			"At a low level, yes, s is technically an address.",
			"And yes, it's technically the address of the first byte,",
			"which in the actual computer, looked different.",
			"But in my slide here, I just arbitrarily proposed",
			"that it's at 0x123, 0x124, 0x125.",
			"But again, let's not care about that level of detail.",
			"Let's just kind of wave our hands and abstract away these addresses",
			"and just now start thinking of s, that is a string, as technically just being",
			"a pointer.",
			"A pointer.",
			"So it turns out that even though it's very useful and very common",
			"to think of strings as, obviously, just being sequences of characters.",
			"And that's been true since week one.",
			"And you can also think of them as arrays,",
			"back to back sequences of characters.",
			"You can also, it turns out, starting today,",
			"think of them as just being pointers, that is,",
			"the address of a character somewhere in the computer's memory.",
			"And as Ginni notes, because all of the characters in a string",
			"are, by definition, back to back to back,",
			"and because, by definition, all strings end with a backslash 0, that",
			"is literally the smallest and only amount of information",
			"you need to keep around in a computer to know where all of your strings are.",
			"Just remember the address of the very first character",
			"therein, because you can find your way to the end",
			"by remembering that this backslash 0 is, really, just eight 0",
			"bits, otherwise represented as backslash 0.",
			"And so we could certainly have an if condition,",
			"much like we did two weeks ago when playing around",
			"with the lengths of strings, that allows us to check for precisely that.",
			"And so when I say we're taking off some training wheels, here they go.",
			"So up until now, we've been using, again, the CS50 library,",
			"which gives us, conveniently, functions like get string and get int",
			"and get float and so forth.",
			"But all this time, the CS50 library, specifically the file, cs50.h,",
			"had a little bit of a pedagogical simplification in it.",
			"Recall last week, that you can define your own custom data types.",
			"Well, it turns out that all this time, we've been claiming that strings exist",
			"and they're something you can use in your programs.",
			"And strings do exist in C. They do exist in Python, in JavaScript, in Java,",
			"and C++, in many, many, many other languages.",
			"This is not a CS50 term.",
			"But string, technically, does not exist as a data type in C. It instead,",
			"is more cryptically and more low-level known as char star.",
			"Char star, now what does that mean?",
			"Well, char star, much like our int star a few minutes ago,",
			"just represents the address of a character, much like int star",
			"represents the address of an int.",
			"And if, again, you kind of agree with me now,",
			"that you can think of strings as sequences of characters,",
			"or more specifically, arrays of characters, or more specifically,",
			"as of today, the address of just the first character,",
			"then it's, indeed, the case that we now can",
			"apply this new terminology, today, of pointer,",
			"to our old familiar friends, strings.",
			"String is the same thing as a synonym, if you will, for char star.",
			"And it's in the CS50 library that we, essentially, have a line of code",
			"that simplifies or abstracts away char star, which honestly, no one wants",
			"to think about or struggle with in the first week of a class,",
			"let alone the first two or three weeks of a class.",
			"It's a simplification, a custom data type, that we name string,",
			"just so you don't have to think about, what is this star?",
			"What is it to the character?",
			"What is it an address of?",
			"But today, we can remove those training wheels and reveal that, all this time,",
			"you've just been manipulating characters at specific addresses.",
			"And we've used this kind of technique before,",
			"abstracting away these lower level details.",
			"For instance, recall last week, that we introduced",
			"this notion of a struct, a data type that you can customize to be your own.",
			"We implemented a better phone book by wrapping together",
			"a name and a number inside of a custom data type,",
			"encapsulating them if you will, inside of something we called person.",
			"And every person we claimed had a structure",
			"that contains a name and a number.",
			"And by the way of this feature of C, typedef, we can define a new type.",
			"And the name of that type, last week, was just person.",
			"So we're using, already, and we have been sort of secretly",
			"using since the first week of C in the class, a line of code that",
			"actually looks like this.",
			"And this is, indeed, one of the lines of code inside of cs50.h.",
			"It says typedef, which means give me a custom type.",
			"And it creates a synonym for char star called string.",
			"And it's just a way where we can hide the funky char star.",
			"We can hide the asterisk, in particular, which would not",
			"be fun to play with in the first few days,",
			"but without changing the definition of what a string is.",
			"So strings exist in C. But there's no data type called string in C",
			"until you use a library like CS50's, which makes it exist",
			"by way of that kind of definition.",
			"All right, let me pause here to see if there's",
			"any questions, then, about what strings are",
			"or these new ways of thinking about them.",
			"Any questions about strings or char stars?",
			"All right, well, if no questions here, why",
			"don't we go ahead and take our 5 minute break here first.",
			"And we'll be back in 5 and take another look",
			"at what we can now do with these new primitives.",
			"All right, we're back.",
			"And we have, now, this ability in code to get the address of some variable",
			"and also to go to an address using ampersand",
			"and the asterisk, respectively.",
			"We've thought about strings as being not only contiguous sequences",
			"of characters, but also arrays.",
			"And then of course, as of today now, actual addresses,",
			"the address of the first character and then, from there,",
			"can we find our way, programmatically, to the end,",
			"thanks to that nul character.",
			"But it turns out there's one other thing we can do with these addresses",
			"or with pointers more generally.",
			"And that's known as pointer arithmetic.",
			"So anything that's a number, of course, we can do math on.",
			"And the math is not going to be complicated,",
			"but it is going to be powerful for us here.",
			"So I'm going to go back to my most recent state of address.c.",
			"And let me go ahead, now, and reiterate that we can print out",
			"the individual characters in a string, just like we did back in week two,",
			"as by using our square bracket notation.",
			"So I'm getting rid of all evidence of those addresses for now.",
			"I'm recompiling this program as make address.",
			"And then I'm going to run dot slash address now.",
			"And I see HI exclamation point, one character per line.",
			"But now, consider that there doesn't need to be a string data type.",
			"In fact, we can take this training wheel off.",
			"And while it might feel a little uncomfortable at first,",
			"if I delete this first line altogether, as I've accidentally omitted anyway",
			"sometimes, I don't need to keep calling things strings.",
			"I can describe them as strings verbally.",
			"I can think of them as strings, because string",
			"is a thing in many different programming languages.",
			"But by default, in C, it just doesn't exist as a type.",
			"Instead, the type is somewhat cryptically named, char star.",
			"But again, all that means is that the star means here's",
			"the address of something.",
			"Char means it's the address of a char.",
			"So char star gives you a pointer variable",
			"that's going to point to a character.",
			"So now, if s is that, I can actually treat it the same.",
			"There's no reason I can't keep using s like a string was back in week two,",
			"using our square bracket notation.",
			"And I can keep printing out HI exclamation point",
			"using that same square bracket syntax.",
			"But there's one other way I can do this.",
			"If I now know that s is really just an address,",
			"I can get rid of this square bracket notation.",
			"And I can actually just do star s, because recall that star, in addition",
			"to being the new symbol that we use when declaring a pointer up here,",
			"it's also the same symbol, confusingly, admittedly,",
			"that we used to go to an address.",
			"So if s is storing an address, which it is by definition of being a pointer,",
			"star s means go to that address.",
			"And per my picture earlier, it would seem",
			"to be the case that s is most likely at an address beginning at 0x123.",
			"It's not going to be the same in my actual IDE here.",
			"It will be whatever the computer has ordained.",
			"But it's going to be the same exact idea.",
			"So let me go ahead and go to star s.",
			"And just for kicks, let me leave it as just that one line.",
			"So let me go ahead and rerun this as make address.",
			"All right, and now dot slash address.",
			"I should see, hopefully, a capital H and only an H. But watch this.",
			"If I know that s, a string, is technically just an address,",
			"I can actually now do math on it.",
			"And I can go ahead and print out another character, followed by a new line.",
			"And I can go to, not s, but how about s plus 1.",
			"So I can do some very simple arithmetic, if you will, on that pointer.",
			"And let me go ahead and now recompile this.",
			"So make address, compiles OK, dot slash address.",
			"And I should see HI.",
			"And if I do one more line of code like this, printf, percent c, backslash n,",
			"star s plus 2, I can now go to the character",
			"that is two bytes away from whatever s is,",
			"which again, is the start of the string.",
			"So now, I've reprinted HI with the exclamation point character",
			"by character, but not by using this fancy square bracket",
			"notation, fancy only in the sense that it was sort of an abstraction for us,",
			"if you will.",
			"I'm instead, manipulating s for what it really is, which is just an address.",
			"And so here, too, and I've used this phrase before,",
			"that square bracket notation that we introduced in week two,",
			"is technically just syntactic sugar.",
			"It's not doing anything fundamentally different",
			"from these asterisks and these addresses.",
			"It's just doing it, honestly, in a much more user-friendly way.",
			"I still prefer, personally, the square bracket notation from week two.",
			"But it's the same thing as using the star and doing this math yourself.",
			"So C is just providing us with this handy feature",
			"of using square brackets that does all of this so-called pointer",
			"arithmetic for you.",
			"But again, we're going to this low level just",
			"to emphasize what it is that's going on ultimately underneath the hood here.",
			"All right, let me pause here for any questions.",
			"And Brian, please do feel free to verbalize any on your end.",
			"BRIAN: I see a question that came in about what would happen",
			"if you tried to print star s plus 3.",
			"DAVID MALAN: So I'm pretty sure that's going to print out the nul character.",
			"But let's go ahead and confirm as much here,",
			"percent c backslash n star s plus 3.",
			"All right, I'm getting a little adventurous here",
			"by looking at things I maybe shouldn't be looking at, because that's",
			"a low level implementation detail.",
			"But let's see what happens.",
			"It compiles OK, dot slash address.",
			"And it seems to be blank.",
			"Now, maybe that's the nul character.",
			"Honestly, it's not meant to be a printable character.",
			"It's this special sentinel value that indicates the end of the string.",
			"But I could do this.",
			"I know from week two that chars are integers",
			"and integers are chars if I want to think of them that way.",
			"So let me change only the very last character",
			"to use the format code percent i.",
			"Let me recompile my code.",
			"Let me go ahead and run address.",
			"And voila, HI exclamation 0.",
			"And there is the all 0 bits represented here as one single decimal digit thanks",
			"to percent i.",
			"Now, I can get really crazy here.",
			"And why don't we go ahead and print out not just what characters",
			"are right after this sequence, HI exclamation point nul character,",
			"why don't we go to-- oh heck, how about address 1,000 bytes away,",
			"and really get nosy inside of my computer?",
			"Let me recompile that dot slash address.",
			"OK, nothing really going on over there.",
			"How about 10,000 bytes away?",
			"Let me go ahead and make address.",
			"Let me go ahead and run this segmentation fault. All, right",
			"that's bad.",
			"And you might be among the fortunate few who have seen this error before",
			"by touching memory you shouldn't.",
			"And we're going to deliberately consider this today.",
			"But a segmentation fault, indeed, means that you have done something",
			"wrong somewhere in your code.",
			"And it tends to mean that you touched a segment of memory",
			"that you shouldn't have.",
			"And I have no business, honestly, looking 10,000 bytes away",
			"from the memory that I know belongs to the string.",
			"That's like arbitrarily looking anywhere in your computer's memory,",
			"which probably, it seems, is not a good idea.",
			"But more on that in just a bit.",
			"So let's consider, now, some of the implications",
			"of these underlying implementation details",
			"and consider, now, from last week, why we did a few things the way",
			"we did in the past few weeks, in fact.",
			"So string is just a char star.",
			"And let's, now, consider an example.",
			"Let me zoom out on my memory, just so I can cram more in at once.",
			"Let's consider an example where I might want to write",
			"a program that compares two strings.",
			"Let me go ahead and write some new code here in a new file this time,",
			"called, for instance, compare.c.",
			"My goal with this program, quite simply, is",
			"going to be to print out the contents of-- or rather to compare",
			"two strings that the user might input.",
			"I'm going to go ahead and include cs59.h,",
			"not because I want string, per say, anymore,",
			"but because I want to use get string just for convenience.",
			"But we'll take that training wheel off in a bit, too.",
			"And in this program, I'm going to go ahead and first",
			"use, not get string yet.",
			"Let me go ahead and keep it simple and start with get int.",
			"And I'll ask the user for a variable i.",
			"And let me do another one of these in get int and ask",
			"the user for a value for j.",
			"And then let me go ahead and quite simply say, if i equals equals j,",
			"then go ahead and print out same else.",
			"Let me go ahead and print out different.",
			"So this is week one stuff, where I'm using a couple of variables.",
			"I'm using a condition with two branches, and I'm",
			"using printf to print out whether those two variables, i and j, are the same.",
			"So let's go ahead and compile this.",
			"All is well.",
			"Run compare, and let me give it digits 1 and 2.",
			"And indeed, they're different.",
			"And let me go ahead and give it 1 and 1, and they're the same.",
			"So I think, logically, proof by example, if you will,",
			"this program looks correct.",
			"But let me quickly make it seemingly uncorrect, by not using integers.",
			"But how about, by using strings instead.",
			"Let me go ahead and give myself a string.",
			"Although, no, I don't need that training wheel anymore.",
			"Let's just do char star s equals get string of s.",
			"But again, even though I'm calling it char star,",
			"it's still a string like it was weeks ago.",
			"Let me give myself another string called t, just to keep the name short.",
			"And s will get--",
			"t will get that value there.",
			"And let me just, very naively but kind of reasonably,",
			"say if s equals equals t, let's go ahead and print out same.",
			"And otherwise, let's go ahead and print out different.",
			"So same exact code, just different data types, and using",
			"get string instead of get int.",
			"Let me go ahead and make compare, seems to compile OK, dot slash compare.",
			"Let me go ahead and type in HI!--",
			"woops, HI!.",
			"Let me go ahead and type in HI! again.",
			"And voila, different.",
			"And I forgot my backslash n's, but that seems to be the least of my problems.",
			"Let me recompile this, make compare, and now, let me run it again.",
			"How about, let's do a quick test.",
			"David, Brian, these are definitely different.",
			"OK, good.",
			"So the program seems to work.",
			"How about David, David?",
			"Also different.",
			"Huh, let me try again.",
			"Brian, Brian, also different.",
			"But I'm pretty sure those strings are the same.",
			"Why might this program be flawed?",
			"What is wrong with this program right now?",
			"BRIAN: A couple of people in the chat are",
			"saying that we're not actually comparing the characters,",
			"we're comparing the addresses.",
			"DAVID MALAN: Yeah, so that's sort of the logical conclusion from today's",
			"definition of what a string really is.",
			"If a string is just the address of its first character,",
			"then if you're literally doing s equals equals t,",
			"you're comparing those two addresses.",
			"And they are probably going to be different,",
			"even if I type in the same thing, because every time we've",
			"called get int or get string, it's kind of plopped the user's input",
			"somewhere in my computer's memory.",
			"But we now have the tools, honestly, to answer this or vet this answer",
			"ourselves.",
			"Let me go ahead and simplify this program.",
			"And let's, just as a quick sanity check, print out s.",
			"And let's go ahead and print out t using a new line after each,",
			"just so we can see what the strings are.",
			"So let me go ahead and do this again, make compare, compiles OK, dot slash",
			"compare.",
			"Let me type in HI, HI.",
			"And they seem to be visually the same.",
			"But recall that, now, I have this other format code,",
			"such that I can now start treating strings",
			"as the addresses they technically are.",
			"So let me change percent s to percent p in both places.",
			"Let me then recompile the program, and now, rerun compare with both HI and HI",
			"identically typed.",
			"But notice, they've ended up at slightly different memory locations.",
			"Even though I have coincidentally typed the same thing, C and my computer",
			"are not going to be so presumptuous as to use the same bytes for both strings.",
			"That's not going to give me much flexibility",
			"if I want to change one or the other.",
			"It's going to very simplistically put one in this chunk of memory",
			"and the other in this chunk of memory.",
			"And indeed, those addresses are respectively, but arbitrarily,",
			"0x22fe670 and 0x22fe6b0.",
			"",
			"So they are spread apart some distance.",
			"But again, it's up to the computer to decide where to actually put those.",
			"So what's actually going on inside of the computer's memory?",
			"Well, let's consider if, for instance, this is s, my pointer, or really,",
			"my string.",
			"But it's just a pointer now.",
			"It's the address of something.",
			"Notice that I've drawn it as taking up eight squares,",
			"because again, a pointer on modern systems is eight bytes.",
			"So that's why this thing is so big.",
			"Meanwhile, when I type in something like HI with the exclamation point,",
			"then it ends up somewhere in memory.",
			"We don't really know or care where it is.",
			"So let's just arbitrarily say it happens to end up there",
			"in my computer's memory.",
			"Now, each of those bytes, of course, has an address.",
			"I don't necessarily know or care what they are.",
			"But for explanation's sake, let's just number them again like before,",
			"0x123, 0x124, 0x125, 0x126.",
			"When I then assign s on the left the value from get string on the right,",
			"get string, what is it going to do?",
			"Well, all of this time since week one, since you've been using it,",
			"it is, yes, getting a string and handing it back to you as a return value.",
			"But what does that really mean?",
			"Well, if a string is just an address, the return value of a function",
			"like get string is to return to, not the string per se, because that's",
			"kind of a high level concept.",
			"What get string has always been doing for us",
			"is returning the address of the string, or more",
			"specifically, the address of the first character in the string.",
			"And so what is technically stored in s, to be clear, is that address, 0x123.",
			"It's not returning to the whole string, the H, the I, the exclamation point.",
			"Rather, it's returning just one value to you.",
			"It's returning only to you the address of the first character of that string.",
			"But again, this is all very good for just s.",
			"What's going on with t?",
			"t is kind of the same story, because I'm calling get string again.",
			"t is going to get assigned the address of the first character",
			"of this version of HI.",
			"And let's just arbitrarily say it's at 0x456, 0x457, 0x458, and 0x459.",
			"And at this point, t is going to take on the value of 0x456.",
			"And now, at this point, honestly, we're really getting into the weeds.",
			"Let's just start abstracting all of this away",
			"and use arrows to point at the values.",
			"And indeed, these arrows just represent pointers",
			"when we stop caring about the particular addresses.",
			"So s is really just a pointer, a variable pointing",
			"at the first character of HI here.",
			"t is just a variable pointing at the first character of HI there.",
			"And so when you are comparing two strings",
			"as I was before in the earlier version of my program,",
			"where I was checking if s equals equals t, I was, indeed, comparing s and t.",
			"What are s and t?",
			"s and t, respectively, are 0x123 and 0x456,",
			"or whatever the actual values happen to be,",
			"which are not going to be the same because they happen",
			"to point to different chunks of memory.",
			"All right, well who cares?",
			"This is all kind of a nice intellectual exercise.",
			"But who cares?",
			"Well, how do we solve this problem?",
			"Let's consider what I actually did in a previous demo.",
			"I sort of preemptively mentioned that there's this function, string compare,",
			"that allows you to compare two strings.",
			"And I promised that we would eventually explain",
			"why we use str compare as opposed to just using the equal equal sign.",
			"Well, to use this function, I'm going to need to add",
			"in string.h up here per lat time.",
			"But if string compare s t, let me go ahead and recompile this,",
			"compare dots slash compare.",
			"Now, let me type HI! and HI! identically.",
			"Now, they still seem to be different.",
			"And dammit, I made the same stupid mistake as I did last time.",
			"Does anyone know what mistake I made when comparing two strings?",
			"Somehow I seem to be very good at making this mistake.",
			"BRIAN: Ibrahim is suggesting that you add an equal equal zero.",
			"DAVID MALAN: Thank you.",
			"Ibrahim is quite right.",
			"The return value, recall, of str compare,",
			"is to return 0 if they're the same, a negative number if one comes",
			"before the other, and a positive number if one comes after the other,",
			"as in ASCIIbetical order.",
			"So what I should have done, both last time and this time,",
			"is check for equality with 0.",
			"Let me go ahead and recompile this program.",
			"OK, good.",
			"Now, let me rerun this program with HI!",
			"twice.",
			"Voila, they're the same.",
			"And just to make sure, let me do one other check.",
			"Let me do David and Brian, which should be, indeed, different.",
			"So now, again, I haven't really done anything different from that last time.",
			"But I'm now thinking about these strings as being fundamentally just",
			"their addresses.",
			"And so, now, let's make this actually germane.",
			"Let me go ahead and create a new file altogether.",
			"And let's, pretty reasonably, try to copy one string and make changes to it.",
			"So I'm going to go ahead here.",
			"And just for convenience, I'm going to still use the CS50 library,",
			"not for the string data type, but just for the",
			"get string function, which we'll see is more handy than other things--",
			"than other ways of doing things.",
			"And I'm going to go ahead and include standard io dot h.",
			"And I'm going to go ahead and include, how about, string.h.",
			"Let me go ahead and do int main void.",
			"And let me go ahead, in this program, and get myself a string.",
			"But note, we won't call it string anymore.",
			"We'll just call it char star.",
			"So again, start taking off that training wheel.",
			"And I'm going to go ahead and get a string called s.",
			"And then I'm going to get another string.",
			"But I won't call it that.",
			"I'll call it char star t.",
			"And I want to copy s.",
			"And so you might think, based on week one, week two, and since, that OK,",
			"if you want to copy a variable, just do it.",
			"I mean, we've used the assignment operator",
			"to copy a variable from right to left for integers, for chars,",
			"and for other data types, perhaps, too.",
			"I'm going to go ahead, now, and make a change to the original string.",
			"So let me go ahead and do this.",
			"Let me go ahead and say, let's change the first character of t",
			"to be uppercase.",
			"Recall that there's this function, to upper,",
			"which takes, as input, a character, like the first character in t,",
			"and returns the uppercase version.",
			"Now, to use to upper, I need another header file,",
			"which I recall from a couple of weeks ago now, I need ctype.h.",
			"So let me preemptively go back and put that there.",
			"And now, let me go ahead and print these two strings.",
			"Let me go ahead and print out s as being this percent s.",
			"And let me go ahead and print out the value of t with percent s as follows.",
			"So again, what I'm doing is I'm getting a string from the user.",
			"And the only new thing here is char star today, which is synonymous with string.",
			"On line 10 here, I'm copying the string from right to left.",
			"And then I'm capitalizing only the first letter",
			"in the copy, otherwise known as t.",
			"And then I'm just printing both out.",
			"So let me go ahead and make copy, compiles OK.",
			"Make cop-- dot slash copy.",
			"Let me go ahead and type in hi! in lowercase, all lowercase,",
			"and then enter.",
			"And voila, huh.",
			"It would seem that I somehow capitalized both S and T, even though I only",
			"called to upper on T. Brian, any thoughts",
			"from the group on why I've accidentally and erroneously capitalized",
			"both somehow?",
			"BRIAN: A couple of people are saying that t is just an alias of s.",
			"DAVID MALAN: Just an alias of s, that's a reasonable way of thinking of it,",
			"sure.",
			"And more precisely, any other thoughts on why this is incorrect somehow?",
			"BRIAN: Peter is now suggesting that they have the same address.",
			"DAVID MALAN: So yeah, more specifically, all I've done is copy s into t.",
			"But again, what is s as of today?",
			"It's just an address.",
			"So yes, I have copied s.",
			"But I've copied it literally, which means copying its address, 0x123,",
			"or whatever it is.",
			"And then on line 12, notice that I'm changing t by uppercasing it.",
			"But t is at the same address of s.",
			"So really, I'm changing one in the same string.",
			"So if we think about this in terms of the computer's memory,",
			"let's consider what I've just done.",
			"Let me clear the computer's memory.",
			"Let me put s down as before.",
			"Let me put hi! down as before, but all lowercase this time.",
			"And recall that it might be it addresses 0x123, 124, 125, and 126.",
			"And now, if we consider that s technically",
			"contains the address of that first character, 0x123,",
			"and I proceed to create a new variable, t, and assign t the value of s,",
			"I got to take that statement literally.",
			"I'm literally just putting 0x123 here.",
			"And if we now abstract away these details just",
			"to make it more clear visually what's going on,",
			"that's pretty much like saying that both s and t point",
			"to the same location in memory.",
			"So yes, in that sense, t is just an alias for s,",
			"which is a reasonable way of thinking of it.",
			"But really, just t is identical to s.",
			"So when you use the square bracket notation",
			"to go to the first character of t, you are equivalently",
			"going to the first character in s.",
			"They are one in the same.",
			"So when I call to upper, I'm calling it on this character, which of course, is",
			"the one and only h in the story.",
			"And when I print s and I print t, printf is",
			"following those same breadcrumbs, if you will,",
			"and ultimately displaying the same value as having changed.",
			"So we would seem to need to fundamentally rethink",
			"how we are copying strings.",
			"And let me ask, if this is the wrong way to copy one string into the other, what",
			"is the right way?",
			"Even if you don't have the functions in mind or the right vocabulary,",
			"just intuitively, , if we want to copy a string in the way that a human would",
			"think of copying one into the other, like a photograph or a photocopy,",
			"how do we want to do this?",
			"Any thoughts, Brian?",
			"BRIAN: Yeah, Sophia suggested we would want to somehow loop over",
			"the elements in s and put them into t.",
			"DAVID MALAN: Yeah, I like that.",
			"So loop over the elements of s and put them into t.",
			"So it sounds like more work.",
			"But that's, again, what we're going to have",
			"to do if we want to think of these--",
			"if we want to accept the fact that these things, s and t, are just addresses,",
			"we're going to now have to go and follow those breadcrumbs.",
			"So let's go ahead and consider a variant of this program.",
			"Let me go ahead, here, and change this such that I'm still getting a string s.",
			"But now, let me go ahead and propose exactly that,",
			"that we copy the individual characters.",
			"But I need to copy them somewhere.",
			"So I feel like another step in this process of copying a string",
			"has to be to give myself some additional memory.",
			"If I have H i exclamation point in nul character,",
			"I need to, now, somehow take control of this situation",
			"and tell the computer somehow, in code, give me four more bytes of memory",
			"so that I have location for t in which to copy those characters.",
			"So here's a new function today.",
			"If I want to create a string t, otherwise known today as a char star,",
			"there is a new function we can use called malloc, which",
			"represents memory allocation.",
			"This is a pretty fancy function that, fortunately, is pretty simple to use.",
			"It takes, as input, just a number.",
			"How many bytes of memory do you want to ask the computer for?",
			"So how do I do this?",
			"Well, H i exclamation point backslash 0, I could literally just say four.",
			"But this doesn't feel very dynamic.",
			"I think I can programmatically implement this a little more elegantly.",
			"Let me go ahead and say, give me as many bytes",
			"as there are characters in s plus 1.",
			"Plus 1, why am I doing this?",
			"Well, H i exclamation point nul character, that's technically",
			"what's stored underneath the hood.",
			"But what do you and I think of the length of Hi! as being?",
			"Well, odds are, in the human world, it's H i exclamation point.",
			"And who cares about this low level detail, this nul terminator.",
			"You don't include that in the length of an English word or any word.",
			"You only think of the actual characters you can see.",
			"So the length of H, i, exclamation point 3.",
			"But I do need to cleverly add one more bite, a fourth, for the nul character,",
			"because I'm going to have to copy that over as well.",
			"Otherwise, if I don't have an identical nul character,",
			"t is not going to have an obvious ending.",
			"So how do I copy, now, one string into the other?",
			"Well, let me go ahead and take out our old friend, the for loop,",
			"from week one.",
			"And say, for i equals 0--",
			"how about, actually, n equals string length of s.",
			"We've done this trick before.",
			"i is less than n, i++.",
			"Let me go ahead and, quite simply, say t bracket i gets s bracket i.",
			"So this will literally copy, from s, each of the characters one at a time",
			"into t.",
			"But I need to be a little smarter now.",
			"Even though we almost always do i less than n,",
			"I'm actually going to very aggressively say i less than or equal to n.",
			"Why?",
			"Why am I going one step further than I feel we normally",
			"do when iterating over strings, and one step further than you",
			"probably did when iterating over a caesar cipher or a string",
			"in that context?",
			"Brian, any thoughts here?",
			"Why am I going from i less than or equal to n kind of for the first time here?",
			"BRIAN: Celina is suggesting that we need to include the nul character.",
			"DAVID MALAN: Yeah, so if I-- and now I understand how strings works.",
			"So it's not sufficient to just copy the H, I, exclamation point.",
			"I need to go one step further, one more than the length of the string.",
			"And the easiest way to do that would be less than or equal to n.",
			"Or I could just do a plus 1 there.",
			"Or I can do this any number of ways.",
			"Doesn't matter how you do it.",
			"But I think a less than or equal to is one reasonable way to do it.",
			"And now, let's go down to the bottom here and now actually",
			"do this capitalization.",
			"Let's now change the first character in t",
			"to be the result of calling to upper on the first character of t.",
			"And then, as before, let's go ahead and print out whatever s is.",
			"And like before, let's go ahead and print out",
			"whatever t is and hope now that only t has been capitalized.",
			"But I do need to make one change now.",
			"It turns out that this function, malloc, comes",
			"in a file called standard lib dot h.",
			"And again, this is the kind of thing that you can jot down in notes.",
			"You can always Google these kinds of things.",
			"Even I forget what header files these functions are sometimes declared in.",
			"But it happens to be a new one called standard lib for library",
			"that gives you access to malloc.",
			"So let me go ahead, now, and make compare.",
			"All right, so far so good.",
			"Dot slash compare-- sorry, this is not compare.",
			"The old program works fine.",
			"Make copy-- oh my god, seven mistakes.",
			"What'd I do wrong here?",
			"Oh, it looks like I forgot the type of i and n.",
			"So let me go into my for loop and add the int.",
			"That was my fault. Let me make copy again.",
			"OK, all seven errors, thankfully, went away.",
			"Make copy, let's go ahead and type in hi! in lower case and hit Enter.",
			"And voila, now I have capitalized only the copy of s, a.k.a.",
			"t.",
			"And just to be clear, I've kind of regressed back",
			"to my square bracket notation, honestly, because it's perfectly acceptable.",
			"It's very readable.",
			"But notice, if I really want to show off,",
			"I could say something like, well, go to t's plus i location.",
			"And then do this, which again, I don't necessarily recommend for readability.",
			"But again, there is this equivalence.",
			"The square bracket notation is the same thing as pointer arithmetic.",
			"So if you want to go to the address at t plus whatever i is to offset yourself",
			"one or more bytes, you can totally do that.",
			"And if I want to be fancy, I can go down here and say,",
			"go to the first character in t and capitalize it.",
			"But again, I would argue that even though, yes, you're very clever",
			"and that you understand pointers and addresses at this point",
			"if you're writing code like this.",
			"Honestly, it's not necessarily as readable.",
			"So sticking with week two syntax of the square bracket notation, totally",
			"reasonable, totally correct, totally well-designed, and perhaps preferable,",
			"though I should be careful here.",
			"This line of code is a little bit risky for me",
			"because what if the user just hits Enter and they don't type hi",
			"or David or Brian.",
			"What if they type nothing except Enter?",
			"In that case, the length of the string might be 0.",
			"And then I probably shouldn't capitalizing the first character",
			"in a string that doesn't really even exist.",
			"So I should probably have some error checking,",
			"like if, for instance, the string length of t is at least greater than 0,",
			"then go ahead and safely do that.",
			"But again, this is just one example of some additional error",
			"checking I can add to the program.",
			"There's actually one more piece of error checking",
			"I should really do in a fully correct program,",
			"as you should do in problem sets.",
			"Sometimes things can go wrong.",
			"And if your program is so big, so fancy, and so memory-hungry",
			"that you're mallocing lots and lots of memory,",
			"which you won't do in the program this small,",
			"but over time you might need more and more memory,",
			"we should also make sure that t actually has a valid address.",
			"It turns out that malloc, most of the time,",
			"is going to return to you the address of a chunk of memory",
			"it has allocated for you.",
			"Just like get string, it will return to you",
			"the address of the first byte of the chunk of memory",
			"that it has found space for.",
			"However, sometimes things can go wrong.",
			"Sometimes your computer can be out of memory.",
			"You've probably seen your Mac or PC freeze or hang or reboot itself.",
			"That is very often the result of memory errors.",
			"So we should actually check something like this.",
			"If t equals equals this special value nul,",
			"then I'm going to go ahead and just bail out and return one,",
			"quit, let's get out of the program.",
			"It's not going to work.",
			"This might only happen one out of a million times.",
			"But it's more correct to check for nul.",
			"Now, unfortunately, the designers of C kind of used-- or programmers",
			"more generally, use this word, which is almost the same as N-U-L,",
			"otherwise known as backslash 0.",
			"Unfortunately, this is a different value.",
			"N-U-L-L represents a nul pointer.",
			"It is a bogus address.",
			"It is the absence of an address.",
			"Technically, its address 0.",
			"It is different from backslash 0.",
			"You use N-U-L-L in the context of pointers, as we are doing today.",
			"You use backslash 0, otherwise known verbally,",
			"as an N-U-L, or nul, in the context of characters.",
			"So backslash 0 is for characters.",
			"N-U-L-L in all caps is for pointers.",
			"And it's just a new symbol we're introducing today",
			"that comes with this standard lib dot h file.",
			"All right, so it turns out, honestly, I don't need to do some of this work.",
			"It turns out that if I want to copy one string to another,",
			"there is a function for that.",
			"And increasingly, you will not have to write as many lines of code",
			"as you previously did, because if you look up in the manual pages",
			"or you've heard about or find online that there's another function, like one",
			"called strcpy, you can actually, more simply, do something like this.",
			"So even though I really liked the idea, and it was correct to use a for loop",
			"to copy all of the characters from s into t, there's a function for that.",
			"It's called strcpy.",
			"It takes two arguments, the destination followed by the source.",
			"And it will just handle all of the looping",
			"for us, all of the copying for us, including the backslash 0,",
			"so that I can focus on what I want to do, which in this case,",
			"is actually capitalize things.",
			"So if we consider, now, this example, in the context of my computer's memory,",
			"we'll see that it's laid out a little differently.",
			"But there's one more bug I do want to fix first.",
			"And this is something we've not had to do yet.",
			"It turns out that any time you allocate memory with malloc,",
			"you ask the computer for memory, the onus is on you, the programmer,",
			"to eventually give it back.",
			"And by that, I mean if you allocate four bytes,",
			"or who knows, four million bytes of memory for an even bigger program,",
			"you'd better give it back to the computer, more specifically,",
			"the operating system, be it Linux or Mac OS or Windows,",
			"so that your computer eventually doesn't run out of memory.",
			"If all you ever do is ask for more memory, ask for more memory,",
			"it stands to reason that eventually your computer will run out, because it only",
			"has a finite amount of memory.",
			"It's got a finite amount of hardware recall.",
			"So when you're done with memory, it should be your best practice",
			"to free it afterward as well.",
			"And the opposite of malloc is just a function called free, which takes,",
			"as its input, whatever the output of malloc was.",
			"And recall that the output of malloc, the return value of malloc,",
			"is just the address of the first byte of memory that it has allocated for you.",
			"So if you ask it for four bytes, like I did a few lines ago with malloc,",
			"you're going to get back the address of the first of those bytes.",
			"And it's up to you to remember how many bytes you asked for.",
			"In the case of free, all you have to do is",
			"tell free via its input what the address was that malloc gave you.",
			"So if you stored that address as I did, in this variable called t,",
			"it suffices when you're done with that memory just called free t.",
			"And the computer will go about freeing up that memory for you.",
			"And you might very well get it back later on.",
			"But at least your computer won't run out of memory",
			"as quickly, because it can now reuse that space for something else.",
			"All right, let me go ahead, then, and propose",
			"that we draw a picture of this--",
			"now new program's memory, where we copy things.",
			"So recall, this is where we left off before when comparing two strings.",
			"If this was s and s was pointing to h, i, exclamation point in lowercase,",
			"this new version of my code in copy.c, notice,",
			"still gives me another pointer called t.",
			"So that part of the story hasn't changed.",
			"But I call malloc now.",
			"And malloc is going to return to me some new chunk of memory.",
			"I don't know in advance where it is.",
			"But malloc's return value is going to be the address",
			"of the first bite of that memory.",
			"So for instance, 0x456 or whatever it is.",
			"And the subsequent bytes are going to be increasing by one",
			"byte at a time, 0x457, 0x458, 0x459.",
			"So what is, ultimately, stored in t when I assign it the return value of malloc?",
			"It's whatever that address is.",
			"Again, I could technically write 0x456 up here.",
			"But again, we're kind of past that.",
			"That's very 30 minutes ago.",
			"Let's now focus on just the abstraction that is a pointer.",
			"A pointer is just an arrow pointing from the variable",
			"to the actual location in memory.",
			"So now, if I go about copying s into t using strcpy, or more manually,",
			"using my for loop, what happens?",
			"Well, I'm copying the h over from s into t.",
			"I'm copying the i over from s into t, the exclamation point from s into t.",
			"And then lastly, the terminating nul character from s into t.",
			"So the picture is now fundamentally different.",
			"t is not pointing at the same thing.",
			"It's pointing at its own chunk of memory that has now, one step at a time,",
			"been duplicating whatever was at the address s.",
			"And so this is what you and I as humans would consider, presumably,",
			"to be a proper copy of the program.",
			"Any questions, then, on what we've just done by introducing malloc and free?",
			"The first of which allocates memory and gives you",
			"the address of the first byte of memory that you can now use,",
			"the latter of which hands it back to your operating system and says,",
			"I'm done with this.",
			"It can now be reused for something else, some other variable,",
			"maybe, down the road, if our program were longer.",
			"Brian, any questions or confusion I can help with?",
			"BRIAN: Someone asked, even if you're using strcpy",
			"to copy the string instead of copying the characters one at a time yourself,",
			"do you still need to free the memory?",
			"DAVID MALAN: Good question.",
			"Even if you're using strcpy, you do need to still use free.",
			"Yes, anytime you use malloc henceforth, you must use free.",
			"Anytime you use malloc, you must use free in order to free up that memory.",
			"strcpy is copying the contents of one chunk of memory to the other.",
			"It is not allocating or managing that memory for you.",
			"It is just implementing, essentially, that for loop.",
			"And it's, perhaps, time too, where I can take off another training wheel",
			"verbally.",
			"It turns out that get string, all this time, is kind of magical.",
			"One of the things that get string does from the CS50 library",
			"is it itself uses malloc.",
			"Consider, after all, when we, the staff, wrote get string years ago,",
			"we have no idea how long your names are going to be this year.",
			"We have no idea what sentences you're going",
			"to type, what paragraphs you're going to type, what text you're going to analyze",
			"for a program like readability.",
			"So we had to implement get string in such a way",
			"that you can type as few or as many characters at your keyboard",
			"as you want.",
			"And we will make sure there's enough memory for that string.",
			"So get string, underneath the hood, if you look at the code we, the staff,",
			"wrote someday, you'll see that we use malloc.",
			"And we call malloc in order to get enough memory to fit that string.",
			"And then, what the CS50 library is also secretly doing,",
			"is it is also calling free for you.",
			"There's, essentially, a fancy way where you",
			"can write a program that, as soon as main is about to quit or return",
			"to your blinking prompt, some special code",
			"we wrote swoops in at that final moment, frees any of the memory",
			"that we, the library, allocated so that you",
			"don't run out of memory because of us.",
			"But you all, when using malloc, will have",
			"to call free, because the library is not going to do that for you.",
			"And indeed, the goal of today and next week and beyond",
			"is to stop using the CS50 library, ultimately, altogether.",
			"All right, well let's-- it would be unfair, I think,",
			"if we introduced all of these fancy new techniques but don't necessarily",
			"provide you with any sort of tools with which to determine to chase down bugs",
			"in your new fancy code or solve problems, now,",
			"that are related to memory.",
			"And thankfully, there are programs via which",
			"you can chase down memory-related bugs.",
			"This is in addition to printf, that function,",
			"and help50 and check50 and debug50 and debuggers more generally.",
			"This program-- and it's really the last of the new tools we'll introduce you",
			"to in C-- is called valgrind.",
			"And this is a program that exists in CS50 IDE.",
			"But it exists on Macs and PC's and Linux computers",
			"anywhere, where you can run it on your own code",
			"to detect if you're doing anything wrong with memory.",
			"What might you do wrong with memory?",
			"Well, previously, remember, I triggered that segmentation fault.",
			"I touched memory that I should not.",
			"Valgrind is a tool that can help you figure out,",
			"where did you touch memory that you shouldn't have,",
			"so as to focus your own human attention on whatever lines of code",
			"might be buggy.",
			"Valgrind grant can also detect if you forget to call free.",
			"If you call malloc one or more times, but don't call free",
			"a corresponding number of times, valgrind",
			"is a program that can notice that and tell you that you have",
			"what's called a memory leak.",
			"And indeed, this is germane to our own Macs and PCs.",
			"Again, if you've been using your Mac or PC or sometimes",
			"even your phone for a long, long time, and maybe",
			"running lots of different programs at once, lots of browser tabs",
			"open, lots of different programs open at once,",
			"your Mac or PC might very well have begun to slow to a crawl.",
			"It might be annoying, if not impossible to use,",
			"because everything is so darn slow.",
			"That may very well be because one or more of the programs you're using",
			"has some bug in it whereby a programmer kept allocating memory",
			"and never got around to calling free.",
			"Maybe it's a bug, maybe it was deliberate,",
			"they didn't expect you to have so many windows open.",
			"But valgrind can detect errors like that.",
			"And honestly, some of you, if you're like me,",
			"you might very well have 10, 20, 50 different browser tabs open at once,",
			"thinking oh, I'm going to come back to that someday, even though we never do.",
			"Each of those tabs takes up memory.",
			"Literally, any time you open a browser tab, think of it,",
			"really, as Chrome or Edge or Firefox or whatever",
			"you're using, underneath the hood, they're",
			"probably calling a function on Mac OS or Windows",
			"like malloc to give you more memory to contain the contents of that web page",
			"temporarily.",
			"And if you keep opening more and more browser tabs,",
			"it's like calling malloc, malloc, malloc.",
			"Eventually, you're going to run out.",
			"And computers can be smart these days.",
			"They can kind of temporarily remove things from memory to free up space.",
			"This is called virtual memory.",
			"But eventually, something is going to break.",
			"And it might very well be your user experience",
			"when things get so slow that you literally have to quit the program",
			"or maybe even reboot your computer.",
			"So how do we use valgrind?",
			"Well, let me go ahead and write a short program",
			"that doesn't do anything useful, but demonstrates",
			"multiple memory-related mistakes.",
			"I'll call this file memory.c.",
			"I'm going to go ahead and open up the file memory.c",
			"and include at the top standard io dot h.",
			"And then I'm going to also, preemptively,",
			"include standard lib dot h, which recalls where malloc, int main void.",
			"And I'm going to keep this one simple.",
			"I'm going to go ahead and just give myself a whole bunch of integer.",
			"So this is actually kind of cool.",
			"It turns out that--",
			"well, let's go ahead.",
			"Yeah, I can do this.",
			"Let's go ahead and do this.",
			"Char star s gets malloc.",
			"And let me go ahead and give myself, how about three of these.",
			"Let me go ahead and allocate space for three chars.",
			"Or actually, let's give me four, just like before.",
			"Now, I'm going to go ahead and say s bracket 0 equals 72.",
			"s bracket 1-- actually, I'll just do this manually.",
			"Let's do h.",
			"Let's do i.",
			"Let's do our usual exclamation point.",
			"And then just for good measure, s bracket 3 gets",
			"quote unquote, backslash 0.",
			"This is the very manual way of actually--",
			"this is the very manual way of actually building up a string.",
			"But let me introduce a mistake.",
			"Let me accidentally allocate only three bytes,",
			"even though I clearly need a fourth for that terminating nul character.",
			"And notice too, the absence of free.",
			"I'm going to, very sloppily, not bother calling free.",
			"Now, I'm going to go ahead and compile this program, make memory.",
			"OK, it compiles OK, so that's good, dot slash memory.",
			"OK, nothing happens, but that kind of makes",
			"sense because I didn't tell it to do anything.",
			"Just for kicks, let's print out that string just like we always do.",
			"Let me now recompile memory, still compiles.",
			"Let me run dot slash memory.",
			"OK, it seems to work.",
			"So at first glance, you might be really proud of yourself.",
			"You've written another correct program, seems to pass check50.",
			"You submit.",
			"You go about your day.",
			"And you're very disappointed some days later",
			"when you realize, dammit, I did not get full credit on this because there's",
			"actually a latent bug.",
			"So sometimes, indeed, there are bugs in your code",
			"that you don't necessarily see visually, you don't necessarily",
			"experience when running it yourself, but eventually, there",
			"might be an error when running it enough times.",
			"Eventually, a computer might notice that you're doing something wrong.",
			"And thankfully, tools exist like valgrind,",
			"that can allow you to detect that.",
			"So let me go ahead and just increase the size of my terminal window here.",
			"And let me go ahead and run valgrind on dot slash memory.",
			"So it's just like debug50.",
			"Instead of running debug50 and then dot slash whatever the program is,",
			"you run valgrind dot slash memory.",
			"This one, unfortunately, is only a command line interface.",
			"There's no graphical user interface like debug50.",
			"And honestly, it's a hideous sequence of output.",
			"This should overwhelm you at first glance.",
			"There's crazy cryptic-ness here.",
			"It's not the best-designed program.",
			"It really was meant for the most comfortable people.",
			"But there are some useful tidbits we can take away from it.",
			"As always, let me show all the way to the top",
			"to the very first line of output.",
			"And I'll draw your attention to a couple of things",
			"that will start to jump out to you.",
			"And help50 can help you with this.",
			"If you're confused by valgrind's output, rerun it.",
			"But put help50 at the beginning.",
			"And just like I will do now verbally, so can help50",
			"help you notice the important things in this crazy mess of output.",
			"This is worrisome.",
			"Valgrind is noting on this line here, invalid right of size 1.",
			"And that's on line 10 of memory.c.",
			"So we'll look at that in a moment.",
			"If I scroll down further, invalid read of size 1.",
			"And that also seems to be on here, it looks like, on line 11 of memory.c.",
			"And then if I keep scrolling, keep scrolling, keep scrolling,",
			"I'm not liking this.",
			"3 bytes in 1 blocks are definitely lost in loss record, whatever that is.",
			"But three bytes in 1 blocks are definitely lost.",
			"And then down here, leak summary, definitely lost, 3 bytes in 1 blocks.",
			"Incidentally, 1 blocks, obviously not correct grammar.",
			"This is what happens when your program doesn't",
			"have an if condition that checks if the number is 1 or positive or 0.",
			"You could fix this, grammatically, honestly, with a simple if condition.",
			"They did not when writing this program years ago.",
			"So there's two or three mistakes here.",
			"One is some kind of invalid read or write.",
			"And another is this leak.",
			"Well, what is a write?",
			"A write just refers to changing a value.",
			"A read just refers to reading or using or printing a value.",
			"So let's focus on line 10.",
			"If I scroll back down to my code and look on line 10,",
			"this was an invalid write, invalid write.",
			"Well, why is it invalid?",
			"Well, per today's definition, if you are allocating 3 bytes,",
			"you are welcome to touch the first byte, the second byte, and the third byte.",
			"But you have no business touching the fourth byte",
			"if you've only asked for three.",
			"This is like a small scale version of the very adventurous and inappropriate",
			"poking around I did when I looked at 10,000 bytes away.",
			"Even looking one byte away is a potential bug",
			"and can cause a program to crash.",
			"Meanwhile, line 11 is also problematic, which",
			"is an invalid read, because now, you're saying go print out this string.",
			"But that string contains a memory address",
			"that you should not have touched in the first place.",
			"And the memory leak, the third problem, stems from the fact",
			"that I didn't free that memory.",
			"So again, it'll take some practice and experience, some mistakes of your own,",
			"to notice and understand these bugs.",
			"But let me fix the first two like this.",
			"Let me just give myself four bytes.",
			"And let me fix the second one or the third one,",
			"really, by freeing s at the very end, because again, any time you use malloc",
			"you must use free.",
			"Let me go ahead and recompile memory, seems to compile.",
			"Let me rerun it, still works the same, visually.",
			"But now, let's rerun valgrind on it and see if there are any errors now,",
			"so valgrind dot slash memory, Enter.",
			"The output's still going to look pretty cryptic.",
			"But notice all heap blocks were freed, whatever that means.",
			"No leaks are possible.",
			"It doesn't really get more explicit than that.",
			"That's a good thing.",
			"And if I scroll up, I see no mention of those invalid reads or writes.",
			"So starting with this week's problems and next week's in C,",
			"not only are you going to want to use tools",
			"like help50 and printf and debug50 and check50,",
			"but even if you think your code's right, the output looks right,",
			"you might have a latent bug.",
			"And even when your programs are small, they might not crash the computer.",
			"They might not cause that segmentation fault. Eventually, they will.",
			"And you do want to use tools like this to chase down any such mistakes.",
			"Otherwise, bad things can happen.",
			"And what might happen?",
			"Well, let me go ahead and reveal an example here",
			"that presents some code that's a little dangerous.",
			"So here, for instance, is an example where",
			"I'm declaring at the top of the function, int star x and int star y.",
			"So what does that mean?",
			"Well, per today's parlance, this just means give me",
			"a pointer to an integer called x.",
			"Give me a pointer to an integer called y.",
			"Put another way, give me a variable called x that I",
			"can store the address of an int in.",
			"Give me a variable called y that I can store the address of another int in.",
			"But notice what I am not doing on these first two lines.",
			"I'm not actually assigning them a value until line 3.",
			"On line 3, even though this is weird-- this is not how we've allocated space",
			"for integers before--",
			"there's no reason that you can't use malloc",
			"and say, give me enough space for the size of an integer.",
			"sizeof is new.",
			"It's just an operator in C that tells you the size of a data type,",
			"like a size of an int.",
			"So maybe you forgot that an int is 4.",
			"And indeed, an int is usually 4, but not always 4 in all systems.",
			"So size of int just makes sure that it will always give you the right answer,",
			"whether you're using a modern computer or an old one.",
			"So this just means, really, allocate 4 bytes to me on a modern system.",
			"And it stores the address of the first byte in x.",
			"Would someone mind translating to layman's terms, what",
			"is star x equal 42 doing?",
			"Star, again, is the dereference operator.",
			"It means go to the address.",
			"And do what?",
			"How would you describe, with a verbal comment,",
			"what star x equals 42 is doing?",
			"Brian, would you mind verbalizing any thoughts?",
			"BRIAN: Yeah, so Sophia suggested that at that address, we are going to place 42.",
			"DAVID MALAN: Perfect.",
			"At that address put 42.",
			"Equivalently, go to that address in x and put the number 42 there.",
			"It's like going to Brian's mailbox and putting the 42 in his mailbox,",
			"instead of what we previously had there, which was the number 50.",
			"How about this next fifth line, star y equals 13?",
			"Brian, could you verbalize someone else?",
			"What does star y equals 13 do for us?",
			"And it's not an accident that 13 tends to be unlucky.",
			"BRIAN: Peter says, put 13 at the address y.",
			"DAVID MALAN: Good, put 13 at the address in y.",
			"Or put another way, go to the address in y and put 13 there.",
			"But there's a logical problem here.",
			"What is in y?",
			"If I rewind, I never actually assign y a value.",
			"I don't initially, and I don't eventually.",
			"At least with x, even though I didn't give it a value in declaring it up here",
			"as a variable, I eventually got around to storing in it the actual address.",
			"Now, just to be really nit picky, I should probably even, in this program,",
			"check for nul just in case anything went wrong.",
			"But that's a whole other problem.",
			"It is a more damning problem that I haven't even given y a value.",
			"And here's where we can reveal one other detail about a computer.",
			"Thus far, we've been taking for granted that you and I almost always initialize",
			"our memory.",
			"If we want to give ourselves a char, an int, a string,",
			"we literally type it out into the program",
			"itself so that it's there when we want it.",
			"But if we consider this picture here, which",
			"is now just a physical incarnation of some of the contents of your computer's",
			"memory, playfully labeled with a lot of Oscar the Grouches,",
			"this is because you should never trust the contents of your computer's memory",
			"if you yourself have not put something there.",
			"There's a term of art in programming called garbage values.",
			"If you yourself have not put a value somewhere in memory,",
			"you should assume, to be safe, that it is a quote unquote, \"garbage value.\"",
			"It's not a weird value.",
			"It's just a 1, a 2, an A, a B, a C, you just",
			"don't know what it is, because if your program is running over time",
			"and you're calling functions and functions are returning.",
			"You're calling other functions and functions are returning.",
			"These values in your computer's memory are constantly changing,",
			"and your memory gets reused.",
			"When you free memory, that doesn't erase it or set it all back to 0's or set it",
			"all back to 1's.",
			"It just leaves it alone so that you can reuse",
			"it, which means over time, your computer contains remnants",
			"of all of the variables you've ever used in your program over here, over here,",
			"over there.",
			"And so in a program like this, where you have not explicitly initialized y",
			"to anything, you should assume that Oscar the Grouch, so to speak,",
			"is at that location.",
			"It is a garbage value that looks like an address but is not a valid address.",
			"And so when you say star y equals 13, that means go to that address.",
			"But really, go to that bogus address and put something there.",
			"And odds are, your program is going to crash.",
			"You are going to get a segmentation fault,",
			"because by going to some arbitrary garbage value address,",
			"it would be like picking up a random piece of paper with a number on it",
			"and then going to that mailbox.",
			"Why?",
			"It does it belong to you.",
			"If you try to dereference an uninitialized variable,",
			"your program may very well crash.",
			"And this is, perhaps, no better-presented",
			"than by some of our friends, Nick Parlante, a professor at Stanford",
			"University who is breathed life into a character in claymation known as Binky.",
			"We have just a 2 minute clip from this that paints the picture of bad things",
			"indeed happening when you touch memory that you shouldn't.",
			"So hopefully, a helpful reminder as to what to do and not to do with pointers.",
			"Here we go.",
			"[VIDEO PLAYBACK]",
			"- Hey, Binky.",
			"Wake up, it's time for pointer fun.",
			"- What's that?",
			"Learn about pointers?",
			"Oh, goody!",
			"- Well, to get started, I guess we're going to need a couple pointers.",
			"- OK, this code allocates two pointers which can point to integers.",
			"- OK, well I see the two pointers.",
			"But they don't seem to be pointing to anything.",
			"- That's right.",
			"Initially, pointers don't point to anything.",
			"The things they point to or called pointees.",
			"And setting them up's a separate step.",
			"- Oh, right, right.",
			"I knew that.",
			"The pointees are separate.",
			"So how do you allocate a pointee?",
			"- OK, well, this code allocates a new integer pointee.",
			"And this part sets x to point to it.",
			"- Hey, that looks better.",
			"So make it do something.",
			"- OK, I'll dereference the pointer x to store the number 42 into its pointee.",
			"For this trick, I'll need my magic wand of dereferencing.",
			"- Your magic wand of dereferencing?",
			"That's great.",
			"- This is what the code looks like.",
			"I'll just set up the number and--",
			"[POP]",
			"- Hey, look, there it goes.",
			"So doing a dereference on x follows the arrow to access its pointee.",
			"In this case, to store 42 in there.",
			"Hey, try using it to store the number 13 through the other pointer, y.",
			"- OK.",
			"I'll just go over here to y and get the number 13 set up",
			"and then take the wand of dereferencing and just--",
			"[HORN] whoa!",
			"- Oh, hey, that didn't work.",
			"Say, Binky, I don't think dereferencing y is a good idea, because setting up",
			"the pointee is a separate step.",
			"And I don't think we ever did it.",
			"- Hmm, good point.",
			"- Yeah, we allocated the pointer y.",
			"But we never set it to point to a pointee.",
			"- Hmm, very observant.",
			"- Hey, you're looking good there, Binky.",
			"Can you fix it so that y points to the same pointee as x?",
			"- Sure, I'll use my magic wand of pointer assignment.",
			"- Is that going to be a problem like before?",
			"- No, this doesn't touch the pointees.",
			"It just changes one pointer to point to the same thing as another.",
			"- Oh, I see.",
			"Now, y points to the same place as x.",
			"So wait, now y is fixed.",
			"It has a pointee.",
			"So you can try the wand of dereferencing again to send the 13 over.",
			"- Oh, OK.",
			"Here it goes.",
			"[POP]",
			"- Hey, look at that.",
			"Now, dereferencing works on y.",
			"And because the pointers are sharing that one pointee, they both see the 13.",
			"- Yeah, sharing, whatever.",
			"So are we going to switch places now?",
			"- Oh look, we're out of time.",
			"- But--",
			"[END PLAYBACK]",
			"DAVID MALAN: All right, so we are not quite out of time.",
			"But let's go ahead and take our second 5 minute break here.",
			"And when we return, we'll take a closer look at Oscar and more.",
			"Back in 5.",
			"All right, so I claim that there's all these garbage",
			"values in your computer's memory.",
			"But how can you see them?",
			"What Binky did was, of course, try to dereference a garbage value",
			"when bad things happen.",
			"But we can actually see this with code of our own.",
			"So let me go ahead, quickly, and whip up a little program here,",
			"just like something we did in week one or week two,",
			"but without doing it very well.",
			"Let me go ahead and include standard io dot h as usual, int main void.",
			"And then let me go ahead and give myself an array of scores.",
			"How about an array of three scores?",
			"And we've done this before where we collected scores from a user.",
			"But this time, I'm going to deliberately make",
			"the mistake of not actually initializing those scores",
			"or even asking the human for those scores.",
			"I'm just going to blindly go about iterating from i equals 0 on up to 3.",
			"And on each iteration, I'm just going to presumptuously print whatever is",
			"at that location in scores bracket i.",
			"So logically, my code is correct in what it's trying to do,",
			"print out the values in scores.",
			"But notice that I have deliberately not initialized any",
			"of the 1, 2, 3 scores in that array.",
			"So who knows what's going to be there?",
			"Indeed, it should be garbage values of some sort",
			"that we couldn't necessarily predict in advance.",
			"So let me go ahead and make garbage, since this program",
			"is in a file called garbage.c.",
			"Compiles OK, but when I now run garbage, we",
			"should see three scores, which are cryptically negative, 833060864.",
			"Another one is 32765.",
			"And the third just happens to be 0.",
			"So there are those garbage values, because again, the computer",
			"is not going to initialize any of those values for you.",
			"Now, there are exceptions.",
			"We have, on occasion, used a global variable,",
			"a constant that is outside the context of main and all of my other functions.",
			"Global variables, if you do not set them,",
			"are conventionally initialized to 0 or nul for you.",
			"But you should generally not rely on that kind of behavior.",
			"Your instinct should be to always initialize values",
			"before thinking of touching or reading them",
			"as via printf or some other mechanism.",
			"All right, well, let's see how this understanding, now, of memory,",
			"can lead us to solve problems, but also encounter new types of problems,",
			"but problems that we can now hopefully understand.",
			"I'm going to go ahead and create a new program here.",
			"And recall from last week that it was very common",
			"for us to want to swap values.",
			"When Brian was doing our sorts for us, whether it was selection or bubble",
			"sort, there was a lot of swapping going on.",
			"And yet, we didn't really write any code for those algorithms.",
			"And that's fine.",
			"But let's consider that very simple primitive of just",
			"swapping two values, for instance, swapping two integers.",
			"Let me go ahead and give myself the start of a program and swap.c here.",
			"I'm going to include standard io dot h, int main void.",
			"And inside of main, I'm going to give myself two integers.",
			"Let's just give myself an int called x and assign it 1, an int called y",
			"and assign it 2.",
			"And then let me go ahead and just print out what those values are.",
			"I'll just say, literally, x is percent i comma y is percent i backslash n.",
			"And then I'm going to go ahead and print out x comma y, respectively.",
			"And then I'm eventually going to write a function called",
			"swap that swaps x and y.",
			"But let's assume, for the moment, that exists.",
			"It doesn't, because what I then want to do right",
			"after that is just reprint the same thing, x is now percent i,",
			"y is percent i, my presumption being that the values of x and y",
			"will be swapped.",
			"So how might I swap these two values?",
			"Well, let me go ahead and implement my own function.",
			"I don't think it needs to return anything,",
			"so I'm going to say void is the return type.",
			"I'll call it swap.",
			"It's going to take two arguments as input.",
			"We'll call it a and b, both integers.",
			"But I could call it anything I want.",
			"But a and b seems reasonable.",
			"And now, I want to go ahead and swap two values.",
			"Now, Brian was kind of doing this with his two hands last week.",
			"And that's fine, but we should probably consider this a little more closely.",
			"In fact, Brian, instead of numbers, let's",
			"do something a little more real world.",
			"I think you have a couple of beverages in front of you.",
			"BRIAN: Yeah.",
			"So right here, I have a red glass and a blue glass,",
			"which I guess we can use to represent two variables, for instance.",
			"DAVID MALAN: Yeah.",
			"Now, let me suppose--",
			"I wish I'd told you in advance.",
			"I'd actually prefer that the red liquid be",
			"in the blue glass and the blue liquid be in the red glass.",
			"So do you mind swapping those two values,",
			"just like you swapped numbers last week?",
			"BRIAN: Yeah, sure.",
			"So I can just take the two glasses, and I can switch their places.",
			"DAVID MALAN: OK, wait, OK, that's not exactly--",
			"you took me too literally.",
			"I think here, if we think of the glasses, now, as specific locations",
			"in memory, you can't just physically move",
			"the chips of memory inside of your computer to swap things.",
			"So I think I literally need you to move the blue liquid",
			"into the red glass and the red liquid into the blue glass",
			"so that it's more like a computer's memory.",
			"BRIAN: OK, I can try to do that.",
			"I'm a little nervous, though, because I feel like I can't just",
			"pour the blue liquid into the red glass, because the red liquid's already",
			"in there.",
			"DAVID MALAN: Yeah, so this probably doesn't end well,",
			"if he's got to do some kind of switcheroo between the two glasses.",
			"So any thoughts here?",
			"Like what is the real world solution to this weird but real problem, where",
			"we want to swap the contents of these two locations,",
			"just like Brian was swapping the contents of two memory locations",
			"last week?",
			"Brian, if you have your eye on the chat in parallel,",
			"might anyone have ideas on how we could swap these two liquids?",
			"BRIAN: Yeah, a couple of people are saying that I need a third glass.",
			"DAVID MALAN: All right, well Brian, do you",
			"happen to have a third glass with you back there behind back stage?",
			"BRIAN: In fact, I think I do.",
			"So I have a third glass here that just so happens to be empty.",
			"DAVID MALAN: OK.",
			"And how would you, now, go about swapping these two things?",
			"BRIAN: All right, so I want to put the blue liquid inside the red glass.",
			"So the first thing I need to do, I think,",
			"is just to empty out the red glass to make space for the blue liquid.",
			"So I'm going to take the red liquid, and I'm just",
			"going to pour it into this extra glass.",
			"DAVID MALAN: Temporarily though, right?",
			"BRIAN: Temporarily, yeah.",
			"DAVID MALAN: OK.",
			"BRIAN: Just to keep it to store it there.",
			"And now, I think I can just pour the blue liquid",
			"into the original red glass, because now I'm free to do so.",
			"So I'll pour the blue liquid there.",
			"",
			"And I think the last thing I need to do now is, now this blue--",
			"this glass that originally held the blue liquid is now empty.",
			"So the red liquid, which was inside of this temporary glass over here,",
			"I can take the red liquid and just pour it into this glass here.",
			"And now, I didn't swap the positions of the glasses.",
			"But the liquids have actually switched places.",
			"Now, the blue liquid is on the left and the red liquid is on the right.",
			"DAVID MALAN: Awesome.",
			"Yeah, I think that is a more literal implementation",
			"of what you were doing and taking for granted last week,",
			"swapping the two values in two separate locations.",
			"So it seems pretty straightforward.",
			"I just need a little more space.",
			"I need a temporary variable in code, if you will.",
			"And it seems I need three steps.",
			"I need to pour one out, pour the other one out, pour the other one back in.",
			"So I think I can translate that into code here.",
			"Let me go ahead and give myself a temporary variable,",
			"like a glass, like Brian did.",
			"And I'll call it tmp, T-M-P, which is pretty conventional when",
			"you want to swap two things in code.",
			"And I'm going to sign it, temporarily, the value of a.",
			"I'm going to then change the contents of a to equal whatever the contents of B",
			"are.",
			"And then I'm going to change b to be whatever the contents of tmp were.",
			"So this feels pretty reasonable and pretty correct,",
			"because it's just a literal translation into code,",
			"now, of what Brian did in the real world.",
			"And I think this will compile.",
			"So let's start there, make swap.",
			"It does-- oh, doesn't compile.",
			"OK, previous implicit declaration, oh, so many errors, my god.",
			"Implicit declaration of function swap--",
			"wait a minute.",
			"I've seen that before.",
			"I've made this mistake before.",
			"You might have as well.",
			"Anytime you see this, recall it's just that you're missing your prototype.",
			"Remember that the compiler is going to take you literally.",
			"And if it doesn't know the word swap exists when it sees it,",
			"it's not going to compile successfully.",
			"So we need to include my prototype at the top of my file.",
			"Now, let me try this again, make swap.",
			"OK, that compiles.",
			"Let me go ahead now and run swap and recall that, in main, what I did",
			"was initialize x to 1, y to 2.",
			"I then print out what x is and what y is.",
			"I call swap, and then I print out what x is and y is again.",
			"So I should see 1, 2, and then 2, 1.",
			"So lets hit Enter.",
			"Huh, it does not seem to be working.",
			"Well, let's try it again, just in case--",
			"no, not working.",
			"Well, let me try this.",
			"Let me add some-- printf is my friend.",
			"Let me go ahead and say a is percent i.",
			"b is percent i backslash n, a, b.",
			"So let's print that out.",
			"And let's print that out twice.",
			"So this would be a reasonable debugging technique.",
			"If you want to know what's going on underneath the hood, add some printf's.",
			"Let me go ahead and make swap.",
			"That compiles, dot slash swap.",
			"And let's see, a is 1, b is 2, a is 2, b is 1.",
			"But then x and y are unchanged.",
			"So I feel like my logic is right.",
			"It's switching a and b.",
			"But it's not actually switching x and y.",
			"And I could confirm as much, right?",
			"The more powerful way to debug this would",
			"be to run debug50, set a break point, for instance, at line 17,",
			"step through my code, step by step, stepping into the swap function.",
			"But for now, it seems clear that swap works.",
			"But main isn't really seeing those results.",
			"So what's actually going on?",
			"Well, let's consider this real world incarnation of what my memory is",
			"so I can actually move things around.",
			"And this is all thanks to our friends in the theater's prop shop in back.",
			"If we think of this as my computer's memory,",
			"initially, it's all garbage values.",
			"But I can use this as a canvas to start laying things out in memory.",
			"But calling functions is something we've taken for granted thus far.",
			"And it turns out, when you call functions, the computer, by default,",
			"uses this memory in kind of a standard way.",
			"In fact, let me go ahead and draw a more pictorial picture.",
			"Let me draw a more literal picture here, if you will, of the computer's memory",
			"again.",
			"So if this is the computer's memory and we zoom in on one of the chips,",
			"and we think of the chip as having a whole bunch of bytes like this.",
			"Let's abstract away the actual hardware and think of it as we have been.",
			"It's just this big rectangular region of memory, not unlike all of those Oscar",
			"the Grouches a moment ago.",
			"But by convention, your computer does not just plop things",
			"in random locations in memory.",
			"It has certain rules of thumb that it adheres to.",
			"In particular, it treats different portions of your computer's memory",
			"in different ways.",
			"It uses it in a standard way so that it's not completely random.",
			"For instance, when you run a program by doing dot slash something on CS50 IDE",
			"or on Linux more generally, or you double click an icon on Mac OS",
			"or Windows, that triggers the computer's--",
			"the program's 0's and 1's stored on your hard drive to be loaded up here,",
			"to what we'll call machine code, which again, is the 0's and 1's.",
			"So if you think again, metaphorically, as your memory",
			"is this rectangular region, then the machine code,",
			"the 0's and 1's composing your program are loaded into the top part of memory.",
			"And again, top, bottom, left, right, it has no fundamental technical meaning.",
			"It's just an artist's rendition.",
			"But it does go into a standard location.",
			"Below that are all of your global variables.",
			"So are your constants that you put outside of your functions.",
			"Those are going to end up just below the machine code,",
			"so again, at the top of your computer's memory.",
			"Below that is what's called the heap.",
			"And this is a technical term.",
			"And it refers to a big chunk of memory that malloc",
			"uses to get you some spare memory.",
			"Any time you call malloc, you are given the address of some chunk of memory",
			"up in this region, below the machine code, below your global variables.",
			"And it's kind of a big zone.",
			"But the catch is that other parts of your memory are used differently.",
			"In fact, whereas the heap is considered to be here on down, somewhat",
			"worrisomely, the stack is considered to be here on up.",
			"This is to say, when you call malloc and ask for memory,",
			"that gets allocated up here.",
			"When you call a function, though, those functions",
			"use what's called stack space instead of heap space.",
			"So any time you call a function, main or swap or strlang or string compare",
			"or any of the functions you've used thus far,",
			"your computer will automatically store any",
			"of the local variables or parameters from those functions down here.",
			"Now, this is not necessarily the best design,",
			"because you can see the two arrows pointing at one",
			"another is like two trains barreling down the tracks at one another.",
			"Bad things can eventually happen.",
			"Thankfully, we typically have enough memory",
			"that these two things don't collide, but more on that in just a bit.",
			"So again, when you call functions, memory down here is used.",
			"When you use malloc, memory up here is used.",
			"Now, for my swap function, I'm not using malloc.",
			"So I don't think I have to worry about heap.",
			"And I don't have any global variables.",
			"And I don't really care about my machine code.",
			"I just need to know that it's stored somewhere.",
			"But let's consider, then, what the stack is all about.",
			"The stack, indeed, is this sort of dynamic place",
			"where memory keeps getting used and reused.",
			"So for instance, when you call main, as you might when this swap program is",
			"run, main uses a sliver of memory at the bottom of this picture, if you will.",
			"So the local variables in main, like x and y,",
			"end up at this bottom portion of memory.",
			"When you call swap, swap uses a chunk of memory just above main,",
			"pictorally, in this diagram, such as variables a and b and temp,",
			"for that matter.",
			"And then, once swap returns and is done executing, that sliver of memory",
			"essentially goes away.",
			"Now, it doesn't disappear.",
			"Obviously, there's still physical memory there.",
			"But that's when we get into the discussion of garbage values again.",
			"They're still like Oscar the Grouches all over the place.",
			"You just don't know, or at this point care, what the values are.",
			"But there are values there.",
			"And that's why, a moment ago, when I printed out that uninitialized score's",
			"array, I did see some bogus values, because there's still",
			"going to be 0's and 1's there that are left over from before.",
			"The problem, though, is this.",
			"Let me go over to this physical incarnation of our memory",
			"and consider this as being our stack, so it's growing on up.",
			"And in fact, if I want to have two local variables like I do, x and y,",
			"let's go ahead and think of this row of memory here as being main,",
			"for instance, here.",
			"And I'm going to go ahead and replace all these garbage values",
			"with an actual value that I care about.",
			"And the actual values that I care about, we're going to call x and y, just as",
			"before.",
			"So each of these Oscars happens to be one byte.",
			"But an int is 4 bytes.",
			"So thankfully, from our friends in the prop shop,",
			"we have these bigger integer-sized blocks.",
			"And I'm going to go ahead and slide this in here.",
			"And we're going to think of this, in a moment, as x.",
			"And indeed, I'm going to go ahead and call this x with a marker.",
			"And then I'm going to go ahead and give myself another integer, a size 4,",
			"and put it down here.",
			"And we're going to think of this as y.",
			"And recall, what do I initialize these values to?",
			"Well, the value 1, initially, and the value 2.",
			"But then I called the swap function.",
			"And the swap function has two arguments, a and b.",
			"And those, by design, become copies of x and y, because I passed in x comma y.",
			"And I defined swap as taking a comma b.",
			"So I think what I need to do, physically here, is now",
			"think of this second row of memory as now belonging to the swap function,",
			"not to main.",
			"And inside of this second row of memory, I'll",
			"think of this as belonging to swap.",
			"And within the swap row, I'm going to have another integer of size 4.",
			"And we're going to call this one a, as down there, a.",
			"And then I'm going to have another chunk of size 4.",
			"And we're going to call this b.",
			"And again, because those are just the arguments, x comma y, otherwise",
			"now known as a comma b, I copy 1 and 2 into those values.",
			"But swap has a third variable.",
			"Brian proposed a temporary variable.",
			"So I'm going to go ahead and give myself four more bytes,",
			"thereby getting rid of whatever the garbage value's there",
			"and actually setting it to an integer call tmp.",
			"So I'm going to go ahead and call this thing tmp, T-M-P.",
			"And what did I do first?",
			"I set tmp equals to a.",
			"So tmp equals to a.",
			"So if a is 1, tmp is 1.",
			"Then what did I do?",
			"I then did a equals b.",
			"So b is 2.",
			"a is 2 as well.",
			"And then lastly, what did I do?",
			"I did b gets tmp.",
			"So I have to go ahead and change this to be whatever the value of tmp",
			"is, which is now the number 1.",
			"So you can see that swap is correct insofar",
			"as it is swapping the values of a and b.",
			"But the moment swap returns, these return",
			"to being thought of as garbage values.",
			"Main is still in the middle of running.",
			"Swap is no longer running.",
			"But these values stay there.",
			"So those are garbage values.",
			"We happen to know what they are, but they're no longer valid,",
			"because when I go to print out x and y for the second time, what are x and y?",
			"They're still the same.",
			"And so this is to say, when you actually write code that takes arguments",
			"and you pass arguments from one function to another,",
			"those arguments are copied from one function to another.",
			"And indeed, x and y are copied into a and b.",
			"So your code may very well look correct in that it's swopping correctly.",
			"But it's only swapping correctly in the context of swap,",
			"not touching the original values.",
			"So what I think we need to do, fundamentally,",
			"is reimplement swap in such a way that we actually",
			"change the values of x and y.",
			"But how can we do this?",
			"Brian, if we could call in someone here.",
			"How could I conceptually change my implementation of swap",
			"so that it somehow empowers me to change x and y, not change copies of x and y?",
			"What could I pass into swap, Brian?",
			"BRIAN: Igor is suggesting that we use pointers instead.",
			"DAVID MALAN: Yeah, so perhaps the leading question here today.",
			"But pointers would seem to give us a solution.",
			"If pointers are essentially like a treasure",
			"map to a specific address in your computer's memory, what I should really",
			"do from main to swap is pass in not x and y literally,",
			"but why don't I pass in the address of x and the address of y,",
			"so that swap can now go to those addresses",
			"and actually do the sort of swap that Brian enacted in person.",
			"So give the function a sort of map to those values, pointers to those values,",
			"and then go to those values.",
			"So how might I do this?",
			"Well, the code has to be a little different now.",
			"When I call swap this time, what I really need to do",
			"is pass in the addresses of these two variables.",
			"So I don't necessarily know what those addresses are.",
			"But for the sake of the story, we can just",
			"assume that this address, for instance, is like, 0x123.",
			"And then four bytes away from that might be 0x127, for instance.",
			"But again, it doesn't really matter what it is.",
			"But they do have addresses, x and y.",
			"So a pointer recall tends to be pretty big.",
			"So we needed to get out a bigger piece of wood,",
			"eight bytes that represents a pointer.",
			"And I actually need to use a bit more memory in swap now.",
			"If I now declare a to be, not an integer,",
			"but a pointer to an int, that is a int star variable,",
			"I could call this thing a now.",
			"And I could store, in it, the address of x, like 0x123.",
			"If I then change the definition of b to be",
			"not an integer, but a pointer to an integer,",
			"that is another int star, which happens to be eight bytes.",
			"I'm going to use a little more memory for this thing, but that's OK.",
			"And its name is going to be b now.",
			"And it's going to contain 0x127.",
			"I still need a temporary variable.",
			"I still need a temporary variable, but that's fine.",
			"I just need four bytes for that, because the variable",
			"itself just needs to store an int, like Brian temporarily stored it in a glass.",
			"So I just need an additional four bytes, like before, for that.",
			"And now, let's just consider the logic.",
			"Here's main.",
			"And swap is now using these 3--",
			"2 and 1/2 rows of memory.",
			"And that's fine.",
			"It's growing upward as I proposed.",
			"X is at address 0x123.",
			"y is at address 0x127.",
			"Therefore, a and b, I propose conceptually, like Igor proposed,",
			"store the addresses of a, x and y, respectively.",
			"And now my code, I think, needs to say this.",
			"Go and store, in the variable tmp, whatever is at the address a.",
			"So you can kind of think of this as being an arrow down here.",
			"Follow the arrow, OK.",
			"What is at address 0x123?",
			"The number 1.",
			"So we put one in tmp, just like before.",
			"Then what do we do?",
			"Well, now, I'm going to go ahead and change, not the value of a,",
			"but I'm going to change what is at the location in a to be",
			"whatever is at the location in b, which is an arrow pointing down here, 0x127.",
			"So I'm going to change this 1, now, to be a 2.",
			"And the third and final step, recall, is for me, now,",
			"to go, not to b, but to go where b points to, which happens to be y,",
			"and change that to be the value of tmp, which of course, is up here.",
			"And at this point in the story, it's still just three lines of code.",
			"They're different types of lines of code.",
			"It's three lines of code.",
			"But when swap is done executing, notice what we've done.",
			"We have successfully swapped x and y by letting",
			"swap go to those addresses as opposed to just naively getting",
			"copies of the values therein.",
			"Now, even though this code is going to look a little cryptic,",
			"it's, frankly, just an application of the logic we've seen thus far.",
			"I'm going to go ahead and go back to my old buggy version.",
			"And I'm going to change the definition of swap",
			"to say that it doesn't take two integers, a and b, but two",
			"pointers to integers a and b.",
			"And the way you declare a pointer recall is the type of variable",
			"you point at followed by a star and then the name of it.",
			"And we haven't seen it, admittedly, in the context",
			"of a function taking parameters yet.",
			"But it's quite simply that.",
			"I added the stars.",
			"Down here, I need to say, store in tmp, whatever is at a.",
			"How do I express go to a?",
			"Just add a star here.",
			"How do I express go to a and put whatever is at b?",
			"I add stars there.",
			"How do I say, go to b and store whatever is at tmp?",
			"I add one star there.",
			"So tmp is just a simple integer.",
			"It's just an empty glass like Brian had.",
			"There's nothing fancy there.",
			"So we don't need stars around tmp.",
			"But I do, now, need to change how I'm using a and b,",
			"because now they are addresses that I actually want to go to.",
			"There's no need for the address of operator in this context.",
			"But up here, I'm going to need to make a change.",
			"I do need to change the prototype to match.",
			"So that's just a copy paste.",
			"But I bet you can imagine what, lastly, needs to change.",
			"When calling swap, I don't want to pass in naively x and y, because again,",
			"they're going to get copied.",
			"I want to pass in the address of x and the address of y,",
			"so that swap now has sort of special access",
			"to the contents of those locations in memory",
			"so that it actually can make some changes therein.",
			"And that, indeed, if I now recompile this program, make swap, and I do",
			"dot swap and cross my fingers, voila.",
			"Now, I have successfully swapped lines of code.",
			"So last week, if you were wondering, perhaps,",
			"why we didn't show you how to do swap, we could have.",
			"And we didn't need a special function.",
			"You don't necessarily need pointers if we did all of this in main.",
			"But I'm trying to introduce an abstraction, this function that",
			"does swap just like Brian swapped those glasses for us.",
			"And to pass values from one function to another,",
			"you do need to understand what's going on in your computer's memory",
			"so that you can actually pass in little breadcrumbs again,",
			"treasure maps to those locations and memories, again, thanks to these things",
			"called pointers.",
			"All right, well let me propose and emphasize,",
			"then, that this design of the heap being up at the top,",
			"where malloc uses memory and the stack being",
			"at the bottom where your own functions use memory,",
			"this is a problem clearly waiting to happen.",
			"And those problems actually have names.",
			"And some of you who have programmed before",
			"might know some of these terms, either heap overflow or stack overflow.",
			"And in fact, many of you might know stackoverflow.com as just a website.",
			"Well, there is an origin story to its name.",
			"A stack overflow refers to the process of calling a function so many times",
			"that it overflows the heap.",
			"That is, every time you call the function,",
			"like I did here, you use more and more rows, so to speak, of memory.",
			"And if you call so many functions again and again,",
			"eventually, you may very well run over the area of memory called heap.",
			"And at that point, your program will crash.",
			"There is no fundamental solution to that problem other than don't do that.",
			"Don't use too much memory.",
			"But that can be hard to do.",
			"And indeed, that's one of the dangers of programming today.",
			"And we can actually induce this a little bit deliberately ourselves.",
			"And in fact, I thought we could revisit, for instance,",
			"where we left off with Mario last time, which was this picture here.",
			"Recall that this was a pyramid, of course,",
			"simpler than the one you might have played with for problems at 0.",
			"But it's a recursive pyramid in that you can define a pyramid of height 4,",
			"in terms of a pyramid of height 3, in terms of a pyramid of height 2",
			"and a height 1.",
			"And indeed, I built that last week using these very blocks.",
			"Well, you can implement Mario's pyramid like this",
			"in a couple of different ways.",
			"One is just using week one style iteration, using a loop.",
			"And in fact, let me go ahead and whip up a quick solution that",
			"does exactly that.",
			"Let me go ahead and call this mario.c.",
			"And I'm going to go ahead and include cs50.h.",
			"So we can use one of our get functions.",
			"I'm going to use standard io dot h.",
			"And I'm going to do int main void.",
			"And all I want to do is print out this pyramid.",
			"But I want to ask the user for the height.",
			"So I'm going to say int height equals get int.",
			"And we'll ask the user for the height, just like you did for problem set 1.",
			"And then I'm going to go ahead and draw a pyramid of that height.",
			"Now, draw doesn't exist.",
			"But that's fine.",
			"I'm going to go ahead and draw this now, implement draw myself.",
			"It doesn't need to return a value, because I'm just",
			"printing stuff on the screen.",
			"Function's called draw, and it's going to take",
			"an input called h, for instance. h for height,",
			"but I could call its argument anything I want.",
			"And then I'm just going to do this, for int i gets 1,",
			"i less than or equal to h, i++.",
			"And then inside of this, this is where you might recall, from problem set one,",
			"have found a nested loop to be useful.",
			"Let me do int j gets 1, j less than or equal to i, j++.",
			"This will be similar but not identical to either the less comfortable or more",
			"comfortable version of Mario from the past,",
			"because this pyramid is shaped in a different direction.",
			"Now, you print a hash there.",
			"And then let me go ahead and print a new line here.",
			"So I did this super quickly.",
			"But logically, what I'm doing is iterating",
			"over every row, so from 1 through h, so row 1, 2, 3, 4, for instance.",
			"And then on each row, I'm deliberately iterating from 1 through i.",
			"So I print 1, then 2, then 3, then 4.",
			"And again, I could zero index if I want.",
			"I find that in this context, more user friendly, more intelligible to me",
			"to index from 1, totally reasonable if you think",
			"there's a compelling design argument.",
			"So let me go ahead and make Mario.",
			"Ah, darn it.",
			"Oh, I missed my prototype.",
			"So notice, it's not understanding draw.",
			"So the fix for that is to either move the whole function",
			"or, as we've preached instead, to just put your prototype up top.",
			"Let me recompile Mario.",
			"OK, now successful.",
			"Mario, let's do a height of 4, and voila.",
			"Now, I have a relatively simple-- though I certainly",
			"did it faster than you might without some practice--",
			"implementation of Mario's pyramid.",
			"But here's where things get kind of cool.",
			"Let me stipulate that that is a correct iterative solution, even",
			"if it might take you some number of steps or trial and error",
			"to get that iterative loop-based code correct.",
			"Let me change this, now, to be recursive.",
			"And recall, a recursive function is one that calls itself.",
			"How do you print a pyramid of height h?",
			"Well, recall that you print a pyramid of height h minus 1,",
			"and then you proceed to print one more row of blocks.",
			"So let me take that literally. for int i gets zero.",
			"i is less than h, i++.",
			"Let me go ahead and just print that extra row of bricks",
			"like this, followed by a new line.",
			"So now, I did this kind of fast.",
			"But what am I doing here?",
			"Well, if the height equals 1, I want this loop to iterate one time.",
			"If the height equals 2, I wanted to iterate two times, 3, and so forth.",
			"So I think, using my zero-indexing technique here, this will work too.",
			"But if you prefer, I could certainly just change this to a 1",
			"and change this 2.",
			"But I'm going to go ahead and--",
			"actually, no.",
			"In this case, I want to leave it as such, zero index,",
			"just like we typically do.",
			"All right, let me go ahead and compile this, make Mario.",
			"OK, oops, interesting.",
			"All paths through this function will call itself.",
			"So clang is being kind of smart here, whereby,",
			"it's noticing that in my draw function, I'm calling my draw function.",
			"And that's a process that never changes.",
			"In fact, let me see if I can override that.",
			"Let me use clang manually and compile a program called mario using mario.c.",
			"And let me go ahead and link in cs50.",
			"So I'm using our old school syntax from week two.",
			"OK, that compiled.",
			"And why did that compile?",
			"Well, make is, again, a program that uses your compiler clang.",
			"And we've configured make to be a little more user-friendly and a little more",
			"protective of you by turning on special features",
			"where we detect problems like that.",
			"By using clang directly now, I'm disabling those special checks.",
			"And watch what happens when I run Mario now for height of 4, for instance.",
			"Boom, it crashed.",
			"It didn't even print anything.",
			"It crashed pretty quickly.",
			"And again, a segmentation fault means you touched memory that you shouldn't.",
			"So what's going on?",
			"Well, if you think of this memory as representing main still, but then draw,",
			"draw, draw, draw, draw, draw.",
			"If every one of your calls to draw just cause draw again,",
			"why would it ever stop?",
			"It wouldn't seem to stop here, necessarily.",
			"So it seems that I'm missing a key detail in my recursive version.",
			"You know what?",
			"If there's nothing to draw, if height equals equals 0, let me go ahead, then,",
			"and just return immediately.",
			"Otherwise, I'll go ahead and draw part of the pyramid",
			"and then add the new row.",
			"So you need this so-called base case, which you literally",
			"choose to equal some simple value, like height of 0, height of 1,",
			"any hardcoded value, so that eventually, draw does not call itself.",
			"So let me go ahead and recompile this with clang or make.",
			"Let me rerun it, height of 4, and voila.",
			"It's still working just like the interior version,",
			"but it's now using recursion.",
			"So here's a sort of design question.",
			"Is iteration better than recursion?",
			"It depends.",
			"Iteration will always work.",
			"When using the iterative version, I will never overflow the stack",
			"and hit the heap.",
			"Why?",
			"Because I'm not calling functions again and again.",
			"There's only main and one invocation of draw.",
			"But with the recursive version, it's kind of a cool, powerful way",
			"to do things.",
			"Like, oh, I can draw you a pyramid of height h.",
			"Let me just have you draw me a pyramid of height h minus 1,",
			"and then I'll add a row.",
			"It's kind of this clever, cyclical argument that does work very elegantly.",
			"But there's a danger.",
			"And in fact, even though this base case ensures that it doesn't go forever,",
			"it could go on so long-- maybe let's try 10,000 invocations.",
			"So that worked OK.",
			"It's a little slow.",
			"I'm losing control over my keyboard.",
			"So Control C is your friend.",
			"Let me try this once more.",
			"Let me go ahead and do something like 2 billion and see if that works.",
			"Boom.",
			"So even that doesn't work.",
			"So there's this inherent danger with recursion, whereby,",
			"even though it empowered us last week to solve a problem even more efficiently",
			"with merge sort, we kind of got lucky, in that we weren't trying to crazy big",
			"things on Brian's shelf, because it would seem if you use recursion",
			"and call yourself again and again and again and again,",
			"even finitely many times, you might eventually touch memory you shouldn't.",
			"And what's the solution here?",
			"Unfortunately, it's don't do that.",
			"Design your algorithms, choose your inputs in such a way",
			"that there just isn't that risk.",
			"And we'll use recursion again in a few weeks",
			"time when we look at more sophisticated data structures.",
			"But again, there's always this trade off.",
			"Just because you can design something a little more",
			"elegantly doesn't necessarily mean that it's always going to work for you.",
			"But more commonly, are you likely to run into other problems as well?",
			"There's something called a buffer overflow.",
			"And this you will surely trip over in the coming weeks.",
			"A buffer overflow is when you allocate an array",
			"and go too far past the end of it.",
			"Or you use malloc and you, nonetheless, go farther",
			"than the end of the chunk of memory that you allocated.",
			"A buffer it's just a chunk of memory, so to speak, that you can use as you see",
			"fit.",
			"Buffer overflow means going beyond the boundaries of that array.",
			"You might use-- you're using, right now, video.",
			"You might know the phrase buffering from videos,",
			"like sort of buffering and annoying you on Netflix,",
			"because there's a spinning icon or whatnot.",
			"Well, that means exactly this.",
			"A buffer, in the context of YouTube or Zoom or Netflix,",
			"means some chunk of memory that was retrieved",
			"via malloc or some similar tool that gets filled",
			"with bytes comprising your video.",
			"And it's finite, which is why you can only buffer so many seconds",
			"or minutes of video before, eventually, if you're offline,",
			"you run out of video content to watch.",
			"And the stupid icon comes up, and you can",
			"watch no more, because a buffer is just a chunk of memory, an array of memory.",
			"And if Netflix or Google or others were to implement their code unsafely,",
			"they might very well go too far past that boundary as well.",
			"So with all this said, let's consider, in some of our final minutes",
			"here today, just what else we've been getting from these training wheels,",
			"because we do want to take them mostly off for you.",
			"So the CS50 library not only provides you",
			"with this abstraction of a string type, which again,",
			"doesn't give you any new functionality.",
			"Strings in C exist, just not by that name.",
			"They're known more properly as char stars.",
			"But all of these functions in the CS50 library",
			"can be implemented with other actual C functions that weren't from CS50,",
			"namely using one called scanf.",
			"But you're going to see, immediately, some of the dangers",
			"of using something like scanf, which is an old school function.",
			"It was not designed to be self-defensive like CS50's library.",
			"And so it's very easy to make mistakes.",
			"Let me go ahead, for instance, and create a file",
			"called scanf.c, just to demonstrate this function.",
			"I'm not going to use the CS50 library, just standard io dot h.",
			"And I'm going to give myself int main void.",
			"And I'm going to go ahead and give myself a variable x.",
			"And I'm going to go ahead and print out quote unquote, \"x:\"",
			"just like CS50's get int function does.",
			"And then I'm going to call scanf.",
			"And I'm going to go ahead and say, scan from the user's keyboard, an integer,",
			"and store it in the location of x.",
			"Then, I'm going to go ahead and print out, again,",
			"x, and a colon and a backslash percent i backslash n.",
			"And I'm going to print x.",
			"So what's going on here?",
			"In line 5, I'm declaring a variable called x, just like in week one.",
			"Line 6, just using printf, like in week one.",
			"The interesting stuff seems to be in line 7.",
			"Scanf is a function that takes input from the user, just like get int, get",
			"string, get float, and so forth.",
			"But it does it only by you having to understand pointers,",
			"because recall from our swap example, if you want to have a function,",
			"change the contents of a variable, as we did with a and b",
			"and x and y, you have to pass in the address of the variable, whose",
			"value you want to change.",
			"You can't just pass in x itself.",
			"So if we didn't use the CS50 library in week one,",
			"you would have been writing code like this just to get an int from the user.",
			"And you would have had to understand pointers.",
			"And you would have to understand ampersand and stars and so forth.",
			"It's just too much, when all we care about in the first weeks",
			"are loops and variables and conditions and sort of the fundamentals.",
			"But here, we now have the ability to call scanf, tell it",
			"to scan from the user's keyboard, so to speak,",
			"an integer, or percent f would give us a float or other such codes,",
			"and pass in the address of x so that scanf can go to that address",
			"and put the integer from the user's keyboard there.",
			"Line 8 is like week one stuff.",
			"I'm just printing out the value.",
			"And this is pretty safe.",
			"I'm going to go ahead and make scanf.",
			"It compiles OK.",
			"I'm going to go ahead and run it.",
			"I'm going to type in 50.",
			"And voila, it prints out a 50.",
			"But there's some weirdness, because if you run this program too",
			"and type in cat, well then x is 0.",
			"And there's no error checking.",
			"So immediately, you should glimpse that one",
			"of the features of the CS50 library, recall,",
			"is that we keep prompting the user again and again if they're not",
			"cooperating and giving you an int.",
			"So that's one feature you get from the library.",
			"But it turns out that get string is even more powerful,",
			"because if I go and change this program now, not to get an int,",
			"but something fancier like a string--",
			"or wait, we're calling it char star now.",
			"I'm going to go ahead and do something very similar.",
			"I'm going to prompt the user for string s.",
			"And I'm going to use scanf.",
			"And I'm going to use percent s, just like printf uses percent s.",
			"And I'm going to pass in s.",
			"Now, to be clear, I don't need to do ampersand s here,",
			"because now, we all know that s is fundamentally an address.",
			"So it suffices just to pass in the address that you already have.",
			"Now, I'm going to go ahead and print out s colon, percent s backslash n,",
			"and print out s.",
			"But when I compile this, make scanf, it doesn't like it",
			"when I compile variable s's uninitialized when used here.",
			"All right, well if I really want to be sort of adventurous,",
			"I can override make's protections.",
			"And I can just compile this manually myself using scanf--",
			"using clang directly.",
			"That worked, dot slash scanf.",
			"Let me go ahead and type in, for instance, \"HI!\"",
			"and you see weirdness, nul.",
			"Well, fortunately, make, and in turn clang,",
			"were kind of helping us help ourselves there.",
			"It was pointing out that you declared s.",
			"So you were declared 8 bytes for a pointer.",
			"But there's nothing there.",
			"It's a garbage value.",
			"And so there's nowhere to put this.",
			"And thankfully, printf and scanf are being smart enough",
			"by not just blindly going there and plopping H, I,",
			"exclamation point in a nul character.",
			"They're just leaving it alone.",
			"And this parenthetical nul is just a printf feature saying, you screwed up.",
			"If you see nul, you've done something wrong.",
			"It's just being generous and not crashing on you.",
			"If I actually want to get user's input, I need to be smarter than this.",
			"And I need to either allocate myself 4 bytes, as we've done earlier today.",
			"Or I could go back to week two stuff and say something like, give me 4 bytes.",
			"This, though, gives me 4 bytes on the stack somewhere",
			"down here in main's frame, so to speak.",
			"These rows are called frames.",
			"If I use malloc instead, it comes from the so-called heap,",
			"which not pictured, is sort of up here.",
			"And the only difference is that if I'm using malloc, I have to use free.",
			"If I'm using the stack, as I did in week two, I don't have to use free.",
			"It's automatically managed for me.",
			"So frankly, there's so much new stuff today.",
			"I like the idea of sticking with the old school arrays.",
			"So now, though, if I go ahead and make scanf, now it compiles with make.",
			"If I then run scanf and type in, HI!, voila, it seems to work.",
			"But that's because I was smart and anticipated that H-I,",
			"OK four characters.",
			"I gave myself 4 bytes.",
			"But what if the user types in, HI THERE, DAVID, HOW ARE YOU?",
			"Clearly, more than four bytes.",
			"And I hit Enter now, something weird there happened.",
			"The rest is just lost.",
			"And this would really be annoying and very frustrating",
			"if you-- trying to get user input in the first week of the class.",
			"Get string avoids this for you.",
			"Get string calls malloc for you.",
			"And it calls it for as big a chunk of memory as the string",
			"the human types in.",
			"Long story short, we sort of watch what they're typing character",
			"by character by character.",
			"And we make sure to allocate or reallocate",
			"just enough memory to fit whatever it is the human has typed in.",
			"So scanf is, essentially, how a function like the CS50 library",
			"works underneath the hood.",
			"But it is doing all of this for you.",
			"And as soon as you take away training wheels like that, or frankly,",
			"libraries like that, which it really is at the end of the day.",
			"It's not just a teaching tool.",
			"It's a useful library.",
			"You have to start implementing more of this low-level stuff yourself.",
			"So again, there is a trade off.",
			"If you don't want to use something like the CS50 library, that's fine.",
			"Now, the onus is on you to avoid all of these possible error conditions.",
			"All right, with that said, we have one final feature",
			"to give you in order to motivate this week's problems, wherein",
			"you'll actually explore and manipulate and write code to change files.",
			"And for that, we need one final topic of file I/O. File I/O",
			"is the term of art that describes taking input and output from files.",
			"Pretty much every program we've written thus far just uses memory, like this",
			"here, whereby, you can put stuff in memory.",
			"But as soon as your program ends, boom.",
			"It's gone.",
			"The contents of memory are gone.",
			"Files, of course, are where you and I in the computing world",
			"save our essays and documents and resumes",
			"and all of that permanently on your computer.",
			"In C, you have the ability, certainly, to write code yourself that",
			"saves files long term.",
			"So for instance, let me go ahead and write my own program here,",
			"a phonebook program that stores names and numbers in a file.",
			"I'm going to go ahead and include, just for convenience, the CS50 library",
			"again, because I don't want to deal with scanf.",
			"I'm going to go ahead and save this, incidentally, as phonebook.c.",
			"I'm going to go ahead and include, not just the CS50 library, but standard io.",
			"And preemptively, I'm going to go ahead and include string.h as well.",
			"And I'm going to go ahead in my main function.",
			"And I'm going to use a few new functions that we'll see only briefly here.",
			"But in the next problem set, will you explore these in more detail.",
			"I'm going to give myself a pointer to a file.",
			"It turns out, weirdly, that in all caps, FILE,",
			"this is a new data type that does come with C that represents a file.",
			"So I'm going to go ahead and give myself a pointer to a file,",
			"the address of a file.",
			"And I'm going to call the variable file.",
			"I could call it f I could call it x.",
			"I'm going to call it lowercase file, just to be clear.",
			"And I'm going to use a new function called f open, which means file open.",
			"And file open takes two arguments.",
			"It takes the first argument, which is the name of a file you want to open.",
			"I'm going to open a file called phonebook.csv.",
			"And then I'm going to go ahead and open it, specifically, in append mode.",
			"Long story short, you can open files in different ways,",
			"to read them, that is just look at their contents, to write them,",
			"which is to change their contents entirely,",
			"or to append to them, a, which means to add row by row to them,",
			"so to keep tacking on more information to them.",
			"I'm going to go ahead and, just to be safe,",
			"I'm going to say if file equals equals nul,",
			"because recall that nul signifies something went wrong,",
			"let's just return now.",
			"Maybe I mistyped the name of the file.",
			"Maybe it doesn't exist.",
			"Something went wrong, potentially.",
			"I'm going to check for that by saying, if file equals equals nul, just",
			"quit out of the program now.",
			"But after that, I'm going to go ahead and get a string.",
			"But we can call that char star now, called name.",
			"And I'm going to ask the user for a name.",
			"And we've done this before.",
			"I'm going to go ahead and ask them for a number, phone number.",
			"And we've done this before.",
			"The only difference, now, is I'm calling string char star.",
			"And now, here's the cool part.",
			"It turns out, if I want to save this name and number",
			"to that file permanently in a CSV--",
			"if unfamiliar, popular in the consulting world, the analytics world.",
			"It's just a spreadsheet, a comma-separated value",
			"file that you can open in Excel or numbers or Google spreadsheet.",
			"I'm going to go ahead and, not printf, but fprintf to that file,",
			"a string followed by a comma, followed by a string, followed by a new line,",
			"plugging in the name and the number.",
			"And then down here, I'm going to close the file.",
			"So this is new. fprintf is not printf, which prints to your screen.",
			"fprintf prints to a file.",
			"So you have to pass in one more argument, the first one, which",
			"is the pointer to the file that you want to send these new strings to.",
			"Then you still provide a format string, which says, hey fprintf,",
			"this is the kind of data I want to print to the file.",
			"And then you plug in the variables, just like we've always done with printf.",
			"And then lastly, we close the file.",
			"So in short, this program would seem to prompt a human for a name and number.",
			"And then it's going to go ahead and write those names",
			"and numbers to the file.",
			"So let me go ahead and make phonebook.",
			"OK, no mistake so far, dot slash phonebook, David, 949-468-2750.",
			"OK, let me run it once more, even though nothing seems to have happened.",
			"Brian, how about 617-495-1000, Enter.",
			"Let me check my file browser here.",
			"Notice, all of the files we've created today, including, if I zoom in,",
			"not just phonebook.c, but phonebook.csv.",
			"And if I double click that, notice what's inside of this.",
			"Voila, David's name, Brian's name, and each of our numbers.",
			"And even cooler than that, let me go ahead and close this.",
			"Let me go ahead and download this file using the IDE.",
			"And that's going to put it into my Downloads folder.",
			"Let me go ahead and click on it.",
			"And it's going to open Excel or Numbers or whatever",
			"you happen to have on your Mac or PC.",
			"I'm going to go ahead and just proceed.",
			"And voila, looks a little stupid in this formatting here.",
			"But I've opened up a spreadsheet that I, myself, generated",
			"using fopen, fprintf, and fclose.",
			"So already, now that we have pointers at our disposal,",
			"can we actually manipulate things like files, which is quite cool.",
			"But we're going to do that this week, not",
			"with text, but with actual specific types of files.",
			"And indeed, recall this kind of thinking here.",
			"If you glance at this, it's probably pretty cryptic.",
			"It looks like machine code, but it's not.",
			"This is, perhaps, the simplest representation",
			"of a smiley face inside of a file.",
			"If you have a bitmap file, a map of bits, a grid of bits, those bits,",
			"quite simply, could literally be 0's and 1's.",
			"And if you assign the color black to 0 and the color white to 1,",
			"you could actually think of this same grid of 0's and 1's as representing,",
			"indeed, a smiley face.",
			"In other words, here are some pixels.",
			"We talked about pixels in week zero.",
			"Pixels are just the dots that compose a graphic file on your computer.",
			"And pixels are everywhere.",
			"All of us, now, tuning in live via Zoom or YouTube or the like,",
			"we're watching streams of pixels, which compose multiple images and multiple",
			"images compose video that appears to be moving at, like, 20 something or 30",
			"frames per second, images per second.",
			"Now, of course, there's only so much fidelity in these kinds of images.",
			"And it's quite common in the case on TV and in movies,",
			"if there's some bad guy that's been picked up with some surveillance",
			"footage or the like, invariably, the folks on Law & Order and the like",
			"can just kind of enhance the video and zoom in and see",
			"exactly the glint in the person's eye that reveals who committed some crime.",
			"Well, that's all kind of nonsense.",
			"And it derives from some of the primitives we introduced in week zero.",
			"In fact, just to poke fun at this, let me go ahead",
			"and play on a few seconds of this TV show here in the US",
			"called CSI, just to give you a sense of just how commonplace this kind of logic",
			"is.",
			"[VIDEO PLAYBACK]",
			"- We know.",
			"- That at 9:15, Ray Santoya was at the ATM.",
			"- So the question is, what was he doing at 9:16?",
			"- Shooting the 9 millimeter at something.",
			"Maybe he saw the sniper.",
			"- Or was working with him.",
			"- Wait, go back one.",
			"- What do you see?",
			"[CLICKING]",
			"",
			"- Bring his face up, full screen.",
			"- His glasses.",
			"- There's a reflection.",
			"[TYPING]",
			"",
			"- That's Neuvitas baseball team.",
			"That's their logo.",
			"- And he's talking to whoever's wearing that jacket.",
			"- We may have a witness.",
			"- To both shootings.",
			"[END PLAYBACK]",
			"DAVID MALAN: So unfortunately, today will rather ruin a lot of TV and movie",
			"for you, because you can't just zoom in infinitely",
			"and see more information if that information is not there.",
			"At the end of the day, there's only a finite number of bits.",
			"And case in point, here's a photograph of Brian.",
			"And you might see that, oh, there's a glint in his eye.",
			"Let's see what was being reflected in his eye there.",
			"And so if we Zoom in on this image here of Brian,",
			"and maybe we zoom in a little further, that's all that's actually there.",
			"You can't just click the enhance button and see more,",
			"because at the end of the day, these are just pixels.",
			"And pixels, per week zero, are just 0's and 1's, and finitely, many so.",
			"So what you see is what you get.",
			"Now, with that said-- and actually, we can poke fun of this, too, here.",
			"Let me just play one other short clip from Futurama,",
			"which kind of hammers home this point as well, but more playfully so.",
			"[VIDEO PLAYBACK]",
			"- Magnify that death speed.",
			"Why is it still blurry?",
			"- That's all the resolution we have.",
			"Making it bigger doesn't make it clearer.",
			"- It does on CSI: Miami.",
			"- [SIGH]",
			"[END PLAYBACK]",
			"DAVID MALAN: So there, we have two clips talking, rather, to one another.",
			"But I have to update things for 2020.",
			"You can't really pick up the internet these days or magazine these days,",
			"if you even would, that doesn't somehow mention",
			"machine learning and artificial intelligence",
			"and fancy algorithms via which you can do things",
			"that previously weren't quite possible.",
			"And that's actually kinda sorta the case.",
			"You might recall from week zero, that we found this beautiful watercolor",
			"painting in the Harvard archives that's only about 11 inches tall total.",
			"And yet somehow, it's 13 feet tall here behind me.",
			"Now, normally, if you were to just enhance this watercolor painting,",
			"it would start to look pretty stupid pretty quickly",
			"with lots and lots of pixelation, even if you",
			"used a very fancy camera, as the archives do,",
			"to capture the original image.",
			"But we wanted to blow it up to 13 feet tall",
			"so that it would stand at high quality behind us this whole time.",
			"And there, we actually did use enhance, in some sense.",
			"So using, long story short, fancier algorithms than those last week,",
			"you can use artificial intelligence, machine learning,",
			"to actually analyze data and find patterns where there weren't--",
			"that aren't necessarily visible to the human eye.",
			"So for instance, if we take the original here and start to zoom in,",
			"it looks pretty good at this resolution.",
			"But it's pretty smooth.",
			"You don't really see the fact that this was paint on an actual canvas.",
			"So this was just zooming in on Photoshop.",
			"But when you actually run an image like this",
			"through fancy machine learning-based software, artificial intelligence,",
			"you can begin to improve it and actually see,",
			"not just this window from the top of one of the buildings, which",
			"is pretty glossed over here in Photoshop,",
			"you can start to see more detail.",
			"So this is literally the before, just zooming in Photoshop.",
			"This is after, actually applying fancy artificial intelligence algorithms",
			"that notice, wait a minute, there's a little discoloration there.",
			"Wait, there's a little discoloration there.",
			"And nowadays, enhance is increasingly becoming a thing.",
			"It's still inferring.",
			"It's not resurrecting information that was necessarily there.",
			"It's doing its best guess, really, algorithmically,",
			"to reconstruct what the image actually was.",
			"And if we zoom in further, you can, perhaps,",
			"see that this is really starting to get blurry if you just use Photoshop",
			"and keep zooming in.",
			"But if you run it through fancy enough algorithms",
			"and start to notice slight discolorations that",
			"aren't super visible to the human eye, we can enhance that even further.",
			"And you can't do it infinitely so.",
			"And in some sense, we're creating information",
			"where there isn't necessarily that information there.",
			"So whether or not these kinds of things hold up in court is another question.",
			"But it can improve the fidelity of images like this.",
			"And indeed, it allowed us to zoom in from 11 inches to 13 feet instead.",
			"So when it comes to manipulating images, ultimately, we",
			"do have some programmatic capabilities, including this file pointer,",
			"like we just saw, and also, a few other functions as well.",
			"And our final examples, here, will lay the foundation",
			"for what you'll do this coming week, which",
			"is manipulate your very own graphical files with a newfound understanding",
			"of pointers and addresses and now files and input and output.",
			"For instance, I'm going to go ahead and open up a program here called--",
			"give me just one second.",
			"I'm going to open up a program here called jpeg.c.",
			"And this program, jpeg.c, which I wrote in advance,",
			"which is on the course's website, does the following.",
			"It first declares a type called byte.",
			"It turns out, in C, there's no common definition of what a byte is.",
			"A bite, as we know it, is a bit.",
			"And it turns out, the simplest way to create",
			"a byte is to define our own, just like we've defined a string,",
			"just like we've defined other types too, like a student, in order--",
			"a person, rather, in order to give us a byte.",
			"So this first line of code just declares a data type",
			"called byte, using another, more arcane data type called u int a underscore t.",
			"But more on that in the problem set.",
			"That this just did invent something called byte.",
			"Notice, in this program, I'm resurrecting the idea",
			"from week two of command line arguments, where we can take input from the user.",
			"Notice that I'm checking if the user typed in two arguments.",
			"And if not, I'm returning one immediately to signify error.",
			"In line 17, I'm using my new technique.",
			"I'm opening a file using the name of the file",
			"that the human typed at the command line.",
			"And this time, I'm opening it to read it with quote unquote, r instead of a.",
			"But if there's not a file--",
			"so if bang file, that is, if exclamation point file,",
			"or if file equals equals NULL, those mean the same thing.",
			"I can go ahead and return one, signifying an error.",
			"Down here, I'm doing something a little clever.",
			"It turns out that with very high probability,",
			"you can determine if any file is a jpeg by looking only at its first three",
			"bytes.",
			"A lot of file formats have what are called magic numbers",
			"at the beginning of their files.",
			"And these are industry standard numbers, 1 or 2 or 3 or more of them,",
			"that is just commonly expected to be at the beginning of a file,",
			"so that a program can quickly check, is this a jpeg?",
			"Is this a gif?",
			"Is this a Word document?",
			"Is this an Excel file?",
			"They tend to have these numbers at the beginning of them.",
			"And jpegs have a sequence of bytes that we're about to see.",
			"This line of code 24 here, as you'll see in the next problem set,",
			"is how you might give yourself a buffer of bytes, specifically",
			"an array of three bytes.",
			"This next line of code, as you'll see this coming week, is called fread.",
			"fread, as the name suggests, reads from a file.",
			"That is, it grabs bytes from a file.",
			"And it's a little fancy to use, but you'll get more comfortable",
			"with this over time.",
			"It reads into this buffer, its first argument, the size of this data type,",
			"the size of a byte.",
			"And it reads in this many of those data types from this file.",
			"So again, it's for arguments, which is kind of a lot from what we've seen.",
			"But it reads from this file, three bytes into this array,",
			"a.k.a. buffer, called bytes.",
			"So this is just how you write code that doesn't put data in a file,",
			"but read it from it.",
			"And then here, notice our hexadecimal.",
			"So we've come full circle.",
			"If bytes bracket 0 equals equals 0xff and bytes",
			"bracket 1 equals 0xd8 and bytes bracket 2 equals 0xff,",
			"this definitely looks cryptic to you.",
			"But that's just because I looked up in the manual for jpegs,",
			"and it turns out that almost any jpeg, rather,",
			"must start with 0xff, 0xd8, 0xff.",
			"Those are the first three bytes of any jpeg on your Mac, your PC,",
			"on the internet.",
			"There are always those three bytes.",
			"It turns out, the fourth byte further decides whether or not",
			"a file is actually a jpeg.",
			"But the algorithm for that's a little fancier, so I kept it simple.",
			"If the first three bytes of a file are those, maybe you have a jpeg.",
			"But if you don't have exactly those three bytes,",
			"you definitely don't have a jpeg.",
			"And so what I can do, here, is as follows.",
			"In today's code-- let me go ahead and grab two other files",
			"that I brought with me.",
			"And one happens to be a photograph again.",
			"Give me one second.",
			"I brought with me a few files, one of which is called brian.jpeg,",
			"which is the same photo of Brian.",
			"And then I have a gif, which of course, is not",
			"a jpeg, that is this cat typing here.",
			"And what I, effectively, have in front of me now",
			"is a program that if I do make jpeg, because this file is jpeg.c,",
			"and I run dot slash jpeg, I can type in something like cat.gif",
			"at the command line as an argument, hit Enter, and I should see no.",
			"By contrast, if I pass in Brian's jpeg at the command line as an argument,",
			"I see maybe.",
			"And again, maybe only because the algorithm",
			"for actually adjudicating whether something is a jpeg",
			"is a little more complicated than that.",
			"But indeed, I can now access the individual bytes, and therefore pixels,",
			"it would seem, of an image file.",
			"And in fact, we can even do this.",
			"Let me go ahead and show you one last program",
			"that we wrote deliberately in advance, just to give you a taste of what's",
			"coming with the next problem set.",
			"This program is a reimplementation of the program you've probably",
			"used one or more times called CP.",
			"Recall that CP is a program in the IDE and in Linux,",
			"more generally, that allows you to copy a file.",
			"You do CP, space, the filename, space, the new filename.",
			"How does this work?",
			"I now have all of the building blocks with which to copy files myself.",
			"So again, I'm defining a byte up here.",
			"I'm defining main as taking command line arguments here.",
			"And notice one change.",
			"I'm not using the CS50 library.",
			"So even what was previously string in week two is now char star.",
			"Even here for argv, I'm making sure that the human types",
			"in three words, the program's name and the source file and the destination",
			"file.",
			"I'm using fopen again.",
			"I'm opening the source file here from argv1.",
			"I'm making sure it's not nul.",
			"And then I'm quitting if it is.",
			"I'm then-- here's something new, opening the destination file here, also",
			"with fopen.",
			"But I'm using quote unquote, \"w.\"",
			"I'm opening one file with r, one file for w, because I want to read from one",
			"and write to the other.",
			"And then down here, this loop is a clever way",
			"of copying one file to another.",
			"I'm giving myself a buffer of one byte, so just a temporary variable, just",
			"like Brian's temp or empty glass.",
			"And I'm using this function, fread.",
			"I'm reading into that buffer via its address, the size of a byte,",
			"specifically one byte from the source file.",
			"And then, in that same loop, I'm writing from that buffer, the size of a byte,",
			"specifically one byte, to the destination.",
			"So literally, the CP program you might have seen me use",
			"or you yourself have used to copy files, is literally doing this.",
			"It's opening one file, iterating over all of its bytes,",
			"and copying them from source to destination.",
			"And then lastly, it's closing the file.",
			"And these last two examples deliberately fast,",
			"because this whole week will be spent diving into file I/O and images",
			"thereof.",
			"But all that we've done is use these fread, fopen, and fwrite and f close,",
			"to manipulate those very files.",
			"So for instance, if I now do this, let me do make cp.",
			"OK, seems to compile, dot slash cp, brian.jpeg.",
			"How about brian2.jpeg?",
			"And hit Enter.",
			"Nothing seems to happen.",
			"But if I go in here and double click on brian2,",
			"we see that we have a second copy of Brian's actual file.",
			"So this coming week, you'll experiment with multiple file formats for images.",
			"The first is jpegs.",
			"And we will give you a so-called forensic image",
			"of a whole bunch of photographs from a digital memory card.",
			"In fact, it's very common these days, certainly in law enforcement,",
			"to take forensic copies of hard drives, of media sticks,",
			"of phones and other devices, and then analyze them",
			"for data that's been lost or corrupted or deleted.",
			"We'll do exactly that, whereby, you'll write a program that recovers",
			"jpegs that have been accidentally deleted from a digital memory card.",
			"And we'll give you all copies of that memory card",
			"by making a forensic image of it, that is copying all of the 0's and 1's",
			"from a camera and giving them to you in a file",
			"that you can fread and then fwrite from.",
			"We'll also introduce you to bitmap files,",
			"BMP's, popularized by the Windows operating",
			"system for wallpaper's and the like.",
			"But we'll use them to implement using pointers and using file I/O,",
			"your very own Instagram-like filter.",
			"So we'll take this picture, here, of the Weeks footbridge",
			"here in Cambridge, Massachusetts by Harvard.",
			"And we'll have you implement a number of filters,",
			"taking this original image, for instance,",
			"and desaturating it, making it black and white,",
			"by iterating over all of the pixels top to bottom, left to right,",
			"and recognizing any colors, like red or green or blue or anything in between,",
			"and changing them to some shade of gray, doing a sepia filter,",
			"making things look old school, like this photo was taken",
			"many years ago, by similarly applying a heuristic that alters the colors of all",
			"of the pixels in this picture.",
			"We'll have you flip it around so you have to put this pixel over here",
			"and this pixel over there.",
			"And you'll appreciate exactly how files are implemented",
			"within your own hard drive and phone.",
			"And you'll even implement, for instance, a blur filter, which no accident,",
			"makes it harder to see what's going on here,",
			"because you're starting to, now, average together pixels that are nearby",
			"each other to kind of gloss things over and deliberately",
			"make it harder to see here.",
			"And so we'll even, if you so choose, have",
			"you implement edge detection, if feeling more comfortable,",
			"where you find the edges of all of the physical objects in these pictures,",
			"in order to actually detect them in code and create visual art like this.",
			"Now, this was a lot.",
			"And I know pointers are generally considered",
			"to be among the more challenging features of C,",
			"and certainly, programming in general.",
			"So if you're feeling like it's been quite a bit, it was.",
			"But you do now have the ability, either today",
			"or in the very near term, to understand even XKCD comics like this that most",
			"any computer scientist out there has seen.",
			"So our final look for you, today, is on this joke here.",
			"And even though I can't necessarily hear you from afar,",
			"I'll just assume, in our final moments today,",
			"that everyone is breaking out into a very geeky laughter.",
			"And I see some smiles, at least, which is reassuring.",
			"This was, then, CS50.",
			"We'll see you next time.",
			"[MUSIC PLAYING]",
			""
		],
		"is_youtube": false
	},
	"video_021": {
		"section": "CS50x 2021",
		"subsection": "Week 4",
		"unit": "Shorts",
		"video_sources": [
			"https://edx-video.net/HARCS50X2016-V035600_DTH.mp4",
			"https://edx-video.net/HARCS50X2016-V035600/HARCS50X2016-V035600.m3u8"
		],
		"video_duration": 568,
		"speech_period": [
			5.511, 2.999, 1.46, 3.03, 3.56, 3.96, 3.37, 2.91, 3.315, 2.125, 3.26,
			2.189, 2.791, 1.929, 2.291, 2.07, 2.263, 3.567, 5.09, 3.152, 2.958, 3.124,
			4.736, 4.95, 1.2, 4.17, 1.5, 3.1, 3.26, 4.58, 2.76, 4.03, 2.31, 5.96,
			6.57, 3.737, 1.833, 2.94, 3.31, 1.22, 2.49, 2.73, 7.34, 3.79, 3.62, 5.51,
			1.87, 4.64, 1.4, 2.4, 3.75, 5.04, 6.67, 4.885, 1.875, 1.999, 2.871, 3.259,
			2.791, 4.11, 3.29, 2.71, 3.73, 4.13, 3.2, 1.56, 4.84, 3.25, 2.78, 3.022,
			1.708, 1.94, 3.545, 2.535, 2.44, 3.23, 3.6, 2.27, 2.14, 4.61, 2.39, 4.36,
			4.01, 3.31, 2.95, 4.5, 1.38, 5.01, 4.51, 4.1, 4.44, 2.16, 3.68, 2.96,
			4.66, 7.32, 4.58, 5.07, 4.17, 5.94, 3.25, 1.791, 3.619, 6.98, 3.84, 4.11,
			2.25, 2.57, 2.12, 3.62, 3.01, 5.23, 4.36, 2.77, 3.95, 1.57, 4.3, 2.16,
			1.66, 4.187, 1.833, 2.92, 2.699, 2.041, 1.87, 3.28, 3.594, 1.916, 3.98,
			1.63, 2.041, 3.739, 1.07, 3.14, 5.95, 2.99, 1.56, 4.32, 2.81, 4.33, 5.09,
			4.51, 3.58, 5.582, 4.958, 2.25, 1.69, 3.3, 3.67, 6.72, 4.099, 3.88, 3.76,
			3.561, 3.69, 2.81, 2.69, 3.41, 1.97, 3.95, 2.05, 1.2, 2.208, 1.922, 4.35,
			7.17, 2.95, 1.788
		],
		"transcript_en": [
			"",
			"DOUG LLYOYD: So hexadecimal numbers, as if we needed another base number",
			"scheme right?",
			"Well, most Western cultures, as you probably are familiar,",
			"use the decimal system-- base 10, to represent numeric data.",
			"We have the digits 0, 1, 2, 3, 5, 6, 7,8,9.",
			"And if we need to represent values higher than nine,",
			"we can combine those digits using the notion of place value.",
			"So for 10, we have a 1 digit followed by a 0 digit",
			"and we intuitively understand that what we're doing",
			"there is we're multiplying the first 1 by 10,",
			"and then adding 0 for a total of 10.",
			"Computers do something pretty similar, as you're probably familiar,",
			"with the binary system-- base 2.",
			"The difference there being that there are only 2 digits",
			"to work with-- 0 and 1.",
			"And so our place values, instead of being one,",
			"ten, hundred, thousand, as they would be in the decimal system,",
			"are one, two, four, eight, and so on.",
			"Here's the thing though, those 0's and 1's, especially",
			"if we're being computer scientists and we're doing a lot of programming",
			"or working with computers, were going to be seeing a lot of binary numbers.",
			"And those 0's and 1's in large chains can be very difficult to parse.",
			"We can't just look at a string of 0's and 1's and necessarily know",
			"exactly what it is.",
			"But it's still useful to be able express data in the same way",
			"that a computer does.",
			"We have this notion of the hexadecimal system, which is",
			"base 16, instead of base 10 or base 2.",
			"Which means that we have 16 digits to work with instead of 10 or 2.",
			"And it's a much more concise way to express",
			"binary information on a computer system, it's much more human understandable.",
			"So we have the digits 0 through 9, and then",
			"we also have these extra six digits-- a, b, c, d, e, and f, which represent 10,",
			"our notion of 10, 11, 12, 13, 14 and 15, in decimal.",
			"Sometimes, by the way, you'll also see these a through f's as capital A",
			"through F, which is the way I tend to do it.",
			"It's just my preferred style, but either is fine,",
			"they both represent pretty much the same thing.",
			">> So why is hexadecimal cool?",
			"Why do we need to use this other additional base?",
			"We already have 2 and 10, why do we need 16?",
			"Well 16 is a power of 2, and so each hexadecimal digit, 0 through f,",
			"corresponds to a unique ordering, or unique arrangement",
			"of 4 binary digits, 4 bits.",
			"And so in that sense, we can express very long, complex, binary numbers",
			"in hexadecimal in a much more concise way,",
			"without losing information or having to do particularly cumbersome conversions",
			"on those numbers.",
			">> So, as I just said, each hexadecimal digit",
			"corresponds to a unique arrangement of 4 binary digits.",
			"So the binary string 0000 corresponds to hexadecimal digit 0.",
			"0110 corresponds to hexadecimal digit 6.",
			"And 1111 corresponds to hexadecimal digit f.",
			"If you're looking at this chart, particularly",
			"if you're looking at the left side of the chart,",
			"you can already see there's a bit of an ambiguity problem here.",
			"Decimal 0 is pretty much indistinguishable from hexadecimal 0,",
			"other than the fact that it's under a column that says hexadecimal.",
			">> But we probably won't always have that column there.",
			"Generally when we are expressing numbers into hexadecimal notation",
			"to clearly distinguish them from decimal notation,",
			"we usually prefix them with the prefix 0x.",
			"0x means nothing in reality, it's just a clue to us as humans",
			"that what we're about to see, or about to start parsing,",
			"is a hexadecimal number.",
			"Obviously for the higher digits a, b, c, d, and f, which correspond to 10-15",
			"it's pretty unambiguous that's that's a hexadecimal number.",
			"And in fact, any hexadecimal number that has letters in it,",
			"is probably pretty obvious as a hexadecimal number.",
			"But, still, for the sake of clarity, it's",
			"always a good idea to prefix every time you",
			"refer to a digit as a hexadecimal number by prefixing a 0x.",
			"",
			">> So, binary, as we said, has place values.",
			"There's the ones place, a twos place, a fours place, and an eights place.",
			"And decimal also has place values, the ones, tens, hundreds, and thousands",
			"that we all may recall from grade school.",
			"And hexadecimal is no exception here, really.",
			"It also has place values but instead of being powers of 2 or powers of 10,",
			"they're powers of 16.",
			">> So we see a number like this we pretty clearly know it's 397, right?",
			"Well if we see a number like this, we know this isn't 397 anymore.",
			"This is the hexadecimal number three-nine-seven.",
			"It's not 397, it means something different,",
			"because we're using powers of 16 as all of our place values instead of powers",
			"of 10.",
			"In fact, the place values here would be the ones place, the sixteens place,",
			"and the two-hundred-fifty-sixes place, which correspond to our idea of a ones",
			"place, tens place, and a hundreds place, if the number was 397.",
			"But since it's 0x 397, we have a ones place, sixteens place,",
			"and a two-hundred-fifty-sixes place.",
			"Or, a 16 to the 0 place, which is 1.",
			"A 16 to the first power place, 16.",
			"A 16 squared place, 256, and so on, and so on, and so on.",
			"So this number is really 3 times 16 squared, plus 9 times 16, plus 7.",
			"I didn't do the math here, but it's not 397, it's much, much larger than that.",
			">> Similarly, we could have 0x adc, well that's a times 16 squared.",
			"Or if we translate that to our notion of decimal numbers, that's 10 times",
			"16 squared, plus d times 16, or plus 13 times 16.",
			"And don't worry if you haven't memorized that d is 13, or anything like that,",
			"there's not too many of these letter digits",
			"and it'll become intuitive pretty quickly.",
			"So again this is 10 times 16 squared, plus 13 times 16, plus 12 times 1.",
			"So 0x adc.",
			">> So, as I said, every group of 4 binary digits",
			"corresponds to a single hexadecimal digit,",
			"and so it's actually really easy to change back and forth",
			"between hex and binary.",
			"If you have this long string of binary digits, all you need to do",
			"is start grouping them right to left as groups of 4.",
			"And then you can consolidate them into hexadecimal numbers,",
			"severely limiting the number of digits you have to process mentally.",
			"Instead of 32 0's and 1's, as we'll see in a second,",
			"you might be able to get it down to just 8 hexadecimal digits, a lot",
			"more concise.",
			">> The charts a few slides back will help you to figure out this mapping,",
			"although, again you'll memorize it pretty quickly.",
			"We'll go through an example right now.",
			"So if we have a number like this, this really large binary number,",
			"or what appears to be a large binary number.",
			"And the reason I say that, it's just so-- it's a behemoth, right?",
			"There's so many 0's and 1's there.",
			"But we probably don't really have a sense of what",
			"the magnitude of this number really is.",
			"We don't have any idea what it would correspond to a decimal.",
			"And in fact we won't even see what it corresponds to in decimal right now.",
			"We might be able to express this in a way that",
			"would give us some more information about just how big this number is.",
			">> So let's go to that conversion process.",
			"The first thing we need to do is we want to group",
			"these digits out into groups of 4, starting from the right",
			"and working to the left.",
			"There happen to be 32 digits here, which means we have",
			"a nice clean break of 8 groups of 4.",
			"Remember that each group of 4 here, uniquely corresponds",
			"to a hexadecimal digit.",
			"So we'll start again building our number from the right, and working left.",
			"Well what's 1101?",
			"Well we do the math out in our head, we have 1 in the eights place, a 1",
			"in the fours place, a 0 in the twos place, and a 1 in the ones place.",
			"That's 8 plus 4 plus 1, which we would know as 13.",
			"But we probably wouldn't write 13 out, because we're working with hexadecimal.",
			"We need to convert it to the hexadecimal equivalent of 13, which is d.",
			">> 0011, well that's a 0 in the eights place, a 0 in fours place,",
			"a 1 in the twos place, and a 1 in the ones place.",
			"That's 3.",
			"I mean keep doing this again, we have here 9.",
			"And then 11, but that's b, recall.",
			"2, 10-- or a-- 6, and 4.",
			"And so that very large string of 0's and 1's of the top",
			"is more concisely expressed in hexadecimal as 0x 46a2b93d.",
			"",
			">> Well, OK, we've learned a new cool skill, what's the point?",
			"We might not use this all the time, as we're going to soon see,",
			"we use hexadecimal quite a lot as programmers.",
			"Not necessarily for the purpose of doing math with it,",
			"but because a lot of times memory addresses in our system",
			"are represented in hexadecimal.",
			"It's a really concise way to express otherwise cumbersome, binary numbers.",
			"And so, again, you may not-- you're probably",
			"not going to do any math with it, you are not",
			"going to be multiplying hexadecimal numbers together,",
			"or doing anything weird like that.",
			"But it is a useful skill to have so you can express and understand",
			"memory addresses, and other ways of using data in C.",
			">> I'm Doug Lloyd, this is CS50.",
			""
		],
		"is_youtube": false
	},
	"video_022": {
		"section": "CS50x 2021",
		"subsection": "Week 4",
		"unit": "Shorts",
		"video_sources": [
			"https://edx-video.net/HARCS50X2016-V028800/HARCS50X2016-V028800.m3u8",
			"https://edx-video.net/HARCS50X2016-V028800_DTH.mp4"
		],
		"video_duration": 1757,
		"speech_period": [
			6.03, 2.36, 2.69, 1.76, 2.22, 4.02, 2.18, 2.48, 3.71, 3.04, 2.85, 2.15,
			2.26, 3.31, 2.79, 4.37, 2.05, 3.45, 6.89, 2.46, 4.1, 5.082, 0.958, 4.46,
			3.09, 2.42, 3.52, 4.51, 3.67, 3.3, 5.61, 2.76, 3.277, 2.333, 4.819, 2.291,
			5.07, 4.34, 3.92, 4.29, 2.66, 5.21, 2.2, 2.29, 4.46, 2.39, 2.48, 2.42,
			4.34, 3.14, 2.83, 3.12, 3.52, 1.86, 2.46, 2.6, 4.32, 5.63, 1.23, 4.35,
			1.68, 2.87, 3.85, 2.37, 3.015, 4.665, 2.97, 4.57, 1.88, 5.08, 3.8, 2.57,
			3.59, 2.29, 3.61, 5.87, 3.577, 2.083, 2.74, 4.12, 3.15, 3.51, 2.44, 2.74,
			3.11, 2.86, 2.75, 3.15, 2.08, 3.12, 2.79, 2.52, 4.91, 2.27, 3.99, 4.36,
			3.521, 2.499, 3.06, 3.6, 2.09, 4.182, 2.208, 2.059, 1.291, 3.93, 4.14,
			4.53, 2.86, 4.1, 2.64, 4.83, 4.3, 2.28, 2.125, 4.015, 2.27, 3.99, 3.44,
			3.04, 2.456, 2.374, 2.125, 3.045, 2.65, 3.15, 2.95, 4.01, 1.89, 4.45,
			3.53, 3.38, 3.199, 1.791, 4.22, 2.854, 2.416, 2.125, 2.065, 2.61, 3.22,
			2.11, 1.88, 2.85, 2.76, 3.44, 3.52, 3.71, 3.45, 1.916, 2.314, 3.21, 4.47,
			2.59, 5.28, 2.97, 4.9, 2.64, 2.97, 1.499, 2.751, 3.04, 1.919, 1.75, 2.071,
			3.46, 1.75, 2.98, 1.75, 4.12, 2.17, 2.962, 1.958, 2.37, 3.64, 2.98, 2.87,
			2.46, 3.45, 1.75, 3.77, 1.18, 1.93, 1.65, 2.244, 1.916, 4.5, 5.03, 4.83,
			1.96, 3.96, 2.15, 2.694, 2.666, 3.52, 2.984, 2.166, 1.61, 3.79, 1.66,
			1.916, 3.624, 1.66, 4.07, 4.57, 3.48, 2.07, 1.97, 3.56, 3.37, 1.825,
			2.125, 6.6, 3.56, 2.061, 1.999, 3.19, 1.99, 2.23, 2.21, 4.41, 3.04, 2.614,
			1.166, 6.59, 4.17, 3.11, 7.937, 2.333, 4.23, 2.65, 2.875, 2.835, 4.6,
			4.61, 2.12, 2.55, 3.61, 4.21, 1.9, 2.97, 3.51, 2.91, 1.46, 3.35, 4.15,
			2.32, 3.02, 1.85, 1.88, 4.88, 3.29, 1.26, 4.41, 2.18, 3.106, 1.624, 5.53,
			3.43, 4.359, 2.791, 2.174, 2.416, 2.1, 2.28, 3.44, 2.15, 3.73, 2.43, 5.98,
			4.04, 3.38, 4.81, 4.68, 3.57, 4.19, 3.542, 1.958, 2.31, 3.52, 2.07, 2.37,
			2.33, 2.18, 4.0, 3.32, 3.4, 4.51, 2.28, 3.48, 2.19, 4.91, 3.68, 1.97,
			4.341, 3.339, 4.25, 2.39, 2.1, 2.78, 3.354, 1.916, 2.512, 1.958, 5.69,
			3.4, 6.36, 0.87, 4.674, 2.166, 2.16, 2.92, 4.09, 4.39, 4.73, 3.66, 4.7,
			5.54, 3.21, 1.9, 2.836, 2.374, 2.71, 8.35, 1.379, 0.861, 3.19, 6.909,
			10.201, 2.52, 2.78, 4.72, 1.88, 4.12, 3.8, 4.33, 3.47, 3.6, 2.73, 2.74,
			2.78, 4.34, 3.31, 2.89, 3.083, 2.657, 3.72, 1.77, 3.9, 2.39, 1.8, 2.98,
			3.3, 5.23, 1.05, 4.686, 3.124, 2.64, 3.14, 4.18, 2.44, 2.75, 3.12, 2.15,
			4.32, 2.44, 2.54, 3.97, 7.95, 2.3, 4.95, 1.02, 5.27, 5.13, 7.76, 3.05,
			4.47, 2.6, 2.445, 2.875, 3.26, 2.51, 3.56, 2.29, 2.39, 2.27, 4.24, 2.9,
			2.81, 2.02, 2.78, 3.36, 2.3, 2.75, 1.84, 3.68, 1.98, 3.31, 2.59, 6.175,
			2.125, 1.64, 3.21, 5.64, 2.69, 2.83, 1.76, 1.75, 2.68, 3.4, 1.78, 4.29,
			3.39, 4.0, 2.66, 2.31, 2.72, 4.63, 1.75, 3.36, 3.38, 2.46, 3.02, 2.79,
			2.43, 1.71, 4.67, 2.84, 4.06, 1.92, 2.249, 3.241, 3.409, 1.791, 3.95,
			2.73, 3.08, 2.56, 2.807, 1.833, 3.88, 3.62, 2.72, 4.98, 5.16, 1.13, 4.76,
			1.37, 3.09, 3.5, 2.26, 2.64, 5.747, 0.958, 3.055, 3.59, 2.42, 2.34, 2.8,
			4.58, 2.769, 3.291, 1.666, 2.268, 2.916, 2.38, 4.58, 2.38, 5.31, 1.12,
			6.11, 5.22, 3.3, 4.34, 2.85, 5.19, 2.97, 1.87, 3.0, 1.374, 2.746, 2.083,
			3.937, 4.17, 2.12, 3.81, 4.22, 3.22, 2.05, 4.47, 3.38, 1.39, 2.041, 3.549,
			4.09, 3.23, 2.2, 4.35, 2.41, 2.77, 1.016, 2.374, 4.56, 2.61, 4.51, 4.42,
			3.37, 4.45, 3.05, 3.57, 3.39, 5.93, 2.0, 4.1, 3.47, 1.51, 3.26, 4.16,
			1.89, 2.57, 4.9, 2.22, 6.41, 6.75, 2.84, 2.63, 1.19, 3.58, 2.75, 1.58,
			5.12, 5.33, 8.47, 5.67, 4.31, 3.27, 4.41, 2.05, 2.15, 3.53, 2.795, 1.875,
			3.77, 3.32, 3.29, 3.49, 3.07, 1.687
		],
		"transcript_en": [
			">> [MUSIC PLAYING]",
			">> DOUG LLOYD: Pointers, here we are.",
			"This is probably going to be the most difficult topic",
			"that we talk about in CS50.",
			"And if you've read anything about pointers",
			"before you might be a little bit intimidating going into this video.",
			"It's true the pointers do allow you the ability",
			"to perhaps screw up pretty badly when you're",
			"working with variables, and data, and causing your program to crash.",
			"But they're actually really useful and they allow us a really great way",
			"to pass data back and forth between functions,",
			"that we're otherwise unable to do.",
			">> And so what we really want to do here is train",
			"you to have good pointer discipline, so that you can use pointers effectively",
			"to make your programs that much better.",
			"As I said pointers give us a different way to pass data between functions.",
			"Now if you recall from an earlier video, when",
			"we were talking about variable scope, I mentioned",
			"that all the data that we pass between functions in C is passed by value.",
			"And I may not have used that term, what I meant there",
			"was that we are passing copies of data.",
			"When we pass a variable to a function, we're not actually passing the variable",
			"to the function, right?",
			"We're passing a copy of that data to the function.",
			"The function does what it will and it calculates some value,",
			"and maybe we use that value when it gives it back.",
			">> There was one exception to this rule of passing by value,",
			"and we'll come back to what that is a little later on in this video.",
			"If we use pointers instead of using variables,",
			"or instead of using the variables themselves or copies of the variables,",
			"we can now pass the variables around between functions in a different way.",
			"This means that if we make a change in one function,",
			"that change will actually take effect in a different function.",
			"Again, this is something that we couldn't do previously,",
			"and if you've ever tried to swap the value of two variables in a function,",
			"you've noticed this problem sort of creeping up, right?",
			">> If we want to swap X and Y, and we pass them to a function called swap,",
			"inside of the function swap the variables do exchange values.",
			"One becomes two, two becomes one, but we don't actually",
			"change anything in the original function, in the caller.",
			"Because we can't, we're only working with copies of them.",
			"With pointers though, we can actually pass X and Y to a function.",
			"That function can do something with them.",
			"And those variables values can actually change.",
			"So that's quite a change in our ability to work with data.",
			">> Before we dive into pointers, I think it's worth",
			"taking a few minutes to go back to basics here.",
			"And have a look at how computer memory works",
			"because these two subjects are going to actually be pretty interrelated.",
			"As you probably know, on your computer system",
			"you have a hard drive or perhaps a solid state drive,",
			"some sort of file storage location.",
			"It's usually somewhere in the neighborhood of 250 gigabytes",
			"to maybe a couple of terabytes now.",
			"And it's where all of your files ultimately live,",
			"even when your computer is shut off, you can turn it back on",
			"and you'll find your files are there again when you reboot your system.",
			"But disk drives, like a hard disk drive, an HDD, or a solid state drive, an SSD,",
			"are just storage space.",
			">> We can't actually do anything with the data that is in hard disk,",
			"or in a solid state drive.",
			"In order to actually change data or move it around,",
			"we have to move it to RAM, random access memory.",
			"Now RAM, you have a lot less of in your computer.",
			"You may have somewhere in the neighborhood of 512 megabytes",
			"if you have an older computer, to maybe two, four, eight, 16,",
			"possibly even a little more, gigabytes of RAM.",
			"So that's much smaller, but that's where all of the volatile data exists.",
			"That's where we can change things.",
			"But when we turn our computer off, all of the data in RAM is destroyed.",
			">> So that's why we need to have hard disk for the more permanent location of it,",
			"so that it exists- it would be really bad if every time we",
			"turned our computer off, every file in our system was obliterated.",
			"So we work inside of RAM.",
			"And every time we're talking about memory, pretty much, in CS50,",
			"we're talking about RAM, not hard disk.",
			">> So when we move things into memory, it takes up a certain amount of space.",
			"All of the data types that we've been working with",
			"take up different amounts of space in RAM.",
			"So every time you create an integer variable, four bytes of memory",
			"are set aside in RAM so you can work with that integer.",
			"You can declare the integer, change it, assign it",
			"to a value 10 incremented by one, so on and so on.",
			"All that needs to happen in RAM, and you get four bytes",
			"to work with for every integer that you create.",
			">> Every character you create gets one byte.",
			"That's just how much space is needed to store a character.",
			"Every float, a real number, gets four bytes",
			"unless it's a double precision floating point",
			"number, which allows you to have more precise or more digits",
			"after the decimal point without losing precision,",
			"which take up eight bytes of memory.",
			"Long longs, really big integers, also take up eight bytes of memory.",
			"How many bytes of memory do strings take up?",
			"Well let's put a pin in that question for now, but we'll come back to it.",
			">> So back to this idea of memory as a big array of byte-sized cells.",
			"That's really all it is, it's just a huge array of cells,",
			"just like any other array that you're familiar with and see,",
			"except every element is one byte wide.",
			"And just like an array, every element has an address.",
			"Every element of an array has an index, and we",
			"can use that index to do so-called random access on the array.",
			"We don't have to start at the beginning of the array,",
			"iterate through every single element thereof,",
			"to find what we're looking for.",
			"We can just say, I want to get to the 15th element or the 100th element.",
			"And you can just pass in that number and get the value you're looking for.",
			">> Similarly every location in memory has an address.",
			"So your memory might look something like this.",
			"Here's a very small chunk of memory, this is 20 bytes of memory.",
			"The first 20 bytes because my addresses there at the bottom",
			"are 0, 1, 2, 3, and so on all the way up to 19.",
			"And when I declare variables and when I start to work with them,",
			"the system is going to set aside some space for me",
			"in this memory to work with my variables.",
			"So I might say, char c equals capital H. And what's going to happen?",
			"Well the system is going to set aside for me one byte.",
			"In this case it chose byte number four, the byte at address four,",
			"and it's going to store the letter capital H in there for me.",
			"If I then say int speed limit equals 65, it's",
			"going to set aside four bytes of memory for me.",
			"And it's going to treat those four bytes as a single unit",
			"because what we're working with is an integer here.",
			"And it's going to store 65 in there.",
			">> Now already I'm kind of telling you a bit of a lie,",
			"right, because we know that computers work in binary.",
			"They don't understand necessarily what a capital H is",
			"or what a 65 is, they only understand binary, zeros and ones.",
			"And so actually what we're storing in there",
			"is not the letter H and the number 65, but rather the binary representations",
			"thereof, which look a little something like this.",
			"And in particular in the context of the integer variable,",
			"it's not going to just spit it into, it's not going to treat it as one four",
			"byte chunk necessarily, it's actually going",
			"to treat it as four one byte chunks, which might look something like this.",
			"And even this isn't entirely true either,",
			"because of something called an endianness, which we're not",
			"going to get into now, but if you're curious about,",
			"you can read up on little and big endianness.",
			"But for the sake of this argument, for the sake of this video,",
			"let's just assume that is, in fact, how the number 65 would",
			"be represented in memory on every system,",
			"although it's not entirely true.",
			">> But let's actually just get rid of all binary entirely,",
			"and just think about as H and 65, it's a lot easier",
			"to think about it like that as a human being.",
			"All right, so it also seems maybe a little random that I've- my system",
			"didn't give me bytes 5, 6, 7, and 8 to store the integer.",
			"There's a reason for that, too, which we won't get into right now, but suffice",
			"it to say that what the computer is doing here",
			"is probably a good move on its part.",
			"To not give me memory that's necessarily back to back.",
			"Although it's going to do it now if I want to get another string,",
			"called surname, and I want to put Lloyd in there.",
			"I'm going to need to fit one character, each letter of that's",
			"going to require one character, one byte of memory.",
			"So if I could put Lloyd into my array like this I'm pretty good to go, right?",
			"What's missing?",
			">> Remember that every string we work with in C ends with backslash zero,",
			"and we can't omit that here, either.",
			"We need to set aside one byte of memory to hold that so we",
			"know when our string has ended.",
			"So again this arrangement of the way things",
			"appear in memory might be a little random,",
			"but it actually is how most systems are designed.",
			"To line them up on multiples of four, for reasons again",
			"that we don't need to get into right now.",
			"But this, so suffice it to say that after these three lines of code,",
			"this is what memory might look like.",
			"If I need memory locations 4, 8, and 12 to hold my data,",
			"this is what my memory might look like.",
			">> And just be particularly pedantic here, when",
			"we're talking about memory addresses we usually",
			"do so using hexadecimal notations.",
			"So why don't we convert all of these from decimal to hexadecimal notation",
			"just because that's generally how we refer to memory.",
			"So instead of being 0 through 19, what we have is zero",
			"x zero through zero x1 three.",
			"Those are the 20 bytes of memory that we have or we're looking at in this image",
			"right here.",
			">> So all of that being said, let's step away from memory for a second",
			"and back to pointers.",
			"Here is the most important thing to remember",
			"as we start working with pointers.",
			"A pointer is nothing more than an address.",
			"I'll say it again because it's that important,",
			"a pointer is nothing more than an address.",
			"Pointers are addresses to locations in memory where variables live.",
			"Knowing that it becomes hopefully a little bit easier to work with them.",
			"Another thing I like to do is to have sort",
			"of diagrams visually representing what's happening with various lines of code.",
			"And we'll do this a couple of times in pointers,",
			"and when we talk about dynamic memory allocation as well.",
			"Because I think that these diagrams can be particularly helpful.",
			">> So if I say for example, int k in my code, what is happening?",
			"Well what's basically happening is I'm getting memory set aside for me,",
			"but I don't even like to think about it like that, I",
			"like to think about it like a box.",
			"I have a box and it's colored green because I",
			"can put integers in green boxes.",
			"If it was a character I might have a blue box.",
			"But I always say, if I'm creating a box that can hold integers",
			"that box is colored green.",
			"And I take a permanent marker and I write k on the side of it.",
			"So I have a box called k, into which I can put integers.",
			"So when I say int k, that's what happens in my head.",
			"If I say k equals five, what am I doing?",
			"Well, I'm putting five in the box, right.",
			"This is pretty straightforward, if I say int k, create a box called k.",
			"If I say k equals 5, put five into the box.",
			"Hopefully that's not too much of a leap.",
			"Here's where things go a little interesting though.",
			"If I say int*pk, well even if I don't know what this necessarily means,",
			"it's clearly got something to do with an integer.",
			"So I'm going to color this box green-ish,",
			"I know it's got something to do with an integer,",
			"but it's not an integer itself, because it's an int star.",
			"There's something slightly different about it.",
			"So an integer's involved, but otherwise it's",
			"not too different from what we were talking about.",
			"It's a box, its got a label, it's wearing a label pk,",
			"and it's capable of holding int stars, whatever those are.",
			"They have something to do with integers, clearly.",
			"Here's the last line though.",
			"If I say pk=&k, whoa, what just happened, right?",
			"So this random number, seemingly random number, gets thrown into the box there.",
			"All that is, is pk gets the address of k.",
			"So I'm sticking where k lives in memory, its address, the address of its bytes.",
			"All I'm doing is I'm saying that value is what I'm going",
			"to put inside of my box called pk.",
			"And because these things are pointers, and because looking",
			"at a string like zero x eight zero c seven four eight",
			"two zero is probably not very meaningful.",
			"When we generally visualize pointers, we actually do so as pointers.",
			"Pk gives us the information we need to find k in memory.",
			"So basically pk has an arrow in it.",
			"And if we walk the length of that arrow, imagine",
			"it's something you can walk on, if we walk along the length of the arrow,",
			"at the very tip of that arrow, we will find the location in memory",
			"where k lives.",
			"And that's really important because once we know where k lives,",
			"we can start to work with the data inside of that memory location.",
			"Though we're getting a teeny bit ahead of ourselves for now.",
			">> So what is a pointer?",
			"A pointer is a data item whose value is a memory address.",
			"That was that zero x eight zero stuff going on, that was a memory address.",
			"That was a location in memory.",
			"And the type of a pointer describes the kind",
			"of data you'll find at that memory address.",
			"So there's the int star part right.",
			"If I follow that arrow, it's going to lead me to a location.",
			"And that location, what I will find there in my example,",
			"is a green colored box.",
			"It's an integer, that's what I will find if I go to that address.",
			"The data type of a pointer describes what",
			"you will find at that memory address.",
			"So here's the really cool thing though.",
			"Pointers allow us to pass variables between functions.",
			"And actually pass variables and not pass copies of them.",
			"Because if we know exactly where in memory to find a variable,",
			"we don't need to make a copy of it, we can just go to that location",
			"and work with that variable.",
			"So in essence pointers sort of make a computer environment",
			"a lot more like the real world, right.",
			">> So here's an analogy.",
			"Let's say that I have a notebook, right, and it's full of notes.",
			"And I would like you to update it.",
			"You are a function that updates notes, right.",
			"In the way we've been working so far, what",
			"happens is you will take my notebook, you'll go to the copy store,",
			"you'll make a Xerox copy of every page of the notebook.",
			"You'll leave my notebook back on my desk when you're done,",
			"you'll go and cross out things in my notebook that are out of date or wrong,",
			"and then you'll pass back to me the stack of Xerox pages",
			"that is a replica of my notebook with the changes that you've made to it.",
			"And at that point, it's up to me as the calling function, as the caller,",
			"to decide to take your notes and integrate them back into my notebook.",
			"So there's a lot of steps involved here, right.",
			"Like wouldn't it be better if I just say, hey, can you",
			"update my notebook for me, hand you my notebook,",
			"and you take things and literally cross them out",
			"and update my notes in my notebook.",
			"And then give me my notebook back.",
			"That's kind of what pointers allow us to do,",
			"they make this environment a lot more like how we operate in reality.",
			">> All right so that's what a pointer is, let's talk",
			"about how pointers work in C, and how we can start to work with them.",
			"So there's a very simple pointer in C called the null pointer.",
			"The null pointer points to nothing.",
			"This probably seems like it's actually not a very useful thing,",
			"but as we'll see a little later on, the fact",
			"that this null pointer exists actually really can come in handy.",
			"And whenever you create a pointer, and you don't set its value immediately-",
			"an example of setting its value immediately",
			"will be a couple slides back where I said pk equals & k,",
			"pk gets k's address, as we'll see what that means,",
			"we'll see how to code that shortly- if we don't set its value to something",
			"meaningful immediately, you should always",
			"set your pointer to point to null.",
			"You should set it to point to nothing.",
			">> That's very different than just leaving the value as it is",
			"and then declaring a pointer and just assuming",
			"it's null because that's rarely true.",
			"So you should always set the value of a pointer",
			"to null if you don't set its value to something meaningful immediately.",
			"You can check whether a pointer's value is null using the equality operator",
			"(==), just like you compare any integer values or character values using (==)",
			"as well.",
			"It's a special sort of constant value that you can use to test.",
			"So that was a very simple pointer, the null pointer.",
			"Another way to create a pointer is to extract",
			"the address of a variable you've already created,",
			"and you do this using the & operator address extraction.",
			"Which we've already seen previously in the first diagram example I showed.",
			"So if x is a variable that we've already created of type integer,",
			"then &x is a pointer to an integer.",
			"&x is- remember, & is going to extract the address of the thing on the right.",
			"And since a pointer is just an address, than &x is a pointer to an integer",
			"whose value is where in memory x lives.",
			"It's x's address.",
			"So &x is the address of x.",
			"Let's take this one step further and connect to something",
			"I alluded to in a prior video.",
			"If arr is an array of doubles, then &arr square bracket i is a pointer",
			"to a double.",
			"OK.",
			"arr square bracket i, if arr is an array of doubles,",
			"then arr square bracket i is the i-th element of that array,",
			"and &arr square bracket i is where in memory the i-th element of arr exists.",
			">> So what's the implication here?",
			"An arrays name, the implication of this whole thing,",
			"is that an array's name is actually itself a pointer.",
			"You've been working with pointers all along",
			"every time that you've used an array.",
			"Remember from the example on variable scope,",
			"near the end of the video I present an example where we have a function",
			"called set int and a function called set array.",
			"And your challenge to determine whether or not, or what the",
			"values that we printed out the end of the function,",
			"at the end of the main program.",
			">> If you recall from that example or if you've watched the video,",
			"you know that when you- the call to set int effectively does nothing.",
			"But the call to set array does.",
			"And I sort of glossed over why that was the case at the time.",
			"I just said, well it's an array, it's special, you know, there's a reason.",
			"The reason is that an array's name is really just a pointer,",
			"and there's this special square bracket syntax that",
			"make things a lot nicer to work with.",
			"And they make the idea of a pointer a lot less intimidating,",
			"and that's why they're sort of presented in that way.",
			"But really arrays are just pointers.",
			"And that's why when we made a change to the array,",
			"when we passed an array as a parameter to a function or as an argument",
			"to a function, the contents of the array actually changed in both the callee",
			"and in the caller.",
			"Which for every other kind of variable we saw was not the case.",
			"So that's just something to keep in mind when you're working with pointers,",
			"is that the name of an array actually a pointer",
			"to the first element of that array.",
			">> OK so now we have all these facts, let's keep going, right.",
			"Why do we care about where something lives.",
			"Well like I said, it's pretty useful to know where something lives",
			"so you can go there and change it.",
			"Work with it and actually have the thing that you",
			"want to do to that variable take effect, and not take effect on some copy of it.",
			"This is called dereferencing.",
			"We go to the reference and we change the value there.",
			"So if we have a pointer and it's called pc, and it points to a character,",
			"then we can say *pc and *pc is the name of what we'll find if we go",
			"to the address pc.",
			"What we'll find there is a character and *pc is how we refer to the data at that",
			"location.",
			"So we could say something like *pc=D or something like that,",
			"and that means that whatever was at memory address pc,",
			"whatever character was previously there, is now D, if we say *pc=D.",
			">> So here we go again with some weird C stuff, right.",
			"So we've seen * previously as being somehow part of the data type,",
			"and now it's being used in a slightly different context",
			"to access the data at a location.",
			"I know it's a little confusing and that's actually part of this whole",
			"like, why pointers have this mythology around them as being so complex,",
			"is kind of a syntax problem, honestly.",
			"But * is used in both contexts, both as part of the type name,",
			"and we'll see a little later something else, too.",
			"And right now is the dereference operator.",
			"So it goes to the reference, it accesses the data",
			"at the location of the pointer, and allows you to manipulate it at will.",
			">> Now this is very similar to visiting your neighbor, right.",
			"If you know what your neighbor lives, you're",
			"not hanging out with your neighbor.",
			"You know you happen to know where they live,",
			"but that doesn't mean that by virtue of having that knowledge",
			"you are interacting with them.",
			"If you want to interact with them, you have to go to their house,",
			"you have to go to where they live.",
			"And once you do that, then you can interact",
			"with them just like you'd want to.",
			"And similarly with variables, you need to go to their address",
			"if you want to interact them, you can't just know the address.",
			"And the way you go to the address is to use *, the dereference operator.",
			"What do you think happens if we try and dereference",
			"a pointer whose value is null?",
			"Recall that the null pointer points to nothing.",
			"So if you try and dereference nothing or go to an address nothing,",
			"what do you think happens?",
			"Well if you guessed segmentation fault, you'd be right.",
			"If you try and dereference a null pointer,",
			"you suffer a segmentation fault. But wait,",
			"didn't I tell you, that if you're not going",
			"to set your value of your pointer to something meaningful,",
			"you should set to null?",
			"I did and actually the segmentation fault is kind of a good behavior.",
			">> Have you ever declared a variable and not assigned its value immediately?",
			"So you just say int x; you don't actually assign it to anything",
			"and then later on in your code, you print out the value of x,",
			"having still not assigned it to anything.",
			"Frequently you'll get zero, but sometimes you",
			"might get some random number, and you have no idea where it came from.",
			"Similarly can things happen with pointers.",
			"When you declare a pointer int*pk for example,",
			"and you don't assign it to a value, you get four bytes for memory.",
			"Whatever four bytes of memory the system can",
			"find that have some meaningful value.",
			"And there might have been something already there that",
			"is no longer needed by another function, so you just have",
			"whatever data was there.",
			">> What if you tried to do dereference some address that you don't- there were",
			"already bytes and information in there, that's now in your pointer.",
			"If you try and dereference that pointer, you might be messing with some memory",
			"that you didn't intend to mess with it all.",
			"And in fact you could do something really devastating,",
			"like break another program, or break another function,",
			"or do something malicious that you didn't intend to do at all.",
			"And so that's why it's actually a good idea",
			"to set your pointers to null if you don't set them to something meaningful.",
			"It's probably better at the end of the day for your program",
			"to crash then for it to do something that screws up",
			"another program or another function.",
			"That behavior is probably even less ideal than just crashing.",
			"And so that's why it's actually a good habit",
			"to get into to set your pointers to null if you don't set them",
			"to a meaningful value immediately, a value that you know",
			"and that you can safely the dereference.",
			">> So let's come back now and take a look at the overall syntax of the situation.",
			"If I say int *p;, what have I just done?",
			"What I've done is this.",
			"I know the value of p is an address because all pointers are just",
			"addresses.",
			"I can dereference p using the * operator.",
			"In this context here, at the very top recall the * is part of the type.",
			"Int * is the data type.",
			"But I can dereference p using the * operator,",
			"and if I do so, if I go to that address, what will I find at that address?",
			"I will find an integer.",
			"So int*p is basically saying, p is an address.",
			"I can dereference p and if I do, I will find an integer",
			"at that memory location.",
			">> OK so I said there was another annoying thing with stars",
			"and here's where that annoying thing with stars is.",
			"Have you ever tried to declare multiple variables of the same type",
			"on the same line of code?",
			"So for a second, pretend that the line, the code I actually have there in green",
			"isn't there and it just says int x,y,z;.",
			"",
			"What that would do is actually create three integer variables for you,",
			"one called x, one called y, and one called z.",
			"It's a way to do it without having to split onto three lines.",
			">> Here's where stars get annoying again though,",
			"because the * is actually part of both the type name and part",
			"of the variable name.",
			"And so if I say int *px,py,pz, what I actually get is a pointer to an integer",
			"called px and two integers, py and pz.",
			"And that's probably not what we want, that's not good.",
			">> So if I want to create multiple pointers on the same line, of the same type,",
			"and stars, what I actually need to do is say int *pa,*pb,*pc.",
			"",
			"Now having just said that and now telling you this,",
			"you probably will never do this.",
			"And it's probably a good thing honestly, because you might inadvertently",
			"omit a star, something like that.",
			"It's probably best to maybe declare pointers on individual lines,",
			"but it's just another one of those annoying syntax",
			"things with stars that make pointers so difficult to work with.",
			"Because it's just this syntactic mess you have to work through.",
			"With practice it does really become second nature.",
			"I still make mistakes with it still after programming for 10 years,",
			"so don't be upset if something happens to you, it's pretty common honestly.",
			"It's really kind of a flaw of the syntax.",
			">> OK so I kind of promised that we would revisit",
			"the concept of how large is a string.",
			"Well if I told you that a string, we've really kind of",
			"been lying to you the whole time.",
			"There's no data type called string, and in fact I",
			"mentioned this in one of our earliest videos on data types,",
			"that string was a data type that was created for you in CS50.h.",
			"You have to #include CS50.h in order to use it.",
			">> Well string is really just an alias for something",
			"called the char *, a pointer to a character.",
			"Well pointers, recall, are just addresses.",
			"So what is the size in bytes of a string?",
			"Well it's four or eight.",
			"And the reason I say four or eight is because it actually",
			"depends on the system, If you're using CS50 ide, char * is the size of a char",
			"* is eight, it's a 64-bit system.",
			"Every address in memory is 64 bits long.",
			"If you're using CS50 appliance or using any 32-bit machine,",
			"and you've heard that term 32-bit machine, what is a 32-bit machine?",
			"Well it just means that every address in memory is 32 bits long.",
			"And so 32 bits is four bytes.",
			"So a char * is four or eight bytes depending on your system.",
			"And indeed any data types, and a pointer to any data",
			"type, since all pointers are just addresses, are four or eight bytes.",
			"So let's revisit this diagram and let's conclude",
			"this video with a little exercise here.",
			"So here's the diagram we left off with at the very beginning of the video.",
			"So what happens now if I say *pk=35?",
			"",
			"So what does it mean when I say, *pk=35?",
			"Take a second.",
			"*pk.",
			"In context here, * is dereference operator.",
			"So when the dereference operator is used,",
			"we go to the address pointed to by pk, and we change what we find.",
			"So *pk=35 effectively does this to the picture.",
			"So it's basically syntactically identical to of having said k=35.",
			"",
			">> One more.",
			"If I say int m, I create a new variable called m.",
			"A new box, it's a green box because it's going to hold an integer,",
			"and it's labeled m.",
			"If I say m=4, I put an integer into that box.",
			"If say pk=&m, how does this diagram change?",
			"Pk=&m, do you recall what the & operator does or is called?",
			"Remember that & some variable name is the address of a variable name.",
			"So what we're saying is pk gets the address of m.",
			"And so effectively what happens the diagram is that pk no longer points",
			"to k, but points to m.",
			">> Again pointers are very tricky to work with",
			"and they take a lot of practice, but because",
			"of their ability to allow you to pass data between functions",
			"and actually have those changes take effect,",
			"getting your head around is really important.",
			"It probably is the most complicated topic we discuss in CS50,",
			"but the value that you get from using pointers",
			"far outweighs the complications that come from learning them.",
			"So I wish you the best of luck learning about pointers.",
			"I'm Doug Lloyd, this is CS50.",
			""
		],
		"is_youtube": false
	},
	"video_023": {
		"section": "CS50x 2021",
		"subsection": "Week 4",
		"unit": "Shorts",
		"video_sources": [
			"https://edx-video.net/HARCS50X2016-V035900/HARCS50X2016-V035900.m3u8",
			"https://edx-video.net/HARCS50X2016-V035900_DTH.mp4"
		],
		"video_duration": 212,
		"speech_period": [
			2.25, 3.73, 3.58, 1.916, 2.764, 2.047, 1.833, 1.74, 1.56, 2.96, 1.89,
			1.86, 4.05, 1.49, 2.08, 3.25, 2.92, 5.381, 1.249, 2.72, 4.026, 2.874,
			4.43, 3.02, 1.59, 2.12, 4.98, 2.12, 3.672, 1.708, 3.083, 5.277, 3.881,
			2.499, 2.64, 1.62, 2.77, 3.47, 4.29, 3.09, 5.25, 2.58, 3.8, 4.65, 3.99,
			3.01, 3.8, 2.05, 5.09, 4.36, 4.04, 3.34, 4.26, 2.14, 1.23, 2.79, 4.177,
			3.333, 2.32, 2.18, 2.36, 3.129, 1.541, 5.445, 2.375, 1.875, 3.215, 1.08,
			5.0
		],
		"transcript_en": [
			"DOUG LLOYD: So if you've seen our video on structures,",
			"you already know that we have the ability to define our own data types.",
			"But if you've used structures, you know that sometimes using those data types",
			"can actually be a little cumbersome because we",
			"have to use the struct keyword when we're working with them--",
			"struct car or struct student.",
			"That's a lot to type if we just want to have",
			"something simple, like a structure.",
			"We want to have-- we want to be able to work with things",
			"a little more shorthand way, like int or char, something a lot",
			"more convenient to type.",
			">> Fortunately, there's a way to do this in C,",
			"with something called typedef, which is a way to create shorthand or rewritten",
			"names for data types.",
			"You can rewrite data types that already exist,",
			"or you can write data types of your own.",
			">> The first thing you do is you define a type in the normal way,",
			"and then you just alias it to something else-- typedef old name new name.",
			"Pretty straightforward, right?",
			"So we could typedef for example, the already existing data",
			"type of unsigned char as byte.",
			"And then, from now on, after we've made this type definition-- again,",
			"which is usually going to be at the top of our dot C files, or in a dot H file",
			"separately, we can just use bite everywhere",
			"we would have used unsigned char.",
			"That's a lot shorter to type.",
			">> In CS50's library, we do this-- we typedef char star as string.",
			"Because we abstracted away the idea of pointers.",
			"And the fact that a string is really a pointer to the first character--",
			"an array of characters, because it's just",
			"so confusing to get your head around that-- but in fact that's what we do.",
			"And this line of code actually exists in CS50 dot H typedef char star string,",
			"just to make that a little less cumbersome to have to deal with.",
			"Already you've seen probably a little bit of the value here,",
			"but typedef becomes great when combined with structures,",
			"as I alluded to earlier.",
			"Structures have a two-word type name.",
			"And so they can be really annoying to create variables of that type,",
			"or [INAUDIBLE] of struct something, your lines can just get really, really long.",
			"And so you can use typedef to come up with something a lot shorter.",
			">> So if I define a car as follows, I have my definition of a car-- struct car,",
			"and then open curly brace, all the fields of my structure,",
			"close curly brace, semi-colon-- after I've defined my data type,",
			"I can typedef struct car as car underscore t.",
			"And then when I've done that, now every time I would have otherwise used struct",
			"car, I can just use car underscore t.",
			"That's a lot shorter of a way to express this idea of this structure",
			"that I just created.",
			">> Alternatively, because structures are so commonly used in typedef,",
			"there's a-- you can actually define the type in between the start and the end.",
			"So the typedef structure again is usually typedef, old name, new name,",
			"where the names are already types that you've created.",
			"But you can actually define a structure right in the middle of the typedef",
			"instead of having to define it separately, and then",
			"do a typedef of it.",
			"And that would look just like this-- typedef struct car,",
			"open curly brace, all of your field definitions, close curly brace, car t.",
			"So the old name is all that stuff in the red, you're just defining the structure",
			"and naming it at the same time.",
			"And then the new name is car underscore t.",
			"And so if we start to use this in code, previously I",
			"might have said, struct car mycar semi-colon.",
			"Well I don't have to do that anymore.",
			"Now that I've used the typedef, I can just say car underscore t, mycar.",
			"That's a lot shorter of a way to do it, and in fact, it's",
			"going to be a lot more convenient, especially",
			"as you start to use structures a lot more in your code.",
			">> I'm Doug Lloyd.",
			"This is CS50."
		],
		"is_youtube": false
	},
	"video_024": {
		"section": "CS50x 2021",
		"subsection": "Week 4",
		"unit": "Shorts",
		"video_sources": [
			"https://edx-video.net/HARCS50X2016-V028700_DTH.mp4",
			"https://edx-video.net/HARCS50X2016-V028700/HARCS50X2016-V028700.m3u8"
		],
		"video_duration": 862,
		"speech_period": [
			0.499, 0.896, 4.195, 2.35, 3.72, 4.2, 1.714, 1.916, 2.458, 1.142, 2.35,
			2.374, 1.796, 2.47, 2.63, 3.1, 4.35, 2.71, 3.61, 1.74, 2.15, 2.28, 2.95,
			0.62, 5.118, 0.791, 3.781, 2.2, 2.53, 1.73, 2.65, 2.79, 3.36, 2.89, 1.98,
			3.06, 3.2, 2.567, 1.833, 3.44, 3.57, 2.58, 3.28, 2.225, 2.625, 3.5, 2.55,
			2.25, 5.22, 2.15, 2.56, 4.51, 3.03, 2.55, 2.55, 3.083, 3.207, 1.99, 2.82,
			4.367, 1.833, 3.45, 2.032, 1.708, 4.27, 3.01, 2.18, 4.2, 1.3, 2.76, 1.53,
			0.922, 1.708, 4.22, 4.05, 2.98, 2.83, 4.92, 4.15, 3.13, 6.1, 2.5, 2.21,
			2.75, 2.68, 1.77, 2.83, 2.99, 2.17, 3.01, 1.695, 4.637, 1.737, 1.041,
			3.519, 3.691, 3.53, 2.56, 3.02, 2.81, 0.54, 2.28, 3.47, 2.71, 3.82, 3.04,
			4.63, 2.06, 4.4, 2.58, 1.71, 5.536, 1.624, 2.38, 1.96, 4.1, 4.18, 4.209,
			2.541, 2.37, 4.41, 2.62, 3.8, 3.4, 3.25, 4.27, 2.15, 3.88, 3.86, 2.62,
			4.21, 4.19, 3.49, 1.33, 2.79, 4.76, 3.26, 2.74, 1.44, 3.26, 3.73, 2.49,
			4.58, 4.95, 2.44, 3.0, 2.72, 2.65, 4.76, 3.99, 0.92, 2.889, 2.791, 2.05,
			4.1, 4.51, 3.52, 5.42, 3.49, 1.73, 4.85, 2.68, 3.68, 3.48, 2.275, 2.125,
			1.958, 0.872, 3.31, 0.99, 2.3, 3.66, 3.74, 3.399, 1.791, 2.54, 4.02,
			2.687, 3.333, 3.159, 1.791, 3.27, 1.29, 3.49, 1.95, 3.599, 2.791, 2.06,
			3.87, 3.06, 2.88, 3.19, 3.62, 2.47, 2.99, 2.21, 2.36, 2.47, 2.73, 4.93,
			2.462, 0.958, 1.833, 2.807, 2.26, 0.86, 1.499, 3.311, 1.75, 2.33, 1.43,
			3.24, 4.0, 1.13, 2.25, 3.32, 2.47, 2.57, 1.712, 1.458, 0.791, 1.969, 2.45,
			4.23, 1.81, 5.55, 6.1, 1.73, 1.86, 4.87, 3.57, 3.7, 0.82, 1.29, 2.04,
			1.86, 1.96, 4.34, 3.59, 1.917, 0.833, 5.17, 3.73, 3.25, 2.601, 1.999,
			1.99, 2.95, 2.64, 5.23, 2.21, 1.2, 1.67, 3.03, 2.07, 4.63, 5.86, 4.08,
			6.38, 2.87, 3.62, 3.234, 2.166, 1.52, 1.77, 5.18, 4.59, 1.63, 3.44, 2.905,
			1.375, 1.25, 3.13, 4.27, 3.52, 3.22, 1.52, 2.31, 3.12, 1.49, 2.292, 1.208,
			6.1, 4.38, 3.07, 3.7, 2.98, 3.08, 4.37, 2.74, 2.67, 1.86, 3.31, 4.74,
			3.01, 2.39, 2.06, 2.93, 1.647
		],
		"transcript_en": [
			"",
			"[MUSIC PLAYING]",
			"",
			">> DOUG LLOYD: OK so a suggestion before starting here.",
			"If you haven't watched the video on pointers you might want to do so first.",
			"Because this video is another way of working with pointers.",
			">> So it's going to talk about some concepts",
			"that we cover in the pointers video, and we're",
			"going to gloss over them now, assuming that they're already",
			"sort of understood.",
			"So that's just your fair warning that if you're seeing this video",
			"and you haven't seen the pointers video, it might sort of",
			"fly over your head a little bit.",
			"And so it might be better to watch it in that order.",
			">> So we have already seen one way to work with pointers,",
			"which is we declare a variable, and then we",
			"declare another variable, a pointer variable, that points to it.",
			"So we've created a variable with a name, we've",
			"created a second variable with a name, and we point that second variable",
			"at that first.",
			"This sort of has a problem though, because it",
			"requires us to know exactly how much memory we're",
			"going to need the moment our program is compiled.",
			">> Why is that?",
			"Because we need to be able to name or identify all of the possible variables",
			"we might encounter.",
			"We might have an array that might be able to hold a lot of information,",
			"but it's still not exactly precise enough.",
			"What if we don't know, what if we have no idea",
			"how much we'll need at compile time?",
			"Or what if our program will run for a really long time,",
			"accepting various user data, and we can't really",
			"estimate whether we're going to need 1,000 units?",
			">> It's not like we can say at the command line",
			"enter how many items you think you'll need.",
			"Well what if that guess is wrong?",
			"Dynamic memory allocation sort of allows us the way",
			"to get around this particular problem.",
			"And the way it does it is by using pointers.",
			">> We can use pointers to get access to dynamically",
			"allocated memory, memory that is allocated as your program is running.",
			"It's not allocated at compile time.",
			"When you dynamically allocate memory it comes from a pool",
			"of memory known as the heap.",
			"Previously all the memory we've been working with in the course",
			"has been coming from a pool of memory known as the stack.",
			"A good way to generally keep in mind-- and this rule",
			"doesn't always hold true, but pretty much almost",
			"always holds true-- is that any time you give a variable name it",
			"probably lives on the stack.",
			"And any time you don't give a variable a name,",
			"which you can do with dynamic memory allocation, it lives on the heap.",
			">> Now I'm kind of presenting this as if there's these two pools of memory.",
			"But you may have seen this diagram, which is generally",
			"a representation of what memory looks like,",
			"and we're not going to care about all the stuff at the top and the bottom.",
			"What we care about is this part in the middle here, heap and stack.",
			"As you can see by looking at this diagram,",
			"these actually aren't two separate pools of memory.",
			"It's one shared pool of memory where you start, in this visual",
			"you start at the bottom and start filling up",
			"from the bottom with the stack, and you start at the top and start filling up",
			"from the top down with the heap.",
			"But it really is the same pool, it's just",
			"different spots, different locations in memory that are being allocated.",
			"And you can run out of memory by either having",
			"the heap go all the way to the bottom, or have",
			"the stack go all the way to the top, or having the heap and the stack",
			"meet up against each other.",
			"All of those can be conditions that cause your program",
			"to run out of memory.",
			"So keep that in mind.",
			"When we talk about the heap and the stack",
			"we are really talking about the same general chunk of memory, just",
			"different portions of that memory.",
			">> So how do we get dynamically allocated memory in the first place?",
			"How does our program get memory as it's running?",
			"Well C provides a function called malloc, memory allocator, which",
			"you make a call to, and you pass in how many bytes of memory that you want.",
			"So if your program is running and you want an integer runtime,",
			"you might mallock four bytes of memory, malloc parentheses four.",
			">> mallock will go through looking through the heap,",
			"because we're dynamically allocating memory,",
			"and it will return to you a pointer to that memory.",
			"It doesn't give you that memory-- it doesn't give it a name,",
			"it gives you a pointer to it.",
			"And so that's why again I said that it's important to maybe",
			"have watched the pointers video before we get too far into this.",
			"So malloc's going to give you back a pointer.",
			">> If mallock can't give you any memory because you've run out,",
			"it'll give you back a null pointer.",
			"Do you remember what happens if we try and dereference a null pointer?",
			"We suffer a seg fault, right?",
			"That's probably not good.",
			">> So every time you make a call to malloc you always, always",
			"need to check whether or not the pointer it gave you back is null.",
			"If it is, you need to end your program because if you try and dereference",
			"the null pointer you're going to suffer a segmentation fault",
			"and your program is going to crash anyway.",
			"So how do we statically obtain an integer?",
			">> int x.",
			"We've probably done that a bunch of times, right?",
			"This creates a variable called x that lives on the stack.",
			"How do we dynamically obtain an integer?",
			"Int star px equals malloc 4.",
			">> Or more appropriately we'd say int star px",
			"equals malloc size of int, just to throw some fewer",
			"magic numbers around our program.",
			"This is going to obtain for us four bytes of memory from the heap,",
			"and the pointer we get back to it is called px.",
			"And then just as we've done previously we",
			"can dereference px to access that memory.",
			"How do we get an integer from the user?",
			"We can say int x equals get int.",
			"That's pretty straightforward.",
			"What if we want to create an array of x floats that live on the stack?",
			"float stack_array-- that's the name of our array-- square brackets x.",
			"That will create for us an array of x floats that live on the stack.",
			"We can create an array of floats that lives on the heap, too.",
			"The syntax might look a little more cumbersome,",
			"but we can say float star heap_array equals",
			"malloc x times the size of the float.",
			"I need enough room to hold x floating point values.",
			"So say I need 100 floats, or 1,000 floats.",
			"So in that case it would be 400 bytes for 100 floats,",
			"or 4,000 bytes for 1,000 floats, because each float takes up",
			"four bytes of space.",
			">> After doing this I can use the square bracket syntax on heap_array.",
			"Just as I would on stack_array, I can access its elements individually",
			"using heap_array zero, heap_array one.",
			"But recall the reason we can do that is because the name of an array in C",
			"is really a pointer to that array's first element.",
			"So the fact that we're declaring an array of floats on the stack here",
			"is actually a bit misleading.",
			"We really are in the second line of code there",
			"also creating a pointer to a chunk of memory that we then do some work with.",
			">> Here's the big problem with dynamically allocated memory though,",
			"and this is why it's really important to develop some good habits",
			"when you're working with it.",
			"Unlike statically declared memory, your memory",
			"is not automatically returned to the system when your function is done.",
			"So if we have main, and main calls a function",
			"f, when f finishes whatever it's doing and returns control of the program",
			"back to main, all of the memory that f used is given back.",
			"It can be used again by some other program,",
			"or some other function that gets called later on in main.",
			"It can use that same memory over again.",
			">> If you dynamically allocate memory though",
			"you have to explicitly tell the system that you're done with it.",
			"It'll hold onto it for you, which could lead to a problem of you running out",
			"of memory.",
			"And in fact we sometimes refer to this as a memory leak.",
			"And sometimes these memory leaks can actually be really devastating",
			"for system performance.",
			">> If you are a frequent internet user you might use certain web browsers,",
			"and I won't name names here, but there are some web browsers out there",
			"that are notorious for actually having memory leaks that don't get fixed.",
			"And if you leave your browser open for a very long period of time, days",
			"and days, or weeks, you sometimes might notice that your system",
			"is running really, really slowly.",
			"And the reason for that is that the browser has allocated memory,",
			"but then not told the system that it's done with it.",
			"And so that leaves less memory available for all of your other programs",
			"to have to share, because you're leaking-- that web browser",
			"program is leaking memory.",
			"How do we give memory back when we're done with it?",
			"Well fortunately it's a very easy way to do it.",
			"We just free it.",
			"There's a function called free, it accepts a pointer to memory,",
			"and we're good to go.",
			">> So let's say we're in the middle of our program,",
			"we want to malloc 50 characters.",
			"We want to malloc an array that can capable of holding 50 characters.",
			"And when we get a pointer back to that, that pointer's name is word.",
			"We do whatever we're going to do with word,",
			"and then when we're done we just free it.",
			"And now we have returned those 50 bytes of memory back to the system.",
			"Some other function can use them.",
			"We don't have to worry about suffering a memory leak because we have freed word.",
			"We've given the memory back, so we're done working with it.",
			"So there are three golden rules that should",
			"be kept in mind whenever you're dynamically allocating memory",
			"with malloc.",
			"Every block of memory that you malloc must be freed",
			"before your program finishes running.",
			"Now again, in the appliance or in the IDE this sort of happens for you anyway",
			"when you-- this will happen anyway when your program is terminated,",
			"all the memory will be released.",
			"But it's generally good coding practice to always, when you're done,",
			"free what you have mallocd.",
			">> That said, only things that you've mallocd should be freed.",
			"If you statically declare an integer, int x semi-colon,",
			"that lives on the stack, you don't then want to free x.",
			"So only things that you've mallocd should be freed.",
			">> And lastly, don't free something twice.",
			"That can lead to another weird situation.",
			"So everything that you've mallocd has to be freed.",
			"Only things that you've malloc should be freed.",
			"And don't free something twice.",
			">> So let's go through an example here of what some dynamically allocated",
			"memory might look like mixed in with some static memory.",
			"What might happen here?",
			"See if you can follow along and guess what's",
			"going to happen as we go through all these lines of code.",
			">> So we say int m.",
			"What happens here?",
			"Well this is pretty straightforward.",
			"I create an integer variable called m.",
			"I color it green, because that's the color",
			"that I use when I'm talking about integer variables.",
			"It's a box.",
			"It's called m, and you can store integers inside of it.",
			">> What if I then say int star a?",
			"Well that's pretty similar.",
			"I'm creating a box called a.",
			"It's capable of holding int stars, pointers to integers.",
			"So I'm coloring it green-ish as well.",
			">> I know it has something to do with an integer,",
			"but it's not itself an integer.",
			"But it's pretty much the same idea.",
			"I've created a box.",
			"Both of these right now live on the stack.",
			"I've given them both names.",
			">> int star b equals malloc size of int.",
			"This one might be a little tricky.",
			"Take a second and think about what you would expect to happen on this diagram.",
			"int star b equals malloc size of int.",
			">> Well this doesn't just create one box.",
			"This actually creates two boxes.",
			"And it ties, it also establishes a point in a relationship.",
			"We've allocated one block of memory on the heap.",
			"Notice that the top right box there does not have a name.",
			">> We mallocd it.",
			"It exists on the heap.",
			"But b has a name.",
			"It's a pointer variable called b.",
			"That lives on the stack.",
			">> So it's a piece of memory that points to another one.",
			"b contains the address of that block of memory.",
			"It doesn't have a name otherwise.",
			"But it points to it.",
			"So when we say int star b equals malloc size of int, that right there,",
			"that arrow that popped up on the right side there, that whole thing,",
			"I'll have it appear again, is what happens.",
			"All of that happens in that single line of code.",
			"Now we'll get little more straightforward again.",
			"a equals ampersand m.",
			"Do you recall what a equals ampersand m is?",
			"Well that's a gets m's address.",
			"Or put more diagrammatically, a points to m.",
			">> a equals b.",
			"OK so here's another one.",
			"A equals b.",
			"What's going to happen to the diagram this time?",
			">> Well recall that the assignment operator works",
			"by assigning the value on the right to the value on the left.",
			"So instead of a pointing to m, a now points to the same place that b points.",
			"a doesn't point to b, a points where b points.",
			">> If a pointed to b that would have been a equals ampersand b.",
			"But instead a equals b just means that and b are now",
			"pointing to the same address, because inside of b is just an address.",
			"And now inside of a is the same address.",
			"m equals 10, probably the most straightforward thing",
			"we've done in a little bit.",
			"Put the 10 in the box.",
			"Star b equals m plus 2, recall from our pointers video what star b means.",
			"We're going to dereference b and put some value in that memory location.",
			"In this case 12.",
			">> So when we dereference a point of recall we just travel down the arrow.",
			"Or put another way, we go to that memory address",
			"and we manipulate it in some way.",
			"We put some value in there.",
			"In this case star b equals m plus 2 is just",
			"go to the variable pointed to by b, go to the memory pointed to by b,",
			"and put m plus 2 in there, 12.",
			">> Now I free b.",
			"What happens when I free b?",
			"Remember what I said free means.",
			"What am I saying when I free b?",
			">> I'm done working with it, right?",
			"I essentially give up the memory.",
			"I give it back to the system.",
			"I don't need this anymore is what I'm telling them, OK?",
			">> Now if I say star a equals 11 you can probably",
			"already tell that something bad is going to happen here, right?",
			"And indeed if I tried that I probably would suffer a segmentation fault.",
			"Because now, although previously that chunk of memory",
			"was something that I had access to, at this point",
			"now I'm accessing memory that is not legal for me to access.",
			">> And as we will probably recall, when we access memory",
			"that we're not supposed to touch, that's the most common cause",
			"of a segmentation fault. And so my program",
			"would crash if I tried to do this.",
			"So again it's a good idea to get good practice and good habits ingrained",
			"when working with malloc and free, so that you don't suffer segmentation",
			"faults, and that you use your dynamically allocated",
			"memory responsibly.",
			">> I'm Doug Lloyd this is CS50.",
			""
		],
		"is_youtube": false
	},
	"video_025": {
		"section": "CS50x 2021",
		"subsection": "Week 4",
		"unit": "Shorts",
		"video_sources": [
			"https://edx-video.net/HARCS50X2016-V043500_DTH.mp4",
			"https://edx-video.net/HARCS50X2016-V043500/HARCS50X2016-V043500.m3u8"
		],
		"video_duration": 459,
		"speech_period": [
			1.844, 3.696, 2.67, 2.58, 3.27, 4.94, 1.75, 5.37, 3.42, 2.14, 4.37, 3.117,
			2.583, 3.42, 3.06, 3.305, 2.845, 2.55, 4.091, 2.249, 3.63, 2.32, 2.3,
			1.98, 4.02, 4.17, 3.69, 2.7, 3.82, 2.33, 3.41, 1.75, 2.4, 2.26, 3.47,
			3.48, 4.39, 2.81, 4.02, 3.75, 3.09, 2.487, 1.833, 3.21, 1.83, 3.54, 1.3,
			3.662, 2.958, 2.666, 3.664, 2.31, 3.88, 1.25, 1.24, 1.66, 2.02, 4.35,
			2.13, 2.79, 3.54, 4.05, 3.66, 3.25, 2.0, 3.15, 2.53, 3.26, 3.12, 2.94,
			4.84, 1.49, 2.58, 3.3, 1.8, 4.02, 4.86, 1.42, 3.134, 1.416, 2.13, 3.54,
			3.26, 2.11, 2.37, 2.9, 0.71, 5.024, 4.766, 4.49, 4.47, 1.209, 1.915,
			0.866, 0.72, 2.76, 3.57, 2.42, 2.74, 4.86, 2.49, 4.02, 4.71, 5.22, 0.6,
			4.86, 5.02, 1.73, 2.88, 2.22, 1.95, 3.99, 2.31, 1.18, 3.32, 3.15, 3.03,
			3.48, 1.771, 2.249, 3.96, 2.76, 4.38, 4.19, 2.95, 2.39, 4.24, 4.464,
			1.916, 1.23, 3.07, 2.58, 1.38, 2.24, 3.61, 2.01, 3.787, 2.333, 2.31, 4.35,
			3.96, 1.5, 4.59, 4.59, 1.56, 1.69, 2.36, 1.59, 2.94, 4.006, 1.874, 2.46,
			2.82, 3.78, 1.11, 1.77, 1.585
		],
		"transcript_en": [
			"[MUSIC PLAYING]",
			"",
			"DOUG LLOYD: If you saw our video on recursion,",
			"the process might have seemed a little bit magical.",
			"How does a function know to wait for another function",
			"and pass its data to some other thing that's running at the same time?",
			"It can seem a little magical at the outset",
			"if you don't understand exactly how functions are called and operate in C.",
			"And the way they operate is using something called the call stack.",
			"And the way the call stack works is as follows.",
			"If you call a function, basically what happens is a big chunk of memory",
			"is set aside somewhere in the system for that function to do its work.",
			"So for example, if you call a function and the first thing you",
			"do is declare a couple of variables, what's going to happen",
			"is a stack frame or a function frame will be created,",
			"a big chunk of memory, and those variables will be given space.",
			"So if it's three integers, you'll get three, four-byte chunks,",
			"just like the size of an integer, as well as some space",
			"to do some calculations and whatever else the function might need.",
			"And that's where the function will do all of its work.",
			"Now, it's possible that more than one function's frame might",
			"exist in memory at any given time.",
			"So for example, let's say the function main",
			"calls another function called move.",
			"And then the function move calls another function called direction.",
			"At that point, all three of those functions have open frames.",
			"But in general, only one of those frames will ever be active.",
			"Only one of those functions is ever running at a given time,",
			"even though all three of them have space set aside and are sort of hanging out,",
			"waiting to do something.",
			"Now, the way these frames are arranged is in what's called a stack.",
			"And the frame for the most recently called",
			"function is always the one at the top of the stack,",
			"and that is called the active frame.",
			"So again, if main called move and move called direction,",
			"you can think about this like a stack as follows, where main is at the bottom,",
			"move is above it, direction is on the top, and direction is the active frame.",
			"That is the only function that is doing anything at the moment,",
			"whereas move and main are just sort of waiting to become the active frame.",
			"They're waiting to become the frame that is at the top of the stack.",
			"When you call a new function, a new frame",
			"is what's called pushed onto the top of the stack.",
			"So if you call a new function, that function",
			"immediately gets space and memory, and is put on top of the call stack.",
			"And it becomes the active frame.",
			"And whatever was the active frame, if there was one, is on pause.",
			"It's just sitting there.",
			"It's a holding pattern, waiting to become the active frame again.",
			"When a function finishes its work, such as by returning, most commonly,",
			"or perhaps reaching the end of the line if it's a void function,",
			"it doesn't have a return value, that frame is",
			"what's called popped off of the stack.",
			"And then the frame that was in second place, since this frame is now gone,",
			"that becomes the active frame.",
			"It resumes where it left off.",
			"If you would hit pause on that function, it's",
			"going to pick up immediately where it left off.",
			"This is actually why recursion works because all these frames are running,",
			"but only one of them is moving at a given time.",
			"The rest of them are all running, but they're on pause.",
			"They're just waiting to become the new top of the stack again.",
			"If we call another function, the active frame goes on pause again.",
			"The function that just called is put on top and so on and so on",
			"until all of the function frames are finished.",
			"So let's take a look at a visualization of this,",
			"an example using the factorial function to see if we can",
			"help make this a little bit clearer.",
			"So this is the entirety of a factorial file, for example.",
			"And inside of that factorial file, I have two functions, fact,",
			"which is going to be a recursive [? implementation ?] of factorial,",
			"and main, which basically just call or prints out the value of factorial,",
			"in this case, of 5.",
			"So we start at the beginning of main.",
			"And the first thing main does is it calls another function.",
			"It calls printf().",
			"As soon as it does that, main is on pause.",
			"It's hanging out right here and it is waiting for printf() to do its work.",
			"What does printf() have to do?",
			"It just has to print out a number, but it has to print out factorial of 5",
			"or it doesn't know factorial of 5.",
			"It has to make a function call.",
			"So printf() then goes on pause and waits for factorial of 5,",
			"which now becomes the new active frame.",
			"So in the factorial of 5 frame, what's happening?",
			"We're passing in the value 5 to the fact function.",
			"And then it's going to check, well, is n equal to 1?",
			"No.",
			"So then it's going to return n times fact n minus 1.",
			"OK, so now the factorial 5 frame is basically calling a new function,",
			"passing in another call to factorial, passing in 4 as the parameter instead.",
			"So the factorial of 5 frame now goes on pause and a frame for factorial of 4",
			"becomes the new active frame.",
			"And it's going to go through the same process.",
			"Is 4 equal to 1?",
			"No.",
			"So instead, it's going to return n times, in this case,",
			"or four times factorial of 3, another function call.",
			"So factorial of 4 frame goes on pause.",
			"Factorial of 3's frame becomes the new active frame.",
			"And repeat this process again for a factorial of 3, for a factorial of 2,",
			"and then we get to factorial of 1.",
			"So at the very beginning, right when factorial of 1 is called,",
			"there are seven function frames in the call stack.",
			"Factorial of 2, 3, 4, 5 printf() and main are all on pause at the lines that",
			"you see there.",
			"There's just hanging out, waiting to become the new active frame again.",
			"But they're not moving from those arrowed indicators.",
			"So factorial of 1's frame begins.",
			"It asks the question, is n equal to 1?",
			"Well, this case, the answer is yes.",
			"It's going to return 1.",
			"Now, remember what happens when a function returns a value,",
			"that frame is done.",
			"It goes away.",
			"And that means that it gets popped back off of the call stack",
			"and then the frame that is below it will become the new active frame.",
			"So factorial of 1 returns a 1.",
			"At this point, its frame is destroyed and factorial of 2",
			"can now get unpaused.",
			"Now, factorial of 2 is that dark blue line on the left",
			"there and it was waiting on the return value of factorial of 1.",
			"Well, factorial of 1 said, I returned a 1 to you.",
			"So factorial of 2 is going to return 2 times 1, or 2.",
			"It is now also returning and so when it returns, it gets popped off the stack.",
			"Its function frame is destroyed and factorial of 3",
			"becomes the new active frame.",
			"Factorial of 3 was waiting on factorial of 2, which returned a 2.",
			"So it's going to return 3 times 2, or 6, returns the value.",
			"Its function frame is popped off of the stack.",
			"It is destroyed.",
			"Factorial of 4 becomes the new active frame.",
			"Factorial of 4 was waiting on factorial of 3.",
			"It got its answer back of 6.",
			"So it's going to return 4 times 6, or 24.",
			"And it's going to return that value to factorial of 5, which has been waiting",
			"for factorial of 4 to finish its work.",
			"It returns 5 times 24, which is 120.",
			"When that frame is destroyed, now we resume at printf().",
			"printf() has that dark red line on the bottom there.",
			"It was waiting on factorial of 5, which just returned a 120.",
			"So what printf() does is it prints out 120 and then its job is done.",
			"It doesn't have anything else to do.",
			"It's not waiting on another function call and so it finishes executing.",
			"It doesn't return anything, but it doesn't have anything else to do.",
			"So its function frame is destroyed.",
			"It gets popped off of the stack.",
			"And then all we have to do is see where main left off.",
			"Well, that was all main had.",
			"And so main's function frame will then pop off the stack as well",
			"and this program will have completed its job by printing out 120.",
			"Hopefully that illustration of the call stack",
			"helped to show exactly how recursion works",
			"and how these functions are waiting and interacting with each other",
			"to allow the recursive process to occur.",
			"I'm Doug Lloyd.",
			"This is CS50.",
			""
		],
		"is_youtube": false
	},
	"video_026": {
		"section": "CS50x 2021",
		"subsection": "Week 4",
		"unit": "Shorts",
		"video_sources": [
			"https://edx-video.net/HARCS50X2016-V030200_DTH.mp4",
			"https://edx-video.net/HARCS50X2016-V030200/HARCS50X2016-V030200.m3u8"
		],
		"video_duration": 1101,
		"speech_period": [
			5.33, 2.54, 2.3, 3.14, 4.04, 3.05, 2.852, 2.708, 3.81, 3.95, 3.17, 2.351,
			2.249, 2.73, 4.11, 5.496, 1.874, 4.265, 2.125, 2.47, 4.43, 0.74, 3.14,
			5.22, 2.2, 2.15, 1.21, 1.582, 1.958, 2.66, 3.11, 3.66, 3.35, 3.96, 1.75,
			3.009, 1.541, 3.44, 3.72, 4.93, 2.62, 3.27, 2.7, 3.22, 2.0, 4.27, 3.14,
			6.44, 3.33, 2.512, 2.458, 2.73, 2.5, 3.21, 1.8, 2.46, 1.89, 4.29, 5.51,
			1.15, 1.36, 1.87, 3.0, 3.95, 2.73, 2.37, 5.122, 2.708, 1.39, 3.0, 4.319,
			2.541, 2.36, 3.125, 1.615, 1.48, 1.291, 4.639, 4.61, 4.39, 2.35, 2.98,
			1.619, 2.541, 2.58, 3.74, 2.76, 5.18, 2.33, 6.42, 4.02, 1.87, 3.687,
			1.833, 5.32, 3.841, 1.749, 2.31, 3.39, 2.13, 1.7, 2.53, 3.54, 4.73, 1.18,
			0.91, 2.67, 2.4, 5.27, 2.15, 5.024, 2.166, 2.91, 3.17, 5.32, 2.844, 2.166,
			1.541, 2.329, 3.06, 0.5, 1.25, 2.08, 2.27, 3.89, 2.17, 3.24, 2.84, 1.889,
			1.791, 2.34, 5.29, 2.99, 1.899, 1.791, 3.25, 4.26, 4.899, 2.041, 2.84,
			2.24, 2.51, 3.62, 1.83, 2.73, 3.52, 2.252, 1.708, 1.666, 3.514, 2.14,
			2.375, 4.175, 2.46, 4.28, 1.451, 2.249, 2.88, 3.25, 2.623, 2.447, 3.11,
			4.17, 3.29, 3.65, 4.06, 3.58, 1.91, 3.85, 4.26, 1.94, 1.46, 4.79, 3.209,
			2.5, 1.88, 2.145, 1.666, 1.67, 4.97, 3.72, 4.25, 1.92, 4.06, 3.995, 2.625,
			1.42, 2.25, 4.57, 2.784, 1.666, 1.833, 1.617, 3.24, 5.5, 3.9, 3.01, 3.02,
			4.56, 3.85, 3.37, 4.16, 1.94, 1.68, 3.56, 4.04, 2.72, 2.52, 3.15, 4.162,
			2.738, 2.4, 2.997, 1.833, 4.39, 1.55, 3.01, 3.08, 4.13, 3.37, 5.01, 1.97,
			3.72, 2.87, 3.69, 2.9, 4.25, 1.0, 4.77, 2.28, 3.29, 2.64, 2.32, 3.07,
			1.25, 1.31, 2.33, 4.34, 3.01, 3.45, 2.21, 4.46, 3.02, 2.24, 2.99, 1.81,
			2.69, 2.81, 4.19, 3.96, 5.24, 6.012, 1.958, 4.49, 3.44, 1.89, 5.0, 2.21,
			4.86, 3.75, 3.06, 2.75, 3.48, 3.89, 3.8, 3.09, 3.68, 3.79, 5.14, 2.9,
			5.31, 2.44, 5.08, 3.79, 2.35, 3.21, 1.56, 4.7, 2.42, 2.34, 2.2, 3.44,
			4.67, 5.89, 5.0, 4.37, 2.93, 3.1, 3.22, 3.9, 2.26, 6.66, 2.34, 2.65, 3.07,
			1.12, 3.45, 3.51, 5.129, 1.791, 3.17, 2.28, 3.89, 0.92, 2.51, 2.13, 2.62,
			3.42, 3.37, 3.41, 1.89, 3.04, 3.68, 3.79, 3.02, 3.38, 1.79, 6.1, 2.92,
			1.97, 3.33, 2.3, 2.63, 2.01, 3.44, 3.77, 2.58, 3.02, 1.8, 4.39, 5.35,
			2.83, 3.92, 2.679, 4.281, 4.79, 2.11, 3.92, 2.389, 2.71, 2.55, 1.881,
			4.02, 2.15, 2.87, 5.05, 2.404, 2.916, 2.82, 4.51, 3.22, 1.49, 1.9, 3.359,
			1.791, 3.98, 3.89, 1.02, 2.11, 1.919
		],
		"transcript_en": [
			"",
			">> SPEAKER: So far, it's likely that most of your programs",
			"have been a bit ephemeral.",
			"You run a program like Mario or Greedy.",
			"It does something, it maybe prompts the user for some information,",
			"print some output to the screen, but then when your program's over,",
			"there's really no evidence there it was ever run in the first place.",
			"I mean, sure, you might have left it open in the terminal window,",
			"but if you clear your screen, there's really no evidence that it existed.",
			"We don't have a means of storing persistent information, information",
			"that exists after our program has stopped running,",
			"or we haven't up to this point.",
			"Fortunately though, c does provide us with the ability",
			"to do this by implementing something called",
			"a file, a structure that basically represents a file that you would double",
			"click on your computer, if you're used to a graphical user environment.",
			"Generally when working with c, we're actually",
			"going to be working with pointers to files-- file stars--",
			"except for a little bit when we talk about a couple",
			"of the functions that work with file pointers.",
			"You don't need to have really dug too deep into understanding pointers",
			"themselves.",
			"There's a little teeny bit where we will talk about them,",
			"but generally file pointers and pointers, while interrelated,",
			"are not exactly the same thing.",
			">> Now what do I mean when I say persistent data?",
			"What is persistent data?",
			"Why do we care about it?",
			"Say, for example, that you're running a program",
			"or you've rewritten a program that's a game,",
			"and you want to keep track of all of the user's moves",
			"so that maybe if something goes wrong, you can review the file after the game.",
			"That's what we mean when we talk about persistent data.",
			">> In the course of running your program, a file is created.",
			"And when your program has stopped running,",
			"that file still exists on your system.",
			"And we can look at it and examine it.",
			"And so that program would be set to have created some persistent data,",
			"data exist after the program has finished running.",
			">> Now all of these functions that work with creating files and manipulating",
			"them in various ways live in standard io.h,",
			"which is a header file that you've likely been pound",
			"including at the top of pretty much all of your programs",
			"because it contains one of the most useful functions for us,",
			"printf, that also lets lives in standard io.h.",
			"So you don't need to pound include any additional files probably",
			"in order to work with file pointers.",
			">> Now every single file pointer function, or every single file I/O, input output",
			"function, accepts as one of its parameters or inputs",
			"a file pointer-- except for one, fopen, which",
			"is what you use to get the file pointer in the first place.",
			"But after you've opened the file and you get file pointers,",
			"you can then pass them as arguments to the various functions",
			"we're going to talk about today, as well as many others",
			"so that you can work with files.",
			">> So there are six pretty common basic ones",
			"that we're going to talk about today.",
			"fopen and its companion function fclose, fgetc",
			"and its companion function fputc, and fread and its companion function,",
			"fwrite.",
			"So let's get right into it.",
			">> fopen-- what does it do?",
			"Well, it opens a file and it gives you a file pointer to it,",
			"so that you can then use that file pointer as an argument",
			"to any of the other file I/O functions.",
			"The most important thing to remember with fopen",
			"is that after you have opened the file or made a call like the one here,",
			"you need to check to make sure that the pointer that you got back",
			"is not equal to null.",
			"If you haven't watched the video on pointers, this might not make sense.",
			"But if you try and dereference a null pointer recall,",
			"your program will probably suffer a segmentation [INAUDIBLE].",
			"We want to make sure that we got a legitimate pointer back.",
			"The vast majority of the time we will have gotten a legitimate pointer back",
			"and it won't be a problem.",
			">> So how do we make a call to fopen?",
			"It looks pretty much like this.",
			"File star ptr-- ptr being a generic name for file pointer-- fopen",
			"and we pass in two things, a file name and an operation we want to undertake.",
			"So we might have a call that looks like this-- file star ptr 1 equals fopen",
			"file1.txt.",
			"And the operation I've chosen is r.",
			">> So what do you think r is here?",
			"What are the kinds of things we might be able to do to files?",
			"",
			"So r is the operation that we choose when we want to read a file.",
			"So we would basically when we make a call like this",
			"be getting ourselves a file pointer such that we could then read information",
			"from file1.txt.",
			">> Similarly, we could open file 2.txt for writing and so we can pass ptr2,",
			"the file pointer I've created here, as an argument to any function that",
			"writes information to a file.",
			"And similar to writing, there's also the option to append, a.",
			"The difference between writing and appending",
			"being that when you write to a file, if you make a call to fopen for writing",
			"and that file already exists, it's going to overwrite the entire file.",
			"It's going to start at the very beginning,",
			"deleting all the information that's already there.",
			">> Whereas if you open it for appending, it will go to the end of the file",
			"if there's already text in it or information in it,",
			"and it will then start writing from there.",
			"So you won't lose any of the information you've done before.",
			"Whether you want to write or append sort of depends on the situation.",
			"But you'll probably know what the right operation is when the time comes.",
			"So that's fopen.",
			">> What about fclose?",
			"Well, pretty simply, fclose just accepts the file pointer.",
			"And as you might expect, it closes that file.",
			"And once we've closed a file, we can't perform any more file I/O functions,",
			"reading or writing, on that file.",
			"We have to re-open the file another time in order",
			"to continue working with it using the I/O functions.",
			"So fclose means we're done working with this file.",
			"And all we need to pass in is the name of a file pointer.",
			"So on a couple slides ago, we fopened file 1 dot text for reading",
			"and we assigned that file pointer to ptr1.",
			"Now we've decided we're done reading from that file.",
			"We don't need to do any more with it.",
			"We can just fclose ptr1.",
			"And similarly, could we fclose the other ones.",
			"All right.",
			"So that's opening and closing.",
			"Those are the two basic starting operations.",
			">> Now we want to actually do some interesting stuff,",
			"and the first function that we'll see that will do that is fgetc--",
			"file get a character.",
			"That's what fgetc generally would translate to.",
			"Its goal in life is to read the next character,",
			"or if this is your very first call to fgetc",
			"for a particular file, the first character.",
			"But then after that, you get the next one,",
			"the very next character of that file, and stores it in a character variable.",
			"As we've done here, char ch equals fgetc,",
			"pass in the name of a file pointer.",
			"Again, it's very important here to remember",
			"that in order to have this operation succeed,",
			"the file pointer itself must've been opened for reading.",
			"We can't read a character from a file pointer that we opened for writing.",
			"So that's one of the limitations of fopen, right?",
			"We have to restrict ourselves to only performing",
			"one operation with one file pointer.",
			"If we wanted to read and write from the same file,",
			"we would have open two separate file pointers to the same file--",
			"one for reading, one for writing.",
			">> So again, the only reason I bring that up now is",
			"because if we're going to make a call to fgetc, that file pointer must've",
			"been opened for reading.",
			"And then pretty simply, all we need to do",
			"is pass in the name of the file pointer.",
			"So char ch equals fgetc ptr1.",
			">> That's going to get us the next character--",
			"or again, if this is the first time we've made this call,",
			"the first character-- of whatever file is pointed to by ptr1.",
			"Recall that that was file 1 dot text.",
			"It'll get the first character of that and we'll store it in the variable ch.",
			"Pretty straightforward.",
			"So we've only looked at three functions and already we",
			"can do something pretty neat.",
			">> So if we take this ability of getting a character",
			"and we loop it-- so we continue to get characters",
			"from a file over and over and over-- now we",
			"can read every single character of a file.",
			"And if we print every character immediately after we read it,",
			"we have now read from a file and printed its contents to the screen.",
			"We've effectively concatenated that file on the screen.",
			"And that's what the Linux command cat does.",
			">> If you type cat in the file name, it will print out the entire contents",
			"of the file in your terminal window.",
			"And so this little loop here, only three lines of code,",
			"but it effectively duplicates the Linux command cat.",
			"So this syntax might look a little weird,",
			"but here's what's happening here.",
			"While ch equals fgetc, ptr is not equal to EOF-- it's a whole mouthful,",
			"but let's break it down just so it's clear on the syntax.",
			"I've consolidated it for the sake of space,",
			"although it's a little syntactically tricky.",
			">> So this part in green right now, what is it doing?",
			"Well, that's just our fgetc call, right?",
			"We've seen that before.",
			"It's obtaining one character from the file.",
			"Then we compare that character against EOF.",
			"EOF is a special value that's defined in standard io.h, which",
			"is the end of file character.",
			"So basically what's going to happen is this loop will read a character,",
			"compare it to EOF, the end of file character.",
			"If they don't match, so we haven't reached the end of the file,",
			"we'll print that character out.",
			"Then we'll go back to the beginning of the loop again.",
			"We'll get a character, check against EOF, print it out, and so on",
			"and so on and so on, looping through in that way",
			"until we've reached the end of the file.",
			"And then by that point, we will have printed",
			"out the entire contents of the file.",
			"So again, we've only seen fopen, fclose, and fgetc",
			"and already we can duplicate a Linux terminal command.",
			">> As I said at the beginning, we had fgetc and fputc,",
			"and fputc was the companion function of fgetc.",
			"And so, as you might imagine, it is the writing equivalent.",
			"It allows us to write a single character to a file.",
			">> Again, the caveat being, just like it was with fgetc, the file",
			"that we're writing to must've been opened for writing or for appending.",
			"If we try and use fputc on a file that we've opened for reading,",
			"we're going to suffer a bit of a mistake.",
			"But the call is pretty simple.",
			"fputc capital A ptr2, all that's going to do is it's",
			"going to write the letter into A into file 2 dot",
			"text, which was the name of the file that we opened and assigned",
			"the pointer to ptr2.",
			"So we're going to write a capital A to file 2 dot text.",
			"And we'll write an exclamation point to file 3 dot",
			"text, which was pointed to by ptr3.",
			"So again, pretty straightforward here.",
			">> But now we can do another thing.",
			"We have this example we were just going over",
			"about being able to replicate the cat Linux command, the one that prints out",
			"to the screen.",
			"Well, now that we have the ability to read characters from files",
			"and write characters to files, why don't we just substitute that",
			"call to printf with a call to fputc.",
			">> And now we've duplicated cp, a very basic Linux command",
			"that we talked about way long ago in the Linux commands video.",
			"We've effectively duplicated that right here.",
			"We're reading a character and then we're writing that character to another file.",
			"Reading from one file, writing to another, over and over",
			"and over again until we hit EOF.",
			"We've got to the end of the file we're trying to copy from.",
			"And by that we'll have written all of the characters we need to the file",
			"that we're writing to.",
			"So this is cp, the Linux copy command.",
			">> At the very beginning of this video, I had the caveat",
			"that we would talk a little bit about pointers.",
			"Here is specifically where we're going to talk about pointers",
			"in addition to file pointers.",
			"So this function looks kind of scary.",
			"It's got several parameters.",
			"There's a lot going on here.",
			"There's a lot of different colors and texts.",
			"But really, it's just the generic version of fgetc",
			"that allows us to get any amount of information.",
			"It can be a bit inefficient if we're getting characters one at a time,",
			"iterating through the file one character at a time.",
			"Wouldn't it be nicer to get 100 at a time or 500 at a time?",
			">> Well, fread and its companion function fwrite, which we'll talk about",
			"in a second, allow us to do just that.",
			"We can read an arbitrary amount of information from a file",
			"and we store it somewhere temporarily.",
			"Instead of being able to just fit it in a single variable,",
			"we might need to store it in an array.",
			"And so, we pass in four arguments to fread-- a pointer",
			"to the location where we're going to store information,",
			"how large each unit of information will be, how many units of information",
			"we want to acquire, and from which file we want to get them.",
			"Probably best illustrated with an example here.",
			"So let's say that we declare an array of 10 integers.",
			"We've just declared on the stack arbitrarily int arr 10.",
			"So that's pretty straightforward.",
			"Now what we're doing though is the frecall is we're reading size of int",
			"times 10 bytes of information.",
			"Size of int being four-- that's the size of an integer in c.",
			">> So what we're doing is we're reading 40 bytes worth of information",
			"from the file pointed to by ptr.",
			"And we're storing those 40 bytes somewhere",
			"where we have set aside 40 bytes worth of memory.",
			"Fortunately, we've already done that by declaring arr, that array right there.",
			"That is capable of holding 10 four-byte units.",
			"So in total, it can hold 40 bytes worth of information.",
			"And we are now reading 40 bytes of information from the file,",
			"and we're storing it in arr.",
			">> Recall from the video on pointers that the name of an array, such as arr,",
			"is really just a pointer to its first element.",
			"So when we pass in arr there, we are, in fact, passing in a pointer.",
			">> Similarly we can do this-- we don't necessarily",
			"need to save our buffer on the stack.",
			"We could also dynamically allocate a buffer like this, using malloc.",
			"Remember, when we dynamically allocate memory,",
			"we're saving it on the heap, not the stack.",
			"But it's still a buffer.",
			">> It still, in this case, is holding 640 bytes of information",
			"because a double takes up eight bytes.",
			"And we're asking for 80 of them.",
			"We want to have space to hold 80 doubles.",
			"So 80 times 8 is 640 bytes information.",
			"And that call to fread is collecting 640 bytes of information",
			"from the file pointed to by ptr and storing it now in arr2.",
			">> Now we can also treat fread just like a call to fgetc.",
			"In this case, we're just trying to get one character from the file.",
			"And we don't need an array to hold a character.",
			"We can just store it in a character variable.",
			">> The catch, though, is that when we just have a variable,",
			"we need to pass in the address of that variable",
			"because recall that the first argument to fread",
			"is a pointer to the location and memory where we want to store the information.",
			"Again, the name of an array is a pointer.",
			"So we don't need to do ampersand array.",
			"But c, the character c here, is not an array.",
			"It's just a variable.",
			"And so we need to pass an ampersand c to indicate",
			"that that's the address where we want to store this one byte of information,",
			"this one character that we're collecting from ptr.",
			"Fwrite-- I'll go through this a little more",
			"quickly-- is pretty much the exact equivalent of fread",
			"except it's for writing instead of reading, just",
			"like the other-- we've had open and close, get a character,",
			"write a character.",
			"Now it's get arbitrary amount of information,",
			"right arbitrary amount of information.",
			"So just like before, we can have an array of 10 integers",
			"where we already have information stored, perhaps.",
			">> It was probably some lines of code that should go between these two",
			"where I fill arr with something meaningful.",
			"I fill it with 10 different integers.",
			"And instead, what I'm doing is writing from arr",
			"and collecting the information from arr.",
			"And I'm taking that information and putting it into the file.",
			">> So instead of it being from the file to the buffer,",
			"we're now going from the buffer to the file.",
			"So it's just the reverse.",
			"So again, just like before, we can also have a heap chunk of memory",
			"that we've dynamically allocated and read from that",
			"and write that to the file.",
			">> And we also have a single variable capable of holding one byte",
			"of information, such as a character.",
			"But again, we need to pass in the address of that variable",
			"when we want to read from it.",
			"So we can write the information we find at that address",
			"to the file pointer, ptr.",
			">> There's lots of other great file I/O functions",
			"that do various things besides the ones we've talked about today.",
			"A couple of the ones you might find useful",
			"are fgets and fputs, which are the equivalent",
			"of fgetc and fputc but for reading a single string from a file.",
			"Instead of a single character, it will read an entire string.",
			"fprintf, which basically allows you to use printf to write to file.",
			"So just like you can do the variable substitution using",
			"the placeholders percent i and percent d, and so on, with printf",
			"you can similarly take the printf string and print something",
			"like that to a file.",
			">> fseek-- if you have a DVD player is the analogy I usually use here--",
			"is sort of like using your rewind and fast forward",
			"buttons to move around the movie.",
			"Similarly, you can move around the file.",
			"One of the things inside that file structure",
			"that c creates for you is an indicator of where you are in the file.",
			"Are you at the very beginning, at byte zero?",
			"Are you at byte 100, byte 1,000, and so on?",
			"You can use fseek to arbitrarily move that indicator forward or backward.",
			">> And ftell, again similar to a DVD player,",
			"is like a little clock that tells you how many minutes and seconds you",
			"are into a particular movie.",
			"Similarly, ftell tells you how many bytes you are into the file.",
			"feof is a different version of detecting whether you've",
			"reached the end of the file.",
			"And ferror is a function that you can use",
			"to detect whether something has gone wrong working with a file.",
			"Again, this is just scratching the surface.",
			"There's still plenty more file I/O functions in the standard io.h.",
			"But this will probably get you started working with file pointers.",
			"I'm Doug Lloyd.",
			"This is cs50.",
			""
		],
		"is_youtube": false
	},
	"video_027": {
		"section": "CS50x 2021",
		"subsection": "Week 5",
		"unit": "Lecture",
		"video_sources": [
			"https://edx-video.net/cae6b619-2872-43ff-86d5-f9e4ee68a901.m3u8",
			"https://edx-video.net/cae6b619-2872-43ff-86d5-f9e4ee68a901-mp4_720p.mp4"
		],
		"video_duration": 8799,
		"speech_period": [
			2.48, 46.542, 0.958, 2.88, 3.78, 2.28, 2.31, 2.89, 2.57, 3.6, 2.04, 2.79,
			3.27, 2.52, 2.61, 3.63, 3.687, 1.833, 2.49, 3.12, 2.7, 4.3, 1.61, 2.67,
			3.09, 4.45, 1.52, 2.64, 3.84, 4.555, 3.125, 0.85, 2.57, 3.06, 1.29, 3.75,
			3.69, 2.67, 5.46, 1.38, 3.0, 2.67, 2.85, 1.59, 2.1, 4.17, 1.53, 4.11,
			3.15, 3.3, 7.41, 2.28, 3.413, 1.417, 3.22, 2.03, 2.82, 1.47, 2.91, 3.39,
			4.05, 1.29, 2.52, 5.88, 4.11, 3.46, 3.71, 1.62, 5.34, 2.47, 3.98, 1.02,
			1.799, 3.481, 4.99, 3.59, 1.59, 0.75, 1.14, 1.83, 2.1, 1.44, 2.19, 2.1,
			1.86, 3.45, 3.36, 2.67, 2.79, 1.38, 0.99, 2.67, 1.47, 3.42, 4.02, 2.01,
			3.0, 1.56, 4.493, 2.917, 1.65, 2.73, 2.1, 3.3, 3.09, 1.95, 2.97, 4.9,
			2.67, 4.47, 5.55, 3.0, 1.83, 3.03, 5.37, 1.95, 3.903, 1.917, 1.44, 4.62,
			3.3, 3.6, 1.95, 1.56, 3.137, 2.083, 3.24, 3.18, 1.05, 3.18, 4.98, 4.95,
			2.31, 4.87, 3.02, 3.18, 2.91, 3.78, 4.32, 2.52, 4.89, 2.85, 2.37, 2.01,
			1.915, 2.375, 2.43, 1.0, 1.833, 2.197, 2.59, 1.773, 1.917, 2.43, 3.42,
			3.06, 1.89, 1.92, 3.64, 3.2, 2.02, 2.0, 4.15, 4.129, 2.281, 2.94, 2.31,
			2.31, 2.56, 2.93, 3.63, 0.945, 2.625, 1.96, 4.1, 4.53, 1.57, 3.23, 2.37,
			3.58, 3.68, 1.17, 2.37, 2.37, 2.458, 3.669, 3.083, 1.95, 4.5, 3.45, 3.27,
			2.94, 4.59, 1.83, 3.24, 4.17, 2.55, 3.45, 3.39, 2.59, 2.94, 2.75, 3.372,
			0.708, 3.84, 3.18, 4.44, 3.27, 3.69, 2.98, 2.61, 3.84, 5.49, 1.83, 1.8,
			3.377, 1.333, 1.26, 3.563, 2.917, 2.52, 1.93, 3.23, 1.41, 2.46, 4.692,
			2.208, 1.792, 3.968, 5.26, 2.33, 4.71, 3.51, 2.61, 2.253, 1.917, 2.625,
			2.565, 4.44, 2.04, 1.77, 2.02, 2.57, 3.27, 2.105, 1.375, 2.46, 2.11, 3.92,
			3.75, 1.17, 3.15, 3.75, 2.26, 1.97, 3.54, 2.79, 3.88, 3.502, 3.208, 2.4,
			3.42, 2.58, 4.32, 3.84, 2.31, 2.35, 3.53, 3.39, 2.46, 3.48, 2.02, 3.65,
			2.61, 4.12, 3.35, 3.57, 0.93, 1.858, 2.042, 3.51, 2.68, 2.705, 2.625,
			2.37, 3.18, 6.54, 1.74, 2.91, 2.49, 2.46, 2.61, 6.42, 1.71, 1.35, 0.96,
			3.66, 1.312, 1.208, 1.23, 0.75, 3.66, 2.01, 2.73, 6.13, 3.56, 4.68, 3.99,
			2.67, 2.34, 3.45, 3.45, 4.17, 2.68, 6.28, 2.4, 4.77, 3.06, 2.16, 3.78,
			3.39, 0.75, 2.64, 3.06, 3.99, 3.27, 4.26, 5.07, 2.76, 5.13, 3.42, 3.24,
			1.88, 1.75, 1.77, 4.03, 5.42, 3.06, 3.329, 2.52, 4.141, 3.45, 2.35, 0.5,
			1.98, 3.167, 1.213, 1.92, 2.083, 1.757, 2.56, 2.665, 1.375, 2.52, 3.9,
			2.098, 2.042, 1.3, 4.79, 4.17, 2.85, 2.88, 3.57, 3.54, 2.49, 4.29, 3.758,
			1.792, 1.8, 4.44, 2.597, 1.333, 4.68, 3.19, 3.23, 4.38, 1.59, 2.67, 2.13,
			1.667, 4.993, 2.4, 4.59, 3.24, 2.585, 2.125, 3.48, 2.34, 2.07, 3.63, 4.32,
			3.53, 3.13, 5.13, 5.34, 3.247, 0.833, 0.5, 1.81, 3.57, 2.4, 3.42, 2.07,
			2.46, 2.28, 1.382, 1.708, 2.91, 4.2, 2.98, 2.81, 3.75, 3.87, 1.93, 3.14,
			3.03, 2.55, 3.33, 2.73, 3.72, 3.09, 4.17, 2.07, 2.55, 4.41, 0.635, 1.375,
			1.38, 1.785, 4.763, 1.042, 2.958, 3.952, 1.58, 1.77, 4.47, 2.22, 3.48,
			3.63, 2.52, 2.933, 1.417, 1.667, 3.283, 2.01, 4.41, 2.58, 1.47, 2.68,
			2.03, 4.08, 4.08, 4.02, 2.94, 4.06, 2.0, 1.98, 3.99, 3.42, 2.49, 2.34,
			1.75, 3.125, 2.025, 2.55, 2.997, 1.333, 2.542, 1.768, 2.46, 1.817, 1.333,
			2.16, 2.67, 1.772, 2.458, 3.24, 2.4, 1.29, 2.34, 5.28, 3.99, 4.15, 1.77,
			1.88, 2.05, 6.6, 3.335, 1.875, 3.09, 2.88, 2.16, 1.86, 2.85, 3.18, 4.17,
			2.67, 2.43, 3.12, 2.46, 1.813, 3.167, 2.64, 1.14, 3.27, 3.39, 3.21, 4.458,
			1.542, 1.23, 1.8, 1.86, 3.03, 4.62, 1.35, 1.65, 5.47, 2.42, 3.39, 3.72,
			1.66, 3.62, 2.43, 2.13, 2.53, 3.26, 3.39, 1.32, 1.903, 1.167, 4.13, 3.75,
			2.04, 1.24, 5.22, 2.64, 4.543, 2.167, 1.35, 1.15, 2.24, 2.53, 6.0, 1.73,
			2.97, 2.55, 4.08, 2.01, 3.75, 2.673, 1.917, 1.92, 3.36, 4.23, 2.583,
			3.209, 1.258, 2.46, 1.98, 1.955, 2.125, 1.14, 2.25, 2.125, 3.965, 2.45,
			2.64, 3.93, 2.31, 3.06, 2.19, 2.22, 3.57, 2.37, 4.91, 2.887, 1.583, 3.18,
			1.56, 1.06, 1.208, 2.112, 5.67, 2.25, 4.72, 2.96, 2.73, 2.65, 4.53, 2.09,
			2.4, 3.12, 0.907, 1.583, 2.79, 2.31, 4.65, 2.063, 2.167, 2.46, 2.79, 2.8,
			3.033, 1.667, 4.35, 1.2, 3.45, 1.32, 2.25, 2.91, 1.555, 2.375, 3.27, 3.36,
			1.38, 4.68, 3.0, 4.51, 4.16, 1.98, 2.28, 2.4, 2.64, 2.92, 2.892, 1.958,
			2.89, 2.49, 2.27, 4.98, 2.64, 3.25, 5.01, 4.14, 3.56, 1.513, 1.667, 4.14,
			1.89, 0.9, 2.04, 3.6, 2.55, 1.788, 3.042, 4.44, 3.45, 3.12, 2.34, 2.46,
			3.628, 2.792, 5.67, 1.44, 4.05, 3.7, 2.45, 3.72, 5.67, 3.9, 4.74, 3.85,
			2.18, 2.25, 2.58, 1.11, 2.34, 0.75, 1.38, 1.917, 2.313, 3.18, 1.788,
			1.542, 3.96, 3.54, 2.9, 3.76, 2.34, 2.85, 2.8, 5.45, 3.78, 4.0, 2.75,
			2.85, 3.18, 3.825, 1.215, 1.89, 5.78, 1.78, 0.84, 2.09, 2.22, 3.4, 4.04,
			3.15, 5.55, 4.527, 2.583, 2.25, 1.779, 3.561, 3.93, 1.71, 4.08, 6.239,
			1.411, 1.63, 2.629, 2.491, 1.319, 3.049, 1.542, 1.829, 2.1, 1.741, 2.159,
			2.333, 1.417, 3.326, 3.125, 2.04, 3.63, 2.61, 5.58, 5.07, 3.12, 1.38,
			2.16, 2.58, 2.25, 3.21, 2.26, 4.55, 2.17, 3.95, 3.27, 5.13, 2.73, 4.66,
			4.76, 3.18, 4.17, 6.677, 2.083, 3.51, 3.34, 1.73, 2.04, 1.23, 2.88, 1.89,
			2.28, 2.28, 2.07, 3.21, 2.91, 4.17, 1.92, 2.56, 3.26, 5.16, 1.89, 1.71,
			4.29, 8.97, 5.66, 2.97, 6.21, 3.34, 1.73, 1.833, 3.627, 6.0, 6.493, 0.917,
			4.57, 2.75, 2.057, 2.833, 2.375, 2.155, 0.42, 0.94, 2.48, 2.75, 1.0, 2.7,
			3.27, 2.34, 3.4, 2.3, 2.217, 1.333, 3.65, 2.98, 1.76, 2.61, 4.39, 3.63,
			3.89, 4.77, 2.73, 1.56, 1.277, 1.333, 1.958, 3.082, 1.86, 1.41, 1.44,
			3.125, 2.605, 2.85, 3.723, 1.917, 2.5, 1.01, 3.3, 4.59, 3.12, 2.61, 1.89,
			4.95, 2.16, 5.47, 3.29, 6.66, 1.47, 2.91, 1.75, 2.0, 4.71, 2.1, 3.06,
			3.48, 3.61, 2.6, 2.88, 2.88, 3.24, 5.25, 3.0, 1.93, 2.51, 2.04, 6.63,
			3.84, 1.47, 2.2, 2.083, 3.787, 2.13, 2.26, 2.75, 3.137, 2.833, 3.15, 3.36,
			1.02, 1.47, 3.45, 3.24, 3.182, 1.708, 2.19, 0.99, 1.11, 2.43, 1.92, 2.89,
			5.07, 3.02, 5.07, 0.99, 1.248, 3.042, 4.29, 2.34, 2.82, 2.38, 2.55, 1.25,
			2.61, 2.908, 2.042, 3.54, 3.07, 3.14, 2.25, 2.286, 1.914, 2.89, 3.2,
			2.407, 2.333, 1.51, 2.21, 2.67, 3.33, 3.69, 1.39, 4.31, 3.9, 3.33, 3.24,
			3.46, 3.83, 3.69, 3.15, 2.405, 1.375, 1.71, 3.18, 1.03, 1.73, 1.842,
			0.708, 2.875, 2.675, 0.97, 3.527, 1.083, 4.59, 3.06, 4.53, 2.89, 2.27,
			1.708, 3.122, 3.42, 1.93, 0.5, 2.24, 3.1, 4.26, 4.41, 1.38, 3.24, 1.98,
			2.46, 3.998, 1.042, 1.35, 2.76, 1.98, 2.94, 3.09, 1.17, 5.76, 5.84, 2.5,
			1.5, 2.67, 2.07, 2.22, 2.49, 2.97, 2.49, 1.77, 3.87, 1.83, 5.07, 1.65,
			3.6, 4.74, 2.49, 1.41, 1.59, 2.13, 4.2, 1.44, 2.79, 4.5, 2.01, 3.502,
			1.458, 4.37, 4.62, 1.38, 3.81, 5.56, 3.02, 0.63, 2.13, 2.07, 4.32, 1.628,
			1.792, 2.49, 4.98, 2.33, 2.19, 2.85, 1.86, 4.57, 2.21, 2.44, 1.97, 2.31,
			2.4, 1.302, 2.958, 1.98, 3.39, 2.58, 3.393, 1.167, 3.36, 4.007, 0.583,
			2.79, 1.8, 0.79, 1.292, 2.988, 4.418, 1.792, 2.49, 6.54, 4.12, 2.24, 3.06,
			4.41, 5.52, 2.73, 2.91, 2.91, 4.073, 2.167, 3.9, 3.9, 4.44, 1.2, 5.16,
			2.04, 6.03, 3.467, 1.083, 3.61, 1.967, 2.833, 1.86, 4.47, 3.15, 3.39,
			1.77, 0.97, 2.87, 2.0, 2.71, 3.67, 1.56, 1.16, 4.8, 2.22, 2.91, 2.19,
			2.61, 5.34, 2.52, 2.71, 1.97, 2.37, 5.34, 1.5, 2.91, 3.72, 3.69, 3.54,
			1.59, 2.52, 3.39, 2.28, 3.42, 2.29, 3.48, 1.7, 3.25, 2.69, 1.6, 1.37,
			7.23, 2.13, 2.97, 3.87, 4.14, 3.97, 1.1, 1.99, 0.5, 1.17, 3.48, 3.12,
			3.51, 4.88, 2.4, 3.93, 2.97, 3.07, 3.11, 1.86, 3.0, 3.56, 2.5, 3.69, 2.79,
			6.18, 1.02, 5.22, 3.0, 2.25, 3.1, 4.53, 5.09, 2.43, 1.89, 2.25, 2.07,
			3.15, 5.8, 0.77, 4.29, 2.46, 1.54, 3.35, 1.53, 4.5, 3.63, 1.86, 5.29,
			1.43, 4.65, 1.77, 4.29, 2.67, 6.54, 2.73, 1.54, 2.3, 3.98, 2.89, 2.52,
			3.48, 1.41, 3.87, 2.79, 1.32, 3.75, 2.517, 2.583, 3.12, 3.06, 2.56, 3.32,
			3.19, 2.84, 4.81, 7.465, 3.955, 1.74, 1.74, 2.848, 2.042, 3.45, 3.19, 0.5,
			3.965, 2.875, 3.96, 3.59, 6.7, 4.62, 1.11, 1.77, 1.5, 4.95, 2.94, 4.66,
			2.28, 1.64, 1.825, 2.375, 3.48, 0.85, 0.33, 0.875, 4.305, 2.16, 4.35,
			2.07, 3.28, 3.89, 3.33, 3.15, 3.81, 5.77, 2.183, 2.917, 3.14, 2.34, 2.94,
			2.76, 3.33, 3.075, 1.125, 2.375, 4.195, 1.8, 4.53, 2.58, 3.48, 3.03, 2.03,
			2.59, 3.15, 3.57, 2.08, 3.2, 2.53, 3.56, 2.67, 2.61, 3.683, 2.167, 1.41,
			3.27, 1.89, 2.97, 2.67, 1.75, 2.39, 1.62, 3.66, 2.28, 4.35, 2.76, 3.985,
			3.125, 1.33, 3.26, 1.48, 3.96, 4.79, 3.25, 4.04, 3.06, 2.003, 2.167,
			3.527, 2.083, 2.58, 1.95, 7.02, 2.247, 2.583, 2.79, 3.33, 1.71, 3.12,
			2.16, 3.88, 3.02, 3.51, 4.92, 3.36, 2.85, 2.76, 2.25, 3.45, 4.26, 2.88,
			1.993, 2.417, 1.86, 2.73, 3.0, 3.468, 3.042, 1.8, 2.7, 1.66, 1.505, 3.795,
			2.31, 2.99, 1.97, 2.79, 3.36, 3.36, 4.09, 1.49, 1.74, 5.7, 2.07, 3.69,
			3.21, 5.25, 2.55, 3.75, 1.47, 2.8, 4.88, 4.17, 4.23, 1.54, 3.65, 3.1,
			4.74, 3.83, 2.37, 2.82, 5.8, 3.59, 3.09, 2.39, 1.75, 3.72, 2.07, 3.63,
			2.372, 2.458, 3.84, 1.448, 1.792, 3.36, 2.49, 4.53, 1.313, 1.417, 2.25,
			4.23, 5.34, 3.6, 5.23, 4.53, 4.35, 4.24, 4.4, 1.032, 2.208, 2.472, 2.958,
			2.37, 1.89, 1.833, 1.377, 2.61, 3.87, 4.14, 4.11, 3.78, 4.23, 2.7, 3.63,
			3.18, 2.85, 2.37, 1.89, 1.92, 3.48, 3.09, 0.6, 2.97, 2.4, 3.66, 4.11,
			0.63, 1.62, 1.92, 2.91, 3.42, 4.68, 4.44, 3.54, 1.74, 3.09, 4.89, 2.7,
			4.02, 2.31, 3.45, 2.94, 4.178, 1.792, 3.15, 3.96, 2.82, 3.33, 1.36, 2.84,
			3.81, 5.34, 6.93, 0.96, 3.15, 3.57, 2.94, 1.25, 2.62, 2.7, 4.073, 1.417,
			3.085, 1.625, 3.39, 3.51, 3.419, 1.771, 3.479, 1.261, 1.32, 2.4, 3.21,
			4.229, 3.181, 3.63, 3.93, 2.867, 1.583, 4.67, 4.5, 3.719, 1.771, 2.55,
			3.03, 1.859, 3.54, 1.391, 1.25, 3.399, 2.0, 1.375, 2.736, 1.84, 0.96,
			3.56, 3.23, 4.45, 3.11, 2.49, 2.79, 2.64, 4.59, 1.77, 4.72, 3.32, 5.08,
			1.61, 4.51, 3.2, 0.81, 2.31, 3.03, 1.63, 4.01, 1.57, 1.88, 2.55, 3.72,
			0.52, 3.68, 3.06, 5.02, 1.17, 1.14, 3.3, 4.05, 2.49, 1.6, 3.2, 2.73, 5.02,
			0.5, 2.61, 3.72, 2.1, 0.88, 2.15, 0.52, 0.5, 1.5, 2.34, 3.78, 3.6, 2.22,
			4.68, 1.52, 2.253, 2.917, 3.93, 1.44, 1.8, 1.26, 2.58, 1.44, 1.75, 5.21,
			1.38, 0.27, 1.05, 2.263, 1.667, 3.88, 3.98, 3.36, 1.87, 2.81, 2.4, 2.41,
			2.48, 3.81, 2.13, 2.34, 2.67, 2.16, 2.76, 2.37, 5.7, 2.85, 1.77, 3.21,
			2.97, 3.84, 0.603, 2.667, 1.48, 1.28, 2.19, 3.0, 1.8, 1.62, 1.63, 1.88,
			3.36, 2.94, 2.73, 2.04, 3.51, 0.967, 2.333, 2.98, 1.58, 3.12, 1.56, 1.47,
			1.77, 1.71, 2.31, 3.332, 1.708, 2.375, 2.635, 2.34, 1.35, 4.69, 1.25,
			2.65, 1.73, 1.78, 3.8, 1.5, 3.76, 1.58, 2.73, 4.29, 2.79, 2.7, 2.01, 2.88,
			2.37, 2.64, 2.04, 2.55, 2.76, 1.99, 3.432, 1.208, 2.62, 2.57, 3.2, 2.75,
			3.89, 2.65, 3.09, 5.27, 1.83, 3.93, 2.97, 0.99, 1.915, 1.875, 2.78, 5.52,
			5.15, 1.47, 4.47, 0.96, 1.795, 1.125, 1.43, 3.15, 4.86, 2.34, 4.05, 1.62,
			2.53, 2.66, 1.833, 3.147, 2.14, 3.262, 2.458, 3.21, 4.63, 3.24, 1.52,
			1.78, 3.83, 3.6, 1.77, 2.04, 3.182, 1.708, 4.5, 3.24, 2.43, 3.37, 0.84,
			4.29, 1.77, 3.29, 3.33, 4.0, 1.43, 4.23, 4.35, 2.79, 5.01, 1.62, 4.09,
			3.42, 2.54, 2.86, 2.43, 1.44, 1.95, 2.79, 1.17, 1.89, 2.26, 2.51, 1.65,
			3.33, 3.09, 3.24, 3.78, 2.82, 4.5, 2.753, 2.167, 1.702, 1.958, 3.51, 2.58,
			2.94, 2.16, 1.39, 2.46, 1.782, 1.958, 2.5, 2.792, 0.808, 2.39, 3.87, 1.66,
			4.22, 4.11, 3.69, 3.39, 1.42, 3.2, 1.98, 3.96, 2.67, 3.72, 1.41, 3.642,
			0.708, 1.708, 1.562, 3.3, 2.76, 4.62, 2.55, 4.32, 2.97, 3.0, 4.71, 4.23,
			4.59, 1.89, 3.75, 3.81, 2.79, 2.46, 1.21, 4.4, 3.13, 3.44, 4.29, 3.75,
			1.72, 0.77, 4.59, 0.87, 2.43, 2.28, 2.07, 0.75, 3.21, 2.4, 3.36, 2.22,
			3.09, 3.45, 4.71, 4.5, 3.15, 3.36, 3.06, 1.65, 2.917, 3.713, 3.51, 2.25,
			1.71, 1.34, 0.5, 5.31, 3.21, 4.56, 1.72, 4.1, 0.81, 4.32, 2.34, 3.12,
			1.23, 3.303, 1.917, 2.28, 3.69, 2.365, 0.875, 1.792, 1.058, 1.41, 1.855,
			2.375, 2.34, 3.45, 2.94, 2.91, 1.68, 0.81, 1.17, 0.78, 0.6, 1.11, 0.99,
			1.0, 0.74, 1.86, 2.13, 2.37, 2.81, 1.75, 4.32, 2.41, 2.09, 2.1, 2.97,
			2.14, 1.13, 1.02, 3.93, 0.6, 4.02, 2.61, 1.32, 2.76, 2.88, 2.64, 1.833,
			2.107, 3.41, 2.79, 2.22, 4.26, 3.99, 4.23, 3.6, 0.51, 2.5, 1.792, 4.436,
			2.792, 1.59, 1.39, 2.42, 2.76, 3.36, 2.79, 3.66, 1.045, 0.875, 2.07, 1.23,
			2.28, 2.08, 2.96, 1.02, 0.78, 0.75, 2.68, 2.12, 4.72, 1.82, 3.51, 2.52,
			1.86, 2.91, 4.11, 1.35, 2.958, 5.142, 2.79, 3.36, 4.44, 3.39, 0.63, 3.93,
			2.982, 1.458, 2.58, 3.42, 1.62, 3.93, 1.77, 4.8, 1.29, 3.09, 3.6, 1.92,
			1.24, 2.458, 2.902, 4.89, 2.372, 1.708, 4.87, 2.43, 3.31, 3.1, 2.85, 0.75,
			2.73, 2.64, 1.17, 2.88, 1.86, 2.97, 1.9, 1.5, 2.3, 6.46, 4.52, 1.35, 2.22,
			2.49, 2.94, 3.62, 1.75, 2.833, 2.537, 1.5, 4.8, 4.57, 4.34, 3.39, 2.85,
			3.76, 1.19, 1.41, 2.85, 1.53, 2.67, 2.4, 2.37, 3.372, 1.708, 1.5, 3.41,
			3.06, 1.9, 1.82, 3.19, 2.39, 4.74, 2.52, 3.463, 2.417, 3.6, 4.45, 2.54,
			2.73, 3.55, 4.92, 1.13, 4.05, 3.36, 1.955, 0.625, 1.53, 1.2, 2.75, 1.1,
			1.44, 3.57, 4.395, 1.625, 2.82, 3.48, 4.6, 1.85, 5.1, 1.71, 4.17, 2.1,
			3.42, 1.955, 2.875, 3.845, 2.125, 2.44, 1.97, 2.61, 2.1, 4.08, 2.73, 4.71,
			2.02, 0.5, 5.01, 3.09, 3.51, 3.12, 3.99, 6.44, 1.66, 0.5, 2.67, 6.03,
			1.65, 3.03, 0.75, 2.79, 3.72, 2.04, 1.583, 3.547, 2.07, 3.327, 1.833,
			2.55, 2.7, 2.07, 3.06, 2.64, 3.42, 1.25, 1.75, 3.3, 4.42, 0.5, 2.458,
			1.992, 4.2, 2.72, 7.02, 3.19, 2.96, 2.14, 2.0, 1.29, 1.583, 3.367, 3.81,
			2.655, 1.845, 3.6, 3.513, 1.167, 1.83, 3.45, 1.57, 2.99, 2.08, 4.31, 2.04,
			1.05, 2.58, 0.747, 1.833, 0.58, 1.68, 2.54, 2.73, 1.5, 3.1, 5.6, 3.94,
			4.7, 3.93, 2.52, 4.5, 3.46, 3.29, 4.71, 1.92, 2.97, 3.3, 1.05, 1.47, 3.24,
			2.58, 2.083, 4.607, 2.43, 2.13, 6.16, 3.38, 2.34, 7.14, 4.02, 2.64, 1.98,
			3.252, 2.958, 1.14, 1.29, 1.84, 3.77, 3.43, 4.52, 4.38, 1.922, 2.458,
			0.75, 2.13, 1.77, 1.77, 3.21, 2.16, 2.49, 5.04, 4.3, 5.25, 5.78, 3.24,
			1.08, 2.76, 2.61, 2.97, 4.02, 3.0, 2.583, 1.917, 3.1, 3.29, 2.64, 3.15,
			2.628, 3.042, 1.57, 2.51, 1.89, 3.78, 1.77, 2.1, 1.77, 1.74, 2.34, 2.07,
			3.57, 2.55, 3.57, 3.45, 2.31, 4.03, 4.1, 3.78, 3.54, 2.88, 4.08, 2.25,
			3.6, 2.52, 4.17, 6.25, 1.11, 2.19, 3.6, 3.96, 2.1, 2.49, 2.37, 2.65, 0.5,
			3.06, 3.208, 1.75, 1.042, 1.08, 2.67, 2.73, 2.057, 3.083, 2.458, 2.362,
			3.145, 1.625, 0.99, 1.95, 1.967, 2.833, 3.45, 2.73, 4.44, 4.86, 3.21,
			4.41, 3.84, 3.21, 2.34, 3.39, 5.11, 2.238, 1.542, 1.47, 1.11, 1.41, 3.33,
			3.418, 1.292, 2.76, 4.56, 1.2, 2.25, 3.36, 1.14, 2.867, 2.833, 3.95, 2.08,
			3.54, 3.03, 2.62, 1.97, 3.22, 1.34, 2.807, 2.833, 1.71, 1.95, 3.208,
			2.732, 2.73, 2.11, 3.83, 1.962, 2.208, 3.0, 1.02, 3.34, 2.965, 1.375, 2.4,
			3.87, 4.68, 2.94, 1.44, 3.75, 1.77, 4.5, 4.59, 2.86, 2.69, 4.5, 2.67,
			3.33, 3.51, 6.06, 2.28, 3.54, 1.65, 1.62, 3.06, 3.37, 1.272, 1.958, 1.35,
			1.95, 2.43, 2.25, 2.97, 3.18, 2.35, 3.2, 5.26, 1.25, 0.81, 2.32, 1.26,
			1.46, 1.69, 1.82, 1.57, 1.73, 1.53, 3.78, 4.92, 3.85, 3.29, 1.83, 3.09,
			2.07, 2.04, 3.0, 3.24, 1.83, 2.58, 3.33, 2.04, 4.5, 0.78, 3.39, 2.26,
			0.86, 2.88, 2.49, 2.82, 2.34, 1.41, 2.34, 2.4, 3.91, 2.72, 1.71, 2.97,
			4.32, 3.708, 2.792, 4.26, 3.12, 3.3, 2.73, 2.19, 3.66, 2.41, 1.02, 3.022,
			0.958, 1.833, 4.137, 2.58, 1.88, 1.45, 3.57, 4.53, 3.28, 3.05, 4.69, 2.87,
			2.7, 3.39, 5.67, 6.58, 1.7, 2.97, 3.06, 2.11, 2.9, 3.0, 2.76, 2.883,
			1.917, 2.98, 3.38, 4.87, 4.88, 2.22, 2.7, 3.3, 4.5, 1.11, 1.47, 1.792,
			4.508, 1.47, 1.75, 4.01, 3.96, 2.82, 1.68, 1.682, 2.458, 2.67, 5.9, 4.41,
			2.1, 2.49, 3.09, 3.27, 3.42, 3.06, 4.697, 2.833, 0.72, 1.83, 0.45, 0.5,
			2.56, 1.2, 4.11, 3.15, 2.25, 1.39, 1.82, 2.7, 3.99, 3.737, 2.083, 6.36,
			4.38, 6.67, 2.0, 3.79, 1.49, 1.53, 3.25, 1.94, 3.58, 1.25, 2.263, 2.417,
			4.203, 2.667, 2.97, 1.35, 2.117, 0.833, 2.03, 3.85, 2.15, 5.82, 1.07,
			4.69, 4.08, 2.13, 4.83, 2.262, 2.958, 3.822, 2.478, 3.54, 2.04, 2.73,
			3.84, 1.56, 2.1, 4.015, 2.375, 2.915, 2.475, 0.5, 2.21, 0.75, 2.76, 1.97,
			3.76, 5.907, 1.083, 1.86, 2.01, 2.71, 6.11, 1.745, 2.875, 2.23, 4.49,
			2.16, 5.94, 2.52, 1.78, 0.62, 1.59, 1.89, 2.67, 5.7, 3.39, 2.065, 1.625,
			4.48, 3.11, 1.77, 4.41, 3.9, 3.27, 3.0, 4.66, 2.12, 2.16, 3.03, 2.492,
			1.708, 2.04, 2.917, 2.923, 2.75, 1.958, 3.312, 2.04, 1.89, 2.208, 1.902,
			5.38, 3.23, 1.5, 3.88, 1.31, 4.14, 2.04, 1.59, 4.72, 2.145, 2.375, 1.11,
			2.583, 2.697, 3.658, 2.042, 2.7, 3.39, 5.31, 1.383, 1.917, 2.11, 1.73,
			4.59, 4.29, 3.81, 2.94, 2.94, 3.0, 1.06, 0.5, 0.9, 3.12, 0.99, 1.23, 1.44,
			3.18, 0.833, 5.357, 0.5, 2.28, 3.18, 1.47, 3.54, 1.23, 0.39, 0.3, 1.875,
			4.035, 3.18, 4.698, 1.542, 2.59, 1.94, 3.48, 2.1, 2.61, 4.08, 1.75, 8.06,
			3.51, 5.58, 3.39, 2.61, 4.782, 0.708, 1.59, 2.97, 4.44, 2.88, 5.94, 2.5,
			2.15, 2.28, 2.46, 4.68, 2.7, 4.68, 6.2, 4.13, 2.91, 2.91, 3.51, 2.67,
			6.49, 3.95, 0.81, 6.69, 4.08, 3.637, 0.833, 3.42, 2.34, 1.95, 3.9, 2.64,
			4.2, 3.66, 0.63, 3.72, 0.84, 3.27, 1.77, 2.88, 2.17, 2.36, 2.803, 0.917,
			3.33, 2.19, 3.21, 1.38, 2.28, 2.0, 2.71, 3.042, 0.618, 2.49, 4.59, 3.983,
			2.167, 3.09, 2.41, 4.01, 2.25, 3.48, 2.19, 4.48, 1.25, 1.833, 2.007, 2.34,
			4.77, 3.15, 1.48, 4.88, 3.24, 3.12, 3.212, 1.708, 3.09, 3.57, 3.48, 2.002,
			1.958, 2.11, 2.63, 2.888, 2.542, 3.96, 4.11, 2.98, 4.26, 2.42, 6.03, 0.57,
			1.89, 2.4, 2.73, 3.69, 1.83, 3.84, 2.01, 1.958, 1.402, 2.4, 3.3, 2.16,
			4.867, 1.583, 3.21, 4.302, 2.958, 2.07, 3.0, 2.61, 3.9, 1.17, 3.0, 3.24,
			4.38, 5.72, 4.2, 2.85, 4.8, 5.85, 0.64, 4.58, 5.01, 2.97, 3.75, 2.88,
			1.83, 3.12, 5.55, 3.61, 1.89, 8.24, 4.11, 5.62, 2.78, 2.01, 5.7, 4.74,
			3.54, 1.59, 3.15, 1.83, 4.45, 0.92, 5.22, 1.38, 2.765, 1.375, 2.7, 6.9,
			5.222, 1.208, 2.36, 4.86, 2.67, 2.61, 2.4, 0.6, 2.52, 5.1, 4.54, 4.67,
			3.15, 3.96, 3.87, 0.69, 3.06, 2.85, 2.79, 1.912, 1.208, 5.37, 1.32, 4.8,
			3.58, 1.25, 3.69, 3.57, 4.02, 1.32, 2.433, 1.917, 2.333, 4.327, 2.56, 2.1,
			2.39, 1.77, 1.41, 4.5, 4.26, 3.0, 2.49, 3.45, 3.33, 3.15, 1.83, 2.97,
			2.56, 4.493, 1.917, 3.69, 3.3, 4.17, 5.92, 2.22, 1.38, 3.78, 4.11, 2.75,
			3.49, 4.14, 2.13, 2.583, 3.897, 3.84, 5.46, 1.8, 3.75, 3.22, 2.36, 2.04,
			3.96, 2.31, 2.94, 0.72, 2.7, 2.79, 1.74, 2.71, 1.745, 3.095, 2.66, 0.5,
			3.835, 0.625, 0.78, 0.792, 2.718, 1.38, 1.83, 1.38, 1.03, 0.5, 1.875,
			2.215, 3.98, 2.44, 0.5, 3.87, 2.98, 3.53, 2.25, 3.69, 1.92, 3.87, 2.34,
			2.13, 2.64, 5.01, 2.43, 1.86, 2.09, 3.39, 4.57, 3.78, 2.52, 1.5, 1.6,
			2.03, 3.33, 4.3, 1.25, 2.55, 1.92, 3.72, 2.58, 3.753, 1.917, 2.79, 3.87,
			3.09, 1.98, 2.61, 1.77, 2.375, 1.333, 1.625, 1.847, 2.15, 2.55, 3.48,
			3.45, 3.81, 1.71, 3.023, 2.167, 3.15, 1.36, 2.69, 2.375, 4.825, 3.54, 3.6,
			1.92, 3.66, 0.66, 3.062, 2.458, 3.555, 1.875, 2.875, 2.825, 3.12, 1.77,
			2.07, 3.51, 0.675, 1.958, 2.227, 1.8, 3.625, 2.375, 3.165, 1.875, 2.67,
			3.21, 2.16, 1.83, 2.4, 3.03, 2.7, 3.75, 2.55, 3.69, 1.875, 1.125, 3.15,
			3.15, 1.95, 1.917, 2.718, 1.125, 0.9, 2.34, 4.98, 4.29, 3.76, 0.5, 3.09,
			3.28, 1.43, 3.32, 2.82, 1.86, 1.725, 1.875, 3.42, 3.39, 4.95, 1.02, 3.15,
			5.4, 1.68, 2.7, 3.96, 2.97, 3.637, 2.333, 3.84, 3.63, 0.78, 0.36, 0.91,
			0.792, 3.356, 3.042, 1.84, 2.63, 3.16, 5.48, 1.29, 1.83, 1.449, 1.791,
			3.136, 2.833, 2.042, 3.028, 1.26, 2.708, 2.093, 4.47, 1.03, 3.08, 1.47,
			1.469, 1.981, 2.43, 4.852, 2.167, 2.701, 1.51, 1.459, 3.091, 2.25, 3.309,
			2.301, 2.549, 2.731, 2.61, 1.979, 1.711, 1.25, 0.5, 0.89, 4.96, 2.63,
			3.239, 5.58, 3.091, 0.722, 1.708, 2.58, 1.86, 3.66, 1.619, 2.851, 4.229,
			1.411, 2.22, 2.82, 1.559, 2.461, 4.14, 2.88, 7.98, 2.07, 2.04, 2.88, 1.62,
			1.919, 3.42, 3.0, 2.221, 2.609, 3.67, 4.281, 2.28, 4.439, 2.791, 2.31,
			2.97, 1.29, 3.66, 4.83, 3.03, 4.26, 1.89, 4.33, 2.63, 3.0, 2.91, 2.85,
			2.43, 2.16, 2.61, 2.22, 4.83, 4.8, 2.368, 2.792, 5.22, 2.76, 4.75, 4.248,
			2.042, 2.97, 2.73, 3.78, 4.08, 3.66, 4.185, 3.735, 3.21, 2.5, 3.47, 3.42,
			3.81, 2.01, 2.52, 4.62, 4.58, 3.57, 4.68, 1.18, 2.0, 1.66, 0.75, 3.02,
			3.167, 1.958, 2.595, 3.373, 2.167, 1.62, 3.09, 4.2, 3.6, 2.65, 1.38, 3.74,
			1.96, 1.833, 3.047, 1.212, 1.708, 2.167, 2.563, 3.202, 1.958, 3.36, 3.48,
			1.29, 3.33, 1.78, 3.72, 3.197, 2.583, 4.05, 2.968, 1.542, 4.43, 2.79,
			4.23, 2.73, 0.667, 4.383, 2.91, 3.42, 2.91, 2.61, 2.55, 2.56, 2.72, 1.0,
			1.43, 2.26, 1.13, 3.03, 1.74, 3.03, 2.55, 3.12, 2.79, 2.43, 3.21, 2.7,
			2.97, 2.4, 2.64, 2.37, 2.46, 2.52, 2.61, 2.76, 2.85, 3.81, 1.54, 2.63,
			2.76, 2.91, 3.39, 2.91, 3.06, 2.327, 0.583, 0.54, 1.11, 1.62, 3.35, 57.56
		],
		"transcript_en": [
			"[MUSIC PLAYING]",
			"",
			"DAVID MALAN: All right.",
			"This CS50 and this is week five.",
			"Recall that last week in week four, we introduced a few new building blocks,",
			"namely pointers and spoke in great detail",
			"about how you can now manipulate a computer's memory",
			"and begin to do things at a lower level with it.",
			"Well today, we'll sort of use those basic building blocks",
			"to start creating things called data structures in the computer's memory.",
			"It turns out that once you have this ability",
			"to refer to different locations in the computer's memory,",
			"you can stitch together your own custom shapes,",
			"your own custom data structures, as they're called.",
			"And indeed, we'll start doing that by rolling back",
			"for just a moment to where we first saw a data structure in week two.",
			"So recall in week two which was our second week of playing with C,",
			"we introduced you to the notion of an array.",
			"And an array is just a contiguous sequence of memory",
			"in which you can store a whole bunch of integers back to back to back,",
			"or maybe a whole bunch of chars back to back to back.",
			"And those arrays might have been represented pictorially like this.",
			"So this would be an array of size 3.",
			"And suppose that this were an array indeed of integers.",
			"We might have one, two, three inside of it.",
			"But suppose now-- and here's where we'll start to bump up against a problem,",
			"but also solve a problem today.",
			"Suppose that you want to add another number to this array,",
			"but you've only had the forethought to create an array of size 3.",
			"The catch with arrays in C is that they're not really easily resizable.",
			"Again, you all know that you have to decide in advance how big the array is",
			"going to be.",
			"So if you change your mind later or your program's",
			"running long enough where you need to store more values in it,",
			"you're in a bind.",
			"Like intuitively, if you wanted to insert the number 4 into this array,",
			"you would ideally just plop it right here at the end of the array",
			"and continue about your business.",
			"But the catch with an array is that that chunk of memory is not--",
			"it doesn't exist in a vacuum.",
			"Recall if we zoom out and look at all of your computer's memory,",
			"this byte, this byte and a whole bunch of other bytes",
			"might very well be in use by other variables",
			"or other aspects of your program.",
			"So for instance for the sake of discussion,",
			"suppose that the program in question has one array of size 3 containing",
			"the integers 1, 2 3.",
			"And then suppose that your same program has a string somewhere in the code",
			"that you've written and that string is storing hello, world.",
			"Well next to this array in memory just by chance,",
			"may very well be an H-E-L-L-O comma space W-O-R-L-D backslash 0.",
			"And there might be free memory, so to speak.",
			"Memory you could use that's filled with garbage values and garbage isn't bad.",
			"It just means that you don't know.",
			"You don't really care what values are or were there.",
			"So there is free space, so to speak.",
			"Each of these Oscars represents effectively free space",
			"with some garbage value there.",
			"Remnants, maybe, of some execution past.",
			"But the problem here is that you don't have room",
			"to plop this four right where you might want to put it.",
			"So what's the solution?",
			"If we have this array of size 3 containing three integers--",
			"1, 2 3-- but it's been painted into a corner whereby H-E-L-L and so forth are",
			"already immediately next to it, we can't just put the four there without",
			"sacrificing the H. And that doesn't really feel like a solution.",
			"So any thoughts on how we can solve this problem?",
			"Are we completely out of luck?",
			"Can you just not add a number to an array in a situation like this?",
			"Or is there a solution perhaps that comes to mind?",
			"Even if you've never programmed before, if on the screen there--",
			"the lay of the land.",
			"Santiago, what do you think?",
			"AUDIENCE: I would say that maybe you could",
			"copy the elements in the original array and create a new array,",
			"but that's one size bigger or one element bigger.",
			"And then, add that new element.",
			"DAVID MALAN: Yeah.",
			"That's really good intuition.",
			"After all, there's all these Oscars on the screen",
			"right now, which again represent garbage values.",
			"Or in turn, free space.",
			"So I could put 1, 2, 3, 4 up here.",
			"I could put 1, 2, 3, 4 over here.",
			"I could put 1, 2, 3, 4 down here.",
			"So we some flexibility, but Santiago is exactly right.",
			"Intuitively, all we really need to do is let's focus only",
			"on four of the available spots.",
			"A new array of size four, if you will, which initially",
			"has these four garbage values.",
			"But that's OK.",
			"Because as Santiago also notes, it suffices now",
			"to just copy the old array--",
			"1, 2, 3-- into the new array.",
			"And heck, maybe we can now even free the memory from the original array,",
			"much like we could if we used malloc.",
			"And that leaves us then, of course, with just an array of size",
			"4 with that fourth garbage value.",
			"But now, we do have room for, like the number 4 itself.",
			"So it would seem that there is a solution to this problem that doesn't",
			"violate the definition of an array.",
			"Again, the only definition of an array really",
			"is that the memory must be contiguous.",
			"You can't just plop the 4 anywhere in the computer's memory.",
			"It has to become right after your existing memory",
			"if this whole thing, this whole structure,",
			"is indeed going to still be an array.",
			"But I worry that might have cost us a bit of time.",
			"And in fact, let me go ahead and open up on the screen here",
			"in just a moment a question that you're all welcome to buzz in for.",
			"What would be the running time of inserting into an array?",
			"Let me go ahead and reveal the poll question here.",
			"Feel free to go to the usual URL.",
			"Which Brian, if you wouldn't mind copying and pasting as usual.",
			"What do you think the running time is of inserting into an array?",
			"Inserting into an array.",
			"Recall in the past, we talked about arrays in terms of searching.",
			"But today, this is the first time we're really",
			"talking about inserting into them.",
			"And if we take a look at the results coming in, it looks like 80% of you",
			"feel that it's linear time, big O of n, whereby",
			"it might take as many as n steps to actually insert into an array.",
			"5% of you propose n log n.",
			"7% of you, n squared.",
			"And then, 2% and 5% respectively for the other values as well.",
			"So this is kind of an interesting mix because when",
			"we talked about arrays in the past and we talked about searching,",
			"recall that we typically achieve big O of log n.",
			"That's really good.",
			"Unfortunately if we have to do with Santiago proposed",
			"and actually copy all of the elements from the old array into the new array,",
			"it's going to take us as many as n steps because we have",
			"to copy each of the original elements--",
			"1, 2, 3-- over into the new array, which is going to be of size n plus 1.",
			"So it's on the order of n steps in total.",
			"So the running time then of inserting into an array, in terms",
			"of an upper bound at least, is going to be indeed big O of n",
			"because you've got a copy potentially all of those elements over.",
			"But perhaps, we might feel differently if we consider a lower",
			"bound on the running time of insert.",
			"What might the lower bound of insert be when it comes to an array?",
			"Again, omega notation is what we can use here.",
			"How many steps maybe in the best case might it",
			"take me to insert a value into an array?",
			"We won't do a poll for this one.",
			"Brian, why don't we go ahead and call on a hand for this.",
			"What's a lower bound on the running time of insert?",
			"Ryan, what do you think?",
			"AUDIENCE: Well, the best case scenario would",
			"be if there's only one element in the array.",
			"So you would just have a one or it would just",
			"be one element right into the array.",
			"DAVID MALAN: Yeah, so if you've got an array--",
			"and let me emphasize that's already empty--",
			"whereby you have room for the new element, then indeed.",
			"Omega of 1, constant time, is all you need so long as you",
			"have space available in the array.",
			"And it doesn't matter how large the array is.",
			"Maybe it's a size 4, but you've only put one number in it.",
			"That's OK because you can immediately put the new number in place.",
			"Recall that array support random access.",
			"You can use the square bracket notation and just",
			"jump to any location in so-called constant time in just one step.",
			"So if your array is of sufficient size and it's not full, then yes.",
			"The lower bound on the insertion into an array",
			"is going to be constant time, omega of 1.",
			"But as we saw in Santiago's situation whereby",
			"you have an array that's already filled with elements",
			"and you want to add another, well in that case,",
			"then upper bound is indeed going to be big O of n",
			"because you have to do the additional labor of copying the values over",
			"from one to the other.",
			"Now those of you have programmed before, maybe you've use Java.",
			"You might be familiar with the phrase vector.",
			"A vector is like an array that can be resized, can grow and shrink.",
			"That's not what arrays in C. Arrays in C are just contiguous blocks of memory",
			"with values back to back to back.",
			"But once you decide on their size, that is it.",
			"You're going to have to resize it, essentially yourself.",
			"They're not going to automatically grow for you.",
			"So an array was the first and really the simplest of the data",
			"structures we'll see.",
			"But it's also not nearly as powerful as what",
			"we can do now that we have access to a computers memory.",
			"Today, we're going to start to leverage these things called",
			"pointers, the addresses via which we can refer to locations in memory.",
			"And we're going to start to stitch together some fancier data structures--",
			"first, one dimensional in some sense.",
			"Then, two dimensional in some sense-- by using some very basic building blocks.",
			"Recall these three pieces of syntax from the past weeks.",
			"Struct, recall, is this mechanism, this keyword in C,",
			"whereby we can define our own structures in memory.",
			"We saw one for a person whereby a person might have both a name and a number",
			"in something like a phone book.",
			"And you've seen the dot operator The dot operator was",
			"how we go inside of such a structure and get at dot name or dot number.",
			"The specific variables inside of the struct.",
			"And then last week, recall we saw the star operator",
			"whereby the dereference operator, which colloquially means",
			"go to this particular address.",
			"So just by using these three ingredients are",
			"we going to be able to now build up our own custom data structures",
			"that are even fancier than arrays and can ultimately help us solve problems",
			"more efficiently.",
			"And in fact, this is such a common technique in programming in C",
			"that these two operators, the dot and the star,",
			"are often combined into one that intentionally looks like an arrow.",
			"So we'll see its usage in just a little bit.",
			"So syntactically today, it's pretty much building blocks",
			"past but we're going to use these building blocks now in new ways",
			"to start solving problems differently.",
			"And we'll first do this by way of something called linked lists.",
			"So for instance, a linked list is going to be a data structure that solves",
			"some of the problems with an array.",
			"And what's a problem arguably?",
			"Well if it takes big O of n steps to insert into an array,",
			"frankly that's kind of annoying.",
			"That's kind of expensive.",
			"Because over time if you're writing a really big program with lots of data--",
			"you're the Googles of the world, the Twitters of the world-- it's fine",
			"if you want to store all of your data in a big array",
			"for the sake of efficient searching.",
			"Which recall, was big O of log n if we use something like binary search",
			"and keep everything sorted.",
			"But it's going to be pretty painful if every time you",
			"want to add another tweet to the array, or some other web page to the array.",
			"Depending on what the problem is that you're solving,",
			"you might potentially-- as Santiago notes--",
			"have to copy all of the contents of your original smaller array",
			"into a new bigger array just to add more tweets or more web pages or the like.",
			"So a linked list is going to be a data structure that's",
			"more dynamic, whereby you can grow and shrink the data",
			"structure without having to touch all of the original data",
			"and move it from old location to new.",
			"So what might this look like?",
			"Well let's consider again our computers memory",
			"and let's propose that I want to store those same values again.",
			"So like the number one-- and just for the sake of discussion,",
			"suppose that it's in my computer's memory at address 0x123.",
			"0x just means it's a hexadecimal number.",
			"1-2-3- is completely arbitrary.",
			"I made it up just for the sake of discussion.",
			"So let me stipulate that that's where the number 1 happens",
			"to be in the computer's memory in this new solution",
			"to the problem of storing lots of data.",
			"Suppose I want to store number 2.",
			"Maybe it's at address 0x456.",
			"And then, suppose I want to store number 3.",
			"Suppose it's at address 0x789.",
			"So notice deliberately, these numbers are spread out",
			"in the computer's memory.",
			"Because after all, the problem we ran into a moment ago with arrays",
			"is that you might have hello, world or other values from other parts",
			"of your program in the way.",
			"So if I'm proposing instead that if you want",
			"to store one, and then two, and then three, that's fine.",
			"Plop them anywhere you want and you don't",
			"have to worry about where there is already existing values.",
			"Instead, you can just put these values where there is room.",
			"The problem, though, is that if you just start plopping values like one, two,",
			"three anywhere you want in the computer's memory,",
			"you can no longer very easily find those values, right?",
			"You might know where one is, but it no longer",
			"suffices to just look one location to the right to find the next value",
			"or add two find the next value after that.",
			"In an array, everything is contiguous.",
			"But if we instead start to treat the computer's memory",
			"as just a canvas where we can just draw numbers anywhere",
			"we want, that's fine so long as we can somehow",
			"help ourselves get from the first, to the second,",
			"to the third irrespective of all the other stuff that's",
			"cluttering up the computer's memory.",
			"So in fact, let me propose that we do this by maybe stealing",
			"a bit more space from the computer.",
			"So rather than use just enough memory to store one, two, and three,",
			"let me store twice as much information.",
			"In addition to every number that I actually care about-- one, two, three,",
			"my data--",
			"let me store a little metadata, so to speak.",
			"The values that I don't fundamentally care about,",
			"but that are going to help me keep track of my actual data.",
			"And let me propose that in this box here,",
			"I literally store the value 0x456.",
			"Again, it's written in hexadecimal, but that's just the number.",
			"That's the address of somewhere else in memory.",
			"In this box, let me propose that I store 0x789.",
			"And in this box, let me arbitrarily say 0x0, which is just all zero bits.",
			"Now why have I done this?",
			"Even if you've never seen this structure that's",
			"evolving to be what's called a linked list,",
			"why have I just done what I've done?",
			"In addition to storing one, two, and three respectively,",
			"I'm also now storing 0x456 and an additional chunk of memory and 0x789",
			"and an additional chunk of memory.",
			"But why?",
			"Sofia.",
			"AUDIENCE: So that we know how the first element relates to the second",
			"or how they're linked together.",
			"DAVID MALAN: That's exactly--",
			"AUDIENCE: --between the first and second.",
			"DAVID MALAN: Yeah.",
			"So now, I'm using essentially twice as much space to store each piece of data.",
			"One, two, and three respectively.",
			"But in the second chunk of space, I'm now",
			"storing a pointer to the next element in the thing I'll now think of as a list.",
			"So this is 0x456 because the number two, which",
			"is the next number in the list I care about, lives at 0x456.",
			"This number is 0x789 because the next number after that I care about",
			"is at address 0x789.",
			"So it's just a helpful way now of leaving",
			"myself breadcrumbs so that I can plop the one, the two, the three anywhere",
			"I want in the computer's memory wherever there's available space",
			"and still figure out how to get from one to the other to the other.",
			"And we've actually seen some of this syntax before.",
			"It turns out that 0x0, which is all zero bits, that's just the technical--",
			"that's the numeric equivalent of what we've called null.",
			"N-U-L-L, which we introduced last week, is a special symbol indicating that",
			"something has gone wrong with memory or you're out of space.",
			"It's sort of the absence of an address.",
			"C guarantees that if you use 0x0, AKA null,",
			"that just indicates the absence of any useful address there.",
			"But you know what?",
			"Again like last week, this is of getting way into the weeds.",
			"I don't really care about 0x123456789.",
			"So let's just kind of abstract this away and start thinking about this really",
			"as a list of numbers that are somehow linked together.",
			"Underneath the hood, the links are implemented by way of addresses,",
			"or pointers, those low level numbers like 0x123456789.",
			"But pictorially, it suffices for us to just start",
			"thinking of this data structure, hereafter known as a linked list,",
			"as being a collection of nodes, so to speak--",
			"N-O-D-E-- that are connected via pointers.",
			"So a node is just a generic computer science",
			"term that refers to some kind of structure",
			"that store stuff you care about.",
			"What I care about here is a number and a pointer to another such structure.",
			"So this is a linked list and each of these rectangles represents a node.",
			"And in code, we'll implement those nodes ultimately",
			"by way of that thing in C called a struct.",
			"But let me pause here to see first if there",
			"are any questions about the structure we have built up.",
			"Any questions about this thing called a linked list",
			"before we see it in some code?",
			"Brian?",
			"BRIAN: Yeah, a question came in in the chat asking,",
			"isn't this kind of a waste of memory that we're now using all of these cells",
			"to store addresses too?",
			"DAVID MALAN: Yeah, really good observation.",
			"Isn't this kind of a waste of memory in that we're",
			"storing all of these addresses in addition",
			"to the numbers 1, 2, 3 that we care about?",
			"Yes, and in fact, that is exactly the price we are paying,",
			"and this is going to be thematic.",
			"This week, last week and really every week thereafter,",
			"any time we solve a problem in CS and programming in particular,",
			"there's always going to be some price paid.",
			"There's going to be some cost and really, there's",
			"going to be some trade-off.",
			"So if a moment ago, it was unacceptable that inserting into an array",
			"is in big O of n because man, that's going to take so many steps to copy all",
			"of the values from the old array into the new array,",
			"if that is unacceptable to you for performance reasons",
			"or whatever the problem is that you're solving, well, that's fine.",
			"You can solve that problem and now have much more dynamism",
			"whereby you can plop your numbers anywhere in memory",
			"without having to move the existing numbers anywhere else, thereby saving",
			"yourself time, but the price you're going to pay indeed is more space.",
			"So at that point, it kind of depends what's",
			"more important to you, the computer's time,",
			"your human time, or maybe the space or the cost of the space, the more memory",
			"that you might really need to literally buy for that computer.",
			"So this is going to be thematic.",
			"This trade-off between space and time is omnipresent, really, in programming.",
			"Well, let's consider how we might translate this now into actual code.",
			"Recall that when we last saw structs in C,",
			"we did something like this to define a person as having two things associated",
			"with them, a name and a number.",
			"So today, we don't care about persons and names and numbers.",
			"We care about these things we're going to start calling nodes,",
			"so let me go ahead and rewind from that.",
			"Erase that and let's instead say that every node in this structure,",
			"renaming person as well to node, is going",
			"to have a number, which will be an int in our case here,",
			"and I've left room for one other value because we ultimately",
			"need to be able to store that second piece of data.",
			"That second piece of data is going to be a pointer.",
			"It's going to be an address of something, but how might",
			"I express this?",
			"This is going to be a little less obvious",
			"but we laid the foundation last week with pointers.",
			"How could I describe this structure as having",
			"a pointer to another such structure?",
			"Any thoughts on verbally the syntax to use,",
			"or even if you're not sure of exactly the incantation, exactly what symbols",
			"we should use to express and address to another such node?",
			"BRIAN: Someone is suggesting we use a node * as a pointer to a node.",
			"DAVID MALAN: Node *?",
			"All right.",
			"So * I definitely remember from last week,",
			"indicating that if you have int *, this is the address of an int.",
			"If you have char *, this is the address of a char.",
			"So if all of these arrows really just represent addresses of nodes,",
			"it stands to reason that syntax is probably",
			"going to be something akin to node *.",
			"Now I can call this pointer anything I want.",
			"By convention, I'll call it next.",
			"Because literally, its purpose in life is",
			"to point to the next node in the data structure.",
			"And that's going to be in addition to the int called number that I'll propose",
			"describes the top of that individual data structure.",
			"But there's a subtle problem here in C. Recall",
			"that in C, it's kind of a simplistic language, complicated",
			"though it might often seem, in that it doesn't understand anything",
			"that it hasn't seen before.",
			"So at the moment, notice that the very first time",
			"I have mentioned node up until now was on the very",
			"last line of this snippet of code.",
			"The problem is that by nature of how typedef works,",
			"the thing called a node does not actually",
			"exist until the compiler is done reading that last line of code",
			"and the semicolon, which is to say that it would actually",
			"be incorrect to use or refer to quote, unquote",
			"\"node\" inside of this structure.",
			"Because literally, by definition of how typedef works,",
			"a node does not exist until, again, that last line of code and the semicolon",
			"are executed.",
			"Thankfully, there's a workaround.",
			"It's a little weird to look at.",
			"But what you can do in C is this.",
			"You can actually add an additional word after, literally, the keyword struct.",
			"And we'll keep it simple.",
			"We'll use the exact same word, though technically that's not necessary.",
			"And now, I'm going to change the inside of the structure to say this instead.",
			"So it feels a little verbose.",
			"And it feels a little bit of copy paste.",
			"But this is the way it is done in C. Typedef struct node is essentially",
			"a hint, similar in spirit to the prototypes",
			"we've talked about for functions that gives the compiler a clue that,",
			"OK, something called a struct node is going to exist.",
			"You can then use it inside of that data structure",
			"and refer to it as struct node *.",
			"It's more of a mouthful this week.",
			"We've not seen multiple words like this.",
			"But it's similar to char * or int *, like last week.",
			"And I'm going to call that arbitrarily next.",
			"And down here, the same thing happens as in the past with persons.",
			"By calling this node at the very last line of the code, that",
			"just tells the compiler, you know what?",
			"You don't have to refer to it as struct node all over the place.",
			"You can just call this thing node.",
			"So it's a little verbose in this case.",
			"But all this is done is create for me, in the computer,",
			"the definition of a node as we have depicted it pictorially",
			"with that rectangle.",
			"All right, so how can we now translate this into more useful code, not",
			"just defining what these structures are, but how",
			"do we begin building up linked lists?",
			"Well, let me propose that a linked list really begins with just a pointer.",
			"And in fact, here we have, thanks to the theatre's prop shop,",
			"just kind of a null pointer, if you will.",
			"I'm going to call this variable \"list.\"",
			"And list is currently pointing to nothing.",
			"The arrow, we'll say, is just pointing at the floor, which means it's null.",
			"It's not actually pointing at anything useful.",
			"Suppose I now want to start to begin to allocate a linked",
			"list with three numbers, 1, 2, and 3.",
			"Well, how am I going to do this?",
			"Well, at the moment, the only thing that exists in my program",
			"is going to be this variable called list.",
			"There's no array in this story.",
			"That was in Week 2.",
			"Today is all about linked lists.",
			"So how do I get myself a wooden block that",
			"represents 1, another wooden block that represents 2,",
			"and a third that represents 3?",
			"Well, we need to use our new friend from last week, malloc.",
			"Recall that malloc allows you to allocate memory,",
			"as much memory as you might want, so long as you tell it",
			"the size of that thing.",
			"So frankly, I think what we could do ultimately today",
			"is use malloc to allocate dynamically one struct and put the number 1 in it,",
			"another struct put the number 2 on it, another struct put the number 3 in it.",
			"And then, use these playful arrows here to actually stitch them together,",
			"having one point to the other.",
			"So thankfully, the prop shop has wonderfully",
			"created a whole bunch of these for us.",
			"Let me go ahead and malloc a very heavy node that has room for two values.",
			"And you'll see it has room for a number and a next pointer.",
			"So the number I'm going to first install here",
			"is going to be the number 1, for instance.",
			"And I'm going to leave its pointer as just pointing at the ground,",
			"indicating that this is a null pointer.",
			"It's not actually pointing at anything else.",
			"But now that I'm starting to instantiate,",
			"that is create this list, now I'm going to do something like this",
			"and say that, all right, my variable called \"list,\" whose purpose in life",
			"is to keep track of where this list is in memory,",
			"I'm going to connect one to the other by actually having",
			"this variable point at this node.",
			"When it comes time, then, to allocate another node,",
			"I want to insert into this linked list.",
			"Back in the world of arrays, I might have to allocate a new chunk of memory,",
			"copy this value over into the new values.",
			"I don't have to do that.",
			"In the world of linked lists, I just call malloc for a second time",
			"and say, give me another chunk of memory big enough to fit a node.",
			"Thankfully, from the prop shop, we have another one of these.",
			"Let me go ahead and malloc another node here.",
			"At the moment, there's nothing in it.",
			"It's just the placeholder.",
			"So it's garbage values, if you will.",
			"I don't know what's there until I actually",
			"say that the number shall be number 2.",
			"And then I go over to my linked list whose variable name is \"list,\"",
			"and I want to insert this thing.",
			"So I follow the arrow.",
			"I then point the next field of this node at this node here.",
			"So now I have a linked list of size 2.",
			"There's three things in the picture, but this is just a simple variable.",
			"This is a pointer that's pointing at the actual node which, in turn, is",
			"pointing at an actual other node.",
			"Now suppose I want to insert the number 3 into this linked list.",
			"Recall that malloc is powerful and that it",
			"takes memory from wherever it's available,",
			"the so-called \"heap\" from your computer.",
			"And that means, by definition, that it might not be contiguous.",
			"The next number might not actually be here metaphorically",
			"in the computer's memory.",
			"It might be way over there.",
			"So that might indeed happen.",
			"The third time I call malloc now and allocate a third node,",
			"it might not be available anywhere in the computer's memory except for,",
			"like, way over here.",
			"And that's fine.",
			"It doesn't have to be contiguous as it did in the world of our arrays.",
			"I can now put the number 3 in its place.",
			"But if I want to keep a pointer to that node, so that all of these things",
			"are stitched together, I can start at the beginning.",
			"I follow the arrows.",
			"I follow the arrows.",
			"And now, if I want to remember where that one is,",
			"I'm going to have to connect these things.",
			"And so now, that pointer needs to point at this block here.",
			"And this visual is very much deliberate.",
			"These nodes can be anywhere in the computer's memory.",
			"They're not necessarily going to be contiguous.",
			"The downside of that is that you cannot rely on binary search,",
			"our friend from Week 0 onward.",
			"Binary search was amazing in that it's Big O of log n.",
			"You can find stuff way faster than Big O of n.",
			"That was the whole point of even the phonebook",
			"example in the very first week.",
			"But the upside of this approach is that you",
			"don't have to actually keep allocating and copying more memory",
			"and all of your values any time you want to resize this thing.",
			"And I'm a little embarrassed to admit that I'm out of breath for some reason,",
			"just mallocing nodes here.",
			"But the point is using malloc and building out",
			"the structure does come at some price.",
			"It's exhausting, frankly.",
			"But it's also going to spread things out in memory.",
			"But you have this dynamism.",
			"And honestly, if you are the Twitters of the world, the Googles",
			"of the world, where you have lots and lots of data,",
			"it's going to kill you performance wise to have to copy all of your data",
			"from one location into another as Santiago originally",
			"proposed as a solution to the array.",
			"So using these dynamic data structures, like a linked list, where",
			"you allocate more space wherever it's available,",
			"and you somehow remember where that is by stitching [? team ?] things",
			"together, as with these physical pointers,",
			"is really the state of the art in how you",
			"can create these more dynamic structures if it's more important to you",
			"to have that dynamism.",
			"All right, any questions before we now translate these physical blocks",
			"to some samples of code?",
			"BRIAN: A question came in in the chat.",
			"When in this whole process of linked lists are we actually using malloc?",
			"And what is malloc being used for?",
			"DAVID MALAN: Really good question.",
			"So where are we using malloc?",
			"Every time I went off stage and grabbed one",
			"of these big blocks, that was my acting out the process of mallocing a node.",
			"So when you call malloc, that returns to you,",
			"per last week, the address of the first byte of a chunk of memory.",
			"And if you call malloc of one, that gives you the address of one byte.",
			"If you call malloc of 100, that gives you the first address",
			"of 100 bytes that are contiguous.",
			"So each of these nodes, then, represents the return value, if you will,",
			"of a single call to malloc.",
			"And in fact, perhaps, Brian, the best way",
			"to answer that question in more detail is to translate this now",
			"to some actual code.",
			"So let's do that now and then revisit.",
			"So here is, for instance, a line of code that",
			"represents the beginning of our story, where we only",
			"had a variable called \"list\" that was initialized to nothing initially.",
			"This arrow was not pointing at anything.",
			"And in fact, if it was just pointing up, down, left,",
			"or right, it would be considered a garbage value.",
			"This is just memory, which means there are values inside of it",
			"before I actually put actual values in it.",
			"So if I don't assign it a value, who knows what it's pointing to?",
			"But let me go ahead and change the code.",
			"This list variable, by default, has some garbage value unless I initialize it",
			"to something like null.",
			"So I'll represent that here figuratively by just pointing at the ground.",
			"That now represents null.",
			"This would be the corresponding line of code that just",
			"creates for you an empty linked list.",
			"That was the beginning of the story.",
			"Now recall that the next thing I did was I went off stage",
			"and I called malloc to bring back one of these big boxes.",
			"That code might instead look like this.",
			"Node *n.",
			"So I could call the variable anything I want, malloc, size of node.",
			"So size of we might have seen briefly in that it's just",
			"an operator in C that tells you how many bytes large any data type is.",
			"So I could do the math and figure out in my Mac or PC or CS50 IDE just how",
			"many bytes these nodes are supposed to take up.",
			"Size of just answers that question for me.",
			"So malloc, again, takes one argument, the number",
			"of bytes you want to allocate dynamically,",
			"and it returns to the address of the first of those bytes.",
			"So if you think of this as one of my earlier slides in yellow,",
			"it returns to you, like, the address of the top",
			"left byte of this chunk of memory, if you will.",
			"And I'm going to go ahead and assign that to a variable",
			"I'll call n to represent a node.",
			"And its node * because, again, malloc returns always an address.",
			"And the syntax we saw last week for storing addresses",
			"is to use this new * syntax here.",
			"So this gave me a block that initially just had garbage values.",
			"So there was no number in place and who knows where the arrow was pointing at?",
			"So it looked a little something like this, if I draw it now on the screen.",
			"List is initialized to null.",
			"It's not pointing at anything right now.",
			"But n, the variable I just declared, is pointing at a node.",
			"But inside of that node, or who knows what?",
			"It's garbage values.",
			"Number and next are just garbage values.",
			"Because that's what's there by default, remnants of the past.",
			"But now, let me propose that we do this code.",
			"So long as n is not null--",
			"which is something you want to get into the habit always now of checking,",
			"any time in C, when you call a function that returns to you a pointer,",
			"you should almost always check is it null or is it not null.",
			"Because you do not want to try touching it if it is indeed null.",
			"Because that means there is no valid address here.",
			"That's the human convention when using pointers.",
			"But if n does not equal null, that's a good thing.",
			"That means it's a valid address somewhere in the computer's memory.",
			"Let me go ahead now and go to that address, the syntax for which is *n,",
			"just like last week.",
			"And then the operator means go inside of the structure that's there",
			"and go into the variable inside of it, called number in this case.",
			"So when I go ahead and do something like this,",
			"when I have a list that's initially of size 1,",
			"where this variable is pointing at the one and only node at the moment,",
			"it's going to have the number 1 in it as soon as I execute this line of code.",
			"*n means start at the address embodied here, go to it,",
			"and then put the number, 1 in this case, in place.",
			"But I need to do one other thing as well.",
			"I want to go ahead, too, and replace the garbage",
			"value that represents the next pointer in that structure",
			"and replace it with null.",
			"Null [INAUDIBLE] find that this is the end of the list.",
			"There's nothing there.",
			"I don't want it to be garbage value.",
			"Because a garbage value is an arbitrary number",
			"that could be pointing this way, this way, this way.",
			"Metaphorically, I want to actually change that to be null",
			"and so I can use the same syntax.",
			"But there's this clever approach now.",
			"I don't have to use star and then dot over the place, as mentioned earlier.",
			"Star and dot comes with some syntactic sugar.",
			"You can replace the star and the parentheses and the dot",
			"that we just saw with an arrow notation, which means follow the arrow.",
			"And then set this thing equal to null, which",
			"I'll represent again by just having the arrow literally points",
			"at the floor for clarity.",
			"So, again, rewinding from where we started, *n.number,",
			"with the first of those in parentheses, is the same thing as this.",
			"And the reason that most people prefer using the arrow notation, so to speak,",
			"is that it really does capture this physicality.",
			"You start at the address, you go there, and then",
			"you look at the field, number or next, respectively.",
			"But it's equivalent to the syntax we saw a moment ago with the start and the dot",
			"as before.",
			"So after these two steps, have we initialized",
			"this node to containing the number 1 and null inside of it.",
			"But what comes next?",
			"What comes next?",
			"Well, at point in the story, in this code,",
			"I have some other variable here that's not pictured.",
			"Because we're now transitioning from the world of woodwork to actual code.",
			"So there's another variable n, which I might as well be representing myself.",
			"If I am this temporary variable n, I, too, am pointing at this value.",
			"It's not until I actually execute this line of code, list = n;,",
			"that I remember where this node is in the computer's memory.",
			"So n, up until now, has really just been a temporary variable.",
			"It's a variable that I can use to actually keep",
			"track of this thing in memory.",
			"But if I want to add this node ultimately to my linked list,",
			"list started out as null, recall that this pointer was pointing",
			"at the ground, representing null.",
			"But when I now want to remember that this linked list has a node in it,",
			"I need to actually execute a line of code like this, list = null.",
			"All right, what did we next do?",
			"Let's take one more step further.",
			"So at this point in the story, if I was representing n,",
			"I'm also pointing at the same block. n is temporary,",
			"so it can eventually go away.",
			"But at this point in the story, we have a linked list of size 1.",
			"Let's go ahead and take this further.",
			"Suppose now I execute these lines of code.",
			"And we'll do it a little faster and all at once so",
			"that you can see it more in context.",
			"The first line of code is the same as before.",
			"Hey, malloc, give me a chunk of memory that's",
			"big enough for the size of a node.",
			"And, again, let's use this temporary variable n to point to that.",
			"And suppose that means that I, if I'm representing this temporary variable,",
			"I'm pointing at this new chunk of memory here.",
			"I then check, if n does not equal null, then",
			"and only then do I go ahead and install the number",
			"2 as I did physically earlier and do I initialize the pointer originally",
			"to pointing not at some other node which doesn't yet exist, but pointing at,",
			"let's just call it the floor, thereby representing null.",
			"And that's it.",
			"That has now allocated the second node.",
			"But notice, literally, this disconnect.",
			"Just because I've allocated a new node and put",
			"the number I care about and initialized its next pointer to null,",
			"that doesn't mean it's part of the data structure.",
			"The linked list is still missing a pointer from old to new.",
			"So we need to execute one other line of code",
			"now so that we can get from this picture ultimately to the final one.",
			"And here's where we can use the same kind of syntax as before.",
			"If I start at my list variable, I follow the arrow as per that code.",
			"And then I update the next field to point",
			"to n, which is my newly allocated node.",
			"Now, after that final line of code, do I have a linked list of size 2.",
			"Because I've not only allocated the node, initialized its two",
			"variables, a number and next respectively,",
			"I've also chained it together with the existing node on the linked list.",
			"And let me do this one even slightly more quickly,",
			"only because it's the same thing, just so we can see it all together at once.",
			"Now that we have this picture, let's execute the same kind of code again.",
			"The only difference in this chunk of code",
			"is that I'm initializing number to 3.",
			"So what has this done for me?",
			"That chunk of code has malloced a third and final node.",
			"I've initialized the top to the number 3.",
			"I've initialized the bottom to null, as I'll",
			"represent by just pointing the arrow at the ground.",
			"There's one final step, then.",
			"If I want to go ahead and insert that third node into this linked list,",
			"I've got to go ahead now and not just point it at myself,",
			"me representing, again, the temporary variable n, I need to now do this.",
			"And this is syntax you won't do often.",
			"We'll see it in an actual program in just a moment.",
			"But it just speaks to the basic building blocks we're manipulating.",
			"If I want to go ahead and link the 2 to the 3, I can start here at list.",
			"I can follow the arrow once.",
			"I can follow the arrow again.",
			"And then I can set that next field equal to n.",
			"Because, again, n is the current address of that most recently allocated node.",
			"So even though the syntax is getting a little new, the two arrows I'm using",
			"are literally just like a code manifestation of just",
			"follow the pointer, follow the pointer, boom, assign one value to the next.",
			"All right, so at this point in the story, the picture now looks like this.",
			"So long as I, n, am still in the picture.",
			"But if I just get rid of myself, because I'm",
			"a temporary variable, voila, we've just built up, step by step,",
			"a brand new linked list of size 3.",
			"Seems like a lot of work, but it allows us to now grow this thing dynamically.",
			"But let me pause here.",
			"Any questions or confusion on linked lists?",
			"Any questions or confusions on linked lists?",
			"BRIAN: One question just came in the chat.",
			"If we're trying to make a list that's going to be much longer, like,",
			"more than three elements, wouldn't it get tedius to have,",
			"like, arrow next, arrow next over and over again?",
			"DAVID MALAN: Yeah.",
			"Really good observation.",
			"And so that's why I said, you won't usually write it like this.",
			"We'll do it temporarily in a full-fledged program in just a moment",
			"just to demonstrate it.",
			"But in general, you'll probably use something like a loop.",
			"And what you'll do is use a temporary variable that points at this one,",
			"then iterates again, then iterates again.",
			"And let me stipulate for now that if you use a loop in the right way,",
			"you can end up writing just a single arrow by just",
			"keep updating the variable again and again.",
			"So there is a way to avoid that.",
			"And you do it much more dynamically.",
			"Let me go ahead then and ask you a question of my own here.",
			"Let me go ahead and ask this one.",
			"If you'd like to buzz in to this question,",
			"what is the running time of searching a linked list?",
			"What's the running time of searching a linked list in Big O notation?",
			"So what's an upper bound, worst case of searching",
			"a linked list like this one, whether it has three elements or even many more?",
			"So it looks like, as before, about 80% of the group",
			"is proposing that it's Big O of n.",
			"And this is actually correct.",
			"Because consider the worst case.",
			"Suppose you're looking for the number 3, you're",
			"going to have to look at all three numbers, Big O of n.",
			"If you're looking for the number 10, you're",
			"going to start here at the beginning, you're",
			"going to keep looking, looking, looking, looking.",
			"You're going to get to the end realize, oh, the number 10 is not even here.",
			"At which point, you've already looked at n elements.",
			"But here's one of the trade, again, of linked lists.",
			"With arrays, you could jump to the end of the list in constant time.",
			"You could just use a little bit of arithmetic.",
			"You could jump to the middle elements, or the first element,",
			"all using constant time.",
			"A linked list, unfortunately, is represented ultimately",
			"by just a single address, the address that points to the very first node.",
			"And so even though you all on camera can see this node and this node",
			"and this one as humans all at once, the computer",
			"can only follow these breadcrumbs.",
			"And so searching a linked list is going to be Big O of n in that case.",
			"But let me ask a follow up question.",
			"What's the running time of inserting into a linked list?",
			"What's the running time of inserting into a linked list?",
			"So you've got some new number like the number 4 or 0 or 100 or negative 5,",
			"whatever it may be.",
			"There's going to be a malloc involved, but that's constant time.",
			"It's just one function call.",
			"But you're going to have to insert it somewhere.",
			"And here it looks like 68% of you are proposing Big O of 1,",
			"which is interesting, constant time.",
			"25% of you are proposing Big O of n.",
			"Would anyone be comfortable chiming in verbally or on the chat",
			"as to why you feel it's one or the other?",
			"It is indeed one of those answers.",
			"AUDIENCE: It could be O of n.",
			"Because of the fact that even though you're",
			"using malloc to create a new node, essentially,",
			"I think all the computer's doing when you assign it is [? going-- ?]",
			"as you cite those arrows, like we're going from one arrow to the next",
			"to the next to the next.",
			"And I would think it would be O of n.",
			"DAVID MALAN: It is O of n as you described it.",
			"But you, too, are making an assumption, like 25% of other people are making.",
			"You seem to be assuming that if a new number, suppose it's number 4,",
			"has to go at the end.",
			"Or if it's the number 5, it has to go at the end.",
			"And I kind of deliberately set things up that way.",
			"I've happened to maintain them in sorted order, 1, 2, 3, from left to right.",
			"But up until now, I have not made the condition",
			"that the linked list has to be sorted, even",
			"though the examples we've seen thus far are deliberately that way.",
			"But you know what, if you want to get fancy and a little more efficient,",
			"and you want to allocate the number 4, and frankly, you don't really",
			"care about keeping the linked list in sorted order,",
			"well, heck, just pull this out, put your new node here.",
			"Plug it in here.",
			"Plug the other one back in here.",
			"And just insert the new element at the beginning of the list.",
			"And for every number thereafter, malloc as before.",
			"But just keep inserting it here, inserting it here, inserting it here.",
			"Now it's not going to take a single step.",
			"Because as I verbalized it, there's, like, the malloc step.",
			"I have to unplug this.",
			"I have to plug it back in.",
			"So it's like three or four steps total.",
			"But four steps is also constant.",
			"That's big O of 1, because it's a fixed number of steps.",
			"So if you're able to sacrifice sorted order when it comes to this list,",
			"you can in constant time insert, insert, insert, insert.",
			"And the list is going to get longer and longer, but from the beginning of it",
			"rather than the end.",
			"So that's always a trade off.",
			"If you don't care about sorted order, and none of your algorithms or code",
			"require that it be sorted, then you can go ahead and cut that corner",
			"and achieve constant time insert, which if you're",
			"a Twitter or Google or the like, maybe that's actually",
			"a net savings and a good thing.",
			"But, again, you sacrifice the sorted order in that case.",
			"Well, let's go ahead, I think.",
			"And let's translate this to some actual code.",
			"Let me go ahead here in CS50 IDE.",
			"And let's go ahead and write a couple of variants",
			"of a program that now actually do something with numbers",
			"and start to manipulate things in memory.",
			"So I'm going to go ahead here and create a program called list.c.",
			"And my first version is going to be very simplistic.",
			"I'm going to go ahead and include stdio.",
			"Give myself an int main(void).",
			"And then inside of here, let me go ahead, like we began,",
			"and give myself a list of integers of size 3.",
			"So this is going to be an array that's of size 3.",
			"And this array of size 3, I'm going to go ahead and hard",
			"code some new values into it.",
			"So at the very first location, I'll put the number 1.",
			"At the second location, I will put the number 2.",
			"At the third location, I will put the number 3.",
			"And then, just to demonstrate that this is working as I think I intend,",
			"I'm going to do a quick for loop.",
			"So for int i get 0, i less than 3, i++.",
			"And then, inside this loop, I'm going to go ahead and print out %i.",
			"And then I'm going to print out the value of i.",
			"So now that I've printed out all of these values in my loop, let",
			"me go ahead and do make list.",
			"Let me go ahead then and do ./list and hit Enter.",
			"And indeed, I get-- oops, not what I wanted.",
			"So good teachable moment, not intended, admittedly.",
			"But what have I done wrong here?",
			"My goal is we print out the list.",
			"But somehow, I printed out 0, 1, 2.",
			"And those are indeed not the numbers in this list.",
			"[? Greg? ?]",
			"AUDIENCE: So you printed i.",
			"You should have printed list of i.",
			"DAVID MALAN: Yes.",
			"So I should have printed the contents of the array, which is list[i].",
			"So that was just a newbie mistake by me here.",
			"So let me fix that.",
			"Let me go ahead and recompile make list, ./list., and voila.",
			"I've now printed the list.",
			"So this is sort of Week 2 stuff, when we first introduced arrays in Week 2.",
			"But now let me go ahead and transition now to something more dynamic.",
			"Where I don't have to commit in advance to creating an array,",
			"I can do this with a dynamically allocated chunk of memory.",
			"So let me delete everything I've done inside of main.",
			"And let me go ahead and give myself this.",
			"Let me go ahead and declare a list of values",
			"where list is now going to be an address as per the star operator.",
			"And I'm going to go ahead and malloc--",
			"let's see.",
			"I want space for three integers.",
			"So the simplest way to do this, if I'm just going to keep it simple,",
			"I can actually do this, 3 times size of int.",
			"So this version of my program isn't going to use an array per se.",
			"It's going to use malloc.",
			"But it's going to dynamically allocate that array for me.",
			"And we'll see what the syntax for this is.",
			"As always now, any time you use malloc, I",
			"should check whether list equals equals null.",
			"And if so, you know what?",
			"I'm just going to return 1.",
			"Recall that you can return 0 or 1 or some other value",
			"from main to effectively quit your program.",
			"I'm going to go ahead and just return 1 if list is null,",
			"just assuming that something very badly went wrong, like I'm out of memory",
			"altogether.",
			"But now that I have this chunk of memory that's of size 3 times",
			"the size of an int, this is actually the malloc way to give yourself an array.",
			"Up until now, every time we've created arrays for ourselves,",
			"we've used square bracket notation.",
			"And you all have put a number inside the square brackets",
			"to give yourself an array of that size.",
			"But frankly, if we have malloc and the ability",
			"to just ask the computer for memory, well,",
			"if I want to store three integers, why don't I ask malloc",
			"for three times the size of an integer?",
			"And the way malloc works is it's actually",
			"going to return to me a contiguous chunk of memory of that size,",
			"so that many bytes back to back to back.",
			"And that's a technique that we'll use in just a moment",
			"when allocating actual nodes.",
			"So at this point in the story, so long as list does not equal null,",
			"I now have a chunk of memory that's big enough to fit the size of three ints.",
			"And as before, I can go ahead and initialize those.",
			"The first element will be 1.",
			"The second element will be 2.",
			"The third element will be 3.",
			"And notice the sort of equivalence now between using arrays",
			"and using pointers.",
			"C is kind of versatile in this way and that if you",
			"have a chunk of memory returned to you by malloc, you can, per last week,",
			"use square bracket notation.",
			"You can use square bracket notation and treat that chunk of memory as an array.",
			"Because after all, what's an array?",
			"It's a contiguous block of memory and that is exactly what malloc returns.",
			"If you want to be fancy instead, you could actually say go to that address",
			"and put the number 1 there.",
			"You could say go to that address plus 1 and put the next number there.",
			"You could say go to that address plus 2 and put the third number there.",
			"But honestly, this just very quickly becomes unreadable, at least",
			"to most people.",
			"This is that thing called pointer arithmetic,",
			"you're doing arithmetic with pointers, that",
			"is equivalent to using the syntax that we've used for a while now, which",
			"is to just use the square brackets.",
			"And the nice thing about square brackets is",
			"that the computer will figure out for you",
			"how far apart each of those integers are because it knows the size of an int.",
			"But now, at this point in the story, things",
			"get interesting and also annoying.",
			"And Santiago, recall, was the one that helped us solve this earlier.",
			"Suppose I didn't plan ahead.",
			"I only allocated three integers on line five there.",
			"But now, at line 13, I'm, like, oh, dammit.",
			"Now I want to add a fourth integer to the list.",
			"I could obviously just redo all the code.",
			"But suppose that part of the story here is to go ahead",
			"and dynamically allocate more memory.",
			"Well, how can I do this?",
			"Well, let me go ahead and allocate another chunk of memory temporarily.",
			"So I'll call it temp, by convention.",
			"And this time I'm going to go ahead and allocate 4 times size of int.",
			"Because, again, for the sake of the story, I messed up",
			"and I want to allocate enough space now for that original--",
			"I haven't so much messed up.",
			"I have now decided that I want to add a fourth number to this array.",
			"As always, I should check if temp equals equals null.",
			"You know what?",
			"I'm going to go ahead and free the memory I already allocated.",
			"And then I'm just going to get out of here, return 1.",
			"Something went wrong.",
			"There's nothing to demonstrate.",
			"So I'm going to exit out of main entirely.",
			"But if malloc did not return null, and all is well, what am I going to do?",
			"Well, let's first do what Santiago proposed",
			"when we first began this conversation.",
			"For int i get 0, i less than 3, i++, let's go ahead and copy into this new,",
			"temporary chunk of memory whatever is at the original chunk of memory.",
			"So when Santiago proposed that we copy 1, 2,",
			"3 from the old array into the new array, here's",
			"how we might do that in code just using a simple for loop, a la Week 2.",
			"And then let me go ahead now and add one more value, tmp[3],",
			"which is the fourth location if you're starting from 0.",
			"I'm going to go ahead and put the number 4 there.",
			"And now, at this point, I'm going to go ahead and remember",
			"the fact that tmp is my new list.",
			"So I'm going to go ahead and free the original list.",
			"And I'm going to update my old list to point at the new list.",
			"And then lastly, I'm going to go ahead and use another for loop just",
			"to demonstrate that I think I did this correctly, this time iterating up to 4",
			"instead of 3.",
			"I'm going to go ahead and print out with i the contents of list[i].",
			"So let's rewind real quick.",
			"We began the story by allocating an array of three integers.",
			"But we did it this time dynamically to demonstrate that malloc just",
			"returns a chunk of memory.",
			"And if you want to treat that chunk of memory as an array, you absolutely can.",
			"This stuff here, if list equals equals null,",
			"it's just error checking, just to make sure that nothing went wrong.",
			"The interesting code resumes here.",
			"I'm putting the numbers 1, 2, and 3 at location 0, 1, and 2 respectively",
			"in that chunk of memory which, again, I'm treating like an array.",
			"But now at this point in the story, I've stipulated that, wait a minute,",
			"I want to go ahead and add a fourth value.",
			"How can I do that?",
			"And let's stipulate that I want to go back and change the existing program.",
			"Because suppose that for the sake of discussion,",
			"this is code that's running at Google or Twitter over time",
			"and it's only after receiving another tweet that their code realizes,",
			"oh, we need more space.",
			"So how do I do this here?",
			"On line 15, this time I allocate enough space for four integers.",
			"And I, again, do some error checking.",
			"If tmp equals null, then something bad happened.",
			"Let's just exit all together.",
			"But if nothing bad happened, let's take Santiago's suggestion",
			"and translate his English advice into C. Let's use a for loop from 0 to 3",
			"and copy into this new temporary chunk of memory",
			"the contents of the original chunk of memory.",
			"So tmp[i] = list[i].",
			"And then here, which was the point of this exercise,",
			"let me add my fourth number at tmp[3], which is the fourth location if you",
			"start counting from 0.",
			"But at this point in the story, much like my earlier slide,",
			"I have both the 1, 2, 3 in an array of size 3,",
			"and I have 1, 2, 3 duplicated in the array of size 4.",
			"Let me go ahead and free the original list and give back to the computer",
			"that original chunk of memory.",
			"Let me then remember, using my better names",
			"variable, what the address of this new chunk of memory is.",
			"And then, just to show off, let me go ahead,",
			"and with another for loop, this time counting four times, not three,",
			"let me print out all of those values.",
			"Now here's where I'll cross my fingers, compile my new program.",
			"It does not compile OK.",
			"Because it looks like I have one too many parentheses there.",
			"So let's recompile the program with make list--",
			"another error.",
			"So let me scroll up there.",
			"And oh, interesting, so this is a common mistake, implicitly declaring library",
			"function malloc something something.",
			"So any time you get an implicitly declaring error,",
			"odds are it means you just did something simple like this,",
			"you forgot the requisite header file in which that function is defined.",
			"And indeed, recall from last week, malloc is in standard lib, as is free.",
			"So now let's do make list.",
			"Cross my fingers again.",
			"Phew.",
			"That time it worked.",
			"./list, voila, 1, 2, 3, 4.",
			"So this is now a completely literal translation",
			"of all of that code into a working program",
			"that, again, starts off by using an array of size 3,",
			"having dynamically allocated it.",
			"And then it resizes it by creating a new one of size 4, copying old into new,",
			"freeing the old, and then proceeding as before.",
			"And I've deliberately used malloc both times here as follows.",
			"If you create an array in C using square bracket notation,",
			"you have painted yourself into a corner.",
			"You can't use any lines of code that we have seen",
			"and resize an array that you have declared using square brackets.",
			"More technically speaking, when you use the square brackets,",
			"you are statically allocating the array on the stack.",
			"You're putting it into the frame of the computer's memory",
			"that belongs to that computer, to that function's stack frame, per the diagram",
			"last week.",
			"If, however, you use malloc, our new tool from last week,",
			"and say give me a chunk of memory, that comes from the heap.",
			"And that you can resize.",
			"That you can give back and take more of and back and forth.",
			"And in fact, there's even a more simple way of doing this, relatively speaking.",
			"If you want to reallocate an array, a chunk of memory, by resizing it,",
			"you don't have to do all of this, which I did before.",
			"You don't have to use malloc twice.",
			"You can use malloc once at the beginning.",
			"And then, you can use a new function that's",
			"actually kind of helpful in this case, called realloc.",
			"And you can actually do this, realloc a chunk of memory of size 4 times",
			"size of int.",
			"But specifically, reallocate the thing called list.",
			"So realloc is very similar to malloc.",
			"But it takes two arguments.",
			"One is the size of the memory you want, whether bigger or smaller.",
			"But it takes a second argument.",
			"Its very first argument now is the address of a chunk of memory",
			"that you have already allocated, as with malloc.",
			"So, again, at the top of the same program,",
			"recall that I used malloc to give myself a list that points at a chunk of memory",
			"big enough for three integers.",
			"On line 16, I'm now handing that address back to realloc, saying, wait a minute,",
			"here is that same address you gave me.",
			"Please now resize it, reallocate it to be of size 4.",
			"And what the function does is, if all goes well,",
			"it returns to the address in memory that it is now of sufficient size.",
			"Otherwise, it returns null if anything bad happened.",
			"So I'll leave that code alone.",
			"But what I don't have to do anymore is this.",
			"Realloc actually copies the old into the new for you.",
			"So, again, coming back to Santiago's story at the beginning of today,",
			"realloc will not only give you a bigger chunk",
			"of memory, if you ask for it, by handing back the address of the memory you",
			"already requested.",
			"And it's going to hand you back the address of a new chunk of memory",
			"that is big enough to fit all of those new values.",
			"And it's smart, too.",
			"If there happens to be room at the very end of the existing chunk of memory,",
			"there's no hello, world, like we saw on my slide earlier,",
			"then you're actually going to get back the exact same address.",
			"But the computer's operating system, Windows, Mac, OS, or Linux,",
			"is going to remember, OK, yes, I know I gave you three bytes originally.",
			"There happened to be room at the end of that chunk of memory.",
			"So now I'm going to remember, instead, that that same address has",
			"room for four integers, or whatever number you pass in.",
			"So, again, you don't have to bother copying yourself.",
			"You can let the computer actually do the reallocation for you.",
			"Any questions, then on malloc, on realloc, on free, or fundamentally,",
			"on linked lists?",
			"Notice that this isn't yet a list.",
			"This is still an array.",
			"So we still need to take this program one step further",
			"and actually transition from this chunk of memory",
			"using arrays to these actual nodes.",
			"But before we do that, any questions or confusion?",
			"BRIAN: Yeah.",
			"A question came in, why do you not need to free tmp at the end of the program?",
			"DAVID MALAN: Why do I not need to free tmp at the end of the program?",
			"Because I'm an idiot and glossed over that key, important detail.",
			"You absolutely should free not tmp in this case, but list.",
			"So at this line here, 27, I use my list variable, which just has a better name,",
			"and I make it equal to tmp so that I can just refer to it as a bigger list.",
			"But you are quite right.",
			"That was an oversight on my part.",
			"Valgrind would not have liked that.",
			"At the very end of this program, I should absolutely free list.",
			"However, I don't need to free tmp, per se,",
			"because I've simply reused the variable name through that assignment.",
			"Good question and good catch.",
			"Unintended.",
			"Other questions or comments, Brian?",
			"BRIAN: Question came in, why does the linked list improve",
			"this situation if we can just use arrays and realloc and malloc to do",
			"all this stuff?",
			"DAVID MALAN: Yeah.",
			"Really good question.",
			"So how have we improved this situation if we can just use arrays in this way?",
			"Recall that this is kind of a regression.",
			"What I just did is a regression to where we started the story, whereby",
			"in any of the versions of code I just wrote,",
			"I reallocated more space for this array.",
			"Which means that I, manually with that for loop, or realloc with its own",
			"for loop, had to copy all of the old values into the new.",
			"So the approach we've taken in all three versions of this program",
			"that I've written thus far on the fly, they've all been Big O of n.",
			"When it comes to inserts, they have not given us the dynamism of a linked list",
			"to just add without that duplication.",
			"And we haven't had the ability yet to just do an insert, for instance,",
			"at the beginning of the structure in Big O of 1 time.",
			"So, again, this is the code translation, really,",
			"of that slower approach from which we began.",
			"So the ultimate goal now is going to be to change this code",
			"and give us that dynamism and actually implement things as a proper linked",
			"list, not just as an array of integers.",
			"But we're about an hour in.",
			"Let's go ahead and take our first five minute break here.",
			"And when we come back, we'll translate the nodes themselves to a full program.",
			"All right, we are back.",
			"And recall that we began today by revisiting arrays and pointing out",
			"that searching is great in arrays if you keep them sorted.",
			"You get the Big O of log n that we liked back from Week 0.",
			"But as soon as you want to start dynamically modifying an array,",
			"it gets very expensive quickly.",
			"It might take you Big O of n steps to copy",
			"the contents of an old, small array into a new, bigger array.",
			"And honestly, over time, especially for real world software with lots of data,",
			"even Big O of n is expensive.",
			"Like, you don't want to be constantly copying and copying and copying",
			"all of your data around the computer's memory.",
			"So we can avoid that by using pointers and, in turn,",
			"stitching together these structures called linked lists,",
			"albeit at a price of spending more memory.",
			"But with that additional memory, that additional cost, comes dynamism.",
			"So that if we want we can even achieve constant time",
			"when it comes to inserting.",
			"But of course, then we have to sacrifice things like sortability.",
			"So this came with trade offs.",
			"We've just seen a few examples of actual C programs",
			"that implement first the old school array, per Week 0,",
			"where we just hardcode the array's length.",
			"And unfortunately, we painted ourselves into a corner,",
			"using the bracket notation alone.",
			"So we deployed instead m which is more versatile tool that",
			"lets us get as much memory as we want.",
			"And we used that to recreate the idea of a list implemented as arrays.",
			"But even then, we saw that I had to copy using a for loop",
			"or we had to copy using, indirectly, realloc, old into new.",
			"And, again, for these small programs, you don't even notice the difference.",
			"The programs run like that.",
			"But for large, real world software, all of that Big O of n time",
			"is going to add up quickly.",
			"So it's best if we can try to avoid it altogether and achieve dynamism.",
			"So the code via which you can add to linked list dynamically",
			"is actually part of the challenge for Problem Set 5 this coming week.",
			"But let's see some of the building blocks via which we can syntactically",
			"start to allocate nodes and stitch them together when",
			"we know in advance how many we want.",
			"Which is not going to be the case for Problem Set 5,",
			"but for now is indeed the case, because I only want three of these things.",
			"So I'm going to go back to my program from before.",
			"And I'm going to rewind and race everything inside of main.",
			"And I'm going to go ahead and declare myself",
			"a type called struct node initially with a number inside of it and a struct node",
			"* called next inside of that.",
			"And then I'm going to call this whole thing quite simply node.",
			"So that's quite similar to what we did with a person.",
			"But now it's a little fancier in that I'm giving the structure itself",
			"a temporary name, struct node.",
			"I'm referring to that temporary name inside of the structure",
			"so that I can have a pointer there, too.",
			"And then I'm renaming what was person to now node.",
			"Now let's go ahead and actually use this thing inside of main.",
			"So let me go ahead and create an empty linked list.",
			"The simplest way to translate the simple block with which we began today is just",
			"doing node *list;.",
			"Unfortunately, any time you declare a variable",
			"that does not have an assigned value, it's garbage.",
			"And garbage is bad in the world of pointers.",
			"Again, to be clear, if you create this variable called list",
			"and you do not explicitly initialize its value",
			"to be something like null pointing at the ground,",
			"but instead leave it as a garbage value, it's",
			"the sort of metaphorical equivalent of this arrow pointing",
			"this way, this way, this other way.",
			"That is to say you might accidentally, in your own code,",
			"follow this arrow to a completely bogus place.",
			"And that's the point at which you have what are called segmentation faults,",
			"as some of you might have experienced already with Problem Set 4 when you",
			"touch memory that you shouldn't.",
			"So garbage values are bad ever more so in the context",
			"of pointers for that reason.",
			"So you rarely want to do this.",
			"You almost always want to initialize the pointer to some known value.",
			"In the absence of an actual address, we're",
			"going to use null to indicate that there's nothing there.",
			"But that's deliberate on our part.",
			"Now, suppose I want to insert, just as I did physically",
			"by lugging the block number 1 onto stage before, let me go ahead",
			"and allocate a node-- we'll call it n temporarily--",
			"using malloc, this time asking for the size of a node.",
			"So the story is now changing.",
			"I'm not allocating individual ints.",
			"I'm allocating individual nodes inside of which is enough room for an integer",
			"and another pointer to a node.",
			"And this size of operator figures out, from the definition",
			"of this structure up here above main, how much space",
			"is needed to store an integer and a pointer to a struct node.",
			"So as always now, I'm always going to check.",
			"If n equals equals null, I'm going to get out of this program",
			"immediately, and just return 1.",
			"Because something went wrong, and there's just not enough memory.",
			"But if all went well, I'm going to go ahead now and go into that node n.",
			"I'm going to go into its number field and assign it the value 1.",
			"And I'm going to go into that node n and go into its next field and, for now,",
			"assign it the value null.",
			"So this is as though I've just allocated the wooden block with a 1 in it",
			"and I have initialized its next pointer to null.",
			"Now I'm going to go ahead and update the list itself to point at that value.",
			"So, again, my variable called list is the variable via which",
			"I'm representing the whole list.",
			"And now that I have an actual node to point to,",
			"I'm setting list which, again, is a pointer, to a node, equal to whatever",
			"n is, the address of an actual node.",
			"So at this point in the story, I have the small wooden block connected",
			"to the larger block containing 1.",
			"Let's suppose, for the sake of discussion,",
			"I now want to add the number 2 to this list, this time using",
			"a node as well, not just an integer.",
			"I'm going to go ahead and allocate n, using malloc,",
			"giving myself the size of another node.",
			"I'm going to again just going to check if that thing equals",
			"null let me go ahead and free the list so I don't leak memory.",
			"Then let me go ahead and return 1.",
			"So that's just a quick sanity check to make",
			"sure I free any memory I've already allocated before.",
			"But if all goes well, and that's what I'm hoping for,",
			"I'm going to go ahead and go into this node n and store in its number field",
			"literally the number 2.",
			"And then now, because this thing--",
			"I'll insert it in sorted order for now--",
			"I'm going to go ahead and insert this next = NULL.",
			"And if I indeed want to put this number 2 node after the number 1 node,",
			"I can start at the top of the list, I can go to the next node.",
			"And inside of its value, I can say n.",
			"So this line of code here starts at the little block, follows the arrow,",
			"and then updates the next pointer of that first node, the 1 node,",
			"to instead store the address of this new node, n.",
			"And then lastly, let's do one more of these so n = malloc(sizeof(node));",
			"one last time.",
			"Let me go ahead and do my sanity check one more time.",
			"If n = = NULL something bad happened.",
			"So now I'm going to go ahead and don't worry about the syntax just yet.",
			"But I'm going to go ahead and free list next.",
			"And I'm going to go ahead and free(list);",
			"and then I'm going to go ahead and return 1.",
			"But more on that another time.",
			"That's just in the corner case where something bad happened.",
			"But if nothing bad happened, I'm going to update the number field to be 3.",
			"I'm going to update the next field to be NULL.",
			"And now I'm going to update the list next block",
			"next block to equal this new one n.",
			"And then here, after this, I can proceed to print all of these things if I want.",
			"And in fact, I'll go ahead and do this with a loop.",
			"The loop is going to look a little different from before in this case.",
			"But it turns out we can use for loops pretty powerfully here, too.",
			"But at this point in the story, my list pointer",
			"is pointing at the 1 node, which is pointing at the 2",
			"node, which is pointing at the 3 node.",
			"And, again, as someone observed earlier, it's",
			"not common to use this double arrow notation in this case.",
			"I bet I could actually use a loop to iterate over these things",
			"one at a time.",
			"And we can see this here when it's time to print.",
			"Let me go ahead and do this for.",
			"And instead of using i, because there really aren't any numbers in question.",
			"This is no longer an array, so I can't use square bracket notation or pointer",
			"arithmetic.",
			"I need to use pointers.",
			"So this might feel a little weird at first.",
			"But there's nothing stopping me with a for loop from doing this.",
			"Give me a temporary pointer to a node called tmp",
			"and initialize it to be whatever is at the beginning of the list.",
			"Keep doing the following so long as tmp does not equal NULL.",
			"And on each iteration of this loop, don't do something like i++ which,",
			"again, is not relevant now.",
			"But go ahead and update my temporary pointer",
			"to be whatever the value of the temporary pointer's next field is.",
			"So this looks crazy cryptic most likely, especially",
			"if you're new to pointers as of last week, as most of you are.",
			"But it's the same idea is a typical for loop.",
			"You initialize some variable before the semicolon.",
			"You check some condition after the first semicolon.",
			"And you perform an update of that variable after the second semicolon.",
			"In this case, they're not integers, though.",
			"Instead, I'm saying give myself a temporary pointer to the beginning",
			"of the list, like my finger pointing at, or if you prefer, the foam finger",
			"pointing at some node in the list.",
			"Go ahead and call that temporary variable tmp.",
			"And now do the following.",
			"So long as tmp is not null, that is, so long as it's",
			"pointing at an actual legitimate wooden block, what do I want to do?",
			"Let me go ahead and print out, using printf and %i as always,",
			"whatever value is in the number field of that node there.",
			"And that's it.",
			"With this simple for loop, relatively simple for loop,",
			"I can essentially point at the very first node in my list",
			"and keep updating it to the next field, updating it to the next field,",
			"updating it to the next field.",
			"And I keep doing this until my finger sort of walks off",
			"the end of the list of wooden blocks, thereby",
			"pointing at null, 0x0, at which point the loop stops",
			"and there's nothing more to print.",
			"So in answer to that question earlier, do we",
			"need to use this double arrow notation?",
			"Short answer, no, this is kind of the secret ingredient here.",
			"This syntax inside of the for loop takes whatever you're pointing at,",
			"follows one arrow, and then updates the temporary variable now",
			"to point at that structure instead.",
			"So this is kind of the equivalent in the world of pointers and linked lists",
			"of doing i++.",
			"But it's not as simple as i++.",
			"You can't just look one byte to the right or to the left.",
			"Instead, you have to follow an arrow, follow an arrow.",
			"But by reassigning this temporary variable to wherever you just followed,",
			"it's a way of following each of these orange arrows",
			"as we did physically a moment ago.",
			"After this, I should, for good measure, go ahead and free the whole list.",
			"And let me just offer up a common way of freeing a linked list.",
			"I can actually do something like this.",
			"While list != NULL, so while the whole list itself does not equal null,",
			"go ahead and get a temporary pointer like this to the next field so I",
			"remember what comes after the current head of the list.",
			"Free the list node itself.",
			"And then update list to be tmp.",
			"So, again, this probably looks crazy cryptic and certainly in the coming",
			"days, especially with Problem Set 5, you'll",
			"work through this kind of logic a little more logically, a little more",
			"pictorially, perhaps.",
			"But what am I doing here?",
			"First, I'm going to do the following, so long as my linked list is not null.",
			"And if I've got three nodes in it, by definition",
			"it's not null from the beginning.",
			"But my goal now is to free all of the memory I have allocated",
			"from left to right, so to speak.",
			"So how do I do that?",
			"Well, if I've got a wooden block in front of me,",
			"it's not safe to free that wooden block yet.",
			"Because that wooden block, recall, contains the pointer to the next node.",
			"So if I free this memory prematurely, I've",
			"then stranded all subsequent nodes.",
			"Because they are no longer accessible once I've told the computer",
			"you can take back this chunk of memory for the first node.",
			"So this line of code here, on line 52, is just saying temporarily",
			"give me a variable call tmp.",
			"And point it not at the list itself, the first node, point at the next node.",
			"So it's like using my right hand to point at the current node, my left hand",
			"to point at the next node, so that I can then, on line 53, free the list itself,",
			"which should not be taken literally.",
			"List represents the first node in the linked list, not the whole thing.",
			"So when you say free list, that's, like, freeing just the current node.",
			"But that's OK.",
			"Even now this memory has been given back,",
			"I still have my left hand pointing at every subsequent node",
			"by way of the next one.",
			"So now I can update list to equal that temporary variable",
			"and just continue this loop.",
			"So it's a way of sort of Pacman style, like,",
			"gobbling up the entire linked list from left",
			"to right by freeing the first node, the second node, the third node, and then",
			"you're done.",
			"But by using a temporary variable to look one step ahead to make sure",
			"you don't chomp, free the memory too soon",
			"and, therefore, lose access to all of those subsequent nodes.",
			"All right, phew.",
			"That was a big program.",
			"But it was meant to be in succession, starting with an array,",
			"transitioning into a dynamically allocated array, followed by, finally,",
			"an implementation using linked list, albeit hardcoded",
			"to support only three nodes.",
			"But in that example, do you see some sample syntax via which you",
			"can manipulate these kinds of nodes?",
			"Questions or confusion that I can help address?",
			"BRIAN: Yes.",
			"Someone asked, similar to one of the examples you did before,",
			"why could we not have just done malloc three times size of node",
			"to get three nodes and do it that way?",
			"DAVID MALAN: Really good question.",
			"Could I not just use malloc and allocate all three at once?",
			"Absolutely.",
			"Yes.",
			"That is completely your prerogative.",
			"I did it a little more pedantically, one at a time.",
			"But you could absolutely do it all three at once.",
			"You would then need to use some pointer arithmetic though,",
			"or you would need to square bracket notation",
			"to treat that bigger chunk of memory as essentially an array of nodes,",
			"and then stitch them together.",
			"So I am assuming, for demonstration purposes,",
			"that even though we have these little simple examples that demonstrate",
			"the syntax, in a real world system, you're not going to be inserting 1,",
			"then 2, then 3.",
			"Odds are you're going to be inserting 1.",
			"Some time passes.",
			"Then you want to insert 2, so you allocate more memory.",
			"Then some more time passes.",
			"Then you want to insert 3.",
			"And so there's gaps in between these chunks of code in the real world.",
			"Other questions or confusion?",
			"BRIAN: Yeah.",
			"Another question came in.",
			"Why would malloc ever fail to allocate memory?",
			"DAVID MALAN: Why would malloc ever fail?",
			"It's rarely going to fail, but if the computer is out of memory.",
			"So essentially, if you're writing such a memory hungry program",
			"with so many variables, big arrays, big structures, lots of data,",
			"you may very well run out of memory.",
			"Maybe that's two gigabytes, maybe it's four gigabytes or more.",
			"But malloc may very well return null to you.",
			"And so you should always check for it.",
			"In fact, I dare say, on Macs and PCs, one",
			"of the most common reasons, to this day, for programs to freeze,",
			"to crash, for your home computer to reboot,",
			"is truly because someone did something stupid, like I've",
			"done multiple times now already today and last week,",
			"by touching memory that you shouldn't have.",
			"So in Problem Set 4 and now 5, any time you",
			"experience one of those segmentation faults",
			"whereby your program just crashes, that is the problem set",
			"version of, like, your whole Mac or PC crashing,",
			"because someone more experienced than you",
			"made that same mistake in their code.",
			"Just to reinforce this, let's take a quick final example",
			"involving linked lists which, again, are this very one dimensional structure,",
			"left to right.",
			"And then we'll add a second dimension and see what that buys us.",
			"But we've changed the numbers around here.",
			"Now we still have our list.",
			"But it's first pointing at the number two here.",
			"And then the number two is pointing to some other chunk of memory that's",
			"been malloced way over here.",
			"And this, then, is the number 4.",
			"And this, then, is the number 5.",
			"So we have a linked list of size 3.",
			"But I've deliberately spread the numbers out this time, 2, 4, 5.",
			"Because suppose that we do want to insert more numbers into this list,",
			"but in sorted order, it turns out that we",
			"have to think a little bit differently when",
			"we're adding nodes not to the end and not to the beginning,",
			"but in the middle.",
			"Like, when we want to allocate more nodes in the middle,",
			"there's a bit more work that actually has to happen.",
			"So how might we go about doing this?",
			"Suppose that we want to allocate, for instance, the number 1.",
			"And I want to add the number 1.",
			"Well, we could use code like this.",
			"This is the same code as we used before.",
			"We allocate the size of a node.",
			"We check whether it equals null, we initialize it",
			"with a value we care about, and by default, we sit next equal to null.",
			"And pictorially, it might look like this.",
			"It's kind of floating somewhere in the computer's memory.",
			"I have this temporary variable n, no longer pictured,",
			"that I'm just pointing at when I allocate the number 1.",
			"So what does this look like?",
			"This is like having the number 1 maybe somewhere over here.",
			"And I'll just put it in place.",
			"We got lucky, and there was a chunk of memory right there.",
			"So what do I want to now do?",
			"Well, I want to go ahead and connect this.",
			"So what I could do, just intuitively, if 1 should go before 2,",
			"I can unplug this.",
			"And I can plug this into here, which makes sense.",
			"But there's already a problem.",
			"If I have done nothing else up until this point,",
			"I have just orphaned three nodes, 2, 4, and 5.",
			"To orphan a node means to forget where it is.",
			"And if I don't have another variable in my code,",
			"or if I'm not acting out with one of my hands",
			"pointing at the original beginning of the list,",
			"I have literally orphaned the rest of the list.",
			"And the technical implication of that, per last week,",
			"is that now I have a massive memory leak.",
			"You have just leaked the size of three nodes",
			"in memory that you can literally never get back",
			"until you reboot the computer, for instance,",
			"or the program quits and the operating system cleans things up for you.",
			"So you don't want to do this.",
			"Order of operations actually matters.",
			"So what I should probably do is this.",
			"When I insert the number 1 first, I should probably",
			"recognize that, well, the one begins at the beginning of the list.",
			"So what I should really do is point this arrow also at the same node.",
			"And we'll sort of do it a little sloppily like that.",
			"But let me stipulate those are both pointing at the same node.",
			"Now that my new node, AKA n and the code I showed is pointing at this thing,",
			"now I can do kind of a switcheroo.",
			"Because I'm already pointing at the final destination there.",
			"And now I can remove this safely, because this is my list.",
			"This is n.",
			"Therefore, I have variables pointing to both",
			"and I can go ahead and insert that correctly.",
			"So long story short, order of operations matters.",
			"So graphically, if I were to do this as before, just by saying list equals n,",
			"if this is n, and this is list, and I adjust this arrow first,",
			"bad things are going to happen.",
			"Indeed, we end up orphaning 2, 4, and 5, thereby leaking a significant amount",
			"of memory potentially.",
			"And leaking any memory, typically, is bad.",
			"So I don't want to do that.",
			"So let's look at the correct code.",
			"The correct code is going to be to start at n",
			"and update its next field, this arrow here, to point at the same thing",
			"as the list was originally pointing at.",
			"And then go ahead and update the list, such that both of them",
			"are currently pointing in duplicate.",
			"Then update the list to point to the new node.",
			"So, again, the code's a little different this time from before.",
			"Because before we kept adding it to the end,",
			"or I proposed verbally that we just add it to the beginning.",
			"Here, we're adding it, indeed, at the beginning.",
			"And so the actual steps, the actual code, are a little bit different.",
			"Well, let's do one final example, if we want to allocate 3.",
			"Well, I've got to malloc another node, the number 3.",
			"Suppose that ends up somewhere in the computer's memory.",
			"Let's go ahead and plop this one over here.",
			"So now 3 is in place.",
			"How do I now insert this thing?",
			"Well, similar to before, I'm not going to want to update this pointer",
			"and go like this and then plug this guy in over here.",
			"Because now I've orphaned those two nodes.",
			"So that, again is the wrong step.",
			"When you're inside the middle of a linked list, any code",
			"that you write to insert into the middle,",
			"if you care about inserting in sorted order, this should be updated first.",
			"And odds are I should kind of cheat and point this at the same thing,",
			"even though there's only one physical plug at the moment.",
			"So we'll just pretend that this is working.",
			"There we go.",
			"And now I can go ahead and safely say that n and the previous node",
			"are already pointing where they should be.",
			"So now it's safe for me to unplug this one",
			"and go ahead and update this final arrow to point",
			"at the new node in the correct location.",
			"So let's see that in code again.",
			"If I go here, I've got graphically the node 3 kind of floating in space.",
			"I first update its next field to point also at the 4 in duplicate.",
			"Then, I update the 2 to point to the 3.",
			"The goal being, again, to avoid any leaking of memory or orphaning",
			"of nodes.",
			"All right , we are about to leave linked lists behind.",
			"Because as multiple of you have noted or probably thought,",
			"they're good, but maybe not great.",
			"They're good in that they are dynamic and I can add to them, as",
			"by inserting at the beginning if I really want",
			"and don't care about sorted order.",
			"But they're still a good amount of work to do",
			"if I want to keep them in sorted order and I insert them",
			"in the middle or the end.",
			"Because that's, like, Big O of n if I keep",
			"traversing all of these darn arrows.",
			"So we get the dynamism, but we don't necessarily",
			"get the performance increase.",
			"But we fundamentally have opened up a whole new world to ourselves.",
			"We can now stitch together these data structures",
			"in memory using pointers as our thread, if you will.",
			"We can just use memory as a canvas, painting on it any values we want.",
			"And we can sort of remember where all of those values are.",
			"But this is indeed very single, one dimensional, left to right.",
			"What if we give ourselves a second dimension?",
			"What if we start thinking sort of not left to right,",
			"but also left to right, up, down.",
			"So, again, this is meaningless to the computer.",
			"The computer just thinks of memory as being byte 0, 1, 2, 3.",
			"But we humans can kind of think of these data structures",
			"a little more abstractly, a little more simply.",
			"And we can think about them in a way familiar,",
			"perhaps, to us in the real world.",
			"Trees, not the ones so much that grow from the ground,",
			"but if you're familiar with family trees.",
			"Where you might have a matriarch or a patriarch",
			"and then sort of descendants hanging off of them graphically",
			"on a piece of paper, something you might have made in grade school,",
			"for instance.",
			"We can leverage this idea of a tree structure",
			"that has a root that kind of branches and branches and branches",
			"and grows top to bottom.",
			"So, again, more like a family tree than an actual tree in the soil.",
			"So with trees, it turns out, this idea of a tree,",
			"we can take some of the lessons learned from linked lists.",
			"But we can gain back some of the features of arrays.",
			"And we can do that as follows.",
			"Consider the following definition of what we're",
			"about to call a binary search tree.",
			"Binary search being a very good thing from the first, Week 0.",
			"And a tree now being the new idea.",
			"Here's an array from Week 0, Week 1, Week 2, whenever.",
			"And it's of size 7.",
			"And recall that if it's sorted, we can apply binary search to this array.",
			"And that's great.",
			"Because if we want to search for a value,",
			"we can start looking in the middle.",
			"Then we can go either left or right, halfway between each.",
			"And then we can similarly go left or right.",
			"So binary search on a sorted array was so powerful",
			"because it was Big O of log n, we've concluded,",
			"by just having and having and having the problem again and again,",
			"tearing the phone book in half again and again and again.",
			"But the problem with binary search is that it",
			"requires that you use an array so that you have random access.",
			"You have to be able to index into the array in constant time",
			"using simple arithmetic, like bracket 0, bracket n minus 1, bracket n minus 1",
			"divided by 2, to get the halfway point.",
			"You have to be able to do arithmetic on the data structure.",
			"And we've just proposed getting rid of that random access",
			"by transitioning to a dynamic data structure",
			"like a linked list instead of an array.",
			"But what if we do this?",
			"What if you and I start thinking not on one dimension, but on two dimensions?",
			"And what if we alter our thinking to be like this?",
			"So think of an array, perhaps, as being a two dimensional",
			"structure that has not only with or length, but also height.",
			"And so we maintain, it seems, visually this relationship",
			"between all of these values.",
			"But you know what?",
			"We can stitch all of these values together using what?",
			"Well, pointers.",
			"Pointers are this new building block that we can use",
			"to stitch together things in memory.",
			"If the things in memory are numbers, that's fine.",
			"They're integers.",
			"But if we throw a little more memory at them, if we use a node,",
			"and we kind of wrap the integer in a node such",
			"that that node contains not only numbers but pointers,",
			"we could probably draw a picture like this, not",
			"unlike a family tree, where there's a root",
			"node, at the very top in this case, and then children, so to speak.",
			"Left child and right child, and that definition repeats again and again.",
			"And it turns out the computer scientists do use this data structure in order",
			"to have the dynamism of a linked list, where",
			"you can add more and more nodes to the tree",
			"by just adding more and more squares even lower",
			"than the 1, the 3, the 5, and the 7.",
			"And just use more pointers to kind of stitch them together, to sort of",
			"grow the tree vertically, down, down, down, if you will.",
			"But a good computer scientist would recognize that you shouldn't just",
			"put these numbers in random locations, otherwise,",
			"you're really just wasting your time.",
			"You should use some algorithm.",
			"And notice.",
			"Does anyone notice the pattern to this tree?",
			"Can anyone verbalize or textualize in the chat",
			"what pattern is manifest by these seven nodes in this tree?",
			"They're not randomly ordered.",
			"They're very deliberately ordered left to right, top to bottom,",
			"in a certain way.",
			"Can anyone put their finger on what the definition of this thing is?",
			"What is the most important characteristic besides it",
			"just being drawn like a family tree?",
			"[? Greg? ?]",
			"AUDIENCE: You have put in the middle of them,",
			"on top of them you have put the middle number.",
			"For example, between 1 and 3, you have put 2.",
			"Between 5 and 7, you have put 6.",
			"So on top of them, you have put the middle number.",
			"DAVID MALAN: Exactly.",
			"There's this pattern to all of the numbers.",
			"Between 1 and 3 is 2.",
			"Between 5 and 7 is 6.",
			"Between 2 and 6 is 4.",
			"And it doesn't even have to be the middle number, per se.",
			"I can generalize it a little bit and comment",
			"that, if you pick any node in this tree, so to speak,",
			"its left child will be less than its value,",
			"and its right child's will be greater than its value.",
			"And we can do that again and again.",
			"So here's 4.",
			"Its left child is 2.",
			"That's less than.",
			"Here's 4.",
			"It's right child to 6.",
			"That's greater than.",
			"We can do this again.",
			"Let's go to 2.",
			"Its left child is 1, which is less.",
			"Its right child is 3, which is more.",
			"6, its left child is 5, which is less.",
			"6, its right child is 7, which is more.",
			"And so this is actually, if you don't mind",
			"the revisiting recursion from last week, this is a recursive definition.",
			"This is a recursive data structure.",
			"So it's not only algorithms or functions that",
			"can be recursive by calling themselves.",
			"A data structure can also be recursive.",
			"After all, what is this thing?",
			"This is a tree, yes.",
			"I'll stipulate.",
			"But it's technically a tree with two trees.",
			"Right?",
			"This node here, number four, technically has two children.",
			"And each of those children is itself a tree.",
			"It's a smaller tree.",
			"But it's the same exact definition again and again.",
			"And any time we see a recursive data structure,",
			"it's actually going to be an opportunity to use recursive code,",
			"which we'll take a look at in just a moment.",
			"But for now, notice what we've achieved again,",
			"the dynamism of using pointer so that we can, if we want,",
			"add more nodes to this tree, as by stringing them",
			"along the bottom in the correct order.",
			"And yet, we've preserved an important order for binary search,",
			"AKA, the formal name of this data structure, binary search tree,",
			"by making sure that left child is always less, right child is always more.",
			"Because now, we can go about searching this thing more efficiently.",
			"How?",
			"Well, if I want to search for the number 3, what do I do?",
			"Well, I start at the beginning of the tree.",
			"Just like with a linked list, you start at the beginning of the linked list.",
			"So with the tree, you start with the root of the tree [? always. ?]",
			"Suppose I want to search for 3.",
			"Well, what do I do?",
			"Well, 3 is obviously less than 4.",
			"So just like in Week 0 where I tore the phone book in half,",
			"you can now think of this as chopping down half of the tree.",
			"Because you know 3, if it's present, is definitely not",
			"going to be anywhere over here, so we can focus our attention down here.",
			"Here's the number 2.",
			"This is another tree.",
			"It's just a smaller subtree, if you will.",
			"How do I find the number 3?",
			"Well, I look to the right because it's greater than.",
			"And boom, I found it.",
			"But by contrast, suppose I were searching for the number 8.",
			"I would start here.",
			"I would look here.",
			"I would look here.",
			"And then conclude, no, it's not there.",
			"But, again, every time I search for that 8,",
			"I'm ignoring this half of the tree, this half of the subtree, and so forth.",
			"So you're going to achieve, it would seem,",
			"the same kind of power, the same kind of performance as we saw from Week 0.",
			"So how do we translate this idea now into code?",
			"We have all the building blocks already.",
			"Let me go ahead and propose that, instead of the node",
			"we used before for a linked list, which looked like this, with a number and one",
			"pointer called next--",
			"but, again, we could have called those things anything-- let's go ahead",
			"and make room for not just a number, but also two pointers, one",
			"that I'll call left, one that I'll call right.",
			"Both of those is still a pointer to a struct node.",
			"So same terminology as before, but now I have two pointers instead of one",
			"so that one can conceptually point to the left and point to a smaller",
			"subtree.",
			"One can point to the right and point to a larger subtree.",
			"So how do we go about implementing something like binary search?",
			"Well, let's actually see some code.",
			"And this is where recursion really gets kind of cool.",
			"We kind of forced it when building [? Maro's ?] pyramid with recursion.",
			"Like, yeah, you can do it.",
			"And yes, the pyramid was, I claimed, a recursive physical structure",
			"or virtual structure in the game.",
			"But with data structures and pointers, now recursion really starts to shine.",
			"So let's consider this.",
			"If I declare a function in C whose purpose in life",
			"is to search a tree for a number, it's going to, by definition,",
			"search from the root on down.",
			"How do we implement this?",
			"Well, my function, I'll propose, is going to return a bool.",
			"True or false, the number is in the tree, yes or no.",
			"It's going to take two arguments, a pointer to a node, AKA tree.",
			"I could call it root or anything else.",
			"And it's going to take a number, which is",
			"the number I care about, whether it's four or six or eight or anything else.",
			"So what's going to be my first chunk of code?",
			"Well, let me do the best practice that I keep preaching.",
			"Any time you're dealing with pointers, check for null",
			"so that your program doesn't freeze or crash or bad thing happens.",
			"Because who knows?",
			"Maybe you will accidentally or maybe intentionally",
			"pass this function on null pointer, because there's no tree.",
			"Maybe you'll screw up.",
			"And that's OK, so long as your code is self-defensive.",
			"So always check pointers for null.",
			"If so, if the tree is null, that is, there is no tree there,",
			"obviously, the number is not present.",
			"So you just return false.",
			"So that's one of our base cases, so to speak.",
			"Else, if the number you're looking for is less than the tree's own number--",
			"so, again, this arrow notation means take tree, which is a node *,",
			"so take this pointer.",
			"Go there to the actual node.",
			"And look in its own number field.",
			"If the number you're looking for from the argument",
			"is less than the number in the tree's own number field,",
			"well, that means that you want to go left.",
			"And whereas in the phone book, I went to the left of the phone book,",
			"here we're going to go to the left subtree.",
			"But how do I search a subtree?",
			"Here's where it's important that a tree is a recursive data structure.",
			"A tree is two subtrees with a new root node, as before.",
			"So I already have code via which I can search a smaller tree.",
			"So I can just say search the left subtree,",
			"as expressed here, which means start at the current node",
			"and go to the left child and pass in the same number.",
			"The number is not changing.",
			"But the tree is getting smaller.",
			"I've effectively, in code, chopped the tree in half.",
			"And I'm ignoring the right half.",
			"And I'm returning whatever that answer is.",
			"Otherwise, if the number I care about is greater",
			"than the number in the current node, do the opposite.",
			"Search the right subtree, passing in the same number.",
			"So, again, just like with the phone book,",
			"it kept getting smaller and smaller?",
			"Here I keep searching a smaller and smaller subtree.",
			"Because I keep chopping off branches left or right as",
			"I go from top to bottom.",
			"There's one final case.",
			"And let me toss this out to the group.",
			"There's a fourth case.",
			"Verbally or textually, what else should I be checking for and doing here?",
			"I've left room for one final case.",
			"BRIAN: A few people are suggesting if the tree itself is the number.",
			"DAVID MALAN: If the tree itself contains the number, yeah.",
			"So if the number in the tree equals equals",
			"the number I'm looking for, go ahead and, only in this case, return true.",
			"And so this is where the code, again, gets kind of--",
			"recursion, rather, gets a little mind-bending.",
			"I only have false up here, true here.",
			"But not in either of these middle two branches, no pun intended, if you will.",
			"But that's OK.",
			"Because my code is designed in such a way that if I search the left subtree",
			"and there's nothing there, like, literally I'm at the leaf of the tree,",
			"so to speak, then it's going to return false.",
			"So that's fine.",
			"That's, like, if I search for the number 8.",
			"It's not even in the tree.",
			"I'm only going to realize that once I fall off the end of the tree",
			"and see, oops, null.",
			"I'll just return false.",
			"But if I ever see the number along the way, I will return true.",
			"And these two inner calls to search, these two recursive calls to search,",
			"are just kind of like passing the buck.",
			"Instead of answering true or false themselves,",
			"they're returning whatever the answer to a smaller question",
			"is by searching the left or right tree instead respectively.",
			"So, again, this is where recursion starts",
			"to get not really forced or even necessarily really as forced,",
			"but really as appropriate.",
			"When your data is itself recursive, then recursion in as a coding technique",
			"really rather shines.",
			"So if ultimately, we have-- oh, [? an ?] minor optimization.",
			"As we might have noted in Week 0 with Scratch,",
			"we, of course, don't need to explicitly check if the number is equal.",
			"We can get rid of that last condition and just assume that if it's not null",
			"and it's not to the left and it's not to the right,",
			"we must be standing right on top of it.",
			"And so we just return true there.",
			"Well, let me summarize the picture here.",
			"This is now a two dimensional data structure.",
			"And it's sort of better than a linked list in that now it's two dimensions.",
			"I gain back binary search, which is amazing, so",
			"long as I keep my data in sorted order per this binary search tree definition.",
			"But I've surely paid a price.",
			"Right?",
			"Nothing is absolutely better than anything else in our story thus far.",
			"So what is the downside of a tree?",
			"What price have I secretly or not so secretly paid here,",
			"while preaching the upsides of trees?",
			"And, again, the answer is often in this context sort of space, or time,",
			"or developer time, or money, or some resource, personal, or physical,",
			"or real world.",
			"Yeah.",
			"How about over to [INAUDIBLE]?",
			"AUDIENCE: So I think that inserting is no longer constant time.",
			"And I guess we need more memory.",
			"You need memory to [? sort ?] two pointers instead of one this time.",
			"DAVID MALAN: Yeah.",
			"It seems insertion is no longer constant time.",
			"Because if I need to preserve sorted order, I can't just put it at the top.",
			"I can't just keep pushing everything else down",
			"because things might get out of order.",
			"In that case, it would [? seem. ?] Or rather, even if I maintain the order,",
			"it might kind of get very long and stringy.",
			"If I add, for instance, another number, another number,",
			"and I keep jamming it at the top, I probably",
			"need to kind of keep things balanced, if you will.",
			"And yeah, the bigger point, too, is that immediately I'm",
			"using twice as many pointers.",
			"So now my node is getting even bigger than these things.",
			"I now have room for not only a number and a pointer,",
			"but another pointer, which is, of course, going to cost me more space.",
			"Again, so a trade off there.",
			"And let's go ahead and ask the group here,",
			"when it comes to insertion, why don't we consider for a moment what",
			"the running time of insertion might be when inserting into a binary search",
			"tree.",
			"If you'd like to pull up the URL as always, let me go ahead",
			"and present this one.",
			"What's the running time of inserting into a binary search tree?",
			"So if you want to insert the number 0 into that tree,",
			"if you want to insert the number 8, or anything in between or bigger",
			"or smaller, what are the answers here?",
			"So not quite as big of a victory for the tallest bar.",
			"About 60% of you think log n.",
			"And the good instincts there, frankly, are so",
			"that is going to be the right answer.",
			"And that's kind of the right instinct.",
			"Anytime you have binary search, odds are you're talking something logarithmic.",
			"But we've also seen divide and conquer and merge sort with n log n,",
			"so not unreasonable that about 10% of you think that, too.",
			"n squared would actually be bad.",
			"So n squared is, like, the worst of the times we've seen thus far.",
			"And that would suggest that a tree is even worse than a linked list,",
			"is even worse than an array.",
			"And thankfully, we're not at that point.",
			"But it's indeed log n, based on certain assumptions.",
			"So why is that?",
			"So if we consider the tree from a moment ago,",
			"it looked a little something like this.",
			"And what is involved in inserting into a tree?",
			"Well, suppose I want to insert the number 8.",
			"Well, I start here.",
			"And it obviously belongs to the right because 8 is bigger.",
			"I go here.",
			"It belongs to the right because 8 is bigger.",
			"I go here.",
			"It belongs to the right, because 8 is bigger.",
			"And so a new node is going to be created somewhere down here.",
			"And even though it doesn't fit on the screen, I could absolutely call malloc.",
			"I could update a couple of pointers.",
			"And boom, we've added an eighth node to the tree.",
			"So if it took me that many steps, starting at the root, 1, 2, 3,",
			"how do I generalize this into Big O notation?",
			"Well, a binary search tree, if you lay it out nice and prettily like this,",
			"nice and balanced if you will, the height of that binary search tree,",
			"it turns out, is going to be log of n.",
			"If n is the number of total nodes, 7 or 8 now in the story, then",
			"log base 2 of n is going to be the height of the tree.",
			"So if you take n nodes, n numbers, and you kind of",
			"balance them in this nice sorted way, the total height is going to be log n.",
			"So what is the running time of insert?",
			"Well, the running time of insert is equivalent to how many",
			"steps does it take you to find the location into which",
			"the new number belongs?",
			"Well, that's 1, 2, 3.",
			"And as it turns out, log base 2 of 8 is indeed 3.",
			"So the math actually works out perfectly in this case.",
			"Sometimes, there might be a little rounding error.",
			"But in general it's going to indeed be Big O of log n.",
			"But what if we get a little sloppy?",
			"What if we get a little sloppy and we start",
			"inserting nodes that are giving us a bit of bad luck, if you will?",
			"So for instance, suppose that I go ahead-- and let",
			"me do something on the fly here.",
			"Suppose that I go ahead and insert the number 1, the number 2,",
			"and the number 3 such that this is what logically happens.",
			"This adheres to the definition of a binary search tree.",
			"If this is the roots, it's 1.",
			"It has no left subtree, and that's not strictly a problem,",
			"because there's nothing violating the definition of a search tree here.",
			"There's just nothing there.",
			"2 is in the right place.",
			"3 is in the right place.",
			"So this, too, technically is a binary search tree.",
			"But it's a bit of a corner case, a perverse case, if you will,",
			"where the way you inserted things ended up in the binary search tree actually",
			"resembling more of a what, would you say, if you want to chime in the chat?",
			"And Brian, if you might want to relay?",
			"BRIAN: A few people are saying it looks like a linked list.",
			"DAVID MALAN: Yeah.",
			"So even though I've drawn it sort of top down,",
			"so in the sort of second dimension, that's",
			"really just an artist's rendition.",
			"This tree is a binary search tree.",
			"But it's kind of sort of also a linked list.",
			"And so even the most well-intentioned data",
			"structures, given unfortunate inputs or some bad luck or some bad design,",
			"could devolve into a different data structure just by chance.",
			"So there's a way to solve this though, even with these values.",
			"When I insert 1, 2, 3, I could allow for this perverse situation",
			"where it just gets long and stringy, at which point everything is Big O of n.",
			"It's just a linked list.",
			"It just happens to be drawn diagonally instead of left right.",
			"But does anyone see a solution intuitively?",
			"Not in terms of code, no formal language,",
			"but there is a solution here to make sure that this tree with 1, 2, 3",
			"does not get long and stringy in the first place.",
			"What might you do instead to solve this?",
			"BRIAN: A few people in the chat are suggesting",
			"you should make 2 the new root node at the top of the tree.",
			"DAVID MALAN: So if I instead make 2 the new root node, let me go ahead",
			"and mock this up real quickly.",
			"And in a moment, I'll reveal what I think you've just verbalized.",
			"What if instead, I make sure that when inserting these nodes",
			"I don't naively just keep going to the right, to the right, to the right?",
			"I exercise some judgment.",
			"And if I notice, maybe, that my data structure, my tree",
			"is getting kind of long and stringy, maybe I",
			"should kind of rotate it around, using that second dimension for real",
			"so that I change what the root is.",
			"And we won't go through the code for doing this.",
			"But it turns out this is the solution.",
			"That is exactly the right intuition.",
			"If you take a higher level class on data structures",
			"and algorithms specifically in computer science,",
			"you'll study trees like AVL trees, or red, black trees,",
			"which are different types of tree data structures.",
			"They kind of have built into them the algorithms for kind of shifting things",
			"as needed to make sure that as you insert, or maybe as you delete,",
			"you constantly rebalance the tree.",
			"And long story short, doing so might cost you a little extra time.",
			"But if you've got a lot of data, keeping that thing balanced and logarithmic",
			"in height, so to speak, and not long and stringy in the linear in height,",
			"it's probably, depending on your application, going to save you",
			"quite a bit of time overall.",
			"So we might say that insert into a balanced binary search tree",
			"is indeed Big O of log n.",
			"But that is conditional on you making sure that you keep it balanced.",
			"And that's going to be more code than we'll go into today,",
			"but indeed, a possible design decision.",
			"All right, any questions then on now trees and binary search trees,",
			"in particular?",
			"We started with arrays a few weeks ago.",
			"We've now got linked lists, which are good, better, but not great.",
			"To trees, which seemed maybe to be great but, again, it's always a trade off.",
			"They're costing us more space.",
			"But I bet we can continue to stitch some of these ideas",
			"together for other structures still.",
			"Brian, anything outstanding?",
			"BRIAN: Yeah.",
			"One question came in as to why it's a problem if you have,",
			"like, the 1, and the 2, and the 3 all in just one sequence on the right side?",
			"DAVID MALAN: Yeah, a really good question.",
			"Why is it a problem?",
			"Maybe it isn't.",
			"If you don't have a very large data set and you",
			"don't have many values in the structure, honestly, who cares?",
			"If it's three elements, definitely don't care.",
			"If it's 10 elements, if it's 1,000, heck, if your computer is fast enough,",
			"there might be a million elements, and it's not a big deal.",
			"But if it's two million elements or a billion elements,",
			"then it totally depends, again, on what is the business you're building?",
			"What is the application you're writing?",
			"How big is your data?",
			"How fast or how slow is your computer?",
			"It might very well matter ultimately.",
			"And indeed, when we've seen some of our algorithms a couple of weeks",
			"ago, when we compared bubble sort and selection sort and merge sort,",
			"even though those were in a different category of running times,",
			"n log n and n squared, just recall the appreciable difference.",
			"Log of n in the context of searching is way better than n.",
			"So if your data structure is devolving into something long and stringy,",
			"recall that's, like, searching a phone book a thousand total pages.",
			"But binary search and not letting it get long and stringy",
			"gives you, like, 10 steps instead of 1,000",
			"steps in order to search those same pages.",
			"So, again, even in Week 0 we saw the appreciable difference",
			"between these different categories of running times.",
			"All right, well, let's see if we can't maybe",
			"take some of the best of both worlds.",
			"Thus far, again, we've seen arrays.",
			"We've seen linked lists.",
			"We've seen trees.",
			"What if we kind of get a little Frankenstein here and mash things",
			"together and take sort of the best features of these things",
			"and build up something grander.",
			"In fact, I feel like the Holy Grail of a data structure",
			"would be something for which cert and insertion aren't n, Big O of n,",
			"aren't Big O of log n.",
			"But wouldn't it be amazing if there's a data structure",
			"out there where the running time is like constant time, Big O of 1.",
			"That's the Holy Grail.",
			"If you can cleverly lay out your computer's memory in such a way",
			"that if you want to search for or insert a value, boom, you're done.",
			"Boom, you're done, and none of this linear or logarithmic running time.",
			"So let's see if we can't pursue that goal.",
			"Let me propose that we introduce this topic called hash tables.",
			"Hash table is another data structure that's",
			"essentially an array of linked lists.",
			"So, again, it's this Frankenstein monster,",
			"whereby we've combined arrays ultimately with linked list.",
			"Let's see how this is done.",
			"Let me propose that we first start with an array of size 26.",
			"And I'm going to start drawing my arrays vertically, just because it",
			"sort of works out better pictorially.",
			"But, again, these are all artist's renditions, anyway.",
			"Even though we always draw arrays left to right, that's completely arbitrary.",
			"So I'm going to start, for now, drawing my array top to bottom.",
			"And suppose that the data structure I care about now",
			"is going to be even more interesting the numbers.",
			"Suppose I want to store things like names, like dictionaries, or names",
			"like contacts in your phone.",
			"If you want to keep track of all the people you know,",
			"it would be great if it doesn't take linear time or logarithmic time",
			"to find people.",
			"Instead, constant time would seem to be even better.",
			"So here's an array, for instance, size 26.",
			"And I proposed that deliberately.",
			"In English, there's 26 letters, A through Z. So",
			"let's consider location 0 is A. Location 25 is Z.",
			"And if I now go and start inserting all of my friends into my new phone,",
			"into the contacts application, where might I put them?",
			"Well, let me go ahead and do this.",
			"Let me go ahead and think of each of these elements as, again, 0 through 25,",
			"or really A through Z.",
			"And let me, upon inserting a new friend or contact into my phone,",
			"let me put them into a location that has some relationship with the name itself.",
			"Let's not just start putting them at the very beginning.",
			"Let's not necessarily put them alphabetically per se.",
			"Let's actually put them at a specific location in this array, not just top",
			"to bottom, but at a specific entry.",
			"So suppose the first person I want to add to my contacts is Albus.",
			"Well, I'm going to propose that because Albus starts with an A,",
			"he is going to go into the A location, so the very first entry in this array.",
			"Suppose I next want to add Zacharias.",
			"Well, his name starts with Z. So he's going to go in the very last location.",
			"So, again, I'm jumping around.",
			"I went from 0 to 25.",
			"But it's an array, and I can do that in constant time.",
			"You can randomly index to any element using square brackets.",
			"So this is both constant time.",
			"I don't have to just put him right after Albus.",
			"I can put him wherever I want.",
			"Suppose the third person is Hermione.",
			"Well, I'm going to put her at location H. Why?",
			"Because I can do the math, and I can figure out H. OK,",
			"I can just jump immediately to that letter of the alphabet.",
			"And in turn, thanks to ASCII and doing a bit of arithmetic,",
			"I convert that to a number as well.",
			"So she ends up at 0, 1, 2, 3, 4, 5, 6, 7,",
			"because H ends up mapping to the eighth character, or location 7.",
			"All right.",
			"Who else?",
			"All these other people end up in my address book.",
			"And so they're all spread out.",
			"I don't have as many as 26 friends.",
			"So there's some gaps in the data there.",
			"But I fit everyone here.",
			"But there might be a problem.",
			"And you can perhaps see this coming.",
			"Thus far, I've kind of gotten lucky.",
			"And I've only know people whose names are-- uniquely start with a letter.",
			"But as soon as I meet someone at school and I add them to my contacts,",
			"well, now Harry, for instance, has to go in the same location.",
			"Now this is a problem if I want to store both Hermione and Harry,",
			"because their names both start with H.",
			"But, again if it's an array, it's absolutely a deal breaker.",
			"At that point, all things break down.",
			"Because I could, yes, grow the array.",
			"But if I grow the array, then it's size 27.",
			"And then it's, like, how do I know what number is what letter at that point?",
			"It just devolves into a complete mess.",
			"But if I borrow the idea of a linked list, what if I",
			"make my array an array of linked lists?",
			"So yes, even though there's this collision",
			"where both Hermione and Harry belong at the same location in the array,",
			"that's fine.",
			"In the event this happens, I'm just going to kind of stitch them together",
			"into a linked list from left to right.",
			"So it's not ideal.",
			"Because now it takes me two steps to get to Harry instead of 1,",
			"using simple arithmetic and square bracket notation.",
			"But heck, at least I can still fit him in my address book.",
			"So a bit of a trade off, but feels reasonable.",
			"Well, someone else, Hagrid--",
			"all right, it's not ideal that now it takes me",
			"three steps to get to Hagrid in my address book.",
			"But three is way better than not having him in there at all.",
			"So, again, we see a manifestation of a trade off here, too.",
			"But we've solved the problem.",
			"And a hash table is, indeed, exactly this data structure.",
			"It is an array of linked lists, at least it can be implemented as such.",
			"And it is predicated on introducing the notion of a hash function.",
			"This is actually something we'll see in other contexts before long.",
			"But a hash function is going to allow us to map not only Hermione, Harry,",
			"and Hagrid, but also Ron and Remus, Severus and Sirius",
			"to their respective locations deterministically.",
			"That is, there's no randomness involved here.",
			"Every time I look at these people's names,",
			"I'm going to figure out the location at which they belong",
			"and that location is never going to change.",
			"So how do I do this?",
			"Well, it turns out we can think back to problem solving itself",
			"and what functions are.",
			"So this is problem solving as we defined it.",
			"This is also a function in any language that takes inputs and outputs.",
			"A hash function is going to be sort of a secret sauce",
			"inside of this black box for now.",
			"And so what is a hash function?",
			"Well, a hash function is literally a function, either mathematically",
			"or in programming, that takes as input some string, in this case,",
			"like Hermione or Harry, and it returns some output.",
			"And the output of a hash function is usually a number.",
			"In this case, the number I want is going to be between 0 and 25.",
			"So in order to implement this notion of a hash table,",
			"not just pictorially on the screen, but in actual code,",
			"I'm literally going to have to write a function that takes a string,",
			"or if you will, char*, as input and returns an int between 0 and 25 so that",
			"I know how to convert Hermione or Harry or Hagrid to the number 7 in this case.",
			"So what does this hash function do?",
			"It takes as input something like Albus and it outputs 0.",
			"It takes someone like Zacharias, and it outputs 25.",
			"And you can probably see the pattern here.",
			"The code I would write in order to implement something like this is",
			"probably going to look at the user's input, that char*.",
			"And it's going to look at the first character, which",
			"is A or Z, respectively, for these two.",
			"And it's then going to do a little bit of math",
			"and subtract off, like, 65 or whatnot.",
			"And it's going to get me a number between 0 and 25,",
			"just like with Caesar or some of our past manipulations of strings.",
			"So from here, we can now take this building block, though, and perhaps",
			"solve our problems a little more effectively.",
			"Like, I don't love the fact that even though, yes, I've",
			"made room for Harry, and Hermione, and Hagrid,",
			"and now Luna, and Lily, and Lucius, and Lavender, some of these linked lists",
			"are getting a little long.",
			"And there's another term you can use here.",
			"These are kind of like chains, if you will,",
			"because they look like chain link fences or little links in a chain.",
			"These are chains or linked lists.",
			"But some of them are starting to get long.",
			"And it's a little stupid that I'm trying to achieve constant time, Big O of 1,",
			"but technically, even though some of the names literally take one step,",
			"some of them are taking two or three or four steps.",
			"So it's starting to devolve.",
			"So what would be an optimization here?",
			"If you start to get uncomfortable because you're so popular",
			"and you've got so many names in your contacts that looking up",
			"the H's, looking up the L's is taking more time than the others,",
			"what could we do to improve the situation and still use a hash table,",
			"still use a hash function?",
			"But what would maybe the logical solution",
			"be when you have too many collisions, you",
			"have too many names colliding with one another?",
			"How could we improve our performance and get at locations, again,",
			"closer to one step, not two, not three, not four?",
			"So literally one step, because that's our Holy Grail here.",
			"BRIAN: A few people have suggested you should look at more than just",
			"the first letter.",
			"Like, you could look at the second letter, for example.",
			"DAVID MALAN: Yeah.",
			"Nice.",
			"So if looking at one letter of the person's name",
			"is obviously insufficient.",
			"Because a whole bunch of us have names that start with H or A",
			"or Z or the like, well, why don't we look at two letters",
			"and therefore decrease the probability that we're",
			"going to have these collisions?",
			"So let me go ahead and restructure this.",
			"And focusing on the Hermione, Harry, and Hagrid problem,",
			"why don't we go ahead and take our array in the hash table, the vertical thing",
			"here, and let's think of it as maybe not just being H at that location.",
			"But what if we think of that location specifically",
			"as being HA, and then HB, HC, HD, HE, HF, all the way down to HZ.",
			"And then IA, IB, IC, and so forth, so we now",
			"enumerate all possible pairs of letters from AA to ZZ?",
			"But this would seem to spread things out, right?",
			"Because now Hermione goes in the HE location in the array.",
			"Now Harry goes in the HA.",
			"And now Hag-- oh, dammit.",
			"Like, Hagrid still goes in the same location.",
			"So what would maybe be a better fix?",
			"Again, this isn't horrible, like two steps is not a big deal,",
			"especially on fast computers.",
			"But, again, with large enough data sets, and if we're",
			"no longer talking about people in your contacts, but maybe",
			"all the people in the world who have Google accounts, or Twitter accounts,",
			"and the like, where you want to search this information quickly,",
			"you're going to have a lot of people whose names start with H and A",
			"and Z and everything else.",
			"It would be nice to spread them out further.",
			"So what could we do?",
			"Well, instead of using the first two letters,",
			"frankly I think the logical extension of this is to use the first three letters.",
			"So maybe this is the HAA bucket.",
			"This is the HAB, HAC, HAD, HAE, dot, dot, dot, all the way down to HZZ,",
			"and then IAA.",
			"But now when we hash our three friends, Hermione",
			"goes in the HER bucket so to speak, the elements of the array.",
			"Harry, HAR, goes in that bucket.",
			"And Hagrid now gets his own bucket, HAG, as would everyone else.",
			"So it seems to have solved this specific problem.",
			"You could still imagine, and I have to think harder and probably Google",
			"to see if there's other Harry Potter names that start with HAG or HAR",
			"or HER to find another collision.",
			"Because you could imagine using four letters instead.",
			"But what price are we paying?",
			"Like, I'm solving this problem again and again.",
			"And I'm getting myself literally faster look up time,",
			"because it's giving me one step.",
			"I can mathematically figure out by just doing",
			"a bit of ASCII math, what the number of the index",
			"is that I should jump to in this bigger and bigger array.",
			"But what price am I paying?",
			"Brian, any thoughts you'd like to relay?",
			"BRIAN: Yeah.",
			"A few people are saying it's going to take a lot of memory.",
			"DAVID MALAN: Yeah.",
			"My God, like, this is taking a huge amount of memory now.",
			"Previously, how much memory did it take?",
			"Well, let me pull up a little calculator here and do some quick math.",
			"So if we had originally 26 buckets, so to speak, elements in the array, that,",
			"of course, isn't that bad.",
			"That feels pretty reasonable, 26 slots.",
			"But the downside was that the chains might",
			"get kind of long, three names, four names, maybe even more.",
			"But if we have AA through ZZ, instead of A through Z, that's 26 times 26,",
			"that's 676 buckets.",
			"Doesn't sound like a huge deal, though that's bigger than most things",
			"we've done in memory thus far, not a huge deal.",
			"But if we have three, that's 26 possibilities times 26 times 26,",
			"for AAA through ZZZ.",
			"Now we have 17,576 buckets in my array.",
			"And the problem isn't so much that we're using that memory.",
			"Because honestly, if you need the memory, use it.",
			"That's fine.",
			"Just throw hardware at the problem.",
			"Buy and upgrade more memory.",
			"But the problem is that I probably don't know",
			"that many people whose names start with HAA or AZZ",
			"or any number of these combinations of letters of the alphabet.",
			"A lot of those buckets are going to be empty.",
			"But it doesn't matter if they're empty.",
			"If you want an array and you want random access, they have to be present",
			"so that your arithmetic works out, per Week 2,",
			"where you just use square bracket notation",
			"and jump to any of the locations in memory that you care about.",
			"So finding that trade off, or finding the inflection point with those trade",
			"offs, is kind of an art and/or a science, figuring out",
			"for your particular data, your particular application, which",
			"is more important, time or space or some happy medium in between the two.",
			"And with Problem Set 5, as you'll see, you'll",
			"actually have to figure out this balance in part",
			"by trying to minimize, ultimately, your own use of memory",
			"and your own use of computers' time.",
			"But let me point something out, actually.",
			"This notion of hash table, which up until now,",
			"definitely the most sophisticated data structure that we've looked at,",
			"it's kind of familiar to you in some way already.",
			"These are probably larger than the playing cards you have at home.",
			"But if you've ever played with a deck of cards,",
			"and the cards start out randomly, odds are you've, at some point,",
			"needed to sort them for one game or another.",
			"Sometimes you need to shuffle them entirely.",
			"If you want to be a little neat, you might sort them,",
			"not just by number, but also by suit.",
			"So hearts and spades and clubs and diamonds into separate categories.",
			"So honestly, I have this literally here just for the sake of the metaphor.",
			"We have four buckets here.",
			"And we've gone ahead and labeled them in advance with spade there.",
			"So that's one bucket.",
			"Here we have diamond shape here.",
			"And here we have--",
			"[GRUNTING]",
			"--here we have hearts here and then clubs here.",
			"So if you've ever sorted a deck of cards,",
			"odds are you haven't really thought about this very hard.",
			"Because it's not that interesting.",
			"You probably mindlessly start laying them out and sorting them",
			"by suits and then maybe by number.",
			"But if you've done that, you have hashed values before.",
			"If you take a look at the first card and you see,",
			"that, oh, it's the ace of diamonds.",
			"You know, yes, you might care ultimately that it's a diamond, that it's an ace.",
			"But for now, I'm just going to put it, for instance, into the diamond bucket.",
			"Here's the two of diamonds here.",
			"I'm going to put that into the diamond bucket.",
			"Here's the ace of clubs.",
			"So I'm going to put that over here.",
			"And you can just progressively hash one card after the other.",
			"And, indeed, hashing really just means to look at some input and produce,",
			"in this case, some numeric output that outputs the like bucket 0, 1, 2,",
			"or 3 based on some characteristic of that input,",
			"whether it's actually the suit on the card like I'm doing here,",
			"or maybe it's based on the letter of the alphabet here.",
			"And why am I doing this?",
			"Right?",
			"I'm not going to do the whole thing.",
			"Because 52 steps is going to take a while and get boring quickly, if not",
			"already.",
			"But why am I doing this?",
			"Because odds are you've probably done this.",
			"Not with the drama of actual buckets, you've probably just kind of laid them",
			"out in front of you.",
			"But why have you done that, if that's indeed something you have done?",
			"Yeah.",
			"Over to Sophia?",
			"AUDIENCE: There's a possibility that we could actually get to things faster,",
			"like, if we know what bucket it is.",
			"We might be able to even search things for, like, 0, 1, or less.",
			"DAVID MALAN: Yeah.",
			"AUDIENCE: Something like that.",
			"DAVID MALAN: Yeah.",
			"You start to gain these optimizations, right?",
			"At least, as a human, honestly, I can process four smaller problems",
			"just much easier than one bigger problem, that's size 52.",
			"I can solve four 13 card problems a little faster, especially",
			"if I'm looking for a particular card.",
			"Now I can find it among 13 cards instead of 52.",
			"So there's just kind of an optimization here.",
			"So you might take as input these cards, hash them into a particular bucket,",
			"and then proceed to solve the smaller problem.",
			"Now that's not what a hash table itself is all about.",
			"A hash table is about storing information, but storing information",
			"so as to get to it more quickly.",
			"So to Sophia's point, if indeed she just wants to find like the ace of diamonds,",
			"she now only has to look through a 13 sized problem, a linked",
			"list of size 13, if you will, instead of an array or a linked list of size 52.",
			"So a hash table allows you to bucketize your inputs, if you will,",
			"colloquially, and get access to data more quickly.",
			"Not necessarily in time one, in one step, it might be two.",
			"It might be four.",
			"It might be 13 steps.",
			"But it's generally fewer steps than if you",
			"were doing something purely linearly, or even logarithmically.",
			"Ideally, you're trying to pick your hash function in such a way",
			"that you minimize the number of elements that collide by using not A through Z,",
			"but AA through ZZ and so forth.",
			"So let me go ahead here and ask a question.",
			"What, then, is the running time when it comes",
			"to this data structure of a hash table?",
			"If you want to go ahead and search in a hash table, once all of the data",
			"is in there, once all of my contacts are there,",
			"how many steps does your phone have to take, given n contacts in your phone,",
			"to find Hermione or Hagrid or anyone else?",
			"So I see, again, 80% of you are saying constant time, Big O of 1.",
			"And, again, constant time might mean one step, two steps, four steps,",
			"but some fixed number, not dependent on n.",
			"18% of you or so are saying linear time.",
			"And I have to admit, the 20% of you or so that",
			"said linear time are technically, asymptotically, mathematically correct.",
			"And here we begin to see sort of a distinction between the real world",
			"and academia.",
			"So the academic here, or rather the real world here, the real world programmer",
			"would say, just like Sophia did, obviously, a bucket with 13 cards in it",
			"is strictly better than one bigger bucket with 52 cards.",
			"That is just faster.",
			"It's literally four times as fast to find or to flip",
			"through those 13 cards instead of 52.",
			"That is objectively faster.",
			"But the academic would say yes, but asymptotically-- and asymptotically",
			"is just a fancy way of saying as n gets really large,",
			"the sort of wave of the hand that I keep describing, asymptotically taking",
			"13 steps is technically big O of n.",
			"Why?",
			"Well, in the case of the cards here, it's technically n divided by 4.",
			"Yes, it's 13.",
			"But if there's n cards total, technically, the size of this bucket",
			"is going to end up being m divided by 4.",
			"And what did we talk about when we talked about Big O and omega?",
			"Well, you throw away the lower order terms.",
			"You get rid of the constants, like the divide by 4,",
			"or the plus something else.",
			"So we get rid of that.",
			"And it's technically a hash table searching.",
			"It is still in Big O of n.",
			"But here, again, we see a contrast between the real world",
			"and the theoretical world.",
			"Like, yes, if you want to get into an academic debate,",
			"yes, it's still technically the same as a linked",
			"list or an array, at which point you might as well just search",
			"the thing left to right linearly, whether it's an array or a linked list.",
			"But come on.",
			"Like, if you actually hash these values in advance,",
			"and spread them out into 4, or 26, or 576 buckets,",
			"that is actually going to be faster when it comes to wall clock time.",
			"So when you literally look at the clock on the wall,",
			"less time will pass taking Sophia's approach than taking",
			"an array or linked list approach.",
			"So here, those of you who said Big O of n are correct.",
			"But when it comes to the real world programming,",
			"honestly, if it's faster than actual n steps,",
			"that may very well be a net positive.",
			"And so perhaps we should be focusing more on practice and less, sometimes,",
			"on the theory of these things.",
			"And indeed that's going to be the challenge.",
			"The Problem Set 5 to which I keep alluding",
			"is going to challenge you to implement one",
			"of these data structures, a hash table, with 100,000 plus English words.",
			"We're going to, in a nutshell, give you a big text file containing",
			"one English word per line.",
			"And among your goals is going to be to load all of those 140,000 plus words",
			"into your computer's memory using a hash table.",
			"Now if you are simplistic about it, and you",
			"use a hash table with 26 buckets, A through Z,",
			"you're going to have a lot of collisions.",
			"If there's 140,000 plus English words, there's a lot of words in there",
			"that start with A, or B, or Z, or anything in between.",
			"If you maybe then go with AA through ZZ, maybe that's better,",
			"or AAA through ZZZ, maybe that's better.",
			"But at some point, you're going to start to use",
			"too much memory for your own good.",
			"And one of the challenges, optionally, of Problem Set 5,",
			"is going to be to playfully challenge your classmates whereby,",
			"if you opt into this, you can run a command that will put you",
			"on the big board which will show on the course's website exactly how much",
			"or how little RAM or memory you're using, and how little",
			"or how much time your code is taking to run.",
			"And so we just put aside the sort of academic waves of the hand saying,",
			"well, yes, all of your code is Big O of n.",
			"But n divided by 4, Sophia's approach, is way better in practice than n",
			"itself.",
			"And we'll begin to tease apart the dichotomy",
			"between theory here and practice.",
			"But these aren't the only ways to lay things out in memory.",
			"And we wanted to show you just a few other ideas that come out now",
			"that we have all of these building blocks.",
			"One of which is the data structure that we're going to call a trie.",
			"Trie is actually short for the word retrieval,",
			"even though it's not quite pronounced the same.",
			"It's also known as a prefix tree.",
			"And it's a different type of tree that is typically",
			"used to store words, or other more sophisticated pieces of data",
			"instead of just numbers alone.",
			"So a trie is actually a tree made up of arrays.",
			"So you can kind of see a pattern here.",
			"A hash table was an array of linked lists.",
			"A trie is a tree, each of whose nodes is an array.",
			"So at some point, computer scientists started getting a little creative",
			"and started just, like, literally smashing together",
			"different data structures to see what they could come up with, it seems.",
			"And so a trie begins to look like this.",
			"But it has this amazing property that's better than anything in theory",
			"we've seen before.",
			"Here is one node in a try.",
			"And it's a node in the sense that this would be like a rectangle or square.",
			"But inside of that node is literally an array of size 26 in this case.",
			"And each of those locations or buckets, if you will represent A through Z.",
			"And what we're going to do is any time we insert a word, like a name,",
			"like Harry, or Hagrid, or Hermione, or anyone else,",
			"we are going to walk through the letters of their name, like, H-A-G-R-I-D,",
			"and we are going to follow a series of pointers from one node to another",
			"as follows.",
			"So for instance, if this is A through Z, or 0 through 25, here is location H.",
			"So if the goal at the moment is to insert the first of our contacts,",
			"for instance, Harry, I'm going to start by looking",
			"at the first node, the root of the tree, looking up the H location.",
			"And I'm going to kind of make mental note that Harry starts there,",
			"the H in Harry starts there.",
			"Then if I want to insert the A in Harry, I'm",
			"going to go ahead and add a new node, representing 26 letters.",
			"But I'm going to keep track of the fact that, OK, A is here.",
			"So now I'm going to have another pointer--",
			"oh, I'm sorry-- not Harry, Hagrid first, H-A-G-R-I-D. So what have I just done?",
			"A trie, again, is a tree, each of whose nodes is an array.",
			"And each of those arrays is an array of pointers to other nodes.",
			"So, again, we're really just mashing up everything together here.",
			"But it's the same building blocks as before.",
			"Each node in this tree, top to bottom, is an array of pointers to other nodes.",
			"And so, if I wanted to check if Hagrid is in my contacts,",
			"I literally start at the first node, and I follow the H pointer.",
			"I then follow the A pointer.",
			"I then follow the G pointer, the R pointer, the I pointer.",
			"And then I check at the D pointer.",
			"Is there a Boolean value inside of that structure-- more on that another time,",
			"perhaps--",
			"that just says, yes or no, there is someone named H-A-G-R-I-D",
			"in my contacts.",
			"Notice there's no other letters noted at the moment.",
			"And there's no other green boxes.",
			"Green just denotes a Boolean value for our purposes now.",
			"So that means there's no one whose name is H-A-G-R-I-A, or R-I-B, or R-I-C.",
			"It's only H-A-G-R-I-D that exists in my contacts.",
			"But notice what happens next.",
			"Now if I go ahead and insert Harry, notice",
			"that Harry and Hagrid share the H, the A, and then this third node.",
			"But then Harry needs to follow a different pointer",
			"to store the R and the Y. And notice the green there.",
			"It's sort of a checkmark in the data structure, a Boolean value, that's",
			"saying yes.",
			"I have someone in my context named H-A-R-R-Y.",
			"And then, if we add Hermione, she shares the H, and then also the second node.",
			"But Hermione requires some new nodes all together.",
			"But notice this key property, the reason for this sort of complexity,",
			"because this is probably the weirdest structure we've seen thus far,",
			"is that even if I have a billion names in my phone book,",
			"how many steps literally does it take me to find Hagrid?",
			"Someone?",
			"Feel free to chime in the text, the chat window if you like?",
			"Even if I have a billion names in my contacts,",
			"how many steps does it take for me to look up and check",
			"if Hagrid is among them?",
			"BRIAN: People are saying six.",
			"DAVID MALAN: Six, H-A-G-R-I-D. If I have 2 billion names, 4 billion names,",
			"how many steps does it take?",
			"6, and this is what we mean by constant time, constant time at least",
			"in the length of the humans' names in the data structure.",
			"So what does this mean?",
			"No matter how many names you cram into a trie data",
			"structure, the number of other names does not",
			"impact how many steps it takes for me to find Harry or Hagrid or Hermione",
			"or anyone else.",
			"It is only dependent on the length of their name.",
			"And here's where we can get a little academic.",
			"If you assume that there's a finite number of characters",
			"in any human, real or imaginary's name, maybe it's 20, or 100, or whatever.",
			"It's more than 6, but it's probably fewer than hundreds.",
			"And then you can assume that that's constant.",
			"So it might be Big O of, like, 200 characters",
			"for someone with a super long name.",
			"But that's constant.",
			"And so technically a try gives you that Holy Grail",
			"of look up times and insertion times of Big O of 1.",
			"Because it is not dependent on n, which is the number",
			"of other names in the data structure.",
			"It is dependent only on the length of the name you're inputting.",
			"And if you assume that all names in the world are reasonably linked,",
			"less than some finite value, like 6, or 200, or whatever",
			"it is, then you can call that.",
			"And it technically is Big O of 1.",
			"That is constant time.",
			"So here is the goal of this whole day, like, trying to get to constant time.",
			"Because constant time is better than, it would",
			"seem, linear time, or logarithmic time, or anything else we've seen.",
			"But-- but-- but-- again, there's always a trade off.",
			"What price have we just paid if you see it?",
			"Why are tries not necessarily all that?",
			"There's still a catch.",
			"Daniel?",
			"AUDIENCE: For example, if let's say you have two people in your contact list.",
			"One person was named Daniel and one person was named Danielle.",
			"And you know that Daniel is in your list.",
			"So the L would have this Boolean operator of true.",
			"But then, how would you get to Danielle, if your L was an operator",
			"and it didn't point to another L for Danielle?",
			"DAVID MALAN: Really good question, a corner case, if you will.",
			"What if someone's name is a substring of another person's name?",
			"So Daniel, D-A-N-I-E-L, and I think you're saying Danielle,",
			"D-A-N-I-E-L-L-E. So the second name is a little longer.",
			"Let me stipulate that we can solve that.",
			"I have not shown code that represents each of the nodes in this tree.",
			"Let me propose that we could continue having arrows even below.",
			"So if we were to have Daniel in this tree,",
			"we could also have Danielle by just having",
			"a couple of more nodes below Daniel and just having another green checkmark.",
			"So it is solvable in code, even though it's not",
			"obvious from the graphical representation, but absolutely",
			"a corner case.",
			"But thankfully, it is solvable in tries.",
			"What might another downside be, though, of a trie?",
			"Like, you do get Big O of 1 time.",
			"You can solve the Daniel-Danielle problem.",
			"But there's still a price being paid.",
			"",
			"Any thoughts?",
			"Yeah.",
			"How about over to Ethan, if I'm saying it right?",
			"AUDIENCE: Yeah.",
			"I'm Ethan.",
			"DAVID MALAN: Ethan.",
			"AUDIENCE: I think it's because it would just take a lot of memory",
			"to house all of that.",
			"And that could take a lot of time.",
			"It could slow down the system.",
			"DAVID MALAN: Exactly.",
			"Yeah.",
			"You can kind of see it from my picture alone.",
			"We only added three names to this data structure.",
			"But my God, like, there's dozens, maybe 100 plus pointers",
			"pictured here, even though they might all be null.",
			"Right?",
			"If the absence of an arrow here suggests that they're null, 0x0, but even",
			"storing null, 0x0, is 8 0 bits.",
			"So this is not lacking for actual memory usage,",
			"we're just not using it very efficiently.",
			"We have spent a huge number of bits, or bytes,",
			"or however you want to measure it.",
			"Because look, even with the H's, I'm using one pointer out of 26.",
			"25 pointers are probably initialized to null,",
			"which means I'm wasting 25 pointers.",
			"And you can imagine the lower and lower you get in this tree,",
			"the less likely there is to be a name that even starts with H-A-G-R-I-D.",
			"Daniel came up with a good example with Danielle.",
			"But that's not going to often happen.",
			"Certainly, the lower you get in this tree.",
			"So as Ethan says, you're wasting a huge amount of memory.",
			"So yes, you're gaining constant time look ups, but my God, at what price?",
			"You might be using megabytes, gigabytes of storage space.",
			"Because, again, the most important property of an array",
			"is that it's all contiguous.",
			"And therefore, you have random access.",
			"But if you have to have every node containing",
			"an array of size 26 or anything else, you",
			"have to spend the memory over and over again.",
			"So there, too, is a trade off.",
			"While this might be theoretically ideal, theory",
			"does not necessarily mean practice.",
			"And sometimes, designing something that is textbook less efficient,",
			"might actually be more efficient in the real world.",
			"And in Problem Set 5, in your own spellchecker,",
			"when you build up this dictionary that we then",
			"use to spell check very large corpuses of text,",
			"will you begin to experience some of those real world trade offs yourself.",
			"Well, we wanted to end today with a look at what else",
			"you can do with these kinds of data structures,",
			"just to give you a taste of where else you can go with this",
			"and what other kinds of problems you can solve.",
			"Again, thus far, we've looked at arrays, which are really",
			"the simplest of data structures.",
			"And they're not even structures per se.",
			"It's just contiguous blocks of memory.",
			"We then introduced linked lists, of course,",
			"where you have this one dimensional data structure that",
			"allows you to stitch together nodes and memory, giving you dynamic allocation.",
			"And if you want deallocation, inserting and deleting nodes if you want,",
			"then we had trees, which kind of gives us the best of both worlds,",
			"arrays and linked lists.",
			"But we have to spend more space and use more pointers.",
			"Then, of course, hash tables kind of merged together",
			"two of those ideas, arrays and the linked lists.",
			"And that starts to work well.",
			"And indeed, that's what you'll experiment with your own spellchecker.",
			"But then, of course, there's tries, which at first glance",
			"seem better, but not without great cost, as Ethan says.",
			"So it turns out, with all of those building blocks at your disposal,",
			"you can actually use them as lower level implementation details",
			"to solve higher level problems.",
			"And this is what are known as abstract data structures, or abstract data",
			"types.",
			"An abstract data structure is kind of a mental structure",
			"that you can imagine, implementing some real world problem,",
			"typically, that's implemented with some other data structure.",
			"So you're sort of writing code at this level.",
			"But you're thinking about what you've built ultimately at this level.",
			"And that's abstraction, taking lower level implementation",
			"details, simplifying them for the sake of discussion or problem",
			"solving higher up.",
			"So what's one such data structure?",
			"A queue is a very common abstract data structure.",
			"What is a queue?",
			"Well, those of you who grew up, say, in Britain",
			"call a line outside of a store a queue.",
			"And that's, indeed, where it gets its name.",
			"A queue is a data structure that has certain properties.",
			"So if you're standing outside of a store or a restaurant,",
			"in healthier times, waiting to get in, you're generally in a queue.",
			"But there's an important property of a queue.",
			"At least, if you live in a fair society, you'd",
			"like to think that if you are the first one in line,",
			"you are the first one to get out of line.",
			"First in, first out.",
			"It would be kind of obnoxious if you're first in line",
			"and then they start letting people in who are behind you in that queue.",
			"So a queue, if it's implemented correctly,",
			"has a property known as FIFO, first in, first out.",
			"And we humans would think of that as just a fair property.",
			"And a queue generally has two operations associated with it at least,",
			"enqueue and dequeue.",
			"Those are just conventions.",
			"You could call it add and remove, or insert, delete, whatever.",
			"But enqueue and dequeue are sort of the more common ones to say.",
			"So enqueuing means you walk up to the store",
			"and you get in line, because you have to wait.",
			"Dequeue means they're ready to serve you or have you.",
			"And so you get out of line.",
			"That's dequeue.",
			"And again, FIFO is just a fancy acronym that",
			"describes a key property of that, which is that it's first in, first out.",
			"So how could you implement a queue then?",
			"Well, what's interesting about that data structure is that it's abstract.",
			"Right?",
			"It's more of an idea than an actual thing in code.",
			"You want to implement some kind of fair queuing system.",
			"And so you think of it as a queue.",
			"But frankly, if we're going to translate that example to code,",
			"you could imagine using an array of persons.",
			"That could implement a queue.",
			"You could use a linked list of persons.",
			"Frankly, either of those would actually work.",
			"Underneath the hood is the lower level implementation details.",
			"But what would be a problem, if we translate this real world",
			"analogy like queuing up outside of a store to get in, into code",
			"and you used an array?",
			"What would a downside be of using an array",
			"to represent a queue, in general, even though we're making a bit of a leap",
			"from real world to code suddenly?",
			"But there's probably a downside.",
			"What might a downside be of using an array to implement a queue, Ryan?",
			"AUDIENCE: If you're using an array, you can't really",
			"just take out the existing values.",
			"Because if you were thinking about doing this in a line,",
			"you would have to take out the first person, take out the second person.",
			"But you can't really dynamically sort of change the memory after that.",
			"DAVID MALAN: Yeah.",
			"Yeah.",
			"That's a really good point.",
			"Think about a line.",
			"Suppose that there's a line that can fit 10 people outside the Apple store.",
			"Because Apple's pretty good right now during the health crisis of letting",
			"people in only so many at a time.",
			"So suppose they have room for 10 people, six feet apart.",
			"That's actually a pretty apt analogy, this year more than ever.",
			"But as Ryan says, if you want to dequeue someone, then the first person in line",
			"is going to go into the store.",
			"And then the second person, you're going to dequeue them.",
			"They go into the store.",
			"The problem with an array, it would seem,",
			"is that now you have essentially empty spaces at the beginning of the line.",
			"But you still don't have room at the end of the line for new people.",
			"Now there's an obvious real world solution there.",
			"You just say, hey, everyone, would you mind taking a few steps forward?",
			"But that's inefficient.",
			"Not so much in the human world, you've got to get into the store.",
			"But in code, that's copying of values.",
			"You have to move, like, eight values two places over if two people were just",
			"let into the store.",
			"So now your dequeue operation is Big O of n.",
			"And that doesn't feel quite ideal.",
			"And we can do better than that if we're a little",
			"clever with some local variables and such.",
			"But that would be one challenge of a queue,",
			"certainly, is just how well we could implement it using an array.",
			"So you might imagine, too, an array is limited, too.",
			"Because it would kind of be obnoxious if you get to the Apple store.",
			"There's already 10 people in line.",
			"And they don't let you get in line.",
			"They say, sorry, we're all full for today, when they're obviously not.",
			"Because eventually there'll be more room in the queue.",
			"A linked list would allow you to keep appending more and more people.",
			"And even if the line outside the store gets crazy long,",
			"at least the linked list allows you to service",
			"all of the customers who are showing up over time.",
			"An array of fixed size would make that harder.",
			"And, again, you could allocate a bigger array.",
			"But then you're going to have to ask all the customers, hey,",
			"could everyone come over here?",
			"No.",
			"Go back over there.",
			"I mean, you're constantly moving humans, or values and memory, back and forth.",
			"So that is only to say that to implement this real world",
			"notion of a queue, which is very commonly used even in the computer",
			"world to represent certain ideas, for instance, the printer queue, when you",
			"send something to the printer, especially on a campus or in a company,",
			"there's a queue.",
			"And ideally, the first person who printed",
			"is the first one who gets their printouts thereafter.",
			"Queues are also used in software.",
			"But there's other abstract data types out there besides queues.",
			"One of them is called a stack.",
			"So a stack is a data structure that can also",
			"be implemented underneath the hood using arrays or linked lists or,",
			"heck, maybe something else.",
			"But stacks have a different property.",
			"It's last in, first out.",
			"Last in, first out.",
			"So if you think about the trays in the cafeteria,",
			"in healthier times when everyone was on campus using trays from a cafeteria,",
			"you'll recall, of course, that trays tend to get stacked like this.",
			"And the last tray to go on top of the stack is the first one to come out.",
			"If you go to a clothing store, your own closet,",
			"if you don't hang things on hangers or put them in drawers,",
			"but kind of stack them, like here, like all of these sweaters,",
			"this is a stack of sweaters.",
			"And how do I get at a sweater I want?",
			"Well, the easiest way to do it is with last in, first out.",
			"So I constantly take the black sweater, the black sweater.",
			"But if I've stored all of my sweaters in this stack,",
			"you may never get to the sort of lower level ones,",
			"like the red or the blue sweater because, again, of this data structure.",
			"So LIFO, last in, first out, is in fact, the property",
			"used to characterize stacks.",
			"And stacks are useful or not useful, depending on the real world context.",
			"But even within computing, we'll see applications over time",
			"where stacks indeed come into play.",
			"And those two operations that those things support are generally called",
			"push and pop.",
			"It's the same thing as add or remove or insert or delete, but the terms of art",
			"are generally push and pop, where this is me popping a value off of the stack.",
			"This is me pushing a value onto the stack.",
			"But, again, it's last in, first out, otherwise known as LIFO.",
			"And then there's this other data structure",
			"that actually has a very real world analog, known as a dictionary.",
			"A dictionary is an abstract data type, which",
			"means you can implement it with arrays, or linked lists, or hash tables,",
			"or tries, or whatever else, an abstract data type",
			"that allows you to associate keys with values.",
			"And the best analog here is indeed in the real world.",
			"What is a dictionary, like an old school dictionary",
			"that's actually printed on paper in book form?",
			"What is inside that book?",
			"A whole bunch of keys, a whole bunch of boldfaced words, like apple and banana",
			"and so forth, each of which have definitions, otherwise known as values.",
			"And they're often alphabetized to make it easier",
			"for you to find things so that you can look things up more quickly.",
			"But a dictionary is an abstract data type that associates keys with values.",
			"And you look up the values by way of their keys,",
			"just like you look up a word's definition by way of the word itself.",
			"And dictionaries are actually kind of all around us, too.",
			"You don't think of them in these terms, probably.",
			"But if you've ever been to Sweet Green, for instance, in New Haven",
			"or in Cambridge or elsewhere, this is a salad place",
			"where nowadays, especially, you can order in advance online or on an app",
			"and then go into the store and pick up your food from a shelf.",
			"But the shelf, the way they do it here in Cambridge and in other cities,",
			"is they actually have letters of the alphabet on the shelves, A, B, C, D, E,",
			"F, all the way through Z. The idea being that if I go in to pick up my salad,",
			"it's probably on the D section, if Brian goes in to pick up his,",
			"it's in the B section, and so forth.",
			"Now here, too, you can imagine perverse corner cases",
			"where this data structure, this dictionary whereby",
			"letters of the alphabet map to values, which are people's salad,",
			"is not necessarily fail proof.",
			"Can you think of a perverse corner case where",
			"Sweet Green's very wonderful, methodical system actually breaks down?",
			"Can you think of a limitation here, even if you've never been to Sweet Green",
			"or never eaten a salad, what could break down with this system",
			"if going into a store and picking something up based on your name?",
			"Any thoughts?",
			"BRIAN: A few people say there might be a problem",
			"if two people have the same name.",
			"DAVID MALAN: Yeah.",
			"If two people have the same names, you start to stack things up.",
			"So literally, Sweet Green will start stacking one salad on top of the other.",
			"So there is actually an interesting incarnation",
			"of one data type being built on top of yet another data type.",
			"So, again, all of these are sort of like custom Scratch pieces, if you will,",
			"that we're constantly sort of reassembling into more",
			"interesting and powerful ideas.",
			"But at some point, if there's a lot of B names, or D names,",
			"or any letter of the alphabet, I surely see a finite height to this shelf.",
			"So it's kind of as though Sweet Green has implemented their dictionary",
			"using stacks with arrays.",
			"Because arrays are fixed size.",
			"So there's surely only so many inches of space here vertically.",
			"So you can see a real world limitation.",
			"So what does Sweet Green do if that happens?",
			"They probably just kind of cheat and put the D's in the C section,",
			"or the D's in the E section.",
			"Like, who really cares in the real world?",
			"Your eyes are probably going to skim left and right.",
			"But algorithmically, that is slowing things down.",
			"And in the worst case, if you're really late to pick up your salad,",
			"or if Sweet Green is really popular and there's",
			"a huge number of salads on the shelf, your name might be Albus,",
			"but your salad might end up way over here in the Z section",
			"if they're just out of room.",
			"And so that, too, is a valid algorithmic decision,",
			"to just make room somewhere else.",
			"But, again, trade offs between time and space.",
			"And so we thought we'd end on a note, thanks to some friends of ours",
			"at another institution who made a wonderful visualization that",
			"distinguished these notions of stacks versus queues.",
			"Stack and, again, a queue are these abstract data types that",
			"can be implemented in different ways.",
			"They have different properties, each of them respectively FIFO or LIFO.",
			"And here, for instance, is a final look in our final moments",
			"together here today about how these ideas manifest themselves, perhaps",
			"in the real world, not unlike this stack of sweaters here.",
			"[VIDEO PLAYBACK]",
			"[MUSIC PLAYING]",
			"- Once upon a time, there was a guy named Jack.",
			"When it came to making friends, Jack did not have the knack.",
			"So Jack went to talk to the most popular guy he knew.",
			"He went up to Lou and asked, \"What do I do?\"",
			"Lou saw that his friend was really distressed.",
			"\"Well,\" Lou began, \"just look how you're dressed.",
			"Don't you have any clothes with a different look?\"",
			"\"Yes,\" said Jack.",
			"\"I sure do.",
			"Come to my house, and I'll show them to you.\"",
			"So they went off to Jack's.",
			"And Jack showed Lou the box where he kept all his shirts",
			"and his pants and his socks.",
			"Lou said, \"I see you have all your clothes in a pile.",
			"Why don't you wear some others once in a While?\"",
			"Jack said, \"Well, when I remove clothes and socks,",
			"I wash them and put them away in the box.",
			"Then comes the next morning, and up I hop.",
			"I go to the box and get my clothes off the top.\"",
			"Lou quickly realized the problem with Jack.",
			"He kept clothes, CDS, and books in the stack.",
			"When he reached for something to read or to wear,",
			"he chose top book or underwear.",
			"Then, when he was done, he would put it right back.",
			"Back it would go, on top of the stack.",
			"\"I know the solution!\" said a triumphant Lou.",
			"\"You need to learn to start using a queue.\"",
			"Lou took Jack's clothes and hung them in a closet.",
			"And when he had emptied the box, he just tossed it.",
			"Then he said, \"Now, Jack, at the end of the day, put your clothes on the left",
			"when you put them away.",
			"Then tomorrow morning when you see the sunshine, get",
			"your clothes from the right, from the end of the line.",
			"Don't you see?\" said Lou, \"it will be so nice.",
			"You'll wear everything once before you wear something twice.\"",
			"And with everything in queues in his closet and shelf,",
			"Jack started to feel quite sure of himself, all thanks",
			"to Lou and his wonderful queue.",
			"[END PLAYBACK]",
			"DAVID MALAN: All right.",
			"That's it for CS50.",
			"We will see you next time.",
			"[MUSIC PLAYING]",
			""
		],
		"is_youtube": false
	},
	"video_028": {
		"section": "CS50x 2021",
		"subsection": "Week 5",
		"unit": "Shorts",
		"video_sources": [
			"https://edx-video.net/HARCS50X2016-V030600_DTH.mp4",
			"https://edx-video.net/HARCS50X2016-V030600/HARCS50X2016-V030600.m3u8"
		],
		"video_duration": 1402,
		"speech_period": [
			2.832, 2.838, 2.89, 6.74, 2.31, 4.0, 2.27, 4.05, 3.08, 4.26, 5.32, 2.83,
			4.94, 2.67, 1.32, 4.67, 3.87, 2.33, 4.87, 2.66, 6.17, 4.04, 3.302, 2.208,
			3.26, 1.92, 2.46, 3.86, 3.32, 3.4, 2.46, 2.64, 2.15, 3.99, 0.7, 3.275,
			4.455, 3.55, 4.14, 3.49, 4.34, 2.09, 4.28, 3.11, 3.87, 2.95, 4.78, 4.44,
			3.4, 4.52, 3.0, 2.865, 2.375, 3.64, 3.359, 1.791, 5.84, 4.11, 3.49, 5.5,
			5.42, 1.67, 2.99, 2.91, 2.79, 4.04, 3.83, 3.13, 5.05, 4.28, 5.84, 2.651,
			2.999, 2.499, 3.401, 3.52, 3.38, 3.34, 2.31, 2.3, 5.39, 4.42, 3.98, 3.77,
			4.52, 2.72, 3.874, 2.166, 3.27, 3.16, 3.63, 6.15, 2.53, 3.3, 1.359, 2.041,
			2.65, 2.82, 3.65, 2.58, 3.39, 2.3, 2.31, 4.28, 3.0, 2.34, 3.43, 3.69, 2.5,
			2.041, 2.059, 2.17, 2.7, 2.6, 1.5, 2.708, 1.612, 1.91, 2.39, 3.787, 1.333,
			4.957, 1.833, 4.732, 1.958, 3.33, 5.21, 3.84, 4.952, 0.708, 2.86, 3.85,
			1.52, 1.54, 1.59, 4.139, 1.791, 3.212, 1.958, 2.54, 3.32, 2.18, 3.76,
			4.49, 1.77, 3.52, 3.09, 1.7, 2.737, 2.083, 2.458, 2.902, 2.08, 4.42,
			2.165, 2.775, 1.96, 3.606, 2.454, 3.94, 2.038, 2.291, 2.249, 1.381, 2.871,
			1.9, 2.15, 2.67, 2.81, 2.2, 3.21, 3.73, 2.82, 2.34, 1.54, 2.916, 3.124,
			2.32, 5.16, 3.676, 2.624, 3.49, 2.25, 3.63, 4.7, 3.61, 3.62, 1.54, 1.916,
			5.264, 1.34, 3.27, 1.765, 2.875, 2.084, 2.166, 4.44, 3.69, 4.08, 5.08,
			2.86, 2.587, 3.083, 2.08, 3.771, 2.499, 3.23, 3.89, 1.85, 1.93, 1.833,
			4.287, 3.055, 2.375, 5.265, 3.945, 2.19, 3.13, 3.92, 3.16, 2.34, 3.51,
			4.52, 1.89, 2.15, 2.91, 2.91, 2.55, 1.36, 1.61, 2.29, 2.37, 3.61, 3.92,
			3.84, 2.15, 2.85, 3.26, 3.67, 5.28, 3.3, 2.42, 2.487, 1.833, 2.8, 4.49,
			5.1, 2.46, 2.19, 3.31, 2.27, 3.1, 1.07, 3.79, 3.56, 2.77, 2.06, 3.25,
			3.08, 2.34, 3.22, 2.6, 2.639, 2.791, 1.62, 2.49, 3.29, 2.67, 2.866, 2.374,
			3.38, 1.72, 2.549, 3.291, 1.61, 1.93, 3.65, 4.58, 2.309, 2.291, 3.95,
			0.729, 2.041, 4.39, 3.02, 1.32, 1.875, 2.095, 3.42, 2.74, 1.89, 3.35,
			2.875, 3.155, 2.66, 2.72, 2.58, 3.42, 3.17, 1.351, 2.749, 1.65, 2.56,
			2.48, 2.78, 2.333, 1.847, 2.22, 3.381, 1.749, 2.96, 3.47, 2.17, 3.19,
			2.52, 6.05, 3.441, 1.749, 2.81, 2.48, 3.77, 2.299, 1.791, 2.76, 3.48,
			2.93, 4.7, 3.54, 1.53, 1.25, 3.24, 2.64, 4.48, 1.41, 2.49, 3.02, 2.67,
			3.05, 2.42, 3.149, 5.591, 2.05, 2.955, 1.624, 1.911, 4.06, 4.23, 2.13,
			2.416, 3.624, 4.55, 2.35, 3.38, 2.57, 2.73, 3.26, 2.33, 3.23, 1.333,
			2.727, 1.82, 3.01, 2.0, 1.601, 1.999, 1.5, 3.61, 2.96, 5.47, 3.96, 2.59,
			4.12, 2.82, 4.53, 4.03, 3.0, 1.37, 1.7, 2.749, 1.221, 3.22, 4.357, 2.333,
			2.37, 1.25, 3.32, 3.49, 4.38, 2.71, 4.93, 2.11, 2.5, 4.11, 5.42, 5.21,
			3.59, 2.17, 2.31, 3.754, 2.166, 2.34, 2.785, 3.745, 2.38, 2.27, 2.27,
			3.09, 3.15, 1.25, 4.72, 2.14, 3.14, 6.27, 0.787, 1.583, 2.69, 3.78, 2.52,
			3.34, 1.877, 1.583, 2.208, 1.402, 4.92, 3.89, 3.84, 2.49, 3.38, 3.135,
			4.055, 3.57, 2.13, 2.499, 2.781, 2.73, 2.222, 1.708, 2.53, 2.92, 1.85,
			2.16, 3.2, 4.42, 0.634, 1.916, 3.38, 1.24, 4.35, 3.025, 2.375, 5.18, 2.86,
			3.44, 3.68, 2.93, 2.51, 2.31, 2.93, 5.48, 1.92, 3.53, 3.04, 4.367, 1.583,
			2.04, 2.21, 2.45, 2.91, 1.578
		],
		"transcript_en": [
			">> [MUSIC PLAYING]",
			"",
			">> DOUG LLOYD: OK, so at this point in the course,",
			"we've covered a lot of the basics of C. We know a lot about variables, arrays,",
			"pointers, all that good stuff.",
			"Those are all sort of built in to see as the fundamentals,",
			"but we can do more, right?",
			"We can combine things together in interesting ways.",
			">> And so let's do that, let's start to branch out of what C gives us,",
			"and start to create our own data structures using these building",
			"blocks together to do something really valuable, useful.",
			"One way we can do this is to talk about collections.",
			"So so far we've had one kind of data structure for representing collections",
			"of like values, similar values.",
			"That would be an array.",
			"We have collections of integers, or collections of characters and so on.",
			">> Structures are also sort of a data structure for collecting information,",
			"but it's not for collecting like values.",
			"It usually mixes different data types together inside of a single box.",
			"But it's not itself used to chain together",
			"or connect together similar items, like an array.",
			"Arrays are great for element look up, but recall",
			"that it's very difficult to insert into an array,",
			"unless we're inserting at the very end of that array.",
			">> And the best example I have for that is insertion sort.",
			"If you recall our video on insertion sort,",
			"there was a lot of expense involved in having",
			"to pick up elements, and shift them out of the way to fit something",
			"into the middle of your array.",
			"Arrays also suffer from another problem, which is inflexibility.",
			"When we declare an array, we get one shot at it.",
			"We get to say, I want this many elements.",
			"Might be 100, it might be 1,000, it might",
			"be x where x is a number that the user gave us at a prompt or at the command",
			"line.",
			">> But we only get one shot at it, we don't get to then say oh, actually I",
			"needed 101, or I needed x plus 20.",
			"Too late, we've already declared the array, and if we want to get 101 or x",
			"plus 20, we have to declare an entirely different array,",
			"copy all the elements of the array over, and then we have enough.",
			"And what if we are wrong again, what if we actually need 102, or x plus 40,",
			"we have to do this again.",
			"So they're very inflexible for resizing our data,",
			"but if we combine together some of the basics that we've already",
			"learned about pointers and structures, in particular using dynamic memory",
			"allocation with malloc, we can put these pieces together",
			"to create a new data structure-- a singly linked list we might say--",
			"that allows us to grow and shrink a collection of values",
			"and we won't have any wasted space.",
			">> So again, we call this idea, this notion, a linked list.",
			"In particular, in this video we're talking about singly linked list,",
			"and then another video we'll talk about doubly linked lists, which",
			"is just a variation on a theme here.",
			"But a singly linked list is comprised of nodes,",
			"nodes just being an abstract term-- it's just something I'm calling",
			"that's a kind of structure, basically, I'm?",
			"Just going to call it a node-- and this node has two members, or two fields.",
			"It has data, usually an integer, a character float,",
			"or could be some other data type that you've defined with a type def.",
			"And it contains a pointer to another node of the same type.",
			">> So we have two things inside of this node, data and a pointer",
			"to another node.",
			"And if you start to visualize this, you can think about it",
			"like a chain of nodes that are connected together.",
			"We have the first node, it contains data, and a pointer",
			"to the second node, which contains data, and a pointer to the third node.",
			"And so that's why we call it a linked list, they're linked together.",
			">> What does this special node structure look like?",
			"Well, if you recall from our video on defining custom types, with type def,",
			"we can define a structure-- and type define a structure like this.",
			"tyepdef struct sllist, and then I'm using the word value here arbitrarily",
			"to indicate any data type really.",
			"You could pass on an integer or float, you could have whatever you want.",
			"It's not restricted to just integers, or anything like that.",
			"So value is just an arbitrary data type, and then a pointer",
			"to another node of the same type.",
			">> Now, there's a little catch here with defining a structure",
			"when it's a self referential structure.",
			"I have to have a temporary name for my structure.",
			"At the end of the day I clearly want to call it",
			"sll node, that's ultimately the new name part of my type definition,",
			"but I can't use sll node in the middle of this.",
			"The reason being, I haven't created a type called sll node",
			"until I hit this final point here.",
			"Up until that point, I have to have another way to refer to this data type.",
			">> And this is a self referential data type.",
			"It;s a data type of a structure that contains a data,",
			"and a pointer to another structure of the same type.",
			"So I need to be able to refer to this data type at least temporarily,",
			"so giving it a temporary name of struct sllist",
			"allows me to then say I want a pointer to another struct sllist,",
			"a struct sllist star, and then after I've completed the definition,",
			"I can now call this type an sll node.",
			">> So that's why you see there's a temporary name here,",
			"but a permanent name here.",
			"Sometimes you might see definitions of structure,",
			"for example, that aren't self referential, that",
			"don't have a specifier name here.",
			"It would just say typedef struct, open curly brace and then define it.",
			"But if you're struct is self referential, as this one is,",
			"you need to specify a temporary type name.",
			"But ultimately, now that we've done this,",
			"we can just refer to these nodes, these units,",
			"as sll nodes for purposes of the rest of this video.",
			">> All right, so we know how to create a linked list node.",
			"We know how to define a linked list node.",
			"Now, if we're going to start using them to collect information,",
			"there's a couple of operations we need to understand and work with.",
			"We need to know how to create a linked list out of thin air.",
			"If there's no list already, we want to start one.",
			"So we need to be able to create a linked list,",
			"we need to probably search through the link list",
			"to find an element we're looking for.",
			"We need to be able to insert new things into the list,",
			"we want our list to be able to grow.",
			"And similarly, we want to be able to delete things from our list,",
			"we want our list to be able to shrink.",
			"And at the end of our programs, especially",
			"if you recall that we're dynamically allocating memory",
			"to build these lists typically, we want to free all of that memory",
			"when we're done working with it.",
			"And so we need to be able to delete an entire linked list in one fail swoop.",
			"So let's go through some of these operations",
			"and how we might visualize them, talking in pseudocode code specifically.",
			"So we want to create a linked list, so maybe we",
			"want to define a function with this prototype.",
			"sll node star, create, and I'm passing in one argument, some arbitrary data",
			"type again, of some arbitrary data type.",
			"But I'm returning-- this function should return to me a pointer, to a singly",
			"linked list node.",
			"Again, we're trying to create a linked list out of thin air,",
			"so I need a pointer to that list when I'm done.",
			">> So what are the steps involved here?",
			"Well, first thing I'm going to do is dynamically",
			"allocate space for a new node.",
			"Again, we're creating it out of thin air, so we need to malloc space for it.",
			"And of course, immediately after we malloc,",
			"we always check to make sure that our pointer-- we did not get back null.",
			"Because if we try and deference a null pointer,",
			"we're going to suffer a segfault and we don't want that.",
			">> Then we want to fill in the field, we want to initialize the value field",
			"and initialize the next field.",
			"And then we want to-- eventually as the function prototype indicates-- we want",
			"to return a pointer to an sll node.",
			"So what make this look like visually?",
			"Well, first we're going to dynamically allocate space for a new sll node,",
			"so we malloc-- that's a visual representation",
			"of the node we just created.",
			"And we check to make sure it's not null-- in this case,",
			"the picture wouldn't have shown up if it was null,",
			"we would have run out of memory, so we're good to go there.",
			"So now we're on to step C, initialize the nodes value field.",
			"Well, based on this function call I'm using here,",
			"looks like I want to pass in 6, so I'll 6 in the value field.",
			"Now, initialize the next field.",
			"Well, what am I going to do there, there is nothing next, right,",
			"this is the only thing in the list.",
			"So what's the next thing in the list?",
			">> It shouldn't point to anything, right.",
			"There's nothing else there, so what is the concept we know of that's nothing--",
			"pointers to nothing?",
			"It should be maybe we want to put a null pointer there,",
			"and I'll represent the null pointer as just a red box,",
			"we can't go any further.",
			"As we'll see a little later on, we will have eventually chains",
			"of arrows connecting these nodes together,",
			"but when you hit the red box, that's null,",
			"we can't go any further, that's the end of the list.",
			">> And lastly, we just want to return a pointer to this node.",
			"So we'll call it new, and will return new",
			"so it can be used in whatever function created it.",
			"So there we go, We've created a singly linked list node out of thin air,",
			"and now we have a list we can work with.",
			">> Now, let's say we already have a large chain,",
			"and we want to find something in it.",
			"And we want a function that's going to return true or false, depending",
			"on whether a value exists in that list.",
			"A function prototype, or declaration for that function,",
			"might look like this-- bool find, and then we want to pass in two arguments.",
			">> The first, is a pointer to the first element of the linked list.",
			"This is actually something you'll always want to keep track of,",
			"and actually might be something that you even put in a global variable.",
			"Once you create a list, you always, always",
			"want to keep track of the very first element of the list.",
			"That way you can refer to all the other elements by just following the chain,",
			"without having to keep pointers intact to every single element.",
			"You only need to keep track of the first one if they're all chained together.",
			">> And then the second thing we're passing in again",
			"is arbitrarily some-- whatever data type we're",
			"looking for there is inside of hopefully one of the nodes in the list.",
			"So what are the steps?",
			"Well, the first thing we do is we create a transversal pointer",
			"pointing to the lists head.",
			"Well, why do we do that, we already have a pointer at the lists head,",
			"why don't we just move that one around?",
			"Well, like I just said, it's really important for us",
			"to always keep track of the very first element in the list.",
			"And so it's actually better to create a duplicate of that,",
			"and use that to move around so we never accidentally move away, or we always",
			"have a pointer at some point that is right on the first element of the list.",
			"So it's better to create a second one that we use to move.",
			">> Then we just compare whether the value field at that node",
			"is what we're looking for, and if it's not, we just move to the next node.",
			"And we keep doing that over, and over, and over,",
			"until we either find the element, or we hit",
			"null-- we've reached the end of the list and it isn't there.",
			"This should hopefully ring a bell to you as just linear search,",
			"we're just replicating it in a singly linked list structure",
			"instead of using an array to do it.",
			">> So here's an example of a singly linked list.",
			"This one consists of five nodes, and we have",
			"a pointer to the head of the list, which is called list.",
			"The first thing we want to do is again, create that traversal pointer.",
			"So we have now two pointers that point to the same thing.",
			">> Now, notice here also, I didn't have to malloc any space for trav.",
			"I didn't say trav equals malloc something, that node already exists,",
			"that space in memory already exists.",
			"So all I'm actually doing is creating another pointer to it.",
			"I'm not mallocing an additional space, just have now two pointers",
			"pointing to the same thing.",
			">> So is 2 what I'm looking for?",
			"Well, no, so instead I'm going to move to the next one.",
			"So basically I would say, trav equals trav next.",
			"Is 3 what I'm looking for, no.",
			"So I continue to go through, until eventually",
			"get to 6 which is what I'm looking for based on the function call",
			"I have at the top there, and so I'm done.",
			">> Now, what if the element I'm looking for isn't in the list,",
			"is it still going to work?",
			"Well, notice that the list here is subtly different,",
			"and this is another thing that's important with linked lists,",
			"you don't have to preserve them in any particular order.",
			"You can if you want, but you may have already noticed",
			"that we're not keeping track of what number element we are at.",
			">> And that's sort of one trade that we have with linked list verses arrays,",
			"is it we don't have random access anymore.",
			"We can't just say, I want to go to the 0th element,",
			"or the 6th element of my array, which I can do in an array.",
			"I can't say I want to go to the 0th element, or the 6th element,",
			"or the 25th element of my linked list, there's no index associated with them.",
			"And so it doesn't really matter if we preserve our list in order.",
			"If you want to you certainly can, but there's",
			"no reason why they need to be preserved in any order.",
			"So again, let's try and find 6 in this list.",
			"Well, we start at the beginning, we don't find 6,",
			"and then we continue not finding 6, until we eventually get to here.",
			"So right now trav points to the node containing 8, and six is not in there.",
			">> So the next step would be to go to the next pointer,",
			"so say trav equals trav next.",
			"Well, trav next, indicated by the red box there, is null.",
			"So there's nowhere else to go, and so at this point",
			"we can conclude that we've reached the end of the linked list,",
			"and 6 isn't in there.",
			"And it would be returned false in this case.",
			">> OK, how do we insert a new node into the linked list?",
			"So we've been able to create a linked list out of nowhere,",
			"but we probably want to build a chain and not",
			"create a bunch of distinct lists.",
			"We want to have one list that has a bunch of nodes in it,",
			"not a bunch of lists with a single node.",
			"So we can't just keep using the Create function we defined earlier, now we",
			"want to insert into a list that already exists.",
			">> So this case, we're going to pass in two arguments,",
			"the pointer to the head of that linked list that we want to add to.",
			"Again, that's why it's so important that we always",
			"keep track of it, because it's the only way we really",
			"have to refer to the whole list is just by a pointer to the first element.",
			"So we want to pass in a pointer to that first element,",
			"and whatever value we want to add to the list.",
			"And eventually this function is going to return a pointer",
			"to the new head of a linked list.",
			">> What are the steps involved here?",
			"Well, just like with create, we need to dynamically allocate",
			"space for a new node, and check to make sure we don't run out of memory, again,",
			"because we're using malloc.",
			"Then we want to populate and insert the node,",
			"so put the number, whatever val is, into the node.",
			"We want to insert the node at the beginning of the linked list.",
			">> There's a reason that I want to do this, and it",
			"might be worth taking a second to pause the video here,",
			"and think about why I would want to insert at the beginning of a linked",
			"list.",
			"Again, I mentioned earlier that it doesn't really",
			"matter if we preserve it in any order, so maybe that's a clue.",
			"And you saw what would happen if we wanted to-- or from just a second",
			"ago when we were going through search you",
			"could see what might happen if we were trying",
			"to insert at the end of the list.",
			"Because we don't have a pointer to the end of the list.",
			">> So the reason that I would want to insert at the beginning,",
			"is because I can do it immediately.",
			"I have a pointer at the beginning, and we'll see this in a visual in a second.",
			"But if I want to insert at the end, I have to start at the beginning,",
			"traverse all the way to the end, and then tack it on.",
			"So that would mean that inserting at the end of the list",
			"would become an o of n operation, going back",
			"to our discussion of computational complexity.",
			"It'd become an o of n operation, where as the list got bigger, and bigger,",
			"and bigger, it'll become more and more difficult to tack something",
			"on at the end.",
			"But it's always really easy to tack something on at the beginning,",
			"you're always at the beginning.",
			">> And we'll see a visual of this again.",
			"And then once we're done, once we've inserted the new node,",
			"we want to return our pointer to the new head of a linked list, which",
			"since we're inserting at the beginning, will actually be",
			"a pointer to the node we just created.",
			"Let's visualize this, because I think it'll help.",
			">> So here's our list, it consists of four elements, a node containing 15,",
			"which points to a node containing 9, which",
			"points to a node containing 13, which points to a node containing",
			"10, which has the null pointer as its next pointer",
			"so that's the end of the list.",
			"So we want to insert a new node with the value 12",
			"at the beginning of this list, what do we do?",
			"Well, first we malloc space for the node, and then we put 12 in there.",
			">> So now we've reached a decision point, right?",
			"We have a couple of pointers that we could",
			"move, which one should we move first?",
			"Should we make 12 point to the new head of the list--",
			"or excuse me, should we make 12 point to the old head of the list?",
			"Or should we say that the list now begins at 12.",
			"There's a distinction there, and we'll look",
			"at what happens with both in a second.",
			">> But this leads to a great topic for sidebar,",
			"which is that one of the trickiest things with linked lists",
			"is to arrange the pointers in the correct order.",
			"If you move things out of order, you can end up accidentally",
			"orphaning the rest of the list.",
			"And here's an example of that.",
			"So let's go with the idea of-- well, we've just created 12.",
			"We know 12 is going to be the new head of the list,",
			"and so why don't we just move the list pointer to point there.",
			">> OK, so that's good.",
			"So now where does 12 next point?",
			"I mean, visually we can see that it will point to 15,",
			"as humans it's really obvious to us.",
			"How does the computer know?",
			"We don't have anything pointing to 15 anymore, right?",
			">> We've lost any ability to refer to 15.",
			"We can't say new arrow next equals something, there's nothing there.",
			"In fact, we've orphaned the rest of the list",
			"by doing so, we've accidentally broken the chain.",
			"And we certainly don't want to do that.",
			">> So let's go back and try this again.",
			"Maybe the right thing to do is to set 12's next pointer",
			"to the old head of the list first, then we can move the list over.",
			"And in fact, that is the correct order that we",
			"need to follow when we're working with singly linked list.",
			"We always want to connect the new element into the list,",
			"before we take that kind of important step of changing",
			"where the head of the linked list is.",
			"Again, that's such a fundamental thing, we don't want to lose track of it.",
			">> So we want to make sure that everything is chained together,",
			"before we move that pointer.",
			"And so this would be the correct order, which is to connect 12 to the list,",
			"then say that the list starts a 12.",
			"If we said the list starts at 12 and then tried to connect 12 to the list,",
			"we've already seen what happens.",
			"We lose the list by mistake.",
			">> OK, so one more thing to talk about.",
			"What if we want to get rid of an entire linked list at once?",
			"Again, we're mallocing all this space, and so we",
			"need to free it when we're done.",
			"So now we want to delete the entire linked list.",
			"Well, what do we want to do?",
			">> If we've reached the null pointer, we want to stop, otherwise, just delete",
			"the rest of the list and then free me.",
			"Delete the rest of the list, and then free the current node.",
			"What does that sound like, what technique have we talked",
			"about previously does that sound like?",
			"Delete everybody else, then come back and delete me.",
			">> That's recursion, we've made the problem a little bit smaller,",
			"we're saying delete everybody else, then you can delete me.",
			"And further down the road, that node will say, delete everybody else.",
			"But eventually we'll get to the point where the list is null,",
			"and that's our base case.",
			">> So let's take a look at this, and how this might work.",
			"So here's our list, it's the same list we were just talking about,",
			"and there's the steps.",
			"There's a lot of text here, but hopefully the visualization will help.",
			">> So we have-- and I also pulled up our stack frames illustration",
			"from our video on call stacks, and hopefully all of this",
			"together will show you what's going on.",
			"So here's our pseudocode code.",
			"If we reach a null pointer, stop, otherwise,",
			"delete the rest of the list, then free the current node.",
			"So right now, list-- the pointer that we're",
			"passing in to destroy points to 12.",
			"12 is not a null pointer, so we're going to delete the rest of the list.",
			">> What is deleting the rest of us involved?",
			"Well, it means making a call to destroy, saying",
			"that 15 is the beginning of the rest of the list we want to destroy.",
			"And so the call to destroy 12 is kind of on hold.",
			"It's frozen there, waiting for the call to destroy 15, to finish its job.",
			">> Well, 15 is not a null pointer, and so it's going to say, all right,",
			"well, delete the rest of the list.",
			"The rest of the list starts at 9, and so we'll just",
			"wait until you delete all that stuff, then come back and delete me.",
			"Well 9's going to say, well, I'm not a null pointer,",
			"so delete the rest the list from here.",
			"And so try and destroy 13.",
			"13 says, I'm not null pointer, same thing, it passes the buck.",
			"10 is not null pointer, 10 contains a null pointer,",
			"but 10 is not itself a null pointer right now,",
			"and so it passes the buck too.",
			">> And now list points there, it really would point to some--",
			"if I had more space in the image, it would point to some random space",
			"that we don't know what it is.",
			"It's the null pointer though, the list is literally now set it's values null.",
			"It's pointing right inside that red box.",
			"We reached a null pointer, so we can stop, and we're done.",
			">> And so that purple frame is now-- at the top of stack-- that's the active frame,",
			"but it's done.",
			"If we've reached a null pointer, stop.",
			"We don't do anything, we can't free a null pointer,",
			"we didn't malloc any space, and so we're done.",
			"So that function frame is destroyed, and we",
			"resume-- we pick up where we left off with the next highest one, which",
			"is this dark blue frame here.",
			"So we pick up right where we left off.",
			"We deleted the rest of the list already, so now we're",
			"going to free the current nodes.",
			"So now we can free this node, and now we've reached the end of the function.",
			"And so that function frame is destroyed, and we pick up at the light blue one.",
			">> So it says-- I've already done-- deleting the rest of the list, so",
			"free the current node.",
			"And now the yellow frame is back on top of the stack.",
			"And so as you see, we're now destroying the list from right to left.",
			"",
			">> What would have happened, though, if we had done things the wrong way?",
			"Just like when we tried to add an element.",
			"If we messed up the chain, if we didn't connect the pointers",
			"in the correct order, if we just freed the first element,",
			"if we just freed the head of the list, now we",
			"have no way to refer to the rest of the list.",
			"And so we would have orphaned everything,",
			"we would have had what's called a memory leak.",
			"If you recall from our video on dynamic memory allocation,",
			"that's not very good thing.",
			">> So as I said, there are several operations",
			"that we need to use to work with linked list effectively.",
			"And you may have noticed I omitted one, deleting a single element from a linked",
			"list.",
			"The reason I did that is it's actually kind of",
			"tricky to think about how to delete a single element from a singly",
			"linked list.",
			"We need to be able to skip over something in the list, which",
			"means we get to a point-- we want to delete this node--",
			"but in order to make it so we don't lose any information,",
			"we need to connect this node over here, here.",
			">> So I probably did that wrong from a visual perspective.",
			"So we're at the beginning of our list, we're proceeding through,",
			"we want to delete this node.",
			"If we just delete it, we've broken the chain.",
			"This node right here refers to everything else,",
			"it contains the chain from here on out.",
			">> So what we need to do actually after we get to this point,",
			"is we need to step back one, and connect this node over to this node,",
			"so we can then delete the one in the middle.",
			"But singly linked lists don't provide us a way to go backwards.",
			"So we need to either keep two pointers, and move them",
			"sort of off step, one behind the other as we go, or get to a point",
			"and then send another pointer through.",
			"And as you can see, it can get a little messy.",
			"Fortunately, we have another way to resolve that,",
			"when we talk about doubly linked lists.",
			">> I'm Doug Lloyd, this is CS50.",
			""
		],
		"is_youtube": false
	},
	"video_029": {
		"section": "CS50x 2021",
		"subsection": "Week 5",
		"unit": "Shorts",
		"video_sources": [
			"https://edx-video.net/HARCS50X2016-V034900_DTH.mp4",
			"https://edx-video.net/HARCS50X2016-V034900/HARCS50X2016-V034900.m3u8"
		],
		"video_duration": 1140,
		"speech_period": [
			0.5, 1.4, 3.81, 3.44, 2.46, 2.04, 2.97, 2.01, 3.729, 2.541, 2.01, 3.56,
			2.57, 1.91, 2.77, 3.23, 5.73, 2.84, 3.99, 2.05, 1.7, 3.454, 1.916, 1.958,
			3.842, 3.22, 3.54, 2.96, 1.73, 3.19, 3.137, 1.333, 2.14, 2.875, 1.345,
			2.6, 2.87, 2.2, 2.87, 4.16, 2.58, 5.83, 2.15, 4.42, 3.8, 2.345, 3.125,
			3.76, 2.3, 1.79, 5.19, 2.88, 3.0, 3.2, 3.02, 2.72, 3.35, 1.47, 3.32, 2.64,
			2.8, 4.61, 4.27, 1.81, 2.95, 3.83, 3.11, 5.36, 1.96, 2.12, 3.5, 2.4, 2.71,
			2.67, 2.27, 4.12, 2.91, 4.04, 5.06, 3.36, 1.97, 3.659, 0.791, 1.958,
			1.882, 2.35, 3.22, 2.237, 2.083, 4.55, 1.76, 3.15, 3.35, 3.619, 0.791,
			2.208, 2.518, 2.624, 2.53, 2.74, 2.7, 3.86, 1.93, 1.76, 1.32, 1.25, 1.715,
			1.125, 2.72, 2.05, 3.69, 2.89, 3.21, 3.52, 2.68, 3.52, 2.14, 3.08, 3.06,
			1.52, 2.75, 1.88, 0.84, 3.65, 3.84, 2.83, 3.24, 4.7, 1.94, 3.0, 3.95, 1.5,
			3.4, 2.59, 6.02, 3.11, 2.43, 2.5, 1.9, 1.897, 2.333, 3.66, 3.38, 5.59,
			2.48, 2.38, 2.57, 2.333, 2.707, 3.16, 1.545, 2.375, 5.75, 0.89, 2.5, 4.75,
			2.94, 3.4, 3.37, 2.552, 2.978, 1.1, 2.34, 3.1, 3.24, 2.527, 1.583, 2.708,
			3.182, 4.76, 2.26, 2.833, 2.457, 3.8, 2.66, 4.5, 3.63, 3.426, 1.874,
			1.642, 1.708, 3.25, 1.029, 5.201, 3.22, 2.06, 4.52, 1.88, 3.23, 3.83,
			4.53, 7.23, 2.81, 5.19, 1.06, 3.4, 2.74, 3.65, 3.48, 4.54, 5.2, 3.45,
			3.27, 3.76, 4.8, 2.82, 4.41, 2.24, 2.85, 3.75, 3.43, 3.05, 1.89, 4.89,
			3.6, 3.73, 3.45, 1.08, 3.041, 2.879, 3.64, 3.31, 2.92, 1.0, 1.66, 1.1,
			1.19, 1.33, 1.9, 3.69, 3.18, 1.47, 0.814, 2.666, 1.69, 2.84, 2.291, 1.499,
			2.42, 2.93, 7.56, 2.04, 3.68, 3.5, 4.18, 3.6, 1.49, 3.22, 2.632, 2.458,
			3.246, 1.874, 2.036, 1.374, 4.75, 4.83, 3.12, 2.746, 1.624, 5.07, 1.76,
			3.829, 3.041, 3.34, 2.81, 3.98, 5.51, 3.171, 1.499, 3.31, 3.65, 3.82,
			3.08, 2.96, 1.89, 2.44, 4.97, 2.12, 3.55, 2.98, 3.43, 3.59, 2.98, 3.64,
			3.399, 1.291, 1.64, 3.69, 1.385, 2.125, 2.55, 5.15, 3.98, 4.53, 2.82,
			3.121, 0.499, 2.52, 3.53, 4.96, 3.52, 5.2, 2.93, 3.24, 5.15, 2.12, 2.074,
			2.916, 1.55, 1.458, 2.152, 6.29, 1.95, 1.71, 2.34, 3.7, 2.82, 2.75, 1.32,
			3.45, 0.99, 2.89, 1.791, 3.909, 4.23, 3.65, 2.72, 2.78, 3.27, 5.35, 3.11,
			3.45, 3.95, 4.0, 4.1, 2.96, 2.29, 2.13, 4.01, 3.98, 4.34, 1.54, 4.02,
			2.09, 3.672, 0.958, 1.9, 3.25, 3.09, 4.27, 3.679, 4.081, 2.83, 2.349,
			3.581, 2.05, 5.09, 1.24, 1.294, 2.916, 1.97, 2.464, 2.666, 1.092, 2.458,
			2.78, 2.78, 4.544, 2.416, 2.97, 4.06, 2.96, 2.977, 1.833, 5.41, 3.5, 5.19,
			4.47, 1.08, 2.52, 4.55, 3.22, 3.71, 3.3, 1.284
		],
		"transcript_en": [
			"",
			"[MUSIC PLAYING]",
			"",
			">> DOUG LLOYD: By now you know a lot about arrays,",
			"and you know a lot about linked lists.",
			"And we've discuss the pros and cons, we've",
			"discussed that linked lists can get bigger and smaller,",
			"but they take up more size.",
			"Arrays are much more straightforward to use, but they're restrictive in as much",
			"as we have to set the size of the array at the very beginning",
			"and then we're stuck with it.",
			">> But that's, we've pretty much exhausted all of our topics",
			"about linked lists and arrays.",
			"Or have we?",
			"Maybe we can do something even more creative.",
			"And that sort of lends the idea of a hash table.",
			">> So in a hash table we're going to try combine an array with a linked list.",
			"We're going to take the advantages of the array, like random access,",
			"being able to just go to array element 4 or array element 8",
			"without having to iterate across.",
			"That's pretty fast, right?",
			">> But we also want to have our data structure be able to grow and shrink.",
			"We don't need, we don't want to be restricted.",
			"And we want to be able to add and remove things",
			"very easily, which if you recall, is very complex with an array.",
			"And we can call this new thing a hash table.",
			">> And if implemented correctly, we're sort of taking",
			"the advantages of both data structures you've already seen,",
			"arrays and linked lists.",
			"Insertion can start to tend toward theta of 1.",
			"Theta we haven't really discussed, but theta is just the average case,",
			"what's actually going to happen.",
			"You're not always going to have the worst case scenario,",
			"and you're not always going to have the best case scenario, so what's",
			"the average scenario?",
			">> Well an average insertion into a hash table",
			"can start to get close to constant time.",
			"And deletion can get close to constant time.",
			"And lookup can get close to constant time.",
			"That's-- we don't have a data structure yet that can do that,",
			"and so this already sounds like a pretty great thing.",
			"We've really mitigated the disadvantages of each on its own.",
			">> To get this performance upgrade though, we",
			"need to rethink how we add data into the structure.",
			"Specifically we want the data itself to tell us",
			"where it should go in the structure.",
			"And if we then need to see if it's in the structure, if we need to find it,",
			"we want to look at the data again and be able to effectively,",
			"using the data, randomly access it.",
			"Just by looking at the data we should have",
			"an idea of where exactly we're going to find it in the hash table.",
			">> Now the downside of a hash table is that they're really",
			"pretty bad at ordering or sorting data.",
			"And in fact, if you start to use them to order or sort",
			"data you lose all of the advantages you previously",
			"had in terms of insertion and deletion.",
			"The time becomes closer to theta of n, and we've basically",
			"regressed into a linked list.",
			"And so we only want to use hash tables if we don't care about",
			"whether data is sorted.",
			"For the context in which you'll use them in CS50",
			"you probably don't care that the data is sorted.",
			">> So a hash table is a combination of two distinct pieces",
			"with which we're familiar.",
			"The first is a function, which we usually call a hash function.",
			"And that hash function is going to return some non-negative integer, which",
			"we usually call a hashcode, OK?",
			"The second piece is an array, which is capable of storing data of the type we",
			"want to place into the data structure.",
			"We'll hold off on the linked list element for now",
			"and just start with the basics of a hash table to get your head around it,",
			"and then we'll maybe blow your mind a little bit when we",
			"combine arrays and link lists together.",
			">> The basic idea though is we take some data.",
			"We run that data through the hash function.",
			"And so the data is processed and it spits out a number, OK?",
			"And then with that number we just store the data",
			"we want to store in the array at that location.",
			"So for example we have maybe this hash table of strings.",
			"It's got 10 elements in it, so we can fit 10 strings in it.",
			">> Let's say we want to hash John.",
			"So John as the data we want to insert into this hash table somewhere.",
			"Where do we put it?",
			"Well typically with an array so far we probably",
			"would put it in array location 0.",
			"But now we have this new hash function.",
			">> And let's say that we run John through this hash function",
			"and it's spits out 4.",
			"Well that's where we're going to want to put John.",
			"We want to put John in array location 4, because if we hash John again--",
			"let's say later we want to search and see",
			"if John exists in this hash table-- all we need to do",
			"is run it through the same hash function, get the number 4 out,",
			"and be able to find John immediately in our data structure.",
			"That's pretty good.",
			">> Let's say we now do this again, we want to hash Paul.",
			"We want to add Paul into this hash table.",
			"Let's say that this time we run Paul through the hash function,",
			"the hashcode that is generated is 6.",
			"Well now we can put Paul in the array location 6.",
			"And if we need to look up whether Paul is in this hash table,",
			"all we need to do is run Paul through the hash function again",
			"and we're going to get 6 out again.",
			">> And then we just look at array location 6.",
			"Is Paul there?",
			"If so, he's in the hash table.",
			"Is Paul not there?",
			"He's not in the hash table.",
			"It's pretty straightforward.",
			">> Now how do you define a hash function?",
			"Well there's really no limit to the number of possible hash functions.",
			"In fact there's a number of really, really good ones on the internet.",
			"There's a number of really, really bad ones on the internet.",
			"It's also pretty easy to write a bad one.",
			">> So what makes up a good hash function, right?",
			"Well a good hash function should use only the data being hashed,",
			"and all of the data being hashed.",
			"So we don't want to use anything-- we don't incorporate anything",
			"else other than the data.",
			"And we want to use all of the data.",
			"We don't want to just use a piece of it, we want to use all of it.",
			"A hash function should also be deterministic.",
			"What does that mean?",
			"Well it means that every time we pass the exact same piece of data",
			"into the hash function we always get the same hashcode out.",
			"If I pass John into the hash function I get out 4.",
			"I should be able to do that 10,000 times and I'll always get 4.",
			"So no random numbers effectively can be involved in our hash tables--",
			"in our hash functions.",
			">> A hash function should also uniformly distribute data.",
			"If every time you run data through the hash function you get the hashcode 0,",
			"that's probably not so great, right?",
			"You probably want to big a range of hash codes.",
			"Also things can be spread out throughout the table.",
			"And also it would be great if really similar data, like John and Jonathan,",
			"maybe were spread out to weigh different locations in the hash table.",
			"That would be a nice advantage.",
			">> Here's an example of a hash function.",
			"I wrote this one up earlier.",
			"It's not a particularly good hash function",
			"for reasons that don't really bear going into right now.",
			"But do you see what's going on here?",
			"It seems like we're declaring a variable called sum and setting it equal to 0.",
			"And then apparently I'm doing something so long as strstr[j] is not equal",
			"to backslash 0.",
			"What am I doing there?",
			">> This is basically just another way of implementing [? strl ?]",
			"and detecting when you've reached the end of the string.",
			"So I don't have to actually calculate the length of the string,",
			"I'm just using when I hit the backslash 0 character I know",
			"I've reached the end of the string.",
			"And then I'm going to keep iterating through that string,",
			"adding strstr[j] to sum, and then at the end of the day going to return sum mod",
			"HASH_MAX.",
			">> Basically all this hash function is doing is adding up",
			"all of the ASCII values of my string, and then it's",
			"returning some hashcode modded by HASH_MAX.",
			"It's probably the size of my array, right?",
			"I don't want to be getting hash codes if my array is of size 10,",
			"I don't want to be getting out hash codes 11, 12,",
			"13, I can't put things into those locations of the array,",
			"that would be illegal.",
			"I'd suffer a segmentation fault.",
			">> Now here is another quick aside.",
			"Generally you're probably not going to want to write your own hash functions.",
			"It is actually a bit of an art, not a science.",
			"And there's a lot that goes into them.",
			"The internet, like I said, is full of really good hash functions,",
			"and you should use the internet to find hash functions because it's really",
			"just kind of an unnecessary waste of time to create your own.",
			">> You can write simple ones for testing purposes.",
			"But when you actually are going to start hashing data and storing it",
			"into a hash table you're probably going to want",
			"to use some function that was generated for you, that exists on the internet.",
			"If you do just be sure to cite your sources.",
			"There's no reason to plagiarize anything here.",
			">> The computer science community is definitely growing, and really values",
			"open source, and it's really important to cite your sources so that people",
			"can get attribution for the work that they're",
			"doing to the benefit of the community.",
			"So always be sure-- and not just for hash",
			"functions, but generally when you use code from an outside source,",
			"always cite your source.",
			"Give credit to the person who did some of the work so you don't have to.",
			">> OK so let's revisit this hash table for a second.",
			"This is where we left off after we inserted",
			"John and Paul into this hash table.",
			"Do you see a problem here?",
			"You might see two.",
			"But in particular, do you see this possible problem?",
			">> What if I hash Ringo, and it turns out that after processing",
			"that data through the hash function Ringo also generated the hashcode 6.",
			"I've already got data at hashcode-- array location 6.",
			"So it's probably going to be a bit of a problem for me now, right?",
			">> We call this a collision.",
			"And the collision occurs when two pieces of data run through the same hash",
			"function yield the same hashcode.",
			"Presumably we still want to get both pieces of data into the hash table,",
			"otherwise we wouldn't be running Ringo arbitrarily through the hash function.",
			"We presumably want to get Ringo into that array.",
			">> How do we do it though, if he and Paul both yield hashcode 6?",
			"We don't want to overwrite Paul, we want Paul to be there too.",
			"So we need to find a way to get elements into the hash table that",
			"still preserves our quick insertion and quick look up.",
			"And one way to deal with it is to do something called linear probing.",
			">> Using this method if we have a collision, well, what do we do?",
			"Well we can't put him in array location 6, or whatever hashcode was generated,",
			"let's put him at hashcode plus 1.",
			"And if that's full let's put him in hashcode plus 2.",
			"The benefit of this being if he's not exactly where we think he is,",
			"and we have to start searching, maybe we don't have to go too far.",
			"Maybe we don't have to search all n elements of the hash table.",
			"Maybe we have to search a couple of them.",
			">> And so we're still tending towards that average case being close to 1 vs",
			"close to n, so maybe that'll work.",
			"So let's see how this might work out in reality.",
			"And let's see if maybe we can detect the problem that might occur here.",
			">> Let's say we hash Bart.",
			"So now we're going to run a new set of strings through the hash function,",
			"and we run Bart through the hash function, we get hashcode 6.",
			"We take a look, we see 6 is empty, so we can put Bart there.",
			">> Now we hash Lisa and that also generates hashcode 6.",
			"Well now that we're using this linear probing method we start at 6,",
			"we see that 6 is full.",
			"We can't put Lisa in 6.",
			"So where do we go?",
			"Let's go to 7.",
			"7's empty, so that works.",
			"So let's put Lisa there.",
			">> Now we hash Homer and we get 7.",
			"OK well we know that 7's full now, so we can't put Homer there.",
			"So let's go to 8.",
			"Is 8 available?",
			"Yeah, and 8's close to 7, so if we have to start searching we're",
			"not going to have to go too far.",
			"And so let's put Homer at 8.",
			">> Now we hash Maggie and returns 3, thank goodness",
			"we're able to just put Maggie there.",
			"We don't have to do any sort of probing for that.",
			"Now we hash Marge, and Marge also returns 6.",
			">> Well 6 is full, 7 is full, 8 is full, 9, all right thank God, 9 is empty.",
			"I can put Marge at 9.",
			"Already we can see that we're starting to have this problem where now we're",
			"starting to stretch things kind of far away from their hash codes.",
			"And that theta of 1, that average case of being constant time,",
			"is starting to get a little more-- starting to tend a little more",
			"towards theta of n.",
			"We're starting to lose that advantage of hash tables.",
			">> This problem that we just saw is something called clustering.",
			"And what's really bad about clustering is that once you now",
			"have two elements that are side by side it makes it even more likely,",
			"you have double the chance, that you're going",
			"to have another collision with that cluster,",
			"and the cluster will grow by one.",
			"And you'll keep growing and growing your likelihood of having a collision.",
			"And eventually it's just as bad as not sorting the data at all.",
			">> The other problem though is we still, and so far up to this point,",
			"we've just been sort of understanding what a hash table is,",
			"we still only have room for 10 strings.",
			"If we want to continue to hash the citizens of Springfield,",
			"we can only get 10 of them in there.",
			"And if we try and add an 11th or 12th, we don't have a place to put them.",
			"We could just be spinning around in circles trying to find an empty spot,",
			"and we maybe get stuck in an infinite loop.",
			">> So this sort of lends to the idea of something called chaining.",
			"And this is where we're going to bring linked lists back into the picture.",
			"What if instead of storing just the data itself in the array,",
			"every element of the array could hold multiple pieces of data?",
			"Well that doesn't make sense, right?",
			"We know that an array can only hold-- each element of an array",
			"can only hold one piece of data of that data type.",
			">> But what if that data type is a linked list, right?",
			"So what if every element of the array was",
			"a pointer to the head of a linked list?",
			"And then we could build those linked lists",
			"and grow them arbitrarily, because linked lists allow",
			"us to grow and shrink a lot more flexibly than an array does.",
			"So what if we now use, we leverage this, right?",
			"We start to grow these chains out of these array locations.",
			">> Now we can fit an infinite amount of data, or not infinite,",
			"an arbitrary amount of data, into our hash table",
			"without ever running into the problem of collision.",
			"We've also eliminated clustering by doing this.",
			"And well we know that when we insert into a linked list, if you recall",
			"from our video on linked lists, singly linked lists and doubly linked lists,",
			"it's a constant time operation.",
			"We're just adding to the front.",
			">> And for look up, well we do know that look up in a linked list",
			"can be a problem, right?",
			"We have to search through it from beginning to end.",
			"There's no random access in a linked list.",
			"But if instead of having one linked list where a lookup would be O of n,",
			"we now have 10 linked lists, or 1,000 linked lists,",
			"now it's O of n divided by 10, or O of n divided by 1,000.",
			">> And while we were talking theoretically about complexity",
			"we disregard constants, in the real world these things actually matter,",
			"right?",
			"We actually will notice that this happens",
			"to run 10 times faster, or 1,000 times faster,",
			"because we're distributing one long chain across 1,000 smaller chains.",
			"And so each time we have to search through one of those chains we can",
			"ignore the 999 chains we don't care about , and just search that one.",
			">> Which is on average to be 1,000 times shorter.",
			"And so we still are sort of tending towards this average case",
			"of being constant time, but only because we are leveraging",
			"dividing by some huge constant factor.",
			"Let's see how this might actually look though.",
			"So this was the hash table we had before we declared a hash table that",
			"was capable of storing 10 strings.",
			"We're not going to do that anymore.",
			"We already know the limitations of that method.",
			"Now our hash table's going to be an array of 10 nodes, pointers",
			"to heads of linked lists.",
			">> And right now it's null.",
			"Each one of those 10 pointers is null.",
			"There's nothing in our hash table right now.",
			">> Now let's start to put some things into this hash table.",
			"And let's see how this method is going to benefit us a little bit.",
			"Let's now hash Joey.",
			"We'll will run the string Joey through a hash function and we return 6.",
			"Well what do we do now?",
			">> Well now working with linked lists, we're not working with arrays.",
			"And when we're working with linked lists we",
			"know we need to start dynamically allocating space and building chains.",
			"That's sort of how-- those are the core elements of building a linked list.",
			"So let's dynamically allocate space for Joey,",
			"and then let's add him to the chain.",
			">> So now look what we've done.",
			"When we hash Joey we got the hashcode 6.",
			"Now the pointer at array location 6 points to the head of a linked list,",
			"and right now it's the only element of a linked list.",
			"And the node in that linked list is Joey.",
			">> So if we need to look up Joey later, we just hash Joey again,",
			"we get 6 again because our hash function is deterministic.",
			"And then we start at the head of the linked list pointed",
			"to by array location 6, and we can iterate",
			"across that trying to find Joey.",
			"And if we build our hash table effectively,",
			"and our hash function effectively to distribute data well,",
			"on average each of those linked lists at every array location",
			"will be 1/10 the size of if we just had it as a single huge",
			"linked list with everything in it.",
			">> If we distribute that huge linked list across 10 linked lists",
			"each list will be 1/10 the size.",
			"And thus 10 times quicker to search through.",
			"So let's do this again.",
			"Let's now hash Ross.",
			">> And let's say Ross, when we do that the hash code we get back is 2.",
			"Well now we dynamically allocate a new node, we put Ross in that node,",
			"and we say now array location 2, instead of pointing to null,",
			"points to the head of a linked list whose only node is Ross.",
			"And we can do this one more time, we can hash Rachel and get hashcode 4.",
			"malloc a new node, put Rachel in the node, and say a array location",
			"4 now points to the head of a linked list whose",
			"only element happens to be Rachel.",
			">> OK but what happens if we have a collision?",
			"Let's see how we handle collisions using the separate chaining method.",
			"Let's hash Phoebe.",
			"We get the hashcode 6.",
			"In our previous example we were just storing the strings in the array.",
			"This was a problem.",
			">> We don't want to clobber Joey, and we've already",
			"seen that we can get some clustering problems if we try and step",
			"through and probe.",
			"But what if we just kind of treat this the same way, right?",
			"It's just like adding an element to the head of a linked list.",
			"Let's just malloc space for Phoebe.",
			">> We'll say Phoebe's next pointer points to the old head of the linked list,",
			"and then 6 just points to the new head of the linked list.",
			"And now look, we've changed Phoebe in.",
			"We can now store two elements with hashcode 6,",
			"and we don't have any problems.",
			">> That's pretty much all there is to chaining.",
			"And chaining is definitely the method that's",
			"going to be most effective for you if you are storing data in a hash table.",
			"But this combination of arrays and linked lists",
			"together to form a hash table really dramatically improves your ability",
			"to store large amounts of data, and very quickly and efficiently search",
			"through that data.",
			">> There's still one more data structure out there",
			"that might even be a bit better in terms of guaranteeing",
			"that our insertion, deletion, and look up times are even faster.",
			"And we'll see that in a video on tries.",
			"I'm Doug Lloyd, this is CS50.",
			""
		],
		"is_youtube": false
	},
	"video_030": {
		"section": "CS50x 2021",
		"subsection": "Week 5",
		"unit": "Shorts",
		"video_sources": [
			"https://edx-video.net/HARCS50X2016-V035100_DTH.mp4",
			"https://edx-video.net/HARCS50X2016-V035100/HARCS50X2016-V035100.m3u8"
		],
		"video_duration": 983,
		"speech_period": [
			2.994, 2.432, 3.124, 4.5, 2.39, 0.83, 1.01, 2.44, 2.86, 1.09, 1.958,
			3.052, 3.4, 3.94, 4.04, 2.54, 3.54, 2.41, 5.74, 2.07, 4.33, 2.98, 2.86,
			4.06, 1.96, 1.5, 2.0, 4.95, 4.41, 1.79, 2.82, 3.32, 4.18, 2.17, 4.39,
			1.53, 2.57, 4.48, 2.75, 1.95, 4.85, 3.58, 2.719, 3.041, 5.2, 1.96, 3.68,
			2.555, 3.365, 2.29, 2.29, 3.13, 3.07, 1.44, 4.05, 2.85, 2.45, 2.87, 3.46,
			2.6, 1.754, 2.916, 2.72, 2.49, 3.45, 3.24, 4.46, 2.43, 2.84, 5.14, 4.14,
			1.25, 3.571, 2.249, 2.63, 2.74, 2.62, 2.305, 1.375, 2.62, 1.13, 2.583,
			2.757, 1.98, 4.29, 3.31, 1.1, 1.16, 2.459, 2.741, 3.76, 4.67, 2.92, 3.85,
			1.5, 1.833, 2.627, 3.814, 2.666, 4.46, 4.03, 4.27, 2.9, 2.9, 3.95, 2.78,
			2.59, 3.787, 1.583, 2.54, 2.47, 3.06, 7.52, 4.07, 1.25, 3.8, 1.88, 3.0,
			3.71, 1.91, 2.22, 2.27, 2.45, 3.502, 1.958, 3.33, 2.23, 2.57, 1.61, 2.38,
			3.04, 3.986, 0.874, 1.77, 2.24, 1.32, 2.91, 2.07, 1.41, 2.499, 1.941,
			4.28, 1.92, 1.33, 1.416, 1.274, 2.76, 2.98, 2.95, 4.365, 1.125, 0.11,
			2.375, 3.175, 2.14, 1.97, 3.03, 2.42, 2.16, 2.98, 1.0, 2.11, 4.11, 6.12,
			4.42, 3.81, 1.99, 0.8, 1.79, 1.672, 2.458, 3.552, 1.958, 1.208, 2.362,
			1.41, 1.96, 2.4, 1.959, 2.541, 2.56, 1.81, 1.77, 0.5, 2.13, 2.96, 2.22,
			0.97, 1.33, 3.05, 2.659, 2.51, 1.416, 1.166, 3.599, 1.89, 1.58, 2.32,
			4.409, 1.041, 3.446, 1.874, 1.07, 1.125, 2.285, 1.28, 1.73, 2.01, 2.68,
			1.27, 2.125, 1.235, 3.45, 1.0, 1.5, 3.57, 0.91, 2.86, 3.32, 2.44, 1.777,
			1.583, 5.3, 2.15, 2.42, 2.407, 1.833, 1.02, 1.734, 2.166, 2.04, 2.59,
			1.499, 3.601, 4.57, 2.06, 2.78, 1.35, 2.77, 2.17, 1.36, 4.49, 3.67, 1.51,
			2.68, 2.62, 0.5, 3.21, 1.46, 1.03, 6.63, 2.082, 1.208, 0.958, 1.922, 1.82,
			2.99, 3.41, 3.1, 2.602, 1.208, 4.98, 2.4, 2.97, 2.17, 0.75, 3.48, 1.32,
			1.695, 1.375, 1.58, 1.64, 1.85, 1.65, 1.46, 3.86, 3.2, 2.77, 3.42, 2.0,
			6.5, 2.834, 1.916, 1.43, 3.78, 2.74, 1.934, 1.666, 2.12, 4.45, 3.55, 4.45,
			2.88, 1.43, 2.541, 0.864, 3.275, 2.33, 1.08, 2.208, 1.162, 2.69, 1.31,
			0.592, 0.708, 1.97, 1.78, 2.117, 0.583, 1.55, 1.215, 2.225, 2.32, 2.34,
			1.192, 2.02, 1.708, 2.81, 4.14, 2.77, 4.85, 3.78, 1.98, 4.31, 3.161,
			1.749, 3.24, 3.04, 1.9, 1.68, 2.62, 0.5, 1.16, 2.289, 2.291, 3.22, 3.675,
			1.165, 2.72, 0.83, 0.9, 2.24, 0.5, 1.52, 1.71, 3.09, 1.564, 0.916, 0.58,
			2.7, 5.17, 2.65, 1.12, 3.19, 3.32, 2.1, 0.5, 1.64, 1.5, 1.749, 2.761,
			6.47, 1.52, 2.208, 3.232, 3.042, 2.458, 4.58, 1.75, 3.476, 2.624, 3.38,
			2.751, 2.999, 1.53, 2.01, 1.05, 3.17, 4.37, 3.96, 0.7, 1.125, 1.895, 2.25,
			2.704, 2.166, 4.46, 2.97, 1.573
		],
		"transcript_en": [
			">> [MUSIC PLAYING]",
			"",
			"DOUG LLOYD: So we've been inching closer and closer that holy grail of data",
			"structures, one that we can insert into, delete from, and look up",
			"in constant time.",
			"Right.",
			"That's sort of the goal.",
			"We want to be able to do things very, very quickly.",
			">> Have we found it here when we're talking about tries?",
			"Well, let's take a look.",
			"So we've seen several different data structures",
			"that handle the mapping of so-called key-value pairs,",
			"mapping some piece of data to some other piece of data",
			"so we know where to find information in the structure.",
			">> So for array, for example, the key is the element index or array",
			"location 0 or array 1 and so on.",
			"And the value is the data that exists at that location.",
			"So what is stored in array 0?",
			"What is stored in array 1 versus just 0 and 1, which would be the keys.",
			">> With a hash table it's sort of the same idea.",
			"With a hash table, we have this hash function that generates hash codes.",
			"So the key is the hash code of the data.",
			"And the value, particularly we talked about chaining",
			"in the video on hash tables, is that linked list of data",
			"that hashes to that hashcode.",
			"Right.",
			"What about another approach this method, though?",
			"What about a method where the key is guaranteed to be unique,",
			"unlike a hash table, where we could end up with two pieces of data",
			"having the same hashcode.",
			"And then we have to deal with that by either probing or more",
			"preferably chaining to fix that problem.",
			">> So now we can guarantee that our key will be unique.",
			"And what if our value was just something as easy",
			"as true and false that tells us whether or not that piece of information",
			"exists in the structure?",
			"A Boolean could be as simple as a bit.",
			"Realistically it's probably a byte more likely than a bit.",
			"But that's a lot smaller than storing maybe a 50-character string,",
			"for example.",
			">> So tries, similar to hash tables, which combine arrays and linked list,",
			"tries combine arrays, structures, and pointers",
			"together to store data in an interesting way that's",
			"pretty different from anything we've seen so far.",
			"Now we use the data as a roadmap to navigate this data structure.",
			"And if we can follow the roadmap, if we can",
			"follow the data from beginning to end, we'll",
			"know whether that data exist in the trie.",
			">> And if we can't follow the map from meaning to end at all,",
			"the data can't exist.",
			"Again, the keys here are guaranteed to be unique.",
			"And so unlike a hash table, we'll never have to deal with collisions here.",
			"And no two pieces of data have exactly the same roadmap",
			"unless that data is identical.",
			">> If we insert John, then we search for John.",
			"That's two identical pieces of data, right, we're looking through.",
			"But otherwise, any two pieces of data are",
			"guaranteed to have unique roadmaps through this data structure.",
			"And we're going to take a look at a visual of this in just a moment.",
			">> We'll do this by trying to create a new data structure,",
			"mapping the following key value pairs.",
			"In this case, we're not going to use something as simple as a Boolean.",
			"We actually will store the string.",
			"And that string is going to be the name of a university.",
			">> And the key is going to be the year when that university was founded.",
			"All years for universities are going to be four digits.",
			"And so we'll use those four digits to navigate through this data structure.",
			"And we'll see, again, how we do that in just a second.",
			">> At the end of the path, we'll see the name",
			"of the university that corresponds to that key, those four digits.",
			"The basic idea behind a trie is we have a central route.",
			"So think about it like a tree.",
			"And this is similar in spelling and in concept to a tree.",
			"Generally when we think about trees in the real world,",
			"they have a root that's in the ground and they grow upward",
			"and they have branches and they have leaves.",
			"And basically the idea of a trie is exactly the same,",
			"except that root is anchored somewhere in the sky.",
			"And the leaves are at the bottom.",
			">> So it's kind of like taking a tree and just flipping it upside down.",
			"But there are still branches.",
			"And those would be our pathways, those will be our connections",
			"from the root to the leaves.",
			"In this case, those paths, those branches",
			"are labeled with digits that tell us which way to go from where we are.",
			">> If we see a 0, we go down this branch, if we see a 1, we go down this branch,",
			"and so and so on.",
			"Well, what does this mean?",
			"Well, that means that at every junction point",
			"and every node in the middle and every branch,",
			"there are 10 possible places that we can go.",
			"So there are 10 pointers from every location.",
			">> And this is where tries can get a little bit intimidating for somebody",
			"who's doesn't have a lot of experience in computer science before.",
			"But tries are really pretty awesome.",
			"And if you have the chance to work with them",
			"and you're willing to dig-in and experiment with them,",
			"they're really quite interesting data structures to work with.",
			"If we want to insert an element into the trie, all we need to do",
			"is build the correct path from the root to the leaf.",
			"Here's what every step along the way might look like.",
			"We're going to define a new data structure for a new node called a trie.",
			">> And inside of that data structure there are two pieces.",
			"We're going to store the name of a university.",
			"And we're going to store an array of pointers",
			"to other nodes of the same type.",
			"So, again, this is that sort of concept of everywhere",
			"we are, we at 10 possible places we can go.",
			"If we see a 0, we go down this branch.",
			"If we see a 1, this branch, and so on and so on and so on.",
			"If we say 9, we go down this branch.",
			"So at every junction point, we can go 10 possible places.",
			"So every node has to contain 10 pointers to other nodes, to 10 other nodes.",
			">> And the data we're storing is just the name of the university.",
			"So let's build a trie.",
			"Let's insert a couple of items into our trie.",
			"So at the very top, this is our root node.",
			"This is probably going to be something you're going to globally declare.",
			"And you're going to globally maintain a pointer to this node always.",
			">> You're going to say, root equals, and you're",
			"going to malloc yourself trie node.",
			"And you're never going to touch root again.",
			"Every time you want to start navigating through,",
			"you set another pointer equal to root, such as trav,",
			"which is the example I use in many of my videos",
			"here on stacks and queues and link lists and so on.",
			">> You set another pointer called trav for traversal.",
			"And you use trav to navigate through the data structure.",
			"So let's see how this might look.",
			"So right now, what does a node look like?",
			"Well, just as our data structure declaration indicated,",
			"we have a string, which in this case is empty.",
			"There's nothing here.",
			">> And an array of 10 pointers.",
			"And right now, we only have 1 node in this trie.",
			"There's nothing else in it.",
			"So all 10 of those pointers point to null.",
			"That's what the red indicates.",
			">> Let's insert the string Harvard.",
			"Let's insert the University of Harvard into this trie, which",
			"was founded in the year 1636.",
			"We want to use the key, 1636, to tell us where we're",
			"going to store Harvard in the trie.",
			"Now, how might we do that?",
			">> It might look something like this.",
			"We start at the root.",
			"And we have these 10 places we can go.",
			"The root is just like any other node of the trie.",
			"There are 10 places we can go from here.",
			">> Where do we probably want to go if the key is 1636?",
			"There's really two options.",
			"Right.",
			"We can build the key from right to left and start with 6.",
			"Or we could build the key from left to right and start with 1.",
			">> It's probably more intuitive as a human being",
			"to understand we'll just go left to right.",
			"And so if I want to insert Harvard into this trie,",
			"I probably want to start by starting at the root,",
			"looking at my 10 options in front of me, and saying",
			"I want to go down the 1 path.",
			"OK.",
			">> Now, 1 path is currently null.",
			"So if I want to proceed down that path to insert this element into the trie,",
			"I have to malloc a new node, have 1 point there, and then I'm good to go.",
			">> So I basically am at a point where I'm standing",
			"at the root of the tree or the trie and there are 10 branches.",
			"But each branch has a gate in front of it.",
			"Right.",
			"Because there's nothing else there's.",
			"No safe passage.",
			"That means that there's nothing down any of those branches.",
			"If I want to start building something, I want to remove the gate.",
			"I want to remove the gate in front of number 1.",
			"And I want to walk down that.",
			"And I want to build another place for me to go.",
			">> And that's what I've done here.",
			"So 1 no longer points to null.",
			"I've said it's safe to go down here now.",
			"I built another node.",
			"And when I get to that node, I have another decision to make.",
			"Where am I going to go from here?",
			">> Well, I've already gone down the 1.",
			"So now I probably want to go down the 6.",
			"Right.",
			"Again, I have 10 locations I can choose.",
			"So let's now go down number 6.",
			"So I clear the gate in front of number 6.",
			"And I walk down there.",
			"And I build another node.",
			"And I've reached another junction point.",
			">> Again, I have 10 choices for where I can go.",
			"I've moved from 1 to 6.",
			"So now I probably want to go to 3.",
			"3, there's nowhere I can go.",
			"So I have to clear the way and build myself a new space.",
			"And then from 3, where do I want to go?",
			"I want to go down 6.",
			">> And, again, I had to clear the way to do it.",
			"So now I've used my key to insert create nodes and start to build this trie.",
			"I've started at the root.",
			"I've gone down 1636.",
			"And now I'm at the bottom there on that node.",
			"And you might be able to see it on your screen.",
			">> It's highlighted in yellow.",
			"That's where I currently am.",
			"My key is done.",
			"I've exhausted every position in my key.",
			"So I can't go any further.",
			"So at this point, all I really need to do is say, OK.",
			"It's kind of like looking down at the ground,",
			"if you're envisioning yourself as this sort of path",
			"with different connections.",
			"Sort of looking down and sort of spray painting Harvard on the ground.",
			"That's the name of this.",
			"Know that's what's at this location.",
			"If we start at the root and we go down 1 and then 6 and then 3 and then 6,",
			"where are we?",
			"Well if we look down and we see Harvard, then",
			"we know that Harvard was founded in 1636 based on the way",
			"we're implementing this data structure.",
			"So that was hopefully straightforward.",
			"We're going to do two more insertions.",
			"And hopefully it'll help to see this done twice more.",
			">> Now, let's insert another university.",
			"Let's insert Yale into this trie.",
			"Yale was founded in 1701.",
			"So we'll start at the root, as we always do.",
			"And we set a traversal pointer.",
			"We're going to use that to move through.",
			"The first thing we want to do is go down the 1 path.",
			"That's the first digit of our key.",
			"Fortunately, though, we don't have to do any work this time.",
			"The 1 path has already been cleared.",
			"I cleared it previously when I was inserting Harvard at 1636.",
			"So I can safely move down 1 and just go there.",
			"If can move down the 1.",
			">> Now, though, I want to go to 7.",
			"I cleared the way at 6.",
			"I know I can safely proceed down the 6 path.",
			"But I need to proceed on the 7 path.",
			"So what do I need to do?",
			"Well, just like before, I just need to clear the gate, get out of the way,",
			"and build a new node from the 7 path.",
			"Just like this.",
			">> So now I've moved 1 and then 7.",
			"And now notice, I'm sort of on this new subbranch.",
			"Right.",
			"Everything else from 16 on, I don't care about.",
			"I'm not doing 16 anything.",
			"I'm doing 17 stuff.",
			">> So now from 17 on, I have to sort of blaze new trails here.",
			"The next digit my key is 0.",
			"I clearly can't get anywhere.",
			"I just built this node.",
			"So I know there's no paths forward from here.",
			"So I have to make one myself.",
			">> So I malloc a new node and have 0 point there.",
			"And then one more time, I malloc a new node and have one point there.",
			"Again, I've exhausted my key, 1701.",
			"So I look down and I spray paint Yale.",
			"That's the name of this node.",
			">> And so now if I ever need to see if Yale is in this trie, I start at the root,",
			"I go down 1701, and look down.",
			"And if I see Yale spray painted onto the ground, then",
			"I know Yale exists in this trie.",
			"Let's do one more.",
			"Let's insert Dartmouth into this trie, which was founded in 1769.",
			">> Start at the root again.",
			"My first digit of my key is 1.",
			"I can safely move down that path.",
			"That already exists.",
			"The next digit of my key is 7.",
			"I can safely move down that path.",
			"It exists as well.",
			">> My next is 6.",
			"From here, from where I currently am in yellow there in that middle node,",
			"6 is currently locked off.",
			"If I want to go down that path, I have to build it myself.",
			"So I'll malloc a new node and have 6 point there.",
			"And then, again, I'm blazing new trails here.",
			">> So I malloc a new node so that from that node-- path number 9-- and then now",
			"if I travel 1769, and I look down.",
			"There's nothing currently spray painted there.",
			"I can write Dartmouth.",
			"And I've inserted Dartmouth into the trie.",
			">> So that's inserting things into the trie.",
			"Now we want to search for things.",
			"How do we search for things in the trie?",
			"Well, it's pretty much the same idea.",
			"Now we just use the digits of the key to see if we can navigate from the root",
			"to where we want to go in the trie.",
			">> If we hit a dead end at any point, then we know that that element can't exists",
			"or else that path would have already been cleared.",
			"If we make it all the way to the end, all we need to do",
			"is look down and see if that's the element we're looking for.",
			"If it is, success.",
			"If it's not, fail.",
			">> So let's search for Harvard in this trie.",
			"We start at the root.",
			"And, again, we're going to create a traversal pointer",
			"to do our moves for us.",
			"From the root we know that the first place we need to go is 1,",
			"can we do that?",
			"Yes, we can.",
			"If safely exists.",
			"We can go there.",
			">> Now, the next place we need to go is 6.",
			"Does the 6 path exist from here?",
			"Yeah, it does.",
			"We can go down the 6 path.",
			"And we end up here.",
			">> Can we go down the 3 path from here?",
			"Well, as it turns out, yes, that exists too.",
			"And can we get on the 6 path from here?",
			"Yes, we can.",
			">> We haven't quite answered the question yet.",
			"There's still one more step, which is now",
			"we need to look down and see if that's actually--",
			"if we're looking for Harvard, is that what we find after we exhaust the key?",
			"In the example we're using here, the years are always four digits.",
			"But you might be using the example where you are storing a dictionary of words.",
			">> And so instead of having 10 pointers for my location, you might have 26.",
			"One for each letter of the alphabet.",
			"And there are some words like bat, which is a subset of batch, for example.",
			"And so even if you get to the end of the key and you look down,",
			"you might not see what you're looking for.",
			">> So you always have to traverse the entire path and then",
			"if you were successfully able to traverse the entire path,",
			"look down and do one final confirmation.",
			"Is that what I'm looking for?",
			"Well, I look down after starting at the top and going 1636.",
			"I look down.",
			"I see Harvard.",
			"So, yes, I succeeded.",
			"What if what I'm looking for isn't in the trie, though.",
			"What if I'm looking for Princeton, which was founded in 1746.",
			"And so 1746 becomes my key to navigate through the trie.",
			"Well, I start at the root.",
			"And the first place I want to goes down the 1 path.",
			"Can I do it?",
			"Yes, I can.",
			">> Can I go down the 7 path from there?",
			"Yeah, I can.",
			"That exists too.",
			"But can I go down the 4 path from here?",
			"That's like asking the question, can I proceed down that little square",
			"that I've highlighted in yellow?",
			"There's nothing there.",
			"Right.",
			">> There's no way forward down the 4 path.",
			"If Princeton was in this trie, that 4 would have been cleared for us already.",
			"And so at this point we've reached a dead end.",
			"We can't go any further.",
			"And so we can say, definitively, no.",
			"Princeton does not exist in this trie.",
			">> So what does this all mean?",
			"Right.",
			"There's a lot going on here.",
			"There's pointers all over the place.",
			"And, as you can see just from the diagram,",
			"there's a lot of nodes that are kind of flying around.",
			"But notice every time we wanted to check whether something was in the trie,",
			"we only had to make 4 moves.",
			">> Every time we wanted to insert something in the trie,",
			"we have to make 4 moves, possibly mallocing some stuff along the way.",
			"But as we saw when we inserted Dartmouth into the trie,",
			"sometimes some of the path might already be cleared for us.",
			"And so as our trie gets bigger and bigger, we have do less work every time",
			"to insert new things because we've already",
			"built a lot of the intermediate branches along the way.",
			"If we only ever have to look at 4 things, 4 is just a constant.",
			"We really are kind of approaching constant time insertion",
			"and constant time lookup.",
			"The tradeoff, of course, being that this trie, as you can probably tell,",
			"is huge.",
			"Each one of these nodes takes up a lot of space.",
			">> But that's the tradeoff.",
			"If we want really quick insertion, really quick deletion,",
			"and really quick lookup, we have to have a lot of data flying around.",
			"We have to set aside a lot of space and memory for that data structure",
			"to exist.",
			">> And so that's the tradeoff.",
			"But it looks like we might have found it.",
			"We might have found that holy grail of data structures",
			"with quick insertion, deletion, and lookup.",
			"And maybe this will be an appropriate data structure",
			"to use for whatever information we're trying to store.",
			"I'm Doug Lloyd, this is cs50.",
			""
		],
		"is_youtube": false
	},
	"video_031": {
		"section": "CS50x 2021",
		"subsection": "Week 5",
		"unit": "Shorts",
		"video_sources": [
			"https://edx-video.net/HARCS50X2016-V035500_DTH.mp4",
			"https://edx-video.net/HARCS50X2016-V035500/HARCS50X2016-V035500.m3u8"
		],
		"video_duration": 532,
		"speech_period": [
			5.259, 3.041, 0.88, 2.24, 3.79, 2.369, 2.541, 2.72, 2.35, 2.96, 2.57, 2.0,
			5.42, 2.0, 4.125, 2.125, 2.333, 3.227, 3.557, 1.833, 4.1, 5.185, 4.136,
			0.499, 2.708, 1.372, 3.19, 3.19, 1.62, 1.27, 2.69, 4.05, 2.22, 1.98, 1.96,
			3.66, 2.42, 3.12, 3.1, 0.98, 3.91, 2.97, 1.15, 2.1, 2.88, 2.107, 1.333,
			1.39, 2.39, 3.02, 4.78, 3.04, 1.11, 1.35, 1.375, 3.515, 1.11, 2.86, 2.82,
			2.63, 1.31, 1.34, 3.302, 3.168, 3.66, 1.35, 5.99, 2.57, 1.97, 1.602,
			1.208, 1.17, 3.0, 2.56, 2.321, 1.499, 1.749, 3.691, 1.38, 2.81, 2.874,
			3.166, 1.54, 1.614, 1.791, 2.565, 3.92, 1.916, 2.204, 2.627, 1.333, 1.916,
			1.964, 2.11, 1.57, 3.74, 2.7, 2.666, 2.124, 2.71, 5.4, 3.45, 1.15, 2.52,
			1.13, 3.72, 6.85, 3.329, 2.291, 1.958, 2.122, 2.692, 1.708, 1.39, 4.094,
			1.791, 2.725, 3.28, 1.98, 2.65, 3.61, 5.22, 6.99, 2.27, 4.43, 2.88, 4.77,
			3.29, 3.76, 3.3, 2.915, 1.375, 2.46, 1.76, 3.05, 2.47, 3.23, 3.28, 1.994,
			2.416, 3.69, 0.5, 3.387, 1.833, 3.55, 2.41, 2.32, 1.35, 2.38, 1.95, 2.38,
			2.92, 3.99, 5.56, 1.24, 4.39, 1.25, 4.42, 2.26, 0.87, 3.65, 1.09, 1.51,
			2.85, 3.144, 2.666, 2.849, 3.041, 3.19, 3.21, 1.92, 3.26, 5.024, 2.166,
			2.624, 1.196, 3.71, 3.85, 4.34, 1.91, 2.61, 3.95, 2.99, 2.79, 2.02, 5.71,
			2.875, 4.182, 1.833, 1.541, 2.119, 2.97, 2.16, 3.2, 1.95, 0.93, 2.03,
			1.576
		],
		"transcript_en": [
			"",
			"DOUG LLOYD: So in CS50, we've covered a lot of different data structures,",
			"right?",
			"We've seen arrays, and linked lists, and hash tables,",
			"and tries, stacks and queues.",
			"We'll also learn a little about trees and heaps,",
			"but really these all just end up being variations on a theme.",
			"There really are these kind of four basic ideas",
			"that everything else can boil down to.",
			"Arrays, linked lists, hash tables, and tries.",
			"And like I said, there are variations on them,",
			"but this is pretty much going to summarize",
			"everything we're going to talk about in this class in terms of C.",
			">> But how do these all measure up, right?",
			"We've talked about the pros and cons of each in separate videos on them,",
			"but there's a lot of numbers getting thrown around.",
			"There's a lot of general thoughts getting thrown around.",
			"Let's try and consolidate it into just one place.",
			"Let's weigh the pros against the cons, and consider",
			"which data structure might be the right data",
			"structure for your particular situation, whatever kind of data you're storing.",
			"You don't necessarily always need to use the super fast insertion, deletion,",
			"and lookup of a trie if you really don't care about inserting and deleting",
			"too much.",
			"If you need just quickly random access, maybe an array is better.",
			"So let's distill that.",
			"Let's talk about each of the four major kinds of data structures",
			"that we've talked about, and just see when they might be good,",
			"and when they might not be so good.",
			"So let's start with arrays.",
			"So insertion, that's kind of bad.",
			">> Insertion at the end of an array is OK, if we're building an array as we go.",
			"But if we need to insert elements into the middle,",
			"think back to insertion sort, there's a lot",
			"of shifting to fit an element in there.",
			"And so if we're going to insert anywhere but the end of an array,",
			"that's probably not so great.",
			">> Similarly, deletion, unless we're deleting from the end of an array,",
			"is probably also not so great if we don't want to leave empty gaps,",
			"which usually we don't.",
			"We want to remove an element, and then sort of make it snug again.",
			"And so deleting elements from an array, also not so great.",
			">> Lookup, though, is great.",
			"We have random access, constant time lookup.",
			"We just say seven, and we go to array relocation seven.",
			"We say 20, with go to array relocation 20.",
			"We don't have to iterate across.",
			"That's pretty good.",
			">> Arrays are also relatively easy to sort.",
			"Every time we talked about a sorting algorithm, such as selection sort,",
			"insertion sort, bubble sort, merge sort, we always used arrays to do it,",
			"because arrays are pretty easy to sort, relative to the data structures",
			"we've seen so far.",
			">> They're also relatively small.",
			"There's not a lot of extra space.",
			"You just set aside exactly as much as you need to hold your data,",
			"and that's pretty much it.",
			"So they're pretty small and efficient in that way.",
			"But another downside, though, is that they are fixed in size.",
			"We have to declare exactly how big we want our array to be,",
			"and we only get one shot at it.",
			"We can't grow and shrink it.",
			">> If we need to grow or shrink it, we need to declare an entirely new array,",
			"copy all of the elements of the first array into the second array.",
			"And if we miscalculated that time, we need to do it again.",
			"Not so great.",
			"So arrays don't give us the flexibility to have variable numbers of elements.",
			">> With a linked list, insertion is pretty easy.",
			"We just tack onto the front.",
			"Deletion is also pretty easy.",
			"We have to find the elements.",
			"That involve some searching.",
			">> But once you've found the element you're looking for, all you need to do",
			"is change a pointer, possibly two if you have",
			"a linked list-- a doubly linked list, rather--",
			"and then you can just free the node.",
			"You don't have to shift everything around.",
			"You just change two pointers, so that's pretty quick.",
			">> Lookup is bad though, right?",
			"In order for us to find an element in a linked list,",
			"whether singly or doubly linked, we have to linear search it.",
			"We have to start at the beginning and move the end, or start at the end move",
			"to the beginning.",
			"We don't have random access anymore.",
			"So if we're doing a lot of searching, maybe",
			"a linked list isn't quite so good for us.",
			">> They're also really difficult to sort, right?",
			"The only way you can really sort a linked list",
			"is to sort it as you construct it.",
			"But if you sort it as you construct it, you're no longer",
			"making quick insertions anymore.",
			"You're not just tacking things onto the front.",
			"You have to find the right spot to put it,",
			"and then your insertion becomes just about as bad",
			"as inserting into an array.",
			"So linked lists are not so great for sorting data.",
			">> They're also pretty small, size-wise.",
			"Doubly linked list slightly larger than singly linked lists,",
			"which are slightly larger than arrays, but it's not",
			"a huge amount of wasted space.",
			"So if space is at a premium, but not a really intense premium,",
			"this might be the right way to go.",
			">> Hash tables.",
			"Insertion into a hash table is fairly straightforward.",
			"It's a two-step process.",
			"First we need to run our data through a hash function to get a hash code,",
			"and then we insert the element into the hash table at that hash code location.",
			">> Deletion, similar to linked list, is easy once you find the element.",
			"You have to find it first, but then when you delete it,",
			"you just need to exchange a couple of pointers,",
			"if you're using separate chaining.",
			"If you're using probing, or if you're not",
			"using chaining at all in your hash table,",
			"deletion is actually really easy.",
			"All you need to do is hash the data, and then go to that location.",
			"And assuming you don't have any collisions,",
			"you'll be able to delete very quickly.",
			">> Now, lookup is where things get a little more complicated.",
			"It's on average better than linked lists.",
			"If you're using chaining, you still have a linked list,",
			"which means you still have the search detriment a linked list.",
			"But because you're taking your linked list and splitting it over 100 or 1,000",
			"or n elements in your hash table, you're linked lists are all one nth the size.",
			"They're all substantially smaller.",
			"You have n linked lists instead of one linked list of size n.",
			">> And so this real-world constant factor, which we generally",
			"don't talk about in time complexity, it does actually make a difference here.",
			"So lookup is still linear search if you're using chaining,",
			"but the length of the list you're searching through",
			"is very, very short by comparison.",
			"Again, if sorting is your goal here, hash table's",
			"probably not the right way to go.",
			"Just use an array if sorting is really important to you.",
			">> And they can run the gamut of size.",
			"It's hard to say whether a hash table is small or big,",
			"because it really depends on how large your hash table is.",
			"If you're only going to be storing five elements in your hash table,",
			"and you have a hash table with 10,000 elements in it,",
			"you're probably wasting a lot of space.",
			"Contrast being you can also have very compact hash tables,",
			"but the smaller your hash table gets, the longer each of those linked lists",
			"gets.",
			"And so there's really no way to define exactly the size of a hash table,",
			"but it's probably safe to say it's generally",
			"going to be bigger than a linked list storing the same data,",
			"but smaller than a trie.",
			">> And tries are the fourth of these structures",
			"that we've been talking about.",
			"Inserting into a trie is complex.",
			"There's a lot of dynamic memory allocation,",
			"especially at the beginning, as you're starting to build.",
			"But it's constant time.",
			"It's only the human element here that makes it tricky.",
			"Having to encounter null pointer, malloc space, go there, possibly malloc space",
			"from there again.",
			"The sort of intimidation factor of pointers in dynamic memory allocation",
			"is the hurdle to clear.",
			"But once you've cleared it, insertion actually comes quite simple,",
			"and it certainly is constant time.",
			">> Deletion is easy.",
			"All you need to do is navigate down a couple of pointers and free the node,",
			"so that's pretty good.",
			"Lookup is also pretty fast.",
			"It's only based on the length of your data.",
			"So if all of your data is five character strings,",
			"for example, you're storing five character strings in your trie,",
			"it only takes five steps to find what you're looking for.",
			"Five is just a constant factor, so again, insertion, deletion, and lookup",
			"here are all constant time, effectively.",
			">> Another thing is that your trie is actually kind of already sorted, right?",
			"By virtue of how we're inserting elements,",
			"by going letter by letter of the key, or digit by digit of the key,",
			"typically, your trie ends up being kind of sorted as you build it.",
			"It doesn't really makes sense to think about sorting",
			"in the same way we think about it with arrays, or linked lists,",
			"or hash tables.",
			"But in some sense, your trie is sorted as you go.",
			">> The downside, of course, is that a trie rapidly becomes huge.",
			"From every junction point, you might have-- if your key consists of digits,",
			"you have 10 other places you can go, which",
			"means that every node contains information",
			"about the data you want to store at that node, plus 10 pointers.",
			"Which, on CS50 IDE, is 80 bytes.",
			"So it's at least 80 bytes for every node that you create,",
			"and that's not even counting data.",
			"And if your nodes are letters instead of digits,",
			"now you have 26 pointers from every location.",
			"And 26 times 8 is probably 200 bytes, or something like that.",
			"And you have capital and lowercase-- you can",
			"see where I'm going with this, right?",
			"Your nodes can get really big, and so the trie",
			"itself, overall, can get really big, too.",
			"So if space is at a high premium on your system,",
			"a trie might not be the right way to go, even though its other benefits",
			"come into play.",
			"I'm Doug Lloyd.",
			"This is CS50.",
			""
		],
		"is_youtube": false
	},
	"video_032": {
		"section": "CS50x 2021",
		"subsection": "Week 6",
		"unit": "Lecture",
		"video_sources": [
			"https://edx-video.net/73cba95e-ebc0-4713-bcd0-8d4d62dddb4c.m3u8",
			"https://edx-video.net/73cba95e-ebc0-4713-bcd0-8d4d62dddb4c-mp4_720p.mp4"
		],
		"video_duration": 9645,
		"speech_period": [
			6.461, 42.101, 0.958, 2.88, 3.55, 2.388, 2.792, 3.3, 1.68, 2.638, 2.042,
			2.07, 3.24, 3.425, 2.125, 3.78, 3.45, 5.64, 4.26, 2.1, 3.65, 0.5, 3.41,
			1.83, 3.48, 3.54, 2.95, 4.1, 1.39, 3.48, 4.19, 0.81, 2.88, 3.18, 2.02,
			2.78, 3.21, 2.85, 3.63, 3.78, 3.27, 1.568, 1.792, 3.21, 1.92, 4.02, 4.53,
			4.78, 3.17, 3.51, 2.62, 3.92, 4.77, 0.85, 2.833, 3.847, 2.01, 3.99, 3.21,
			2.25, 2.97, 1.71, 2.67, 2.4, 3.72, 2.73, 3.42, 3.46, 3.41, 3.01, 4.992,
			2.417, 3.801, 3.51, 2.1, 3.21, 1.59, 4.14, 2.4, 3.12, 3.78, 1.26, 1.68,
			2.31, 4.0, 4.52, 2.49, 2.19, 5.01, 1.33, 4.438, 1.792, 2.58, 3.3, 3.58,
			2.375, 1.515, 3.54, 2.29, 4.79, 1.71, 4.47, 4.17, 3.017, 2.833, 2.997,
			1.833, 1.542, 3.138, 3.24, 2.2, 4.37, 0.75, 2.92, 1.75, 4.36, 3.42, 1.035,
			2.955, 0.9, 5.82, 4.5, 0.54, 2.49, 2.92, 3.83, 2.28, 1.47, 3.39, 3.51,
			4.5, 1.485, 2.625, 4.2, 3.42, 2.46, 3.09, 3.54, 2.34, 3.61, 2.06, 1.23,
			1.893, 1.917, 4.33, 3.02, 3.12, 4.098, 2.292, 2.083, 2.657, 2.28, 2.61,
			2.49, 1.623, 2.667, 4.57, 3.12, 2.75, 2.4, 2.25, 2.25, 4.86, 2.34, 3.78,
			2.67, 2.91, 3.48, 1.62, 2.55, 3.39, 5.07, 5.11, 4.7, 2.97, 1.71, 4.56,
			2.01, 5.52, 2.31, 1.89, 4.29, 2.82, 3.09, 3.39, 4.2, 3.75, 2.58, 3.79,
			2.72, 3.18, 1.5, 1.833, 4.047, 2.85, 4.53, 2.67, 3.16, 2.27, 4.77, 1.44,
			3.54, 1.977, 2.583, 2.792, 2.008, 2.77, 4.4, 3.57, 3.27, 1.8, 3.12, 2.1,
			2.29, 3.95, 2.64, 4.35, 1.92, 4.11, 2.67, 3.9, 4.44, 2.49, 2.41, 4.82,
			3.66, 2.37, 2.73, 1.5, 1.53, 3.24, 2.82, 2.76, 2.8, 2.45, 3.53, 4.06,
			2.65, 3.09, 4.19, 1.57, 2.03, 3.69, 4.38, 1.35, 5.16, 6.54, 2.19, 2.67,
			5.46, 2.25, 0.94, 2.93, 2.01, 3.27, 0.84, 4.44, 3.45, 3.72, 5.04, 2.67,
			4.77, 3.63, 1.95, 3.85, 3.77, 2.28, 1.56, 2.01, 3.96, 0.93, 2.46, 2.73,
			2.41, 3.428, 2.292, 3.57, 1.23, 3.69, 1.68, 2.01, 3.69, 3.27, 4.11, 6.09,
			3.72, 4.44, 3.33, 4.83, 3.06, 2.92, 1.857, 1.583, 3.312, 2.208, 4.11,
			3.99, 4.5, 1.68, 1.8, 2.7, 2.56, 2.68, 3.07, 4.22, 3.76, 2.36, 4.17, 1.6,
			3.53, 1.89, 2.82, 4.545, 1.995, 2.55, 1.23, 3.0, 3.6, 3.83, 2.07, 1.51,
			4.395, 0.875, 5.7, 4.86, 4.68, 1.38, 1.292, 5.128, 1.985, 1.375, 3.569,
			2.46, 1.411, 2.567, 2.083, 2.37, 3.51, 3.12, 3.15, 3.42, 4.77, 1.71, 2.26,
			1.76, 2.22, 1.81, 2.36, 5.07, 2.67, 1.35, 3.63, 3.45, 1.2, 1.56, 1.63,
			4.7, 2.67, 0.72, 1.14, 4.41, 2.46, 3.03, 2.73, 2.85, 4.02, 2.94, 3.57,
			3.76, 3.63, 1.25, 1.77, 4.35, 2.86, 2.33, 3.42, 3.72, 2.01, 1.59, 3.13,
			2.3, 1.84, 3.77, 1.89, 1.71, 2.76, 3.96, 3.6, 2.04, 2.97, 4.41, 4.08,
			4.38, 3.54, 4.39, 2.69, 4.77, 1.65, 3.03, 2.85, 2.927, 2.083, 2.917,
			2.873, 2.11, 3.56, 2.52, 4.59, 3.03, 4.11, 3.96, 4.15, 3.68, 5.01, 4.65,
			3.868, 2.042, 2.22, 2.59, 4.76, 4.41, 3.12, 2.49, 3.39, 1.923, 1.917,
			4.05, 1.0, 2.958, 2.612, 1.2, 3.28, 0.5, 4.35, 2.88, 4.2, 2.97, 4.02, 3.6,
			2.94, 1.05, 3.18, 2.64, 0.75, 1.65, 2.125, 3.605, 4.29, 0.692, 1.708,
			2.16, 4.05, 3.847, 1.833, 0.92, 2.25, 1.95, 2.1, 4.29, 4.2, 1.08, 4.11,
			5.04, 3.78, 3.81, 2.52, 5.61, 4.26, 4.15, 4.37, 1.873, 2.417, 2.4, 2.22,
			2.43, 2.58, 4.45, 4.49, 1.41, 3.27, 3.48, 2.73, 3.06, 1.61, 0.5, 3.5,
			1.53, 3.672, 2.458, 1.94, 4.59, 3.6, 4.32, 4.77, 1.92, 3.18, 1.56, 1.92,
			2.43, 4.17, 4.2, 2.16, 5.04, 3.42, 3.39, 1.71, 2.26, 2.21, 3.84, 2.44,
			2.24, 1.74, 2.917, 1.473, 3.35, 4.98, 4.08, 2.61, 1.83, 3.18, 2.28, 1.98,
			2.76, 2.97, 2.81, 2.13, 3.44, 0.5, 3.05, 2.11, 2.03, 3.36, 2.16, 1.77,
			1.59, 3.39, 3.6, 1.41, 1.89, 6.06, 1.38, 3.09, 2.58, 2.99, 2.98, 2.32,
			2.57, 2.91, 4.29, 5.14, 4.16, 1.17, 2.85, 1.89, 1.62, 2.67, 2.97, 1.77,
			3.24, 1.71, 4.47, 3.46, 3.5, 4.8, 3.9, 2.19, 3.615, 1.875, 3.06, 5.01,
			1.71, 3.24, 3.06, 4.12, 5.69, 3.99, 2.52, 3.9, 1.12, 4.55, 2.04, 1.92,
			2.15, 2.17, 1.44, 3.42, 3.66, 1.92, 3.03, 3.84, 3.43, 4.4, 2.44, 4.76,
			2.4, 2.82, 2.49, 4.31, 2.65, 2.895, 3.015, 4.33, 1.82, 5.55, 2.91, 4.32,
			3.0, 2.7, 3.66, 3.59, 0.5, 5.36, 4.14, 4.055, 2.875, 4.88, 3.09, 4.24,
			3.66, 3.963, 1.417, 4.89, 6.92, 2.91, 2.73, 3.13, 4.79, 5.16, 2.73, 2.79,
			3.712, 1.958, 1.583, 3.307, 2.76, 4.53, 2.85, 3.21, 2.61, 3.48, 0.51, 1.2,
			3.84, 2.76, 1.542, 2.868, 2.505, 1.125, 1.458, 2.992, 3.14, 2.007, 1.833,
			3.96, 1.258, 2.042, 2.76, 3.84, 2.7, 2.22, 2.97, 4.42, 2.61, 2.74, 4.29,
			2.25, 0.7, 1.97, 0.75, 3.09, 3.15, 3.24, 3.33, 3.66, 2.46, 3.57, 1.919,
			3.333, 3.208, 2.689, 1.75, 2.19, 4.741, 3.18, 4.119, 2.551, 4.28, 1.68,
			4.679, 4.111, 0.66, 3.27, 2.16, 4.26, 3.66, 2.73, 0.84, 3.22, 3.0, 2.3,
			4.14, 3.03, 3.3, 2.258, 1.292, 2.81, 2.152, 1.958, 3.51, 4.17, 3.66, 5.07,
			2.65, 2.608, 1.792, 4.68, 1.95, 1.83, 2.16, 3.51, 1.74, 3.0, 1.45, 3.05,
			4.11, 3.03, 2.46, 3.39, 3.61, 2.66, 4.56, 1.247, 1.583, 2.09, 4.35, 3.24,
			2.43, 2.37, 3.63, 2.28, 3.72, 3.3, 5.1, 4.63, 3.26, 4.89, 7.47, 3.0, 3.42,
			3.21, 2.49, 3.18, 2.29, 6.11, 1.56, 2.67, 2.17, 3.23, 2.26, 2.63, 5.61,
			4.137, 1.833, 2.28, 2.24, 2.583, 4.017, 3.87, 4.71, 1.17, 4.41, 3.33,
			3.94, 3.08, 3.63, 4.54, 0.92, 1.95, 2.25, 2.49, 2.46, 4.38, 2.37, 3.78,
			4.35, 4.53, 2.86, 0.5, 2.39, 1.75, 2.708, 1.17, 1.792, 3.0, 1.9, 4.46,
			3.63, 1.86, 3.94, 2.4, 1.26, 4.79, 1.62, 2.91, 2.52, 5.35, 4.67, 2.73,
			2.85, 2.19, 4.98, 2.975, 2.875, 2.97, 3.54, 3.75, 1.86, 4.44, 2.04, 2.7,
			3.85, 0.89, 1.238, 1.792, 2.94, 3.57, 3.18, 3.235, 3.125, 2.28, 2.58,
			2.22, 1.68, 2.91, 3.45, 3.84, 2.748, 2.292, 2.1, 2.49, 5.11, 2.54, 3.18,
			2.827, 1.583, 1.71, 3.6, 1.26, 2.46, 3.93, 1.68, 4.53, 4.02, 3.6, 2.58,
			2.34, 3.79, 3.59, 2.43, 1.84, 2.42, 1.98, 1.867, 3.083, 3.152, 3.208,
			0.63, 2.14, 1.76, 4.14, 2.16, 1.92, 2.85, 3.36, 3.87, 2.46, 1.982, 1.708,
			2.34, 2.49, 4.95, 6.33, 3.09, 2.07, 4.2, 2.19, 6.06, 0.85, 1.79, 2.7, 3.6,
			2.49, 1.93, 4.13, 4.32, 3.39, 1.62, 0.57, 5.91, 2.07, 3.48, 3.45, 3.36,
			4.83, 2.97, 4.08, 5.61, 3.27, 2.13, 2.16, 2.37, 2.53, 0.74, 2.1, 3.09,
			3.69, 4.02, 2.73, 1.74, 1.32, 1.8, 1.792, 4.088, 4.38, 1.95, 2.042, 2.158,
			2.89, 3.2, 9.36, 1.14, 2.91, 1.32, 1.41, 1.32, 3.84, 7.65, 2.39, 3.3,
			5.64, 2.75, 1.5, 2.65, 3.69, 3.3, 3.21, 1.86, 5.13, 3.25, 3.56, 1.59,
			3.15, 3.81, 3.27, 3.39, 1.14, 2.49, 4.92, 1.69, 2.0, 2.22, 2.94, 2.61,
			2.26, 3.5, 0.97, 3.53, 1.56, 1.38, 3.09, 2.19, 2.13, 5.55, 3.63, 0.73,
			3.042, 2.918, 7.83, 2.37, 2.22, 2.46, 3.9, 4.47, 5.23, 3.02, 4.17, 0.84,
			1.92, 2.213, 2.917, 1.59, 2.46, 3.12, 2.82, 2.76, 3.888, 3.042, 3.27,
			2.76, 5.17, 0.5, 3.66, 1.72, 2.888, 3.042, 4.118, 1.792, 1.792, 2.048,
			2.19, 1.74, 2.22, 2.243, 1.417, 3.18, 2.58, 3.88, 1.46, 2.22, 4.14, 0.69,
			3.72, 3.78, 3.9, 4.29, 1.8, 5.71, 2.27, 5.83, 0.5, 0.97, 3.53, 4.95, 4.2,
			4.02, 5.91, 3.63, 2.46, 3.24, 2.58, 2.28, 1.92, 3.94, 3.39, 4.832, 2.208,
			1.86, 0.75, 2.67, 2.807, 2.083, 4.02, 0.93, 3.93, 2.52, 3.87, 1.515,
			1.875, 2.49, 5.13, 0.93, 2.37, 3.3, 3.0, 3.4, 4.71, 6.83, 1.18, 2.69,
			2.43, 3.13, 2.34, 4.34, 2.53, 4.82, 3.66, 1.68, 0.762, 2.458, 1.67, 2.01,
			2.85, 2.55, 5.07, 4.26, 2.55, 2.293, 2.417, 3.09, 4.29, 2.85, 4.54, 2.09,
			3.39, 2.34, 3.51, 2.97, 2.49, 3.21, 4.77, 2.55, 3.09, 2.4, 4.29, 3.42,
			2.22, 2.49, 4.62, 4.41, 3.66, 1.98, 1.65, 3.6, 4.425, 1.875, 3.06, 1.83,
			1.5, 1.922, 0.958, 2.01, 0.75, 1.08, 0.52, 0.5, 0.667, 2.183, 3.06, 0.78,
			1.318, 1.292, 0.87, 2.97, 2.43, 2.41, 2.33, 1.83, 3.24, 3.15, 1.63, 2.27,
			1.74, 3.45, 3.07, 4.13, 3.79, 2.21, 1.38, 1.87, 2.68, 4.35, 2.85, 1.77,
			3.39, 2.88, 3.24, 0.99, 1.467, 2.583, 3.66, 2.91, 3.88, 2.87, 3.0, 1.41,
			3.21, 1.92, 3.75, 1.23, 2.88, 1.95, 2.85, 3.24, 2.49, 2.583, 4.497, 1.8,
			0.72, 0.69, 2.19, 3.6, 2.97, 1.59, 3.21, 2.89, 4.34, 3.12, 2.705, 2.125,
			3.33, 1.39, 2.81, 3.69, 4.02, 2.71, 3.2, 4.77, 1.01, 2.39, 2.93, 3.24,
			3.12, 2.05, 3.23, 4.92, 1.83, 2.37, 1.59, 3.0, 1.83, 2.35, 1.82, 1.44,
			3.042, 2.125, 2.963, 3.01, 2.84, 2.22, 2.52, 1.292, 1.875, 1.673, 1.25,
			2.2, 1.55, 1.9, 3.95, 2.35, 2.42, 4.8, 3.06, 3.9, 3.24, 1.92, 3.63, 1.35,
			1.68, 3.24, 2.58, 4.59, 4.17, 3.7, 2.69, 1.54, 1.94, 3.52, 1.08, 3.38,
			4.59, 1.35, 2.72, 3.04, 4.02, 2.88, 3.09, 1.53, 1.05, 2.47, 1.4, 4.38,
			1.32, 1.85, 2.1, 2.43, 2.91, 3.48, 2.445, 4.005, 1.5, 2.28, 2.46, 0.805,
			1.805, 3.09, 3.42, 2.67, 0.76, 2.48, 1.56, 3.45, 1.86, 3.6, 2.85, 1.86,
			3.6, 3.0, 4.86, 2.237, 2.083, 1.86, 2.01, 3.54, 2.46, 1.62, 5.19, 5.25,
			3.3, 3.09, 3.49, 4.19, 3.705, 1.305, 0.95, 1.06, 2.97, 4.29, 3.18, 3.57,
			2.13, 3.54, 2.79, 4.693, 1.667, 2.86, 4.34, 1.98, 2.37, 3.15, 1.89, 4.11,
			3.27, 3.78, 2.472, 2.208, 2.14, 3.6, 2.99, 3.69, 2.22, 2.58, 1.69, 2.632,
			2.458, 3.18, 2.73, 1.83, 3.57, 5.31, 3.99, 4.62, 1.83, 1.38, 3.03, 2.05,
			1.755, 1.875, 1.042, 2.698, 6.99, 5.34, 1.59, 4.075, 2.625, 1.4, 2.75,
			2.14, 3.36, 3.99, 4.11, 4.2, 1.25, 2.77, 2.46, 4.4, 3.43, 1.1, 1.35,
			3.087, 1.833, 1.8, 1.615, 0.875, 2.76, 2.235, 1.875, 3.99, 1.89, 1.792,
			3.938, 4.56, 2.62, 3.98, 4.518, 1.542, 3.31, 3.44, 2.73, 2.35, 2.28, 3.95,
			3.12, 4.62, 2.61, 3.18, 3.599, 2.431, 3.699, 3.261, 4.5, 3.02, 5.169,
			2.611, 2.86, 2.779, 2.791, 1.14, 2.52, 4.139, 1.5, 1.981, 2.17, 4.759,
			2.701, 4.32, 2.85, 2.37, 3.48, 2.82, 3.18, 1.8, 1.18, 2.33, 2.792, 3.208,
			1.38, 0.74, 1.75, 3.0, 3.63, 2.23, 2.81, 4.8, 2.01, 2.41, 6.29, 1.68,
			2.55, 3.4, 2.87, 2.52, 3.06, 2.01, 5.88, 2.46, 3.81, 3.81, 1.712, 1.708,
			6.37, 2.69, 3.84, 3.18, 3.93, 0.9, 5.4, 1.23, 4.06, 2.66, 3.12, 2.25,
			4.17, 0.51, 3.63, 4.5, 3.705, 3.915, 3.18, 3.39, 3.93, 3.572, 1.708, 4.23,
			2.21, 1.75, 2.04, 2.55, 2.24, 2.77, 4.14, 3.51, 2.91, 1.35, 2.64, 1.59,
			2.85, 4.48, 2.48, 4.56, 6.63, 2.2, 3.77, 4.02, 3.0, 1.65, 2.19, 1.35,
			1.23, 1.542, 3.228, 3.42, 1.35, 1.51, 2.96, 2.35, 2.18, 5.01, 3.9, 4.08,
			2.64, 2.88, 3.3, 3.06, 3.96, 3.73, 0.83, 0.69, 2.67, 3.167, 1.949, 2.384,
			4.05, 2.16, 2.41, 2.84, 3.58, 1.46, 3.27, 3.45, 2.97, 4.86, 2.23, 3.32,
			2.94, 6.57, 4.35, 5.22, 1.455, 1.875, 2.26, 2.87, 3.12, 4.44, 3.24, 3.01,
			4.31, 0.84, 7.41, 3.21, 6.71, 6.18, 2.67, 2.4, 2.19, 2.13, 3.84, 2.55,
			4.02, 1.852, 1.208, 2.94, 1.5, 2.94, 3.5, 0.5, 1.792, 2.408, 1.69, 0.75,
			2.28, 2.13, 3.295, 0.875, 0.82, 2.63, 2.7, 4.158, 1.542, 3.57, 3.3, 3.3,
			2.85, 1.74, 3.54, 2.13, 2.02, 2.22, 4.52, 2.25, 4.02, 3.42, 4.98, 3.57,
			3.21, 3.84, 2.64, 5.065, 2.375, 2.895, 1.125, 1.56, 3.24, 2.43, 5.25,
			2.49, 5.408, 2.542, 3.69, 2.775, 1.875, 3.12, 4.14, 4.92, 0.6, 7.44, 2.55,
			2.52, 3.0, 1.14, 2.25, 4.26, 2.52, 1.56, 5.58, 0.88, 4.718, 1.542, 1.56,
			1.11, 3.75, 3.75, 2.58, 6.27, 1.53, 0.72, 1.86, 4.56, 2.43, 3.0, 1.162,
			1.208, 3.42, 1.372, 0.708, 2.0, 2.632, 1.958, 1.625, 3.385, 0.73, 3.95,
			4.35, 3.22, 4.057, 2.083, 5.7, 4.11, 2.91, 2.49, 4.44, 1.72, 2.66, 4.65,
			1.32, 1.62, 2.88, 1.59, 2.91, 3.51, 1.51, 2.99, 2.28, 1.357, 1.583, 2.79,
			6.9, 1.98, 3.15, 2.97, 2.52, 7.05, 2.472, 2.458, 1.73, 2.708, 3.352, 4.8,
			2.94, 5.7, 2.64, 2.28, 3.57, 2.61, 2.94, 2.34, 2.28, 3.09, 3.57, 3.24,
			1.95, 2.47, 1.31, 2.52, 1.89, 2.043, 2.667, 2.88, 1.23, 1.8, 2.73, 3.84,
			3.4, 4.106, 0.774, 2.04, 4.32, 2.35, 4.19, 4.5, 1.35, 4.965, 2.845, 2.41,
			5.15, 1.98, 3.66, 2.96, 0.76, 1.573, 1.667, 3.0, 2.49, 2.55, 1.44, 1.32,
			1.35, 3.24, 3.57, 3.15, 2.46, 3.0, 2.333, 3.319, 2.208, 3.42, 2.908,
			2.042, 2.833, 2.117, 3.93, 3.36, 3.15, 3.22, 1.73, 1.98, 4.2, 1.2, 2.64,
			4.86, 2.08, 2.39, 1.98, 3.45, 4.55, 3.64, 3.22, 3.9, 1.692, 1.958, 3.39,
			3.27, 3.6, 4.74, 2.19, 2.61, 0.81, 3.06, 2.408, 1.792, 2.91, 2.55, 3.295,
			3.125, 3.63, 1.32, 2.82, 3.75, 2.79, 3.36, 5.7, 3.66, 4.44, 1.77, 3.15,
			3.93, 1.5, 2.31, 1.77, 3.63, 1.92, 5.07, 4.29, 1.5, 2.46, 4.8, 6.75, 3.03,
			2.46, 4.17, 4.04, 2.54, 0.52, 2.167, 3.343, 4.26, 2.91, 1.68, 2.94, 2.01,
			3.87, 1.47, 2.97, 3.87, 2.73, 2.13, 8.06, 2.56, 4.01, 2.61, 2.25, 2.655,
			2.378, 2.167, 1.44, 3.99, 4.89, 2.07, 4.26, 2.55, 2.67, 2.94, 1.528,
			2.042, 2.73, 3.37, 3.89, 5.79, 4.21, 3.68, 2.7, 2.76, 3.66, 3.57, 2.19,
			3.74, 1.51, 1.2, 2.34, 2.85, 2.292, 2.568, 3.96, 1.95, 1.948, 1.292, 3.46,
			2.99, 3.905, 2.875, 2.91, 2.46, 3.452, 1.708, 2.07, 3.72, 3.69, 3.04,
			3.77, 3.87, 3.6, 4.0, 2.9, 4.68, 1.81, 0.5, 4.14, 5.28, 2.34, 0.66, 3.405,
			1.125, 0.6, 2.7, 2.74, 1.4, 3.21, 6.03, 0.7, 2.06, 4.18, 2.0, 3.24, 4.77,
			2.07, 4.098, 3.042, 2.52, 3.13, 3.448, 1.792, 6.21, 1.68, 3.06, 0.87,
			3.09, 4.92, 2.25, 4.17, 2.28, 1.45, 2.66, 4.72, 3.93, 2.36, 1.74, 1.93,
			1.64, 1.83, 3.21, 2.71, 1.37, 5.52, 3.48, 3.3, 3.292, 1.958, 4.2, 3.45,
			2.88, 4.59, 1.89, 3.81, 6.09, 4.59, 1.38, 2.25, 2.19, 5.16, 2.73, 1.53,
			4.44, 2.91, 2.07, 1.77, 2.16, 3.36, 4.44, 3.6, 3.33, 2.64, 2.07, 3.12,
			3.69, 2.73, 2.2, 3.44, 1.06, 4.585, 2.125, 2.25, 6.03, 2.25, 3.63, 4.5,
			2.7, 2.4, 2.22, 3.63, 5.25, 2.34, 3.18, 4.07, 1.75, 2.58, 2.91, 2.49,
			4.41, 6.85, 2.303, 1.917, 1.5, 3.78, 3.42, 2.7, 6.87, 3.12, 2.03, 3.043,
			2.417, 3.27, 2.16, 3.33, 4.2, 2.1, 2.94, 2.38, 3.5, 3.06, 1.26, 2.37,
			2.91, 4.15, 1.58, 4.95, 2.28, 3.09, 1.86, 1.06, 1.25, 1.62, 4.62, 1.99,
			3.27, 1.1, 5.27, 2.5, 2.51, 4.32, 2.7, 2.4, 1.95, 2.47, 2.75, 2.22, 4.29,
			1.98, 2.4, 3.12, 4.08, 2.07, 1.695, 2.685, 0.69, 0.9, 1.74, 2.73, 2.892,
			1.458, 2.31, 2.667, 1.083, 1.478, 1.042, 0.75, 2.28, 3.42, 3.93, 1.8,
			2.52, 2.73, 2.08, 3.26, 3.09, 2.64, 3.18, 4.18, 1.67, 5.04, 1.89, 2.49,
			2.68, 4.43, 2.858, 3.292, 2.94, 3.66, 2.43, 3.12, 2.22, 3.84, 2.7, 3.54,
			4.92, 2.97, 3.0, 2.16, 4.29, 2.25, 1.5, 2.01, 2.385, 1.875, 2.85, 2.1,
			1.74, 2.83, 2.39, 2.53, 1.88, 1.89, 2.248, 1.292, 4.23, 1.74, 5.25, 3.06,
			5.52, 3.81, 3.27, 1.78, 3.89, 2.2, 3.73, 2.23, 2.77, 3.17, 1.42, 1.875,
			4.615, 0.5, 2.49, 4.08, 3.675, 1.875, 2.77, 2.84, 4.62, 4.08, 3.728,
			1.792, 3.51, 1.9, 5.99, 1.98, 4.273, 1.667, 1.23, 2.58, 2.49, 3.07, 2.36,
			2.91, 3.16, 3.097, 2.083, 2.07, 3.63, 2.25, 2.58, 4.56, 3.618, 1.542,
			1.17, 3.84, 2.46, 3.27, 0.96, 2.61, 3.45, 1.69, 3.05, 2.58, 4.403, 2.167,
			1.89, 3.0, 3.84, 3.42, 4.11, 1.5, 1.5, 1.5, 6.24, 4.333, 1.917, 2.672,
			0.888, 1.23, 1.38, 1.083, 3.747, 1.5, 2.97, 2.76, 1.75, 4.74, 2.75, 3.42,
			2.415, 1.875, 2.4, 2.85, 3.66, 2.88, 3.54, 3.19, 0.5, 3.21, 3.42, 2.95,
			3.27, 0.5, 2.37, 1.17, 2.34, 5.61, 3.15, 4.34, 2.2, 0.87, 2.098, 1.292,
			2.67, 2.418, 1.542, 2.148, 1.542, 2.79, 3.9, 3.84, 2.97, 2.18, 5.28, 2.91,
			3.15, 1.592, 1.708, 2.19, 2.28, 4.56, 2.94, 4.65, 3.75, 0.5, 0.37, 2.125,
			1.915, 2.91, 2.04, 2.43, 2.732, 2.458, 1.488, 3.042, 3.69, 2.44, 2.3,
			3.14, 2.0, 2.417, 1.953, 2.83, 1.17, 1.4, 4.44, 1.63, 2.28, 2.48, 1.8,
			2.85, 0.648, 2.292, 3.15, 2.89, 2.75, 4.0, 1.627, 2.083, 3.01, 1.06, 0.88,
			2.64, 1.81, 1.82, 2.56, 6.14, 2.07, 1.86, 4.74, 2.85, 4.05, 6.33, 4.797,
			1.833, 2.043, 2.667, 3.54, 3.21, 3.93, 4.828, 2.042, 2.74, 2.15, 1.57,
			3.56, 2.13, 3.15, 3.99, 3.66, 5.34, 3.06, 2.28, 1.38, 5.13, 2.85, 4.32,
			2.82, 3.1, 2.39, 4.29, 1.99, 2.16, 3.74, 2.1, 3.54, 1.23, 1.32, 3.0, 3.76,
			1.7, 1.5, 2.28, 3.63, 4.41, 5.31, 3.75, 1.59, 1.38, 3.18, 3.435, 4.345,
			2.18, 2.52, 2.37, 2.91, 1.95, 3.51, 0.84, 6.21, 3.82, 2.39, 1.698, 2.792,
			1.53, 3.87, 2.972, 1.708, 1.83, 6.0, 0.94, 5.15, 2.67, 4.77, 3.24, 3.57,
			1.6, 2.903, 2.667, 2.82, 2.58, 2.542, 2.416, 1.852, 2.43, 6.13, 2.19, 0.9,
			0.958, 2.042, 2.166, 1.734, 3.25, 4.385, 1.875, 1.59, 2.19, 4.05, 2.4,
			2.558, 1.792, 3.67, 3.68, 3.54, 2.61, 4.11, 4.26, 5.7, 1.78, 5.07, 0.5,
			1.28, 3.46, 2.46, 1.98, 3.6, 3.93, 4.17, 4.71, 5.64, 1.41, 4.8, 5.32,
			3.59, 1.55, 2.26, 4.44, 2.49, 2.67, 4.14, 1.41, 3.9, 3.095, 1.375, 6.1,
			2.58, 2.085, 2.625, 4.29, 7.19, 0.5, 0.46, 1.94, 1.32, 1.8, 3.06, 2.61,
			3.21, 1.54, 1.07, 4.8, 4.18, 2.42, 4.38, 3.3, 1.56, 6.49, 6.67, 0.9, 2.75,
			2.86, 0.56, 5.7, 3.0, 1.74, 1.47, 3.24, 1.53, 1.2, 3.6, 5.337, 1.833,
			3.695, 2.125, 3.63, 8.73, 2.95, 3.02, 5.1, 2.4, 3.9, 2.64, 2.25, 1.83,
			1.32, 1.56, 3.24, 2.16, 1.853, 2.167, 1.29, 3.24, 4.41, 6.3, 0.87, 4.86,
			2.22, 2.37, 3.0, 2.163, 2.667, 3.21, 2.43, 4.41, 2.58, 3.81, 2.35, 4.97,
			3.12, 2.19, 3.09, 2.64, 2.49, 1.74, 4.35, 0.932, 1.958, 2.63, 4.95, 1.98,
			2.915, 2.125, 2.7, 4.14, 4.53, 3.223, 2.417, 1.708, 3.632, 2.89, 1.13,
			2.07, 3.6, 1.08, 3.69, 0.725, 2.125, 2.58, 2.25, 6.21, 3.0, 1.92, 2.85,
			3.48, 1.95, 2.385, 1.875, 1.71, 4.11, 2.25, 3.18, 2.04, 2.88, 3.09, 4.08,
			1.86, 5.07, 1.2, 6.26, 2.47, 2.44, 2.89, 2.37, 1.8, 5.52, 2.76, 1.11,
			3.63, 1.77, 3.24, 2.49, 1.05, 2.73, 3.24, 4.71, 2.64, 2.91, 4.71, 2.82,
			2.46, 1.983, 2.667, 2.01, 2.44, 2.42, 2.16, 1.77, 4.53, 2.1, 2.79, 3.54,
			4.14, 3.42, 1.17, 2.19, 4.35, 1.56, 4.38, 3.99, 2.61, 1.08, 3.12, 2.325,
			2.625, 4.02, 2.02, 3.5, 3.18, 1.87, 4.1, 5.31, 4.26, 1.5, 3.9, 2.94, 3.19,
			0.5, 2.79, 4.17, 3.24, 6.23, 3.12, 1.965, 2.165, 2.055, 2.955, 1.74, 2.4,
			1.89, 3.78, 2.292, 3.0, 2.538, 3.075, 1.875, 2.72, 1.25, 2.69, 5.16, 3.51,
			3.42, 2.94, 3.99, 2.19, 3.24, 4.62, 2.61, 2.44, 1.37, 1.48, 1.01, 2.375,
			3.235, 1.02, 2.07, 3.27, 3.0, 0.87, 1.92, 3.12, 3.81, 2.87, 2.75, 2.48,
			1.44, 5.64, 1.66, 2.96, 2.4, 5.1, 3.878, 1.792, 2.7, 3.84, 3.46, 3.68,
			3.27, 2.34, 2.1, 7.26, 2.7, 2.88, 2.91, 3.75, 1.32, 1.65, 4.89, 3.63,
			4.02, 4.29, 1.99, 4.85, 2.7, 4.53, 2.59, 4.07, 2.19, 2.91, 2.43, 3.06,
			3.978, 0.792, 3.18, 2.91, 2.22, 2.85, 5.56, 1.04, 3.06, 3.6, 3.45, 3.27,
			2.79, 1.65, 1.18, 4.4, 1.46, 1.75, 3.57, 2.7, 1.39, 1.89, 3.81, 1.34,
			4.77, 0.99, 3.15, 4.12, 3.78, 4.05, 1.26, 1.5, 3.12, 3.15, 3.45, 1.56,
			4.77, 3.61, 1.775, 1.375, 1.06, 2.085, 2.375, 1.12, 3.042, 8.018, 1.98,
			3.12, 2.56, 3.77, 1.71, 1.98, 1.74, 2.678, 1.792, 3.66, 2.807, 2.833,
			2.79, 4.62, 1.2, 5.49, 3.81, 2.97, 3.0, 3.48, 2.97, 2.19, 3.13, 3.985,
			1.375, 2.73, 2.37, 3.22, 3.44, 2.49, 3.84, 2.458, 2.042, 3.66, 3.39, 1.74,
			2.01, 3.43, 2.455, 2.375, 2.83, 2.0, 2.84, 2.22, 1.71, 2.4, 3.94, 1.94,
			3.54, 4.11, 6.18, 5.43, 2.13, 4.14, 1.56, 1.95, 4.22, 0.56, 1.72, 3.29,
			2.01, 2.23, 3.092, 2.208, 3.09, 2.1, 2.68, 1.88, 1.92, 2.46, 3.69, 1.95,
			2.04, 3.45, 4.47, 6.96, 3.36, 2.73, 3.51, 2.612, 2.458, 3.748, 1.292,
			5.19, 5.88, 0.85, 3.169, 3.91, 3.471, 2.89, 1.889, 2.301, 4.53, 0.91,
			1.49, 2.76, 4.29, 2.34, 7.9, 7.1, 1.51, 3.41, 2.91, 4.66, 2.069, 2.541,
			5.1, 4.019, 2.34, 4.231, 2.727, 1.292, 2.231, 5.03, 4.569, 2.271, 3.66,
			4.739, 2.851, 0.99, 4.8, 2.91, 3.06, 2.309, 3.841, 2.1, 1.98, 2.34, 4.02,
			3.629, 5.051, 2.9, 1.308, 3.042, 3.81, 3.9, 1.27, 5.66, 3.149, 0.781, 1.5,
			1.23, 4.05, 1.8, 1.539, 0.5, 2.561, 0.5, 3.06, 5.01, 2.47, 1.28, 1.59,
			2.26, 0.5, 3.66, 1.47, 2.82, 0.57, 1.8, 0.78, 5.4, 4.47, 2.97, 2.86, 2.64,
			2.51, 3.81, 3.52, 2.57, 2.505, 3.345, 3.93, 3.66, 3.48, 1.92, 2.75, 3.22,
			1.22, 0.958, 2.912, 3.39, 1.79, 1.5, 1.66, 3.06, 3.12, 1.86, 2.67, 2.85,
			2.76, 3.09, 3.06, 2.753, 2.917, 3.81, 2.85, 1.44, 3.87, 3.07, 2.75, 4.68,
			1.17, 2.16, 3.57, 4.23, 2.04, 5.91, 3.54, 1.14, 2.58, 4.29, 5.56, 0.5,
			2.04, 1.35, 4.89, 3.57, 2.62, 0.5, 6.12, 1.53, 1.728, 1.042, 1.76, 3.57,
			2.32, 3.8, 4.74, 6.36, 2.82, 1.59, 1.89, 2.65, 2.94, 0.5, 2.89, 0.77,
			4.61, 0.69, 0.73, 2.24, 3.27, 0.93, 1.463, 0.667, 1.875, 2.005, 1.16,
			2.79, 4.68, 2.7, 3.51, 3.51, 3.39, 2.64, 3.37, 2.195, 1.375, 5.9, 4.38,
			2.7, 1.83, 2.57, 2.26, 3.9, 1.5, 2.31, 1.89, 2.97, 1.59, 3.87, 4.107,
			1.833, 1.86, 3.75, 2.94, 4.41, 3.36, 4.77, 2.49, 3.87, 3.0, 3.87, 1.057,
			3.083, 3.36, 2.55, 2.79, 4.92, 3.66, 4.512, 2.208, 3.69, 4.5, 1.59, 3.33,
			1.82, 1.0, 0.93, 4.32, 4.02, 0.75, 2.845, 1.625, 2.22, 3.21, 2.5, 2.24,
			6.42, 1.765, 1.625, 4.11, 2.91, 1.65, 2.018, 2.542, 4.17, 1.27, 2.12,
			1.12, 1.13, 3.81, 3.63, 3.36, 4.005, 1.125, 6.27, 4.8, 4.59, 1.14, 2.61,
			3.78, 2.25, 2.52, 2.76, 3.4, 0.83, 5.19, 3.21, 1.57, 1.85, 3.39, 1.12,
			1.37, 0.87, 4.17, 1.72, 5.25, 1.51, 3.02, 1.53, 3.39, 2.52, 5.61, 9.24,
			3.69, 2.01, 0.93, 3.66, 2.61, 3.433, 2.417, 4.08, 3.72, 0.75, 3.088,
			2.042, 3.84, 1.98, 1.38, 4.02, 1.29, 2.31, 7.44, 0.64, 2.27, 7.2, 3.45,
			6.3, 4.76, 3.18, 1.29, 1.2, 4.56, 3.36, 1.45, 3.44, 3.3, 2.26, 1.7, 2.07,
			0.75, 1.11, 1.08, 1.8, 3.33, 1.87, 3.74, 4.02, 1.27, 3.75, 0.87, 3.65,
			0.99, 2.49, 2.7, 3.36, 4.77, 1.53, 3.09, 1.99, 3.38, 2.91, 3.81, 2.61,
			8.61, 2.86, 1.79, 4.01, 2.46, 5.94, 2.61, 5.19, 7.032, 4.138, 0.5, 1.44,
			2.43, 2.97, 4.02, 4.65, 2.55, 6.12, 3.21, 1.587, 1.833, 1.83, 3.21, 0.705,
			2.955, 2.26, 3.38, 1.613, 1.417, 1.208, 1.792, 1.71, 3.3, 1.26, 4.71,
			1.89, 5.43, 3.15, 4.68, 6.57, 5.16, 4.95, 2.4, 0.93, 1.89, 0.99, 0.615,
			2.817, 1.208, 2.16, 2.62, 2.1, 4.115, 2.585, 0.91, 2.28, 2.04, 4.08, 2.82,
			2.73, 0.75, 2.76, 3.66, 0.69, 2.7, 1.69, 6.38, 3.96, 1.86, 3.63, 5.28,
			2.96, 1.5, 0.915, 3.015, 1.68, 0.81, 2.74, 0.54, 2.708, 3.352, 2.22, 3.48,
			1.71, 2.64, 3.068, 1.792, 2.79, 3.48, 4.65, 1.47, 3.75, 2.94, 3.69, 3.21,
			4.2, 1.81, 6.02, 1.62, 1.56, 0.63, 1.62, 4.39, 2.84, 4.44, 2.77, 2.045,
			6.285, 6.96, 1.83, 3.06, 2.55, 3.58, 0.5, 4.84, 3.78, 2.7, 2.84, 3.35,
			4.52, 3.78, 2.52, 1.98, 2.91, 1.57, 3.23, 2.257, 1.833, 1.55, 2.52, 4.177,
			2.333, 3.96, 3.51, 1.77, 1.95, 2.332, 2.708, 2.04, 2.58, 2.375, 2.725,
			3.03, 3.69, 2.7, 3.63, 2.12, 1.75, 2.76, 3.03, 2.31, 4.15, 2.01, 7.62,
			0.6, 2.52, 1.77, 4.85, 55.19
		],
		"transcript_en": [
			"[MUSIC PLAYING]",
			"",
			"DAVID MALAN: All right.",
			"This is CS50, and this is week 6.",
			"And this is, again, one of those rare days where in just a bit of time",
			"you'll be able to say that you learned a new language.",
			"And that language today is going to be this language called Python.",
			"And we'd thought we'd begin by introducing Python",
			"by way of some more familiar friends.",
			"So this, of course, is where we began the course back in week 0",
			"when we introduced Scratch, a simple program that",
			"quite simply says \"hello, world.\"",
			"And then very quickly, things escalated and became",
			"a lot more cryptic, a lot more arcane, and we introduced C and syntax",
			"like this, which of course do the exact same thing,",
			"just printing out \"hello, world\" on the screen, but with the requirement",
			"that you understand and you include all of this various syntax.",
			"So today, all of this complexity, all of the syntax from C,",
			"suddenly begins to melt away, such that we're",
			"left with this new language called Python",
			"that's going to achieve the exact same goal simply with this line of code",
			"here.",
			"Which is to say that Python tends to be more accessible,",
			"it tends to be a little easier.",
			"But that's because it's built on this tradition of having started,",
			"as humans years ago, building these low-level languages like C,",
			"realizing what features are missing, what some of the pain points are,",
			"and then layering on top of those older languages new ideas, new features,",
			"and in turn new languages.",
			"So there are dozens, hundreds really, of programming languages out there.",
			"But there's always a subset of them that tend to be very popular, very in vogue",
			"at any given time.",
			"Python is among those very popular languages.",
			"And it's the third of our languages that we'll look at, indeed,",
			"at this point in the term.",
			"So let's go ahead and introduce some of the syntax of Python,",
			"really by way of comparison with what we've seen in the past.",
			"Because no matter how new some of today's topics are,",
			"they should all be familiar in the sense that we're going to see loops again,",
			"conditions, variables, functions, return values.",
			"There's pretty much just going to be a translation of features",
			"past to now features present.",
			"So this of course, in the world of Scratch,",
			"was just one puzzle piece or a function, whose purpose in life",
			"is to say \"hello, world\" on the screen.",
			"In week 1, we translated this to the more cryptic syntax here,",
			"key details being that it's printf, that you have the quote, the string,",
			"\"hello, world,\" you have this backslash n to represent a new line character.",
			"And then of course, this kind of statement has to end with a semicolon.",
			"The equivalent line of code today on out in this language",
			"called Python is going to be quite simply this.",
			"So it looks similar, certainly, but it's now print instead of printf.",
			"We still have the double quotes, but gone are the backslash n as well as",
			"the semicolon.",
			"So if you've been kicking yourself all too frequently for forgetting",
			"stupid things like the semicolons, Python will now be your friend.",
			"Well, let's take a look at another example",
			"here, how we might go about getting user input as well.",
			"Well, here notice that we have a puzzle piece called Ask.",
			"And it says, ask \"What's your name?\" and wait.",
			"And the next puzzle piece said, whatever the human had typed in,",
			"precede it with the word \"hello.\"",
			"In C we saw code like this-- string_answer",
			"equals get_string \"what's your name?\"",
			"and then printing out with printf, \"hello %s,\"",
			"plugging in one value for the other.",
			"In Python, some of this complexity is about to melt away, too.",
			"And in Python, we're going to see a little something like this.",
			"So no longer present is the mention of the type of variable.",
			"No longer present is the semicolon at the end.",
			"And no longer present is the %s and that additional argument to print.",
			"So in fact, let's go ahead and see these things in action.",
			"I'm going to go ahead and go over to CS50 IDE here for just a moment.",
			"And within CS50 IDE, I'm going to go ahead and write",
			"my very first Python program.",
			"And to do that, I'm going to go ahead and create a file that we'll initially",
			"called hello.py.",
			"Much like in the world of C, Python programs have a standard file extension",
			"being .py instead of .c.",
			"And I'm just going to do what I proposed was the simplest translation.",
			"I'm just going to go ahead and say print, \"hello, world.\"",
			"I'm going to save my file.",
			"And then I'm going to go down to my terminal window.",
			"And in the past, of course, we would have used make,",
			"and then we would have done ./hello or the like.",
			"But today, I'm quite simply going to run a command that itself is called Python.",
			"I'm going to pass in the name of the file I just",
			"created as its command line argument.",
			"And voila, hitting Enter, there is my very first program in Python.",
			"So that's pretty powerful.",
			"Let's go ahead and create the second program that I proposed a moment ago.",
			"Instead of just printing out \"hello, world\"",
			"the whole time, I'm also going to go ahead this time",
			"and give myself a variable that I'll call answer.",
			"I'm going to go ahead now and get input from the user.",
			"And I'm going to go ahead and use the familiar get_string",
			"that we did see in C.",
			"I'm going to go ahead and ask, \"What's your name\" question mark.",
			"I'm not going to bother with a semicolon.",
			"But down here, I'm going to go ahead and say print \"hello,\" comma, and then",
			"a space inside of the quotes.",
			"And instead of doing something like %s, I'm actually going to go ahead and just",
			"do a plus operator, and then literally the word \"answer.\"",
			"But the catch is that this isn't going to work just yet.",
			"This isn't going to work just yet, because get_string, it turns out,",
			"just like it doesn't come with C, it also doesn't come with Python.",
			"So I need to do one thing that's going to be",
			"a little bit different from the past.",
			"Instead of hash including something, I'm going to literally say",
			"from cs50 import get_string.",
			"So in the world of C, recall that we included",
			"cs50.h, which had declarations for functions like get_string and get_int",
			"and so forth.",
			"In the world of Python, we're going to show you something similar in spirit,",
			"but the syntax is just a little different.",
			"We're going to say from cs50, which is our Python library that we the staff",
			"wrote, import, that is, include a function specifically",
			"called get_string.",
			"And now any errors that I might have seen a moment ago on the screen",
			"have disappeared.",
			"If I go ahead and save this file and now do python space hello.py and hit Enter,",
			"now I can go ahead and type in my actual name, and voila, I see \"hello,\" comma,",
			"\"David.\"",
			"So let's tease apart what's different about this code",
			"and consider what more we can do after this.",
			"So again, notice-- on line 3, there's no mention of string anymore.",
			"If I want a variable, I just go ahead and give myself",
			"a variable called answer.",
			"The function is still called get_string, and it still takes an argument just",
			"like the C version, but the line no longer ends with a semicolon.",
			"On my final line of code here, print is now indeed print instead of printf.",
			"And then this is new syntax.",
			"But in some sense, it's going to be a lot more straightforward.",
			"Instead of having to think in advance where I want the %s and my placeholder,",
			"this plus operator seems to be doing something for me.",
			"And let me go ahead and ask a question of the group here.",
			"What does that plus operator seem to be doing?",
			"Because it's not addition in the arithmetic sense.",
			"We're not like adding numbers together.",
			"But the plus is clearly doing something that gives us a visual result.",
			"Any thoughts from Peter?",
			"What's this plus doing?",
			"AUDIENCE: It's concatenating strings.",
			"DAVID MALAN: Yeah, it's concatenating strings,",
			"which is the term of art to describe the joining of one string and the other.",
			"So it's quite like, therefore, Scratch's own Join block.",
			"We now have a literal translation of that Join block,",
			"which we didn't have in C. In C we had to use printf, we had to use %s.",
			"Python is going to be a little more user friendly, such",
			"that if you want to join two strings like \"hello,\"",
			"comma, space, and the contents of that variable,",
			"we can just use this plus operator instead.",
			"And the last thing that we had to do was, of course,",
			"import this library so that we have access",
			"to the get_string function itself.",
			"Well, let's go ahead and take a tour of just some other features",
			"of Python and then dive in primarily to a lot of hands-on examples today.",
			"So recall that in the example we just saw,",
			"we had this first line of code, which gets a string from the user,",
			"stores it in a variable called answer.",
			"We had this second line of code, which as Peter notes,",
			"concatenated two values together.",
			"But it turns out, even though this is definitely more convenient than in C",
			"in that you can just take an existing string and another",
			"and join them together without having to use format strings or the like,",
			"well, it turns out there's another way, there's frankly many",
			"ways in languages like Python to achieve the same result.",
			"And I'm going to go ahead and propose that we now change this line here",
			"to this funky syntax.",
			"So definitely ugly at first glance, and that's",
			"partly because this is a relatively new feature of Python.",
			"But notice that in Python can we use these curly braces, so curly braces",
			"that we have used in C, to plug in an actual value of a variable here.",
			"So instead of %s, Python's print function uses these curly braces that",
			"essentially say, plug in a value here.",
			"But there's one oddity here.",
			"You can't just start putting curly braces and variable names into strings,",
			"that is quoted strings in Python.",
			"You also have to tell the language that what follows is a formatted string.",
			"So this is perhaps the weirdest thing we've seen yet.",
			"But when you do have a pair of double quotes",
			"like I have here, prefixing it with an f will actually",
			"tell the computer to format the contents of that string,",
			"plugging in values between those currently braces, as opposed to",
			"literally printing those curly braces themselves.",
			"So let me go ahead and transition to my actual code here and try this out.",
			"Instead of using the concatenation operator as Peter described it,",
			"this plus operator, let me literally go ahead",
			"and say, \"hello, answer,\" initially.",
			"So this is probably not going to be the right approach,",
			"because if I rerun this program, python of hello.py,",
			"it's going to ask me what's my name.",
			"I'm going to type in \"David,\" and it's going",
			"to ignore me altogether, because I literally hardcoded \"hello, answer.\"",
			"But it's also not going to be quite right to just start",
			"putting that in curly braces, because if I again run this program, python",
			"of hello.py, and type in my name, now it's going",
			"to say \"hello, squiggly brace answer.\"",
			"So here is just a subtle change where I have",
			"to tell Python that this type of string between the double quotes is in fact",
			"a formatted string.",
			"And now if I rerun python of hello.py and type in \"David,\"",
			"I now get \"hello, David.\"",
			"So it's marginally more convenient than C, because, again, you",
			"don't have to have a placeholder here, a placeholder here, and then",
			"a comma separated list of additional arguments.",
			"So it's just a more succinct way, if you will,",
			"to actually introduce more values into a string that you want to create.",
			"These are called format strings, or for short f-strings.",
			"And it's a new feature that we now have in our toolkit when programming",
			"with this new language called Python.",
			"Well, let's take a look at a few other translation of puzzle pieces",
			"to see, and then turn to Python and then start",
			"building some programs of our own.",
			"So here in Scratch, this was an example early on of a variable",
			"called counter, initializing it to 0.",
			"In C, in week 1, we started translating that to code like this-- int counter",
			"equals 0 semicolon.",
			"And that gave us a variable of type int whose initial value was 0.",
			"In Python, the code is going to be similar--",
			"similar, but it's going to be a little simpler still.",
			"Notice that I don't have to in Python mention the type of variable I want.",
			"It will infer from context what it is.",
			"And I also don't have to have the semicolon there.",
			"So counter equals 0 in Python is going to give you a variable called counter.",
			"And because you're assigning it the value 0, Python itself",
			"the language will infer that, oh, you must",
			"mean this to be an int or an integer.",
			"What else did we see in Scratch?",
			"Change counter by 1.",
			"So this was a way of increasing the value of a variable by 1.",
			"In C, we had a few different ways to implement this.",
			"We could say counter equals counter plus 1.",
			"It's kind of pedantic, it's kind of long and tedious to type.",
			"So instead, we had some shorthand notation that",
			"allowed us to do it this way instead.",
			"In C, we were able to do counter plus equals 1,",
			"and that was going to achieve the same result.",
			"Well, in Python we actually have a couple of approaches as well.",
			"We can, much like in C, say it explicitly like this",
			"but just omit the semicolon.",
			"So counter equals counter plus 1.",
			"The logic in Python is exactly the same as in C.",
			"And as for this shorthand notation, this also exists in Python, again",
			"without the semicolon.",
			"The one thing that does not exist in Python at this point in the story is",
			"that fancy counter++ syntax, or i++, that syntactic sugar that made it even",
			"more succinct to just increment a variable,",
			"unfortunately does not exist in Python.",
			"But you can do counter plus equals 1, or whatever your variable happens to be.",
			"Well, what else did we see in Scratch and then C?",
			"recall this.",
			"We introduced, of course, conditions pretty early on.",
			"And those conditions use Boolean expressions",
			"to decide whether to do this, or this other thing, or something else",
			"altogether.",
			"In C, we converted this to what looked kind of similar.",
			"Indeed, the curly braces kind of hug the printf line, just",
			"like the yellow condition here hugs the purple Say block.",
			"And we had parentheses around the Boolean expression, like x less than y.",
			"We again used printf inside of the curly braces",
			"which had double quotes, a backslash n for a new line, and a semicolon.",
			"Python, nicely enough, is going to be sort of identical in spirit",
			"but simpler syntactically.",
			"What Python is going to look like henceforth is just this.",
			"So the parentheses around the x less than y go away.",
			"The curly braces go away.",
			"The new line goes away.",
			"And the semicolon goes away.",
			"And here you see just a tiny example of evolution of humans programming",
			"languages.",
			"If you and I have been frustrated for some time about all",
			"the stupid semicolons and curly braces all over the place,",
			"it makes it harder, in some sense, for your code to read,",
			"let alone being correct, humans decided when inventing new languages",
			"that, you know what, why don't we just say what we mean",
			"and not worry as much about all of this syntactic complexity?",
			"Let's keep things simpler.",
			"And indeed, that's what we see here, is one example in Python.",
			"But there's a key detail.",
			"If any of you have been in the habit, when",
			"writing code in C, of being a little sloppy when it comes",
			"to your indentation, and maybe style50 is constantly",
			"yelling at you to add spaces, add spaces, or remove spaces or lines,",
			"well, in Python it is now necessary to indent your code correctly.",
			"In C, of course, we, CS50 and a lot of the world in general",
			"recommend that you indent your code by 4 spaces, typically, or one tab.",
			"In the context of Python, you must do so.",
			"If you accidentally omit these spaces just to the left of the print statement",
			"here, your Python code is not going to run at all.",
			"The Python program just won't work.",
			"So no more sloppiness.",
			"Python is going to impose this on you.",
			"But the upside is you don't have to bother including the curly braces.",
			"What about a more complicated condition where there's",
			"two paths you can follow, if or else?",
			"Well, in this case in C, we translated it pretty straightforwardly like this.",
			"Again, parentheses up here, curly braces here and here, backslash n,",
			"backslash n, and semicolon.",
			"You can perhaps guess in Python that this",
			"is going to get a little more compact, because boom,",
			"now we don't need the parentheses anymore.",
			"We do we need to indent, but we don't need the curly braces.",
			"We don't need the new line, and we don't need the semicolon.",
			"So we're sort of shedding features that can be taken now for granted.",
			"What about this example in Scratch when we had a three-way fork in the road,",
			"if, else, if, else?",
			"Well, in Python-- or rather in C, we would have translated this like this.",
			"And there's not much going on there.",
			"But it's pretty substantive number of lines of code, some 12 lines,",
			"just to achieve this simple idea.",
			"In Python, notice what's going to go away here",
			"is, again those parentheses, again those curly braces, again the backslash n,",
			"and the semicolon.",
			"There's only one oddity here.",
			"There's only one oddity.",
			"What looks wrong or weird to you?",
			"Maybe, what looks like a typo to you?",
			"And I promise I haven't screwed up here.",
			"Maybe elsewhere, but not here.",
			"Andrew?",
			"AUDIENCE: I would say the elif instead of else if is different syntactically.",
			"DAVID MALAN: Exactly.",
			"So whereas in C we would literally say else if, in Python, humans years ago,",
			"decided, heck, why say else if and waste all of that time typing that out if you",
			"can more succinctly say \"elif\" as one word, E-L-I-F. So indeed,",
			"this is correct syntax here.",
			"And you can have more of those.",
			"You can have four forks in the road, five, six, any number thereafter.",
			"But the syntax is indeed a little different.",
			"But it's a little tighter, right?",
			"There's less syntactic distraction when you glance at this code.",
			"You don't have to ignore as many semicolons and curly",
			"braces and the like.",
			"Python tends to just be a little cleaner syntactically.",
			"And indeed, that's characteristic of a lot of more",
			"recent, more modern languages like it.",
			"All right, let's take a look at a few other blocks in Scratch and in turn C.",
			"In Scratch, when we wanted to do something again and again as a loop,",
			"perhaps forever, we would literally use the Forever block.",
			"In C, we could implement this in a few different ways.",
			"And we proposed quite simply this one-- while true print out \"hello, world,\"",
			"again and again and again.",
			"And because the Boolean expression never changes,",
			"it's going to indeed execute forever.",
			"So Python is actually pretty similar, but there",
			"are a couple of subtle differences.",
			"So ingrain in your mind what this looks like here.",
			"We have true in parentheses, the curly braces, the new line, the semicolon.",
			"A lot of that's about to go away, but they're still",
			"going to be a slight difference.",
			"Notice that we're indenting, as I keep emphasizing.",
			"We no longer have the new line or the semicolon or the currently braces,",
			"but True--",
			"and it turns out, False--",
			"now must be capitalized.",
			"So whereas in C it was lowercase false, lowercase true, in Python",
			"it's going to be capitalized False, capitalized True.",
			"Why?",
			"Just because.",
			"But there is one other detail that's important to note, both with our loops",
			"here, as well as with our conditions.",
			"Just as before, if I rewind to our most recent condition,",
			"notice that even though we've gotten rid of the curly braces",
			"and we've gotten rid of the parentheses, we now",
			"have introduced these colons, which are necessary after this expression,",
			"this expression, and this one, to make clear to Python",
			"that the lines of code that follow indented underneath",
			"are indeed relevant to that if, elif, or else.",
			"And we see that same feature again here in the context of a loop.",
			"We saw other loops, of course.",
			"In Scratch, when we wanted to do something",
			"a finite number of times like 3, we would repeat the following three times.",
			"In C, we had a few different approaches to this.",
			"And all of them, I dare say, were very mechanical.",
			"Like, if you want to do something three times, the onus in C",
			"is on you to declare a variable, keep track of how many times",
			"you've counted already, increment the thing.",
			"Like, there's a lot of moving parts.",
			"And so in C, one approach looked like this.",
			"We declare a variable called i equals 0--",
			"but we could call it anything we wan--",
			"we have a while block here that's asking a Boolean expression again",
			"and again, is i less than 0--",
			"is i less than 3?",
			"And then inside of the loop, we printed out \"hello, world.\"",
			"And using C's syntactic sugar, the plus plus notation,",
			"we kept adding 1 to i, add 1 to i, add 1 to i,",
			"until we implicitly break out of the loop",
			"because it's, of course, no longer less than 3.",
			"So in Python, similar in spirit, but again, some of that clutter goes away.",
			"i equals 0 is all we need say to give ourselves a variable.",
			"While i less than 3 is all we need to say there but with a colon.",
			"Then inside of that, indented properly, we print out \"hello, world.\"",
			"And-- we can't do the plus plus, so minor disappointment--",
			"but i plus equals 1 increments i.",
			"So this would be one way of implementing in Python the exact same thing a loop",
			"that executes three times.",
			"But we saw other approaches, of course, in C,",
			"and there's other approaches possible in Python as well.",
			"You might recall in C that we saw this approach, the for loop.",
			"And odds are you've been reaching for the for loop",
			"pretty frequently, because even though it looks a little more cryptic,",
			"you can pack more features into that one line of code",
			"in between those semicolons, if you will.",
			"So same exact logic, it just prints out this \"hello, world\"",
			"three times using a for loop instead.",
			"In Python, things start to get a little elegant here now.",
			"It's a little weird at first glance, but it's definitely more succinct.",
			"If you want to do something three times, it turns out in Python",
			"you can use a more succinct syntax for the for loop-- for i",
			"in, and then in square brackets a list of values.",
			"So just as we used in the past square brackets in a few different places",
			"to connote arrays and indexing into arrays, in the world of Python whenever",
			"you surround a bunch of values that themselves have commas in between them,",
			"and you encapsulate them all using square brackets,",
			"that's what we're going to call in Python a list.",
			"And it's very similar in spirit to an array,",
			"but we'll call it in the context of Python a list.",
			"And so what this line of code says is, for i in 0, 1, 2-- what does that mean?",
			"This is a for loop in Python that says, give me a variable called i.",
			"And on the first iteration of this loop set i equal to 0.",
			"On the second iteration of this loop set i equal to 1.",
			"And on the last iteration of this loop, set i equal to 2 for me.",
			"It just does all of that for you.",
			"Now, at the end of the day it actually doesn't",
			"matter what i is per se, because I'm not printing the value of i.",
			"And that's totally fine.",
			"Odds are you've used for loops where you did something again and again,",
			"like printing \"hello, world,\" even though you didn't print out",
			"the value of i.",
			"So technically, I could have put any 3 things in the square brackets",
			"if I want.",
			"But the convention would be just enumerate, just like in C, 0, 1, 2,",
			"just like a computer scientist counting from 0.",
			"But this could break down pretty easily.",
			"This could become very ugly very quickly.",
			"Does anyone see a problem with for loops in Python",
			"if you have to put in between those square brackets the list of values",
			"that you want to iterate over?",
			"Noah?",
			"AUDIENCE: If you want to do, for example, a thing 50 times,",
			"you'd have to write out 0, 1, 2, 3, 4, 5, 6.",
			"DAVID MALAN: Yeah.",
			"My God, it would start to look hideous quickly.",
			"And it's funny you mention 50, because in preparing",
			"this demonstration for lecture today, I went back to week 0,",
			"when actually the analog in week 0 was to indeed print out \"hello, world\"",
			"50 times.",
			"And I thought to myself, damn it, this is",
			"going to look atrocious now, because I literally",
			"have to put inside of square brackets 0, 1, 2, 3, 4, 5, 6, 7, 8,",
			"9, all the way to 49, as Noah says, which would just look atrocious.",
			"Like, surely there's got to be a better way.",
			"And there is.",
			"While this might be compelling for very short values,",
			"there's a simpler way in Python when you want",
			"to do something some number of times.",
			"We can replace this list of three values with this,",
			"a function called range that takes an input, which is the number of things",
			"that you want to return.",
			"And essentially, what range will do for you passed an input like 3,",
			"it will automatically generate for you a list of three values, 0, 1, and 2.",
			"And then Python will iterate over those three values for you.",
			"So to Noah's concern a moment ago, if I now want to iterate 50 times,",
			"I just change the 3 to a 50, I don't have",
			"to create this crazy mess of a manually typed out list of 0 through 49,",
			"which, of course, would not be a very well designed a program, it would seem,",
			"just because of the length of it and the opportunity to mess up and the like.",
			"So in Python, this is perhaps now, if you will, the most Pythonic way",
			"to do something some number of times.",
			"And indeed, this is a term of art in the Python community.",
			"Long story short, technical people, programmers,",
			"they tend to be pretty religious in some sense",
			"when it comes to the \"right way\" of doing things.",
			"And indeed, within the world of Python programming,",
			"a lot of Python programmers do have both opinions",
			"but also standardized recommendations that dictate how you \"should\"",
			"write Python code.",
			"And tricks like this are what are considered Pythonic.",
			"You are doing something Pythonically if you're doing it the quote, unquote",
			"\"right way,\" which doesn't mean right in the absolute,",
			"it means right in the sense that most other people, rather,",
			"agree with you in this sense.",
			"All right.",
			"Let's see a few final features of Python before we now start",
			"to build some of our own features.",
			"In C, recall, we had this whole list of data types.",
			"And there are more, and you can create your own, of course.",
			"But the primitives that we looked at initially",
			"were these-- bool, char, double, float, int, long, string, and so forth.",
			"In Python, even though I haven't needed them,",
			"because I can give myself a variable like a string or an int,",
			"just by giving it a name like counter or i or answer,",
			"and then assigning it a value, and Python",
			"infers from what you're assigning it what data type it should be,",
			"Python does have data types.",
			"It's just what's known in the programming",
			"world as a loosely typed language.",
			"In the world of C, C is a strongly typed language,",
			"where, not only do types exist, you must use them explicitly.",
			"In the world of Python, you have what's called",
			"a loosely typed language, in which types exist,",
			"but you can often infer them implicitly.",
			"The burden is not on you the programmer to specify",
			"those data types incessantly.",
			"Let the computer figure it out for you.",
			"So this is our list from C.",
			"This now is going to be our analogous list in the world of Python.",
			"We're going to have bool still, True and False,",
			"but capital T, capital F. We're going to have floats,",
			"which are real numbers with decimal points.",
			"We're going to have ints, which of course are numbers like negative 1,",
			"0, and 1, and so forth.",
			"And then not strings per se, but \"stirs\", S-T-R.",
			"And where is in the world of C, there was technically no \"string type\"--",
			"that was a feature offered by the cs50 library, which just made more",
			"accessible the idea of a char star--",
			"recall that C has strings.",
			"And they're called strings, but there's no data type called string.",
			"The way you give yourself a string, of course, in C",
			"is to declare something as a char star.",
			"And in cs50's library, we just gave that char star",
			"a synonym, a nickname, an alias, called \"string.\"",
			"In Python, there are actual--",
			"there is an actual data type for strings.",
			"And for short, it's called S-T-R.",
			"All right.",
			"So with that said, what other features do we",
			"have from Python that we can use here?",
			"Well, there's other data types as well in",
			"Python that are actually going to prove super useful as we begin",
			"to develop more sophisticated programs and do",
			"even cooler things with the language.",
			"We've seen range already.",
			"Strictly speaking, this is a data type of sorts within Python",
			"that gives you back a range of values, by default 0 on up,",
			"based on the input you provide.",
			"List, I keep mentioning verbally.",
			"A list is a proper data type in Python that's similar in spirit to arrays.",
			"But whereas in arrays--",
			"recall, we've spent great emphasis over the past few weeks",
			"noting that arrays are a fixed size.",
			"You have to decide in advance how big that array is going to be.",
			"And like last week, if you decide, oops, I need more memory,",
			"you have to dynamically allocate more space for it,",
			"copy values over, and then free up the old memory.",
			"Like, there's so much jumping through hoops, so to speak,",
			"when you want to use arrays in C if you want to grow them or even shrink them.",
			"Python and other higher-level languages like it do all of that for you.",
			"So a list is like an array that automatically resizes itself,",
			"bigger and smaller.",
			"That feature now you get for free in the language, so to speak.",
			"You don't have to implement it yourself.",
			"Python has what are called tuples.",
			"In the context of like math, or GPS, you might",
			"have x- and y-coordinates, or latitude and longitude coordinates,",
			"so like comma separated values.",
			"Tuples are one way of implementing those in Python.",
			"Dict, or dictionaries.",
			"So Python has dictionaries that allow you to store keys and values.",
			"Or literally in our human world, if you have a human dictionary here,",
			"for instance for English, much like a dictionary in physical form,",
			"lets you store words and their definitions, a dictionary in Python,",
			"more generally, lets you store any keys and any values.",
			"You can associate one thing with another.",
			"And we'll see that this is a wonderfully useful and versatile data structure.",
			"And then lastly for today's purposes, there's",
			"these things called sets which, if you recall from math,",
			"a set is a collection of values, like a, b, c or 1, 2, 3, without duplicates.",
			"But Python manages that for you.",
			"You can add items to a set, you can remove items from a set.",
			"Python will make sure that there are no duplicates for you,",
			"and it will manage all of the memory for you as well.",
			"So what we have in the way of functions, meanwhile, is a few familiar friends.",
			"Recall that in C we used the cs50 library to get chars,",
			"doubles, floats, ints, longs, and strings.",
			"In Python, thankfully, we don't have to worry about doubles or longs anymore.",
			"More on that in a bit.",
			"But the cs50 library for Python, which you saw me import a few minutes ago,",
			"does give you a function called get_float.",
			"It does give you a function called get_int,",
			"it does give you a function called get_string,",
			"that, at least for this week's purposes, are just",
			"going to make your life easier.",
			"These two are training wheels that we will very quickly take off",
			"so that you're only using native Python code ultimately,",
			"and not CS50'S own library.",
			"But for the sake of transitioning this week from C to Python,",
			"you'll find that these will just make your life easier before we relax",
			"and take those away, too.",
			"So in C, to use the library you had to include cs50.h.",
			"In Python, again you're going to go ahead and import",
			"cs50, or more explicitly, the specific function that you might want to import.",
			"So it turns out there's different ways to import things.",
			"They ultimately achieve essentially the same goal.",
			"You can, with lines like this, explicitly",
			"import one function at a time, like I did earlier using get_string,",
			"or you can import the whole library all at once",
			"by just saying more succinctly, import cs50.",
			"It's going to affect the syntax we have to use hereafter,",
			"but you'll see multiple ways of doing this in our examples here on out.",
			"You can also simplify this a bit, and you",
			"can import a comma separated list of functions from a library like ours.",
			"And this is a convention we'll see quite frequently as well.",
			"Because if we start using popular third-party libraries written",
			"by other programmers on the internet, they will very commonly",
			"give us lots of functions that we ourselves can use,",
			"and we will be able to import those one after the other,",
			"by just specifying them here in this way.",
			"All right.",
			"Let me pause here just to see if there's any questions on Python syntax.",
			"Like, that's essentially it for our crash course in Python syntax.",
			"We're now going to start building things and explore what the features of Python",
			"are and what some of the nuances are, and really the power of Python.",
			"But first, any questions on syntax?",
			"We've seen loops, conditions, variables.",
			"Olivia, question or comment.",
			"AUDIENCE: In a for loop, if you want to increment by something besides 1,",
			"but you don't want to explicitly type out the list, how would you do that?",
			"DAVID MALAN: Really good question.",
			"So if you wanted to use a for loop and iterate over a range of values,",
			"but you wanted that range to be 0, 2, 4, 6, 8, instead of 0, 1, 2, 3,",
			"let me go ahead and go back to that slide from a moment ago.",
			"And I can actually change this on the fly.",
			"Let me go into that slide, which was right here.",
			"And what I can do, actually, is specify another value, which might be this.",
			"If I change the input to range to be not one value but two values,",
			"that's going to be a clue to the computer",
			"that it should count a total of three values,",
			"but it should increment 2 at a time instead of the default, which is 1.",
			"And there's even other capabilities there, too.",
			"You don't have to start counting at 0.",
			"You can adjust that as well, which is to say that with Python, you're",
			"going to find a lot more features come with the language,",
			"and even more powerfully, the functions that you can write",
			"and the functions that you can use in Python",
			"also can take different numbers of arguments.",
			"Sometimes it's 0, sometimes it's 1, sometimes it's 2.",
			"But it's ultimately often up to you.",
			"Good catch.",
			"Other questions?",
			"AUDIENCE: Will we see sequences primarily in the for loops?",
			"Or are there other applications where they're very useful?",
			"DAVID MALAN: Sequences in what sense?",
			"In the sense of ranges or lists or something else?",
			"AUDIENCE: Yeah, in terms of ranges, specifically.",
			"DAVID MALAN: Good question.",
			"Will we use them in other contexts?",
			"Generally speaking, it's pretty rare.",
			"I mean, I'm racking my brain now as to other use cases",
			"that I have used range for.",
			"And I'm sure I could come up with something.",
			"But I think hands down, the most common case is in the context of iteration,",
			"as in a for loop.",
			"And I'll think on that to see other applications.",
			"But any time you want to generate a long list of values",
			"that follow some pattern, whether it's 0, 1, 2, or as Olivia points out,",
			"a range of values with gaps, range will allow",
			"you to avoid having to hardcode it entirely.",
			"And you can actually write your own generator function, so to speak,",
			"a function that returns whatever pattern of values that you want.",
			"Other questions or confusion?",
			"",
			"Anything on your end, Brian, from the chat or beyond?",
			"BRIAN: Looks like all the questions are answered here.",
			"DAVID MALAN: All right.",
			"Well, let's go ahead now and do something more interesting",
			"than hello, world.",
			"Because after all, this is where programming really gets fun,",
			"really gets powerful, when you and I no longer",
			"have to implement those low-level implementation details, when",
			"you had to implement memory management for your hash table,",
			"or memory management for a linked list, or copying values in an array.",
			"We've spent the past several weeks focusing really",
			"on some low-level primitives that are useful to understand,",
			"but they're not fun to write.",
			"And I concede that they might not be fun to write in problem set form.",
			"And they're certainly not going to be fun to write for the rest of your life,",
			"every time you want to just write code to solve some problem.",
			"But again, that's where libraries come in.",
			"And now, this is where other languages come in.",
			"It turns out that Python is a much better, a much easier",
			"language to use for solving certain types of problems,",
			"among them some of the problems we have been solving in past problems sets.",
			"So in fact, let me go ahead and do this.",
			"I'm going to go ahead and grab a file here--",
			"give me one moment--",
			"called bridge.bmp, which you might recall from a past problem set.",
			"This is the beautiful Weeks bridge down by the Charles River in Cambridge, Mass",
			"by Harvard.",
			"And this is a very clear photograph taken by one of CS50's team members.",
			"And in recent weeks, of course, you wrote code",
			"to do all sorts of mutations of this image, among them blurring the image.",
			"And blur, I dare say, was not the easiest problem to solve.",
			"You had to look up, down, left, and right, sort of average",
			"all of those pixels.",
			"You had to understand how an image is represented one pixel at a time.",
			"So there's a lot of low-level minutia there, when at the end of the day,",
			"all you want to do is just blur an image.",
			"So whereas in past weeks we sort of had to think at and write at this lower",
			"level, now with Python it turns out we're",
			"going to have the ability to think at a higher level of abstraction",
			"and write far less code for ourselves.",
			"So let me go ahead and do this.",
			"I'm going to use my Mac for this instead of CS50 IDE,",
			"so I can open the images more quickly.",
			"This is to say that, even though we'll continue",
			"using CS50 IDE for Python and for other languages",
			"over the remainder of the course, you can also install the requisite software",
			"on a Mac, on a PC, sometimes even kind of sort of a phone",
			"today, to use Python and sort of see, in other languages, on your own devices.",
			"But again, we tend to CS50 IDE during the class",
			"so as to have a standard environment that just works.",
			"So I'm going to go ahead and write, though,",
			"on my computer a program called blur.py, py, of course,",
			"being the file extension for Python programs.",
			"So my program looks a little different now.",
			"I've got this black and blue and white window.",
			"But this is just a text editor on my own personal Mac here.",
			"I'm going to go ahead and do this.",
			"I need to have some functionality related to images",
			"in order to blur an image.",
			"So I'm going to go ahead and import from a PIL library,",
			"a Pillow library, so to speak, a special feature",
			"called Image and a special feature called ImageFilter.",
			"That is to say, these are essentially two functions",
			"that someone else smarter than me when it comes to image manipulation wrote,",
			"they made their code freely available on the internet free and open source,",
			"which means anyone can use the code, and I am allowed now",
			"to import it into my program, because I before class downloaded and installed",
			"it beforehand.",
			"Now I'm going to go ahead and do this.",
			"I'm going to give myself a variable called before.",
			"And I'm going to call Image.open on bridge.bmp.",
			"So again, even though we've never seen this before, never used this before,",
			"you can kind of glean syntactically what's going on.",
			"I've got a variable on the left called before.",
			"I've got a function on the right called Image.open,",
			"and I'm passing in the name bridge.bmp.",
			"So it sounds like this is kind of like fopen in the world of C.",
			"Now notice, this dot is kind of serving a new role here.",
			"In the past, we've used the operator only for structs in C,",
			"when we want to go into a person object, or into a node object,",
			"and we want to go inside of it and access some variable therein.",
			"Well, it turns out in Python, you have things similar in spirit to structs",
			"in C. But instead of containing only variables or data, like name and number",
			"like we did for the person struct a few weeks back,",
			"in Python you can have inside of a structure",
			"not only data, that is variables, you can also",
			"have functions inside of structures.",
			"And that starts to open up all sorts of possibilities",
			"in terms of features available to you.",
			"So it seems that I've got this Image object, this Image struct that I've,",
			"again, imported from someone else.",
			"Inside of it is an open function that expects",
			"as input the name of a file to open.",
			"So we'll see this syntax increasingly over the course of today's examples.",
			"Let me give myself a second variable, after.",
			"Let me go ahead now and assign to this variable called",
			"after the results of calling that before image's filter function,",
			"passing in ImageFilter.BoxBlur of 1.",
			"Now, this is a little cryptic, and we're not",
			"going to spend time on this particular syntax, because odds are,",
			"in life you're not going to have that many opportunities to want",
			"to blur an image for which you're going to run and write code.",
			"But for today's purposes, notice that inside of my before variable,",
			"because I assigned it the return value of this new feature,",
			"it has inside of it not just data but also functions, one of them",
			"now called filter.",
			"And this filter function takes as input the return value of some other function",
			"called that, long story short, will blur my image using",
			"a box of a 1-pixel radius.",
			"So just like your own code, if you implemented blur in C,",
			"this code is going to tell my code to look up, down, left, and right",
			"and blur the pixels by taking the average around them.",
			"And that's kind of it.",
			"After that I'm going to do after.save.",
			"And I'm going to save this as out.bmp.",
			"I just want to create a new file called out.bmp.",
			"And if I've made no mistakes, let me go ahead now",
			"and run python of blur.py and hit Enter.",
			"No error messages, so that's usually a good thing.",
			"If I type ls now, notice that I've got bridge.bmp,",
			"which I already opened, blur.py, which I just wrote, and out.bmp.",
			"And if I go ahead and open out.bmp, let's go ahead and take a look.",
			"Here's before, here's after.",
			"Huh.",
			"Before, after.",
			"Now, over the internet it probably doesn't",
			"look that blurred, though on my Mac right here a few inches away,",
			"it definitely looks blurred.",
			"But let's do it a little more compellingly.",
			"How about, instead of looking one pixel up, down, left, and right,",
			"why don't we look 10 pixels at a time?",
			"So we really blur it by looking at more values and averaging more.",
			"Let me go ahead now and run python of blur.py.",
			"Now let me go ahead and reopen.",
			"And now you see before and after.",
			"Before and after.",
			"So what is this to say?",
			"Well, here is, what, problem set 4 in four lines of code blurring an image.",
			"So pretty cool, pretty powerful.",
			"By standing on the shoulders of others and using their libraries can",
			"we do other things quite quickly.",
			"Notice what I can also do here, too, is solve a more recent problem.",
			"Let me go over to a different directory, where I have in advance--",
			"and you can download these files off of the course's website--",
			"a few files that we wrote before class.",
			"One is called speller.py.",
			"So long story short, speller.py is a translation from C",
			"into Python the code for speller.c.",
			"Recall that that was part of the distribution code for problem set 5,",
			"and in speller.c, we translated it now to speller.py.",
			"And in dictionaries and in texts, we see the same files,",
			"as in problem set 5, two different sized dictionaries and a whole bunch",
			"of short and long texts.",
			"What hasn't been created yet is the equivalent of a dictionary.c, a.k.a.",
			"now, dictionary.py.",
			"So let me go ahead and implement my spell checker in Python.",
			"Let me go ahead and create a file called dictionary.py, as is again,",
			"the convention.",
			"And let's go ahead.",
			"We have to implement four functions, right?",
			"We have to implement check, load, size, and unload.",
			"But I probably need like a global variable here to store my dictionary.",
			"And this is where you all implemented your hash table with a pointer,",
			"and then linked lists, and arrays, and all of that, a lot of complexity.",
			"You know what, I'm just going to go ahead and give myself a variable called",
			"words and declare it as a set.",
			"So recall that a set is just a collection of values",
			"that handles duplicates for you.",
			"And frankly, that's all I really need.",
			"I need to be able to store all of the words in a dictionary",
			"and just throw them into a set, so that there's no duplicate values",
			"and I can just check, is one word in the set or is it not.",
			"Well, let's go ahead now and load words into that set.",
			"I'm going to go ahead and define a function called load",
			"that takes the name of a file to open.",
			"And here is some admittedly some new syntax.",
			"So thus far, we've only typed code into the file itself.",
			"In fact, the most striking difference thus far,",
			"dare say, about Python versus C, is that I have never",
			"once even written a main function.",
			"And that, too, is a feature of Python.",
			"If you want to write a program, you don't",
			"have to bother writing your default code in a function called main.",
			"Just start writing your code.",
			"And that's how we were able to get hello, world",
			"down from this many lines of code in C to one line in Python.",
			"We didn't even need to have main.",
			"But if I want to define my own functions, it turns out in Python,",
			"you use the key word def for define, then you put the name of the function ,",
			"and then in parentheses, like in C, you put the names of the variables",
			"or parameters that you want the function to take.",
			"You don't have to specify data types, though.",
			"And again, we don't use curly braces, we're instead using a colon.",
			"So this says, hey, Python, give me a function called load that",
			"takes an argument called dictionary.",
			"And what should this function do?",
			"Well, the purpose of the load function in speller",
			"was to load each word from the dictionary",
			"and somehow put it into your hash table.",
			"I'm going to go ahead and do the same-- read each word from the dictionary",
			"and put it into this so-called set, my variable called words.",
			"So I'm going to go ahead and open the file, which I can do with this function",
			"here.",
			"In Python, you don't use fopen.",
			"You just use a function called open.",
			"And I'm going to sign the return value of open to a variable called file.",
			"But I could call that anything I want.",
			"This is where Python gets really cool.",
			"Recall that reading the lines from Python--",
			"from the file in C was kind of arduous, right?",
			"You had to use fread or some other function",
			"in order to read character after character",
			"after character, one line at a time.",
			"Well, here in Python, you know what, if I",
			"want to iterate over all the lines in the file,",
			"we'll just say for line in file.",
			"This is going to automatically give me a for loop that",
			"assigns the variable line to each successive line in the file for me.",
			"It will figure out where all of those lines are.",
			"What do I want to do with each line?",
			"Well, I want to go ahead and add to my set of words that line.",
			"Insofar as each word--",
			"each line represents a word, I just want to add to my global variable words",
			"that line.",
			"And that's not quite right, because what's",
			"at the end of every line in my file?",
			"Every line in my file by definition has a backslash n, right?",
			"That is why all of the words in the big dictionary",
			"we gave you are one per line.",
			"So how do you get rid of the new line at the end of a string?",
			"Well, in C, my God, we would have to use malloc to make a copy,",
			"and then move all of the characters over, and then shorten it a little bit",
			"by getting rid of the backslash n.",
			"Uh-uh.",
			"In Python, if you want to strip off the new line at the end of a string,",
			"just do rstrip.",
			"To strip characters means by default to strip off white space.",
			"White space includes the space bar, the tab character, and backslash n.",
			"And so if you want to take each line and throw away",
			"the trailing new line at the end of it, you can simply say line.rstrip.",
			"And this is where strings again in Python are powerful.",
			"Because they are their own data type, they have inside of them,",
			"not only all of the characters composing the string, but also functions,",
			"like rstrip which strips from the end of the line",
			"any white space that might be there.",
			"You know what, after this I think I'm done.",
			"I'm just going to go ahead and close the file,",
			"and I'm going to go ahead and return True.",
			"So that's it.",
			"That's the load function in Python.",
			"Open the dictionary, for each line in the file",
			"add it to your global variable, close the file, return True.",
			"I mean, I'm pretty sure that my code is probably several lines, and certainly",
			"many hours, shorter than your code might have",
			"been for implementing that as well.",
			"Well, what about checking?",
			"Maybe the complexity is just elsewhere.",
			"Well, let me go ahead and define a function",
			"called check that takes a specific word as input as its argument.",
			"And then I'm just going to check if that given word is in my set of words.",
			"Well, it turns out in C you would probably",
			"have to use a for loop or a while loop, and you'd",
			"have to iterate over the whole list of words",
			"that you've loaded using binary search or linear search or the like.",
			"Ugh, I'm so past that at this point so many weeks in.",
			"I'm just going to say, if word in words, go ahead and return True, else return",
			"False.",
			"And that now is my implementation of check.",
			"Now, it's a little buggy.",
			"And I will fix this.",
			"Does anyone spot the bug?",
			"Even if you've never seen Python before, but having spent hours implementing",
			"your own version of check, is there some step I'm missing logically?",
			"There is a bug here.",
			"Does anyone spot what I'm not doing that you probably",
			"did do when checking if a given word is in fact in the dictionary?",
			"BRIAN: A couple of people are commenting on case sensitivity.",
			"DAVID MALAN: Yeah, case sensitivity.",
			"So odds are, in your implementation in C you probably",
			"forced the word to all uppercase, or you forced it to all lowercase.",
			"Totally doable, but you probably had to do it like character for character.",
			"You might have had to copy the input using malloc, or putting it",
			"into an array character for character, then",
			"using a toupper or tolower to capitalize or lowercase each individual letter.",
			"Ugh, like, that would take forever, as indeed it might have.",
			"So you know what, if you want to take a given word and lowercase it,",
			"just say word.lower.",
			"And Python will take care of all of those steps of iterating",
			"over every character, changing each one to lowercase, and returning to you",
			"the new result. And indeed, this now, I would think,",
			"is consistent with what you did in your example as well.",
			"Well, how about size?",
			"Well, in size recall that you had to define",
			"a function that doesn't take any inputs but returns the number of words",
			"in the set of words.",
			"And I'm going to go ahead here-- and actually, I",
			"got my invitation slightly off here.",
			"Let me fix this real fast.",
			"If you want to return the size of your dictionary,",
			"or really the number of words in your set,",
			"you can just return the length of that global variable words.",
			"Done.",
			"And lastly, if you want to unload the dictionary,",
			"let me go ahead and unload things.",
			"Doesn't take input as well.",
			"Honestly, because I've not done any equivalent of malloc,",
			"I've not done any memory management-- why?",
			"You don't have to in Python--",
			"I can literally just return True in all cases, because my code is undoubtedly",
			"correct, because I didn't have to bother with pointers and addresses and memory",
			"management.",
			"So all of the stress that might have been induced over the past few weeks",
			"as you understood the lower level details of memory management now",
			"go away, not because it's not happening underneath the hood,",
			"but because Python is doing it for you.",
			"And I did spot one bug here actually.",
			"Notice I kind of relapsed into C code here.",
			"What I should have said here is it's actually file.close.",
			"So here when I close the file in load, I actually have to call file.close,",
			"because now that function close is associated with that variable for me.",
			"So again, there is memory management happening.",
			"Malloc and free or realloc are all happening sort of for you",
			"underneath the hood.",
			"But what Python the language is doing for",
			"you now is managing all of that for you.",
			"That's what you get by using a so-called higher-level language instead",
			"of a lower-level language.",
			"You get more features, and in turn in this case,",
			"you get all of those problems taken care of for you,",
			"so that you and I can focus on building our spell checker,",
			"so you and I can focus on building our Instagram filters,",
			"not on allocating memory, copying strings, uppercase and things, which",
			"honestly, while it might have been fun and very gratifying the first time",
			"you got those things working, programming would very quickly become",
			"the most tedious thing in the world if any time you",
			"want to write a program you have to think and write code at that low level.",
			"All right.",
			"Let me go ahead and really cross my fingers that I didn't screw up here,",
			"and go ahead and run this code.",
			"So I'm going to go ahead and run python of speller.py--",
			"which, admittedly, I wrote in advance, because just like the distribution",
			"code in speller, we wrote speller.c for you, we wrote speller.py in advance.",
			"But we won't look at the internals of that.",
			"I'm going to go ahead and test this on, how",
			"about something big like Shakespeare.",
			"And I'm going to cross my fingers here.",
			"And so far so good.",
			"The words are kind of flying by.",
			"I'm going to assume they're correct.",
			"Hopefully we'll get to the output.",
			"And it looks like, yeah, I think I see some familiar numbers here.",
			"I've got 143,091 words.",
			"And then down here, the total time involved was just under 1 second.",
			"So that's pretty darn fast.",
			"And to be clear, I'm using my Mac instead of the IDE,",
			"so my numbers might be a little different than in the cloud, but 0.9",
			"seconds.",
			"But you know what, out of curiosity, let me open up a different tab real quick,",
			"and let me go ahead and make speller from problem set 5.",
			"So I brought in advance our own implementation of speller, the staff",
			"solution, written in C in dictionary.c and speller.c,",
			"and I've just compiled it with make.",
			"And let me go ahead and run ./speller using the same text on Shakespeare.",
			"So again, I just ran the Python version, now",
			"I want to run the C version using the staff's implementation.",
			"All right.",
			"Wow.",
			"All right, it flew by way faster, kind of twice as fast.",
			"And notice, even though the numbers are the same up above, the times are not.",
			"My C version took 0.52 seconds, so half a second.",
			"My Python version took 0.9, or roughly 1 second.",
			"So it would seem that my C version is faster, my Python version is slower.",
			"Why might that be?",
			"Why might that be?",
			"Because I'm kind of disappointed if we just spent all this time",
			"preaching the virtues of Python, and yet here we",
			"are writing worse code, in some sense.",
			"Santiago?",
			"AUDIENCE: Could it be because C, even though it's low level,",
			"it explicitly tells the computer what to do,",
			"and so that makes it a little faster, whilst in Python it all",
			"happens like underneath the hood, as you were saying,",
			"so that could make it a little slower.",
			"DAVID MALAN: Yeah.",
			"In Python, you have a general-purpose solution",
			"to the problem of memory management, and capitalization,",
			"and all of these other features, that we ourselves",
			"have to implement ourselves in C. Python has general-purpose implementations",
			"of all of those.",
			"But there's a price you pay by using someone else's code to implement",
			"all of those things for you.",
			"And you pay an even greater price by using the type of language",
			"that Python is in a sense.",
			"So there's been this other salient difference",
			"between using C and using Python.",
			"When I wrote C code, I would compile my code from source code",
			"into machine code.",
			"And recall that machine code are 0's and 1's understood",
			"by the computer's brain, the so-called CPU, or Central Processing Unit.",
			"We always had to compile our code every time we changed the source code.",
			"And then we did like ./hello to run the program.",
			"But every demo thus far in Python, I haven't used make or clang.",
			"I have used not ./hello, but rather python space the name of the program.",
			"And why is that?",
			"Well, it turns out that Python is often implemented as what",
			"we describe with an interpreter.",
			"So Python is not only a language like we've been writing,",
			"it's also a program unto itself.",
			"The Python program I keep running is an identically named program",
			"that understands the Python language.",
			"And what's happening, though, is that by using an interpreter, so to speak,",
			"to run my programs you're incurring some amount of overhead.",
			"You're paying a performance price.",
			"Why?",
			"Well, computers, recall from week 0, at the end of the day,",
			"only understand 0's and 1's.",
			"That's what makes them tick.",
			"But I have not outputted any 0's and 1's.",
			"I the human have only been writing Python.",
			"So there needs to be some kind of translation between my Python code,",
			"in this English-like syntax, into what the computer itself understands.",
			"And if you're not going to go through the effort of compiling",
			"your code every time you make a change, but instead",
			"you're just going to run your code through an interpreter,",
			"as is the norm in the Python world, you're",
			"going to pay a price, because someone had to implement a translator for you.",
			"And in fact, there's formal terminology for this.",
			"In the world of Python we have, for instance,",
			"a picture that looks more like this.",
			"Whereas in the world of C, we would actually take our source code as input",
			"and output, first machine code is output,",
			"and then run the machine code, in the world of Python thus far,",
			"I'm writing source code, and then I'm immediately running it.",
			"I'm not compiling it into 0's and 1's in advance.",
			"I'm trusting that there's a program, coincidentally called Python,",
			"whose purpose in life is to translate that code for me",
			"into something the computer does understand.",
			"And what does that actually mean in real terms?",
			"Well, it means that if I were to think back",
			"to an algorithm like this, which probably cryptic to many of you,",
			"though not all, might be a Spanish algorithm",
			"for searching a phone book for someone.",
			"And suppose that I don't speak Spanish at all.",
			"I might, ideally, compile this program, this algorithm, into something",
			"I do understand by using a compiler that translates Spanish to English.",
			"Like voila, this English version, much better reading and understanding this,",
			"I can execute this algorithm pretty fast,",
			"because I'm pretty good at English.",
			"But if you only give me the Spanish version, the source code,",
			"and you require that I translate it or interpret it line by line,",
			"honestly that's really going to slow me down,",
			"because it's like me having to go take like a Spanish dictionary",
			"and look up every word--",
			"\"Recoge guia telefonica.\"",
			"All right, well, what's \"recoge\"?",
			"I have to look that up.",
			"What's \"guia\", what's \"telefonica\"?",
			"Oh, OK.",
			"Pick up phone book.",
			"Got that.",
			"Step one.",
			"What's step two?",
			"\"Abre a la mitad de guia telefonica.\"",
			"So \"open to the middle\"-- well, wait, I don't know that.",
			"Spoiler.",
			"What does that mean, \"abre\"?",
			"All right, let me look that up.",
			"And it means \"open.\"",
			"\"A la mitad,\" that means \"to the middle.\"",
			"\"De guia telefonica,\" \"of the phone book.\"",
			"Oh, that means \"open to the middle of the phone book.\"",
			"So I'm struggling to go back and forth here, clearly.",
			"But it's clearly a slower process.",
			"And if I keep going, \"Ve la pagina,\" \"Look at the page,\"",
			"looking up, translating every line, it's undoubtedly",
			"going to slow down the process.",
			"And so that's effectively what's happening for us",
			"when we run these Python programs.",
			"There is a translator, a man in the middle, so to speak,",
			"that's looking at your source code and reading it top to bottom,",
			"left to right, and essentially translating each line respectively",
			"into the corresponding code that the computer understands.",
			"So the upside of this is that, thankfully, we",
			"don't have to run make or clang.",
			"We don't have to compile our code anymore.",
			"Like, how many people here have made a change",
			"to an earlier pset in C, forgotten to save the file but you rerun the--",
			"sorry, you forgot to recompile the file, and you rerun it,",
			"and the program obviously has not changed",
			"because you haven't actually, not only saved but recompiled it?",
			"So that stupid, annoying human step is gone.",
			"In the world of Python, if you change your file, go ahead and just rerun it,",
			"reinterpret it.",
			"You can save that step.",
			"But the price you're going to pay is a little bit of overhead.",
			"And indeed, we see that here in terms of my Python version",
			"taking roughly 1 second to spellcheck Shakespeare,",
			"and my C version taking only one half of a second.",
			"So here, too, I promised in past weeks this theme of trade-offs.",
			"This is so prevalent in the world of computer science and programming,",
			"and frankly in the real world.",
			"Any time you make some improvement or gain some benefit,",
			"odds are you are paying some price.",
			"Maybe it's time, maybe it's space, maybe it's money, maybe it's complexity,",
			"maybe it's anything else.",
			"There's this perpetual trade-off of resources.",
			"And being a good programmer, ultimately, is",
			"about finding those inflection points and knowing ultimately",
			"what tools to use for the trade.",
			"All right, let's go ahead here, take a 5-minute break.",
			"And when we come back, we'll look at other features of Python,",
			"we'll end ultimately today with some really powerful capabilities.",
			"Back in five.",
			"All right.",
			"We are back.",
			"And first, a retraction if I may.",
			"Brian kindly pointed out that my answer to Olivia and Noah's follow-up question",
			"unfortunately missed the mark, as I was doing things on the fly instead",
			"of reading the documentation.",
			"So let me recall for us this example here,",
			"wherein we had the range function returning three values.",
			"So that code correct, that gives us the values 0, 1, and 2.",
			"But what I think Olivia asked was that if you wanted to skip values,",
			"and for instance do every two digits, how do we do that?",
			"And I unfortunately screwed up the syntax for that,",
			"providing only two inputs to range instead of three,",
			"as would be needed here.",
			"So for instance, suppose that we wanted to print out",
			"all of the numbers between 0 and 100, inclusive,",
			"but skipping every other-- so, 0, 2, 4, 6, 8, so all the even",
			"numbers on up through 100.",
			"We would actually want to do something like this instead.",
			"We would say, for i in range of 0 comma 101 comma 2.",
			"Why is that?",
			"Well, we'll pull up the documentation in just a moment,",
			"but 0 is where you want to start counting.",
			"The second value, 101, is where you want to stop counting.",
			"But it is by definition exclusive, so we have",
			"to go 1 past the value we care about.",
			"And then the 2, the third argument, is how many",
			"numbers do you want to increment at a time, from 0 to 2 to 4 to 6 to 8,",
			"on up through 100.",
			"So how could I have figured this out in advance",
			"rather than embarrassing myself now?",
			"Well, it turns out there is official documentation for Python.",
			"And we'll always link this to you.",
			"And here there is this search box at the very top.",
			"And you can see that during the break I was searching",
			"for the documentation for range.",
			"And sure enough, if I search for the range documentation, at first glance",
			"it might seem kind of overwhelming, because there's",
			"a lot of mentions of something like range in the documentation.",
			"Fortunately, the first result here is the one we want.",
			"And if I click on that, you'll see some documentation that's",
			"a little cryptic at first glance.",
			"But what's interesting about this is that range",
			"comes in two different flavors.",
			"And even though I keep calling it a function,",
			"technically it's what's called a class.",
			"But more on that another time.",
			"It behaves for our purposes as a function.",
			"Notice that there's two lines here.",
			"And they're similar but different.",
			"The first one specifies that this range function",
			"can take one input, the stop value.",
			"So at what value do you want to stop counting?",
			"So before, when we did range of 3, it stands to reason that by default,",
			"if you start counting at 0 and you stop at 3, that will",
			"get you to use i equals 0, 1, and 2.",
			"But there's another flavor of the range function, which",
			"is not the one that I proposed exists.",
			"There's another that takes in potentially three arguments, here",
			"or technically two.",
			"But it works in the following way.",
			"When you see syntax like this in Python's documentation,",
			"this means that the alternate form of range",
			"takes an argument called start, followed by an argument called stop,",
			"followed by, optionally, a third argument called step.",
			"And I know as the reader it's optional, because it's in square brackets here.",
			"So nothing to do with lists or arrays or anything like this.",
			"This is just human documentation.",
			"Anytime you see things in square brackets,",
			"that tends to imply to the human reader that this is optional.",
			"So what does that mean?",
			"Well, notice that there is no flavor of range that",
			"lets me specify a stop and a step, which I thought there was a moment ago when",
			"answering Olivia and Noah.",
			"But rather, there is this three-input version.",
			"So if I specify I want to start at 0, I want",
			"to stop at 101, which is just past the 100 I care about,",
			"and then provide an optional step of 2, this",
			"will give me a program ultimately that will print out",
			"all of those even numbers.",
			"So let me do this.",
			"First let me go into a program here.",
			"I'll call it count.py.",
			"And I'm going to go ahead and start at 0, go up to but not through 101,",
			"stepping 2 at a time.",
			"And this time I'm going to print out i.",
			"And here, too, another handy feature of Python--",
			"no more %s, and also no more %i.",
			"If you want to print out the value of a variable called i,",
			"just say print, open paren, i, close paren.",
			"You don't need another format string as in C.",
			"Let me go ahead now and run python of count.py, Enter.",
			"And it scrolled by really fast.",
			"But notice that it stopped at 100, and if I scroll",
			"to the beginning it started at 0.",
			"So my apologies.",
			"Mea culpa for messing that up earlier.",
			"But what a wonderful opportunity to introduce the official documentation",
			"for Python, which will soon become your friend,",
			"cryptic though it might feel at first glance.",
			"All right.",
			"Let's go ahead then and revisit one other program",
			"that we started with earlier.",
			"And that program was again this relatively simple Hello program",
			"that we left off in this state.",
			"We were using the get_string function from the CS50 library in Python.",
			"We had a variable called answer that was getting the return",
			"value of that version of get_string.",
			"And we were printing out \"hello,\" comma, so-and-so.",
			"And we were using that new cryptic feature, but handy,",
			"known as a format string or an f-string, which just means replace whatever's",
			"in curly braces with the actual value.",
			"So let's start to now take off the training wheels",
			"that we just put on only an hour ago.",
			"Let's get rid of the CS50 library.",
			"How can we actually get input in Python without using",
			"a library from someone like CS50?",
			"Well, get_string no longer exists.",
			"But thankfully there is another function we can use called, quite simply, input.",
			"Input is a function that, quite similar to get_string in both C and Python,",
			"prompts the user with a phrase, like this one here, \"What's your name?\";",
			"waits for them to type in a value; and as soon as they hit Enter,",
			"it returns whatever the human has typed in for you.",
			"So if I go ahead now and rerun this program, python of hello.py,",
			"after getting rid of the CS50 library and using input instead of get_string,",
			"what's my name?",
			"David.",
			"\"Hello,\" comma, \"David.\"",
			"So already there now, this is raw, native Python",
			"code completely unrelated to anything CS50 specific.",
			"But now let's go ahead, and let's keep using the CS50 library initially,",
			"because we'll see that very quickly are there advantages of using it,",
			"because we do a lot of error checking for you.",
			"But we'll eventually take those training wheels off entirely as well.",
			"But notice, indeed, how relatively simple it is to do so.",
			"Let me go ahead and open up a program that we wrote in advance.",
			"And I'm going to go ahead and grab this.",
			"This is available, as always, on the course's website.",
			"And I'm going to go ahead and open a file called addition0.c,",
			"which we've actually seen before.",
			"And I'm going to go ahead and do this fancy thing here",
			"where, in just a moment, I'm going to split my window so",
			"that I can see two files at a time.",
			"And over here I'm going to create a new file, and I'll call this addition.py.",
			"So that is to say, I'm just going to rearrange my IDE temporarily",
			"today so that we can see one language on the left, C, and then",
			"corresponding language on the right in Python.",
			"And again, you can download all these examples online",
			"if you'd like to follow along on your own.",
			"So if I'm translating this program on the left to this program on the right,",
			"let's first recall what the program on the left actually did.",
			"This was a program that prompts the user for x, prompts the user for y,",
			"and quite simply performs addition on the two.",
			"So this is week 1 stuff, way back when now.",
			"Well, let's go ahead and translate this.",
			"I will use the get_int function from the CS50 library,",
			"because it's going to make my life a little easier for now.",
			"I'm going to say from cs50 import get_int.",
			"I'm going to then go ahead and get an int from the user using",
			"get_int and prompting them for x.",
			"I'm going to then go ahead and get an int from the user prompting them for y.",
			"I'm going to then finally go ahead and, let's say, print out x plus y.",
			"And let me go ahead down here and run python of addition.py.",
			"I'm now being prompted for x, let's type in 1, y, let's type in 2, and voila,",
			"3 is my program here.",
			"So pretty straightforward.",
			"Fewer lines of code, because one, I don't have these unnecessary",
			"includes like stdio.h.",
			"I don't have any of the curly braces.",
			"To be fair, I don't have any of the comments.",
			"So let me write comments.",
			"In Python, it's going to be a different symbol.",
			"\"Prompt user for x\" should be prefixed with a hash symbol now instead of a //.",
			"I'll go ahead and prompt user for y, and then, how about here, perform addition.",
			"But even still, it's pretty tight.",
			"It's only 10 lines of code with some of those comments there.",
			"All right, well, what might I do that's a little bit different?",
			"Well, let's take off the training wheels.",
			"Let's take off the training wheels and get rid of the CS50 library",
			"again and get input here.",
			"Well, if I go ahead and get input here, get input here,",
			"assigning the values to x and y respectively, I'm going to go ahead now",
			"and run python of addition.py.",
			"x will be 1 again, y will be 2 again, and the answer, of course, is--",
			"12.",
			"Well, that's wrong.",
			"What's going on?",
			"How did I screw up such a simple program already?",
			"Albeit in a new language for me, Python.",
			"What did I do here?",
			"Yeah, Ben?",
			"AUDIENCE: Because it's really taking it in as two strings,",
			"so it's just putting them next to each other",
			"as opposed to doing the actual math on it.",
			"It's not reading it as in int.",
			"DAVID MALAN: Exactly.",
			"So input, this function that comes with Python,",
			"really is analogous to Cs50's get_string.",
			"No matter what the human types, it's going",
			"to come back as keyboard input characters, or ASCII characters,",
			"or Unicode characters from weeks past.",
			"Even if they look like numbers, they're not",
			"going to be treated as numbers, a.k.a., integers, unless we coerce them so.",
			"Now remember in C, we had this ability to cast values from one to another.",
			"Casting meant to convert one data type to another.",
			"And we were allowed to do that for chars to ints or ints to chars,",
			"but you could not do it for strings to ints, or from ints to strings.",
			"For that we needed special functions.",
			"And some of you might have used atoi, ASCII to int,",
			"which was a function that actually looks at all of the characters in an ASCII",
			"string and converts it to the corresponding integer.",
			"In Python, frankly, it's a little simpler.",
			"We can just cast it from one thing to another.",
			"So I'm going to go ahead and cast the return value of input",
			"as using this, int.",
			"And I'm going to do the same for y, passing the return value of input there",
			"to convert what looks like a string to what's--",
			"what looks like an int to what's actually an int.",
			"And now let me go ahead and perform the additions again, python of addition.py.",
			"And notice this time, hopefully to Ben's point,",
			"it's not going to concatenate two strings, as we saw",
			"is the default behavior of plus when you have two strings left and right.",
			"Hopefully now it will do a do addition on x equals 1, y equals 2.",
			"And voila, now we're back in business.",
			"However, what if I'm not the most cooperative or sharp user,",
			"and I type in \"cat\" for x?",
			"Now some crazy stuff starts to happen.",
			"So notice we've triggered our very first error when",
			"it comes to running a program whereby my program won't even",
			"run in the first place.",
			"And notice I'm getting some somewhat cryptic syntax here--",
			"traceback, most recent call last, file addition.py line 2.",
			"All right, that's at least familiar.",
			"I screwed up somewhere on line 2.",
			"It's showing me the line of code here.",
			"And it's saying \"ValueError-- invalid literal for int with base 10, cat.\"",
			"That's a very cryptic way of saying I just",
			"have tried to cast something that's not an integer to an integer.",
			"And so this is why we use things like the CS50 library.",
			"It's actually kind of annoying to write all of the code",
			"that checks and makes sure did the user type in a number and only a number,",
			"and not \"cat\" or \"dog\" or some other cryptic string.",
			"We ourselves now would have to implement that kind of error checking",
			"if we don't want to use the CS50 library.",
			"So there, trade-off.",
			"Maybe you feel more comfortable writing all of the code yourself.",
			"You don't want to use some random person on the internet's library,",
			"whether it's CS50's or someone else's, even if it's free and open source.",
			"You want to write it yourself.",
			"OK, fine.",
			"If you want to write it yourself, now I've",
			"got to add a bunch more lines of code to check,",
			"did the human type in a decimal digit one after the other, or did they",
			"type in other ASCII characters?",
			"So again, trade-off between using libraries are not.",
			"Generally, the answer is going to be use a common library to do--",
			"to solve these kinds of problems.",
			"Well, let's go ahead and change the program a little bit.",
			"Let me go ahead and open a new file called division.py just",
			"to do a bit of division here.",
			"And let me go ahead on the right-hand side and copy",
			"paste what we did before, but just change to division here.",
			"Let me go ahead and divide x by y.",
			"And I keep typing in 1 for x, 2 for y.",
			"In a moment I'm going to run python of division.py and type",
			"in 1 for x and 2 for y.",
			"But before I hit Enter, if this were a program in C, what would the answer be?",
			"Feel free to just respond in the chat if you'd like.",
			"If this were a program in C, and I'm dividing x by y,",
			"what would I have gotten in week 1 and every week since, Brian?",
			"BRIAN: The consensus looks like 0.",
			"DAVID MALAN: Yeah, because of truncation.",
			"If 1 divided by 2, of course, is 1/2, or 0.5, 0.5 is a float.",
			"But if I'm dealing with integers, even though it's implicitly",
			"integers thus far, and now explicitly now that I've casted them,",
			"I would seem to throw away the 0.5 and just get back 0.",
			"But let me go ahead and run python of division.py and putting x equals 1,",
			"y equals 2.",
			"And voila, wow, one of the most annoying features, or lack of features in C,",
			"seems to have been--",
			"seems to have been solved in Python by division doing what you want.",
			"And if you divide one integer by another in Python,",
			"it turns out one of the other features of today's language",
			"is that it does what you the programmer would",
			"expect, without having to get into the weeds, of the nuances of floats",
			"and ints.",
			"Just does the quote, unquote \"right thing\" instead.",
			"Well, let me go ahead and open up another program here, also from week 1.",
			"This one was called conditions.c.",
			"And this one-- give me one moment to open this up on the left--",
			"this one here was a program whose purpose in life",
			"was to get an int from the user called x, get another called y.",
			"And then it just did this-- if x less than y, print out as much.",
			"Else if x greater than y, print out as much, and so forth.",
			"Let's go ahead and translate this program",
			"into the corresponding Python code using some of the syntax we've seen already.",
			"I'm going to go ahead and save this as conditions.py.",
			"And I think I'm going to go ahead and keep",
			"using the library, the CS50 library, so that I",
			"don't have to worry about those kinds of errors",
			"when casting bad input to another.",
			"So from cs50 import get_int.",
			"And let me go ahead and now get an int from the user, calling it x.",
			"Let's go ahead and get an int from the user, calling it y.",
			"And I won't bother typing comments this time, just for time's sake.",
			"And now let me ask the question.",
			"In C, I would have done if x less than y.",
			"Python's a little more terse.",
			"If x less than y suffices, but with a colon.",
			"Under that, I'm going to go ahead and say print \"x is less than y.\"",
			"Elif-- this is the weird one--",
			"x is greater than y, go ahead and print out \"x is greater than y.\"",
			"And then else, also with a colon, print out \"x is equal to y.\"",
			"And I think that's just about it.",
			"I'm going to go ahead down here and run python of conditions.py.",
			"I'll type in 1, I'll type in 2, and indeed x is less than y.",
			"I'll run it again, this time with 2 and 1.",
			"X is greater than y.",
			"And let me run it again with 1 and 1.",
			"X is equal to y.",
			"So that seems to have worked.",
			"And let me point out one other thing.",
			"I mentioned earlier that you have this other shorthand syntax where",
			"you can just say import the CS50 library if you don't want to bother typing out",
			"individual function names.",
			"That's totally fine.",
			"But notice that the IDE is yelling at me at lines 3 and 4",
			"that get_int is no longer recognized.",
			"That's because Python supports this feature,",
			"when using other people's libraries, that it can namespace them for you.",
			"That is to say, you can't refer to get_int anymore directly.",
			"You have to more explicitly say, call the get_int function that's",
			"inside of the CS50 library.",
			"And so again, using our familiar dot operator,",
			"means go inside of that CS50 library, just like a C struct,",
			"and call the function called get_int therein.",
			"So I can now go ahead and rerun this, python of conditions.py,",
			"typing in 1 and 1, and voila, the code is now working again.",
			"So which is better?",
			"It depends.",
			"I mean, if it's sort of more readable to just write get_int",
			"all over the place, that's going to save you a lot of keystrokes-- you don't",
			"have to keep typing cs50 dot, cs50 dot.",
			"If, though, you're writing a pretty big program,",
			"and maybe you're using two different libraries that both implement",
			"a function called get_int, you want to be",
			"able to distinguish one from the other.",
			"So you might want to just import the libraries by their name,",
			"and then prefix the function calls, as I've done here,",
			"which is known as namespacing.",
			"Namespacing means that you can have two identically named variables",
			"or functions existing in two different namespaces.",
			"They don't collide, so long as they are inside",
			"of the CS50 library or some other library's name instead.",
			"Let me do one other thing with conditions here.",
			"Let me go ahead and open up another file from week 1.",
			"This one was agree.c.",
			"And this program prompted the user to input whether or not they agree.",
			"And we checked a little curiously that first week using equals",
			"equals quote, unquote \"Y\" or lowercase \"y,\" or quote, unquote capital \"N\"",
			"or lowercase \"n.\"",
			"Well, how do we go about converting this one?",
			"Let me go ahead and give myself a new file over here.",
			"I'll call it agree.py in this case.",
			"And it turns out we can solve this one in a few different ways.",
			"Let me go ahead and start off by importing from CS50 get_int,",
			"just because it's-- oh, no, get_string, rather, because it's convenient.",
			"Let me go ahead and get the user's input via get_string",
			"and ask them the same question, \"Do you agree,\" question mark with a space.",
			"Then let me check.",
			"If s equals equals quote, unquote \"Y\" or s equals equals lowercase \"y,\" then",
			"I'm going to go ahead and print out \"Agreed.\"",
			"Else-- oh, no, elif s equals equals capital \"N\"",
			"or s equals equals lowercase \"n,\" let me go ahead and print out here quote,",
			"unquote, \"Not agreed.\"",
			"And I think that should do it.",
			"But something's weird here.",
			"There's a few differences.",
			"What strikes you as different from C?",
			"What muscle memory might you have to break now",
			"when using conditions with multiple Boolean expressions",
			"combined in this way?",
			"And there's another subtlety.",
			"There's at least two salient differences between C and Python",
			"with just this example alone.",
			"",
			"Any thoughts in chat or [INAUDIBLE]?",
			"Ryan?",
			"AUDIENCE: I was going to say, for this one,",
			"instead of using the symbols for the logical operators,",
			"you can just type the text directly.",
			"DAVID MALAN: Yeah.",
			"We can literally just type the English word \"or\"",
			"if we want to express a logical or.",
			"So in C, recall on the left, we would have done this vertical bar",
			"thing, which is fine.",
			"You get used to it.",
			"But it's not very readable, at least in any English sense.",
			"Python took the approach of using more frequently",
			"actual English or English-like words that actually do read left to right.",
			"And indeed, a theme is emerging here.",
			"When you read Python code, it is closer to English",
			"than C is, because you don't trip over as much punctuation.",
			"Each line of Python code tends to read a little more",
			"like an English phrase or an English sentence.",
			"And there's one other subtlety here.",
			"On the left back in week 1, I took care to use single quotes",
			"around the Ys and the Ns.",
			"This week I'm using double quotes.",
			"But to be honest, it actually doesn't matter.",
			"I can alternatively use single quotes everywhere, so long as I'm consistent.",
			"But in Python there is no fundamental difference",
			"between double quotes and single quotes, so long as you are consistent.",
			"The reason being, when we looked at the data types that existed between C",
			"and now Python, absent from the list of Python data types was char.",
			"In Python there is no such thing as an individual char.",
			"Everything that's character-based is a string.",
			"Even if it's just one character long, everything is a string.",
			"Downside is we don't have quite as fine grained control.",
			"Upside is we get a lot more features with those string structures,",
			"as we've already seen with, for instance, doing something",
			"like uppercase with those as well.",
			"Well, let me go ahead and--",
			"I think I can simplify this.",
			"For instance, suppose I wanted to tolerate something like not just \"Y\"",
			"or \"y,\" in uppercase or lowercase.",
			"Suppose I wanted to also tolerate \"Yes\" in uppercase or lowercase as well.",
			"Well, you could imagine just starting to add to the code",
			"or s equals equals \"Yes,\" or s equals equals \"yes.\"",
			"But wait a minute, what if the user is being a little sloppy?",
			"And what if I want to actually say like, well, what if they're yelling?",
			"Or s equals equals \"YES\" in all caps.",
			"And there's a few other permutations as well.",
			"Like, this is quickly devolving into quite the mess.",
			"But if at the end of the day you really just want to detect \"Y\" or the word",
			"\"Yes,\" irrespective of capitalization, I bet we can be pretty clever in Python",
			"here.",
			"What if I go ahead and say, if s is in quote, unquote \"y\" or \"yes\"--",
			"in fact, I can borrow an idea from earlier,",
			"whereby I can use the square bracket notation to give me",
			"a list, which again, is like an array, but it will automatically grow",
			"or shrink as you need it.",
			"You don't have to decide in advance how big it is.",
			"This preposition here, in, is a new keyword in Python",
			"that will literally answer that question for me.",
			"And we've used it before earlier.",
			"When I implemented speller, I said if the word is in my set of words, return",
			"True.",
			"So if s in this list, I'll get back True or False",
			"based on the answer to that question.",
			"But again, it's not tolerating case.",
			"But no big deal--",
			"dot lower, now I can say, is the lowercase version of s,",
			"no matter what the human typed in, in this list of two values?",
			"That means now the user can type in all caps,",
			"in alternating caps, and one capitalized letter, or any other permutation",
			"whatsoever.",
			"All right.",
			"So that, then, is our conditions.",
			"Let me pause here to see if there's any questions.",
			"Any questions or confusion that we can clear up?",
			"With syntax, with conditions, Boolean variable--",
			"Boolean values?",
			"BRIAN: So a question came up.",
			"So in Python we are allowed to use the equals equals syntax",
			"to compare two strings?",
			"DAVID MALAN: Yes.",
			"So another really good catch.",
			"In Python, there are no pointers.",
			"Underneath the hood, there are still addresses.",
			"Like, your memory hasn't gone anywhere.",
			"But underneath the hood, all, of that is now managed for you by the language",
			"itself.",
			"So if you want to conceptually compare one string against another,",
			"just as I did here now on line 7, you can indeed use equals equals,",
			"and Python will do the quote, unquote \"right thing\" for you.",
			"You don't need to regress into using strcmp instead.",
			"Just for clarity, let me go ahead and update this.",
			"If s.lower in quote, unquote \"n\" or comma \"no,\"",
			"we can achieve the same result there by doing the same technique.",
			"Well, let me go ahead and open up another example",
			"that you might recall we did a progression of examples",
			"to make it good, better, and then best, this one involving",
			"just a cat meowing in some form.",
			"So let me go ahead and open up from week 1",
			"an example that was called meow0, relatively straightforward, that",
			"simply did this.",
			"It simply meowed three times.",
			"So suffice it to say now, in Python, it's pretty trivial",
			"to do something three times like this.",
			"I'm going to go ahead and call this meow.py.",
			"And of course, I can just do something like print \"meow.\"",
			"And I can just copy paste that.",
			"But of course, the whole point of this example back in week 1",
			"was not to devolve into just copy paste.",
			"Surely there's a better way.",
			"And we've seen a better way this time.",
			"If we wanted to change this into a for loop in C,",
			"we could have done something like for int i get 0, i less than 3, i++.",
			"Then in some curly braces we could have done",
			"printf of \"meow,\" new line, semicolon.",
			"So that was the next version of our meow code in C.",
			"But in Python, of course, it's a little more succinct.",
			"I can just do for i in range 3 print quote, unquote \"meow.\"",
			"So very similar in spirit to our hello, world of before.",
			"But again, we don't have to include any libraries for this.",
			"We don't need to have a main function.",
			"We don't need any of those curly braces or semicolon or the like.",
			"We can just dive in and focus on the code itself.",
			"But recall that we also, last time, evolved the meow program",
			"into having our own helper function, our own function that",
			"actually allowed us to create an abstraction on top of meowing.",
			"And that was in our third version, a.k.a., meow2.",
			"Let me go ahead and open up this version in a tab.",
			"And notice that this version starts to get a little involved, because one,",
			"we needed a prototype at the top, because I now",
			"have meow function at the bottom whose purpose in life",
			"was just to print \"meow,\" but to abstract that away",
			"as a new helper function.",
			"And then I had this code here with a for loop inside.",
			"Well, in Python it's going to work out to be a little simpler here, too.",
			"If I want to do something three times, for i in range of 3",
			"go ahead and call meow.",
			"Now of course, meow doesn't yet exist.",
			"So I can solve that problem.",
			"We've seen earlier, albeit quickly, in speller that I",
			"can define my own functions like meow.",
			"There's no more void, because if you don't",
			"want to have arguments in a function, just don't put them there.",
			"There's no return value specified in Python.",
			"They're implicit instead.",
			"So it suffices to do this.",
			"And now I can just print out \"meow.\"",
			"So here now, I have a program that iterates three times,",
			"calling meow each time, and meow is defined down below.",
			"Let me go ahead and run this, python of meow.py.",
			"Huh.",
			"Traceback, most recent call last.",
			"There's a problem on line 2 of meow.py because of NameError-- name",
			"\"meow\" is not defined.",
			"Now, the language being used there by Python is a little different from C's.",
			"It's frankly a little more human friendly.",
			"But what just happened?",
			"What problem has arisen that I yet haven't tripped over until now?",
			"",
			"Even if you've never programmed in Python before,",
			"and even if you haven't run help50 yet, what might be the issue there?",
			"Ginny?",
			"AUDIENCE: It's that the function is not found when we are trying to call it,",
			"because it's described below when we are calling it.",
			"DAVID MALAN: Yeah.",
			"AUDIENCE: There is no prototype.",
			"DAVID MALAN: Yeah, there's no prototype.",
			"And it turns out in Python, there isn't a notion of prototypes.",
			"So unfortunately, the solution we saw in week 1",
			"is not to just copy and paste the first line up above",
			"and end it with a semicolon.",
			"That's just not a thing.",
			"I could do this.",
			"I could just move my meow function to the top of the file,",
			"thereby defining the function first, and then using it last.",
			"And that would actually solve the problem, \"meow meow meow.\"",
			"That, of course, doesn't really help us long term,",
			"because you could probably imagine a situation where this function wants",
			"to call this function, but this function calls this one,",
			"and you just can't really neatly order them in some safe way.",
			"And it's just not going to be as maintainable, right?",
			"Recall that one of the values of putting main at the top of our C programs",
			"was that any reasonable person who wants to understand your code",
			"is probably going to start reading top to bottom.",
			"They're not going to want to have to scroll through all of your code",
			"looking for the actual main code.",
			"So it turns out in Python, even though you don't need a main function,",
			"it's actually common to define one nonetheless.",
			"It's going to be implemented with something like this.",
			"And I'm just going to indent my code below that there.",
			"So now I've defined main.",
			"But I haven't executed any code yet.",
			"On line 6, I've now defined meow, but I haven't executed any code yet.",
			"And I mean that literally.",
			"If I run python of meow now and hit Enter,",
			"I would hope to see \"meow meow meow,\" but I see nothing.",
			"And this is a little weird.",
			"But Python is doing literally what I told it to do.",
			"I told it to define a function called main,",
			"and I told it to define a function called meow.",
			"What I never told it to do is to call either of those functions.",
			"So the simplest fix here-- it's a little different from C and a little weird--",
			"is just call main is your very last thought in the file.",
			"So define main up at the top, just where most programmers would expect it to be,",
			"but call it all the way at the bottom.",
			"And let me go ahead and now and run my program.",
			"And now voila, \"meow meow meow\" is back, because I've defined main,",
			"I've defined meow, and now I am calling main.",
			"Now, as an aside, you will very often see in various documentation",
			"and tutorials online a much more cryptic incantation than this,",
			"which will have you typing out this.",
			"This achieves the same goal, but it's not strictly necessary",
			"for our purposes.",
			"This line of code, if you see it in any online references, or examples,",
			"or books, or sections or the like, it is necessary",
			"only when you're implementing, essentially,",
			"your own libraries-- like your own CS50 library,",
			"or your own image blurring library or the like.",
			"It's not necessary when we're just writing individual programs of our own.",
			"So I'm going to go ahead and keep mine simple and literally just call main.",
			"And let me just wave my hand at why you'd need that syntax otherwise",
			"in this context.",
			"But let me go ahead and modify this one last time.",
			"Because recall that in C, the last version of my program",
			"had me running meow and passing it input.",
			"Because I defined meow as taking an input like n,",
			"and then doing something like for int i get 0, i less than n, i++,",
			"and then inside of my curly braces did I print meow,",
			"so that now I have a helper function that I've invented that takes one",
			"input, an int called n.",
			"And it loops that many times and prints out meow that many times.",
			"And now I have a real nice abstraction, and that now my program is distilled,",
			"it's just meow three times.",
			"And it doesn't matter how I implemented meow.",
			"I can do the same thing in Python.",
			"I can go ahead and say that meow takes an argument called n.",
			"I don't have to bother specifying its type.",
			"I can now say for i in range of n, and I can print \"meow\" that many times.",
			"And now I can get rid of my loop in main and just say \"meow\" three times.",
			"And so same functionality.",
			"If I run this a final time, \"meow meow meow,\"",
			"but now I'm kind of designing my code in a more sophisticated way",
			"by actually giving myself now some of my own actual helper functions.",
			"All right, any questions, then, on this progression?",
			"Now, we're not really seeing new Python syntax.",
			"We're now just seeing a translation of some actual past C programs",
			"into Python to show really the equivalence.",
			"",
			"All right.",
			"Well, let's go ahead, then, and open another version",
			"from week 1 of a program called positive.c,",
			"which was an opportunity back then, not only to define our own helper function",
			"called get_positive_int, but it also introduced us",
			"to the familiar do while loop.",
			"And unfortunately, we're going to take that away from you now.",
			"Python does not have a do while loop.",
			"But it's, of course, a very useful thing to be able to do something",
			"while a condition is true.",
			"After all, pretty much any time we've gotten user input in the class,",
			"we've used do while, so that we prompt them at least once and then optionally",
			"again and again and again, until they cooperate.",
			"So let me go ahead and implement this in Python",
			"now in a file called positive.py, and go ahead here in positive.py,",
			"and translate this thing as follows.",
			"Let me go ahead and from cs50 import get_int.",
			"Let me go ahead and define a function called main.",
			"So now I'm just going to start to get into this habit.",
			"I'm going to go ahead and give myself a variable called i",
			"and call get_positive_int.",
			"And then I'm just going to go ahead and print out i,",
			"keeping it nice and simple.",
			"Now I have to implement get_positive_int.",
			"It doesn't need to take any input, so I'm not going to give it any arguments.",
			"And now I have to do to do while thing.",
			"So the Pythonic way to do this in Python is almost always",
			"to deliberately induce an infinite loop.",
			"And the idea being, if you want to do something again and again,",
			"just start doing it forever and then break out of the loop",
			"when you are ready to.",
			"So what do I want to do forever in this function?",
			"Well, I want to go ahead and get an int and prompt",
			"the human for a positive integer.",
			"And then I want to go ahead on the next line and ask a question.",
			"Well, if n is greater than 0, thereby making it positive, break.",
			"And the last line of code here is going to be to return n.",
			"So notice in C on the left, I did this do whole thing.",
			"I had to declare n outside of the do while loop,",
			"because it had to be outside the curly braces to be in scope.",
			"But in Python here, notice what I'm doing here",
			"is actually a little bit different.",
			"And did I screw up?",
			"",
			"Oh, yes, I did screw up.",
			"OK.",
			"If ask the actual question, if n greater than 0.",
			"So what did I do actually differently here on the right-hand side?",
			"Well, notice, I deliberately induced this infinite loop",
			"on line 10, which just means, do the following forever.",
			"I then ask the user for a variable n with get_int, and then I check,",
			"is n greater than 0?",
			"If so, break out of the loop.",
			"How do I break out of the loop?",
			"Well, notice that the indentation here has been very consistent.",
			"So when I break out of the loop, that puts me back",
			"in line with the original indentation which is now on line 14.",
			"Notice that the return lines up with the while loop, which means it's",
			"the first line of code that's outside of that loop.",
			"In the past, we would have had very explicit curly braces.",
			"Now we rely only on indentation that then lets me return n.",
			"So what are some of the differences here?",
			"One, the do while loop is completely gone.",
			"But two, scope is no longer an issue.",
			"It turns out in Python that the moment you declare a variable,",
			"it exists until the end of that function.",
			"You don't have to worry about the nuance of declaring a variable first like we",
			"did in C up here and then returning it down below.",
			"The moment we execute this line of code 11 here, n",
			"suddenly exists for the entirety of the remainder of that function.",
			"So even though we declared it inside of the loop, so to speak,",
			"as per the indentation, it is still accessible to the return statement",
			"here at the end of the program.",
			"All right.",
			"Let me pause there and see if there's any questions or confusion",
			"on getting user input, doing the equivalent, logically, of do while,",
			"but doing it now in this more Pythonic way.",
			"Peter?",
			"AUDIENCE: In Python, are variables accessible across functions or no?",
			"DAVID MALAN: Good question.",
			"No.",
			"So if you declare a variable inside of a function,",
			"it is scoped, so to speak, to that function.",
			"It is not available elsewhere.",
			"You would have to return it and pass it as output to input.",
			"Or you would have to define it, for instance, as a global variable instead.",
			"All right.",
			"Well, what else, then, might we translate?",
			"Well, recall from our earlier endeavors in week 1,",
			"we played around with these examples from Mario.",
			"And for instance, we wanted to print something out in Python--",
			"in C that mimics the notion of these pyramids, or these coins,",
			"or these little bricks on the screen.",
			"Well, here let me go ahead and open up a new file called mario.py.",
			"And I'm going to transition away from always showing the before and after",
			"and now just start to focus more on the Python code.",
			"But you can always look back if you wanted the corresponding C versions.",
			"How do I go about printing out three bricks like this vertically?",
			"Well, in Python I might say something like,",
			"for i in range of 3, quite simply, as we've done a few times already,",
			"and just go ahead and print out a hash.",
			"I don't need to worry about the new line, because you get it for free,",
			"so to speak.",
			"But I'm going to go ahead now and run python of mario.py.",
			"And voila, there's my very simple ASCII version of this Mario structure.",
			"But what if I want to do the coins instead?",
			"What if I want to do this horizontal coins that appear in these four bricks",
			"and print out a version of that?",
			"Well, how might I do that?",
			"Well, let me go ahead and change this to be--",
			"instead in my code for i in range of 4, so I can print four of these things.",
			"Let me go ahead and print out a question mark and then run this.",
			"So let me run mario.py.",
			"And voila-- damn.",
			"Like, not what I wanted.",
			"And so here is that trade-off.",
			"You might have been kind of excited, so far",
			"as it's possible to be excited about code, that, oh, my God,",
			"you don't need to do the stupid new line characters anymore.",
			"But what if you don't want it?",
			"Now we've kind of found a downside of getting those new lines automatically.",
			"Well, it turns out if we read the documentation for the print function",
			"in Python, it, too, can take multiple arguments.",
			"And what's powerful about Python, too, is",
			"that it supports not just positional arguments,",
			"where you just do a comma separated list of multiple arguments to a function.",
			"Python supports what are called named arguments, whereby",
			"if a function, especially one that's super powerful like print,",
			"takes multiple inputs, like this one, this other one, and this other thing.",
			"Each of those inputs can have names.",
			"And you, the user of that function, can specify the name.",
			"And it turns out that print in Python supports an argument called \"end.\"",
			"And you can explicitly say what value you want to give to that parameter",
			"by mentioning its name.",
			"And here I'm going to literally do this.",
			"I'm going to tell the print function that I",
			"want the value of \"end,\" a parameter, an argument to it, to be quote, unquote.",
			"The reason for that is that if I read the documentation,",
			"the default is actually this.",
			"If you read the documentation, it will tell you print's default value",
			"for its end argument is backslash n.",
			"This, too, is a feature that C did not have.",
			"C did not have optional arguments.",
			"They're either there or they're not.",
			"Rather, they either have to be there, or they cannot be there.",
			"Python supports optional arguments that even have default values.",
			"And so in this case, the default value of this, per the documentation,",
			"is that end is quote, unquote backslash n, which",
			"is why every line ends with that value.",
			"If you want to change that to be nothing,",
			"the so-called empty string, you change it to quote, unquote.",
			"So let me go ahead and run this now, and voila, closer.",
			"It's a little stupid looking, because now my cursor ended up--",
			"my prompt ended up on the same line.",
			"So maybe after this line, let me just go ahead and print nothing, that is,",
			"a new line.",
			"And now if I run mario.py, voila, now I get the effect I want.",
			"And if you want to see what's really going on here,",
			"I can do something stupid like \"HELLO.\"",
			"And now I can end every print with \"HELLO,\" \"HELLO,\" \"HELLO,\" \"HELLO.\"",
			"Not that you would do that, but that's all it means.",
			"It's ending every call to print with that expression.",
			"But the correct version, of course, is just to blank it out in this way.",
			"But here's something that's kind of cool.",
			"And this is where if you're kind of a geek,",
			"life starts to get really interesting fast.",
			"I can actually change my Python code to print out these four question",
			"marks in the sky to be quite simply print quote, unquote question",
			"mark times 4.",
			"And now if I rerun this program, boom, done.",
			"And here's where, again, you're getting a lot of features in the language",
			"where you don't have to think about loops,",
			"you don't have to think about a lot of syntax.",
			"If you want to take a question mark and do it four times,",
			"you can literally use the star operator, which",
			"has been overloaded to support not only multiplication with numbers",
			"but also automatic concatenation, if you will, with strings in this way.",
			"So let me go ahead and do one final version for mario.",
			"Recall that the last thing we built with mario",
			"looked a little something like this.",
			"Let me go ahead and change my mario code now to be for i in range of 3,",
			"because this is a 3 by 3 grid of bricks, let's say.",
			"And let's go ahead and now, inside of this loop,",
			"do another nested loop where I do three columns as well.",
			"And in here, I want to print out a single hash at a time.",
			"But I don't want to print out a new line.",
			"I only want to print out a new line here.",
			"So it turns out that essentially, because Python gives you",
			"the backslash n's automatically, essentially any logic",
			"you wrote in the past now needs to be reversed.",
			"If you ever printed a new line, now you don't want to print a new line.",
			"And if you ever didn't print a new line, now you do, in some sense.",
			"So let me go ahead and--",
			"not make, wrong language-- python of mario.py.",
			"And voila, my 3 by 3 grid.",
			"So this is to say that in Python, we can nest loops, just",
			"like we did in C. I can use multiple variable names, like i",
			"and j being conventional.",
			"There's no curly braces, there's no semicolons.",
			"But again, the logic, the ideas are still the same.",
			"It just takes a little bit of time to get used to, for instance,",
			"some of the new syntax.",
			"You'll recall that in C, we ran into a problem pretty early on with integers.",
			"And let me create a program here called int.py.",
			"And let me initialize a variable called i to 1.",
			"And let me go ahead and do this forever.",
			"Let me do this forever.",
			"Instead of a while True block.",
			"Let me print out whatever i is.",
			"And then let me go ahead and just add 1 to i on each iteration.",
			"Let me go ahead and run this program.",
			"And let me increase the size of my window for now and just run this thing.",
			"Whoops, that was mario.",
			"Let me run this thing, python of int.py.",
			"And you'll see that it's counting up to infinity.",
			"And honestly, this is going to take a while.",
			"You know what's faster than counting by 1/ maybe multiplying by 2.",
			"So let me go ahead and multiply by 2 instead.",
			"To kill the program, just like in C I used Control-C.",
			"And that's why I see keyboard interrupt.",
			"It respected my wanting to cancel the program.",
			"Let me rerun this now and just count really big.",
			"And even though the internet's being a little slow,",
			"which is why it's a little shaky, that's a really big number already",
			"if I keep doubling i.",
			"What would have happened already at this point",
			"if I were using C to implement this program?",
			"If in C I declared a variable called i, and it was an int,",
			"and I kept doubling it, again and again and again",
			"and again and again, literally forever?",
			"",
			"Any thoughts?",
			"Yeah.",
			"What would have happened in C. Joy?",
			"",
			"AUDIENCE: Yeah, I think it would have crashed.",
			"DAVID MALAN: It would have crashed?",
			"Why?",
			"AUDIENCE: Because it would be taking much memory.",
			"DAVID MALAN: Good thought.",
			"So it wouldn't crash per se.",
			"Something would go wrong.",
			"It wouldn't crash.",
			"Because it's still an int, and in C at least,",
			"it would still be taking up on a typical computer 32 bits or 4 bytes.",
			"But honestly, the program probably would have started printing 0",
			"by now, or even negative numbers.",
			"Because recall, one of the limitations of C",
			"is that integers are a finite size--",
			"only 32 bits or 4 bytes.",
			"Which means if you keep going from 1, 2, 4 8, 16,",
			"a million, 2 million, 4 million, 8 million,",
			"and so forth, eventually you're going to get into the billions.",
			"And as soon as you cross the 2 billion threshold or maybe the 4 billion",
			"threshold, if using signed or unsigned numbers, it's going to get too big.",
			"You're going to have integer overflow.",
			"But in the world of Python, integer overflow, not a thing anymore.",
			"In the world of Python, your numbers will",
			"get as big as you need them to get.",
			"They will automatically address this problem for you.",
			"Unfortunately, floating point imprecision, still a thing.",
			"So I only divided 1 by 2 earlier.",
			"But if I continue to divide other values and I looked at enough decimal points,",
			"we would still suffer, unfortunately, from floating point imprecision.",
			"However, in the world of Python, like in Java and other languages,",
			"there are libraries, scientific libraries",
			"that allow you to use as much precision as you need,",
			"or at least as much memory as your computer has.",
			"So those problems, too, have been better solved in more modern languages",
			"than in something out of the box like C code.",
			"But just by multiplying that number again and again was I able, then,",
			"to demonstrate much larger numbers than we ever saw in weeks past.",
			"Well, let me go ahead and do another program here,",
			"this one called scores.py.",
			"That's going to be an example of really keeping",
			"track of scores, which was an example we did early on in week 2 of the class.",
			"And in Python, I'm going to go ahead and give myself",
			"a list of scores like this--",
			"72, 73, and 33--",
			"again, sort of a playful reference to our ASCII numbers.",
			"But in this context, they're quiz scores-- so",
			"two OK quiz scores, and one kind of low quiz score,",
			"assuming these things are out of like 100.",
			"But notice the syntax I'm using.",
			"Square brackets in Python give me a list.",
			"I don't have to decide in advance how big it is.",
			"It's not an array per se, but it's similar in spirit.",
			"But it will automatically grow or shrink.",
			"And the syntax is even simpler.",
			"Suppose I want to average these scores in Python.",
			"I could do something like this.",
			"I could print out that the average of these scores is, for instance--",
			"and then I could do something like this.",
			"I could do the sum of scores divided by the length of scores.",
			"And some of this is actually kind of new already.",
			"It turns out in Python that there is sum function that will take a list as input",
			"and return to you the sum of those items.",
			"And we've seen already there's a len function, L-E-N",
			"that tells you the length of a list.",
			"So if I add up all my scores and then divide by the total number of scores,",
			"that should give me by definition my average.",
			"So python of scores.py, voila--",
			"whoops, what did I do here?",
			"Ah, I screwed up.",
			"So unintended, admittedly, but let me try to save myself here.",
			"So what just happened?",
			"Well, this error message is a little cryptic.",
			"It says, \"TypeError-- can only concatenate str, not float, to str.\"",
			"long.",
			"Story short, Python in this case does not",
			"like the fact that I'm trying to take a string, average, on the left",
			"and concatenate to it a float on the right.",
			"So there's a couple of ways I can solve this.",
			"And we saw the fundamental solution earlier.",
			"If this expression here that I've highlighted",
			"is by definition mathematically a float, but I want it to become a string,",
			"I can just tell Python, convert that float to a string.",
			"So much like there's the itoa function that some of you discovered,",
			"which is the opposite of the atoi function,",
			"I can take in Python, in this case a float,",
			"and convert it to a string equivalent.",
			"So now if I run python of scores.py, voila, my average is 59.333333.",
			"And you already see a bit of imprecision.",
			"There's some rounding error at the end there that is not a perfect one third.",
			"But there's another way I could do this.",
			"And it's a little uglier.",
			"But I could use one of those f-strings.",
			"I could, say, go ahead and plug in a value",
			"here and just print out the user's average.",
			"So it turns out that inside of these curly braces,",
			"you don't have to print just variables.",
			"You can actually put entire coding expressions.",
			"And I would encourage you not to paste crazy long lines of code,",
			"because it's going to very quickly get unreadable.",
			"At that point you probably should use a variable.",
			"But here I can go ahead and run python of scores.py.",
			"And voila-- I screwed up again.",
			"Also not intentional, but I can fix this.",
			"Yeah, I'm missing the f at the beginning to make this a formatted string.",
			"And now if I rerun it, voila, same exact answer.",
			"So again, I have multiple approaches.",
			"There's a third one here.",
			"I could do something-- and actually, I don't need the str in that context,",
			"because now if it's inside of a format string,",
			"Python will presume that I want to automatically convert it to a string.",
			"So that's nice.",
			"Or I can just factor this out, and I can say something",
			"like this-- give me a variable called average, assign it equal to that math,",
			"and then print out the average.",
			"So again, just like in C, so many different ways to solve the problem.",
			"And which one is best depends really on what",
			"might be most readable, most maintainable, or easiest to do.",
			"Let me go ahead and add some scores dynamically now.",
			"Instead of hardcoding my three scores, let",
			"me ask myself for my scores over the course of the semester.",
			"From cs50 let me get_int, just so I can get some numbers easily.",
			"Let me give myself an empty list of scores, the syntax for which",
			"is just open bracket, close bracket, so nothing inside of it initially.",
			"And now let me go ahead and do this.",
			"Let me get myself three scores--",
			"maybe it's the end of the term now.",
			"For i in range of 3, let me go ahead and append to the scores array",
			"whatever the return value of get_int is like this.",
			"Now, this, too, I could do in a bunch of ways.",
			"Let me get rid of this here.",
			"Whoops.",
			"Nope, we'll leave that there.",
			"This I could do in a bunch of ways.",
			"But notice what I'm doing.",
			"I'm getting int, and I'm passing the return value of int",
			"to a new function called append.",
			"It turns out that lists, the square brackets,",
			"once you've defined them in a variable like scores,",
			"they, too, have functions built into them.",
			"So I can do scores.append in order to add a number to the list.",
			"So now let me go ahead and run this, python of scores.py.",
			"Let me manually type in my 72, my 73, and my 33.",
			"And voila, same exact answer.",
			"But think about how much of a pain this would",
			"have been in C, if you had to either decide",
			"in advance the size of the array, or not decide in advance",
			"and use malloc and realloc to keep growing and shrinking it.",
			"Python, using this append function, which",
			"comes inside of that list variable, handles",
			"all of this automatically for us.",
			"All right.",
			"So that, too, is a whole bunch of features.",
			"Any questions, though, that I can answer here?",
			"",
			"Any questions?",
			"No?",
			"Yeah, over to Santiago.",
			"AUDIENCE: Yeah.",
			"I had a question about--",
			"so even if append reduces the amount of code you have to write,",
			"does it underneath the hood just do exactly what we",
			"were doing in C, which is like, malloc and realloc, or something like that?",
			"Is that all-- is that happening inside Python?",
			"DAVID MALAN: It is.",
			"Yeah, that's exactly what you're getting for free,",
			"so to speak, with the language.",
			"All of that malloc stuff, realloc stuff, maybe it's",
			"implemented with an array underneath the hood,",
			"like in the actual computer's memory.",
			"Maybe it's a linked list like we saw last week.",
			"But all of that is happening for you.",
			"But that, again, is one of the reasons why the code ultimately",
			"runs a little slower, because you have someone else's code in between you",
			"and the CPU in your computer doing a bit of that work for you.",
			"Sophia?",
			"AUDIENCE: Are there efficiency differences",
			"in between the ways that we print, of utilizing the f formatting",
			"or the other forms that we've used?",
			"DAVID MALAN: You don't have to be-- if I'm understanding correctly,",
			"there are some fancy features of it.",
			"For instance, there is syntax you can use",
			"to specify how many decimal points you want",
			"to print after a floating point value.",
			"But it's no longer all of the %i, %s, %f, and so forth.",
			"They're slightly different syntax, but fortunately less of it,",
			"since you don't have to worry as much about those conventions.",
			"Other questions or confusion?",
			"No?",
			"All right.",
			"Well, let me go ahead and do one other example that",
			"might be familiar from some weeks past.",
			"Let me go ahead and whip up a quick example of uppercasing, just",
			"to tie together one of our earlier examples",
			"that we saw more organically, or lowercasing.",
			"In this case, a file called uppercase.py.",
			"Let me go ahead, and from the CS50 library, let me go ahead",
			"and import get_string.",
			"And then once I have this, let me go ahead and get a string from the user",
			"and ask them for, \"Before,\" for instance.",
			"And then let me go ahead and do the following.",
			"Let me go ahead and print out \"After,\" the goal being I",
			"want to uppercase this whole string for the user.",
			"And I'm going to keep this all on the same line.",
			"So again, I want a program that's going to print \"Before,\"",
			"ask the human for some input, and then after,",
			"show the capitalized version of the whole string.",
			"So how can I do this?",
			"Well, we've seen one way already.",
			"I can do literally, for instance, s.upper.",
			"And let me go ahead and save this.",
			"And now run python of uppercase.py.",
			"Let me type in \"hi\" in lowercase, and boom, now",
			"I get back the uppercase version.",
			"But if you want, you can actually manipulate individual characters",
			"as well.",
			"Let me go ahead and a little more pedantically do this.",
			"For c in s, print c.",
			"Now, this isn't quite what I want yet, but it's a stepping stone.",
			"Notice now if I type in \"hi\" in lowercase,",
			"I see \"h,\" \"i,\" exclamation point, all still lowercase.",
			"So I haven't done anything interesting.",
			"But you know what, let me get rid of the new line,",
			"just so it all stays on the same line, because that was kind of ugly.",
			"Let me do it again.",
			"OK, a little better.",
			"Let me actually add a new line at the very end of the program",
			"to move my cursor to the new line.",
			"Let's do it once more, \"hi.\"",
			"OK, I'm not uppercasing anything.",
			"But if I change c to c.upper, I can do that as expected.",
			"And let me run it again, \"hi,\" and boom.",
			"Now I have another working program.",
			"But the new feature now is, notice this coolness on line 5.",
			"If you want to iterate over a string's characters,",
			"you don't need to initialize i to 0 and then use square bracket notation",
			"like you did in C. You just say, for c in s, or for x and y, whatever it is.",
			"For can also be used to iterate over the individual characters in a string,",
			"as you might want to do when doing something",
			"like cryptography or the like.",
			"So we don't have to just uppercase the whole string all at once.",
			"We can still gain access to our individual values.",
			"And there's other things you can do in Python as well that we could do in C.",
			"Let me go ahead and create a program here called argv.py,",
			"for argument vector, which, recall, was the name of the input to main",
			"that allows you to access command line arguments.",
			"Now today, we have seen that you can have a main function",
			"but you don't need to, but it's conventional.",
			"It's not required anymore.",
			"And so we haven't seen argc or argv yet, but that's",
			"because they're elsewhere in Python.",
			"If you want to access command line arguments in Python,",
			"it turns out that you can import a module called argv.",
			"And this is a little new, but it follows the same pattern as the CS50's library.",
			"I'm going to import from the System library a feature called argv.",
			"So this just means that it comes with Python, but to use it",
			"you have to import it explicitly.",
			"And now I'm going to do this.",
			"If the length of argv equals 2, then I'm going",
			"to go ahead and print out, just like we did a few weeks ago,",
			"\"hello,\" and then argv bracket 1.",
			"Somewhat cryptic, but I'll come back to this in a moment.",
			"Else, I'm going to go ahead and print out a default of \"hello, world.\"",
			"So we did this some weeks ago, in week 2,",
			"whereby we ran a program that if the user typed their name at the prompt,",
			"it would say \"hello, David\" or \"hello, Brian.\"",
			"If they didn't, it would just say \"hello, world.\"",
			"So to be clear, if I run this thing and run it without any command line",
			"arguments, I just see \"hello, world.\"",
			"If I run it again, though, and type my name in and hit Enter,",
			"now I see \"hello, David.\"",
			"So how is that working?",
			"Well, this first line of code gives me access to argv,",
			"which is now tucked away in the sys library, if you will,",
			"the sys package, so to speak.",
			"But it works the same way.",
			"There's no argc, but no problem.",
			"If argv is a list of command line arguments, which it is,",
			"len, L-E-N, will tell me the length of that list, which is equivalent to argc.",
			"So I can reconstruct the same idea from my version in C.",
			"And here, then, I have a format string that prints out \"hello,\" comma,",
			"and then whatever's in curly braces.",
			"And argv is a list.",
			"And just like in C, which had arrays, a list",
			"is just an array that can dynamically grow and shrink for you.",
			"You can still use square bracket notation to get at, in this case,",
			"the second thing the human typed.",
			"So let me change this just for clarity to be 0.",
			"And if I rerun this now and type in David,",
			"it says weirdly, \"hello, argv.py.\"",
			"So what you don't see is the word \"Python.\"",
			"Python is the interpreter, but that's not part of your program's execution",
			"per se.",
			"argv 0 is going to be the name of the Python program you're running,",
			"and argv 1 is going to be the first word thereafter, and so forth.",
			"So we still have access to that feature, but now",
			"we can convert it now to Python.",
			"And in fact, if I want to print out all the command line arguments,",
			"I can just more simply do this--",
			"for arg in argv, go ahead and print arg.",
			"So very succinct, if not obvious at first glance.",
			"Now let me go ahead and type in something",
			"like \"David Malan,\" two words.",
			"Enter, you now see everything printed or typed after the program's name,",
			"and so forth.",
			"So here, too, notice how neatly we can iterate over a list in Python.",
			"There's no i, there's no square brackets necessarily.",
			"You can just say, for arg in argv, just like a moment ago I said for c in s.",
			"Pretty much the Python for loop is smart enough",
			"to figure out what it is you want it to iterate over,",
			"whether it's a string or a list.",
			"And my God, it's just so much more fun or pleasant to program",
			"now, when you don't have to worry about all the stupid mechanics",
			"of incrementing, and plus plus, and semicolons, and all",
			"of that syntactical mess.",
			"All right, let me pause here to see if there's any questions.",
			"I know we're going through some of these examples quickly,",
			"but they're really just translations again.",
			"And for upcoming problems and problems sets",
			"will you be able to more methodically compare before and after as well.",
			"Anything at all on your end, Brian?",
			"BRIAN: Nothing here.",
			"DAVID MALAN: All right.",
			"So let's look at some of our final past examples.",
			"And then we'll reserve some time at the end of today",
			"to look at some even more powerful things",
			"that we can do because now of languages like Python.",
			"Let me go ahead and create a program, this time called exit.py, exit.py.",
			"And this program's purpose in life, it's just",
			"going to demonstrate exit statuses.",
			"Recall that eventually in C, we introduced",
			"the notion of returning 0, or returning 1, or any other value from main.",
			"We do have that ability now in Python, too,",
			"that you'll start to see in more larger programs.",
			"Here, too, I'm going to go ahead and import",
			"sys, the whole thing this time, just to show a different way of doing this.",
			"I'm going to say, if the length of sys.argv",
			"does not equal 2, let me go ahead and yell at the user,",
			"\"Missing command-line arguments.\"",
			"And then after this, I'm going to go ahead and do sys.exit 1.",
			"Otherwise, I'm going to go ahead and print out a formatted string that",
			"says \"hello,\" comma arg v bracket 1, with sys now in front of it",
			"for reasons I'll explain in a moment.",
			"And then at the end, I'm going to go ahead and by default print sys.exit 0.",
			"All right.",
			"So what is going on here?",
			"One, because I'm now using sys for two different things,",
			"I decided not to import argv specifically,",
			"but just to import the whole library.",
			"But because I did that, I can't just write the word \"argv\" anywhere.",
			"I now have to prefix it with the name of the package or library that it's in.",
			"So that's why I started doing sys.argv, sys.argv.",
			"But I'm also using another feature of the sys library, which gives me access",
			"to an exit function, which is the equivalent to returning from main.",
			"So this is a bit of a dichotomy.",
			"In C, you had to return 0 or 1, or some other integer from main.",
			"In Python, you instead call sys.exit with the same kinds of numbers.",
			"So a little bit different syntactically, but it's the same fundamental idea.",
			"What's the purpose of this program?",
			"Well, if I run this thing, its purpose is just",
			"to make me type in one word and only one word after my program's name.",
			"So notice, if I just run python of exit.py,",
			"it's yelling at me, \"Missing command-line argument.\"",
			"If I run it instead with my name after that, now it says \"hello, David.\"",
			"So stupid program.",
			"It's only meant to demonstrate how you can now return different values",
			"or really return prematurely from a program,",
			"because you're no longer in main.",
			"You can't return per se, but you can now in Python exit as needed.",
			"So that's the comparable line there.",
			"All right, any questions, then, on exit statuses?",
			"Again, we're just kind of churning through the list of features",
			"we saw in C, even if they don't come to you super naturally--",
			"pun not intended-- but rather, there are analogs here in the Python world.",
			"No?",
			"All right.",
			"Well, recall that after that we started focusing really",
			"in the class on algorithms.",
			"And that's when the size of our data sets",
			"and our-- the efficiency of our code started to really matter.",
			"Let me go ahead and write a program called numbers.py",
			"that, for instance, contains an import at the top for sys,",
			"because I'll need that in a moment.",
			"And then it gives me--",
			"and let me give myself an array of numbers, like 4, 6, 8, 2, 7, 5, 0.",
			"And you might recall that those were the numbers behind the doors in week 3.",
			"And suppose that I want to search for the number 0.",
			"Well, in C, to implement linear search you would use a for loop",
			"and a variable like i, and check all of the locations.",
			"Python is way simpler.",
			"If 0 in numbers, go ahead and print out \"Found.\"",
			"And then I'll go ahead and else print out \"Not found.\"",
			"And that's it.",
			"So let me go ahead now and do python of numbers.py.",
			"Hopefully I will see [INAUDIBLE] found, because it's in fact there.",
			"So that's it.",
			"Linear search is just a prepositional phrase, if 0 in numbers,",
			"gives you the answer True or False that you want.",
			"So there is our linear search.",
			"What if I want to do it for names?",
			"Well, let me go ahead and give myself a second file, similar in spirit,",
			"called names.py.",
			"Let me again import--",
			"and actually, if I really want to be identical to our C version,",
			"let me go ahead and exit with 0 here, and let me exit with 1 here.",
			"But strictly speaking, that's not necessary.",
			"That just happens to be what I did when we did this in C instead.",
			"In names, let me go ahead and do something similar.",
			"Let me give myself a names list with a whole bunch of names--",
			"\"Bill,\" and \"Charlie,\" and \"Fred,\" and \"George,\" and \"Ginny,\" and \"Percy,\"",
			"and lastly \"Ron,\" all the way at the end.",
			"And then let me just check if \"Ron\" is in that list using linear search.",
			"If \"Ron\" in names, go ahead and print out \"Found.\"",
			"Else, go ahead and print out \"Not found.\"",
			"And I won't bother printing out or exiting with 0 or 1 this time.",
			"But let me go ahead and run python of names--",
			"whoops, python of names.",
			"And voila, we found \"Ron.\"",
			"And notice, I'm not cheating.",
			"I don't think I've screwed up.",
			"If I go ahead and say \"Ronald,\" if that was in fact his formal name,",
			"now I search for \"Ron,\" not found.",
			"It's looking, indeed, for an exact match.",
			"So that's pretty cool, that we can distill something",
			"like that pretty readily.",
			"Well, recall that a little bit ago, I proposed that Python has other data",
			"types as well, among which are these things called dictionaries or dicts,",
			"D-I-C-T, which represent a collection of key-value pairs similar in spirit",
			"to a dictionary.",
			"Like, the Spanish dictionary has Spanish keys and English values converting one",
			"to the other, this English dictionary has",
			"English words and English definitions.",
			"But the same idea-- a collection of keys and values.",
			"Using one, you can find the other.",
			"Well, let's go ahead and translate this into Python in a program",
			"called phonebook.py, and implements something",
			"like our C phone book a while back, which, recall,",
			"in C, we used a couple of arrays initially, then we scratched that,",
			"and we used an array of structs instead.",
			"Now let's use a dictionary, which is a more general-purpose data",
			"structure, as follows.",
			"Let me go ahead here and from cs50 import get_string.",
			"Then let me go ahead and give myself a dictionary of people.",
			"And the syntax here is a little different,",
			"but I'm going to go ahead and preemptively use curly braces.",
			"They are back for the purposes of dictionaries.",
			"And then here's how you define key-value pairs.",
			"One key is going to be \"Brian.\"",
			"And his value is going to be \"+1-617-495-1000.\"",
			"That's his number.",
			"And then I'll be one of the other keys from now",
			"We'll keep it a very small phone book or dictionary.",
			"Mine will be \"+1-949-468-2750.\"",
			"And that's it.",
			"So the curly braces can technically be on different lines.",
			"I could move this up here, I could get rid of this.",
			"But there are certain style conventions in Python.",
			"The point, though, here is that a dictionary is defined with curly braces",
			"at the beginning and end; the keys and values are separated by colons;",
			"and the key-value pairs are separated by commas.",
			"So that's why it's conventional to write it the way I did.",
			"It's just a little more obvious that this",
			"is a dictionary with two keys, each of which has a value.",
			"It's just associating left with right, so to speak.",
			"Now, what does this mean?",
			"Suppose I want to search for someone's name.",
			"Well, let me go ahead and give myself a name variable called get_string, asking",
			"the human for a name.",
			"And let me implement my own virtual phone book, much like the Contacts app",
			"on your phone.",
			"Let me go ahead and then say, once I have the name,",
			"if name in people, that's great.",
			"If I found the name in people, let me go ahead",
			"and print out that the number for that person is people bracket name.",
			"And this is where dictionaries are going to get really powerful.",
			"Let me run it first and then explain.",
			"Python of phonebook.py, Enter--",
			"whoops, python of phonebook.py.",
			"Let me search for Brian's number.",
			"Boom, there's Brian's number.",
			"Let me go ahead and run it with David's name.",
			"Boom, there's that number.",
			"Let me go ahead and run it with, say, Montague's name.",
			"Don't have his phone number just yet.",
			"He's unlisted, as would be anyone else that I type in.",
			"So what has gone on here?",
			"Well, at the top I'm declaring this new variable called people.",
			"And it's a dictionary, a set of key-value pairs left and right.",
			"Then I'm just getting a string from the user using get_string as before.",
			"And then this is powerful, too.",
			"This is essentially, on line 9, searching the whole dictionary",
			"for the given name.",
			"And it's returning to me down here the name associated with that-- or, sorry,",
			"the number associated with that person's name.",
			"And let me make this more clear by factoring this out.",
			"Let me give myself a variable called number and then more",
			"explicitly print out that variable's name.",
			"Here's what's different today.",
			"\"If name in people\" in here, what this does is Python",
			"searches all of the keys for that name.",
			"It doesn't search values.",
			"When you say if name in a given dictionary, like people is,",
			"it searches only the keys.",
			"If you've then found the key, I know definitively",
			"that \"David\" or \"Brian\" are in the dictionary.",
			"And notice this.",
			"It's just like in C's arrays syntax.",
			"You can now use square bracket notation to index",
			"into a dictionary using a word like \"David\" or \"Brian,\"",
			"and get back a value like our phone number.",
			"In C, and thus far even in Python, whenever",
			"we've seen square bracket notation, it would only be typically for numbers,",
			"because arrays or lists have indices, numbers",
			"that addresses the first location, middle, and last,",
			"and so forth, everything in between.",
			"But what's powerful about dictionaries is that they're otherwise",
			"known as associative arrays.",
			"A dictionary is a collection of key-value pairs.",
			"And if you want to look up a key, you simply",
			"use square bracket notation, just like we used",
			"to use square brackets for numbers.",
			"And because Python is a pretty fancy language,",
			"it handles the searching for you.",
			"And even better, it does not use linear search.",
			"When searching a dictionary, it aspires to give you",
			"constant time by using what we called last week a hash table.",
			"Dictionaries are typically implemented underneath the hood using something",
			"like a hash table.",
			"And recall that, even though it was really",
			"a goal of achieving constant time, if you choose a really good hash",
			"function and a really--",
			"the right size array to hash into, you can come close to constant time.",
			"So again, among the features of a dictionary in Python",
			"are that it gives you very high performance.",
			"It's not linear search.",
			"And in fact, set-- recall that when we began playing with Python earlier,",
			"and I re-implemented speller using, what,",
			"10 or 20 lines of code max instead of the many",
			"more that you might have written for pset 5, speller used a set.",
			"And a set is just a collection of values.",
			"Long story short, it's similar in spirit to a dictionary",
			"in that it, too, underneath the hood uses a hash table",
			"to get you answers quickly.",
			"So if you think back to what that speller example was from earlier",
			"on today, when I had a line of code that just said words equals set,",
			"that one line of code was implementing pretty much the entirety",
			"of your spell checker.",
			"All of those pointers, all of those hash tables and chains and linked lists",
			"are distilled into just one line of code.",
			"You get that with the language itself.",
			"All right.",
			"Any questions, then, on dictionaries?",
			"They will recur, and they tend to be one of the most useful data structures,",
			"because this ability to just associate something with something else",
			"is just a wonderful way, it turns out, to organize your data.",
			"Any questions here?",
			"Yeah, Sophia?",
			"AUDIENCE: Is there only a set hash function",
			"that Python has defined for these dictionaries,",
			"or can we change the hash function in any way?",
			"DAVID MALAN: Good question.",
			"It comes with a hash function for you, and Python",
			"figures all of that out for you.",
			"So that's the kind of detail that you should leave to the library,",
			"because someone else has spent all of the time thinking",
			"about how to dynamically adapt the data structure, move things around as",
			"needed, so that you no longer need to stress to the degree",
			"you might have when implementing speller yourself.",
			"And it turns out, other things get easy, too.",
			"This is not a commonly needed feature, necessarily,",
			"but it is something we can do.",
			"And let me go ahead and write a quick program called swap.py.",
			"Recall that in swap.c a couple of weeks ago, we gave x a value of 1,",
			"y a variable-- a value of 2, and then I printed out something",
			"like \"x is x, y is y.\"",
			"But this week I'm using format strings just to print that out.",
			"Then I did something like swap x, y, and I just kind of hoped for the best,",
			"and then I printed out those values again.",
			"Well it turns out in Python, because you don't have pointers",
			"and you don't have addresses per se that you have access to,",
			"you can't resort to the solution like last week",
			"and pass these variables around by reference,",
			"so to speak, by their address.",
			"That's just not possible.",
			"Why is that a thing?",
			"Well, it would seem to be taking a feature away from you,",
			"but honestly, if this past week was any indication, including the week prior,",
			"pointers are hard.",
			"And segmentation faults are frequent.",
			"And getting all of that stuff right is difficult. And at worst,",
			"your programs can be compromised, because someone can access memory that",
			"they shouldn't.",
			"So Python takes that feature away.",
			"Java also takes that feature away from programmers",
			"to protect you against yourself from screwing up, like you may have",
			"and should have in some number of times this past week.",
			"But it turns out, in Python there are solutions to these problems.",
			"And if you want to swap x and y, that's fine.",
			"Swap x and y.",
			"And so now if I run python of swap on this program, voila, boom,",
			"it's distilled into one other line.",
			"So even though they take something away from us that you can do a lot of damage",
			"with or make a lot of mistakes with, we can nonetheless",
			"hand you back a more powerful feature with this one liner for swap.",
			"And notice that it's x comma y on the left, but y comma x on the right.",
			"And that has the effect of doing what Brian",
			"did with the glasses of liquid of doing the switcheroo,",
			"even without a temporary variable explicitly there,",
			"though some magic is happening underneath the hood.",
			"Well, let's go ahead and implement a couple of final programs from week 4",
			"and then introduce a few of our own here in week 6.",
			"Let me go ahead and implement another phone book",
			"that this one's a little more persistent.",
			"Let me go ahead here and open-- create a file here called phonebook.csv.",
			"And let me go ahead and name this name comma number.",
			"So CSV file, recall, is like a very simple spreadsheet.",
			"And we're going to go ahead and just create that so I have it nearby.",
			"And then I'm going to create a new file called phonebook.py that's",
			"initially empty.",
			"And this time I'm going to do this.",
			"I'm going to import from cs50 the get_string function as before.",
			"But I'm also going to import a library called the CSV library.",
			"It turns out, Python comes with a whole lot of functionality related to CSV",
			"files to make your life easier and make it easier to do things with CSVs.",
			"Among the things I might want to do is this.",
			"Let me go ahead and open up that file, phonebook.csv, in append mode,",
			"similar to fopen two weeks ago.",
			"And let me go ahead and assign that to a variable called file.",
			"Then let me go ahead and just get a name from the user.",
			"So let me use get_string to get someone's name, \"Name\" here.",
			"Then let me go ahead and get-- use get_string again",
			"to get someone's number here, so using \"Number.\"",
			"And then lastly-- and this is the new code--",
			"let me save that name and number to a file.",
			"And recall from pset 4 that saving files and writing bytes out to files",
			"is pretty involved.",
			"Like, it probably took you a while to implement recover, or blur,",
			"any of those filters that involved creating new files.",
			"Turns out the CSV library makes this pretty easy.",
			"Let me go ahead and give myself what's called a writer.",
			"And I'm going to give myself the return value of calling csv.writer of file.",
			"So what is this doing?",
			"File, again, represents the file I'm trying to open.",
			"csv.writer is some function that comes with the CSV library.",
			"And it expects as input a file that you've already opened.",
			"And it kind of wraps that file with some fancier functionality",
			"that's going to make it way easier for me the programmer",
			"to write to that file.",
			"What am I going to do?",
			"I'm going to use that writer variable to write a row that specifically",
			"contains a name and a number.",
			"And I'm using a list, because if you think",
			"of a spreadsheet with columns and rows, a list is kind of the right idea.",
			"Each of the cells from left to right is kind of like a list.",
			"A row is like a list.",
			"So I'm going to deliberately use a list here.",
			"And then lastly, I'm going to close the file, just as I've done in the past.",
			"So it's a little cryptic here.",
			"But again, get_string-- get_string is old now.",
			"This is old now.",
			"So the only things that are new are importing the CSV.",
			"I'm opening this file in append mode, similar to what I did in C.",
			"And then these lines here involve wrapping the file with the CSV",
			"functionality, writing a row to this file with writerow,",
			"and then closing it.",
			"So let me go ahead and try this now.",
			"Let me open up a phonebook.csv, which for now only",
			"contains these headers which I created manually a moment ago.",
			"And let me go ahead and run this, python of phonebook.py.",
			"Let me go ahead and add Brian.",
			"And Brian will be +1-617-495-1000, Enter.",
			"And now let me go to my CSV file over here.",
			"Dammit, I screwed up.",
			"Pretend I didn't hit Enter there.",
			"Now it works.",
			"Let me go ahead now and do this again by input--",
			"I should have hit Enter when I created the file manually,",
			"but I screwed up on creating it.",
			"So let me wave my hand at that and convince you that I did this correctly",
			"in code by adding myself, David, +1-949-468-2750, Enter.",
			"Let me go back to my CSV file.",
			"And voila, now it's formatted correctly, because I did--",
			"writerow includes a line for me.",
			"And notice, too, if I download this file-- let me download phonebook.csv",
			"like I did in a past week.",
			"Let me download this to my own Mac.",
			"Let me open this CSV file.",
			"And whether you have Apple Numbers installed or Microsoft Excel,",
			"you'll open something that looks like this.",
			"And voila, I've dynamically created, using Python code now,",
			"my own sort of CSV file.",
			"And it turns out there's a way to tighten this up just a little bit.",
			"Not a big deal to do it the way I did, but it turns out",
			"that you can also open and close files a little differently.",
			"You can do this.",
			"With file-- with, rather, with open as file.",
			"Then I can indent all of this here, and I can get rid of my close line.",
			"So not a big deal to do it the way I did with open and close,",
			"but the way I've done this here is a little more Pythonic.",
			"This \"with\" keyword, which is not something analogous to anything",
			"we've seen in C, the with keyword, when you open a file,",
			"it will automatically close it for you eventually.",
			"So you might see that in some online references or other materials.",
			"But again, it just does that for you automatically.",
			"Well, let's go ahead and do this.",
			"I like the fact that we can now manipulate CSV.",
			"And it turns out that if you've ever used Google Forms--",
			"that's a very popular way of collecting data from users.",
			"In fact, let me go ahead and go to a URL which is going",
			"to show you a form like this here.",
			"Brian, if you wouldn't mind typing that into the chat, go to that you URL,",
			"cs50.ly.hogwarts.",
			"And if everyone wouldn't mind just playing along,",
			"just tell us what house you wish you were assigned to by the Sorting",
			"Hat in the world of Hogwarts.",
			"What house would you be in?",
			"Now, if you've used Google Forms before, you'll",
			"recall that you can see these results, certainly in the Google Form itself--",
			"and already 122 of you have buzzed in.",
			"And we could see a distribution and a graph and so forth.",
			"But what I want is not the distribution pictorially there.",
			"I'm going to go ahead and open up a spreadsheet.",
			"And so if you've never used Google Forms before, you can click a button,",
			"and then you can get a list of all of the responses",
			"that are coming in live right now.",
			"And by default, Google keeps track of the timestamp,",
			"when the form was submitted, and what house was actually used.",
			"So I'm going to go ahead now and do this.",
			"Let me go ahead and download that in another tab.",
			"Give me just a moment to do it on this screen here.",
			"I'm going to go ahead and download that CSV file onto my Mac",
			"locally, by going to File, Download, CSV.",
			"That's going to put it into my Downloads folder.",
			"And then I'm going to go ahead and upload this into my IDE",
			"by just dragging and dropping.",
			"Whoops, I have to open the file browser.",
			"I'm going to do this by dragging and dropping the file.",
			"All right.",
			"Now I have that file there.",
			"And let me go ahead now and make sure the file's there.",
			"I have this file called \"Sorting Hat Responses--",
			"Form Responses 1,\" and so forth.",
			"Well, let me go ahead and write a program now that manipulates this data,",
			"much like you might if running a student group that's",
			"collecting data in a Google Form, or you're just collecting information",
			"in general and have it in CSV format.",
			"How might you now tally up all of the results,",
			"especially if Google weren't just telling",
			"you graphically what the results were?",
			"Well, let me go ahead and write a program called hogwarts,",
			"which was not something that we've seen ever before in C. Let me go ahead",
			"and import this CSV library.",
			"Let me give myself initially a dictionary",
			"called houses that contains a whole bunch of keys,",
			"like \"Gryffindor\" with initial count of 0;",
			"\"Hufflepuff\" with an initial count of 0; \"Ravenclaw\" with an initial count of 0;",
			"and also, \"Slytherin\" with an initial count of 0.",
			"So notice, in a dictionary, or dict in Python,",
			"the keys and values don't need to be strings and strings.",
			"It can certainly be strings and numbers.",
			"Because I'm going to use this dictionary ultimately to keep",
			"count of all of the votes for one house or another.",
			"So let me go ahead and do this.",
			"Let me go ahead and open up with open the Sorting Hat File--",
			"Form Responses 1.csv\"-- long filename, but that's the default from Google--",
			"as file.",
			"So I'm going to use my one liner instead of having to open and close.",
			"I'm going to give myself this time a reader, which we did not see before.",
			"CSV library has a reader function that allows",
			"me to read a CSV file automatically.",
			"I'm going to go ahead and skip the first row.",
			"Next is a function that just skips the first row,",
			"because recall that that one is just timestamp and house, which",
			"I do want to ignore.",
			"I want the real data from you all.",
			"And here's what's cool about CSVs in Python.",
			"I can-- if I want to iterate over all of the rows that are in that spreadsheet,",
			"I can do for row in reader.",
			"And now, let me go ahead and get at, for instance, the house in question.",
			"So the house in a given row is going to be the row's first entry, 0 indexed.",
			"So what is going on here?",
			"Well, let me go back to the Google spreadsheet a moment ago.",
			"And in the Google spreadsheet, there's two columns.",
			"And the way the CSV reader works is it returns to you one row at a time--",
			"and that's conceptually pretty straightforward.",
			"It maps perfectly to the idea of a spreadsheet.",
			"But each row is returned to you as a list, a list in this case of size 2.",
			"So row bracket 0 would give me a given timestamp, row bracket",
			"1 would give me a given house name.",
			"So that's why here in the IDE, I'm going ahead and declaring a variable called",
			"house, and I'm assigning it equal to row bracket 1, because I",
			"don't care about the timestamp.",
			"We all just did this roughly at the same time.",
			"But now that I have the house, I can now index into the dictionary, just",
			"like in C you could index into an array using a number.",
			"But in a dictionary, I can use strings.",
			"So I'm going to go ahead and say, go into the houses dictionary, which",
			"I defined up above, and go to the house key, and go ahead",
			"and increment it by 1.",
			"And that's it.",
			"At this point, I have opened the CSV file and read it using the library.",
			"In this loop, I'm iterating over every row in the spreadsheet",
			"that you all created by filling out that form again and again.",
			"I'm just using a variable to get at whatever's",
			"in the second column, otherwise known as row bracket 1,",
			"because row bracket 0 would be the timestamp.",
			"And then I'm going into the dictionary called",
			"houses, which we defined up here.",
			"I'm indexing into it just like an array, but it's a list in this case,",
			"using its house name, which looks up the appropriate key.",
			"And then plus equals 1 has the effect of incrementing its value.",
			"So it's a nice way of going into the dictionary and incrementing.",
			"Go in and increment.",
			"So now let's go ahead at the very end here and just print out the result.",
			"\"For house in houses\" is the fancy way to iterate over",
			"all of the keys in a dictionary, go ahead and print out a formatted string",
			"as follows.",
			"Let me print out the house name followed by a colon followed by the houses",
			"dictionary, indexing into it with house.",
			"So again, cryptic.",
			"We'll come back to this in a second.",
			"Python of hogwarts.",
			"Let me cross my fingers that I didn't screw this up.",
			"And I did.",
			"The IDE knew before I did.",
			"All right.",
			"Now let me hope that I didn't screw this up-- and dammit.",
			"All right.",
			"The file is called something slightly different.",
			"Google's name must have changed, sorry, versus when I practiced.",
			"Let me copy this.",
			"So close.",
			"Sorting hat responses.",
			"Ah, it has parentheses which I forgot.",
			"All right.",
			"Now let me cross my fingers, rerun the program, dammit.",
			"OK, no such file or--",
			"oh, I forgot the csv, dot csv.",
			"OK.",
			"Now cross fingers and--",
			"oh, thank God.",
			"OK so Gryffindor, not surprisingly, the most popular house.",
			"Hufflepuff at 40, Ravenclaw at 71, Slytherin-- oh, beat out Hufflepuff.",
			"Very interesting for whatever sociological reason.",
			"But here we have a program now that analyzed the CSV.",
			"Now, we happened to do it with silly Harry Potter data.",
			"But again, imagine collecting any data you want from users,",
			"downloading it as a CSV to your Mac or PC or your IDE,",
			"then writing code that analyzes that data however you want.",
			"I did a very simple summation, but you could certainly",
			"imagine doing something fancier than that,",
			"like doing summations or averages, standard deviations.",
			"All of that functionality could we get as well.",
			"All right, any questions on dictionaries before we now",
			"offer up some of the most powerful features we've yet",
			"seen in a programming language?",
			"",
			"Anything at all on your end, Brian?",
			"BRIAN: No hands raised here.",
			"DAVID MALAN: All right.",
			"Well, let me go ahead now, and I'm going to transition actually",
			"to my Mac where I have in advance pre-installed Python,",
			"just so that I can do things locally.",
			"It will make things a little faster.",
			"I don't have to worry about internet speeds and the like.",
			"And this is indeed the case, that on your own Mac, your own PC,",
			"you can download and install the Python interpreter,",
			"run it on your own Mac and PC.",
			"However, I would recommend you continue using this IDE,",
			"certainly for problem sets' sake until the end of the semester,",
			"maybe transitioning to your Mac or PC for final projects",
			"only, only because what I did this weekend was spent--",
			"waste a huge amount of time just getting stupid libraries to work",
			"on my own Mac, which is often easier said than done,",
			"just because when programmers are writing code that's supposed to work",
			"on every possible Mac and PC in the world, you and I and everyone else",
			"have slightly different version numbers, different software install,",
			"different incompatibilities.",
			"So those kinds of headaches very quickly arise when you're doing things locally.",
			"So let me encourage you to wait until terms end with final projects,",
			"perhaps, to move off of the IDE and do what",
			"I'm about to now do, just because you'll be able to see these demos more",
			"clearly here.",
			"I'm going to go ahead, and on my own Mac,",
			"I'm going to go ahead and create a program called speech.py.",
			"In advance, I've installed a library that supports speech synthesis.",
			"And if I want access to that functionality,",
			"it suffices to import pyttsx3, which is the name of that person's open source",
			"free library that I downloaded and installed on my Mac in advance.",
			"I read the documentation.",
			"I literally never used this before this past week.",
			"And I found that I can declare a variable called engine, for instance.",
			"I can then call pyttsx3.init to initialize the library.",
			"Why?",
			"That's just because of how the programmer designed it.",
			"You have to initialize it first.",
			"I then can use that engine to say things like, say, \"hello,\" comma \"world.\"",
			"Then after that, I should run the engine and wait for it",
			"to finish before my own program quits.",
			"All right.",
			"Let me go ahead now and close that, and run python of speech.py on my own Mac",
			"here.",
			"COMPUTER VOICE: Hello, world.",
			"DAVID MALAN: Interesting.",
			"So it said what I typed in.",
			"And indeed, I can probably make this even more interesting.",
			"Let me go ahead and say something like this.",
			"Let me open up speech.py again and add some functionality.",
			"I won't use the CS50 library, but I will use maybe the input function.",
			"Let me go ahead and say name gets input, \"What's your name,\" question mark.",
			"And then let me go ahead and say, not \"hello, world,\"",
			"but let me use an f-string--",
			"which doesn't have to be used in print, you",
			"can use it in any function that takes a string.",
			"Let me go ahead and say \"hello\" to that name.",
			"All right.",
			"Let me go ahead and run python speech.py again.",
			"Oops.",
			"Let me go ahead and run python of speech.py again.",
			"What's my name?",
			"David.",
			"COMPUTER VOICE: Hello, David.",
			"DAVID MALAN: Weird choice of inflection, but indeed it synthesized it.",
			"Let's try Brian.",
			"COMPUTER VOICE: Hello, Brian.",
			"DAVID MALAN: OK.",
			"So we could probably tinker with the settings",
			"to make the voice sound a little more natural.",
			"But that's pretty cool.",
			"Well, let me go into some code I wrote in advance this time using",
			"a different library, this one related to faces and facial detection.",
			"Certainly very much in vogue when it comes to social media",
			"these days, with Facebook and other websites automatically tagging you,",
			"very concerning increasingly with state governments and federal governments",
			"and law enforcement using facial detection to find people in a crowd.",
			"And let me go ahead and open up a file here, for instance,",
			"a little more benignly, like a whole bunch of people in an office.",
			"So here is a photograph of some people in an office.",
			"And there's a lot of faces there.",
			"But there's a lot of boxes of paper and other distractions besides those faces.",
			"But let me go ahead and look at, quickly, a program called detect.py.",
			"Most of this file is comments, just so that if you want at home",
			"you can follow along and see what it does.",
			"But let me just highlight a few salient lines.",
			"Here is that Pillow library again, where I'm",
			"accessing image related functionality from a pre-installed Python function.",
			"And this one's just kind of amazing.",
			"If you want to use facial recognition technology,",
			"just import face_recognition.",
			"That is a library you can import that will give you access",
			"to that kind of power.",
			"Down here now, I only knew how to figure this out by reading some documentation,",
			"but you access the library called face_recognition.load_image_file,",
			"which is a function that does what it means.",
			"I'm opening up office.jpg.",
			"And then scrolling down here to the white code, which is the actual code--",
			"all of the blue is comments, recall--",
			"this line of code here is all that's required in Python",
			"to use the face recognition library, find all of the face locations",
			"in a given image, and store them in a list called face_locations.",
			"This line of code here is just a Python loop",
			"that iterates over every face in the faces that were detected.",
			"And then these several lines of code here, long story short,",
			"just crop out individual faces and create a new image with the found",
			"faces.",
			"So without getting too much into the details of the library, which are not",
			"that intellectually interesting, the features are interesting to us for now,",
			"let me run python of detect.py.",
			"Let me give my Mac a few seconds here to do its thing.",
			"And voila, if I zoom in here we see Phyllis, and Jim,",
			"and Roy, and pretty much every other face that",
			"was detected in that photograph, cropped out as, indeed, an individual face.",
			"So if you've ever noticed a little square on yourself",
			"in Facebook when uploading a photo, this is exactly the kind of code",
			"that Facebook and others are using on their servers in order to execute that.",
			"Well, you know what, how about this?",
			"In the same office photo, you know, there's",
			"one person that always seems to stand out.",
			"No one really likes him.",
			"And that's Toby.",
			"What if we had a mug shot of Toby in a separate file like this?",
			"Can we find Toby in a crowd among these people in the office?",
			"Well, we can.",
			"Let me go ahead now and run a program called recognize.py,",
			"which you're welcome to look at online.",
			"It's similar lines of code, It's not terribly many,",
			"that is going to do some thinking.",
			"It's opening up both the office JPEG and this one.",
			"And notice what just happened, if I zoom in,",
			"wonderfully, Toby is the only one with a big green box around his face,",
			"having indeed been recognized.",
			"So again, I'll just glance at the code.",
			"This time, if I open up recognize.py, it's a few more lines of code.",
			"But again, I'm importing face recognition and some other things.",
			"I'm loading toby.jpg.",
			"And I'm loading office.jpg.",
			"And then there's some more code here that's looking for Toby,",
			"looking for Toby, and then drawing a big green box around the face that",
			"is ultimately found.",
			"So again, at the end of the day, it's just loops.",
			"It's just functions.",
			"It's just variables.",
			"But now the functions are pretty darn fancy and powerful,",
			"because again, they're taking advantage of all of these other features",
			"that we ourselves have implemented in a language like C,",
			"or have now seen glimpses of within the world of Python.",
			"Well, let's do another one.",
			"Let me go ahead and open up real quickly a program",
			"that will allow me to create one of these 2D barcodes, a so-called QR code.",
			"Let me go ahead and create a file called qr.py And in this file, let me go ahead",
			"and do this.",
			"Import the operating system library, for reasons",
			"we'll soon see, and let me import the QR code library, which",
			"will do all of the hard work for me.",
			"Let me go ahead and create an image called qr--",
			"that's assigned the value of qrcode making.",
			"And let me paste in this URL of one of the course's lecture videos,",
			"for instance.",
			"And then let me go ahead and save this image as qr.png, Portable Network",
			"Graphic, as indeed a PNG, a very popular file format",
			"for photos and other things.",
			"And then let me actually open this thing up.",
			"Open up system-- actually, nope, that's fine.",
			"Let me keep it simple.",
			"We don't need the os library.",
			"Nope, we do.",
			"Let's go ahead and open it up with \"open qr.png.\"",
			"So three lines of code--",
			"make a QR code with that URL, save it as qr.png, and open the file.",
			"Three lines of code.",
			"Let me go ahead and run python of qr.py.",
			"Voila, it was pretty fast.",
			"If you would like to take out your own iPhone or Android phone,",
			"turn on the camera if your phone supports this,",
			"and scan this 3D barcode by awkwardly just pointing your phone at the lecture",
			"as we speak, it should open up YouTube for you, hopefully, and with such is--",
			"I apologize to those-- yes, thank you for showing me what you're not seeing.",
			"I apologize for doing that yet again.",
			"Never gets old.",
			"But all we've done is embed in a two-dimensional format, details",
			"of which we won't go into in class, a URL,",
			"which suggests that you can store anything inside of these 2D barcodes,",
			"and if you decode them with something like your camera can",
			"the software running on your phones these days decode these things for you.",
			"Well, let me do something else, this time involving another sense, this one",
			"listening.",
			"Let me go into a file called listen.py.",
			"And let me go ahead and do something very simple.",
			"Let me go ahead and get a user's input in a variable called word",
			"by using the input function.",
			"Say something.",
			"And then let me just send it all to lowercase, just to keep things simple.",
			"And now let me do this.",
			"Once I get the user's words, let me go ahead and say,",
			"if the word \"hello\" is in their words, go ahead and print out \"Hello to you",
			"too!\"",
			"So if they say hello, I want to say hello back.",
			"Elif, \"how are you\" in words, then let me go ahead and print out something",
			"like, \"I am well, thanks,\" as the computer.",
			"Elif \"goodbye\" in words, then let me go ahead and say something reasonable",
			"like \"Goodbye to you too.\"",
			"And then lastly, else let me go ahead and print out",
			"just something like \"Huh?\"",
			"Unrecognized.",
			"So if you will, here is the beginnings of an artificial intelligence, an AI--",
			"a program that's going to somehow interact with me the human typing",
			"in phrases to this thing.",
			"So if I did it correctly, let me go ahead and run python of listen.py.",
			"I did not do something correctly.",
			"Oh, not \"is,\" \"in.\"",
			"OK, sorry.",
			"Let me go ahead and run python of listen.py.",
			"Say something.",
			"I'll say \"hello.\"",
			"Oh, Hello to you too.",
			"What a nice friendly program.",
			"Let me ask it how it is, \"how are you,\" question mark.",
			"It seems to detect that.",
			"Let me go ahead and say, \"ok goodbye for now.\"",
			"And it detects that, too, because \"goodbye\" is in the phrase",
			"that the user typed in.",
			"But if I say something like, \"hey there,\" it's not recognized.",
			"So pretty cool.",
			"We can use very simple string comparisons using the in preposition",
			"to detect things.",
			"But I bet-- you know, I bet if we use the right library,",
			"we can really make this more powerful, too.",
			"Let me go ahead, and just like I imported facial recognition,",
			"let me import speech recognition in Python, which is yet another library",
			"that I pre-installed.",
			"Let me go ahead and now do this, recognizer equals",
			"speech_recognition.Recognizer.",
			"",
			"And this is just creating a variable called recognizer",
			"by my having followed literally the documentation for using this library.",
			"Then let me go ahead and do this, also from the documentation,",
			"with speech_recognition.Microphone as source.",
			"So this is opening up my microphone in some sense,",
			"again just following the documentation.",
			"Let me go ahead and say \"Say something\" to the user.",
			"And then after that, let me go ahead and declare",
			"a variable called audio, set it equal to the recognizer's listen function,",
			"passing in my microphone as the source.",
			"And now down here, let me go ahead and say print out \"You said,\"",
			"and below that I will print out recognizer.recognize,",
			"is the hardest part today so far for some reason, google audio.",
			"All right.",
			"So what's going on?",
			"This line of code-- these lines of code here",
			"are opening up a connection to my microphone on my Mac.",
			"It's then using the speech recognition library to listen to my microphone,",
			"and storing the audio from my microphone in a variable called audio.",
			"These lines of code down here are literally printing,",
			"\"You said,\" and then it's passing to the, the google.com, the file of audio",
			"that I just recorded on my microphone, and it's printing out",
			"whatever comes back from Google.",
			"So let's see what comes out, again, crossing",
			"my fingers that I didn't mess up.",
			"Python of listen.",
			"Hello, world.",
			"",
			"Hoo.",
			"How are you?",
			"It's a pretty good speech recognition.",
			"It's using the cloud, so to speak.",
			"It's passing it up to Google.",
			"But now let's make things a little fancier",
			"and actually respond to the human.",
			"So let me go back into here and add back some of the previous logic",
			"and say something like this.",
			"If \"hello\" in words, then go ahead and print out, like before,",
			"\"Hello to you too.\"",
			"Elif \"how are you\" in the words that have come back from Google,",
			"go ahead and print out \"I am well, thanks!\"",
			"And down here if I said \"goodbye\" in words,",
			"then go ahead and print out \"Goodbye to you too!\"",
			"Else if nothing comes back that I recognize, let's just print out \"Huh?\"",
			"So if I did this right, let's now go ahead and let's do python of listen.py.",
			"Hello, there.",
			"Oh, dammit.",
			"OK, standby.",
			"Da-da-da.",
			"Oh, sorry.",
			"",
			"Let me do a find and replace.",
			"I called the variable \"words\" instead of \"audio.\"",
			"And I just executed a fancy command to replace it everywhere.",
			"So \"audio\" is what I meant to say this time.",
			"Now, let's go ahead and run this, python of listen.py.",
			"Hello, world.",
			"Dammit.",
			"AudioData is not iterable.",
			"This is a bug.",
			"Give me one second to double check my notes.",
			"Very sorry to disappoint.",
			"The audio in-- oh, I did--",
			"sorry.",
			"I did it right the first time but the wrong way.",
			"Let me change my variable back to words.",
			"OK.",
			"What I forgot to do was call one line of code here",
			"that's literally sitting in front of me.",
			"I need to convert the recognizer's return value, recognize_google audio.",
			"I need to store the return value of passing the audio to Google",
			"and storing the resulting text here.",
			"And so I have re-stored, using the words variable here.",
			"All right now let me go ahead and run python of listen.py.",
			"Hello, there.",
			"Very nice.",
			"How are you today?",
			"",
			"Cool.",
			"OK, goodbye.",
			"",
			"All right.",
			"So there we have an even more compelling artificial intelligence.",
			"Granted, it's not that intelligent, it's just looking for preordained strings.",
			"But I bet we can do something even more.",
			"And in fact, let me go ahead and step inside, and see if a colleague of mine",
			"can't help do something in real time.",
			"On a big fancy PC here in the theater, we",
			"are running some other Python program on a CPU",
			"that's fast enough to do this in real time.",
			"And we've connected one of our cameras to that PC,",
			"so that what you're about to see is the result of one of our cameras being",
			"wired into this PC, running that camera's input into Python software",
			"running on that PC.",
			"And we have trained the PC, using this Python software,",
			"to recognize certain images in the past.",
			"And let's see if we can't do this as well.",
			"Brian, would you mind putting me on screen 1?",
			"And Rongxin, do you want to go ahead and load up our first guest?",
			"I think we are live.",
			"So again, you see my mouth moving in lock step with Einstein here.",
			"His lips are matching mine.",
			"His head movements are moving--",
			"matching mine.",
			"We can even be inquisitive.",
			"If my eyebrows go up, move my mouth this way, this way.",
			"And you can see that the Python program in real time",
			"is mapping my facial movements onto someone else's face, of course",
			"otherwise known as a deep fake.",
			"Rongxin, could we try out Brian's photo instead?",
			"",
			"Here now we have Brian who similarly is matching big smile.",
			"Gets a little fake at some point.",
			"But again, if we pre-rendered all of this instead of doing it live,",
			"the PC could probably do an even better job.",
			"How about could, we invite Harvard president Larry Bacow to join us,",
			"Rongxin?",
			"",
			"This is CS50, Harvard University's introduction",
			"to the intellectual enterprises of computer science",
			"and the art of programming.",
			"How about President Peter Salovey from Yale, Rongxin?",
			"",
			"This is CS50, Yale University's introduction",
			"to the intellectual enterprises of computer science",
			"and the art of programming.",
			"Now at this point, the real-world implications of this",
			"should be getting increasingly clear.",
			"While it's all fun and games to do this on Instagram, in TikTok and the like,",
			"using various mobile applications these days,",
			"which are essentially doing the same thing--",
			"and you can see the image doesn't quite keep up",
			"with me if I start moving a little too quickly right now--",
			"this is very real-world implications in the world of politics, government,",
			"business, and really just the real world more generally,",
			"because I'm essentially putting in someone else's mouth my own words.",
			"And while it's clear that these examples thus far aren't really that",
			"compelling-- if I start to move too much,",
			"you see that things start to get out of sync--",
			"just imagine that if we wait one year, our computers",
			"are going to be twice as fast with even more memory and the like.",
			"Software is only getting better and more powerful,",
			"the libraries and the artificial intelligence is getting more trained.",
			"And so among the themes for the coming weeks of the class",
			"is not just how to do some things with technology",
			"and how to write code, but frankly asking the much bigger, more",
			"important picture question of should you do certain things with technology,",
			"and should you actually write such code.",
			"We did ask President Salovey and President Bacow for their permission",
			"in advance to spoof them in this way.",
			"But we thought we would more playfully end",
			"with just a couple of other examples that you perhaps",
			"see on Instagram, TikTok, and the like.",
			"Rongxin, could we invite Pam to join us first?",
			"",
			"And how about a certain Jim?",
			"",
			"All right.",
			"That's it for CS50 and Python today.",
			"We'll see you next time.",
			"[MUSIC PLAYING]",
			""
		],
		"is_youtube": false
	},
	"video_033": {
		"section": "CS50x 2021",
		"subsection": "Week 6",
		"unit": "Shorts",
		"video_sources": [
			"https://edx-video.net/HARCS50X2016-V041100_DTH.mp4",
			"https://edx-video.net/HARCS50X2016-V041100/HARCS50X2016-V041100.m3u8"
		],
		"video_duration": 2340,
		"speech_period": [
			0.024, 2.916, 2.541, 1.542, 2.916, 2.721, 2.19, 2.31, 2.833, 1.757, 3.011,
			0.499, 3.48, 1.5, 2.28, 4.45, 3.56, 2.21, 2.44, 2.687, 1.583, 2.75, 3.49,
			1.82, 1.5, 4.05, 1.88, 2.68, 4.646, 3.124, 2.46, 3.427, 2.458, 2.575,
			1.986, 2.124, 5.07, 4.755, 2.805, 3.27, 2.586, 2.124, 4.71, 1.08, 2.82,
			2.68, 2.004, 1.916, 3.6, 3.0, 3.54, 2.34, 2.307, 2.583, 5.006, 3.124,
			2.434, 2.666, 2.31, 4.05, 2.79, 1.958, 2.092, 3.18, 2.91, 2.97, 4.53,
			4.35, 3.49, 4.22, 2.67, 3.12, 1.8, 2.14, 4.31, 4.02, 2.645, 4.272, 0.833,
			3.002, 2.208, 3.422, 1.708, 4.395, 1.875, 3.39, 4.469, 3.041, 2.25, 2.913,
			1.916, 3.511, 2.864, 1.666, 2.5, 4.98, 3.28, 4.06, 5.72, 3.49, 1.12, 4.2,
			2.4, 3.48, 3.43, 1.85, 4.679, 2.791, 5.91, 0.87, 1.958, 1.852, 1.32, 1.95,
			1.75, 2.45, 4.92, 6.914, 2.166, 4.26, 5.01, 2.34, 4.08, 3.57, 3.945,
			3.137, 3.208, 3.9, 3.27, 4.98, 3.27, 1.38, 2.13, 3.8, 2.75, 1.36, 1.76,
			2.88, 1.562, 2.458, 4.14, 3.12, 2.53, 4.28, 2.292, 1.041, 2.247, 1.6,
			2.92, 2.17, 2.04, 3.69, 2.22, 1.3, 2.9, 4.781, 0.499, 1.44, 1.458, 4.602,
			2.23, 1.01, 2.742, 2.208, 2.79, 1.98, 3.13, 2.33, 4.076, 1.624, 3.953,
			2.307, 3.19, 2.55, 1.583, 1.867, 2.25, 1.83, 2.88, 3.745, 2.635, 2.83,
			3.27, 1.809, 2.166, 4.845, 3.24, 1.83, 3.02, 3.41, 1.456, 2.374, 1.333,
			4.336, 2.041, 2.97, 4.68, 2.46, 4.11, 2.814, 2.916, 2.43, 1.984, 2.666,
			2.43, 2.55, 1.849, 1.791, 3.86, 3.42, 2.73, 3.39, 3.16, 4.78, 2.73, 1.32,
			1.98, 2.43, 3.597, 1.833, 4.41, 0.72, 3.24, 2.7, 2.1, 3.6, 2.19, 1.35,
			4.02, 2.4, 3.09, 1.83, 4.29, 1.36, 2.99, 1.196, 2.374, 2.711, 0.499,
			0.499, 3.241, 2.92, 3.69, 2.76, 4.74, 3.0, 1.81, 1.75, 4.0, 2.382, 2.958,
			4.46, 3.25, 3.24, 3.61, 4.22, 3.63, 3.06, 2.07, 5.38, 3.21, 1.91, 2.782,
			2.708, 3.4, 2.99, 1.977, 1.083, 2.15, 2.74, 2.4, 2.74, 3.92, 2.58, 2.55,
			2.457, 1.083, 3.96, 2.58, 4.71, 3.54, 1.379, 2.041, 3.37, 3.33, 3.86,
			2.34, 5.224, 2.666, 5.13, 2.4, 2.08, 3.32, 5.73, 2.81, 3.76, 3.66, 3.906,
			2.124, 4.9, 4.062, 1.458, 2.96, 3.67, 2.94, 2.34, 2.27, 2.02, 3.24, 5.43,
			4.44, 4.42, 3.407, 2.083, 2.01, 2.7, 3.14, 3.25, 2.61, 4.0, 2.57, 1.83,
			1.54, 2.33, 1.71, 5.01, 2.8, 2.06, 3.34, 5.27, 1.59, 3.0, 5.34, 3.932,
			2.458, 5.74, 1.97, 3.24, 2.85, 7.799, 2.041, 3.28, 7.64, 1.41, 2.17, 5.12,
			1.47, 2.58, 5.34, 3.21, 4.67, 4.656, 3.124, 3.64, 2.456, 1.374, 2.849,
			2.48, 1.75, 4.711, 3.57, 1.5, 3.01, 1.74, 2.12, 2.66, 6.07, 2.91, 3.04,
			2.24, 2.7, 2.541, 1.299, 2.999, 3.451, 3.49, 1.76, 4.312, 0.958, 2.23,
			2.01, 3.45, 2.36, 2.18, 2.719, 2.291, 1.545, 5.272, 2.083, 2.56, 2.4, 3.9,
			2.28, 2.22, 2.82, 4.68, 4.05, 5.85, 4.84, 2.62, 1.0, 2.1, 2.91, 4.53,
			2.04, 2.61, 3.87, 3.87, 4.652, 1.708, 1.92, 3.03, 4.35, 5.64, 3.45, 5.34,
			4.2, 1.65, 3.54, 2.04, 4.21, 4.02, 3.08, 3.05, 2.26, 4.822, 1.708, 2.06,
			2.5, 2.125, 2.525, 2.46, 1.47, 1.35, 3.124, 1.986, 5.09, 5.59, 3.95,
			5.397, 1.083, 2.208, 1.722, 4.86, 3.0, 5.74, 3.23, 1.65, 4.8, 2.88, 2.25,
			4.11, 4.86, 3.3, 2.4, 1.71, 3.03, 1.74, 4.59, 3.78, 2.79, 1.48, 1.32,
			5.749, 0.541, 1.63, 2.416, 2.074, 3.407, 2.833, 3.39, 3.54, 1.93, 2.01,
			1.115, 2.435, 2.48, 2.96, 2.4, 3.45, 2.58, 2.63, 1.75, 2.79, 4.0, 3.05,
			3.704, 2.416, 1.333, 0.977, 3.12, 3.09, 4.47, 2.22, 2.706, 1.374, 2.64,
			3.24, 5.27, 2.754, 2.166, 2.13, 2.37, 3.98, 1.75, 5.52, 2.94, 2.583,
			1.767, 1.98, 1.71, 6.1, 3.08, 2.17, 3.53, 2.16, 3.82, 3.5, 1.797, 1.833,
			2.37, 1.88, 1.914, 2.416, 2.69, 4.72, 3.94, 1.762, 1.708, 3.06, 1.26,
			3.06, 3.252, 2.208, 2.1, 4.11, 3.384, 1.916, 3.19, 5.07, 4.366, 1.624,
			4.51, 5.64, 2.071, 2.249, 1.53, 1.958, 1.942, 1.74, 2.124, 1.206, 1.96,
			2.33, 5.82, 1.09, 0.93, 3.32, 3.66, 1.08, 2.067, 2.583, 2.234, 0.916,
			2.715, 2.0, 3.004, 1.791, 4.856, 2.804, 1.71, 3.66, 2.67, 4.83, 3.69,
			3.51, 0.966, 3.124, 4.8, 3.98, 4.98, 1.62, 4.05, 0.95, 2.98, 2.94, 3.09,
			5.06, 1.36, 5.01, 3.6, 4.5, 2.28, 3.06, 1.77, 4.897, 2.708, 4.925, 3.73,
			1.05, 4.71, 4.68, 3.727, 2.333, 2.58, 3.18, 3.01, 3.92, 0.96, 2.29, 6.47,
			1.74, 4.12, 1.46, 2.291, 3.499, 3.15, 1.79, 2.97, 3.36, 2.82, 3.81, 3.0,
			2.04, 3.15, 3.6, 3.18, 4.02, 2.85, 3.33, 3.62, 2.24, 3.28, 2.99, 3.07,
			3.03, 5.3, 3.654, 2.916, 0.63, 4.32, 3.46, 2.9, 4.23, 3.32, 3.27, 3.37,
			2.75, 2.17, 6.09, 5.18, 2.252, 3.208, 3.63, 1.72, 2.78, 4.322, 2.458,
			2.91, 2.34, 2.55, 4.937, 3.333, 4.08, 5.52, 2.29, 2.19, 3.72, 3.792,
			2.458, 2.36, 1.59, 2.7, 4.79, 3.65, 3.811, 1.999, 4.56, 3.82, 1.04, 3.9,
			1.78, 1.25, 2.73, 4.5, 2.52, 4.23, 1.909, 1.541, 3.71, 1.45, 4.799, 2.041,
			5.399, 3.961, 2.38, 1.026, 2.624, 2.339, 4.351, 3.42, 3.54, 4.56, 4.26,
			2.69, 2.242, 2.958, 0.879, 3.27, 3.681, 2.22, 2.76, 2.97, 4.881, 2.349,
			2.09, 2.47, 4.59, 2.46, 2.61, 1.291, 2.879, 2.61, 1.73, 1.33, 5.04, 3.03,
			3.24, 5.34, 6.01, 4.46, 3.66, 2.89, 2.97, 1.96, 3.35, 2.27, 2.91, 3.87,
			1.92, 4.08, 1.75, 3.62, 5.14, 2.75, 4.766, 1.624, 6.83, 2.05, 6.46, 4.14,
			3.377, 0.833, 5.06, 2.28, 2.262, 2.958, 2.749, 1.901, 2.73, 3.93, 3.15,
			5.34, 4.59, 4.08, 2.46, 4.59, 4.89, 2.55, 3.23, 3.97, 3.72, 4.59, 3.122,
			2.958, 4.13, 2.75, 3.442, 2.958, 2.5, 3.17, 1.226
		],
		"transcript_en": [
			"",
			"DOUG LLOYD: As we continue to put C in the rear view mirror behind us,",
			"I wanted to now introduce you to another programming language",
			"that we'll use a lot in CS50, Python.",
			"Now, of course we're not going to be able to cover Python in nearly as",
			"much depth as we spent in those 30 or so videos we spent",
			"talking about C in prior weeks, but the goal here",
			"is really to give you an introduction to the language",
			"so you can see some of the tools it has and figure out how you might",
			"want to use them best on your own.",
			"Now, Python is an example of a pretty commonly used modern programming",
			"language.",
			"It's probably in the top five or six at the time this video is being recorded.",
			"It's been around though for a while.",
			"It's been around for over 25 years, and it's really",
			"a great language choice for making some complex operations in C a lot easier.",
			"So you may recall working with C that string manipulation",
			"can be really challenging.",
			"And it also simplifies things like networking",
			"and really it's a general purpose utility language",
			"that you can use to do a lot of stuff.",
			"It's also very popular right now among data scientists",
			"for processing large sets of data and generating graphs, charts,",
			"and results from that.",
			"There is some good news too as well.",
			"So Python is pretty inspired by C as a lot of modern programming languages",
			"are honestly.",
			"And its syntax is going to look a little bit different,",
			"but it has some pretty consistent look and feel things to it.",
			"You're not going to see as many curly braces or anything like that that you",
			"didn't in C, but hopefully some of the style",
			"lessons that you learned along the way will come in handy for you here.",
			"To start writing a Python file it's pretty straightforward.",
			"All you've got to do is open up a file with the dot py",
			"file extension inside of CS50 IDE.",
			"That will automatically syntax highlight it for you",
			"and show you that what you're typing is proper valid Python or not.",
			"But unlike C, Python is not a compiled language.",
			"Or it is not necessarily a compiled language.",
			"Python programs can be run in a Python interpreter.",
			"This is similar to PHP if you're familiar with that language",
			"as well where you can just write your lines of code",
			"and have the computer just run through them one by one executing as you go.",
			"",
			"Python programs can work in exactly the same way.",
			"One really important caveat before we dive into this.",
			"In CS50, we teach Python 3.",
			"There are actually two pretty popular versions",
			"of Python, Python 2 and Python 3.",
			"So all the syntax and everything we're going to talk about in this video",
			"is Python 3 specific, and in general, if you're",
			"looking up documentation on your own trying",
			"to figure out how to use a Python function",
			"or figure out if there's a Python function that does something",
			"you're looking to do, be sure to include Python 3 in your search",
			"instead of just saying Python, because you might get Python 2 results which",
			"would not necessarily work.",
			"So let's go through some of the basic things that we can do in C",
			"and show you how we can do them in Python.",
			"So variables have two big differences from C.",
			"We don't have to specify a type anymore so that's pretty cool.",
			"And we can declare them only by initialization.",
			"So you may recall in C that we could declare",
			"a variable by sayings for example int x semicolon,",
			"but not actually assign a value to it, not initialize it.",
			"In Python, we can only declare variables by initializing them.",
			"So where in C we might say something like this, int x equals 54 semicolon.",
			"In Python, we just say x equals 54 and that creates a new variable for us",
			"in Python called x and assigns it the value 54.",
			"And notice here, Python statements don't need to end with semicolons.",
			"So that might be a nice thing if you're the kind of person who",
			"like me oftentimes will forget to put a semicolon at the end of a line.",
			"In Python you don't need to include them.",
			"You can include them and it won't have a problem,",
			"but you can also omit them to make your code look a little bit cleaner.",
			"Similarly, can we declare the following, string phrase equals this is CS50,",
			"and to do this in C we would have to pound include",
			"the CS50 library because string is not a native data type in C.",
			"But it is in Python.",
			"We can just say, phrase equals this is CS50.",
			"And in fact, we don't even have to use double quotes.",
			"Python actually support strings with double quotes or single quotes.",
			"And this is actually really useful if you",
			"need to declare a string that has quotation marks in it,",
			"you can just kind of alternate back and forth",
			"between using single quotes on the outside, double quotes on the inside,",
			"single quotes inside of that, and so on, and that's actually kind of useful",
			"if you're the kind of person who's working with a lot of text for example",
			"in particular with databases.",
			"The conditional statements from C are all available for you to use,",
			"but they might look a teeny bit different now.",
			"So whereas in C we might say something like this, if y is less than 43,",
			"or z equals equals 15, and then we have some code.",
			"That's not what it looks like in Python.",
			"It looks a little something like this.",
			"If y is less than 43 or literally using the word or now,",
			"not using two vertical bars, because in Python we can do that.",
			"Or z equals 15 colon, instead of open curly brace",
			"and then whatever code we have close curly brace and then some code below.",
			"In Python, all comments are introduced with the pound sign or hash",
			"mark like this.",
			"So this basically just indicates that this is a comment.",
			"So here's an if else statement that might be familiar",
			"with from C. In Python, it's going to look pretty similar.",
			"Again, it looks just like this where we now--",
			"well actually, we have and here.",
			"So previously in C we have if y is less than 43 and z is equal to 15.",
			"In Python, just like where or was translated from two vertical bars",
			"to the word or, in Python we've translated two ampersands",
			"to the word and.",
			"So we don't have to use two ampersands anymore,",
			"we can just literally say the word and.",
			"Then we have the else there.",
			"The else is not that big of a difference.",
			"This one is a little bit different though.",
			"So if course number equals 50 we do one thing.",
			"Else if course number is not equal to 51 we do something else.",
			"In Python, we don't have else if, we have elif, not elseif.",
			"But otherwise it's going to behave exactly the same.",
			"So just again, trying to cut a couple of characters out of what we have to type.",
			"And again, instead of using course num not equal to 51, we can do elif",
			"not course num equals 51.",
			"Again, it's a little bit of a twist, but we can again use these English words.",
			"We're not having to use the exclamation point symbol, the vertical bar",
			"symbol, the ampersand, all that sort of taking away that junk",
			"and we can just start to speak English almost in Python.",
			"And that's actually one of the reasons that people find this language popular",
			"is because generally, if you think you want to write something in English,",
			"you're actually pretty much on the way to writing it the same thing in Python.",
			"As I pointed out, we don't have else if, it's just one word here, elif.",
			"Just like before though, we end our lines now with colons",
			"and we indent our code blocks.",
			"And as we'll see a bit later, indenting in Python",
			"is super, super, super important.",
			"We also have question mark colon, the ternary operator.",
			"It looks a little bit different.",
			"I'm going to show it here just you see it,",
			"but generally it's a little bit weird so you might not",
			"use it all that frequently.",
			"So here what we're doing is we're getting a character in C,",
			"and then if that character is a letter, alphabetic gets assigned to the value",
			"true, otherwise it gets assigned to the value false.",
			"Here, that line would look like this.",
			"It's a single line of code, and we have our true and false.",
			"Notice that they are now capitalized as opposed to in C",
			"where they're lower case.",
			"Again, these little syntax differences are the kinds",
			"of things that when you're learning a new language,",
			"these are the things that will vary a little bit from language to language.",
			"But it's the general concepts here that we're concerned with",
			"and these will become second nature to you",
			"pretty quickly if you use Python for more than a week or so.",
			"We have this function called input, which we can use.",
			"It's native to Python.",
			"And we can use that to collect user input at the command line,",
			"just like we did in CS50's library with get char, get float, get int,",
			"and so on.",
			"Although those functions, again, are also",
			"available for you to use in Python.",
			"We rewrote them in Python for you.",
			"We have two kinds of loops in Python.",
			"So in C we had three.",
			"We had while loops, do while loops, and for loops.",
			"Here in Python, we don't have do while loops anymore.",
			"We only have the two, while and for, although they're",
			"a bit more flexible here.",
			"So here's an example of some C code where we're using a while loop.",
			"We initialize a counter to 0, and then so long",
			"as that counter is less than 100, we print out the number",
			"and then we increment the counter by 1.",
			"So this loop will run 100 times, printing the numbers 0 1 dot, dot, dot,",
			"dot, dot all the way down to 99.",
			"Do this same thing in Python, it would look a little something like this.",
			"Counter equals zero-- again, we're leaving off the type specifier",
			"because it's Python, we don't need it.",
			"There's no semicolons at the end.",
			"And then while counter is less than 100-- again,",
			"no extraneous parentheses here either.",
			"We're really trying to streamline what we can.",
			"Then we just print out the counter and we say, counter plus equals 1.",
			"This is another catch here in Python.",
			"Plus plus is not the increment by one operator.",
			"We have to very explicitly call out counter plus equals 1.",
			"We can't say counter plus plus.",
			"But otherwise, this would do exactly the same thing.",
			"Print out one line at a time the numbers 0 to 99.",
			"And notice also that we don't have to include that backslash n that we",
			"did in C when we were using printf.",
			"In Python, by default it assumes that if you're printing something,",
			"it's just going to tack a new line on at the very end for you automatically.",
			"So that's kind of nice.",
			"Here's a for loop that would do again pretty much exactly",
			"the same thing that we just saw.",
			"It initializes the variable x to 0, and then so long as x is less than 100",
			"it will print out the number, and then at the end",
			"of every iteration of the loop it will execute the line x plus plus.",
			"So we'll again have 0 1 dot, dot, dot, dot, dot all the way down to 99.",
			"In Python it looks a little something like this.",
			"For x in range 1000 print x.",
			"So range is a function that will give us basically a list,",
			"and we'll talk about what that is in just a moment, of all the numbers",
			"from 0 to 100 but not including 100.",
			"So this would give us a list of 0 to 99.",
			"And then we're just going to print out every number in that list",
			"starting at the beginning, going all the way to the end.",
			"In a for loop where we wanted to count by twos",
			"we might do something like this.",
			"In Python we can also do that, we just have",
			"to add one extra parameter to our range function.",
			"We set a start point, we set with the endpoint,",
			"and we set how much we want to skip by.",
			"So this is a list of all of the integers from up to 100",
			"but not counting 100, counting by twos.",
			"So this would generate a list for us of 0, 2, 4, 6, 8 and so on all the way",
			"up to 98.",
			"So arrays.",
			"So arrays are really where Python is going",
			"to start to shine and show us some of the real advantages",
			"it has over a language like C, which is a little more constricted in what",
			"it can do with arrays because of two things.",
			"One, they're fixed size, and two, we can only store one type of variable",
			"in them.",
			"We can only store an array of all integers, all characters, all",
			"some structure that we created, and so on.",
			"In Python, we don't actually call them arrays.",
			"We call them lists, but they're effectively the same general idea,",
			"the same concept we're familiar with.",
			"They're not fixed in size.",
			"So similar to a linked list really we can grow and shrink them as we need,",
			"as our program demands more memory or less memory",
			"to be consumed by the list the language is flexible enough",
			"to allow us to do that.",
			"And we can always add more things on, splice or remove things from the middle",
			"pretty easily.",
			"So let's get in the habit of calling these things lists now instead",
			"of arrays.",
			"But to declare a list it's really pretty straightforward.",
			"Nums equals square brackets.",
			"There we go.",
			"We have it.",
			"That's an empty list or an empty array.",
			"But that's all we really need to do to do it.",
			"We could create a list that has a couple of elements pre-populated into it.",
			"Nums equals 1, 2, 3, 4.",
			"That is an explicitly created list.",
			"Python also has support for something called a list comprehension, which",
			"we're not going to get into in a lot of detail here,",
			"but I want to show you what it looks like.",
			"Nums equals x, and then I have a for loop inside",
			"of my declaration of my list.",
			"This is called the list comprehension, and basically what this is doing",
			"is I'm using the for loop to generate a list of numbers for me.",
			"And instead of doing anything with that list like where I as printing them out",
			"before, I'm using that list that the for loop",
			"generates to assign it to nums instead.",
			"So what this would do is create a list of 500 elements, all",
			"of the numbers up from 0 all the way up to 499,",
			"because again range excludes that final parameter.",
			"So we're not including 500.",
			"Our range has 500 things in it, but it's going from 0 to 499, not 0 to 500",
			"which would be 501 things in the list.",
			"Now, instead of the square bracket syntax,",
			"there's also just saying nums equals list parentheses, which",
			"is a function that creates a list, and if you don't pass anything",
			"in it returns an empty list or an empty set of square brackets.",
			"So that's exactly the same as what we saw just a moment ago",
			"with the blank empty list.",
			"Now we have the following.",
			"We could say nums equals 1, 2, 3, 4.",
			"So that's explicitly creating a list of four elements.",
			"We can attach an element to the end of the list.",
			"We can say, nums dot append 5.",
			"And what that's going to do is that's going to add 5 to the end of the list.",
			"It's going to tack it on at the very end.",
			"This line of code would do exactly the same thing.",
			"Nums dot insert parentheses 4 comma 5.",
			"Well, what does this mean?",
			"Well, what's happening here is we're inserting in the fourth position,",
			"again counting from 0, and if you remember",
			"how we count in C we know that 1 here is in the zeroth position,",
			"2 is in the first position, 3 is in the second position,",
			"4 is in the third position.",
			"So what we're doing here is really just inserting",
			"into the fourth position the value 5.",
			"So this line, and this one that we just saw do exactly the same thing.",
			"They put a 5 at the end of that array.",
			"This also does the same thing.",
			"Nums square bracket len nums colon 5 equals 5.",
			"Little bit weirder, but basically what we're doing here is we're",
			"creating another list effectively, and we're splicing it",
			"on to the one that exists before.",
			"So what I'm saying is, I'm creating a new list.",
			"There's a list there with a single element, 5.",
			"And I'm saying, the nums list from position 4, which is the length of nums",
			"forward, gets this list assigned to it.",
			"So if i had put 5 comma 6 there, after this would execute",
			"I would end up with nums equals 1, 2, 3, 4, 5, 6.",
			"So this is how I can perhaps attach one list",
			"to the end of another list, as opposed to attaching",
			"one element to the end of a list.",
			"So len nums works just like strlen might if you're familiar with that from C.",
			"It calculates the length of a list.",
			"So len now becomes a function in Python that",
			"is usable to calculate not just the length of a string,",
			"but the length of any arbitrary list.",
			"Kind of useful.",
			"All right, here's a new data type that we've never--",
			"or a new kind of way of storing data in Python",
			"that we're not familiar with from C and that's called a tuple.",
			"So what a tuple is, it is an ordered, immutable set of data,",
			"basically what we're saying here is we have a collection of a couple of things",
			"that we will never change, but the order matters.",
			"And we'll take a look at an example in just a moment of what a tuple might",
			"look like or what a list of tuples might look like",
			"and why we might want to work them.",
			"But they're really good for associating collections of data.",
			"They're really fast to navigate in Python.",
			"And they're really kind of analogous to a structure in C where the values will",
			"never change, but you've arranged them because of the way",
			"you arranged your fields in C in a particular order.",
			"So here, for example is a list--",
			"so a list which we just talked about--",
			"of tuples.",
			"So we're mixing these two concepts together here.",
			"Here is a list of tuples.",
			"This is a list called presidents that contains four tuples,",
			"George Washington comma 1789 in parentheses--",
			"that's how we indicate a tuple--",
			"John Adams comma 1797, and so on and so on.",
			"Each of these, each of George Washington 1789 and John Adams 1797 and so on,",
			"that is a single tuple.",
			"And then you see here that we have the commas at the end of those tuples",
			"to indicate that all of those are items in the larger list called presidents.",
			"Now, we can iterate over this list and do things with it.",
			"So let's take a look at an example of how we might do that.",
			"So up at the top right is our presidents list from just the previous slide.",
			"And I can do the following.",
			"For prez comma year in presidents.",
			"So now, notice, I'm not just saying for x in range",
			"where I'm using one iterator, I have two, prez comma year.",
			"And if you look, you'll notice that that actually",
			"matches what I have there in the presidents list.",
			"I have a set of four tuples where each is arranged prez comma year.",
			"Then I'm doing something weird.",
			"Print in square bracket--",
			"in curly brackets 1 curly bracket 0 took office dot format prez year.",
			"What is happening?",
			"This is actually just how the print function in Python",
			"does what printf does in C. Instead of using percent s or percent c or percent",
			"d, those format specifiers that we're used to from C,",
			"here we use the dot format method, which we'll",
			"talk about again in just a moment, at the end of the print function.",
			"And we can specify the order in which we want those parameters to come out.",
			"So the 1 and 0 there match like this.",
			"Now granted, I wrote this deliberately to show you",
			"that I could rearrange this list.",
			"I also could have just swapped prez and year",
			"and I wouldn't need the numbers at all.",
			"If you leave them out it will just go left",
			"to right through whatever the arguments are to format and plug those in left",
			"to right just to fill in all of the curly brace emptiness's",
			"that you have in the print function.",
			"But here, I can also explicitly take them out of order if I want it.",
			"So that's all I'm doing here.",
			"I'm getting a list.",
			"I'm getting a single tuple from this list",
			"and I'm basically printing its elements in reverse order plugging them in.",
			"So again, a contrived example, but I deliberately put",
			"it here to show you the flexibility of the print function",
			"and to introduced several concepts to you at once",
			"because you also are probably going to see a lot of things",
			"like this when you're doing research and trying to figure out",
			"what Python functions to use.",
			"You'll see a lot of unfamiliar things sort of blending together at once.",
			"So I wanted to just kind of introduce it to you here as well.",
			"But you can probably guess what this is going to do.",
			"It'll print out the following.",
			"In 1789 George Washington took office, In 1797 John Adams",
			"took office, and so on.",
			"It's going to iterate through the list and print out",
			"each tuple plugging in its values.",
			"And because I have the 1 and 0 there as opposed to just leaving them blank,",
			"it swaps the order of them.",
			"OK?",
			"Another thing that we're sort of familiar with in C,",
			"although it's not native, we had to build it ourselves,",
			"is the concept of a dictionary.",
			"Now dictionary is generally close in spirit to the concept of a hash table.",
			"And remember that hash tables were not native to C",
			"although they are native to a lot of programming languages.",
			"We had to build it ourselves.",
			"So it allows us to associate indexes with keys as opposed",
			"to integers, which we had to do in C. So if we",
			"wanted to have, for example, an array of something,",
			"we could only refer to the elements of the array",
			"by an index number, array square bracket 0, array square bracket 1, and so on.",
			"In Python, we can now associate elements of a list",
			"or elements in this case of a dictionary with keywords as opposed to integers.",
			"So for example, here is a dictionary of pizzas.",
			"So again, familiarize yourself with the different types",
			"of brackets we're using.",
			"So remember, in lists we have square brackets",
			"to indicate the beginning and end of a list.",
			"In tuples we use parentheses to indicate the beginning and end of a tuple.",
			"In dictionaries we use curly braces to indicate",
			"the beginning and end of a dictionary.",
			"Inside of this pizza dictionary I have four key value pairs.",
			"I associate the key cheese with the value 9,",
			"I associate the key peperoni with the value 10, and so on.",
			"Now, how might we want to work with this?",
			"These again are out keys.",
			"We use a colon to separate the key value pair.",
			"And we specify-- and those are our values here in green.",
			"I can change the value of different key value pairs in the dictionary as well.",
			"So I could say pizzas square bracket cheese equals 8,",
			"and now the key cheese is not associated with 9, it's associated with 8.",
			"I could use the different keys in my dictionary",
			"in Boolean expressions like this.",
			"If pizza square bracket vegetables is less than 12 I could do something.",
			"I can also add new keys to the dictionary,",
			"key value pairs the dictionary, without having to do anything crazy.",
			"Pizzas bacon, that key didn't exist before, equals 14.",
			"Now we have a dictionary that has five different key value pairs in it.",
			"Again, pretty straightforward to do.",
			"But we've introduced a new problem.",
			"If we don't have integer based indexes like we did in C,",
			"how do we iterate through the dictionary?",
			"We can't just iterate over the--",
			"I guess we could maybe iterate over the keys alphabetically,",
			"but then we would have to sort them alphabetically.",
			"That feels kind of messy.",
			"Fortunately, we can do this, and it's because",
			"of the flexibility of the for loop.",
			"And I pointed that out to you a little bit earlier",
			"and I said we'd come back to talk about how the for loop was more flexible.",
			"Let's see an example of this.",
			"So the for loop is not just used to count from one number up to another.",
			"We can also use it to iterate over the elements of a dictionary.",
			"So instead of saying for x in range 500, which is going to do something",
			"500 times, I can say for pie in pizzas.",
			"That's pretty cool, right?",
			"So what it's going to do there is it's going to use--",
			"pie basically becomes every single key.",
			"So cheese, bacon, vegetable, pepperoni, whatever else I had in there, that's",
			"how we iterate over all of those keys in Python",
			"without having the value of integers that we did previously.",
			"So for example, here's the original pizzas dictionary",
			"that we had just a moment ago.",
			"If I say for pie in pizzas print pie, because again pie is substituting",
			"for the keys, this is going to print out for me a list",
			"of all of the keys in my dictionary.",
			"So these are maybe the kinds of pizzas that I have available.",
			"Or for pie comma price in pizzas dot items-- now",
			"I have to specify pizzas items here to make it",
			"so that it can iterate over all of the keys.",
			"Excuse me, over all of the values.",
			"I can iterate over all of the keys automatically in a dictionary.",
			"But if I want to iterate over the values,",
			"I have to transform the dictionary into a list.",
			"In order to do that, I need to use the dot items",
			"method to transform my dictionary into a list for purposes",
			"of just iterating over this.",
			"Then I can print out the price.",
			"So in this case, I would print out 12, 10, 9, 11.",
			"That's weird.",
			"It didn't print them out in the order I specified",
			"and that's kind of a side effect here with the dictionary.",
			"You're not necessarily going to get your--",
			"when you transform the dictionary into a list to iterate over it as we do here,",
			"you're not guaranteed that that list is going to maintain its order.",
			"Now, the keys and values will still be associated correctly,",
			"if I wanted to print out both as we'll see in just a second.",
			"But the order is not guaranteed anymore.",
			"Now usually that's not going to be a problem.",
			"Sometimes it might be, in which case you're just going",
			"to have to use a list at the outset.",
			"And there are, of course, ways around it.",
			"Let's say I wanted to print both the key and the value.",
			"It's very similar to what I just had before.",
			"I'm still iterating over pie and price, and I'm still",
			"transforming the pizzas dictionary into a list",
			"temporarily so I can iterate over it.",
			"And I'm using my print function again here",
			"with now I'm not specifying 0 and 1.",
			"I could, and specify 0 in the first one, 1 in the second one.",
			"But I want to actually print the key first then the value.",
			"I don't want to have to invert them so I don't have to plug in the ordering",
			"that I did before when I was doing the presidents example,",
			"iterating over all those tuples.",
			"",
			"And this would print out, a whole Buffalo chicken pizza",
			"costs $12, a whole cheese pizza costs $9.",
			"Again, going through each element and getting the key value pair",
			"and printing it out as I indicated.",
			"So that's how I can iterate over an entire dictionary,",
			"printing out all of its elements.",
			"Again, with the caveat that it's not ordered,",
			"so I'm not guaranteed to get them in exactly the same order I put them in.",
			"But again, that trade off is probably going to be worth it most of the time.",
			"So now we've seen a lot of examples of this.",
			"How to interpolate variables similar to printf where",
			"we would use percent substitution.",
			"In Python, we've seen this one quite a few times.",
			"There's also this one which would allow us to concatenate strings together.",
			"So here, I'm not doing any interprolation,",
			"but I'm plugging in the variable pie and the variable price,",
			"transforming it into a string, because everything else here",
			"is the string so I need to transform that number into a string",
			"to make this work correctly.",
			"So that's what the str function there does.",
			"But this again would work.",
			"So a whole cheese pizza costs dollars 9 turned into a string.",
			"You might see this, which is actually really similar to you from printf",
			"but it's deprecated in Python 3.",
			"So you don't really want to use it even though it might be more familiar to you",
			"because it's similar to printf.",
			"So you might see it, but try and avoid using it because it is deprecated.",
			"So again, Python is not just a main function",
			"that we just run down the lines.",
			"In fact, Python doesn't have a main function",
			"by default. We have to explicitly force it",
			"to have a main function if we want to.",
			"But it does support functions more generally.",
			"And we don't need to specify the return type of functions.",
			"And we don't need to specify the data types of any parameters.",
			"So you might recall from C that we had to specify like int square maybe",
			"it took an integer as its input, so int square parentheses int x semicolon",
			"or all this stuff we have going on.",
			"We don't have to any of those data types.",
			"We just have to specify the name of the function and any parameters",
			"that it takes.",
			"We introduce a function using the keyword def.",
			"So basically, think about it as like defining the following function.",
			"And because the interpreter reads from top to bottom,",
			"we don't have to include our main function.",
			"But if we want to include main because maybe we wrote our code such that",
			"the stuff we want to execute first actually is maybe 200 lines",
			"into our file-- we wrote other stuff up above,",
			"maybe we're keeping our functions in alphabetical order or whatever else--",
			"we can explicitly direct our program to start at the main function",
			"by including this line at the very, very end of our Python file.",
			"And this is just something to memorize.",
			"If underscore underscore name underscore underscore equals equals",
			"quote underscore underscore main underscore underscore quote colon",
			"and then tab in main parentheses.",
			"This is one of those things that you don't necessarily",
			"have to use because you write your code such",
			"that the first line is the first thing you want",
			"to happen it's going to be fine anyway.",
			"But if you write it out of order, this is",
			"just one of those things you just have to memorize.",
			"Sorry.",
			"So defining a function, pretty straightforward.",
			"Let's define the square of x like we just",
			"did a second ago in C. Def square parentheses x colon return x times x.",
			"Pretty straightforward.",
			"I could also do this.",
			"I could return x times times 2.",
			"Well, actually this operator here is a built in, which did not have,",
			"exponentiation operator.",
			"So this is return x squared.",
			"I could also be really convoluted and write my square function",
			"by adding x to itself x times.",
			"Doesn't really matter.",
			"As long as the result is the same, it can be a black box",
			"just like we talked about an out function video.",
			"We don't necessarily care how the square function is defined,",
			"as long as it does what we expect it to do.",
			"As long as printing the square of 5 prints out 25.",
			"All right, now here's something entirely different.",
			"Let's talk about objects.",
			"So objects we have not covered yet in CS50.",
			"And Python is an object oriented programming language.",
			"The closest thing we have to an object is a C structure.",
			"So C structures, you may recall, have a number of fields in them.",
			"We might call those fields, particularly in an object oriented context,",
			"properties.",
			"But those properties are never kind of able to just be on their own, right?",
			"They're always bound up and tied into some definition of some C structure.",
			"So if I define in C here, as I do at the top right, a car structure that",
			"has two fields or two properties in it, year and model,",
			"I might be able to say the following.",
			"Struct car Herbie-- I'm declaring a new variable of type struct car called",
			"Herbie--",
			"and I'm saying Herbie dot year equals 1963,",
			"Herbie dot model equals beetle, totally OK, right?",
			"Because in each case where I'm using year and model,",
			"I'm associating it with some structure of that data type, in this case Herbie.",
			"But I could never say this.",
			"Is not valid in C, at least with what we have here,",
			"because year and model don't just kind of hang out on their own.",
			"They're attached to what-- they're part of what it means to be a struct car.",
			"So we always have to associate them with a struct car.",
			"So that would not fly.",
			"So that's sort of the--",
			"that's sort of the analogy of object properties to C structure fields.",
			"But objects, in addition to having properties, also have methods.",
			"And you've heard me use that word a couple of times so far in this video.",
			"Methods are basically functions that are inherent to what",
			"it means to be an object.",
			"You can't call that function just kind of out of the blue on anything.",
			"You can only call that function on objects of that type,",
			"on objects where that function means something.",
			"So properties and methods don't ever stand on their own.",
			"They're always part of what it means to be an object.",
			"And because of this, objects become a lot more important.",
			"If you have these properties and you have these methods",
			"and they're always dependent on objects, that's where the term object oriented",
			"comes from.",
			"The object is the most important thing.",
			"We don't pass objects into a function, we call methods on objects.",
			"And that's the general syntax that you'll",
			"see in a lot of object oriented programming languages, is some object,",
			"and there is some method--",
			"which again, is just another word for a function-- that",
			"is associated with it that we are calling on that object.",
			"We'll take a look at an example of this in just a moment.",
			"Now objects are not necessarily generic.",
			"We can actually create our own specific kinds of objects",
			"just like we created our own specific types of structures in C.",
			"And the way we do that is using the class keyword.",
			"The class keyword introduces a new kind of object.",
			"Every class, so every new kind of object you create,",
			"requires an initialization function.",
			"We didn't have to do this in C. But basically what it does--",
			"and you'll also hear this term as a constructor,",
			"you'll hear that commonly used in languages like C++ for example--",
			"and basically what it does is it creates an object for you and it puts some--",
			"it assigns the value of some properties automatically.",
			"Remember that in Python we can only declare variables",
			"by assigning them a value.",
			"So basically, this is the analogous idea.",
			"We are creating an object of a particular class,",
			"and we are filling in all or many of the properties",
			"of that object with some data.",
			"Then, in addition to defining the properties of the object,",
			"we also have to define functions or methods that can apply to the object.",
			"Every method that we define inside of the class has at least one parameter,",
			"and that parameter is canonically-- although you don't have to call it",
			"this--",
			"is called self, and basically all it is is a reference to the object",
			"so that we can always know what object we are talking about.",
			"So every function that you write, every method",
			"that you write in a class to find some new kind of object,",
			"will always have one more parameter than you think you need,",
			"because the first parameter there will always be self.",
			"Let's try and distill this into some actual code",
			"so you can what we're doing here when we're talking about defining",
			"a new kind of class, defining some methods,",
			"and then we'll see how we can apply those methods to objects in that class.",
			"So here is a very simple class called student.",
			"So class Student with a capital S-- apparently this",
			"means that I am now going to create-- whenever I want to create a new student",
			"object I'll use that capital S Student keyword.",
			"And I'm defining three functions.",
			"The first is that constructor, that initialization function, which",
			"is always called underscore underscore init underscore underscore.",
			"Now, my Student apparently is going to have two properties.",
			"They're going to have a name and an ID.",
			"But because I'm defining a method inside of that class,",
			"I always have to include that self parameter so that I always",
			"know what object I am talking about or what object to being invoked here.",
			"Inside of my initialization function I'm doing something pretty straightforward.",
			"I'm just saying, self dot name equals name and self dot ID equals ID.",
			"So I'm assigning the name and ID properties of the Student object",
			"to be whatever I pass in here.",
			"And then I have another function called changeID,",
			"and apparently I use this to change the idea",
			"of a student, the ID number of a student after I've already created them.",
			"Because I'm assigning the ID when I initialize it, but here",
			"apparently I've already created the Student object",
			"and I'm going to change it.",
			"So changeID takes two parameter, self against so I",
			"know which Student, which capital S Student object I'm talking about,",
			"and the ID number that I want to change them to.",
			"And then I have a function called print, which takes just one parameter, self.",
			"It's apparently not going to take anything else,",
			"but still I always have to indicate the self parameter.",
			"Always has to be part of any methods that you define for a class",
			"that you create.",
			"And apparently what I'm doing here is printing out self dot name and self dot",
			"ID with a little dash between them.",
			"That's what's happening there.",
			"It's just some variable interpolation just like we saw before.",
			"I'm just printing out self dot name dash self dot ID.",
			"So what would happen here?",
			"So I'm creating a new variable, a new object, called Jane.",
			"And this is my initialization.",
			"I'm calling the constructor function.",
			"Jane equals Student with a capital S, again, that's the name of our class,",
			"and I'm passing in tow values.",
			"Jane, which I apparently want to map to self dot name, and 10.",
			"So immediately after this, what would happened is",
			"I would have a new student object called Jane,",
			"and Jane's name field would be Jane in quotes,",
			"and Jane's ID field would be 10.",
			"So if I printed it out--",
			"and you can actually take this code and recreate it in CS50 IDE",
			"and see it for yourself-- if I then printed it out,",
			"I would print out Jane space dash space 10.",
			"Then if I executed Jane dot changeID 11, you",
			"can probably guess what would happen because then when I print it again",
			"it would print Jane space dash space 11.",
			"So that's just some examples of creating-- of defining a class,",
			"defining methods, assigning properties.",
			"Again, all of this sort of is inherent to what",
			"it means in an object-- to be working in an object oriented programming",
			"language.",
			"So even though this may be very unfamiliar and new,",
			"especially coming from a language like C, this, if you go forward and do",
			"object oriented programming in languages like Python,",
			"like PHP, like JavaScript, or like many, many others,",
			"this sort of notion of methods, properties,",
			"and how we work with them is going to be really important to sort of synthesize.",
			"So if you haven't noticed by now, good style",
			"is really, really important in Python.",
			"We don't have curly braces anymore which is great,",
			"but we still need to be able to then indicate when a--",
			"how an if block is delimited.",
			"In C, we had an open curly brace, then we had some code,",
			"we had some closed curly brace.",
			"And it didn't really matter how things were styled in between.",
			"I mean it mattered for somebody who is reading your code,",
			"but it doesn't matter to the computer.",
			"It does matter in Python.",
			"Tabs and indentation are key in order to indicate what you intend for it to do.",
			"So if I had an if block and I put a colon at the end of it",
			"and I didn't indent the next line in, Python",
			"wouldn't know that that line is supposed to be subject to that if condition.",
			"So if you have not yet been in the habit of practicing good coding style,",
			"now is the time to definitely reacquaint yourself with the CS50 style guide,",
			"because if your code in Python is poorly styled,",
			"it's probably not going to work.",
			"Sorry about that.",
			"So in C, we had the notion of including files",
			"if we needed to get additional information from libraries,",
			"for example like standard IO or CS50 dot h.",
			"We can do the same thing in Python and C it was pound include.",
			"In Python, we import, and instead of being called header files or libraries,",
			"we generally call them modules.",
			"But we could import CD50, and if we do we could then call some of the CD50",
			"functions we might be familiar with.",
			"We can do that by saying for example, CD50 dot get int parentheses.",
			"And that would, just like get int does in C, get an integer from the user.",
			"CS50 dot get float, dot get string, dot get char.",
			"All those things that you've used in C, we can still use them in Python.",
			"They just take a little longer to type.",
			"We have to specify CS50 dot, because CS50 is basically, not exactly,",
			"but it's basically a class where we're defining",
			"a couple of different methods within it that we can then invoke.",
			"You can, in addition to pre-writing your files in dot py files,",
			"you can also just literally write Python using the Python interpreter",
			"at the command line.",
			"You can type in your IDE or in a lot of environments Python, and then hit Enter",
			"and it will open a Python interpreter.",
			"And you can literally write Python one line at a time.",
			"In general though, if you're going to be writing more complex programs,",
			"you're probably going to want to pre-write them and then load them",
			"into the Python interpreter instead.",
			"To invoke the Python interpreter, particular in CS50 IDE",
			"but again more generally, Python space whatever the file you want to invoke",
			"is, and then what will happen is the interpreter will open that file",
			"and proceed one line at a time, top to bottom, executing your Python code.",
			"And if you really want to make your Python programs look and run a lot more",
			"like C programs-- for example, in C, once we compile a program into--",
			"say we make hello, we then have dot slash hello--",
			"we can include this line in red at the very top of our Python file.",
			"And then we can execute the line in blue after we're done saving the file.",
			"And then we can actually instead of typing Python and then",
			"some whatever we want to call it dot pie, we could then just write dot",
			"slash blah blah blah dot pie.",
			"So again, I know that was a long video, there was a lot to cover in that one.",
			"And we've really only just scratched the surface of introducing you to Python.",
			"But it is an amazing language, incredibly flexible,",
			"and it's a tool you're really going to want to put in your programmer's",
			"toolbox if you're ever doing anything like data science or complex string",
			"manipulation or really just familiarizing yourself with a language",
			"that you can use both at the command line and in a web development context.",
			"And we'll talk about how we can use Python in a web development context",
			"in another video on flask.",
			"I'm Doug Lloyd, this is CS50.",
			""
		],
		"is_youtube": false
	},
	"video_034": {
		"section": "CS50x 2021",
		"subsection": "Week 7",
		"unit": "Lecture",
		"video_sources": [
			"https://edx-video.net/2a6a4555-2b50-4552-94c6-164e300c89d4-mp4_720p.mp4",
			"https://edx-video.net/2a6a4555-2b50-4552-94c6-164e300c89d4.m3u8"
		],
		"video_duration": 9439,
		"speech_period": [
			3.493, 45.864, 1.083, 2.82, 2.947, 2.333, 2.07, 2.67, 1.47, 3.88, 3.77,
			3.33, 0.693, 2.667, 2.833, 2.427, 2.39, 2.04, 3.57, 1.87, 3.71, 3.3, 1.5,
			3.81, 2.61, 4.44, 4.6, 2.49, 3.14, 3.54, 3.99, 4.42, 0.5, 3.0, 3.773,
			2.917, 2.22, 1.89, 3.27, 1.05, 4.38, 3.33, 3.48, 3.21, 4.23, 3.39, 3.63,
			2.23, 2.39, 1.86, 1.71, 2.1, 2.64, 2.58, 3.6, 5.58, 2.1, 4.41, 4.11,
			2.503, 2.417, 3.3, 3.93, 2.98, 1.68, 3.14, 2.82, 4.29, 1.733, 2.167, 2.31,
			3.72, 2.64, 2.46, 5.05, 4.73, 3.15, 3.66, 1.05, 1.68, 3.037, 2.083, 0.42,
			2.458, 3.692, 0.69, 4.23, 1.68, 1.62, 1.86, 3.417, 1.833, 1.92, 3.51, 2.1,
			2.58, 2.625, 1.425, 5.43, 4.74, 2.25, 3.51, 3.458, 1.792, 4.05, 1.98,
			4.17, 2.68, 2.828, 1.792, 2.25, 3.71, 2.73, 2.55, 3.0, 3.63, 3.0, 3.21,
			2.35, 2.78, 4.12, 3.56, 3.42, 2.637, 1.833, 1.17, 2.11, 3.86, 3.0, 6.3,
			2.71, 3.89, 2.13, 1.32, 1.53, 3.3, 1.52, 1.0, 1.98, 2.4, 1.69, 2.99, 1.62,
			2.82, 2.82, 6.36, 2.11, 2.9, 1.53, 1.47, 4.05, 0.717, 3.333, 2.94, 2.46,
			1.89, 4.11, 2.94, 3.37, 4.133, 2.667, 2.5, 3.74, 3.87, 1.47, 4.36, 3.829,
			2.821, 4.29, 2.25, 2.56, 3.62, 2.85, 2.91, 4.89, 2.79, 4.08, 1.29, 3.69,
			3.19, 3.44, 3.017, 3.083, 2.48, 3.75, 1.707, 1.833, 3.27, 2.01, 2.22,
			2.23, 2.93, 3.27, 2.76, 2.8, 3.44, 2.67, 0.668, 1.042, 1.27, 3.14, 2.19,
			1.29, 1.93, 3.21, 2.63, 3.84, 4.68, 1.42, 1.82, 4.06, 2.66, 2.16, 2.4,
			3.93, 2.43, 2.37, 3.27, 2.38, 2.18, 3.717, 1.833, 3.6, 2.28, 4.27, 5.78,
			0.97, 2.12, 2.1, 3.4, 1.752, 1.958, 1.458, 2.442, 3.09, 1.5, 1.708, 2.762,
			1.35, 0.3, 3.08, 1.75, 5.21, 2.47, 2.19, 1.9, 2.667, 3.523, 2.75, 3.38,
			2.1, 5.01, 3.95, 2.62, 2.34, 2.13, 4.07, 3.88, 4.56, 1.92, 2.79, 3.93,
			2.1, 2.43, 3.36, 3.12, 3.18, 2.64, 3.24, 4.76, 2.86, 3.63, 2.94, 2.37,
			1.63, 4.04, 1.14, 3.48, 3.69, 3.12, 2.37, 3.34, 2.1, 3.512, 2.208, 2.61,
			2.67, 2.1, 3.33, 4.32, 1.95, 2.24, 1.0, 5.04, 4.57, 2.31, 2.03, 2.28, 2.1,
			2.19, 2.46, 4.77, 4.45, 2.69, 2.16, 2.44, 2.33, 3.81, 2.76, 2.77, 5.15,
			3.712, 2.708, 2.55, 1.86, 3.09, 5.19, 3.81, 1.62, 4.11, 2.65, 2.15, 4.48,
			0.5, 2.92, 3.02, 3.12, 2.22, 4.162, 1.208, 5.67, 4.32, 1.44, 3.15, 2.2,
			0.5, 3.06, 3.61, 0.65, 1.42, 1.82, 2.79, 1.62, 2.22, 2.37, 2.11, 4.64,
			1.56, 3.539, 3.151, 2.49, 4.29, 1.14, 2.392, 1.958, 3.329, 3.781, 4.27,
			3.2, 2.89, 2.75, 4.748, 1.292, 2.0, 2.46, 1.29, 3.425, 2.125, 2.4, 3.78,
			4.14, 1.095, 1.875, 1.833, 5.607, 3.58, 2.81, 3.79, 2.78, 2.23, 0.5, 2.19,
			5.43, 4.92, 4.98, 2.0, 0.5, 2.36, 2.01, 2.735, 0.625, 4.06, 1.39, 1.542,
			3.518, 3.96, 1.26, 3.33, 3.57, 2.46, 5.64, 3.81, 2.13, 2.37, 1.952, 2.458,
			2.58, 2.13, 2.1, 2.58, 2.41, 2.75, 1.41, 3.9, 2.82, 2.82, 2.58, 1.75,
			4.07, 3.36, 3.93, 4.71, 3.18, 5.2, 0.84, 4.19, 3.78, 2.01, 3.57, 2.19,
			3.09, 2.53, 0.5, 1.67, 1.75, 1.972, 2.708, 1.74, 2.52, 1.75, 1.97, 4.23,
			1.327, 2.333, 2.55, 2.64, 4.47, 4.11, 1.72, 3.02, 2.738, 2.542, 2.25,
			2.13, 1.23, 2.04, 2.28, 2.01, 3.69, 1.92, 1.51, 5.3, 2.28, 1.68, 4.26,
			1.68, 2.07, 1.74, 2.31, 4.02, 3.66, 0.75, 4.815, 2.625, 3.87, 2.49, 3.66,
			5.49, 2.25, 4.24, 4.7, 2.82, 2.22, 4.32, 4.223, 2.167, 1.63, 1.4, 2.842,
			1.958, 2.0, 1.81, 3.94, 2.3, 1.44, 2.94, 3.367, 1.583, 1.51, 2.03, 4.56,
			1.877, 1.583, 2.96, 1.71, 0.57, 3.69, 3.24, 3.173, 2.917, 3.597, 1.833,
			2.2, 2.417, 1.053, 4.35, 3.87, 1.74, 3.63, 0.99, 1.86, 2.88, 2.76, 5.97,
			2.4, 0.9, 1.94, 1.93, 2.98, 4.52, 4.2, 4.12, 1.25, 3.48, 2.518, 1.792,
			1.25, 2.14, 1.75, 1.8, 1.38, 2.14, 2.51, 3.03, 2.7, 1.96, 1.25, 4.257,
			1.833, 3.18, 2.74, 1.1, 3.93, 1.23, 2.37, 1.53, 1.68, 1.66, 2.167, 1.243,
			2.52, 4.08, 2.91, 2.67, 2.76, 1.44, 2.333, 3.217, 0.917, 2.083, 1.17,
			1.917, 2.913, 3.96, 6.36, 1.65, 2.11, 1.7, 4.35, 2.49, 6.75, 1.23, 2.207,
			1.583, 1.49, 0.84, 2.542, 2.078, 1.29, 2.91, 1.78, 2.87, 3.353, 0.667,
			1.23, 3.7, 3.32, 4.05, 1.982, 1.708, 3.28, 2.31, 1.26, 2.42, 2.64, 3.9,
			3.27, 2.25, 3.21, 2.79, 2.07, 2.64, 3.03, 3.33, 3.45, 3.16, 3.66, 2.0,
			2.31, 4.808, 1.792, 2.083, 2.657, 2.19, 3.817, 2.333, 2.25, 3.87, 1.86,
			2.7, 3.36, 3.24, 3.21, 3.0, 2.19, 0.57, 4.51, 2.3, 3.99, 2.4, 4.43, 2.46,
			4.17, 4.9, 3.1, 2.5, 2.67, 2.43, 4.56, 3.03, 3.76, 1.97, 3.12, 3.93, 4.2,
			2.67, 2.28, 3.81, 3.57, 3.04, 1.79, 1.833, 2.01, 2.667, 3.24, 3.99, 3.16,
			3.02, 3.66, 2.94, 1.86, 4.56, 1.62, 3.67, 5.48, 3.31, 3.42, 5.13, 4.08,
			1.77, 3.39, 3.3, 2.7, 3.913, 1.667, 2.97, 2.79, 1.23, 2.56, 4.55, 3.03,
			3.33, 2.58, 1.92, 4.86, 1.32, 1.98, 4.64, 1.695, 1.375, 1.458, 3.282,
			1.338, 3.042, 2.19, 1.98, 2.46, 2.13, 2.97, 3.85, 4.13, 1.21, 3.14, 2.88,
			3.3, 1.89, 1.09, 3.62, 7.23, 4.41, 4.93, 5.81, 2.339, 4.381, 4.68, 5.08,
			3.04, 2.9, 3.12, 3.989, 2.141, 1.387, 1.333, 1.0, 2.179, 3.978, 2.083,
			3.12, 2.52, 2.43, 3.67, 3.83, 4.47, 4.08, 2.52, 1.856, 1.904, 4.01, 4.62,
			3.163, 1.667, 1.38, 2.417, 2.323, 4.95, 4.71, 1.05, 3.15, 4.3, 3.29, 3.3,
			4.06, 1.1, 2.16, 2.79, 1.89, 3.6, 3.51, 3.03, 2.73, 4.47, 2.73, 2.07,
			3.09, 2.52, 3.895, 0.875, 1.72, 1.85, 4.273, 1.917, 3.59, 1.93, 3.32,
			1.39, 0.84, 3.41, 3.54, 1.98, 4.89, 4.89, 1.44, 5.43, 4.8, 5.79, 0.99,
			3.3, 5.46, 4.14, 2.22, 1.92, 3.45, 5.26, 4.61, 3.48, 4.43, 1.5, 2.19,
			4.01, 1.0, 1.17, 3.267, 1.833, 2.13, 3.72, 2.91, 4.17, 2.52, 4.85, 1.21,
			1.98, 1.96, 1.85, 4.92, 2.86, 4.52, 2.52, 2.31, 2.34, 2.94, 1.68, 2.1,
			4.41, 0.63, 1.53, 2.728, 2.792, 2.31, 2.917, 2.043, 2.39, 1.26, 3.57,
			2.76, 3.42, 1.59, 1.53, 3.208, 1.442, 1.57, 2.69, 2.85, 2.49, 2.86, 2.0,
			2.1, 5.97, 3.82, 2.69, 1.5, 2.042, 3.088, 2.02, 2.63, 5.01, 2.52, 3.3,
			3.82, 2.49, 1.94, 2.76, 1.24, 2.45, 4.05, 5.68, 2.12, 1.68, 5.25, 1.17,
			4.29, 1.697, 1.333, 2.82, 4.11, 2.4, 1.29, 1.99, 1.59, 5.63, 3.96, 3.09,
			0.917, 2.0, 2.213, 3.03, 4.99, 3.92, 4.42, 1.22, 4.29, 3.09, 3.75, 3.57,
			3.33, 5.52, 3.03, 7.14, 3.54, 4.8, 3.3, 2.84, 2.85, 4.41, 4.2, 3.33, 3.45,
			2.32, 4.28, 3.63, 3.38, 0.5, 2.083, 2.107, 1.35, 2.73, 4.65, 2.83, 2.06,
			2.62, 2.85, 1.64, 2.67, 4.18, 2.57, 4.53, 2.07, 3.6, 3.69, 2.49, 1.292,
			5.508, 1.72, 2.87, 3.75, 4.27, 1.8, 5.22, 7.89, 1.16, 3.55, 2.47, 0.85,
			2.46, 5.22, 3.63, 4.78, 5.4, 0.5, 2.917, 3.803, 3.6, 2.43, 1.65, 2.715,
			2.925, 2.61, 2.045, 0.625, 1.333, 3.047, 3.003, 1.917, 1.83, 4.41, 2.28,
			2.37, 3.57, 3.27, 4.2, 2.88, 4.41, 4.98, 3.75, 4.2, 2.19, 3.55, 3.86,
			3.39, 3.69, 3.93, 3.25, 4.7, 4.48, 3.47, 2.28, 2.97, 3.15, 3.24, 1.917,
			2.083, 4.71, 5.207, 1.083, 3.78, 3.48, 2.4, 4.05, 3.06, 2.05, 2.27, 3.93,
			1.507, 3.083, 3.63, 5.02, 0.5, 2.31, 5.28, 2.71, 2.73, 3.36, 1.837, 2.333,
			3.51, 1.77, 3.45, 2.08, 3.08, 3.85, 2.94, 4.35, 3.48, 3.92, 0.57, 4.29,
			2.67, 5.64, 3.963, 1.917, 1.875, 1.665, 2.71, 3.41, 3.3, 3.03, 4.41,
			3.652, 1.958, 2.375, 3.385, 2.37, 3.16, 3.41, 2.04, 3.57, 6.66, 3.15,
			3.36, 1.56, 1.26, 2.97, 3.03, 3.54, 1.63, 3.65, 1.32, 1.47, 1.98, 5.37,
			6.3, 3.33, 2.58, 0.99, 1.95, 2.49, 4.98, 3.3, 2.82, 3.48, 0.93, 5.99,
			2.27, 2.91, 3.22, 5.805, 1.875, 3.115, 0.875, 3.28, 4.04, 3.15, 2.01,
			3.21, 2.47, 2.942, 1.708, 2.1, 3.71, 2.04, 2.97, 4.65, 0.94, 1.19, 2.1,
			0.75, 3.36, 2.76, 1.56, 3.33, 1.68, 1.11, 3.24, 2.873, 2.167, 3.3, 2.19,
			2.7, 1.74, 2.16, 3.57, 2.59, 2.78, 4.11, 2.75, 0.54, 5.72, 1.89, 4.19,
			3.78, 2.62, 4.56, 6.99, 2.58, 2.7, 2.812, 2.388, 2.75, 2.14, 3.6, 2.08,
			2.65, 3.18, 2.23, 4.25, 3.0, 2.85, 4.47, 3.75, 4.02, 4.32, 3.39, 3.06,
			4.252, 2.708, 3.18, 3.03, 5.1, 1.92, 4.23, 1.92, 2.82, 2.108, 3.292, 1.95,
			2.49, 1.9, 2.6, 3.39, 4.59, 4.02, 2.04, 3.49, 0.86, 3.93, 4.89, 3.27, 3.6,
			1.56, 2.28, 3.93, 3.51, 3.96, 3.81, 2.64, 4.2, 2.97, 1.8, 1.87, 5.19, 4.8,
			2.25, 2.958, 1.842, 0.77, 1.02, 2.7, 3.45, 1.92, 3.24, 2.97, 2.7, 3.04,
			4.4, 2.43, 4.62, 3.3, 2.97, 2.19, 3.0, 2.01, 5.35, 2.708, 2.917, 2.735,
			0.5, 2.05, 1.972, 1.958, 3.03, 2.4, 5.16, 3.45, 3.57, 3.06, 6.18, 2.49,
			3.78, 1.5, 0.84, 3.48, 0.69, 1.17, 3.69, 4.44, 2.04, 2.86, 1.77, 3.76,
			0.5, 1.792, 2.648, 4.29, 4.95, 2.1, 3.24, 4.14, 3.118, 2.042, 2.32, 1.89,
			6.05, 1.93, 2.39, 2.14, 4.1, 1.6, 1.58, 2.19, 1.86, 1.26, 2.76, 3.72,
			1.38, 4.02, 3.78, 3.64, 4.07, 1.51, 5.25, 2.343, 1.667, 4.02, 3.78, 3.3,
			1.95, 4.395, 2.625, 3.27, 2.28, 1.47, 4.09, 2.36, 3.99, 5.16, 2.46, 3.33,
			2.19, 4.89, 2.85, 1.45, 2.6, 3.9, 4.98, 0.865, 1.125, 1.01, 3.78, 3.48,
			2.02, 3.29, 0.75, 2.82, 3.593, 2.167, 2.042, 4.528, 2.34, 3.57, 3.332,
			1.708, 3.9, 5.04, 3.81, 3.27, 2.23, 3.32, 2.73, 2.88, 2.34, 3.69, 3.57,
			5.01, 3.93, 2.25, 3.6, 2.01, 1.5, 2.88, 1.89, 4.38, 1.77, 1.92, 1.44,
			6.21, 2.94, 2.82, 5.22, 1.36, 3.3, 4.56, 2.43, 3.18, 3.87, 1.23, 6.03,
			2.58, 3.24, 3.55, 2.12, 3.84, 2.16, 2.43, 2.31, 3.08, 3.67, 5.29, 5.06,
			2.43, 2.64, 4.23, 1.61, 1.75, 3.593, 2.167, 3.06, 4.73, 0.5, 3.54, 4.19,
			0.99, 1.09, 2.12, 1.77, 0.625, 3.167, 1.548, 2.07, 1.98, 2.82, 2.67, 4.0,
			3.02, 1.98, 3.09, 1.5, 4.17, 5.52, 2.41, 4.79, 2.91, 4.26, 4.7, 2.86, 4.3,
			1.452, 1.208, 3.067, 1.583, 1.92, 1.5, 0.708, 0.779, 1.833, 1.7, 3.89,
			3.51, 3.48, 2.94, 2.64, 4.019, 3.15, 1.59, 4.29, 3.87, 1.771, 2.58, 7.59,
			1.59, 1.53, 2.52, 2.469, 2.691, 3.63, 3.64, 2.6, 3.269, 3.511, 5.5, 5.239,
			4.891, 2.13, 1.95, 2.25, 3.6, 3.42, 1.74, 3.36, 2.34, 3.33, 3.76, 3.56,
			4.65, 3.12, 3.33, 1.42, 3.71, 2.17, 8.75, 1.2, 2.51, 3.6, 3.84, 1.6, 4.55,
			3.54, 1.17, 1.98, 2.55, 3.84, 3.0, 4.14, 3.413, 1.667, 1.125, 3.135, 2.27,
			3.96, 2.01, 0.87, 4.89, 3.84, 4.41, 3.81, 3.36, 3.66, 2.76, 2.37, 3.318,
			2.292, 1.59, 1.93, 2.51, 1.29, 3.7, 2.33, 4.05, 1.32, 3.9, 2.82, 4.86,
			2.22, 2.22, 2.76, 3.51, 0.72, 5.68, 4.91, 2.43, 2.25, 1.29, 3.93, 3.84,
			0.72, 2.56, 3.35, 4.08, 5.83, 2.0, 3.67, 1.83, 2.81, 2.94, 2.94, 1.62,
			3.66, 2.94, 1.87, 4.04, 4.68, 3.27, 1.26, 1.75, 1.8, 6.29, 2.07, 3.42,
			3.9, 2.82, 2.71, 2.31, 1.61, 2.667, 1.203, 1.38, 3.78, 2.58, 4.5, 2.38,
			2.3, 3.33, 3.88, 2.06, 2.7, 4.23, 1.23, 3.33, 4.47, 3.84, 1.08, 2.14,
			2.55, 3.64, 1.79, 3.415, 0.875, 1.583, 7.747, 5.94, 0.99, 3.48, 3.24,
			2.32, 1.65, 1.25, 0.99, 3.73, 2.67, 1.53, 4.02, 2.64, 2.49, 4.08, 3.54,
			3.57, 3.39, 1.71, 3.63, 0.553, 2.417, 4.86, 4.44, 4.02, 4.53, 3.04, 1.798,
			2.542, 1.29, 0.84, 1.44, 1.89, 3.12, 2.55, 2.82, 1.89, 1.74, 2.64, 1.66,
			2.36, 3.09, 2.79, 2.85, 3.75, 7.02, 5.16, 1.648, 2.042, 1.8, 2.55, 1.08,
			5.19, 2.52, 2.73, 1.77, 2.91, 2.7, 3.81, 2.43, 2.79, 4.08, 4.92, 0.76,
			3.59, 4.29, 4.95, 3.27, 2.46, 1.82, 5.602, 2.208, 1.69, 1.82, 2.86, 2.81,
			1.29, 1.47, 3.78, 3.84, 2.23, 4.04, 6.49, 5.25, 3.42, 2.73, 5.13, 2.82,
			4.17, 4.06, 1.88, 2.55, 2.67, 2.79, 2.08, 3.17, 1.86, 5.47, 7.31, 2.19,
			3.3, 2.49, 1.38, 1.18, 3.53, 4.62, 3.6, 5.37, 1.94, 3.6, 1.59, 2.642,
			0.958, 1.98, 0.5, 1.26, 1.877, 2.833, 2.375, 1.885, 0.81, 4.855, 1.625,
			3.45, 1.75, 1.375, 0.875, 0.68, 1.237, 1.583, 1.84, 4.67, 5.17, 1.532,
			0.708, 3.94, 2.09, 1.77, 1.14, 2.19, 2.58, 3.51, 2.01, 2.578, 2.792, 3.45,
			2.34, 3.6, 4.08, 3.84, 2.4, 2.61, 3.54, 3.15, 3.427, 0.833, 2.82, 4.02,
			8.268, 1.292, 3.1, 1.25, 2.33, 3.43, 2.583, 1.917, 2.97, 1.98, 2.64, 3.69,
			3.36, 3.39, 1.77, 3.03, 6.12, 3.79, 4.11, 3.81, 1.81, 0.74, 3.083, 2.707,
			2.43, 2.7, 1.95, 2.19, 2.8, 3.657, 2.333, 1.792, 2.041, 2.047, 1.17, 1.71,
			2.43, 2.91, 2.158, 2.042, 2.85, 3.66, 3.33, 1.41, 3.12, 2.61, 2.17, 3.41,
			1.992, 2.958, 3.48, 2.49, 3.27, 3.81, 2.37, 7.863, 1.917, 4.26, 3.19,
			3.53, 2.76, 2.64, 1.32, 3.42, 4.86, 4.02, 2.04, 2.25, 3.99, 3.39, 4.14,
			5.19, 1.83, 3.06, 4.62, 4.98, 4.47, 1.95, 3.75, 2.22, 1.95, 4.2, 1.56,
			2.88, 4.2, 2.55, 1.68, 4.14, 3.3, 2.25, 0.78, 1.41, 4.98, 1.62, 2.43,
			1.47, 0.9, 2.052, 2.208, 6.33, 1.95, 1.29, 3.18, 3.79, 2.12, 3.51, 3.49,
			2.36, 4.2, 5.13, 4.92, 2.19, 1.32, 3.57, 2.91, 1.95, 2.58, 2.115, 1.845,
			4.11, 5.55, 2.7, 2.52, 5.58, 2.31, 1.123, 1.667, 2.5, 1.22, 4.56, 3.66,
			5.91, 4.445, 2.125, 1.65, 3.87, 4.17, 3.897, 2.583, 5.11, 3.003, 1.167,
			2.45, 1.98, 0.905, 1.375, 1.29, 3.03, 6.42, 2.85, 1.55, 0.5, 1.32, 1.25,
			2.25, 1.667, 4.933, 5.94, 1.86, 3.21, 3.03, 2.97, 3.67, 1.19, 2.07, 0.99,
			2.52, 2.16, 2.88, 1.557, 1.833, 1.95, 5.82, 4.56, 2.07, 2.55, 0.75, 2.79,
			1.89, 1.89, 3.84, 3.13, 1.17, 4.25, 7.29, 3.66, 2.98, 3.23, 2.542, 1.298,
			5.29, 1.4, 2.64, 0.96, 1.35, 2.0, 0.52, 4.71, 3.24, 0.9, 3.667, 1.583,
			7.608, 2.292, 3.03, 1.5, 0.81, 1.688, 1.042, 1.42, 3.29, 1.675, 2.375,
			1.29, 1.86, 6.87, 1.42, 0.83, 0.87, 3.36, 1.42, 4.04, 3.72, 2.91, 1.84,
			1.2, 2.0, 2.46, 4.05, 4.33, 2.39, 4.77, 6.69, 4.86, 0.57, 1.708, 3.812,
			1.17, 2.13, 3.91, 3.29, 1.47, 1.83, 2.04, 6.21, 5.43, 3.78, 5.04, 3.8,
			0.5, 1.32, 3.38, 2.8, 2.778, 2.042, 1.8, 2.79, 0.69, 2.61, 2.82, 2.64,
			2.7, 1.89, 2.61, 1.02, 5.82, 5.82, 3.51, 1.32, 1.86, 2.292, 1.518, 1.23,
			3.69, 1.81, 3.74, 3.51, 3.51, 3.06, 4.17, 3.9, 4.03, 1.79, 4.08, 1.71,
			5.55, 2.31, 2.79, 2.55, 2.7, 1.35, 4.59, 2.29, 4.4, 5.25, 2.7, 4.71, 4.78,
			2.84, 3.18, 4.02, 2.16, 4.05, 3.29, 1.75, 3.09, 1.98, 2.4, 2.1, 4.17,
			1.05, 2.083, 2.357, 2.67, 2.19, 3.33, 2.25, 0.96, 2.85, 2.542, 1.208,
			1.44, 1.74, 1.62, 2.49, 3.81, 3.69, 2.37, 3.48, 5.31, 2.91, 1.41, 2.25,
			2.76, 2.17, 2.0, 3.15, 4.02, 2.1, 2.1, 4.18, 3.68, 3.21, 1.06, 2.15, 3.24,
			1.92, 2.19, 4.35, 3.69, 2.22, 3.39, 1.48, 2.96, 2.16, 3.12, 2.76, 2.25,
			1.98, 5.37, 1.42, 4.22, 3.84, 4.56, 2.605, 1.625, 3.75, 3.7, 6.47, 2.88,
			2.04, 3.63, 4.14, 4.92, 5.22, 2.49, 4.45, 2.42, 2.34, 4.56, 3.73, 3.14,
			4.29, 4.23, 5.31, 2.67, 4.65, 5.1, 4.3, 3.17, 4.5, 4.86, 2.73, 2.85, 3.09,
			3.54, 2.22, 2.25, 4.44, 3.24, 4.17, 2.26, 3.26, 4.32, 4.35, 2.74, 0.65,
			2.55, 2.07, 4.14, 2.79, 4.762, 1.958, 4.32, 1.86, 2.73, 3.93, 4.29, 1.86,
			2.37, 3.192, 2.208, 2.58, 0.84, 3.19, 2.75, 3.042, 2.148, 3.21, 2.45, 6.1,
			2.33, 3.21, 5.34, 4.62, 2.67, 3.27, 3.4, 1.02, 2.5, 6.55, 1.715, 2.125,
			1.75, 3.33, 3.95, 2.58, 2.88, 2.64, 2.79, 1.71, 3.66, 3.4, 1.58, 2.97,
			2.37, 3.93, 2.88, 3.33, 3.24, 5.43, 5.14, 3.56, 2.13, 3.39, 6.22, 1.29,
			3.69, 3.12, 4.19, 1.65, 5.79, 3.66, 5.95, 1.49, 1.65, 5.43, 4.05, 2.25,
			2.43, 0.57, 2.17, 2.0, 2.01, 2.58, 2.82, 3.06, 2.34, 2.76, 7.96, 3.56,
			2.65, 2.72, 2.73, 1.68, 1.38, 5.37, 4.63, 1.67, 2.79, 3.06, 5.373, 1.167,
			2.13, 3.87, 2.73, 3.6, 3.57, 3.42, 3.12, 4.11, 3.9, 3.3, 1.99, 2.3, 1.92,
			2.16, 3.87, 3.863, 1.417, 2.1, 1.56, 2.333, 2.707, 4.54, 2.87, 3.53, 3.06,
			4.26, 8.747, 1.333, 5.65, 1.16, 1.95, 3.15, 3.57, 2.07, 2.97, 4.11, 2.4,
			2.52, 4.59, 2.94, 5.7, 0.85, 0.77, 2.53, 2.99, 2.07, 1.98, 3.33, 2.31,
			2.28, 1.02, 2.01, 0.6, 2.41, 4.747, 2.083, 4.17, 3.21, 2.88, 2.02, 4.01,
			3.57, 1.26, 2.1, 4.71, 1.02, 3.42, 3.18, 4.38, 4.62, 2.04, 0.91, 2.3,
			3.81, 2.07, 5.49, 1.86, 1.48, 2.42, 3.93, 4.62, 2.842, 2.708, 2.13, 2.37,
			1.98, 2.82, 5.58, 3.16, 0.53, 4.11, 4.35, 3.39, 1.66, 5.06, 3.6, 3.0,
			2.31, 3.57, 2.01, 5.73, 3.33, 2.79, 1.88, 3.67, 3.09, 5.35, 2.63, 4.2,
			5.67, 4.77, 1.42, 4.37, 7.11, 3.66, 2.97, 3.87, 3.0, 4.59, 3.57, 2.52,
			5.32, 4.43, 3.12, 4.95, 3.03, 1.89, 1.26, 2.29, 2.63, 4.95, 4.08, 3.12,
			3.27, 5.25, 4.09, 4.65, 3.68, 4.26, 3.813, 1.167, 2.13, 2.31, 3.72, 4.11,
			6.21, 0.87, 3.12, 2.11, 3.26, 0.39, 1.54, 3.77, 3.09, 3.96, 1.77, 3.58,
			4.55, 5.25, 1.59, 1.77, 1.83, 4.14, 2.7, 3.51, 1.47, 4.44, 3.013, 1.667,
			3.84, 6.91, 1.55, 4.29, 3.12, 3.77, 2.288, 1.042, 2.36, 2.34, 1.89, 3.54,
			3.12, 1.6, 1.833, 3.197, 4.08, 2.74, 5.84, 3.48, 2.85, 2.71, 6.1, 0.5,
			3.56, 5.1, 4.24, 2.66, 4.11, 3.62, 2.5, 3.36, 3.54, 1.68, 2.97, 3.66,
			3.73, 2.24, 2.17, 4.16, 1.92, 2.19, 4.62, 3.282, 2.208, 3.93, 3.78, 4.23,
			2.71, 2.0, 2.43, 2.04, 2.28, 1.2, 3.06, 2.13, 7.86, 3.72, 1.86, 3.18,
			1.47, 4.98, 4.86, 0.66, 3.9, 3.72, 2.91, 1.71, 2.73, 2.22, 4.41, 3.75,
			2.04, 2.1, 2.22, 5.04, 3.39, 2.07, 1.855, 1.625, 2.13, 1.36, 3.59, 5.97,
			0.93, 2.572, 1.208, 1.39, 1.76, 2.28, 2.31, 2.62, 6.44, 4.47, 5.02, 1.53,
			3.56, 4.47, 2.04, 2.02, 2.7, 3.573, 2.417, 3.96, 2.923, 2.417, 4.05, 2.16,
			3.33, 3.81, 3.15, 2.43, 3.99, 3.81, 3.63, 3.06, 1.54, 4.01, 3.12, 4.43,
			3.95, 4.41, 1.13, 1.89, 3.75, 1.66, 2.03, 3.34, 2.18, 4.05, 2.04, 3.96,
			3.48, 3.51, 1.89, 2.58, 2.55, 3.96, 2.97, 4.59, 5.4, 1.222, 2.708, 2.01,
			2.82, 3.12, 1.8, 2.2, 2.84, 4.35, 1.5, 1.89, 3.6, 1.53, 3.75, 3.39, 2.26,
			2.42, 2.19, 3.3, 2.67, 4.62, 3.02, 0.66, 3.69, 4.77, 2.1, 2.34, 2.25,
			2.97, 2.43, 2.43, 2.52, 3.96, 3.93, 4.412, 1.708, 2.31, 4.77, 3.31, 3.65,
			3.42, 4.11, 3.33, 1.59, 2.61, 3.12, 0.84, 3.75, 5.43, 1.17, 1.59, 3.93,
			2.04, 2.98, 3.26, 2.28, 2.85, 4.44, 3.18, 3.84, 3.42, 2.7, 2.85, 2.25,
			3.15, 3.66, 3.54, 3.3, 2.79, 2.85, 2.31, 1.59, 1.022, 1.708, 2.64, 2.52,
			4.29, 1.95, 1.455, 1.875, 4.29, 2.64, 2.1, 4.75, 3.83, 3.81, 2.28, 5.23,
			4.35, 5.94, 2.0, 3.21, 1.77, 6.39, 4.11, 4.05, 7.36, 1.79, 3.72, 1.47,
			1.83, 3.81, 4.32, 4.71, 1.47, 2.4, 3.015, 3.145, 2.45, 2.19, 3.573, 2.667,
			4.53, 2.28, 3.03, 3.21, 3.21, 1.41, 3.0, 3.76, 4.08, 3.36, 2.47, 1.65,
			6.5, 1.71, 3.27, 4.21, 4.46, 3.85, 2.75, 1.74, 2.49, 3.907, 2.583, 2.9,
			4.59, 4.32, 2.49, 2.34, 4.78, 2.18, 2.94, 4.47, 2.97, 2.71, 4.56, 1.97,
			3.96, 1.133, 2.917, 2.01, 1.53, 3.66, 1.26, 3.67, 0.86, 4.86, 7.18, 1.475,
			2.125, 4.67, 3.34, 0.95, 2.877, 2.583, 2.28, 3.93, 4.02, 2.74, 1.4, 2.25,
			3.07, 1.37, 6.6, 0.81, 2.4, 1.53, 4.8, 2.85, 1.11, 3.21, 2.66, 1.75, 3.54,
			2.22, 3.63, 3.48, 4.56, 3.0, 2.16, 2.88, 3.78, 1.838, 2.542, 1.2, 2.7,
			2.4, 3.48, 3.33, 2.4, 2.16, 3.93, 1.65, 2.13, 5.52, 4.02, 2.13, 2.05,
			3.89, 4.95, 1.56, 3.99, 2.97, 3.57, 4.17, 4.53, 2.1, 3.49, 4.86, 2.07,
			3.16, 2.81, 3.03, 1.8, 2.82, 2.67, 2.58, 2.07, 3.09, 3.66, 2.49, 3.33,
			3.99, 2.29, 3.26, 1.23, 3.63, 3.51, 3.39, 1.62, 2.86, 0.5, 3.75, 3.27,
			1.71, 2.17, 5.06, 6.07, 3.45, 2.13, 0.5, 3.689, 0.82, 1.76, 3.541, 5.85,
			4.29, 4.44, 4.17, 2.712, 2.208, 1.779, 2.76, 2.061, 2.2, 1.729, 2.083,
			1.708, 2.629, 7.051, 6.609, 2.84, 4.141, 2.189, 9.75, 4.92, 3.901, 2.37,
			2.46, 4.05, 1.95, 0.99, 2.949, 2.66, 2.68, 1.671, 2.61, 2.52, 6.269,
			1.771, 2.05, 2.78, 2.729, 2.401, 2.279, 7.051, 0.63, 3.03, 0.91, 1.49,
			4.29, 2.58, 3.42, 3.453, 1.167, 2.458, 3.091, 3.09, 1.381, 2.4, 2.52,
			2.22, 2.01, 2.309, 4.411, 3.93, 0.96, 2.94, 4.3, 1.69, 3.24, 3.052, 3.208,
			1.2, 2.67, 3.48, 3.12, 3.37, 0.5, 2.28, 1.83, 2.37, 1.83, 1.14, 2.97,
			3.69, 1.35, 1.542, 2.208, 3.66, 1.5, 2.97, 2.46, 2.25, 3.24, 2.43, 4.86,
			3.9, 0.81, 3.21, 2.89, 1.917, 1.943, 2.88, 3.76, 2.54, 3.36, 2.178, 3.042,
			1.46, 1.0, 1.11, 3.0, 3.36, 3.51, 3.27, 4.71, 1.98, 3.9, 3.0, 2.5, 1.02,
			3.69, 3.335, 3.555, 1.89, 5.19, 3.9, 4.06, 2.75, 0.63, 4.08, 3.06, 1.83,
			2.95, 4.91, 2.571, 3.339, 2.58, 1.98, 9.291, 1.779, 2.82, 5.91, 1.8, 2.34,
			4.68, 2.67, 3.51, 1.32, 5.91, 4.41, 4.59, 2.25, 4.38, 3.99, 5.13, 4.99,
			2.75, 3.03, 3.33, 3.36, 3.03, 3.03, 2.68, 4.52, 2.85, 1.5, 3.09, 2.28,
			2.16, 2.97, 4.41, 3.36, 2.1, 4.17, 1.78, 4.31, 3.12, 0.93, 4.02, 5.94,
			3.8, 7.29, 3.24, 1.83, 2.1, 1.77, 2.58, 2.875, 1.685, 2.28, 2.16, 2.61,
			3.93, 3.15, 2.94, 4.17, 1.71, 3.12, 2.37, 4.02, 2.91, 2.07, 3.09, 4.02,
			3.51, 1.98, 4.2, 1.17, 2.25, 1.77, 1.56, 3.42, 2.4, 4.2, 1.53, 2.007,
			2.833, 1.38, 3.59, 2.37, 3.63, 4.41, 2.88, 2.85, 3.21, 3.18, 2.94, 2.07,
			1.74, 2.22, 1.27, 6.41, 2.2, 4.04, 1.77, 1.92, 3.87, 1.38, 4.35, 0.66,
			3.96, 2.49, 4.59, 2.64, 3.48, 2.62, 2.21, 2.94, 2.79, 1.89, 2.43, 2.28,
			3.33, 2.64, 5.52, 6.18, 3.93, 4.59, 2.61, 3.1, 1.28, 1.84, 3.29, 5.04,
			4.14, 3.12, 4.05, 4.32, 1.8, 2.91, 4.14, 5.04, 2.04, 4.23, 1.41, 3.03,
			3.72, 2.46, 3.45, 1.92, 3.395, 1.875, 2.49, 4.32, 4.385, 2.875, 5.01,
			2.86, 2.84, 4.498, 0.542, 3.69, 2.1, 3.48, 3.54, 1.86, 4.14, 2.34, 2.292,
			3.28, 1.958, 1.847, 2.083, 3.42, 1.98, 2.98, 3.95, 2.04, 2.67, 1.92, 2.43,
			3.24, 1.62, 2.73, 1.95, 2.37, 2.79, 3.36, 2.4, 2.19, 3.46, 1.46, 2.07,
			3.45, 2.91, 2.64, 3.51, 2.4, 3.25, 2.34, 1.97, 3.97, 2.03, 1.3, 1.11,
			1.055, 17.251, 3.493, 74.411, 0.78, 1.53, 1.32, 2.22, 1.62, 1.86, 1.92,
			1.792, 1.688, 4.18, 1.88, 2.29, 2.6, 3.867, 1.833, 2.65, 3.057, 1.583,
			1.38, 1.65, 1.44, 2.07, 3.04, 5.18, 3.72, 2.55, 5.11, 3.74, 3.27, 1.11,
			1.17, 1.23, 2.423, 1.417, 13.8, 1.0, 0.5, 3.35, 56.94
		],
		"transcript_en": [
			"[MUSIC PLAYING]",
			"",
			"DAVID J. MALAN: All right.",
			"This is CS50, and this is week 7.",
			"And today's focus is going to be entirely on data--",
			"the process of collecting it, the process of storing it,",
			"the process of searching it, and so much more.",
			"You'll recall that last week we started off by playing around",
			"with the relatively small data set.",
			"We asked everyone for what their preferred house at Hogwarts might be.",
			"And then we proceeded to analyze that data a little bit using some Python",
			"and counting up how many people wanted Gryffindor or Slytherin or the others,",
			"as well.",
			"And we ultimately did that by using a Google form to collect it.",
			"And we stored all of the data in a Google spreadsheet, which we then",
			"exported, of course, as a CSV file.",
			"So this week, we thought we'd collect a little more data",
			"and see what kinds of problems arise when",
			"we start using only a spreadsheet or, in turn, a CSV file",
			"to store the data that we care about.",
			"So in fact, if you could go ahead and go to this URL here that you see,",
			"you should see another Google form, this one asking you",
			"some different questions.",
			"All of us probably have some preferred TV shows, now more than ever, perhaps.",
			"And what we'd like to do is ask everyone to input",
			"into that form their favorite TV show followed by the genre",
			"or genres into which that particular TV show falls.",
			"So go ahead and take a moment to do that.",
			"And if you're unable to follow along at home, what folks are looking at",
			"is a form quite like this one here, whereby we're just asking them",
			"for the title of their preferred TV show and the genre",
			"or genres of that specific TV show.",
			"All right.",
			"So let's go ahead and start to look at some of this data that's come in.",
			"Here is the resulting Google spreadsheet that Google Forms has created for us.",
			"And you'll notice that by default, Google Forms, this particular tool,",
			"has three different columns, at least for this form.",
			"One is a timestamp, and Google automatically",
			"gives us that based on what day and time everyone was buzzing in",
			"with the responses.",
			"Then they have a header row beyond that for title and genres.",
			"I've manually boldfaced it in advance just to make it stand out.",
			"But you'll notice that the headings here, Title and Genres,",
			"perfectly matches the question that we asked in the Google form.",
			"That allows us to therefore line up your responses with our questions.",
			"And you can see here Punisher was the first favorite TV",
			"show to be inputted followed by The Office, Breaking Bad, New Girl, Archer,",
			"another Office, and so forth.",
			"And in the third column, under Genres, you'll",
			"see that there's something curious here.",
			"While some of the cells--",
			"that is, the little boxes of text--",
			"have just single words like \"comedy\" or \"drama,\"",
			"you'll notice that some of them have a comma-separated list.",
			"And that comma-separated list is because some of you checked, as you could,",
			"multiple check boxes to indicate that Breaking Bad is a crime genre",
			"drama and also thriller.",
			"And so the way Google Forms handles this is a bit sleazily in the sense",
			"that they just drop all of those values as a comma-separated list",
			"inside of the spreadsheet itself.",
			"And that's potentially a problem if we ultimately download",
			"this as a CSV file, comma-separated values,",
			"because now you have commas in between the commas.",
			"Fortunately, there's a solution to that that we'll ultimately see.",
			"So we've got a good amount of data here.",
			"In fact, if I keep scrolling down, we'll see a few hundred responses now.",
			"And it would be nice to analyze this data in some way",
			"and figure out what the most popular TV show is, maybe search for new shows",
			"I might like via their genre.",
			"So you can imagine some number of queries that could",
			"be answered by way of this data set.",
			"But let's first consider the limitations of leaving this data",
			"in just a spreadsheet like this.",
			"All of us are probably in the habit of using occasionally",
			"Google Spreadsheets, Apple Numbers, Microsoft Excel, or some other tool.",
			"So let's consider what spreadsheets are good at and what they are bad at.",
			"Would anyone like to volunteer an answer to the first of those?",
			"What is a spreadsheet good at or good for?",
			"Yeah, Andrew?",
			"What's your thinking on spreadsheets?",
			"AUDIENCE: [INAUDIBLE]",
			"DAVID J. MALAN: OK, very good for quickly sorting.",
			"I like that.",
			"I could click on the top of the Title column, for instance,",
			"and immediately sort all of those titles by alphabetically.",
			"I like that.",
			"Other reasons to use a spreadsheet-- what problems do they solve?",
			"What are they good at?",
			"Other thoughts on spreadsheets.",
			"Yeah, how about Peter?",
			"AUDIENCE: Storing large amounts of data that you can later analyze.",
			"DAVID J. MALAN: OK, so storing large amounts",
			"of data that you can later analyze.",
			"It's kind of a nice model for storing lots of rows of data, so to speak.",
			"I will say that there actually is a limit.",
			"And in fact, back in the day, I learned what this limit is.",
			"Long story short, in graduate school, I was using a spreadsheet",
			"to analyze some research data.",
			"And at one point, I had more data than Excel supported rows for.",
			"Specifically, I had some 65,536 rows, which",
			"was too many at that point for Excel at the time,",
			"because, long story short, if you recall from a spreadsheet program",
			"like Google Spreadsheets, every row is numbered from 1 on up.",
			"Well, unfortunately, at the time, Microsoft",
			"had used a 16-bit integer, 16 bits or 2 bytes,",
			"to represent each of those numbers.",
			"And it turns out the 2 to the 16th power is roughly 65,000.",
			"So at that point, I maxed out the total number of rows.",
			"Now, to Peter's point, they've increased that in recent years.",
			"And you can actually store a lot more data.",
			"So spreadsheets are indeed good at that.",
			"But they're not necessarily good at everything, because at some point,",
			"you're going to have more data potentially in a spreadsheet",
			"than your Mac or PC can handle.",
			"In fact, if you're actually trying to build an application, whether it's",
			"Twitter, Instagram, or Facebook or anything of that scale,",
			"those companies are certainly not storing their data, suffice it to say,",
			"in a spreadsheet, because there would just be way too much data to use.",
			"And no one could literally open it on their computer.",
			"So we'll need a solution to that problem of scale.",
			"But I don't think we need to throw out what works well about spreadsheets.",
			"So you can store indeed a lot of data in row form.",
			"But it would seem that you can also store a lot of data in column form.",
			"And even though I'm only showing columns A, B, and C,",
			"of course, you've probably used spreadsheets",
			"where you add more columns--",
			"D, E, F, and so forth.",
			"So what's the right mental model for how to think about rows",
			"versus columns in a spreadsheet?",
			"I feel like we probably use them in a somewhat different way conceptually.",
			"We might think about them a little differently.",
			"What's the difference between rows and columns in a spreadsheet?",
			"Sofia.",
			"AUDIENCE: Adding more entries.",
			"Adding more data is--",
			"those are within the rows, but then the actual attributes or characteristics",
			"of the data should be in columns.",
			"DAVID J. MALAN: Exactly.",
			"When you add more data to the spreadsheet,",
			"you should really be adding to the bottom of it,",
			"adding more and more rows.",
			"So these things sort of grow vertically, even though of course that's",
			"just a human's perception of it.",
			"They grow from top to bottom by adding more and more rows.",
			"But to Sofia's point, your columns represent",
			"what we might call attributes or fields or any other such characteristic that",
			"is a type of data that you're storing.",
			"So in this case of our form, Timestamp is the first column.",
			"Title is the second column.",
			"Genres is the third column.",
			"And those columns can indeed be thought of as fields or attributes, properties",
			"of your data.",
			"And those are properties that you should really decide on in advance when you're",
			"first creating the form, in our case, or when you're manually creating",
			"the spreadsheet in another case.",
			"You should not really be in the habit, when",
			"using spreadsheets, of adding data from left",
			"to right, adding more and more columns, unless you",
			"decide to collect more types of data.",
			"So just because someone adds a new favorite TV show to your data set,",
			"you shouldn't be adding that from left to right in a new column.",
			"You should indeed be adding it from top to bottom.",
			"But suppose that we actually decided to collect more information from everyone.",
			"Maybe that form had instead asked you for your name or your email address",
			"or any other questions.",
			"Those properties or attributes or fields would belong as new columns.",
			"So this is to say we generally decide on the layout of our data,",
			"the schema of our data, in advance.",
			"And then from there on out, we proceed to add, add, add more rows, not",
			"columns, unless we change our mind and need to change",
			"the schema of our particular data.",
			"So it turns out that spreadsheets are indeed wonderfully useful,",
			"to Peter's point, for large or reasonably large",
			"data sets that we might collect.",
			"And we can, of course, per last week, export those data sets as CSV files.",
			"And so we can go from a spreadsheet to a simple text",
			"file stored in ASCII or Unicode, more generally, on your own hard drive",
			"or somewhere in the cloud.",
			"And you can actually think of that file, that .CSV file,",
			"as what we might call a flat-file database.",
			"A database is, generally speaking, a file that stores data.",
			"Or it's a program that stores data for you.",
			"And all of us have probably thought about or used databases in some sense.",
			"You're probably familiar with the fact that all",
			"of those same big websites, Google and Twitter and Facebook and others, use",
			"databases to store our data.",
			"Well, those databases are either just really",
			"big files containing lots of data or special programs",
			"that are storing our data for us.",
			"And a flat file is just referring to the fact",
			"that it really is a very simple design.",
			"In fact, years ago, decades ago, humans decided",
			"when storing data in simple text files that if you",
			"want to store different types of data, like, to Sofia's point,",
			"different properties or attributes, well, let's keep it simple.",
			"Let's just separate those columns with commas",
			"in our flat-file database, a.k.a.",
			"a CSV.",
			"You can use other things.",
			"You can use tabs.",
			"There's things called TSVs, for Tab-Separated Values.",
			"And frankly, you can use anything you want.",
			"But there is a corner case.",
			"And we've already seen a preview of it.",
			"What if your actual data has a comma in it?",
			"What if the title of your favorite TV show has a comma?",
			"What if Google is presuming to store genres as a comma-separated list?",
			"Bad things can happen if using a CSV as your flat-file database.",
			"But there are solutions to that.",
			"And in fact, what the world typically does",
			"is whenever you have commas inside of your CSV file,",
			"you just make sure that the whole string is double",
			"quoted on the far left and far right.",
			"And anything inside of double quotes is not",
			"mistaken thereafter as delineating a column",
			"as the other commas in the file might.",
			"So that's all that's meant by a flat-file database.",
			"And CSV is perhaps one of the most common, the most common, formats",
			"thereof, if only because all of these programs,",
			"like Google Spreadsheets and Excel and Numbers,",
			"allow you to save your files as CSVs.",
			"Now, long story short, those of you who have",
			"used fancier features of spreadsheets like built-in functions and formulas",
			"and those kinds of things, those are built in",
			"and proprietary to Google Spreadsheets and Excel and Numbers.",
			"You cannot use formulas in a CSV file or a TSV file or in a flat-file database,",
			"more generally.",
			"You can only store static--",
			"that is, unchanging-- values.",
			"So when you export the data, what you see is what you get.",
			"And that's why people use fancier programs",
			"like Excel and Numbers and Google Spreadsheets,",
			"because you get more functionality.",
			"But if you want to export the data, you can only",
			"get indeed the raw textual data out of it.",
			"But I daresay that's going to be OK.",
			"In fact, Brian, do you mind if I go ahead",
			"and download this spreadsheet as a CSV file now?",
			"BRIAN YU: Yep, go ahead.",
			"DAVID J. MALAN: All right.",
			"I'm going to go ahead in Google Spreadsheets and go to File, Download.",
			"And you can see a whole bunch of options--",
			"PDF, Web Page, Comma-Separated Values, which is the one I want.",
			"So I'm going to indeed go ahead and choose CSV",
			"from this dropdown in spreadsheets.",
			"That, of course, downloaded that file for me.",
			"And now I'm going to go ahead and go into our familiar CS50 IDE.",
			"You'll recall that last week I was able to upload a file into the IDE.",
			"And I'm going to go ahead and do the same here this week, as well.",
			"I'm going to go ahead and grab my file, which ended up in my Downloads",
			"folder on my particular computer here.",
			"And I'm going to go ahead and drag and drop this into the IDE",
			"such that it ends up in my home directory, so to speak.",
			"So now I have this file, Favorite TV Shows Forms.",
			"And in fact, if I double click this within the IDE,",
			"you'll see familiar data now.",
			"Timestamp comma title comma genres is our header row",
			"that contains the names of the properties or attributes in this file.",
			"Then we've got our timestamps comma favorite title comma and then",
			"a comma-separated list of genres.",
			"And here indeed, notice that Google took care",
			"to use double quotes around any values that themselves had commas.",
			"So it's a relatively simple file format.",
			"And I could certainly just kind of skim through this,",
			"figuring out who likes The Office, who likes Breaking Bad, or other shows.",
			"But per last week, we now have a pretty useful programming language",
			"at our disposal, Python, that could allow us to start manipulating",
			"and analyzing this data more readily.",
			"And here to my point last week about using the right tool for the job,",
			"you could absolutely do everything we're about to do in all weeks prior of CS50.",
			"We could have used C for what we're about to do.",
			"But as you can probably glean, C tends to be painful for certain things,",
			"like anything involving string manipulation,",
			"changing strings, analyzing strings.",
			"It's just a real pain, right?",
			"God forbid you had to take this CSV file and load it all into memory, not",
			"unlike your spell checker.",
			"You would have to be using malloc all over the place or realloc or the like.",
			"There's just a lot of heavy lifting involved in just analyzing a text file.",
			"So Python does all of that for us by just giving us",
			"more functions at our disposal with which",
			"to start analyzing and opening data.",
			"So let me go ahead and close this file.",
			"And let me go ahead and create a new one called favorites.py,",
			"wherein I'm going to start playing with this data set",
			"and see if we can't start answering some questions about it.",
			"And frankly, to this day, 20-plus years after learning how",
			"to program for the first time, I myself am",
			"very much in the habit when writing a new program of just starting simple",
			"and not solving the problem I ultimately want to but something simpler just",
			"as a sort of proof of concept to make sure",
			"I have the right plumbing in place.",
			"So by that, I mean this.",
			"Let's go ahead and write a quick program that simply opens up this file, the CSV",
			"file, iterates over it top to bottom, and just prints out each of the titles,",
			"just as a quick sanity check that I know what I'm doing",
			"and I have access to the data therein.",
			"So let me go ahead and import CSV.",
			"And then I can do this in a few different ways.",
			"But by now, you've probably seen or remembered",
			"my using something like the open command and the",
			"with keyword to open and eventually automatically close this file for me.",
			"This file is called Favorite TV Shows - Form Responses 1.csv.",
			"",
			"And I'm going to open this up in read mode.",
			"Strictly speaking, the r is not required.",
			"You might see examples online not including it.",
			"That's because read is the default. But for parity with C and fopen,",
			"I'm going to be explicit and actually do \"r.\"",
			"And I'm going to go ahead and give this a variable name of file.",
			"So this line 3 here has the effect of opening that CSV file in read-only mode",
			"and creating a variable called file via which I can reference it.",
			"Now I'm going to go ahead and use some of that CSV functionality.",
			"I'm going to give myself what we keep calling a reader, which",
			"I could call it xyz, anything else.",
			"But \"reader\" kind of describes what this variable is going to do.",
			"And it's going to be the return value of calling csv.reader on that file.",
			"And so essentially, the CSV library, per last week,",
			"has a lot of fancy features built in.",
			"And all it needs as input is an already opened text file.",
			"And then it will then wrap that file, so to speak,",
			"with a whole bunch of more useful functionality,",
			"like the ability to read it column and row at a time.",
			"All right.",
			"Now I'm going to go ahead and, you know what, just for now,",
			"I'm going to skip the first row.",
			"I'm going to skip the first row, because the first row has my headings--",
			"Timestamp, Title, and Genres.",
			"And I know what my columns are, so I'm just going to ignore that line for now.",
			"And now I'm going to do this.",
			"For row in reader, let me go ahead and print out, quite simply, row.",
			"And I only want title, so I think if it's three columns from left to right,",
			"it's 0, 1, 2.",
			"So I want to print out column bracket 1, which",
			"is going to be the second column zero indexed.",
			"All right.",
			"Let me go ahead and save that, go down to my terminal window,",
			"and run python of favorites.py and cross my fingers.",
			"OK.",
			"Voila.",
			"It flew by super fast.",
			"But it looks like, indeed, these are all of the TV",
			"shows that folks have inputted.",
			"Indeed, there's a few hundred if I keep scrolling up.",
			"So it looks like my program is working.",
			"But let's improve it just a little bit.",
			"It turns out that using the csv.reader isn't necessarily",
			"the best approach in Python.",
			"Many of you have already discovered a DictReader, a dictionary reader,",
			"which is nice, because then you don't have to know or keep double checking",
			"what number column your data is in.",
			"You can instead refer it to by the header itself, so by \"title\"",
			"or by \"genres.\"",
			"This is also good, because if you or maybe a colleague",
			"are sort of messing around with the spreadsheet",
			"and they rearrange the columns by dragging them left or right,",
			"any numbers you have used in your code, 0, 1, 2 on up,",
			"could suddenly be incorrect if your colleague has reordered those columns.",
			"So using a dictionary reader tends to be a little more robust, because it",
			"uses the titles, not the mere numbers.",
			"It's still fallible if someone, yourself or someone else,",
			"changes the values in that very first row and renames titles or genres.",
			"Then things are going to break.",
			"But at that point, we kind of have to blame you",
			"for not having kept track of your code versus your data.",
			"But still a risk.",
			"So I'm going to change this to dictionary reader or DictReader here.",
			"And pretty much the rest of my code can be the same",
			"except I don't need this hack here on line 5.",
			"I don't need to just skip over to the next row from the get-go,",
			"because I now want the dictionary reader to handle the process of reading",
			"that first row for me.",
			"But otherwise, everything else stays the same",
			"except for this last line, where now I think",
			"I can now use row as a dictionary, not as a list per se,",
			"and print out specifically the title from each given row.",
			"So let me go ahead and run python of favorites.py again.",
			"And voila, it looks like I got the same result, several hundred of them.",
			"But let me stipulate that it's doing the same thing if we actually",
			"compared both of those side-by-side.",
			"All right.",
			"Before I forge ahead now to actually augment this",
			"with new functionality, any questions or confusion on this Python script",
			"we just wrote to open a file, wrap it with a reader or DictReader,",
			"and then iterate over the rows one at a time, printing the titles?",
			"Any questions, confusion on syntax at all?",
			"It's OK.",
			"We've only known or seen Python for a week.",
			"It's fine if it's still quite new.",
			"Anything, Brian, we should address?",
			"BRIAN YU: Yeah.",
			"So why is it that you don't need to close the file using the syntax",
			"that you're using right here?",
			"DAVID J. MALAN: Really good question.",
			"Last week, I more pedantically used open on its own.",
			"And then I later used a close function that was associated with the file",
			"that I had just opened.",
			"Now, the more Pythonic way to do things, if you will,",
			"is actually to use this with keyword, which didn't exist in C.",
			"And it just tends to be a useful feature in Python",
			"whereby if you say with open, dot dot dot, it will open the file for you.",
			"Then it will remain open so long as your code is indented inside",
			"of that with keywords block.",
			"And as soon as you get to the end of your program,",
			"it will automatically be closed for you.",
			"So this is one of these features where Python in some sense",
			"is trying to protect us from ourselves.",
			"It's probably pretty common for humans, myself",
			"included, to forget to close your file.",
			"That can create problems with saving things permanently.",
			"It can create memory leaks, as we know from C.",
			"So the with keyword just assumes that I'm not going to be an idiot",
			"and forget to close the file.",
			"Python is going to do it for me automatically.",
			"Other questions or confusions, Brian?",
			"BRIAN YU: How does DictReader know that Title",
			"is the name of the key inside of the dictionary?",
			"DAVID J. MALAN: Really good question, too.",
			"So it is designed by the authors of the Python language",
			"to look at the very first row in the file,",
			"split it on the commas in that very first row,",
			"and just assume that the first word or phrase before the first comma",
			"is the name of the first column, that the second word",
			"or phrase after the first comma is the name of the second column,",
			"and so forth.",
			"So a DictReader just presumes, as is the convention with CSVs,",
			"that your first row is going to contain the headings that you",
			"want to use to refer to those columns.",
			"If your CSV happens not to have such a heading whereby it just",
			"jumps right in on the first row to real data,",
			"then you're not going to be able to use a DictReader correctly, at least",
			"not without some manual configuration.",
			"All right.",
			"So let's go ahead and--",
			"now I feel like there's a whole mess here.",
			"And some of these shows are pretty popular.",
			"And as I'm glancing over this, I definitely see some duplication.",
			"A whole bunch of you like The Office.",
			"A whole bunch of you like Breaking Bad, Game of Thrones,",
			"and a whole bunch of other shows, as well.",
			"So it would be nicer, I think, if we kind of",
			"narrow the scope of our look at this data by just looking at unique values.",
			"You're looking at unique value.",
			"So rather than just iterate over the file top to bottom,",
			"printing out one title after another, why",
			"don't we go ahead and sort of accumulate all of this data",
			"in some kind of data structure so that we can throw away duplicate values",
			"and then only print out the unique titles that we've accumulated?",
			"So I bet we can do this in a few ways.",
			"But if we think back to last week's demonstration of our dictionary,",
			"you'll recall that I used what was called a set.",
			"And I'm going to go ahead and create a variable called titles",
			"and set it equal to something called set.",
			"And a set is just a collection of values.",
			"It's kind of like a list.",
			"But it eliminates duplicates for me.",
			"And that would seem to be exactly the characteristic",
			"that I want for this program.",
			"Now, instead of printing each title, which is now premature",
			"if I want to first filter out duplicates,",
			"I'm going to go ahead and do this.",
			"I'm going to go ahead and add to the titles set using the add function",
			"the current row's title.",
			"So again, I'm not printing it now.",
			"I'm instead adding to the title set that particular title.",
			"And if it's there already, no big deal.",
			"The set data structure in Python is going",
			"to throw away the duplicates for me.",
			"And it's only going to go ahead and keep the uniques.",
			"Now, at the bottom of my file, I need to do a little more work, admittedly.",
			"Now I have to iterate over the set to print out only those unique titles.",
			"So let me do this.",
			"For title in titles, go ahead and print out title.",
			"And this is where Python just gets really user-friendly, right?",
			"You don't have to do int i get 0, i less than n, or whatever.",
			"You can just say for title in titles.",
			"And if the title's variable is the type of data structure",
			"that you can iterate over, which it will be if it's a list or if it's a set",
			"or even if it's a dictionary, another data structure",
			"we saw last week in Python, the for loop in Python will just know what to do.",
			"This will loop over all of the titles in the titles set.",
			"So let me go ahead and save this file and go ahead now",
			"and run python of favorites.py.",
			"And it looks like, yeah, the list is different in some way.",
			"But I'm seeing fewer results as I scroll up, definitely fewer than before,",
			"because my scrollbar didn't jump nearly as far down.",
			"But honestly, this is kind of a mess.",
			"Let's go ahead and sort this.",
			"Now, in C, it would have been kind of a pain to sort things.",
			"We'd have to whip out the pseudocode, probably,",
			"for bubble sort, selection sort, or, god forbid,",
			"merge sort and then implement it ourselves.",
			"But no, with Python comes, really, the proverbial kitchen sink of functions.",
			"So if you want to sort this set, you know what?",
			"Just say you want it sorted.",
			"There is a function in Python called sorted",
			"that will use one of those better algorithms-- maybe it's merge sort.",
			"Maybe it's something called quicksort.",
			"Maybe it's something else altogether.",
			"It's not going to use a big O of n squared sort.",
			"Someone at Python probably has spent the time implementing a better sort for us.",
			"But it will go ahead and sort the set for me.",
			"Now let me go ahead and do this again.",
			"Let me increase the size of my terminal window and rerun python",
			"of favorites.py.",
			"OK.",
			"And now we have an interesting assortment",
			"of shows that's easier for me to wrap my mind around,",
			"because I have it now sorted here.",
			"And indeed, if I scroll all the way up, we should see all of the shows",
			"beginning with numbers or a period, which",
			"might have just been someone playing around,",
			"followed by the A words, the B words, and so forth.",
			"So now it's a little easier to wrap our minds around this.",
			"But something's up.",
			"I feel like a lot of you like Avatar: The Last Airbender.",
			"And yet I'm seeing it, indeed, four different times.",
			"But I thought we were filtering this down",
			"to uniques by using that set structure.",
			"So what's going on?",
			"And in fact, if I keep scrolling, I'm pretty",
			"sure I saw more duplicates in here.",
			"BoJack Horseman, Breaking Bad, Breaking Bad,",
			"Brooklyn Nine-Nine, Brooklyn Nine-Nine, CS50 in several different flavors.",
			"And yes, it keeps going.",
			"Friends.",
			"So I see a lot of duplicate values.",
			"So what's going on?",
			"Yeah, [? Gadana? ?]",
			"AUDIENCE: Yeah, so your current sort is case insensitive-- sorry,",
			"is case sensitive, meaning that if someone spells avatar with capital",
			"A's in some places, then it's going to be a different result each time.",
			"DAVID J. MALAN: Yeah, exactly.",
			"Some of you weren't quite diligent when it came to capitalization.",
			"And so in fact, the reality is, as [? Gadana ?] notes,",
			"that there's differences in capitalization.",
			"Now, we've addressed this before.",
			"In fact, when you implemented your spell checker,",
			"you had to deal with this already when you",
			"were spell checking an arbitrary text.",
			"Some words might be capitalized.",
			"Some might be all lowercase, all uppercase.",
			"And you wanted to tolerate different casings.",
			"And so we probably solved this by just forcing everything",
			"to uppercase or everything to lowercase and doing things,",
			"therefore, case insensitively.",
			"So give me just a moment here.",
			"And I'm going to go ahead and make a quick change to my form here.",
			"Let's go ahead and change this in such a way",
			"that we actually force everything to uppercase or lowercase.",
			"Doesn't really matter which, but we need to canonicalize things,",
			"so to speak, in some way.",
			"And to canonicalize things just means to format all of your data",
			"in some standard way.",
			"So to [? Gadana's ?] point, let's just standardize",
			"the capitalization of things.",
			"Maybe all uppercase, all lowercase.",
			"We just need to make a judgment call.",
			"So I'm going to go ahead and make a few tweaks here.",
			"I'm still going to use a set.",
			"I'm still going to read the CSV as before.",
			"But instead of just adding the title with row bracket title,",
			"I'm going to go ahead and force it to uppercase, just",
			"arbitrarily, just for the sake of uniformity.",
			"And then let's go ahead and check what exactly has happened here.",
			"I'm not going to change anything else.",
			"But let me go ahead and increase the size of my terminal",
			"window, rerun python of favorites.py.",
			"And voila.",
			"It's a little harder to read, just because I'm not",
			"used to reading all caps.",
			"Kind of looks like we're yelling at ourselves.",
			"But I don't see-- wait a minute.",
			"I still see The Office over here twice.",
			"If I keep scrolling here, so far, I see Stranger Things and Strainger Things.",
			"That just looks like a typo.",
			"I see two Sherlocks, though.",
			"This is a little suspicious.",
			"So [? Gadana, ?] you and I don't seem to have solved things fully.",
			"And this one's a little more subtle.",
			"What more should I perhaps do to my data to ensure we get duplicates removed?",
			"Olivia?",
			"AUDIENCE: Maybe trim around the edges.",
			"DAVID J. MALAN: Trim around the edges.",
			"I like the sound of that, but what do you mean?",
			"What does that do?",
			"AUDIENCE: Oh, like, trim off the extra spaces in case someone",
			"put a space before or after the words.",
			"DAVID J. MALAN: Yeah, exactly.",
			"It's pretty common for humans, intentionally or accidentally,",
			"to hit the Space bar where they shouldn't.",
			"And in fact, I'm kind of inferring that I bet one or more",
			"of you accidentally typed Sherlock, space, and then decided,",
			"nope, that's it.",
			"I'm not typing anything else.",
			"But that space, even though we can't quite see it obviously, is there.",
			"And when we do a string comparison or when the set data structure does that,",
			"it's actually going to be noticed when doing those comparisons.",
			"And therefore they're not going to be the same.",
			"So I can do this in a few different ways.",
			"But it turns out, in Python, you can chain functions together,",
			"which is also, too, kind of a fancy feature.",
			"Notice what I'm doing here.",
			"I'm still accessing the titles set.",
			"I'm adding the following value to it.",
			"I'm adding the value row bracket title, but not quite.",
			"That is a string or an str, in Python speak.",
			"I'm going to go ahead and strip it, which",
			"means if we look up the documentation for this function, to Olivia's point,",
			"it's going to strip off or trim all of the white space",
			"to the left, all of the white space to the right,",
			"whether that's the Space bar or the Enter key",
			"or the Tab character or a few other things, as well.",
			"It's just going to get rid of leading and trailing white space.",
			"And then whatever's left over, I'm going to go ahead and force everything",
			"to uppercase in the spirit of [? Gadana's ?] suggestion, too.",
			"So we're sort of combining two good ideas now to really massage the data,",
			"if you will, into a cleaner format.",
			"And this is such a real-world reality.",
			"Humans, you and I, cannot be trusted to input data the way we are supposed to.",
			"Sometimes it's all lowercase, because we're",
			"being a little lazy or a little social media-like,",
			"even if we're checking out from Amazon and trying",
			"to input a valid postal address.",
			"Sometimes it's all capitals, because I can think of a few people in my life",
			"who don't quite understand the Caps Lock thing just yet.",
			"And so things might be all capitalized instead.",
			"This is not good for computer systems that require precision,",
			"to our emphasis in week 0.",
			"And so massaging data means cleaning it up,",
			"doing some mutations that don't really change the meaning of the data",
			"but canonicalize it, standardize it, so that you're",
			"comparing apples and apples, so to speak, not apples and oranges.",
			"Well, let me go ahead and run this again in my bigger terminal",
			"window, python of favorites.py.",
			"Voila.",
			"In scrolling up, up, up, I think we're in a better place.",
			"I only see one Office now.",
			"And if I keep scrolling up and up and up, I'm seeing typos still,",
			"but nothing related to white space.",
			"And I think we have a much cleaner unique list of titles at this point.",
			"Of course, if we scroll up, I would have to be",
			"a lot more clever if I want to detect things like typographical errors.",
			"It looks like one of you was very diligent about putting F.R.I.",
			"and so forth but then got bored at the end and left off the last period.",
			"But that's going to happen when you're taking in user input.",
			"We've, of course, got all these variants of CS50.",
			"That's going to be a mess to clean up, because now you",
			"can imagine having to add a whole bunch of if conditions and elses and else ifs",
			"to clean all of that up if we do want to canonicalize",
			"all different flavors of CS50 as, quote unquote, \"CS50.\"",
			"So this is a very slippery slope.",
			"You and I could start writing a huge amount of data just to clean this up.",
			"But that's the reality when dealing with real-world data.",
			"Well, let's go ahead now and improve this program further,",
			"do something a little fancier, because I now",
			"can trust that my data has been canonicalized",
			"except for the actual typos or the weird variants of CS50 and the like.",
			"Let's go ahead and figure out what's the most popular favorite TV",
			"show among the audience here.",
			"So I'm going to start where I have before,",
			"with my current code, because I think I have",
			"most of the building blocks in place.",
			"I'm going to go ahead and clean up my code a little bit in here.",
			"I'm going to go ahead and give myself a separate variable now called title",
			"just so that I can think about things in a little more orderly fashion.",
			"But I'm not going to start adding things to this set anymore.",
			"In fact, a set, I don't think, is really going",
			"to be sufficient to keep track of the popularity of TV shows,",
			"because by definition, the set is throwing away duplicates.",
			"But the goal now is kind of the opposite.",
			"I want to know which are the duplicates so that I can tell you",
			"that this many people like The Office.",
			"This many people like Breaking Bad and the like.",
			"So what tools do we have in Python's toolkit via which we could accumulate",
			"or figure out that information?",
			"Any thoughts on what data structure might help us here",
			"if we want to figure out show, popularity, show, popularity?",
			"And by popularity, I just mean the frequency of it in the CSV file.",
			"Santiago?",
			"AUDIENCE: I guess one option could be to use dictionaries",
			"so that you can have The Office, I don't know,",
			"20 votes, and then Game of Thrones, another one,",
			"so that a dictionary could really help you visualize that.",
			"DAVID J. MALAN: Yeah, perfect instincts.",
			"Recall that a dictionary, at the end of the day, no matter how",
			"sophisticated it's implemented underneath the hood,",
			"like your spell checker--",
			"It's just a collection of key value pairs.",
			"And indeed, it's maybe one of the most useful data structures in any language,",
			"because this ability to associate one piece of data with another",
			"is just a very general purpose solution to problems.",
			"And indeed, to Santiago's point, if the problem at hand",
			"is to figure out the popularity of shows,",
			"well, let's make the keys the titles of our shows and the frequencies thereof--",
			"the votes, so to speak--",
			"the values of those keys.",
			"We're going to map title to votes, title to vote, title to vote, and so forth.",
			"So a dictionary is exactly that.",
			"So let me go ahead and scroll up.",
			"And I can make a little tweak here.",
			"Instead of a set, I can instead say dict and give myself",
			"just an empty dictionary.",
			"There's actually shorthand notation for that that's a little more common.",
			"So you use two empty curly braces.",
			"That just means the exact same thing.",
			"Give me a dictionary that's initially empty.",
			"There's no fancy shortcut for a set.",
			"You have to literally type out S-E-T, open paren and closed paren.",
			"But dictionaries are so common, so popular, so powerful,",
			"they have this little syntactic shortcut of just two curly braces,",
			"open and closed.",
			"So now that I have that, let me go ahead and do this.",
			"Inside of my for loop, instead of printing",
			"the title, which I don't want to do, and instead of adding it to the set,",
			"I now want to add it to the dictionary.",
			"So how do I do that?",
			"Well, if my dictionary is called titles, I think I can essentially do something",
			"like this, titles bracket title = or maybe += 1.",
			"Maybe I can kind of use the dictionary as just a little cheat sheet",
			"of counts, numbers, that start at 0 and then just add 1, at 2, add 3.",
			"So every time I see The Office, The Office, The Office, do += 1, += 1.",
			"We can't do ++, because that's not a thing in Python.",
			"It only exists in C. But this would seem to go into the dictionary called",
			"titles, look up the key that matches this specific title,",
			"and then increment whatever value is there by 1.",
			"But I'm going to go ahead and run this a little naively here.",
			"Let me go ahead and run python of favorites.py.",
			"And wow, it broke already on line 9.",
			"So sort of an apt choice of show to begin with,",
			"we have a key error with Punisher.",
			"So Punisher is bad.",
			"Something bad has just happened.",
			"But what does that mean?",
			"A key error is referring to the fact that I",
			"tried to access an invalid key in a dictionary.",
			"This is saying that literally in this line of code",
			"here, even though titles is a dictionary and even",
			"though the value of title, singular, is, quote",
			"unquote, \"PUNISHER,\" I'm getting a key error,",
			"because that title does not yet exist.",
			"So even if you're not sure of the Python syntax for fixing this problem,",
			"what's the intuitive solution here?",
			"I cannot increment the frequency of the Punisher,",
			"because Punisher is not in the dictionary.",
			"It almost feels like a catch-22.",
			"[? Greg? ?]",
			"AUDIENCE: I think that you need, first of all, to create a for loop",
			"and maybe assign a value to everything in the dictionary.",
			"For example, a value 0, and then add 1.",
			"DAVID J. MALAN: Yeah, so good instincts.",
			"And here, I can use another metaphor.",
			"I worry we might have a chicken and the egg problem there,",
			"because I don't think I can go to the top of my code,",
			"add a loop that initializes all of the values in the dictionary to 0,",
			"because I would need to know all of the names of the shows at that point.",
			"Now, that's fine.",
			"I think I could take you maybe more literally, [? Greg, ?]",
			"and open up the CSV file, iterate over it top to bottom,",
			"and, any time I see a title, just initialize it",
			"in the dictionary as having a value of 0, 0, 0.",
			"Then have another for loop, maybe reopen the file, and do the same.",
			"And that would work.",
			"But it's arguably not very efficient.",
			"It is asymptotically, in terms of big O. But that would",
			"seem to be doing twice as much work.",
			"Iterate over the file once just to initialize everything to 0.",
			"Then iterate over the file a second time just to increment the counts.",
			"I think we can do things a little more efficiently.",
			"I think we can achieve not only correctness but better design.",
			"Any thoughts on how we can still solve this problem without having",
			"to iterate over the whole thing twice?",
			"Yeah, [? Semowit? ?]",
			"AUDIENCE: I think we can add in an if statement",
			"to check if that key is in the dictionary.",
			"And if it's not, then add it and then go ahead and increment the value after.",
			"DAVID J. MALAN: Nice.",
			"And we can do exactly that.",
			"So let's just apply that intuition.",
			"If the problem is that I'm trying to access a key that does not yet exist,",
			"well, let's just be a little smarter about it.",
			"And to [? Semowit's ?] point, let's check whether the key exists.",
			"And if it does, then increment it.",
			"But if it does not, then and only then, [? to Greg's ?] advice,",
			"initialize it to 0.",
			"So let me do that.",
			"Let me go ahead and say if title in titles,",
			"which is the very Pythonic, beautiful way of asking a question",
			"like that, way cleaner than in C--",
			"let me go ahead, then, and say exactly the line from before.",
			"Else, though, if that title is not yet in the dictionary called titles,",
			"well, that's OK, too.",
			"I can go ahead and say titles bracket title = 0.",
			"So the difference here is that I can certainly index",
			"into a dictionary using a key that doesn't exist if I plan at that moment",
			"to give it a value.",
			"That's OK, and that has always been OK since last week.",
			"But, however, if I want to go ahead and increment the value that's there,",
			"I'm going to go ahead and do that in this separate line.",
			"But I did introduce a bug.",
			"I did introduce a bug here.",
			"I think I need to go one step further logically.",
			"I don't think I want to initialize this to 0 per se.",
			"Does anyone see a subtle bug in my logic here?",
			"If the title is already in the dictionary, I'm incrementing it by 1.",
			"Otherwise, I'm initializing it to 0.",
			"Any subtle catches here?",
			"Yeah, Olivia, what do you see?",
			"AUDIENCE: I think you should initialize it to 1, since it's the first instance.",
			"DAVID J. MALAN: Exactly.",
			"I should initialize it to 1.",
			"Otherwise, I'm accidentally overlooking this particular title,",
			"and I'm going to go ahead and undercount it.",
			"So I can fix this either by doing this.",
			"Or frankly, if you prefer, I don't technically need to use an if else.",
			"I can use just an if by doing something like this instead.",
			"I could say if title not in titles, then I could go ahead",
			"and say titles bracket title gets 0.",
			"And then after that, I can blindly, so to speak, just do this.",
			"So which one is better?",
			"I think the second one is maybe a little better",
			"in that I'm saving one line of code.",
			"But it's ensuring with that if condition,",
			"to [? Semowit's ?] advice, that I'm not indexing into the titles dictionary",
			"until I'm sure that the title is in there.",
			"So let me go ahead and run this now, python of favorites.py, Enter.",
			"And OK, it didn't crash, so that's good.",
			"But I'm not yet seeing any useful information.",
			"But I now have access to a bit more.",
			"Let me scroll down now to the bottom of this program, where",
			"I have now this loop.",
			"Let me go ahead and print out not just the title",
			"but the value of that key in the dictionary by just indexing",
			"into it here.",
			"And you might not have seen this syntax before.",
			"But with print, you can actually pass in multiple arguments.",
			"And by default, print will just separate them with a space for you.",
			"You can override that behavior and separate them with anything.",
			"But this is just meant to be a quick and dirty program that prints out",
			"titles and now the popularity thereof.",
			"So let me run this again, python of favorites.py.",
			"And voila.",
			"It's kind of all over the place.",
			"Office, super popular with 26 votes there.",
			"A lot of single votes here.",
			"Big Bang Theory has nine.",
			"You know, this is all nice and good.",
			"But I feel like this is going to take me forever to wrap my mind around which",
			"are the most popular shows.",
			"So of course, how would we do this?",
			"Well, to the point made earlier, with spreadsheets, my god,",
			"in Microsoft Excel or Google Spreadsheets or Apple Numbers,",
			"you just click the column heading and boom, sorted.",
			"We seem to have lost that capability unless we now do it in code.",
			"So let me do that for us.",
			"Let me go ahead and go back to my code.",
			"And it looks like sorted, even though it does work on dictionaries,",
			"is actually sorting by key, not by value.",
			"And here's where our Python programming techniques need",
			"to get a little more sophisticated.",
			"And we want to introduce another feature here now",
			"of Python which is going to solve this problem specifically",
			"but in a pretty general way.",
			"So if we read the documentation for sorted,",
			"the sorted function indeed sorts sets by the values therein.",
			"It sorts lists by the values therein.",
			"It sorts dictionaries by the keys therein,",
			"because dictionaries have two pieces of information for every element.",
			"It has a key and a value, not just a value.",
			"So by default, sorted sorts by key.",
			"So we somehow have to override that behavior.",
			"So how can we do this?",
			"Well, it turns out that the sorted function",
			"takes another optional argument literally called key.",
			"And the key argument takes as its value the name of a function.",
			"And this is where things get really interesting,",
			"if not confusing, really quickly.",
			"It turns out, in Python, you can pass around functions as arguments",
			"by way of their name.",
			"And technically, you can do this in C. It's a lot more syntactically involved.",
			"But in Python, it's very common.",
			"In JavaScript, it's very common.",
			"In a lot of languages, it's very common to think of functions",
			"as first-class objects, which is a fancy way of saying you can pass them around",
			"just like they are variables themselves.",
			"We're not calling them yet.",
			"But you can pass them around by their name.",
			"So what do I mean by this?",
			"Well, I need a function now to sort my dictionary by its value.",
			"And only I know how to do this, perhaps, so let me go ahead and give myself",
			"a generic function name just for the moment called f-- f for function,",
			"kind of like in math--",
			"because we're going to get rid of it eventually.",
			"But let me go ahead and temporarily define a function",
			"called f that takes as input a title.",
			"And then it returns for me the value corresponding to that key.",
			"So I'm going to go ahead and return titles bracket title.",
			"So here, we have a function whose purpose in life is super simple.",
			"You give it a title.",
			"It gives you the count thereof, the frequency, the popularity thereof,",
			"by just looking it up in that global dictionary.",
			"So it's super simple, but that's its only purpose in life.",
			"But now, according to the documentation for sorted,",
			"what it's now going to do, because I'm passing in a second argument called",
			"key, the sorted function, rather than just presume you want everything sorted",
			"alphabetically by key, it's instead going",
			"to call that function f on every one of the elements in your dictionary.",
			"And depending on your answer, the return value",
			"you give with that f function, that will be used instead",
			"to determine the actual ordering.",
			"So by default, sorted just looks at key.",
			"What I'm effectively doing with this f function",
			"is instead returning the value corresponding to every key.",
			"And so the logical implication of this, even though the syntax is a little new,",
			"is that this dictionary of titles will now",
			"be sorted by value instead of by key.",
			"Because again, by default, it sorts by key.",
			"But if I define my own key function and override that behavior",
			"to return the corresponding value, it's the values, the numbers,",
			"the counts that will actually be used to this thing.",
			"All right.",
			"Let's go ahead and see if that's true in practice.",
			"Let me go ahead and rerun python of favorites.py.",
			"I should see all the titles.",
			"And voila, conveniently, the most popular show",
			"seems to be Game of Thrones with 33 votes, followed by Friends with 27,",
			"followed by The Office with 26, and so forth.",
			"But of course, the list is kind of backwards.",
			"I mean, it's convenient that I can see it at the bottom of my screen.",
			"But really, if we're making a list, it should really be at the top.",
			"So how can we override that behavior?",
			"Turns out the sorted function, if you read its documentation,",
			"also takes another optional parameter called reverse.",
			"And if you set reverse equal to True, capital",
			"T in Python, that's going to go ahead and give us now",
			"the reverse order of that same sort.",
			"So let me go ahead and maximize my terminal window, rerun it again.",
			"And voila, if I scroll back up to the top, it's not alphabetically sorted.",
			"But if I keep going, keep going, keep going, keep going,",
			"the numbers are getting bigger.",
			"And voila, now Game of Thrones with 33 is all the way at the top.",
			"All right, so pretty cool.",
			"And again, the new functionality here in Python, at least,",
			"is that we can actually pass in functions to functions",
			"and leave it to the latter to call the former.",
			"So that's complicated just to say.",
			"But any questions or confusion now on how we are using dictionaries",
			"and how we are sorting things in this reverse, value-based way?",
			"Any questions or confusion?",
			"Anything in the chat or verbally, Brian?",
			"BRIAN YU: Looks like all questions are answered here.",
			"DAVID J. MALAN: OK.",
			"Then in that case, let me point out a common mistake.",
			"Notice that even though f is a function, notice that I did not call it there.",
			"That would be incorrect, the reason being we deliberately",
			"want to pass the function f into the sorted function",
			"so that the sorted function can take it upon itself to call f again and again",
			"and again.",
			"We don't want to just call it once by using the parentheses ourselves.",
			"We want to just pass it in by name so that the sorted function, which comes",
			"with Python, can instead do it for us.",
			"Santiago, did you have a question?",
			"AUDIENCE: Yes, I was going to ask.",
			"Why didn't we put f of title?",
			"",
			"I was going to ask that question specifically.",
			"DAVID J. MALAN: Oh, with the parentheses?",
			"AUDIENCE: Yeah.",
			"DAVID J. MALAN: Oh, OK, perfect.",
			"So because that would call the function once and only once.",
			"We want sorted to be able to call it again and again.",
			"Now, here's actually an example, as we've seen",
			"in the past, of a correct solution.",
			"This is behaving as I intend, a list of sorted titles from top to bottom",
			"in order of popularity.",
			"But it's a little poorly designed, because I'm",
			"defining this function f, whose name in the first place is kind of lame.",
			"But I'm defining a function only to use it in one place.",
			"And my god, the function is so tiny, it just feels like a waste of keystrokes",
			"to have defined a new function just to then pass it in.",
			"So it turns out, in Python, if you have a very short function whose",
			"purpose in life is meant to be to solve a local problem just once and that's it",
			"and it's short enough that you're pretty sure you can fit it on one line of code",
			"without things wrapping and starting to get ugly stylistically, it turns out",
			"you can actually do this instead.",
			"You can copy the code that you had in mind like this.",
			"And instead of actually defining f as a function name,",
			"you can actually use a special keyword in Python called lambda.",
			"You can specify the name of an argument for your function as before.",
			"And then you can simply specify the return value, thereafter",
			"deleting the function itself.",
			"So to be clear, key is still an argument to the sorted function.",
			"It expects as its value typically the name of a function.",
			"But if you've decided that, eh, this seems like a waste of effort",
			"to define a function, then pass the function in,",
			"especially when it's so short, you can do it in a one liner.",
			"A lambda function is an anonymous function.",
			"Lambda literally says, Python, give me a function.",
			"I don't care about its name.",
			"Therefore, you don't have to choose a name for it.",
			"But it does care still about its arguments and its return value.",
			"So it's still up to you to provide zero or more arguments and a return value.",
			"And notice I've done that.",
			"I've specified the keyword lambda followed by the name of the argument",
			"I want this anonymous, nameless function to accept.",
			"And then I'm specifying the return value.",
			"And with lambda functions, you do not need to specify return.",
			"Whatever you write after the colon is literally",
			"what will be returned automatically.",
			"So again, this is a very Pythonic thing to do.",
			"It's kind of a very clever one liner, even though it's a little cryptic",
			"to see for the very first time.",
			"But it allows you to condense your thoughts into a succinct statement that",
			"gets the job done so you don't have to start defining more and more functions",
			"that you or someone else then need to keep track of.",
			"All right.",
			"Any questions, then, on this?",
			"And I am pretty sure this is as complex or sophisticated as our Python code",
			"today will get.",
			"Yeah, over to Sophia.",
			"AUDIENCE: I was wondering why \"lambda\" is used specifically",
			"rather than some other keyword.",
			"DAVID J. MALAN: Yeah, so there's a long history in this.",
			"And if, in fact, you take a course on functional programming-- at Harvard,",
			"it's called CS51--",
			"there's a whole etymology behind keywords like this.",
			"Let me defer that one for another time.",
			"But indeed, not only in Python but in other languages,",
			"as well, these things have come to exist called lambda functions.",
			"So they're actually quite commonplace in other languages, as well.",
			"And so Python just adopted the term of art.",
			"Mathematically, lambda is often used as a symbol for functions.",
			"And so they borrowed that same idea in the world of programming.",
			"All right.",
			"So seeing no other questions, let's go ahead and solve a related problem still",
			"with some Python but that's going to push up",
			"against the limits of efficiency when it comes to storing our data in CSV files.",
			"Let me go ahead and start fresh in this file, Favorites.py.",
			"All of the code I've written thus far, though,",
			"is on the course's website in advance, so you",
			"can see the incremental improvement.",
			"I'm going to go ahead and, again, import csv at the top.",
			"And now let's write a program this time that doesn't just",
			"automatically open up the CSV and analyze it looking",
			"for the total popularity of shows.",
			"Let's search for a specific show in the CSV and then",
			"go ahead and output the popularity thereof.",
			"And I can do this in a bunch of different ways.",
			"But I'm going to try to make this as concise as possible.",
			"I'm first going to ask the user to input a title.",
			"I could use CS50's get_string function.",
			"But recall that it's pretty much the same as Python's input function,",
			"so I'm going to use Python's input function today.",
			"And then I'm going to go ahead and, as before,",
			"open up that same CSV called Favorite TV Shows -",
			"Form Responses 1.csv in read-only mode as a variable called file.",
			"I'm then going to give myself a reader, and I'll use a DictReader again",
			"so I don't have to worry about knowing which columns things are in,",
			"passing in file.",
			"And then let's see.",
			"If I only care about one title, I can keep this program simpler.",
			"I don't need to figure out the popularity of every show.",
			"I just need to figure out the popularity of one show, the title",
			"that the human has typed in.",
			"So I'm going to go ahead and give myself a very simple int called counter",
			"and set it equal to 0.",
			"I don't need a whole dictionary.",
			"Just one variable suffices now.",
			"And I'm going to go ahead and iterate over the rows in the reader, as before.",
			"And then I'm going to say if the current row's title == the title the human",
			"typed in, let's go ahead and increment counter by 1.",
			"And it's already initialized, because I did that on line 7.",
			"So I think I'm good.",
			"And then at the end of this program, let's",
			"very simply print out the value of counter.",
			"So the purpose of this program is to prompt the user for a title of a show",
			"and then just report the popularity thereof",
			"by counting the number of instances of it in the file.",
			"So let me go ahead and run this with python of favorites.py.",
			"Enter.",
			"Let me go ahead and type in \"The Office,\" Enter, and 19.",
			"Now, I don't remember exactly what the number was.",
			"But I remember The Office was more popular than that.",
			"I'm pretty sure it was not 19.",
			"Any intuition as to why this program is buggy or so it would seem?",
			"BRIAN YU: A few people in the chat are saying",
			"you need to remember to deal with capitalization and white space again.",
			"DAVID J. MALAN: Yeah.",
			"So we need to practice those same lessons learned from before.",
			"So I should really canonicalize the input that the human, I, just typed in",
			"and also the input that's coming from the CSV file.",
			"Perhaps the simplest way to do this is, up here,",
			"to first strip off leading and trailing white space in case I get a little",
			"sloppy and hit the Space bar where I shouldn't.",
			"And then let's go ahead and force it to uppercase just because.",
			"It doesn't matter if it's upper or lower,",
			"but at least we'll standardize things that way.",
			"And then when I do this, look at the current rows title.",
			"I think I really need to do the same thing.",
			"If I'm going to canonicalize one, I need to canonical the other.",
			"And now compare the all-caps, white-space-stripped versions",
			"of both strings.",
			"So now let me rerun it.",
			"Now I'm going to type in \"The Office,\" Enter.",
			"And voila.",
			"Now I'm at 26, which I think is where we were at before.",
			"And in fact, now I, the user, can be a little sloppy.",
			"I can say \"the office.\"",
			"I can run it again and say \"the office\" and then, for whatever reason,",
			"hit the Space bar a lot, Enter.",
			"It's still going to work.",
			"And indeed, though we seem to be belaboring the pedantic here",
			"with trimming off white space and so forth, just think.",
			"In a relatively small audience here, how many of you",
			"accidentally hit the Space bar or capitalized things differently?",
			"This happens massively on scale.",
			"And you can imagine this being important when you're tagging",
			"friends in some social media account.",
			"You're doing @Brian or the like.",
			"You don't want to have to require the user to type @, capital B,",
			"lowercase r-i-a-n, and so forth.",
			"So tolerating disparate, messy user input",
			"is such a common problem to solve, including",
			"in today's apps that we all use.",
			"All right.",
			"Any questions, then, on this program, which I think is correct?",
			"Then let me ask a question of you.",
			"In what sense is this program poorly designed?",
			"In what sense is this program poorly designed?",
			"This is more subtle.",
			"But think about the running time of this program in terms of big O.",
			"What is the running time of this program if the CSV file has n different shows",
			"in it or n different submissions?",
			"So n is the variable in question.",
			"Yeah, what's the running time, Andrew?",
			"AUDIENCE: [INAUDIBLE]",
			"DAVID J. MALAN: Yeah, it's big O of n, because I'm literally using",
			"linear search by way of the for loop.",
			"That's how a for loop works in Python, just like in C. Starts at the beginning",
			"and potentially goes all the way till the end.",
			"And so I'm using implicitly linear search,",
			"because I'm not using any fancy data structures, no sets, no dictionaries.",
			"I'm just looping from top to bottom.",
			"So you can imagine that if we surveyed not just all of the students here",
			"in class but maybe everyone on campus or everyone in the world--",
			"maybe we're Internet Movie Database, IMDb.",
			"There could be a huge number of votes and a huge number of shows.",
			"And so writing a program, whether it's in a terminal window like mine",
			"or maybe on a mobile device or maybe on a webpage for your laptop or desktop,",
			"it's probably not the best design to constantly loop",
			"over all of the shows in your database from top",
			"to bottom just to answer a single question.",
			"It would be much nicer to do things in log of n time or in constant time.",
			"And thankfully, over the past few weeks, both in C and in Python,",
			"we have seen smarter ways to do this.",
			"But I'm not practicing what I've preached here.",
			"And in fact, at some point, this notion of a flat-file database",
			"starts to get too primitive for us.",
			"Flat-file databases, like CSV files, are wonderfully useful",
			"when you just want to do something quickly",
			"or when you want to download data from some third party,",
			"like Google, in a standard, portable way.",
			"\"Portable\" means that it can be used by different people and different systems.",
			"CSV is about as simple as it gets, because you",
			"don't need to own Microsoft Word or Apple",
			"Numbers or any particular product.",
			"It's just a text file, so you can use any text editing",
			"program or any programming language to access it.",
			"But flat-file databases aren't necessarily the best structure",
			"to use ultimately for larger data sets, because they don't really",
			"lend themselves to more efficient queries.",
			"So CSV files, pretty much at best, you have to search top to bottom,",
			"left to right.",
			"But it turns out that there are better databases out there generally known",
			"as relational databases that, instead of being files in which you store data,",
			"they are instead programs in which you store data.",
			"Now, to be fair, those programs use a lot of RAM, memory,",
			"where they actually store your data.",
			"And they do certainly persist your data.",
			"They keep it long term by storing your data also in files.",
			"But between you and your data, there is this running program.",
			"And if you've ever heard of Oracle or MySQL or PostgreSQL or SQL Server",
			"or Microsoft Access or bunches of other popular products,",
			"both commercial and free and open source alike,",
			"relational databases are so similar in spirit to spreadsheets.",
			"But they are implemented in software.",
			"And they give us more and more features.",
			"And they use more and more data structures",
			"so that we can search for data, insert data, delete data, update data much,",
			"much more efficiently than we could if just using something like a CSV file.",
			"So let's go ahead and take our five-minute break here.",
			"And when we come back, we'll look at relational databases and, in turn,",
			"a language called SQL.",
			"All right.",
			"So we are back.",
			"And the goal at hand now is to transition",
			"from these fairly simplistic flat-file databases",
			"to a more proper relational database.",
			"And relational databases are indeed what power so many",
			"of today's mobile applications, web applications, and the like.",
			"Now we're beginning to transition to real-world software",
			"with real-world languages, at that.",
			"And so now, let me introduce what we're going to call SQLite.",
			"So it turns out that a relational database",
			"is a database that stores all of the data still in rows and columns.",
			"But it doesn't do so using spreadsheets or sheets.",
			"It instead does so using what we're going to call tables.",
			"So it's pretty much the same idea.",
			"But with tables, we get some additional functionality.",
			"With those tables, we'll have the ability",
			"to search for data, update data, delete data, insert new data, and the like.",
			"And these are things that we absolutely can do with spreadsheets.",
			"But in the world of spreadsheets, if you want to search for something,",
			"it's you, the human, doing it by manually clicking and scrolling,",
			"typically.",
			"If you want to insert data, it's you, the human,",
			"typing it in manually after adding a new row.",
			"If you want to delete something, it's you right",
			"clicking or Control-clicking and deleting a whole row",
			"or updating the individual cells they're in.",
			"With SQL, Structured Query Language, we have a new programming language",
			"that is very often used in conjunction with other programming languages.",
			"And so today, we'll see SQL used on its own initially.",
			"But we'll also see it in the context of a Python program.",
			"So a language like Python can itself use SQL to do more powerful things",
			"than Python alone could do.",
			"So with that said, SQLite is like a light version of SQL.",
			"It's a more user-friendly version.",
			"It's more portable.",
			"It can be used on Macs and PCS and phones and laptops and desktops",
			"and servers.",
			"But it's incredibly common.",
			"In fact, in your iPhone and your Android phone, many of the applications",
			"you are running today on your own device are using SQLite underneath the hood.",
			"So it isn't a toy language per se.",
			"It's instead a relatively simple implementation",
			"of a language generally known as SQL.",
			"But long story short, there's other implementations of relational databases",
			"out there.",
			"And I rattled off several of them already--",
			"Oracle and MySQL and PostgreSQL and the like.",
			"Those all have slightly different flavors or dialects of SQL.",
			"So SQL is a fairly standard language for interacting with databases.",
			"But different companies, different communities",
			"have kind of added or subtracted their own preferred features.",
			"And so the syntax you use is generally constant across all platforms.",
			"But we will standardize for our purposes on SQLite.",
			"And indeed, this is what you would use these days",
			"in the world of mobile applications.",
			"So it's very much germane there.",
			"So with SQLite, we're going to have ultimately the ability to query data",
			"and update data, delete data, and the like.",
			"But to do so, we actually need a program with which",
			"to interact with our database.",
			"So the way SQLite works is that it stores all of your data",
			"still in a file.",
			"But it's a binary file now.",
			"That is, it's a file containing 0's and 1's.",
			"And those 0's and 1's might represent text.",
			"They might represent numbers.",
			"But it's a more compact, efficient representation",
			"than a mere CSV file would be using ASCII or Unicode.",
			"So that's the first difference.",
			"SQLite uses a single file, a binary file,",
			"to store all of your data and represent it inside of that file by way of all",
			"of those 0's and 1's or the tables to which I alluded before,",
			"which are the analogue in the database world of sheets or spreadsheets",
			"in the spreadsheet world.",
			"So to interact with that binary file wherein all of your data is stored,",
			"we need some kind of user-facing program.",
			"And there's many different tools to use.",
			"But the standard one that comes with SQLite",
			"is called sqlite3, essentially version 3 of the tool.",
			"This is a command line tool similar in spirit to any of the commands",
			"you've run in a terminal window thus far that",
			"allows you to open up that binary file and interact with all of your tables.",
			"Now, here again, we kind of have a chicken and the egg problem.",
			"If I want to use a database but I don't yet have a database",
			"and yet I want to select data from my database,",
			"how do I actually load things in?",
			"Well, you can load data into a SQLite database in at least two ways.",
			"One, which I'll do in a moment, you can just",
			"import an existing flat-file database, like a CSV.",
			"And what you do is you save the CSV on your Mac or PC on your CS50 IDE.",
			"You run a special command with sqlite3.",
			"And it will just load the CSV into memory.",
			"It will figure out where all of the commas are.",
			"And it will construct inside of that binary file the corresponding rows",
			"and columns using the appropriate 0's and 1's",
			"to store all of that information.",
			"So it just imports it for you automatically.",
			"Approach 2 would be to actually write code in a language like Python",
			"or any other that actually manually inserts all of the data",
			"into your database.",
			"And we'll do that, as well.",
			"But let's start simple.",
			"Let me go ahead and run, for instance, sqlite3.",
			"And this is preinstalled on CS50 IDE, and it's not that hard to get it up",
			"and running on a Mac and PC, as well.",
			"I'm going to go ahead and run sqlite3 in my terminal window here.",
			"And voila.",
			"You just see some very simple output.",
			"It's telling me to type .help if I want to see some usage hints.",
			"But I know most of the commands, and we'll generally",
			"give you all of the commands that you might need.",
			"In fact, one of the commands that we can use is .mode, and another is .import.",
			"So generally, you won't use these that frequently.",
			"You'll only use them when creating a database for the first time when",
			"you are creating that database from an existing CSV file.",
			"And indeed, that's my goal at the moment.",
			"Let me take our CSV file containing all of your favorite TV shows",
			"and load it into SQLite in a proper relational database",
			"so that we can do better than, for instance, big O of n",
			"when it comes to searching that data and doing anything else on it.",
			"So to do this, I have to execute two commands.",
			"One, I need to put SQLite into CSV mode.",
			"And that's just to distinguish it from other flat-file formats,",
			"like TSV for tabs or some other format.",
			"And now I'm going to go ahead and run .import.",
			"Then I have to specify the name of the file to import, which is the CSV.",
			"And I'm going to go ahead and call my table shows.",
			"So .import takes two arguments, the name of the file that you want to import",
			"and the name of the table that you want to create out of that file.",
			"And again, tables have rows and columns.",
			"And the commas in the file are going to delineate",
			"where those columns begin and end.",
			"I'm going to go ahead and hit Enter.",
			"It looks like it flew by pretty fast.",
			"Nothing seems to have happened.",
			"But I think that's OK, because now we're going to go ahead and have the ability",
			"to actually manipulate that data.",
			"But how do we manipulate the data?",
			"We need a new language.",
			"SQL, Structured Query Language, is the language used by SQLites and Oracle",
			"and MySQL and PostgreSQL and bunches of other products",
			"whose names you don't need to know or remember any time soon.",
			"But SQL is the language we'll use to query the database for information",
			"and do something with it.",
			"Generally speaking, a relational database and, in turn,",
			"SQL, which is a language via which you can interact with relational databases,",
			"support four fundamental operations.",
			"And they're sort of a crude acronym, pun intended,",
			"that is just helpful for remembering what those fundamental operations are",
			"with relational databases.",
			"CRUD stands for Create, Read, Update, and Delete.",
			"And indeed, the acronym is CRUD, C-R-U-D.",
			"So it helps you remember that the four basic operations supported by any",
			"relational database are create, read, update, delete.",
			"\"Create\" means to create or add new data.",
			"\"Read\" means to access and load into memory new data.",
			"We've seen read before with opening files.",
			"\"Update\" and \"delete\" mean exactly that, as well,",
			"if you want to manipulate the data in your data set.",
			"Now, those are generic terms for any relational database.",
			"Those are the four properties typically supported by any relational database.",
			"In the world of SQL, there are some very specific commands or functions,",
			"if you will, that implement those four functionalities.",
			"They are create and insert--",
			"achieve the same thing as create more generally.",
			"The keyword \"select\" is what's used to read data from a database.",
			"Update and delete are the same.",
			"So it's kind of an annoying inconsistency.",
			"The acronym or the term of art is CRUD, Create, Read, Update, Delete.",
			"But in the world of SQL, the authors of the language",
			"decided to implement those four ideas by way",
			"of these five keywords or functions or commands, if you will, in the language",
			"SQL.",
			"So what you are looking at are five of the keywords",
			"that you can use in this new language called SQL to actually do something",
			"with your database.",
			"Now, what does that mean?",
			"Well, suppose that you wanted to manually create",
			"a database for the very first time.",
			"What do you do?",
			"Well, back in the world of spreadsheets, it's pretty straightforward, right?",
			"You'd open up Google Spreadsheets.",
			"You go to File, New or whatever.",
			"And then you just, voila, get a new spreadsheet",
			"into which you can start creating rows and columns and the like.",
			"In Microsoft Excel, Apple Numbers, same thing--",
			"File menu, New Spreadsheet or whatever, and boom, you have a new spreadsheet.",
			"Now, in the world of SQL, SQL databases are generally",
			"meant to be interacted with code.",
			"However, there are Graphical User Interfaces, GUIs, by which",
			"you can interact with them, as well.",
			"But we're going to use code today to do so and programs at a command line.",
			"It turns out that you can create tables programmatically",
			"by running a command like this.",
			"So if you literally type out syntax along the lines of CREATE TABLE, then",
			"the name of your table, indicated here in lowercase,",
			"then a parenthesis, then the name of your column that you want to create",
			"and the type of that column, a la C, and then comma, dot,",
			"dot, dot, some more columns, this is generally",
			"speaking the syntax you'll use to create in this language called",
			"SQL a new table.",
			"Now, this is in the abstract.",
			"Again, table in lowercase is meant to represent the name",
			"you want to give to your actual table.",
			"column in lowercase is meant to be the name",
			"you want to give to your own column.",
			"Maybe it's Title.",
			"Maybe it's Genres.",
			"And dot, dot, dot just means, of course, you",
			"can have even more columns than that.",
			"But literally in a moment, if I were to type in this kind of command",
			"into the terminal window after running the sqlite3 program,",
			"I could start creating one or more tables for myself.",
			"And in fact, that's what already happened for me.",
			"This .import command, which is not part of SQL--",
			"this is the equivalent of a Menu option in Excel or Google Spreadsheets.",
			".import just automates a certain process for me.",
			"And what it did for me is this.",
			"If I type now .schema, which is another SQLite-specific command--",
			"anything that starts with a . is specific only to sqlite3,",
			"this terminal window program.",
			"Notice what's outputted is this.",
			"By running .import that automatically for me created a table in my database",
			"called shows.",
			"And it gave it three columns--",
			"Timestamp, title, and genres.",
			"Where did those column names come from?",
			"Well, they came from the very first line in the CSV.",
			"And they all looked like text, so the type of those values",
			"was just assumed to be text, text, text.",
			"Now, to be clear, I could have manually type this out,",
			"created these three columns in a new table called shows for me.",
			"But again, the .import command just automated that from a CSV.",
			"But the SQL is what we see here, CREATE TABLE shows and so forth.",
			"So that is to say now, in this database, there is a file--",
			"or rather, there is a table called shows inside",
			"of which is all of the data from that CSV.",
			"How do I actually get at that data?",
			"Well, it turns out there's other commands were called.",
			"Not just CREATE, but also SELECT, it turns out.",
			"SELECT is the equivalent of read, getting data from the database.",
			"And this one is pretty powerful.",
			"And the reason that so many data scientists and statisticians",
			"use and like using languages like SQL--",
			"they make it relatively easy to just get data and filter that data",
			"and analyze that data using new syntax for us today,",
			"but relatively simple syntax relative to other things we've seen.",
			"The SELECT command in SQL lets you select one or more columns",
			"from your table by the given name.",
			"So we'll see this now in just a moment here.",
			"How might I go about doing this?",
			"Well, let me go ahead and now, at my prompt after just clearing the window",
			"to keep things neat, let me try this out.",
			"Let me go ahead and SELECT, let's say, title FROM shows;.",
			"So why am I doing this?",
			"Well, again, the conventional format for the SELECT command",
			"is to say SELECT, then the name of one or more columns, then",
			"literally the preposition FROM, and then the name of the table from which you",
			"want to select that data.",
			"So if my table is called shows and the column is called title,",
			"it stands to reason that SELECT title FROM shows should give me",
			"back the data I want.",
			"Now, notice a couple of stylistic choices",
			"that aren't strictly required but are good style.",
			"Conventionally, I would capitalize any SQL keywords,",
			"including SELECT and FROM in this case, and then",
			"lowercase anything that's a column name or a table name,",
			"assuming you created those columns and tables in, in fact, lowercase.",
			"There's different conventions out there.",
			"Some people will uppercase.",
			"Some people will use something called camel case or snake case or the like.",
			"But generally speaking, I would encourage all caps",
			"for SQL syntax and lowercase for the column and table names.",
			"I'm going to go ahead now and hit Enter.",
			"And voila.",
			"We see rapidly a whole list of values outputted from the database.",
			"And if you think way back, you might recognize that this actually",
			"happens to be the same order as before, because the CSV",
			"file was loaded top to bottom into this same database table.",
			"And so what we're seeing, in fact, is all of that same data, duplicates",
			"and miscapitalizations and weird spacing and all.",
			"But suppose I want to see all of the data from the CSV.",
			"Well, it turns out you can select multiple columns.",
			"You can select not only title, but maybe timestamp was of interest.",
			"And this one admittedly was capitalized, because that's",
			"what it was in the spreadsheet.",
			"That was not something I chose manually.",
			"So if I just use a comma-separated list of column names,",
			"notice what I can do now.",
			"It's a little hard to see for us humans, because there's a lot going on now.",
			"But notice that in double quotes on the left,",
			"there are all of the timestamps, which represent the time at which you all",
			"submitted your favorite shows.",
			"And on the right of the comma, there's another quoted string",
			"that is the title of the show that you liked, although SQLite",
			"omits the quotes if it's just a single word, like Friends, just by convention.",
			"In fact, if I want to get all of the columns,",
			"turns out there's some shorthand syntax for that.",
			"* is the so-called wild card operator.",
			"And it will get me all of the columns from left to right in my table.",
			"And voila.",
			"Now I see all of the data, including all of the genres, as well.",
			"So now I effectively have three columns being outputted all at once here.",
			"Well, this is not that useful thus far.",
			"In fact, all I've been doing is really just outputting",
			"the contents of the CSV.",
			"But SQL's powerful because it comes with other features right out of the box,",
			"somewhat similar in spirit to functions that are built into Google Spreadsheets",
			"and Excel.",
			"But now we can use them ultimately in our own code.",
			"So functions like AVG, COUNT, DISTINCT, LOWER, MAX, MIN,",
			"and UPPER and bunches more, these are all functions built into SQL",
			"that you can use as part of your query to alter the data as it's coming back",
			"from the database-- not permanently, but as it's",
			"coming back to you-- so that it's in a format you actually care about.",
			"So for instance, one of my goals earlier,",
			"was to get back just the distinct, the unique titles.",
			"And we had to write all that annoying code using a set",
			"and then add things to the set and then loop over it again, right?",
			"That was not a huge amount of code.",
			"But it definitely took us, what, 5, 10 minutes to get the job done at least.",
			"In SQL, you can do all of that in one breath.",
			"I'm going to go ahead now and do this.",
			"SELECT not just title FROM shows.",
			"Let me go ahead and SELECT DISTINCT title FROM shows.",
			"So DISTINCT, again, is an available function in SQL",
			"that does what the name says.",
			"It's going to filter out all of the titles",
			"to just give me the distinct ones back.",
			"So if I hit Enter now, you'll see a similarly messy list but including--",
			"\"no idea,\" someone that doesn't watch TV--",
			"including an unsorted list of those titles.",
			"So I think we can probably start to clean this thing up as we did before.",
			"Let me go ahead and now SELECT not just DISTINCT,",
			"but let me go ahead and uppercase everything as well.",
			"And I can use UPPER as another function.",
			"And notice I'm just nesting things.",
			"The output of one function, as we've seen in many languages now,",
			"can be the input to another.",
			"Let me hit Enter now.",
			"And now it's getting a little more canonicalized, so to speak,",
			"because I'm using capitalization for everything.",
			"But it would seem that things still aren't really sorted.",
			"It's just the same order in which you inputted them",
			"but without duplicates this time.",
			"So it turns out that SQL has other syntax",
			"that we can use to make our queries more precise and more powerful.",
			"So in addition to these kinds of functions",
			"that you can use to alter the data that's being shown to you",
			"and coming back, you can also use these kinds of clauses or syntax",
			"in SQL queries.",
			"You can say WHERE, which is the equivalent of a condition.",
			"You can say select all of this data where something is true or false.",
			"You can say LIKE, where you can say give me data that isn't exactly this",
			"but is like this.",
			"You can order the data by some column.",
			"You can limit the number of rows that come back.",
			"And you can group identical values together in some way.",
			"So let's see a few examples of this.",
			"Let me go back here and play around now with--",
			"how about The Office?",
			"That was the one we looked at earlier.",
			"So let me go ahead and SELECT title FROM shows WHERE title = \"The Office\";.",
			"So I've added this WHERE predicate, so to speak, WHERE title = \"The Office.\"",
			"So SQL's nice.",
			"Similar in spirit to Python, it's more user friendly, perhaps,",
			"than C where everything kind of sort of reads like an English sentence,",
			"even though it's a little more precise.",
			"And it's a little more succinct.",
			"Let me go ahead and hit Enter.",
			"And voila.",
			"That's how many of you inputted The Office.",
			"But notice it's not everyone, is it?",
			"We're missing some still.",
			"It seems that I got back only those of you who typed in literally",
			"\"The Office,\" capital T, capital O.",
			"So what if I want to be a little more resilient than that?",
			"Well, let me get back any rows where you all typed in \"office.\"",
			"Maybe you omitted the article \"the.\"",
			"So let me go ahead and say not title = \"Office.\"",
			"but let me go ahead and say where the title is like \"Office.\"",
			"But I don't want it to just be \"office.\"",
			"I want to allow for maybe some stuff at the beginning, maybe some stuff",
			"at the end.",
			"And even though that seems like a bit of an inconsistency,",
			"in the context of using LIKE, there's another wild card character.",
			"The percent sign represents zero or more characters to the left.",
			"And this percent sign represents zero or more characters to the right.",
			"So it's kind of this catchall that will now find me all titles that somewhere",
			"have O-F-F-I-C-E inside of them.",
			"And it turns out LIKE is case insensitive,",
			"so I don't even need to worry about capitalization with LIKE.",
			"Now let me hit Enter.",
			"And voila.",
			"Now I get back more answers.",
			"And you can really see the messiness now.",
			"Notice up here one of you used lowercase.",
			"That tends to be common when typing things in quickly.",
			"One of you did it lowercase here and then also gave",
			"us an extra white space at the end.",
			"One of you just typed in \"office.\"",
			"One of you typed in \"the office\" again with a space at the end.",
			"And so there's a lot of variation here.",
			"And that's why, when we forced everything to uppercase",
			"and we started trimming things, we were able to get rid",
			"of a lot of those redundancies.",
			"Well, in fact, let's go ahead and order this now.",
			"So let me go back to selecting the distinct uppercase title,",
			"so SELECT DISTINCT UPPER of title FROM shows.",
			"And let me now ORDER BY, which is a new clause, the uppercased version",
			"of title.",
			"So now notice there's a few things going on here.",
			"But I'm just building up more complicated queries",
			"similar to scratch, where we just started throwing more and more puzzle",
			"pieces at a problem.",
			"I'm selecting all of the distinct uppercase titles from the shows table.",
			"But I'm going to order the results this time",
			"by the uppercased version of title.",
			"So everything is going to be uppercased.",
			"And then it's going to be sorted A through Z. Hit Enter now,",
			"and now things are a little easier to make sense of.",
			"Notice the quotes are there only when there are multiple words in a title.",
			"Otherwise, sqlite3 doesn't bother showing us.",
			"But notice here's all the \"the\" shows.",
			"And if we keep scrolling up, the P's, the N's, the M's, the L's, and so",
			"forth-- it's indeed alphabetized thanks to using ORDER BY.",
			"All right.",
			"Well, let's start to solve more similar problems now in SQL",
			"by writing way less code than we did a bit ago in Python.",
			"Suppose I want to actually figure out the counts of these most popular shows.",
			"So I want to combine all of the identical shows",
			"and figure out all of the corresponding counts.",
			"Well, let me go ahead and try this.",
			"Let me go ahead and SELECT again the uppercased version of title.",
			"But I'm not going to do DISTINCT this time, because I",
			"want to do that a little differently.",
			"I'm going to SELECT the uppercased version",
			"of title, the COUNT of those titles--",
			"so the number of times a given title appears, so COUNT",
			"is a new keyword now--",
			"FROM shows.",
			"But now how do I figure out what the count is?",
			"Well, if you think about this table as having a lot of titles--",
			"title, title, title, title, title--",
			"it would be nice to kind of group the identical titles together",
			"and then actually count how many such titles we grouped together.",
			"And the syntax for that is literally to say GROUP BY UPPER(title);.",
			"This tells SQL to group all of the uppercased titles",
			"together, kind of collapse multiple rows into one,",
			"but keep track of the count of titles after that collapse.",
			"Let me go ahead now and hit Enter.",
			"And you'll see, very similar to one of the earlier Python programs we wrote,",
			"all of the titles on the left followed by a comma, followed by the count.",
			"So one of you really likes Tom and Jerry.",
			"One of you really likes Top Gear.",
			"If I scroll up, though, two of you really liked The Wire.",
			"23 of you here like The Office, although we still",
			"haven't trimmed the issue here.",
			"So we could still combine that further by trimming whitespace if we want.",
			"But now we're getting these kinds of counts.",
			"Well, how can I go ahead and order this, as we did before?",
			"Let me go ahead here and add ORDER BY COUNT of title",
			"and then hit semicolon now.",
			"And now notice, just as in Python, everything",
			"is from smallest to largest initially, with Game of Thrones",
			"here down on the bottom.",
			"How can I fix this?",
			"Well, it turns out if you can order things in descending order,",
			"D-E-S-C for short instead of A-S-C, which is the default for ascending--",
			"so if I do it in descending order, now I'd have to scroll all the way back up",
			"to the A's, the very top, to see where the lines begin.",
			"Whoops.",
			"If I scroll all the way back up to the top, we'll see where all of the A words",
			"begin up here.",
			"And now if I want to--",
			"whoops, whoops, whoops.",
			"Did I do that right?",
			"Sorry.",
			"I don't want to--",
			"there we go, ORDER BY COUNT descending.",
			"Now let me go ahead and-- this is just a little too unwieldy to see.",
			"Let me just limit myself to the top 10 and keep it simple",
			"and only look at the top 10 values here.",
			"Voila.",
			"Now I have Game of Thrones at 33, Friends at 26, The Office at 23--",
			"though I think I'm still missing a few.",
			"Brian, do you recall the SQL function for trimming leading and trailing",
			"white space?",
			"BRIAN YU: I think it's just TRIM.",
			"DAVID J. MALAN: TRIM?",
			"OK.",
			"I myself did not remember.",
			"So when in doubt, google or ask Brian.",
			"So let me go ahead and fix this.",
			"Let me go ahead and SELECT uppercase of trimming the title first.",
			"And then I'm going to GROUP BY trimming and then uppercasing it there.",
			"And now Enter, and voila.",
			"Thank you, Brian.",
			"So now we're up to our 26 Offices here.",
			"So in short, it took us a little while to get",
			"to this point in the story in SQL.",
			"But notice what we've done.",
			"We've taken a program that took us a few minutes",
			"and certainly a dozen or more lines of code.",
			"And we've distilled it into something that, yes, is a new language",
			"but is just kind of a one liner.",
			"And once you get comfortable with a language like SQL,",
			"especially if you're not even a computer scientist but maybe a data",
			"scientist or an analyst of some sort who spends a lot of their day looking",
			"at financial information or medical information",
			"or really any data set that can be loaded into rows and columns,",
			"once you start to speak and read SQL as a human can",
			"you start to express some pretty powerful queries relatively succinctly",
			"and, boom, get back your answer.",
			"And by using a command line program, like sqlite3,",
			"you can immediately see the results there, albeit as very simplistic text.",
			"But as mentioned, too, there's also some graphical programs",
			"out there, free and commercial, that also support SQL, where you can still",
			"type these commands.",
			"And then it will show it to you in a more user friendly way, much",
			"like in Windows or macOS would by default.",
			"So any questions now on the syntax or capabilities of SELECT statements?",
			"BRIAN YU: One question came in.",
			"Where is the file with this data actually being stored?",
			"DAVID J. MALAN: Good question.",
			"Where is the file actually being stored?",
			"So before quitting, I can actually save this file as anything.",
			"I want the file extension would typically be .db.",
			"And in fact, Brian, do you mind just checking?",
			"What's the syntax for writing the file manually with dot something?",
			"It would be under .help, I think.",
			"BRIAN YU: I think it's .save followed by the name of the file.",
			"DAVID J. MALAN: .save, so I'll call this shows.db, Enter.",
			"If I now go ahead and open up another terminal window and type",
			"our old friend ls, you'll see that now I have a CSV file.",
			"I have my Python file from before.",
			"And I have a new file called shows.db, which I've created.",
			"That is the binary file that contains the table that I've loaded dynamically",
			"in from that CSV file.",
			"Any other questions on SELECT queries or what we can do with them?",
			"BRIAN YU: Yeah, a few people are asking about what the runtime of this is.",
			"DAVID J. MALAN: Yeah, really good question.",
			"What is the runtime?",
			"I'm going to come back to that question in just a little bit if that's OK.",
			"Right now, it's admittedly big O of n.",
			"I've not actually done anything better than we did",
			"with our CSV file or our Python code.",
			"Right now, it's still big O of n by default.",
			"But there's going to be a better answer to that",
			"that's going to make it something much more logarithmic.",
			"So let me come back to that feature when it's time to enable it.",
			"But in fact, let's start to take some steps toward that.",
			"Because it turns out, when loading in data,",
			"we're not always going to have the luxury of just",
			"having one big file in CSV format that we import,",
			"and we go about our business.",
			"We're going to have to decide in advance how",
			"we want to store the data and what data we want to store",
			"and what the relationships might be across not one",
			"single table, but multiple tables.",
			"So let me go ahead and run one other command here",
			"that actually introduces the first of a problem.",
			"Let me go ahead and SELECT title FROM shows",
			"WHERE genres equals, for instance, \"Comedy.\"",
			"That was one of the genres.",
			"And notice that we get back a whole bunch of results.",
			"But I bet I'm missing some.",
			"I'm skimming through this pretty quickly.",
			"But I bet I'm missing some, because if I check if genres",
			"= \"Comedy,\" what am I omitting?",
			"Well, those of you who checked multiple boxes might have said something",
			"is a comedy and a drama or comedy and romance",
			"or maybe a couple of other permutations of genres.",
			"If I'm searching for equality here, = \"Comedy,\"",
			"I'm only going to get those favorites from you where you only said,",
			"my favorite TV show is a comedy.",
			"But what if we want to do something like LIKE comedy instead?",
			"And we could say something like, well, so long",
			"as the word \"comedy\" is in there, then we should get back even more results.",
			"And let me stipulate that, indeed, I now have a longer list of results.",
			"Now we have all shows where you checked at least the Comedy box.",
			"But unfortunately, this starts to get a little sloppy,",
			"because recall what the Genres column looks like.",
			"SELECT.",
			"Let me SELECT genres FROM shows;.",
			"Notice that all of the genres that we loaded into this table from the CSV",
			"file are a comma-separated list of genres.",
			"That's just the way Google Forms did it.",
			"And that's fine for CSV purposes.",
			"That's kind of fine for SQL purposes, but this is kind of messy.",
			"Generally speaking, storing comma-separated lists",
			"of values in a SQL database is not what you should be doing.",
			"The whole point of using a SQL database is to move away from commas and CSVs",
			"and to actually store things more cleanly.",
			"Because in fact, let me propose a problem.",
			"Suppose I want to search not for comedy but maybe also",
			"music, like this, thereby allowing me to find any shows where",
			"the word \"music\" is somewhere in the comma-separated list.",
			"There's a subtle bug here.",
			"And you might have to think back to where we began, the form",
			"that you pulled up.",
			"I can't show the whole thing here, but we",
			"started with action, adventure, animation, biography, dot, dot, dot,",
			"music.",
			"Musical was also there, so distinct.",
			"A music video versus a musical are two different types of genres.",
			"But notice my query at the moment.",
			"What's problematic with this?",
			"At the moment, we would seem to have a bug whereby this query will select",
			"not only \"music,\" but also \"musical.\"",
			"And so this is just where things are getting messy.",
			"Now, yeah, you know what?",
			"We could kind of clean this up.",
			"Maybe we could put a comma here so that it can't just be music something.",
			"It has to be music comma.",
			"But what if music is the last box that you checked?",
			"Well, then it's music nothing.",
			"There is no comma.",
			"So now I need to OR things together.",
			"So maybe I have to do something like WHERE \"%Music,%\"",
			"like this or OR genres LIKE \"%Music\" like this.",
			"But honestly, this is just getting messy.",
			"This is poorly designed.",
			"If you're just storing your data as a comma-separated list of values inside",
			"of a column and you have to resort to this kind of hack to figure out,",
			"well, maybe it's over here or here or here,",
			"and thinking about all the permutations of syntax, you're doing it wrong.",
			"You're not using a SQL database to its fullest potential.",
			"So how do we go about designing this thing better",
			"and actually load this CSV into a database a little more cleanly?",
			"In short, how do we get rid of the stupid commas in the Genres column",
			"and instead put one word, \"comedy\" or \"music\" or \"musical,\"",
			"in each of those cells, so to speak?",
			"Not two, not three--",
			"one only without throwing away some of those genres.",
			"Well, let me introduce a few building blocks that will get us there.",
			"It turns out, when creating your own tables",
			"and loading data into a database on your own,",
			"we're going to need more than just SELECT.",
			"SELECT, of course, is just for reading.",
			"But if we're going to do this better and not just use sqlite3 as a built-in",
			".import command, but instead we're going to write some code to load all",
			"of our data into maybe two tables--",
			"one for the titles, one for the genres--",
			"we're going to need a little more expressiveness when it comes to SQL.",
			"And so for that, we're going to need, one, the ability",
			"to create our own tables.",
			"And we've seen a glimpse of this before.",
			"But we're also going to need to see another piece of syntax,",
			"as well, so inserting.",
			"Inserting is another command that you can execute on a SQL database",
			"in order to actually add data to a database, which is great.",
			"Because if I want to ultimately iterate over that same CSV but, this time,",
			"manually add all of the rows to the database myself,",
			"well, then I'm going to need some way of inserting.",
			"And the syntax for that is as follows.",
			"INSERT INTO the name of the table, the column or columns",
			"that you want to insert values into, then literally the word VALUES,",
			"and then literally in parentheses again, the actual list of values.",
			"So it's a little abstract when we see it in this generic form.",
			"But we'll see this more explicitly in just a moment here, as well.",
			"So when it comes to inserting something into a database,",
			"let's go ahead and try this.",
			"So suppose that-- let's see.",
			"What's a show that--",
			"The Muppet Show.",
			"I grew up loving The Muppet Show.",
			"It was out in, like, the '70s.",
			"And I don't think it was on the list, but I can check this for sure.",
			"So SELECT * FROM shows WHERE title LIKE--",
			"let's just search for \"muppets\" with a wild card.",
			"And I'm guessing no one put it there.",
			"Good.",
			"So it's a missed opportunity.",
			"I forgot to fill out the form.",
			"I could go back and fill out the form and re-import the CSV,",
			"but let's go ahead and do this manually.",
			"So let me go ahead and INSERT INTO shows what columns?",
			"title and genres, and I guess I could do a Timestamp just for kicks.",
			"And then I'm going to insert what values?",
			"The values will be, well, I don't know, whatever time it is now.",
			"So I'm going to cheat there rather than look up the date and the time.",
			"The title will be \"The Muppet Show.\"",
			"And the genres will be-- it was kind of a comedy.",
			"It was kind of a musical.",
			"So we'll kind of leave it at that.",
			"Semicolon.",
			"So again, this follows the standard syntax here",
			"of specifying the table you want to insert into,",
			"the columns you want to insert into, and the values",
			"you want to put into those columns.",
			"And I'm going to go ahead and hit Enter now.",
			"Nothing seems to have happened.",
			"But if I now select that same query--",
			"oh, OK, it's still nothing, because I made a subtle mistake.",
			"I'm not searching for \"Muppets,\" plural.",
			"I'm searching for \"Muppet,\" singular, The Muppet Show.",
			"Voila.",
			"Now you see my row in this database.",
			"And so INSERT would give us the ability now",
			"to insert new rows into the database.",
			"Suppose you want to update something.",
			"You know, some of the Muppet Shows were actually pretty dramatic.",
			"So how might we do that?",
			"Well, I can say UPDATE shows SET--",
			"let's see-- genres = \"Comedy, Drama, Musical\" WHERE",
			"title = \"The Muppet Show.\"",
			"So again, I'll pull up the canonical syntax for this in a bit.",
			"But for now, just a little teaser, you can update things pretty simply.",
			"And even though it takes a little getting used to the syntax,",
			"it kind of does what it says.",
			"UPDATE shows SET genres = this WHERE title = that.",
			"And now I can go ahead and Enter.",
			"If I go ahead and select the same thing, just like in a terminal window,",
			"you can go up and down.",
			"That's how I'm typing so quickly.",
			"I'm just going up and down to previous commands.",
			"Voila.",
			"Now I see that the Muppet Show is a comedy, a drama, and a musical.",
			"Well, I take issue, though, with one of the more popular shows that",
			"was in the list.",
			"A whole bunch of you liked, let's say, Friends,",
			"which I've never really been a fan of.",
			"And let me go ahead and SELECT title FROM shows WHERE title = \"Friends.\"",
			"And maybe I should be a little more rigorous than that.",
			"I should say title LIKE \"Friends\" just in case",
			"there was different capitalizations.",
			"Enter.",
			"A lot of you really liked Friends.",
			"In fact, how many of you?",
			"Well, recall that I can do this.",
			"I can say COUNT, and I can let SQL do the count for me.",
			"26 of you, I disagree with strongly.",
			"And there's a couple of you that even added all the dots,",
			"but we'll deal with you later.",
			"So suppose I do take issue with this.",
			"Well, DELETE FROM shows WHERE title = \"Friends\"--",
			"actually, title LIKE \"Friends.\"",
			"Let's get them all.",
			"Enter.",
			"And now if we SELECT this again, I'm sorry.",
			"Friends has been canceled.",
			"So you can again execute these fundamental commands of CRUD,",
			"Create Read, Update, and Delete, by using CREATE or INSERT,",
			"by using SELECT, by using UPDATE literally",
			"and DELETE literally, as well.",
			"And that's about it.",
			"Even though this was a lot quickly, there really",
			"are just those four fundamental operations in SQL",
			"plus some of these add-on features, like these additional functions like COUNT",
			"that you can use and also some of these keywords like WHERE and the like.",
			"Well, let me propose that we now do better.",
			"If we have the ability to select data and create tables and insert data,",
			"let's go ahead and write our own Python script that uses SQL, as in a loop,",
			"to read over my CSV file and to insert, insert, insert, insert each of the rows",
			"manually.",
			"Because honestly, it will take me forever",
			"to manually type out hundreds of SQL queries to import all of your rows",
			"into a new database.",
			"I want to write a program that does this instead.",
			"And I'm going to propose that we design it in the following way.",
			"I'm going to have two tables this time, represented here",
			"with this artist's rendition.",
			"One is going to be called shows.",
			"One is going to be called genres.",
			"And this is a fundamental principle of designing relational databases,",
			"to figure out the relationships among data and to normalize your data.",
			"To normalize your data means to eliminate redundancies.",
			"To normalize your data means to eliminate mentions of the same words",
			"again and again and have just single sources of truth for your data,",
			"so to speak.",
			"So what do I mean by that?",
			"I'm going to propose that we instead create a simpler table called",
			"shows that has just two columns.",
			"One is going to be called id, which is new.",
			"The other is going to be called title, as before.",
			"Honestly, I don't care about timestamps, so we're just",
			"going to throw that value away, which is another upside of writing",
			"our own program.",
			"We can add or remove any data we want.",
			"For id, I'm introducing this, which is going",
			"to be a unique identifier, literally a simple integer--",
			"1, 2, 3, all the way up to a billion or 2 billion,",
			"however many favorites we have.",
			"I'm just going to let this auto increment as we go.",
			"Why?",
			"I propose that we move to another table all of the genres and that,",
			"instead of having one or two or three or five genres in one column",
			"as a stupid comma-separated list-- which is stupid only in the sense",
			"that it's just messy, right?",
			"It means that I have to run stupid commands",
			"where I'm checking for the comma here, the comma there.",
			"It's very hackish, so to speak.",
			"Bad design.",
			"Instead of doing that, I'm going to create another table that",
			"also has two columns.",
			"One is going to be called show_id, and the other is going to be called genre.",
			"And genre here is just going to be a single word now.",
			"That column will contain single words for genres,",
			"like \"comedy\" or \"music\" or \"musical.\"",
			"But we're going to associate all of those genres",
			"with the original show to which they belong, per your Google form",
			"submissions, by using this show_id here.",
			"So what does this mean in particular?",
			"By adding to our first table, shows, this unique identifier--",
			"1, 2, 3, 4, 5, 6--",
			"I can now refer to that same show in a very efficient way using",
			"a very simple number instead of redundantly",
			"having The Office, The Office, The Office again and again.",
			"I can refer to it by just one canonical number, which",
			"is only going to be 4 bytes or 32 bits.",
			"Pretty efficient.",
			"But I can still associate that show with one genre or two or three",
			"or more or even none.",
			"So in this way, every row in our current table",
			"is going to become one or more rows in our new pair of tables.",
			"We're factoring out the genres so that we",
			"can add multiple rows for every show, potentially, but still",
			"remap those genres back to the original show itself.",
			"So what is some of the buzzwords here?",
			"What's some of the language to be familiar with?",
			"Well, we need to know what kinds of types are at our disposal here.",
			"So for that, let me propose this.",
			"Let me propose that we have this list here.",
			"It turns out, in SQLite, there are five main data types.",
			"And that's a bit of an oversimplification,",
			"but there's five main data types, some of which look familiar,",
			"a couple of which are a little weird.",
			"INTEGER is a thing.",
			"REAL is the same thing as float.",
			"So an integer might be a 32-bit or 4-byte value, like 1, 2, 3, or 4,",
			"positive or negative.",
			"Real number's going to have a decimal point in it,",
			"a floating point value, probably 32 bits by default.",
			"But those kinds of things, the sizes of these types,",
			"vary by system, just like they technically",
			"did in C. So do they vary by system in the world of SQL.",
			"But generally speaking, these are good rules of thumb.",
			"TEXT is just that.",
			"It's sort of the equivalent of a string of some length.",
			"But then in SQLite, it turns out there's two other data",
			"types we've not seen before--",
			"NUMERIC and BLOB.",
			"But more on those in just a little bit.",
			"BLOB is Binary Large Object.",
			"It means you can store 0's and 1's in your database.",
			"NUMERIC is going to be something that's number-like but isn't a number per se.",
			"It's like a year or a time, something that has numbers, but isn't",
			"just a simple integer at that.",
			"And let me propose, too, that SQLite is going to allow us to specify, too,",
			"when we create our own columns manually by executing the SQL code ourselves,",
			"we can specify that a column cannot be null.",
			"Thus far, we've ignored this.",
			"But some of you might have taken the fifth",
			"and just not given us the title of a show or a genre.",
			"Your answers might be blank.",
			"Some of you, maybe in registering for a website,",
			"don't want to provide information like where you live or your phone number.",
			"So a database in general sometimes does want to support null values.",
			"But you might want to say that it can't be null.",
			"A website probably needs your email address,",
			"needs your password and a few other fields, but not everything.",
			"And there's another keyword in SQL, just so you've seen it, called UNIQUE, where",
			"you can additionally say that whatever values are in this column",
			"must be unique.",
			"So a website might also use that.",
			"If you want to make sure that the same email address can't register",
			"for your website multiple times, you just",
			"specify that the email column is unique.",
			"That way, you can't put multiple people in with identical email addresses.",
			"So long story short, this is just more of the tools in our SQL toolkit,",
			"because we'll see some of these now indirectly.",
			"And the last piece of jargon we need before designing our own tables",
			"is going to be this.",
			"It turns out that, in SQL, there's this notion",
			"of primary keys and foreign keys.",
			"And we've not seen this in spreadsheets.",
			"Unless you've been working in the real world for some years",
			"and you have fairly fancy spreadsheets in front of you",
			"as an analyst or financial person or the like,",
			"odds are you've not seen keys or unique identifiers in quite the same way.",
			"But they're relatively simple.",
			"In fact, let me go back to our picture before and propose",
			"that when you have two tables like this and you",
			"want to use a simple integer to uniquely identify all of the rows in one",
			"of the tables, that's called technically an ID.",
			"That's what I'll call it by convention.",
			"You could call it anything you want, but ID just means it's a unique identifier.",
			"But semantically, this ID is what's called a primary key.",
			"A primary key is the column in a table that uniquely identifies every row.",
			"This means you can have multiple versions of The Office",
			"in that title field.",
			"But each of those rows is going to have its own number uniquely, potentially.",
			"So primary key uniquely identifies each row.",
			"In another table, like genres, which I'm proposing we create in just a moment,",
			"it turns out that you're welcome to refer back to another table",
			"by way of that unique identifier.",
			"But when it's in this context, that ID is called a foreign key.",
			"So even though I've called it show_id here,",
			"that's just a convention in a lot of SQL databases",
			"to imply that this is technically a column called ID in a table",
			"called show or shows, plural in this case.",
			"So if there's a number 1 here, and suppose",
			"that The Office has a unique ID of 1, we would",
			"have a row in this table called id is 1, title is The Office.",
			"The Office might be in the comedy category, the drama category,",
			"the romance category, so multiple ones.",
			"Therefore, in the genres table, we want to output three rows,",
			"the number 1, 1, 1 in each of those rows but the words \"comedy,\"",
			"\"drama,\" \"romance\" in each of those rows respectively.",
			"So again, the goal here is to just design our database better, not",
			"have these stupid comma-separated lists of values inside of a single column.",
			"We want to kind of blow that up, explode it, into individual rows.",
			"You might think, well, why don't we just use multiple columns?",
			"But again, per our principle from spreadsheets,",
			"you should not be in the habit of adding more and more columns when",
			"the data is all the same, like genre, genre, genre, right?",
			"The stupid way to do this in the spreadsheet world",
			"would be to have one column called Genre 1,",
			"another column called Genre 2, another column called Genre 3, Genre 4.",
			"And you can imagine just how stupid and inefficient this is.",
			"A lot of those columns are going to be empty for shows with very few genres.",
			"And it's just kind of messy at that point.",
			"So better, in the world of relational databases,",
			"to have something like a second table, where you have multiple rows that",
			"somehow link back to that primary key by way of what we're calling,",
			"conceptually, a foreign key.",
			"All right.",
			"So let's go ahead now and try to write this code.",
			"Let me go back to my IDE.",
			"Let me quit out of SQLite now.",
			"And let me just move away.",
			"I'm going to move this away, my file, for just a moment",
			"so that we're only left with our original data.",
			"Let's go about implementing a final version of my Python file that does",
			"this-- creates two tables--",
			"one called shows, one called genres--",
			"and then, two, in a for loop, iterates over that CSV",
			"and inserts some data into the shows and other data into the genres.",
			"How can we do this programmatically?",
			"Well, there's a final piece of the puzzle that we need.",
			"We need some way of bridging the world of Python and SQL.",
			"And here, we do need a library, because it would just",
			"be way too painful to do without a library.",
			"It can be CS50.",
			"CS50, as we'll see, makes this very simple.",
			"There are other third-party commercial and open-source libraries",
			"that you can also use in the real world, as well, that do the same thing.",
			"But the syntax is a little less friendly,",
			"so we'll start by using the CS50 library, which in Python, recall,",
			"has functions like get_string and get_int and get_float.",
			"But today, it also has support, it turns out, for SQL capabilities, as well.",
			"So I'm going to go back to my Favorites file.",
			"And I'm going to import not only CSV, but I'm also",
			"going to import from the CS50 library a feature called SQL.",
			"So we have a variable, if you will, inside of the CS50 library",
			"or, rather, a function inside of the CS50 library",
			"called SQL that, if I call it, will allow me",
			"to load a SQLite database into memory.",
			"So how do I do this?",
			"Well, let me go ahead and add a couple of new lines of code.",
			"Let me go ahead and open up a file called shows.db,",
			"but this time in write mode.",
			"And then just for kicks-- just for now, rather, I'm",
			"going to go ahead and close it right away.",
			"This is a Pythonic way of creating an empty file.",
			"It's kind of stupid looking, but by opening a file called shows.db",
			"in write mode and then immediately closing it,",
			"it has the effect of creating the file, closing the file.",
			"So I now have an empty file with which to interact.",
			"I could also do this, as an aside, by doing this--",
			"touch shows.db.",
			"touch kind of a strange command, but in a terminal window,",
			"it means to create a file if it doesn't exist.",
			"So we could also do that instead.",
			"But that would be independent of Python.",
			"So once I've created this file, let me go ahead",
			"and open the file now as a SQLite database.",
			"I'm going to declare a variable called db for database.",
			"I'm going to use the SQL function from CS50's library.",
			"And I'm going to open via somewhat cryptic string this--",
			"sqlite:///shows.db.",
			"Now, it looks like a URL, http://, but it's SQLite instead.",
			"And there's three slashes instead of the usual two.",
			"But this line of code, line 6, has the result",
			"of opening now that otherwise empty file with nothing",
			"in it yet as being a SQLite database using CS50's library.",
			"Why did I do that?",
			"Well, I did that because I now want to create my first table.",
			"Let me go ahead and execute, db.execute.",
			"So there's a function called execute inside of the CS50 SQL library.",
			"And I'm going to go ahead and run this.",
			"CREATE TABLE called shows, the columns of which",
			"are an id, which is going to be an integer, a title, which",
			"is going to be text, the primary key in which is going to be the id column.",
			"So this is a bit cryptic.",
			"But let's see what's happening.",
			"I seem to now, in line 8, be combining Python with SQL.",
			"And this is where now programming gets really powerful, fancy, cool,",
			"difficult, however you want to perceive it.",
			"I can actually use one language inside of another.",
			"How?",
			"Well, SQL is just a bunch of textural commands.",
			"Up until now, I've been typing them out manually",
			"in this program called SQLite3.",
			"There's nothing stopping me, though, from storing",
			"those same commands in Python strings and then",
			"passing them to a database using code.",
			"The code I'm using is a function called execute.",
			"And its purpose in life, and CS50 staff wrote this,",
			"is to pass the argument from your Python code into the database for execution.",
			"So it's like the programmatic way of just typing things manually",
			"at the SQLite prompt a few minutes ago.",
			"So that's going to go ahead and create my table called",
			"shows, in which I'm going to store all of those unique IDs",
			"and also the titles.",
			"And then let me do this again.",
			"db.execute CREATE TABLE genres, and that's",
			"going to have a column called show_id, which is an integer also, genre,",
			"which is text.",
			"And lastly, it's going to have a foreign key--",
			"it's going to wrap a little long here--",
			"on show_id, which references the shows table id.",
			"All right, so this is a lot.",
			"So let's just recap left to right.",
			"db.execute is my Python function that executes any SQL I want.",
			"CREATE TABLE genres creates a table called genres.",
			"The columns in that table will be something called show_id,",
			"which is an integer, and genre, which is a text field.",
			"But it's going to be one genre at a time, not multiple.",
			"And then here, I'm specifying a foreign key",
			"will be the show_id column, which happens to refer back",
			"to the shows table's IDs column.",
			"It's a little cryptic, but all this is doing is implementing for us",
			"the equivalent of this picture here.",
			"I could have manually typed both of these SQL",
			"commands at that blinking prompt.",
			"But again, no, I want to write a program now",
			"in Python that creates the tables for me and now, more interestingly,",
			"loads the data into that database.",
			"So let's go ahead and do this now.",
			"I'm not going to select a title from the user,",
			"because I want to import everything.",
			"I'm not going to use any counting or anything like that.",
			"So let's go ahead and just go inside of my loop as before.",
			"And this time, let's go ahead and, for row in reader,",
			"let's go ahead and get the current title, as we've always done.",
			"But let's also, as always, go ahead and strip it of white space",
			"and capitalize it, just to canonicalize it.",
			"And now I'm going to go ahead and execute db.execute, quote unquote,",
			"INSERT INTO shows the title column, the value of \"title.\"",
			"So I want to put the title here.",
			"It turns out that SQL libraries like ours support one final piece of syntax,",
			"which is a placeholder.",
			"In C, we use %s.",
			"In Python, we just use curly braces and put the word right there.",
			"In SQL, we have a third approach to the same problem-- just syntactically",
			"different, but conceptually the same.",
			"You put a question mark where you want to put a placeholder.",
			"And then outside of this string, I'm going to actually type in the value",
			"that I want to plug into that question mark.",
			"So this is so similar to printf in week 1.",
			"But instead of %s, it's a question mark now and then a comma-separated list",
			"of the arguments you want to plug in for those placeholders.",
			"So now this line of code 16 has just inserted all of those values",
			"into my database.",
			"And let's go ahead and run this.",
			"Before I go any further, let me go ahead and do this.",
			"I'm going to go ahead now and run python of favorites.py",
			"and cross my fingers, as always.",
			"It's taking a moment, taking a moment.",
			"That's because there's a decent-sized file there.",
			"Or I screwed up.",
			"This is taking too long.",
			"Oh, OK.",
			"I should have just been more patient.",
			"All right.",
			"So it just seems my connection's a little slow.",
			"So as I expected, everything is 100% correct, and it's working fine.",
			"So now let's go ahead and see what I actually did.",
			"If I type ls, notice that I have a file called shows.db.",
			"This is brand new, because my Python program created it this time.",
			"Let's go ahead and run sqlite3 of shows.db",
			"just so I can now see what's inside of it.",
			"Notice that I can do .schema just to see what tables exist.",
			"And indeed, the two tables that I created in my Python code",
			"seem to exist.",
			"But notice that there's--",
			"if I do SELECT * FROM shows, let's see all the data.",
			"Voila.",
			"There is a table that's been programmatically created.",
			"And it has, notice this time, no timestamps, no genres.",
			"But it has an ID on the left and the title on the right.",
			"And amazingly, all of the IDs are monotonically increasing from 1",
			"on up to 513, in this case.",
			"Why is that?",
			"Well, one of the features you get in a SQL database",
			"is if you define a column as being a primary key in SQLite,",
			"it's going to be auto incremented for you.",
			"Recall that nowhere in my code did I even have a line, an integer,",
			"inputting 1, then 2, then 3.",
			"I could absolutely do that.",
			"I could have done something like this-- counter--",
			"rather, I could have done something like this-- counter = 1.",
			"And then down here, I could have said id, title, give myself",
			"two placeholders, and then pass in the counter each time.",
			"I could have implemented this myself and then, on each iteration,",
			"done counter += 1.",
			"But with SQL databases, as we've seen, you",
			"get a lot more functionality built in.",
			"I don't have to do any of that, because if I've",
			"declared that ID as being a primary key, SQLite is going to insert it for me",
			"and increment it also for me, as well.",
			"All right.",
			"So if I go back to SQLite, though, notice that I do have IDs and titles.",
			"But if I SELECT * FROM genres, there's of course nothing there yet.",
			"So how now do I get all of the genres for each of these shows in?",
			"I need to finish my script.",
			"So inside of this same loop, I have not only the title in my current row,",
			"but I also have genres in the current row.",
			"But the genres are separated by commas.",
			"Recall that in the CSV, next to every title,",
			"there's a comma-separated list of genres.",
			"How do I get at each genre individually?",
			"Well, I'd like to be able to say for genre in row bracket genres.",
			"But this is not going to work, because that's not going",
			"to be split up based on those commas.",
			"That's literally just going to iterate over,",
			"in fact, all of the characters in that string, as we saw last week.",
			"But it turns out that strings in Python have a fancy split",
			"function, whereby I can split on a comma followed by a space.",
			"And what this function will do for me in Python is",
			"take a comma separated list of genres and explode it, so to speak,",
			"split it on every comma, space into a Python list",
			"containing genre after genre in an actual Python list",
			"a la square brackets.",
			"So now I can iterate over that list of individual genres.",
			"And inside of here, I can do db.execute INSERT INTO genres show_id, genre,",
			"the values, question mark, question mark.",
			"But huh, there's a problem.",
			"I can definitely plug in the current genre, which is this.",
			"But I need to put something here still.",
			"For that first question mark, I need a value for the show_id.",
			"How do I know what the ID is of the current TV show?",
			"Well, it turns out the library can help you with this.",
			"When you insert new rows into a table that has a primary key,",
			"it turns out that most libraries will return you that value in some way.",
			"And if I go back to line 15 and I actually",
			"store the return value of db.execute after using INSERT,",
			"the library will tell me what was the integer that",
			"was just used for this given show.",
			"Maybe it's 1, 2, 3.",
			"I don't have to know or care as the programmer.",
			"But the return value, I can store in a variable.",
			"And then down here, I can literally put that same ID so that now,",
			"if I am inputting The Office, whose ID is 1, into the shows table",
			"and its genres are comedy, drama, romance,",
			"I can now inside of this for loop, this nested for loop,",
			"insert 1 followed by \"comedy,\" 1 followed by \"drama,\" 1 followed",
			"by \"romance,\" three rows all at once.",
			"And so now let's go back down here into my terminal window.",
			"Let me remove the old shows.db with rm, just to start fresh.",
			"Let me go ahead and rerun python of favorites.py.",
			"I'll be more patient this time, because cloud's being a little slow.",
			"So it's doing some thinking.",
			"And in fact, there's more work being done now.",
			"At this point in the story, my program is presumably",
			"iterating over all of the rows in the CSV.",
			"And it's inserting into the shows table one at a time,",
			"and then it's inserting one or more genres into the genres table.",
			"It's a little slow.",
			"If we were on a faster system or if I were doing it on my own Mac or PC,",
			"it would probably go down more quickly.",
			"But you can see here an example of why I use the .import command in the first",
			"place.",
			"That automated some of this process.",
			"But unfortunately, it didn't allow me to change the format of my data.",
			"But the key point to make here is that even though this",
			"is taking a little bit of time to insert these hundreds of rows all at once,",
			"I'm only going to have to do this once.",
			"And what was asked a bit ago was the performance of this.",
			"It turns out that now that we have full control over the SQL database,",
			"it turns out we're going to have the ability to actually improve",
			"the performance thereof.",
			"Oh, OK.",
			"As expected, it finished right on time.",
			"And let me go ahead now and run sqlite3 on shows.db.",
			"All right, so now I'm back in my raw SQL environment.",
			"If I do SELECT * FROM shows, which I did before,",
			"we'll see all of this as before.",
			"If I SELECT * FROM shows WHERE title = \"THE OFFICE,\"",
			"I'll see the actual unique IDs of all of those.",
			"We didn't bother eliminating duplicates.",
			"We just kept everything as is, but we gave everything a unique ID.",
			"But if I now do SELECT * FROM genres, we'll see all of the values there.",
			"And notice the key detail.",
			"There is only one genre per row here.",
			"And so we can ultimately line those up with our titles.",
			"And our titles here, we had all of these here.",
			"Something's wrong.",
			"I want to get this right.",
			"Let's go ahead and take our second and final five-minute break here.",
			"And we'll come back, and I will explain what's going on.",
			"All right, we are back.",
			"And just before we broke up, my own self-doubt was starting to creep in.",
			"But I'm happy to say, with no fancy magic behind the scenes,",
			"everything was actually working fine.",
			"I was just doubting the correctness of this.",
			"If I do SELECT * FROM shows, I indeed get back",
			"two columns, one with the unique ID, the so-called primary key, followed",
			"by the title of each of those shows.",
			"And if I similarly search for * FROM genres, I get single genres at a time.",
			"But on the left-hand side are not primary keys per se",
			"but now those same numbers here in this context called",
			"foreign keys that map one to the other.",
			"So for instance, whatever show 512 is had five different genres associated",
			"with it.",
			"And in fact, if I go back a moment to shows, it looks like Game of Thrones",
			"was decided by one of you as belonging in thriller, history, adventure,",
			"action, and war, as well, those five.",
			"So now this is what's meant by relational database.",
			"You have this relation or relationship across multiple tables",
			"that link some data in one to some other data in the like.",
			"The catch, though, is that it would seem a little harder now",
			"to answer questions, because now I have to kind of query two tables",
			"or execute two separate queries and then combine the data.",
			"But that's not actually the case.",
			"Suppose that I want to answer the question of,",
			"what are all of the musicals among your favorite TV shows?",
			"I can't select just the shows, because there's no genres in there anymore.",
			"But I also can't select just the genres table,",
			"because there's no titles in there.",
			"But there is a value that's bridging one and the other, that foreign key",
			"to primary key relationship.",
			"So you know what I can do off the top of my head?",
			"I'm pretty sure I can select all of the show_ids from the genres table",
			"where a specific genre = \"Musical.\"",
			"And I don't have to worry about commas or spaces now,",
			"because again, in this new version that I have designed programmatically",
			"with code, musical and every other genre is just a single word.",
			"If I hit Enter, all of these show_ids were decided",
			"by you all as belonging to musicals.",
			"But now this is not interesting, and I certainly",
			"don't want to execute 10 or so queries manually",
			"to look up every one of those IDs.",
			"But notice what we can do in SQL, as well.",
			"I can nest queries.",
			"Let me put this whole query in parentheses for just a moment",
			"and then prepend to it the following.",
			"SELECT title FROM shows WHERE the primary key, id, is in this subquery.",
			"So you can have nested queries similar in spirit a bit like in Python and C",
			"when you have nested for loops.",
			"In this case, just like in grade school math, whatever is in the parentheses",
			"will be executed first.",
			"Then the outer query will be executed using the results of that inner query.",
			"So if I select the title from shows where the ID is in that list of IDs,",
			"voila.",
			"It seems that, somewhat amusingly, several of you",
			"think that Breaking Bad, Supernatural, Glee, Sherlock, How I Met Your Mother,",
			"Hawaii Five-0, Twin Peaks, The Lawyer, and My Brother, My Brother",
			"and Me are all musicals.",
			"I take exception to a few of those, but so be it.",
			"You checked the box for musical for those shows.",
			"So even though we've designed things better in the sense",
			"that we've normalized our database by factoring out commonalities",
			"or, rather, we've cleaned up the data, there's",
			"still admittedly some redundancy.",
			"There's still admittedly some redundancy.",
			"But I at least now have the data in clean fashion",
			"so that every column has just a single value in it and not",
			"some contrived comma-separated list.",
			"Suppose I want to find out all of the genres",
			"that you all thought The Office was in.",
			"So let's ask kind of the opposite question.",
			"Well, how might I do that?",
			"Well, to figure out The Office, I'm going to first need to SELECT the id",
			"FROM shows WHERE title = \"THE OFFICE,\" because a whole bunch of you",
			"typed in The Office.",
			"And we gave each of your answers a unique identifier",
			"so we could keep track of it.",
			"And there's all of those numbers.",
			"Now, this is, like, dozens of responses.",
			"I certainly don't want to execute that many queries.",
			"But I think a subquery will help us out again.",
			"Let me put parentheses around this whole thing.",
			"And now let me say SELECT DISTINCT genre FROM genres WHERE",
			"the show_id in the genres table is in that query.",
			"And just for kicks, let me go ahead and ORDER BY genre.",
			"So let me go ahead and execute this.",
			"And, OK, somewhat amusingly, those of you who inputted The Office",
			"checked boxes for animation, comedy, documentary, drama, family, horror,",
			"reality-TV, romance, and sci-fi.",
			"I take exception to a few of those, too.",
			"But this is what happens when you accept user input.",
			"So here again, we have with this SQL language",
			"the ability to express fairly succinctly, even though it's",
			"a lot of new features today all at once, what would otherwise take me",
			"a dozen or two lines in Python code to implement",
			"and god knows how many lines of code and how many hours it",
			"would take me to implement something like this in C. Now, admittedly,",
			"we could do better than this design.",
			"This table or this picture represents what we have now.",
			"But you'll notice a lot of redundancy implicit in the genres table.",
			"Any time you check the comedy box, I have a row now",
			"that says comedy, comedy, comedy, comedy.",
			"And the show_id differs, but I have the word \"comedy\" again and again.",
			"And now, that tends to be frowned upon in the world of relational databases,",
			"because if you have a genre called comedy or one",
			"called musical or anything else, you should ideally just",
			"have that living in one place.",
			"And so if we really wanted to be particular and really, truly",
			"normalize this database, which is an academic term referring",
			"to removing all such redundancies, we could actually do it like this.",
			"We could have a shows table still with an id and title, no difference there.",
			"But we could have a genres table with two columns, id and name.",
			"Now, this is its own id.",
			"It has no connection with the show_id.",
			"It's just its own unique identifier, a primary key here now,",
			"and the name of that genre.",
			"So you would have one row in the genres table",
			"for comedy, for drama, music, musical, and everything else.",
			"And then you would use a third table, which",
			"is colloquially called a join table, which I'll draw here in the middle.",
			"And you can call it anything you want, but we've",
			"called it shows_genres to make clear that this table implements",
			"a relationship between those two tables.",
			"And notice that in this table is really no juicy data.",
			"It's just foreign keys--",
			"show_id, genre_id.",
			"And by having this third table, we can now",
			"make sure that the word \"comedy\" only appears in one row anywhere.",
			"The word \"musical\" only appears in one row anywhere.",
			"But we use these more efficient integers called show_id and genre_id,",
			"which respectively point to those primary keys and their primary tables",
			"to link those two together.",
			"And this is an example of what's called in the world of databases",
			"a many-to-many relationship.",
			"One show can have many genres.",
			"One genre can belong to many shows.",
			"And so by having this third table, you can",
			"have that many-to-many relationship.",
			"And again, the third table now allows us to truly normalize",
			"our data set by getting rid of all of the duplicate comedy, comedy, comedy.",
			"Why is this important?",
			"Probably not a huge deal for genres.",
			"But imagine with my current design if I made a spelling mistake,",
			"and I misnamed comedy.",
			"I would now have to change every row with the word comedy again and again.",
			"Or if maybe you change the genres of the shows,",
			"you would have to change it in multiple places.",
			"But with this other approach with three tables,",
			"you can argue that now you only have to change",
			"the name of a genre in one place, not all over the place.",
			"And that, in general, in C and now in Python and now",
			"SQL has generally been a good thing not to copy paste identical values",
			"all over the place.",
			"All right.",
			"So with that said, what other tools do we have at our disposal?",
			"Well, it turns out that there are other data types out there in the real world",
			"using SQL besides just these five--",
			"BLOB, INTEGER, NUMERIC, REAL, and TEXT.",
			"BLOB, again, is for binary stuff, generally not",
			"used except for more specialized applications, let's say.",
			"INTEGER, which is an int, typically 32 bits;",
			"NUMERIC, which is something like a date or a year",
			"or time or something like that; REAL numbers, which",
			"are floating point values; and TEXT, which are things like strings.",
			"But if you graduate ultimately from SQLite on phones",
			"and on Macs and PCs to actual servers that run Oracle, MySQL,",
			"and PostgreSQL if you're actually running",
			"your own internet-style business, well, it",
			"turns out that more sophisticated, even more powerful",
			"databases come with other subtypes, if you will.",
			"So besides INTEGER, you can specify smallint for small numbers,",
			"maybe using just a few bits instead of 32--",
			"INTEGER or bigint, which uses 64 bits instead of 32.",
			"The Facebooks, the Twitters of the world need to use bigint a lot,",
			"because they have so much data.",
			"You and I can get away with simple integers, because we're not",
			"going to have more than 4 billion favorite TV shows in a class,",
			"certainly.",
			"Something like REAL, you can have 32-bit real numbers or, a little weirdly",
			"named, double precision, which is like a double was in C, using 64 bits instead",
			"for more precision.",
			"NUMERIC is kind of this catchall.",
			"You can have not only dates and date times but things like Boolean values.",
			"You can specify the total number of digits",
			"to store using this numeric scale and precision.",
			"So it relates to numbers that aren't just quite integers.",
			"And then you also have categories of TEXT--",
			"char followed by a number, which specifies",
			"that every value in the column will have the same number of characters,",
			"that's helpful for things where the length in advance, like in the US.",
			"All states, all 50 states, have two-character codes,",
			"like MA for Massachusetts, CA for California.",
			"char(2) would be appropriate there, because you",
			"know every value in the column is going to have two characters.",
			"When you don't know, though, you can use varchar.",
			"And varchar specifies a maximum number of characters.",
			"And so you might specify varchar of, like, 32.",
			"No one might be able to type in a name that's longer than 32 characters,",
			"or varchar(200) if you want to allow for something even bigger.",
			"But this is germane to our real-world experience with the web.",
			"If you've ever gone to a website, start filling out a form,",
			"and all of a sudden you can't type any more characters,",
			"your response is too long--",
			"why is that?",
			"Well, one, the programmers just might not",
			"want you to keep expressing yourself in more detail, especially",
			"if it's a complaint form on a customer service site.",
			"But pragmatically, it's probably because their database was designed",
			"to store a finite number of characters.",
			"And you have hit that threshold.",
			"And you certainly don't want to have a buffer",
			"overflow, like in C. So the database will enforce a maximum value n.",
			"And then text is for even bigger chunks of text.",
			"If you're letting people copy paste their resumes",
			"or hold documents or even larger sets of text, you might use text instead.",
			"So let's then consider a real-world data set.",
			"Things get really interesting, and all of these very academic ideas",
			"and recommendations really come into play",
			"when we don't had hundreds of favorites but when we have thousands instead.",
			"And so what I'm going to go ahead and do here is download a file here,",
			"which is a SQLite version of the IMDb, Internet Movie Database,",
			"that some of you might have used in website form",
			"in order to look up movies and ratings thereof and the like.",
			"And what we've done in advance is we wrote",
			"a script that downloaded all of that information in advance as TSV files.",
			"It turns out that they, Internet Movie Database, make all of their data",
			"available as TSV files, Tab-Separated Values.",
			"And we went ahead and imported it with a script called shows.db as follows.",
			"So I'm going to go ahead in just a moment",
			"and open up shows.db, which is not the version I created earlier",
			"based on your favorites.",
			"This is now the version that we, the staff,",
			"created in advance by downloading hundreds of thousands",
			"of movies and TV shows and actors and directors from IMDb.com",
			"under their license and then imported into a SQLite database.",
			"So how can I see what's in here?",
			"Well, let me go ahead and type .schema, recall.",
			"And you'll see a whole bunch of data therein.",
			"And in fact, in pictorial form, it actually looks like this.",
			"Here is a picture that just gives you the lay of the land.",
			"There's going to be a people table that has",
			"an ID for every person, a name, and their birth year.",
			"There's going to be a shows table, just like we've been talking,",
			"which is IDs, titles of shows-- also, though, the year that the show debuted",
			"and the number of episodes that the show had.",
			"Then there's going to be genres, similar in design to before.",
			"So we didn't go all out and factor it out into a third table.",
			"We just have some duplication here, admittedly, in genres.",
			"But then there's a ratings table.",
			"And here's where you can see where relational databases get interesting.",
			"You can have a ratings table storing ratings, like 1 to 5,",
			"but also associate those ratings with a show by way of its show_id.",
			"And then you can keep track of the number of votes that that show got.",
			"Writers, notice, is a separate table.",
			"And notice this is kind of cool.",
			"This table, per the arrows, relates to the shows table and the people table,",
			"because this is a joined table.",
			"A foreign key of show_id and a foreign key of person_id",
			"refer to the shows table and the people table respectively",
			"so that a human person can be a writer for multiple shows",
			"and one show can have multiple writers, another many-to-many relationship.",
			"And then lastly, stars, the actors in a show.",
			"Notice that this, too, is a join table.",
			"It's only got two foreign keys, a show_id",
			"and a person_id that are referring back to those tables respectively.",
			"And here's where it really makes sense of relational database.",
			"It would be pretty stupid and bad design if you",
			"had names of all of the directors and names of all of the writers",
			"and names of all of the stars of these shows in separate tables in duplicate,",
			"like Steve Carell, Steve Carell, Steve Carell.",
			"All of those actors and directors and writers",
			"and every other role in the business are just people at the end of the day.",
			"So in a relational database, the advice would",
			"be to put all of those people in a people table",
			"and then use primary and foreign keys to refer to, to relate them to,",
			"these other types of tables.",
			"The catch is, though, that when we do this,",
			"it turns out that things can be slow when we have lots of data.",
			"So for instance, let me go into this.",
			"Let me go ahead and SELECT * FROM shows;.",
			"That's a lot of data.",
			"It's pretty fast on my Mac, and I switched from the IDE to my Mac just",
			"to save time, because it's a little faster doing things",
			"locally instead of in the cloud.",
			"Let me go ahead and count the number of shows in this IMDb database",
			"by using COUNT.",
			"153,331 TV shows.",
			"So that's a lot.",
			"How about the count of people from the people table?",
			"457,886 people who might be stars or writers or some other role, as well.",
			"So this is a sizable data set.",
			"So let me go ahead and do something simple, though.",
			"Let me go ahead and SELECT * FROM shows WHERE title = \"The Office.\"",
			"And this time, I don't have to worry about weird capitalization or spacing.",
			"This is IMDb.",
			"This is clean data from an authoritative source.",
			"Notice that there's actually different versions of The Office.",
			"You probably know the UK one and the US one.",
			"There's other shows that are unrelated to that particular type of show.",
			"But each of them is distinguished, notice, by the year here.",
			"All right, so that's kind of a lot.",
			"And let's do this again.",
			"Let me go ahead and turn on a feature temporarily just",
			"to time this query by turning on a timer in this program.",
			"And let me run it again.",
			"It looks like it took 0.012 seconds of real time to do that search.",
			"That's pretty fast.",
			"I barely noticed, certainly because it's so fast.",
			"But let me go ahead and do this.",
			"Let me go ahead and create an index called title_index on the table",
			"called shows on its title column.",
			"Well, what am I doing?",
			"Well, to answer the question finally from before about performance,",
			"by default, everything we've been doing is indeed big O of n.",
			"It's just being linearly searched from top",
			"to bottom, which seems to call into question the whole purpose of SQL if we",
			"were doing no better than with CSVs.",
			"But an index is a clue to the database to load",
			"the data more efficiently in such a way that you get logarithmic time.",
			"An index is a fancy data structure that the SQLite database or the Oracle",
			"database or the MySQL database, whatever product you're using,",
			"builds up for you in memory.",
			"And then it does something using syntax like this",
			"that builds in memory generally something known as a B-tree.",
			"We've talked a bit about trees in the class.",
			"We talked about binary search trees, things that kind of look",
			"like family trees.",
			"A B-tree is essentially a family tree that's",
			"just very wide and not that tall.",
			"It's a data structure similar in spirit to what we looked at in C.",
			"But it tries to keep all of the leaf nodes, all of the children",
			"or grandchildren or great-grandchildren, so to speak,",
			"as close to the root as possible.",
			"And the algorithm it uses for that tends to be proprietary or documented",
			"based on the system you're using.",
			"But it doesn't store things in a list.",
			"It does not store things top to bottom, like the tables we view them as.",
			"Underneath the hood, those tables that look like very tall structures",
			"are actually, underneath the hood, implemented",
			"with fancier things called trees.",
			"And if we create those trees by creating what are properly called indexes",
			"like this, it might take us a moment, like 0.098 seconds, to create an index.",
			"But now notice what happens.",
			"Previously, when I searched the titles for The Office, using linear search,",
			"it took 0.012 seconds.",
			"If I do the same query again after having created the index",
			"and having told SQLite, build me this fancy tree in memory, voila.",
			"0.001 seconds, so orders of magnitude faster.",
			"Now, both are fast to us humans, certainly.",
			"But imagine the data set being even bigger, the query being even bigger.",
			"These indexes can get even larger than that.",
			"Rather, the queries can take longer than that",
			"and therefore take even more time than that.",
			"But unfortunately, if I've got all of my data all over the place,",
			"as in a diagram like this, my god.",
			"How do I actually get useful work done?",
			"How do I get back the people in a movie and the writers",
			"and the stars and the ratings if it's all over the place?",
			"I would seem to have created such a mess and that I now",
			"need to execute all of these queries.",
			"But notice it doesn't have to be that complicated.",
			"It turns out that there's another keyword in SQL, really the last",
			"that we'll look at here, called JOIN.",
			"The JOIN keyword, which you can use implicitly or explicitly,",
			"allows you to just join tables together and sort of reconstitute",
			"a bigger, more user friendly table.",
			"So for instance, suppose I want to get all of Steve Carell's TV shows,",
			"not just The Office.",
			"Well, recall that I can select Steve's ID from the people",
			"table WHERE name = \"Steve Carell.\"",
			"So again, he has a different ID in this table, because this is from IMDb.",
			"But there's his ID.",
			"And let me go ahead and turn the timer off for now.",
			"All right.",
			"So there is his ID, 126797.",
			"I could copy paste that into my code, but that's not necessary",
			"thanks to these nested queries.",
			"I can do something like this.",
			"Let me go ahead and now select all of the show_ids from the stars table",
			"where person_id from that table is equal to this result.",
			"So there's that join table, stars, that links people and shows.",
			"So let me go ahead and execute that.",
			"All right.",
			"So there's all of the show_ids of Steve Carell's TV shows.",
			"That's a lot.",
			"And it's very nonobvious what they are.",
			"So let me do another nested query by putting all of that in parentheses",
			"and now SELECT title FROM shows WHERE the ID of the show",
			"is in this big, long list of show_ids.",
			"And there are all of the shows that he's in, including The Dana Carvey Show",
			"back when, The Office up at the top, and then, most recently,",
			"shows like The Morning Show on Apple TV.",
			"All right, so that's pretty cool that we can actually",
			"reconstitute the data like that.",
			"But it turns out there's different ways of doing that, as well.",
			"And you'll see more of this in the coming weeks",
			"and in the problem sets and labs and the like.",
			"But it turns out we can do other things, as well.",
			"And let me just show this syntax even though it'll",
			"look a little cryptic at first glance.",
			"You can also use that JOIN keyword as follows.",
			"I can select the title from the people table joined with the stars table",
			"on the people.id column equaling the stars.person_id column.",
			"So in other words, I can select a title from the result",
			"of joining people and stars, like this, on the id column in one",
			"and the person_id column in the other.",
			"And I can join in the shows table on the stars.show_id equaling the shows.id.",
			"So again, now I'm joining the primary and foreign keys on these two tables",
			"where the name equals \"Steve Carell.\"",
			"So this is the most cryptic thing we've seen yet.",
			"But it just means take this table and join it with this one",
			"and then join it with this one and filter all of the resulting joined rows",
			"by a name of Steve Carell.",
			"And voila.",
			"There we have all of those answers, as well.",
			"And there's other ways of doing this, too.",
			"I'll leave unsaid now some of the syntax for that.",
			"But that felt a little slow.",
			"And in fact, let me go ahead and turn my timer back on.",
			"Let me re-execute this last query.",
			"SELECT title FROM people joining on stars, joining on shows",
			"WHERE name = \"Steve Carell.\"",
			"That took over half a second.",
			"So that was actually admittedly kind of slow.",
			"But again, indexes come to the rescue and if, again, we",
			"don't allow linear search to dominate.",
			"But let me go ahead and create a few indexes.",
			"Create an index called person_index on the stars table, the person_id column.",
			"Why?",
			"Well, my query a moment ago used the person_id column.",
			"It filtered on it.",
			"So that might be a bottleneck.",
			"I'm going to go ahead and create another index called show_index",
			"on the stars table on show_id.",
			"Similarly, a moment ago, my query used the show_id column.",
			"And so that, too, might have been a bottleneck linearly, top to bottom.",
			"So let me create that index.",
			"And then lastly, let me create an index called name_index--",
			"and this is perhaps the most obvious, similar to the show titles before--",
			"on the people table on the name column.",
			"And that, too, took a moment.",
			"Now, in total, this took almost a full second.",
			"But these indexes only get created once.",
			"They get maintained automatically over time.",
			"But you don't incur this with every query.",
			"Now let me do my SELECT again.",
			"Let me SELECT title FROM people joining the stars table,",
			"joining the shows table WHERE name = \"Steve Carell.\"",
			"Boom.",
			"0.001 seconds.",
			"That was an order of magnitude faster than the more than half a second",
			"it took us a little bit ago.",
			"So here, too, you see the power of a relational database.",
			"So even though we've created some problems for ourselves over time,",
			"we've solved them ultimately-- granted, with some more sophisticated features",
			"and additional syntax.",
			"But a relational database is indeed why you use them",
			"in the real world for the Twitters, the Instagrams, the Facebooks, the Googles,",
			"because they can store data so efficiently",
			"without redundancy, because you can normalize them and factor everything",
			"out.",
			"But they can still maintain the relations",
			"that you might have seen in a spreadsheet",
			"but using something closer to logarithmic thanks",
			"to those tree structures.",
			"But there are problems.",
			"And what we wanted to do is end on today two primary problems",
			"that are introduced with SQL, because they are just unfortunately",
			"so commonly done.",
			"Notice this year.",
			"There is something generally known as a SQL injection",
			"attack, which you are vulnerable to in any application",
			"where you're taking user input.",
			"That hasn't been an issue for my favorites.py file,",
			"where I only took input from a CSV.",
			"But if one of you were malicious, what if one of you",
			"had maliciously typed in the word \"delete\" or \"update\"",
			"or something else as the title of your show",
			"and I accidentally plugged it into my own Python code when executing a query?",
			"You could potentially inject SQL into my own code.",
			"How might that be?",
			"Well, if logging in via Yale, you'll typically see a form like this.",
			"Or logging in via Harvard to something, you'll see a form like this.",
			"Here's an example that I'm pretty sure neither",
			"Harvard nor Yale are vulnerable to.",
			"Suppose I type in my email address to this login form",
			"as malan@harvard.edu'--.",
			"It turns out, in SQL, --",
			"is the symbol for commenting if you want to comment something out.",
			"It turns out that the single quote is used",
			"when you want to search for something like Steve Carell or, in this case,",
			"malan@harvard.edu.",
			"It can be double quotes.",
			"It can be single quotes.",
			"In this case, I'm using single quotes here.",
			"But let's consider some sample code, if you will, in Python.",
			"Here's a line of code that I propose might exist in the backend",
			"for Harvard's authentication or Yale's or anyone else's.",
			"Maybe someone wrote some Python code like this using SELECT * FROM users",
			"WHERE username = question?",
			"AND password = question?, and they plugged in username and password.",
			"Whatever the user typed into that web form a moment ago gets",
			"plugged in here to these question marks.",
			"This is good.",
			"This is good code, because you're using the SQL question marks.",
			"So if you literally just do what we preach today and use these question",
			"mark placeholders, you are safe from SQL injection attacks.",
			"Unfortunately, there are too many developers",
			"in the world that don't practice this or don't realize this or do forget this.",
			"If you instead resort to Python approaches like this,",
			"where you use an f-string instead, which might be your instincts after last",
			"week, because they're wonderfully convenient with the curly braces",
			"and all--",
			"suppose that you literally plug in username and password",
			"not with the question mark placeholders but just literally",
			"in between those curly braces.",
			"Watch what happens if my username, malan@harvard.edu,",
			"was actually typed in by me maliciously as malan@harvard.edu'--.",
			"",
			"That would have the effect of tricking this Python",
			"code into doing essentially this.",
			"Let me do a find and replace.",
			"It would trick Python into executing username = \"malan@harvard.edu\"--\"",
			"and then other stuff.",
			"Unfortunately, the -- again means comment,",
			"which means you could maybe trick a server into ignoring the whole password",
			"part of this SQL query.",
			"And if the SQL query's purpose in life is to check,",
			"is this username and password valid, so that you can decide to log the user in",
			"or to say, no, you're not authorized, well,",
			"by essentially commenting out everything related to password,",
			"notice what I've done.",
			"I've just now theoretically logged myself in as malan@harvard.edu without",
			"even knowing or inputting a password, because I injected SQL syntax,",
			"the quote and the --, into my query, tricking the server into just ignoring",
			"the password equality check.",
			"And so it turns out that db.execute, when you execute an INSERT,",
			"it returns to you as said the ID of the newly inserted row.",
			"When you use db.execute to select rows from a database table,",
			"it returns to you a list of rows, each of which is a dictionary.",
			"So this is now pseudocode down here with my comment.",
			"But if you get back one row, that would seem",
			"to imply that there is a user named malan@harvard.edu.",
			"Don't know what his password is, because whoever this person is maliciously",
			"tricked the server into ignoring that syntax.",
			"So SQL injection attacks are unfortunately",
			"one of the most common attacks against SQL databases.",
			"They are completely preventable if you simply use placeholders and use",
			"libraries, whether it's CS50's or other third-party libraries",
			"that you may use down the road.",
			"A common meme on the internet is this picture here.",
			"If we Zoom in on this person's license plate",
			"or where the license plate should be, this",
			"is an example of someone theoretically trying",
			"to trick some camera on the highway into dropping the whole database.",
			"DROP is another keyword in SQL that deletes a database table.",
			"And this person was either intentionally or just",
			"a humorously trying to trick it into executing SQL",
			"by using syntax like this.",
			"So characters like single quotes, --, semicolons are all potentially",
			"dangerous characters in SQL if they're passed through unchanged",
			"to the database.",
			"A very popular xkcd comic-- let me give you a moment to just read this--",
			"is another well-known meme of sorts now in computer science.",
			"If you'd like to, read this one on your own.",
			"But henceforth, you are now in the family of educated learners who",
			"know who Little Bobby Tables is.",
			"Unfortunately, it's dead silence in here,",
			"so I can't tell if anyone is actually laughing at this joke.",
			"But anyhow, this is a very well-known meme.",
			"So if you're a computer scientist who knows SQL, you know this one.",
			"And there's one last problem we'd like to introduce if you don't mind",
			"just a couple of final moments here.",
			"And that is a fundamental problem in computing",
			"called race conditions, which for the first time",
			"is now manifest in our discussion of SQL.",
			"It turns out that SQL and SQL databases are very often used, again,",
			"in the real world for very high-performing applications.",
			"And by that, I mean, again, the Googles, the Facebooks, the Twitters",
			"of the world where lots and lots of data is coming into servers all at once.",
			"And case in point, some of you might have",
			"clicked Like on this egg some time ago.",
			"This is the most-liked Instagram post ever.",
			"As of last night, it was up to 50-plus million likes.",
			"Well eclipsed Kim Kardashian's previous post,",
			"which is still at 18 million or so.",
			"This is to say this is a hard problem to solve,",
			"this notion of likes coming in at such an incredible rate.",
			"Because suppose that, long story short, Instagram actually",
			"has a server with a SQL database.",
			"And they have code in Python or C++ or whatever language that's talking",
			"to that database.",
			"And suppose that they have code that's trying",
			"to increment the total number of likes.",
			"Well, how might this work logically?",
			"Well, in order to increment the number of likes that a picture like this egg",
			"has, you might first select from the database",
			"the current number of likes for the ID of that egg photograph.",
			"Then you might add 1 to it.",
			"Then you might update the database.",
			"And I didn't use it before, but just like there's INSERT and DELETE,",
			"there's UPDATE, as well.",
			"So you might update the database with the new count plus 1.",
			"So the code for that might look a little something",
			"like this, three lines of code using CS50's library here,",
			"where you execute SELECT likes FROM posts WHERE id = question?,",
			"where id is the unique identifier for that egg.",
			"And then I'm storing the result in a rows variable,",
			"which, again, I claim is a list of rows.",
			"I'm going to go into the first row, so that's rows bracket 0.",
			"And I'm going to go into the likes column to get the actual number.",
			"And that number, I'm going to store in a variable called likes.",
			"So this is going to be, like, 50,000,000,",
			"and I want it to go to 50,000,001.",
			"So how do I do that?",
			"Well, I execute on the database UPDATE posts SET likes = ?.",
			"And then I just plug in likes + 1.",
			"The problem, though, with the Instagrams and Googles and Twitters of the world",
			"is that they don't just have one server.",
			"They have many thousands of servers.",
			"And all of those servers might in parallel be receiving clicks from you",
			"and I on the internet.",
			"And those clicks translate into this code getting executed, executed,",
			"executed.",
			"And the problem is that when you have three lines of code and suppose Brian",
			"and I click on that egg at roughly the same time,",
			"my three lines might not get executed before his three lines or vice versa.",
			"They might get commingled chronologically.",
			"My first line might get executed, then Brian's first line might get executed.",
			"My second line might get executed, Brian's second line.",
			"So they might get interspersed on different servers",
			"or just temporally in time, chronologically.",
			"That's problematic, because suppose Brian and I click",
			"on that egg roughly at the same time.",
			"And we get back the same answer to the SELECT query.",
			"50 million is the current count.",
			"Then our next lines of code execute on the servers we happen to be on,",
			"which adds 1 to the likes.",
			"The server might accidentally end up updating the row for the egg",
			"with 50,000,001 both times, because the fundamental problem is",
			"if my code executes while Brian's code executes,",
			"we are both checking the value of a variable at essentially the same time.",
			"And we are both then making a conclusion--",
			"oh, the current likes are 50 million.",
			"We are then making a decision.",
			"Let's add 1 to 50 million.",
			"We are then updating the value with 50,000,001.",
			"The problem is, though, that, really, if Brian's code or the server he happens",
			"to be connected to on Instagram happens to have selected the number of likes",
			"first, he should be allowed to finish the code that's",
			"being executed so that when I select it, I see 50,000,001,",
			"and I add 1 to that so the new count is 50,000,002.",
			"This is what's known as a race condition.",
			"When you write code in a multiserver--",
			"more fancily known as a multithreaded environment-- lines of code",
			"chronologically can get commingled on different servers at any given time.",
			"The problem fundamentally derives from the fact",
			"that if Brian's server is in the middle of checking the state of a variable,",
			"I should be locked out.",
			"I should not be allowed to click on that button at the same time,",
			"or my code should not be allowed to execute logically.",
			"So there is a solution when you have to write code",
			"like this, as is common for Twitter and Instagram and Facebook and the like,",
			"to use what are called transactions.",
			"Transactions add some few new pieces of syntax that we won't dwell on today",
			"and you don't need to use in the coming days.",
			"But they do solve a fundamentally hard problem.",
			"Transactions essentially allow you to lock a table or, really,",
			"a row in the table so that if Brian's click on that egg",
			"results in some code executing that's in the process of checking what",
			"is the total like count, my click on the egg will not get handled by the server",
			"until his code is done executing.",
			"So in green here, I've proposed the way you should do this.",
			"You shouldn't just execute the middle three lines, \"you\" being Facebook,",
			"in this case.",
			"Instagram should execute BEGIN TRANSACTION first, then",
			"COMMIT the transaction at the end.",
			"And the design of transactions is that all of the lines in between",
			"will either succeed altogether or fail altogether.",
			"The database won't get into this funky state",
			"where we start losing track of likes on eggs.",
			"And though this has not been an issue in recent years,",
			"back in the day when Twitter was first getting started,",
			"Twitter was super popular and super offline a lot of the time.",
			"There was this thing called a Fail Whale, which",
			"is the picture they showed on their website",
			"when they were getting too much traffic to handle.",
			"That was because when people are liking and tweeting and retweeting things,",
			"it's a huge amount of data coming in.",
			"And it turns out it's very hard to solve these problems.",
			"But locking the database table or the rows with these transactions",
			"is one way fundamentally to solve this.",
			"And in our final extra time today, we thought",
			"we would play this out in the same example",
			"that I was taught transactions in some years ago.",
			"Suppose that the scenario at hand is that you and your roommates",
			"have a nice dorm fridge.",
			"And you're all in the habit of drinking lots of milk,",
			"and you want to be able to drink some milk.",
			"But you go to the fridge, like I'm about to here.",
			"And you realize, uh-oh, we're out of milk.",
			"And so now I am inspecting the state of this refrigerator, which",
			"is quite old but also quite empty.",
			"And the state of this variable, being empty,",
			"tells me that I should go to CVS and buy some more milk.",
			"So what do I then do?",
			"I'm presumably going to close the fridge,",
			"and I'm going to go and leave and go head to CVS.",
			"Unfortunately, the same problem arises that we'll act out here",
			"in our final 60 or so seconds together, whereby",
			"if Brian now, my roommate in this story, also wants some milk,",
			"he comes by when I'm already headed to the store,",
			"inspects the state of the fridge, and realizes, oh, we're out of milk.",
			"So he nicely will go restock, as well.",
			"So let's see how this plays out, and we'll",
			"see if there isn't a similar, analogous solution.",
			"So I've checked the state of the variable.",
			"We're indeed out of milk.",
			"I'll be right back.",
			"Just going to go to CVS.",
			"",
			"[MUSIC PLAYING]",
			"",
			"All right.",
			"I am now back from the store.",
			"I've picked up some milk.",
			"Going to go ahead and put it into the fridge and--",
			"oh, how did this happen?",
			"Now there's multiple jugs of milk.",
			"And of course, milk does not last that long.",
			"And Brian and I don't drink that much milk.",
			"So this is a really serious problem.",
			"We've sort of tried to update the value of this variable at the same time.",
			"So how do we go about fixing this?",
			"What's the actual solution here?",
			"Well, I dare say that we can draw some inspiration",
			"from the world of transactions and the world of databases.",
			"And perhaps create a visual for here that we",
			"hope you never forget if you take nothing away from today.",
			"Let's go ahead and act this out one last time where, this time,",
			"I'm going to be a little more extreme.",
			"I go ahead and open the fridge.",
			"I realize, oh, we're out of milk.",
			"I'm going to go to the store.",
			"I do not want to allow for this situation",
			"where Brian accidentally checks the fridge, as well.",
			"So I am going to lock the refrigerator instead.",
			"Let me go ahead and drape this through here.",
			"",
			"A little extreme, but I think so long as he can't get into the fridge,",
			"this shouldn't be a problem.",
			"Let me go ahead now and just attach the lock here.",
			"Almost got it.",
			"Come on.",
			"All right.",
			"Now the fridge is locked.",
			"Now I'm going to go get some milk.",
			"",
			"BRIAN YU: [SIGHS]",
			"",
			"[MUSIC PLAYING]",
			""
		],
		"is_youtube": false
	},
	"video_035": {
		"section": "CS50x 2021",
		"subsection": "Week 7",
		"unit": "Shorts",
		"video_sources": [
			"https://edx-video.net/HARCS50X2016-V029900_DTH.mp4",
			"https://edx-video.net/HARCS50X2016-V029900/HARCS50X2016-V029900.m3u8"
		],
		"video_duration": 1398,
		"speech_period": [
			0.25, 2.0, 3.17, 2.5, 3.9, 2.1, 4.924, 2.166, 1.916, 2.694, 2.21, 2.0,
			1.91, 2.49, 2.17, 3.59, 2.52, 3.24, 3.99, 6.09, 2.754, 1.416, 3.13, 2.75,
			3.54, 3.28, 5.0, 4.069, 2.291, 5.34, 3.4, 3.33, 2.542, 1.708, 3.45, 1.83,
			2.4, 3.72, 1.09, 4.13, 4.48, 2.9, 3.39, 1.32, 2.76, 3.16, 3.11, 1.74,
			4.92, 1.141, 2.249, 3.99, 1.96, 3.241, 1.999, 3.15, 2.72, 1.03, 2.099,
			1.291, 1.999, 2.991, 3.74, 4.454, 1.666, 2.52, 3.12, 5.4, 4.74, 3.48,
			4.65, 2.66, 3.55, 4.41, 3.492, 2.208, 2.7, 2.91, 4.86, 2.22, 2.49, 3.239,
			1.541, 2.583, 2.577, 2.0, 3.3, 4.26, 3.24, 2.094, 2.166, 1.71, 4.08, 2.61,
			3.11, 4.66, 3.03, 2.92, 1.58, 2.291, 2.929, 1.53, 2.84, 5.02, 2.4, 2.37,
			2.7, 3.81, 4.35, 1.74, 2.27, 2.9, 3.18, 0.89, 4.5, 4.49, 2.62, 3.87, 2.85,
			5.04, 3.97, 4.48, 2.995, 3.285, 2.104, 1.916, 3.72, 3.21, 3.63, 2.01,
			2.79, 3.747, 1.833, 3.63, 4.08, 3.58, 3.44, 2.88, 3.18, 2.13, 4.65, 3.48,
			4.065, 1.875, 4.54, 2.6, 4.11, 6.015, 2.944, 0.791, 2.22, 3.33, 3.06, 3.0,
			5.25, 4.35, 3.27, 2.74, 1.457, 1.833, 1.05, 2.875, 3.475, 4.05, 2.64,
			3.74, 1.93, 3.96, 2.55, 2.04, 1.219, 3.01, 2.851, 4.23, 3.06, 0.99, 3.36,
			3.3, 2.76, 2.67, 2.4, 2.67, 4.59, 1.71, 2.37, 6.09, 3.57, 2.58, 2.37,
			2.59, 2.151, 2.249, 1.624, 3.086, 3.0, 3.24, 1.5, 2.14, 3.08, 1.47, 1.74,
			4.08, 4.007, 2.833, 0.9, 2.367, 2.583, 1.68, 2.371, 2.999, 2.07, 2.901,
			3.249, 2.22, 1.74, 3.09, 1.809, 2.791, 2.39, 4.08, 3.84, 1.35, 3.964,
			1.916, 4.26, 3.33, 2.13, 2.91, 3.374, 2.416, 4.66, 2.39, 2.28, 3.84, 1.92,
			2.58, 1.92, 3.57, 2.55, 3.78, 3.64, 5.96, 2.43, 4.877, 2.083, 3.15, 5.49,
			1.139, 1.541, 4.53, 2.0, 2.8, 1.88, 3.71, 2.38, 0.944, 2.416, 2.934,
			1.416, 4.32, 3.96, 2.49, 2.85, 2.58, 4.05, 2.85, 2.807, 2.083, 2.35, 3.52,
			4.14, 2.91, 4.3, 1.667, 1.333, 3.319, 2.791, 3.59, 1.36, 4.44, 3.47, 1.22,
			2.583, 2.487, 3.68, 3.089, 3.041, 1.958, 3.381, 1.291, 2.52, 2.94, 2.91,
			1.74, 3.78, 1.14, 2.34, 3.656, 2.374, 2.41, 3.35, 3.84, 3.42, 3.78, 0.81,
			3.02, 1.75, 3.18, 2.88, 3.09, 4.042, 1.708, 4.27, 2.73, 1.227, 1.833,
			3.48, 3.09, 2.05, 2.27, 3.56, 1.75, 1.5, 5.02, 3.504, 1.166, 2.61, 3.51,
			3.37, 3.47, 3.78, 3.93, 4.21, 3.05, 3.24, 2.7, 2.91, 2.03, 3.49, 3.926,
			2.454, 2.699, 2.041, 3.84, 2.92, 4.704, 1.916, 2.499, 3.591, 3.17, 1.75,
			1.919, 2.49, 3.811, 3.419, 2.951, 5.21, 4.751, 1.749, 4.74, 3.36, 2.394,
			1.666, 3.05, 3.81, 2.7, 2.55, 2.11, 4.25, 2.692, 1.208, 5.19, 1.979,
			2.041, 3.21, 3.21, 3.18, 6.3, 4.47, 3.13, 3.835, 2.125, 3.64, 2.75, 6.48,
			2.13, 2.46, 3.291, 4.309, 4.16, 2.58, 3.54, 6.45, 2.16, 1.6, 2.87, 2.82,
			3.63, 2.94, 2.82, 3.79, 2.099, 2.541, 2.624, 2.941, 1.125, 2.73, 3.54,
			3.6, 2.94, 3.75, 4.999, 1.541, 2.333, 4.584, 0.583, 4.12, 1.55, 2.01,
			4.44, 4.27, 0.612, 1.458, 1.55, 3.67, 2.3, 2.34, 2.051, 1.249, 4.59, 1.77,
			0.949, 2.291, 2.05, 2.75, 3.016, 2.124, 2.083, 4.747, 1.11, 2.34, 3.15,
			1.852, 1.958, 3.21, 2.02, 3.2, 1.634, 2.416, 1.916, 3.094, 3.6, 3.15,
			3.754, 2.166, 1.484, 2.166, 3.9, 3.0, 2.1, 1.269, 1.041, 1.92, 3.177,
			2.583, 2.76, 2.94, 3.33, 3.81, 4.47, 3.18, 3.21, 2.577, 1.833, 3.0, 5.12,
			1.26, 1.97, 1.401
		],
		"transcript_en": [
			"",
			"DOUG LLOYD: So in our videos on web development,",
			"we've talked a couple of times now about what a database is.",
			"And in this video, we're going to get into a bit more detail",
			"and show you exactly what a database is, why we would use it,",
			"and how we might manipulate it.",
			"In order for us to build websites that are sort of more complex than just",
			"a page where they just go and see news, for example,",
			"we might need a database to store information,",
			"such as username and password combinations",
			"so that a user attempts to log in.",
			"That log-in information is sent to the database.",
			"It is checked against information in the database",
			"to see whether that username-password combination matches.",
			"And if so, it lets the user in.",
			"We might also store other stuff for users, like their shopping history",
			"or really any other information that you might",
			"want to keep long-term for a user.",
			"Now, if you ever used programs like Microsoft Excel or Google Sheets",
			"or Numbers, you're probably familiar with the basic idea of a database.",
			"A database consists of a couple of different levels of hierarchy.",
			"Within a database, we have tables.",
			"And within each of those tables, we have rows and columns.",
			"And if you are familiar with Excel, or perhaps even if you're not,",
			"let's take a quick second and I can draw this analogy for you",
			"about what a database, a table, a row, a column is.",
			"And then we can translate that in just a moment to the same idea in SQL.",
			"So on my screen here, I've opened up an Excel file.",
			"And across the top here, you see I have these letters--",
			"A, B, C, D, E. These would be different columns in my file.",
			"Down the left side, I have numbered rows, where I might put information.",
			"So, for example, I might just put my name here in cell A1.",
			"So it's in the A column in the first row.",
			"Now, down at the bottom left is a feature",
			"that you may not have used too much if you don't use Excel very frequently.",
			"But there's these notions of sheets.",
			"Sheets are sort of akin to different tables.",
			"Notice that when I switch to sheet 2, the data that was in sheet 1, my name,",
			"is no longer there.",
			"So each sheet has its own unique set of rows and columns.",
			"But all of these sheets are still bound up in one single file called Book 1.",
			"So the analogy here is that Book 1 is our database, which",
			"contains a different number of tables, which in Excel parlance",
			"is just a sheet.",
			"And each sheet has columns that we can put data in",
			"and rows that we can put data in, as well.",
			"So there are a couple of different types of database engines",
			"that we can use in our programs.",
			"We're going to talk about SQL, S-Q-L, which stands for the Structured Query",
			"Language.",
			"The Structure Query Language is a programming language",
			"whose sole purpose in life is to query or ask questions of or retrieve data",
			"from a database.",
			"And there are many different implementations of SQL.",
			"Two of the most popular are as follows-- we have",
			"MySQL which is an open-source platform.",
			"It is very commonly used to establish relational databases.",
			"We're not going to get into a lot of detail",
			"in this video about what a relational database is",
			"versus other types of database.",
			"But just know that there are more than one type,",
			"and we cover relational databases in this course.",
			"Another type, which we actually have used in CS50 since 2016,",
			"is SQLite, which has a very similar feature set to MySQL.",
			"But it's just a little more lightweight.",
			"It's a little easier to use on CS50 IDE.",
			"And so that's why we're actually going to be using that one in the class.",
			"Now, regardless of which implementation of SQL that you use, a lot of them",
			"will come with a tool called phpMyAdmin, which is a GUI or Graphical User",
			"Interface tool that is used to execute some",
			"of the more tedious or mundane database queries in a more user-m friendly way",
			"because you can just click and do things in the web browser.",
			"And those are most commonly used to build databases in the first place",
			"and to set up tables because that's the first thing you're",
			"going to do once you get your database configured, is to create a table.",
			"Because without a table, we have no rows and columns.",
			"And without rows and columns, we can't store any data.",
			"Tables have very cumbersome syntax that is used to set them up.",
			"And so using phpMyAdmin, the graphical interface, to build your table",
			"is definitely gonna come in handy.",
			"In the process of building your table, you're",
			"going to have to specify exactly which columns",
			"are going to be stored in that table.",
			"So at the very beginning, when you create your table, you say,",
			"my table's going to store usernames and passwords",
			"and whatever sort of other information you want.",
			"and you have to specify that before you have inserted any data into the table.",
			"So you have to design ahead of time what your table is going to look like.",
			"Once you've done that, pretty much every query except for, like,",
			"deleting the database and deleting the table",
			"that you're going to use on that table going forward",
			"is going to refer to data which is stored",
			"in the different rows of the table.",
			"Just like in C, every column of our SQL table",
			"is capable of holding data of different data types.",
			"So in C, for example, we had characters and strings and integers and floats.",
			"And SQL has a few more data types than that.",
			"This is just 20 of them, and this is not even an exhaustive list.",
			"But some of these things should look familiar.",
			"So, for example, we have int, which can store integers.",
			"But we also have these four other types, which can hold integers",
			"with different upper bounds.",
			"So you may recall from C that the upper bound of integer",
			"is 2 to the 31st power, or 2 to the 32nd power if they're unsigned integers.",
			"But here we can say small ints or tiny ints",
			"or medium or big ints, each of which have",
			"different upper bounds on the values.",
			"Decimal and float stand in place of double and float,",
			"which we're familiar with from C. We can also store date and time stamps",
			"in SQL databases.",
			"There's no data type for that that's native to C.",
			"But in SQL, there are a couple of different ways to do this.",
			"We can even do more exotic things like store geometry or line strings.",
			"And what are these?",
			"Well, geometry and line strings can be used to store in a SQL database",
			"a mapping out or a drawing out of an area on a map, such as using GIS data.",
			"And we can actually store that in our SQL table",
			"and recreate that exact drawing a little bit later on.",
			"Text sort of stands in the stead of strings",
			"for just arbitrarily large chunks of text.",
			"Enums are also a type that exists in C, but we don't talk about them too much",
			"in C. But really quickly, what an enum is is it is a column of your table",
			"that can be used to store a limited set of values.",
			"So, for example, I could have an enum that is called,",
			"like, favorite colors, for example.",
			"And I could specify when I'm building my table",
			"that it can only be capable of holding red, green, and blue.",
			"If you tried to insert a row that had purple in that place,",
			"that wouldn't work because it is not one of the enumerated values that",
			"can be stored in that column.",
			"There are also char and varchar.",
			"And these are not quite the same as what you might think they are in C.",
			"So let's just take a quick second to explain",
			"the difference between these two data types, which are pretty important.",
			"So unlike in C, char does not refer to a single character.",
			"It is actually sort of akin to our notion of a string,",
			"but with a caveat that that string is a fixed length.",
			"And typically when we specify a char or a varchar type,",
			"we have to specify the length of that string at the outset,",
			"just like we do in c.",
			"So, for example, my column type might be a char 10.",
			"That means that I can store 10 character strings",
			"in that column of my table, exactly 10 character strings.",
			"So if I tried to store, for example, the word",
			"\"hi,\" H-I, which is just two letters, that would go into the column OK.",
			"But it would also store 8 extra--",
			"the equivalent of null bytes, basically, so that I still had 10 characters,",
			"per se, in that column for that row.",
			"And if I tried to store, like, a 15-character string,",
			"that wouldn't work.",
			"I'd only end up storing the first 10 letters.",
			"So it's always going to be 10, every time.",
			"A varchar, on the other hand, refers to a variable-length string.",
			"So if I said that my column was varchar 99,",
			"I can store 1, 2, 3, 4, 5 character strings, up to 99 characters",
			"long, without having to have all of this extra sort of slack space",
			"or null bytes or zeros tacked onto the end.",
			"So char, fixed-length strings.",
			"Varchar, variable-length strings.",
			"We won't get into the difference between why",
			"you might want to use one or the other.",
			"But there are reasons why you might not always want to use a varchar,",
			"and you might want to use a char in some situations.",
			"Now, SQLite actually has many or all of these same data types.",
			"But the difference there is that each of those data types",
			"is affiliated with what's called a type affinity to simplify things.",
			"So that whole list of 20--",
			"or more, really-- can be reduced to one of these five different affinities--",
			"null, integer, real, text, and blob.",
			"Null is probably pretty obvious-- nothing.",
			"Integer-- whole numbers.",
			"Real-- that would include things like decimal and float.",
			"Text would include things like char and varchar.",
			"Blob is just-- that would be more like the geometry or data that isn't really",
			"text, but it's just a large number of bits or bytes.",
			"That would be a blob.",
			"And everything can reduce to one of these five different type affinities.",
			"So after specifying the columns, it's also really important in our SQL table",
			"to have one other consideration, which is to have",
			"one column which is our primary key.",
			"Why do we need a primary key?",
			"The reason is every row of our table, in order",
			"to make our SQL queries most effective, should be able to be uniquely",
			"and quickly identified.",
			"So choosing the right primary key will allow",
			"us to make sure that there is one value in every row that is completely unique.",
			"And if that is true, if there is one column in every row that's unique,",
			"then we can uniquely identify or very quickly identify",
			"which row we're talking about.",
			"Now, it's also possible to establish a joint primary key,",
			"which is just a combination of, say, two columns--",
			"but it can be an arbitrarily large number of columns--",
			"that is always guaranteed to be unique.",
			"So I could have one column that could always have A's or B's or C's.",
			"I could have another column that has ones and twos and threes and fours.",
			"I could have multiple A's and multiple B's and multiple C's, multiple ones,",
			"twos, and threes.",
			"But across all of those rows, I'm only ever allowed",
			"to have 1 combination of A1.",
			"I can have B1, C1.",
			"I can have A2, A3, A4.",
			"But there's only ever one combination of those two columns that is unique.",
			"That would also be acceptable because that is a joint primary key.",
			"Now, SQL is a programming language, like other programming languages",
			"that we've discussed.",
			"But it has a very limited vocabulary.",
			"Now, there are more things that you can do with SQL than we're",
			"going to talk about in this video because in this video",
			"we're just going to talk about the four operations",
			"that one can perform on a table, or the four main operations that you'll",
			"most likely perform on the table--",
			"INSERT, SELECT, UPDATE, and DELETE.",
			"And these four things we'll get into a bit more detail in just a second about.",
			"But these are definitely the most common four things",
			"you'll be doing with the tables that you're building,",
			"certainly in CS50, but also probably more generally whenever you're",
			"working with databases.",
			"So for all of the examples that we're going to cover in this video,",
			"we're going to consider a database that contains",
			"these two tables called users and moms.",
			"And you can see users has four different columns-- idnum, username, password,",
			"and fullname.",
			"And moms has two different columns, username and mother.",
			"And let's now start to work with these and see",
			"how we can manipulate this database and the tables within it to--",
			"for whatever reason we need them to-- be updated in our website.",
			"So the first operation we'll cover is insert.",
			"And as you might expect, it adds information to a table.",
			"Now, SQL queries have a certain structure to them.",
			"And so with each of these operations, what I'm going to do",
			"is give you the general sort of skeleton of what a query might look like.",
			"And then we'll use a couple of examples of that query",
			"to see how it affects our table.",
			"So an insert query, in general, looks something like this--",
			"INSERT INTO table.",
			"So we specify what table we want to insert into.",
			"And then we have parentheses, columns-- which",
			"is a comma-separated list of all of the columns of our table",
			"that we want to insert data into.",
			"Then we have VALUES, and then a comma-separated list of the values",
			"that we want to put into those columns in the same order.",
			"So for example, I might want to INSERT INTO users into these three columns--",
			"username, password, name.",
			"The values, respectively-- newman, in lowercase, USMAIL--",
			"that's going to be corresponding to the password--",
			"and then capital-N Newman for fullname.",
			"So assuming that I execute this query on the users table shown here,",
			"what's going to happen?",
			"Well, this is what's going to happen.",
			"We're going to add this row because we inserted into the users table.",
			"But you might be asking yourself, wait a minute.",
			"You never specified ID number.",
			"So how exactly did ID number get there?",
			"I mean, you specified newman and USMAIL and Newman.",
			"But that 12, that was never part of our query.",
			"And you're right.",
			"Because when you define the column that ultimately ends up",
			"being your table's primary key, it's usually a good idea",
			"to have that column be an integer.",
			"It's not a requirement, but it's usually a good idea.",
			"And because having a primary key is so important,",
			"you might want to specify it to autoincrement.",
			"And what this basically means is you can forget",
			"to include it as part of your query.",
			"And if you do, it will automatically insert a value there",
			"that is unique from every other value in that column,",
			"typically by just incrementing by one every time,",
			"so that that row is still guaranteed to be unique.",
			"Because if it wasn't set to autoincrement",
			"and we just forgot to omit it, there might",
			"be a couple of rows that are actually blank or null there.",
			"But if that's our primary key, if ID number is our primary key,",
			"and we have a couple of rows that are blank there, now they're not unique.",
			"We have two rows that are blank.",
			"We can't uniquely identify them.",
			"And so when you set up your primary key, you usually want it to be an integer,",
			"and you usually want it to autoincrement so that you can completely",
			"forget about having to worry about that and let the table do it for you.",
			"So that's how 12 got there.",
			"I had specified my idnum column do autoincrement every time I",
			"make an insert into the table.",
			"Let's do this another time.",
			"Let's insert into the other table, insert into the moms table,",
			"the following values into these following columns.",
			"We can INSERT INTO the username and mother columns of the users table",
			"the VALUES kramer and Babs Kramer.",
			"And just like what we saw before, this is what we would have as a result.",
			"We would just insert that row, and it would now",
			"be part of our database and part of our tables.",
			"So that's the insert operation.",
			"Now let's talk about the second operation, which is select.",
			"So if insert is used to put information into a table,",
			"select is used to get that information back out of the table",
			"so that we can do something with it.",
			"Select queries also have a very similar skeleton.",
			"And they look like this--",
			"SELECT and then whatever columns you want",
			"to choose FROM whichever table you want to choose them from.",
			"And then optionally in red here, these two other things--",
			"WHERE some condition is satisfied.",
			"And we usually, in the context of SQL, refer to a condition as a predicate.",
			"But basically, we're just checking to see that some situation is true.",
			"And we might want to, for example, order them by a specific column so",
			"that they are organized alphabetically by the values in some column",
			"or whatever else.",
			"We don't have to do either WHERE or ORDER BY.",
			"But generally WHERE in particular is going",
			"to be used so that you don't get your entire database back.",
			"And ORDER BY just helps to keep things a little more organized.",
			"So, for example, here's a select query that we could use--",
			"SELECT idnum, fullname from the users table.",
			"So let's see what's going to happen here.",
			"So remember, I'm selecting idnum and fullname from the users table.",
			"Well, what is the select query going to return to me?",
			"This information here.",
			"It's going to look at each row of the table,",
			"and it's going to just pull out the ID number and the full name",
			"and give me all of those down the entire users table.",
			"My user table only consists of three rows,",
			"so it's given me three pairs of information,",
			"three idnum-fullname combinations.",
			"Now let's say I want to restrict my search",
			"a little bit, my query a little bit.",
			"SELECT password FROM users WHERE idnum is less than 12.",
			"So now I'm adding a predicate or a condition to my select query.",
			"What's going to happen here?",
			"Well, I'm going to get this information.",
			"This is just the password column from the users table",
			"where the ID number in that row is less than 12.",
			"So only rows 10 and 11's password get given back to me.",
			"12's does not because 12 is not less than 12.",
			"There's one other thing we can do with a select query, and that's to select *.",
			"SELECT * from moms where username equals jerry.",
			"* is just shorthand for every column.",
			"So instead of having to specify username, mother, the two columns here,",
			"or, if I was using the users table, having to specify idnum,",
			"username, password, fullname, I can just say SELECT *.",
			"Give me everything in that row.",
			"And if I SELECT * from moms where username equals jerry,",
			"I am given this set of information back.",
			"So here's the thing that's cool about databases,",
			"though-- we don't have to just have two tables.",
			"And in particular, we don't have to have just one",
			"table that stores every relevant piece of information about a user.",
			"If we wanted to store, in addition to what we have there, information",
			"like their address and their date of birth and their social security number",
			"or whatever else we wanted to keep about them,",
			"this table could get bigger and bigger and bigger and bigger",
			"to the point where it becomes almost annoying to have to use it.",
			"But we can use relationships between different tables.",
			"And that's where the term relational comes",
			"into play for a relational database.",
			"We can set up our tables within our databases",
			"carefully enough that we can use relationships between them",
			"to pull information from where we need it without all that information having",
			"to be located in the same table in the first place.",
			"So, for example, here is our database as we last left it, with three rows",
			"in each of the users and the moms tables.",
			"Now let's imagine a hypothetical situation",
			"where we want to pair a user's full name, which is currently only stored",
			"in the users table, with their mother's name, which",
			"is only stored in the mother table.",
			"They're not on the same table right now.",
			"So we can't use the same sort of select query that we used before.",
			"We have to use what's called a select join query.",
			"It looks pretty similar to the select query before.",
			"But we're adding one extra piece of information, which",
			"is what tables we're joining together.",
			"So I want to select a specific set of columns from one table,",
			"joining another table onto it just temporarily.",
			"It doesn't really merge them.",
			"But it creates this sort of hypothetical table that does merge them.",
			"On predicate, where predicate is-- basically,",
			"we're trying to find where the two tables overlap",
			"so that we can create this merged table just temporarily",
			"for purposes of this query, and then have them separate again.",
			"So, for example, I might have a query that looks like this--",
			"SELECT users.fullname, comma, moms.mother FROM users joining the moms",
			"table onto it temporarily ON--",
			"which is akin to WHERE--",
			"users.username equals moms.username.",
			"And this syntax is also a little unfamiliar, right?",
			"I'm now prepending some of my column names with table names.",
			"The reason I'm doing this is particularly because of the last line",
			"there, where in each of those two tables I had a column called username.",
			"I need to disambiguate between them.",
			"So I need to specify what table and what column.",
			"That's all that's happening here, is I'm being very explicit about which column",
			"I want by specifying not only the column name, but also the table name.",
			"So here is what would happen if I executed this select query.",
			"Here are our two tables at the outset.",
			"This is all of the information that I'm trying to get to start with.",
			"I'm going to join these two tables together where where users.username",
			"equals moms.username.",
			"Newman does not appear in both tables.",
			"So I'm not going to even come close to extracting that piece of information.",
			"Kramer does not appear in both tables, so that one's out too.",
			"But jerry and gcostanza both appear in both tables.",
			"And so that is sort of the overlap point.",
			"And you can think about this as if we have",
			"our users table, which is like one circle over here,",
			"and our moms table, which is one circle over here.",
			"When we're joining, it's sort of like if it's a Venn diagram.",
			"We're trying to figure out what those two tables have in common",
			"and using that as, like, our anchor point for the join tables.",
			"So that's what we did here.",
			"We found where the two tables have data in common.",
			"And based on that, we create this hypothetical table",
			"called users & moms that contains all of the information that",
			"appears in both of those tables.",
			"But notice that the second column there sort of indicates the overlap.",
			"This column refers to data that is in both users.username and moms.username.",
			"So that's what we're extracting here.",
			"But remember that this query, we didn't want everything.",
			"It wasn't SELECT * FROM users JOIN moms WHERE users.username equals",
			"moms.username.",
			"Username We just want the full name and the mother's name.",
			"And so that's what we extract.",
			"And so that really long query just results",
			"in us getting this set of information-- users.fullname and moms.mother",
			"for every row in both tables where the username happens to be the same.",
			"All right.",
			"So that was a bit more complicated.",
			"You probably won't do too many joins.",
			"Fortunately, the last two operations are a little bit easier.",
			"So update is the third of the four major operations.",
			"This is what we use to modify information in the table",
			"or change it or update information.",
			"The skeleton looks like this--",
			"UPDATE table SET column equals value-- so we're updating some column to have",
			"a new piece of data in it--",
			"WHERE predicates.",
			"We're trying to figure out which row we want to update,",
			"and then we're updating that column.",
			"So, for example, I want to UPDATE users SET password equals",
			"yadayada WHERE idnum equals 10.",
			"You can probably guess what's going to happen here.",
			"We're going to find the row whose ID number is 10,",
			"and we're going update the password there from \"fusilli\" to \"yadayada.\"",
			"Pretty straightforward.",
			"And the fourth and final operation that we do in SQL",
			"most commonly is to delete, which strikes or completely removes",
			"information from a table.",
			"The basic framework looks something like this--",
			"DELETE from some table WHERE predicate, or, again,",
			"where some condition is satisfied.",
			"So, for example, you might want to DELETE from our users table WHERE",
			"the user name equals 'newman.'",
			"Now, if we did that, and this was our table to start with,",
			"you can probably guess what's going to happen.",
			"After that query executes, the row whose username is newman",
			"is no longer in our table.",
			"Now, all of the operations that we just showed",
			"are really easy to do in the graphical interface of phpMyAdmin,",
			"which, again, comes with most implementations of SQL",
			"that you might download.",
			"Here's the catch, though-- phpMyAdmin, despite being",
			"very user-friendly to use, requires manual intervention.",
			"You're going to have to log in and click on some buttons",
			"to delete information or update it or change it.",
			"And we don't want to do that.",
			"We're a webmaster, right?",
			"We want things to happen automatically for us.",
			"We want programs that we write to make those changes for us.",
			"So we don't want to go into phpMyAdmin and make those changes.",
			"We have to write code that does it for us.",
			"Fortunately, SQL integrates really nicely",
			"with a lot of modern programming languages such as Python or PHP",
			"that have functions that you can use to connect to your database.",
			"And then the programming language has other functions",
			"that will query the database for you and make those changes.",
			"Now, we're going to leave off for now exactly how those languages do that.",
			"We'll save that for a video on those languages themselves.",
			"But know that that is something that you can",
			"do to avoid having to do any sort of manual intervention",
			"when you want to update or do any sort of operation at all on your databases.",
			"My name is Doug Lloyd.",
			"This is CS50.",
			""
		],
		"is_youtube": false
	},
	"video_036": {
		"section": "CS50x 2021",
		"subsection": "Week 8",
		"unit": "Lecture",
		"video_sources": [
			"https://edx-video.net/2b8b6bcd-057a-4887-ad37-6aafbee55956.m3u8",
			"https://edx-video.net/2b8b6bcd-057a-4887-ad37-6aafbee55956-mp4_720p.mp4"
		],
		"video_duration": 9174,
		"speech_period": [
			3.486, 45.321, 1.083, 4.475, 2.875, 3.48, 1.56, 2.13, 3.99, 1.32, 2.88,
			6.09, 3.06, 2.65, 3.68, 2.288, 1.792, 3.737, 2.833, 3.24, 2.58, 4.08,
			4.74, 2.49, 3.48, 3.33, 3.202, 2.167, 3.361, 4.38, 3.96, 2.35, 2.18, 3.57,
			4.08, 2.28, 1.98, 3.42, 5.34, 2.82, 4.84, 3.87, 1.89, 1.7, 1.75, 3.51,
			1.56, 1.0, 1.83, 2.9, 2.4, 3.03, 4.05, 1.6, 2.93, 3.07, 3.41, 3.3, 3.03,
			3.48, 2.43, 2.07, 3.09, 2.31, 2.76, 3.82, 3.868, 1.792, 2.7, 1.833, 3.807,
			2.46, 2.76, 2.219, 2.491, 4.623, 2.167, 3.56, 3.21, 3.872, 2.458, 3.36,
			1.75, 4.19, 4.17, 3.15, 3.84, 2.58, 2.7, 2.79, 2.49, 4.11, 2.07, 2.83,
			1.25, 1.89, 4.95, 4.11, 3.93, 3.18, 2.49, 2.125, 1.965, 1.52, 2.863,
			2.417, 2.11, 1.52, 2.7, 2.33, 2.92, 4.03, 2.3, 2.55, 3.27, 4.2, 3.9, 3.84,
			3.93, 3.87, 2.1, 2.97, 3.962, 1.708, 2.49, 3.36, 2.927, 2.833, 2.55, 2.71,
			3.44, 1.77, 3.15, 1.92, 3.57, 2.05, 2.48, 2.67, 1.02, 3.42, 4.35, 1.19,
			1.75, 3.22, 2.0, 3.12, 4.29, 1.56, 2.67, 3.93, 4.5, 1.95, 2.82, 4.47,
			3.63, 2.01, 3.54, 2.89, 3.252, 2.917, 5.551, 3.449, 2.341, 3.63, 3.93,
			2.79, 5.76, 5.25, 2.55, 5.98, 2.42, 1.86, 3.0, 3.66, 1.77, 2.04, 1.12,
			3.65, 3.45, 3.33, 0.57, 2.83, 3.44, 1.71, 1.595, 2.875, 1.6, 3.2, 2.77,
			3.06, 3.38, 2.62, 2.75, 3.78, 2.05, 5.03, 3.19, 3.59, 4.02, 4.26, 3.75,
			2.53, 3.59, 3.03, 1.63, 2.15, 2.7, 3.33, 2.64, 3.45, 3.37, 3.14, 2.61,
			6.27, 3.482, 2.458, 2.58, 2.05, 1.73, 4.8, 1.95, 2.367, 1.833, 2.67, 2.41,
			3.75, 3.14, 4.56, 2.76, 5.13, 2.605, 2.375, 1.89, 1.08, 2.43, 4.17, 3.69,
			3.6, 1.35, 3.66, 4.59, 1.44, 3.46, 4.64, 4.79, 0.82, 3.83, 3.33, 3.66,
			3.78, 4.05, 1.29, 1.343, 1.417, 1.57, 1.388, 2.292, 2.82, 4.59, 3.0, 2.97,
			1.5, 4.44, 4.65, 4.89, 3.81, 4.89, 3.48, 0.7, 2.0, 1.17, 2.76, 3.042,
			4.798, 2.06, 3.54, 3.21, 3.63, 2.47, 3.71, 4.39, 2.57, 2.55, 1.83, 1.81,
			3.71, 3.84, 0.99, 1.708, 3.812, 2.64, 2.04, 2.37, 1.72, 1.88, 4.2, 3.48,
			3.685, 0.875, 3.21, 3.33, 3.54, 3.53, 3.0, 5.14, 1.61, 0.42, 1.53, 1.99,
			4.08, 2.93, 2.19, 3.88, 2.35, 2.23, 2.53, 0.622, 1.708, 3.458, 16.832,
			0.65, 2.583, 2.607, 1.75, 2.73, 1.45, 2.15, 2.55, 3.06, 3.274, 2.125,
			3.721, 2.01, 5.009, 2.831, 2.0, 3.0, 2.83, 1.94, 3.52, 3.38, 2.52, 3.17,
			1.75, 2.64, 1.14, 3.81, 2.73, 3.06, 3.54, 2.73, 2.61, 3.36, 4.71, 1.06,
			3.81, 0.5, 2.137, 2.333, 5.42, 2.53, 1.9, 2.36, 3.15, 2.97, 2.37, 3.87,
			4.59, 1.68, 2.97, 3.66, 2.55, 2.85, 3.03, 2.73, 3.9, 5.97, 1.32, 5.59,
			3.157, 1.583, 3.76, 3.285, 2.605, 1.0, 2.13, 2.667, 2.903, 1.75, 2.85,
			3.3, 3.45, 2.997, 1.833, 4.08, 1.8, 6.13, 1.25, 3.167, 2.293, 14.33, 0.51,
			1.792, 2.513, 2.625, 2.917, 2.573, 0.54, 0.625, 3.803, 24.632, 0.66, 3.07,
			0.583, 1.057, 3.09, 2.88, 3.66, 3.06, 3.177, 1.083, 1.958, 2.362, 3.27,
			4.17, 3.03, 4.86, 2.94, 2.22, 4.05, 2.31, 2.372, 1.708, 2.16, 2.19, 2.25,
			4.08, 4.45, 3.44, 4.11, 3.06, 2.76, 4.48, 3.59, 1.96, 2.66, 4.83, 4.44,
			5.88, 3.5, 1.5, 1.51, 4.31, 3.03, 3.33, 1.848, 1.542, 2.38, 2.81, 1.62,
			1.77, 1.83, 2.67, 4.44, 2.64, 2.243, 2.917, 1.71, 3.06, 3.75, 2.955,
			1.875, 4.71, 1.23, 1.98, 3.39, 3.09, 0.51, 3.72, 4.26, 5.22, 3.78, 4.05,
			3.96, 3.09, 5.82, 4.81, 5.12, 2.01, 1.44, 2.25, 2.98, 3.08, 3.06, 1.86,
			3.39, 4.65, 2.13, 3.06, 3.33, 3.12, 1.27, 4.91, 3.48, 1.29, 2.23, 3.41,
			3.42, 4.44, 2.79, 1.75, 3.35, 0.75, 2.13, 5.01, 0.63, 3.0, 3.12, 4.65,
			3.25, 3.11, 3.282, 1.708, 2.03, 2.01, 2.58, 2.49, 1.98, 3.75, 3.57, 5.79,
			3.18, 2.55, 1.888, 2.042, 3.39, 3.78, 3.51, 3.653, 2.167, 3.42, 1.79,
			4.54, 1.92, 1.8, 2.31, 3.06, 2.22, 4.17, 2.25, 3.9, 3.72, 1.17, 1.095,
			1.655, 2.17, 1.74, 1.69, 3.65, 4.14, 3.57, 2.91, 3.235, 3.575, 2.76, 3.18,
			4.83, 2.73, 3.57, 2.56, 3.11, 3.81, 5.16, 2.34, 2.58, 5.85, 1.86, 3.96,
			3.18, 1.305, 1.125, 2.042, 2.768, 5.78, 3.03, 4.41, 4.29, 2.46, 2.91,
			2.61, 4.02, 4.703, 2.917, 1.59, 3.96, 3.12, 2.07, 3.93, 3.48, 3.6, 3.04,
			3.95, 2.64, 1.83, 3.3, 4.14, 1.298, 1.792, 3.3, 5.43, 4.11, 2.01, 4.23,
			1.56, 2.04, 1.373, 2.167, 2.67, 2.53, 4.28, 4.23, 5.01, 2.55, 4.11, 2.4,
			4.26, 3.75, 2.865, 2.625, 4.05, 1.81, 1.53, 2.51, 1.02, 3.81, 2.79, 3.49,
			2.18, 3.97, 4.19, 4.71, 1.86, 0.9, 2.28, 3.55, 3.23, 4.59, 3.21, 2.79,
			4.09, 4.8, 2.13, 2.51, 6.55, 3.48, 2.5, 1.61, 3.54, 5.1, 7.74, 1.26, 2.49,
			3.36, 3.6, 3.57, 2.692, 1.958, 1.83, 3.007, 2.333, 3.19, 4.339, 1.331,
			4.97, 1.469, 2.25, 1.891, 2.1, 3.09, 3.0, 3.19, 2.0, 2.58, 1.56, 3.39,
			1.39, 1.55, 2.303, 2.167, 2.94, 3.33, 3.25, 1.98, 4.445, 2.125, 2.63, 3.1,
			1.547, 1.833, 2.04, 3.042, 2.878, 4.55, 4.563, 1.917, 2.46, 5.67, 3.42,
			3.437, 3.083, 2.5, 3.43, 3.9, 2.61, 3.27, 6.99, 3.84, 4.08, 3.22, 1.82,
			2.28, 1.92, 3.36, 3.69, 1.97, 4.3, 2.88, 4.95, 5.22, 2.97, 2.58, 3.06,
			3.78, 1.86, 2.52, 1.89, 3.27, 4.44, 1.44, 2.31, 3.31, 1.46, 1.59, 4.11,
			6.06, 3.9, 2.5, 2.64, 2.7, 4.03, 1.88, 4.56, 7.19, 3.01, 2.55, 2.88, 2.67,
			2.34, 7.08, 2.43, 2.1, 2.55, 4.8, 3.485, 5.335, 3.75, 3.94, 3.95, 5.04,
			6.46, 4.46, 4.95, 3.84, 5.43, 2.07, 4.65, 3.24, 2.19, 3.63, 1.8, 4.14,
			5.07, 1.2, 1.68, 2.04, 3.57, 2.08, 5.09, 2.67, 4.71, 4.14, 3.15, 4.11,
			2.1, 3.87, 4.462, 1.208, 2.13, 1.74, 2.16, 2.67, 3.0, 2.73, 2.28, 4.47,
			2.16, 1.86, 4.245, 5.455, 3.89, 3.78, 3.27, 1.02, 2.32, 1.347, 0.833,
			2.88, 3.39, 2.14, 3.41, 5.695, 2.625, 3.92, 0.79, 1.76, 4.14, 2.68, 3.388,
			1.792, 2.31, 4.8, 1.667, 1.333, 2.5, 3.44, 1.38, 2.43, 3.45, 3.4, 3.14,
			2.14, 6.3, 1.5, 3.45, 4.89, 3.69, 1.5, 1.08, 1.48, 1.22, 2.13, 4.98, 3.72,
			1.89, 1.29, 2.43, 1.63, 3.53, 1.5, 5.46, 4.38, 3.33, 4.14, 2.95, 0.98,
			2.55, 4.35, 3.25, 3.2, 3.45, 2.01, 2.61, 2.79, 4.23, 3.33, 5.49, 4.17,
			0.99, 2.82, 2.58, 2.7, 2.11, 2.87, 3.69, 1.86, 5.04, 3.12, 4.08, 4.35,
			2.49, 1.83, 2.46, 6.84, 3.72, 3.467, 2.083, 1.65, 2.7, 3.69, 1.9, 3.83,
			3.12, 3.66, 4.05, 1.99, 2.0, 5.31, 0.78, 3.03, 1.6, 4.085, 1.995, 5.88,
			3.24, 3.63, 3.36, 2.85, 3.0, 2.7, 6.54, 6.54, 1.08, 2.98, 4.47, 2.47,
			3.063, 2.167, 2.17, 3.18, 2.8, 2.75, 2.495, 2.875, 0.54, 3.96, 3.15, 3.51,
			2.67, 4.92, 3.0, 3.32, 2.89, 2.43, 1.77, 3.18, 3.3, 2.46, 2.19, 2.16,
			4.86, 2.52, 3.54, 1.32, 3.48, 7.037, 1.583, 2.73, 2.61, 2.19, 1.542,
			4.578, 6.03, 2.88, 1.06, 1.94, 1.45, 2.15, 2.16, 2.76, 2.79, 2.7, 2.37,
			4.6, 2.94, 1.92, 1.588, 1.542, 1.0, 4.96, 3.54, 3.27, 4.35, 1.493, 2.917,
			2.43, 4.06, 2.507, 1.083, 2.97, 2.82, 1.65, 2.01, 2.86, 2.07, 1.813,
			2.167, 4.86, 2.04, 2.91, 2.22, 1.95, 1.71, 2.94, 2.27, 1.75, 4.38, 3.93,
			3.54, 3.6, 2.693, 1.417, 3.36, 4.14, 2.82, 1.89, 2.94, 4.41, 1.89, 2.85,
			2.07, 3.09, 2.285, 2.875, 2.09, 1.42, 1.95, 2.77, 3.042, 3.158, 2.208,
			4.112, 0.85, 5.24, 3.54, 2.88, 1.47, 3.248, 1.792, 1.8, 1.14, 2.22, 4.21,
			3.05, 1.84, 4.1, 3.425, 0.875, 3.02, 2.07, 3.9, 2.985, 2.125, 3.77, 3.54,
			2.49, 3.69, 2.22, 2.25, 3.87, 2.67, 3.96, 5.16, 2.58, 2.22, 1.93, 3.59,
			3.39, 1.68, 4.05, 4.65, 1.69, 2.99, 2.76, 3.13, 3.83, 3.33, 3.78, 2.82,
			3.63, 3.52, 2.15, 2.28, 1.77, 2.88, 1.41, 3.43, 2.0, 2.79, 2.49, 3.3,
			4.83, 3.54, 3.0, 3.24, 2.37, 3.33, 2.37, 3.983, 1.417, 3.12, 2.13, 3.03,
			3.12, 3.76, 2.0, 4.21, 4.92, 4.67, 4.35, 1.77, 2.01, 2.02, 4.1, 2.94,
			2.88, 1.62, 1.5, 3.09, 3.72, 1.26, 3.15, 1.98, 3.87, 2.41, 5.81, 2.64,
			4.92, 3.42, 3.72, 3.54, 2.97, 2.65, 2.52, 2.61, 3.57, 4.53, 3.78, 3.36,
			3.81, 2.4, 1.57, 2.63, 3.12, 3.24, 2.76, 3.7, 4.71, 1.01, 3.6, 5.28, 4.8,
			2.43, 1.86, 1.53, 2.04, 2.43, 3.66, 2.61, 3.45, 2.56, 0.5, 3.75, 1.08,
			0.75, 2.67, 2.91, 2.49, 1.23, 2.167, 3.323, 2.92, 3.23, 3.27, 2.73, 2.1,
			5.01, 3.218, 1.292, 2.58, 4.345, 3.145, 1.05, 4.14, 2.7, 1.98, 2.638,
			2.792, 0.66, 3.84, 2.245, 2.375, 1.86, 2.31, 2.92, 3.11, 4.41, 2.1, 4.2,
			3.33, 1.518, 1.792, 3.74, 3.022, 1.958, 1.92, 1.99, 1.86, 2.75, 3.36,
			2.67, 2.28, 1.18, 1.94, 2.82, 1.32, 5.04, 3.42, 2.26, 3.66, 2.12, 2.67,
			3.3, 3.06, 1.958, 2.375, 1.907, 2.7, 5.32, 2.6, 1.14, 2.34, 1.65, 3.27,
			2.43, 4.27, 2.72, 2.47, 1.76, 4.59, 3.45, 4.94, 2.83, 2.82, 4.49, 3.18,
			3.087, 1.833, 2.82, 3.0, 1.89, 2.91, 4.66, 2.75, 4.35, 4.89, 3.6, 5.31,
			2.715, 1.875, 2.083, 2.147, 2.1, 3.157, 3.083, 2.44, 6.12, 1.46, 3.15,
			1.83, 2.28, 3.54, 4.2, 0.66, 4.92, 4.5, 4.695, 2.625, 3.69, 2.7, 3.81,
			4.2, 2.76, 3.51, 0.57, 4.89, 4.23, 3.12, 3.21, 4.455, 2.625, 3.73, 2.442,
			2.708, 3.18, 2.98, 4.88, 1.83, 1.53, 2.375, 4.555, 2.85, 3.21, 3.75, 3.39,
			2.31, 0.73, 2.84, 0.995, 2.125, 1.583, 1.327, 2.25, 1.77, 4.74, 2.34,
			2.25, 1.56, 4.02, 2.515, 0.875, 1.9, 2.19, 2.39, 3.36, 4.02, 1.98, 3.786,
			6.644, 4.14, 4.67, 2.157, 1.833, 4.5, 3.33, 3.41, 1.0, 4.08, 2.67, 2.86,
			2.88, 3.92, 0.66, 1.61, 2.2, 3.15, 1.605, 1.875, 1.708, 2.052, 1.71, 2.67,
			3.298, 1.792, 3.39, 3.18, 2.25, 2.459, 3.63, 1.321, 3.87, 3.34, 0.5,
			4.478, 1.792, 3.48, 4.169, 1.351, 3.72, 1.53, 1.68, 3.36, 2.699, 5.491,
			3.48, 2.13, 3.78, 1.027, 1.583, 2.292, 3.888, 3.25, 3.739, 2.786, 2.375,
			4.355, 2.875, 2.97, 3.45, 5.31, 3.03, 1.74, 2.53, 3.41, 3.87, 3.1, 0.5,
			4.47, 2.91, 2.43, 1.05, 3.15, 3.54, 1.99, 2.54, 2.82, 0.87, 2.25, 2.94,
			2.51, 1.61, 1.88, 3.24, 4.65, 2.61, 2.323, 2.417, 4.29, 3.54, 1.44, 2.35,
			3.99, 1.485, 0.875, 3.18, 3.57, 2.37, 3.45, 1.8, 3.87, 1.48, 1.29, 1.47,
			2.0, 4.46, 1.25, 6.89, 5.55, 2.13, 2.55, 2.73, 2.07, 3.77, 1.75, 3.24,
			1.11, 2.61, 2.925, 4.108, 2.417, 2.79, 2.53, 5.04, 4.55, 1.75, 2.46, 2.75,
			2.19, 3.69, 4.41, 3.39, 2.58, 1.29, 1.95, 3.24, 2.25, 2.76, 2.29, 4.43,
			1.627, 3.083, 3.0, 2.7, 5.4, 6.21, 4.08, 3.69, 1.38, 7.67, 3.69, 2.04,
			3.57, 1.8, 5.64, 2.67, 3.12, 2.968, 2.042, 4.77, 2.88, 2.1, 4.3, 2.39,
			4.32, 4.048, 2.042, 3.045, 2.125, 4.67, 2.43, 3.99, 3.45, 3.27, 3.63,
			2.59, 5.21, 2.25, 2.9, 1.52, 3.26, 2.34, 3.24, 1.68, 3.51, 3.163, 0.917,
			2.58, 1.93, 1.85, 2.34, 1.53, 3.72, 3.63, 4.56, 3.84, 4.35, 3.628, 0.542,
			2.75, 3.28, 4.08, 1.0, 2.0, 2.88, 2.0, 3.863, 3.167, 2.22, 3.03, 1.56,
			1.77, 2.58, 5.08, 2.27, 3.64, 2.45, 2.73, 2.22, 4.32, 2.37, 3.36, 1.81,
			3.32, 2.85, 4.59, 2.94, 2.743, 1.667, 4.26, 3.0, 4.86, 2.23, 2.537, 2.583,
			1.2, 3.36, 2.58, 2.25, 3.57, 2.91, 3.08, 3.36, 3.87, 2.94, 3.06, 3.87,
			3.93, 2.16, 4.77, 4.65, 5.003, 2.167, 2.01, 2.43, 1.37, 2.11, 4.89, 3.96,
			4.95, 3.63, 3.09, 4.38, 3.33, 2.79, 4.56, 2.52, 2.53, 1.865, 3.265, 1.85,
			2.34, 4.02, 2.13, 2.82, 3.39, 1.86, 3.75, 5.73, 2.73, 3.312, 2.208, 1.2,
			1.56, 1.71, 3.042, 3.678, 5.76, 3.24, 3.66, 2.73, 3.36, 1.78, 1.79, 1.02,
			4.97, 3.875, 0.875, 1.945, 0.875, 1.44, 3.72, 4.09, 4.628, 1.542, 1.77,
			3.09, 2.02, 4.972, 2.338, 4.02, 2.37, 1.68, 4.35, 2.4, 2.31, 1.99, 2.84,
			3.6, 1.89, 2.04, 2.76, 2.52, 4.86, 1.513, 2.417, 2.083, 3.887, 4.14, 3.06,
			3.78, 5.13, 0.75, 2.76, 5.25, 0.87, 3.96, 3.78, 3.36, 2.52, 4.0, 2.49,
			1.167, 2.923, 1.02, 3.26, 6.3, 1.47, 2.58, 2.485, 0.875, 3.06, 0.79, 3.2,
			3.3, 2.35, 2.24, 4.23, 4.98, 1.95, 3.18, 1.48, 2.58, 3.222, 1.958, 1.68,
			2.29, 1.04, 1.89, 2.37, 3.87, 3.64, 1.26, 4.94, 1.32, 2.37, 2.31, 3.03,
			2.97, 3.3, 5.32, 3.53, 2.55, 2.49, 4.05, 3.06, 3.24, 3.27, 1.09, 1.8,
			2.69, 2.04, 3.81, 2.86, 2.72, 1.95, 2.5, 3.71, 3.67, 2.69, 3.27, 4.32,
			6.78, 7.8, 2.97, 2.59, 3.14, 4.02, 3.54, 2.59, 4.31, 3.45, 3.36, 1.56,
			3.6, 0.87, 1.8, 4.44, 3.21, 3.7, 5.27, 2.82, 3.27, 5.16, 2.33, 2.08, 4.02,
			5.698, 2.042, 4.11, 4.32, 3.31, 3.99, 2.55, 3.28, 1.25, 3.77, 1.35, 3.24,
			5.82, 2.13, 3.75, 2.275, 1.125, 3.29, 2.02, 2.9, 3.21, 1.895, 2.875, 1.74,
			5.44, 4.34, 3.0, 5.7, 3.75, 4.53, 2.49, 0.78, 3.38, 2.8, 7.02, 4.05, 2.28,
			3.78, 1.86, 1.95, 3.51, 5.07, 3.54, 3.96, 1.35, 3.96, 3.42, 4.56, 2.73,
			4.14, 5.07, 3.12, 4.35, 5.73, 2.25, 1.14, 2.52, 2.08, 4.73, 2.822, 1.958,
			3.2, 1.98, 1.89, 4.23, 3.99, 4.56, 2.88, 3.51, 3.44, 3.01, 4.77, 3.9,
			3.696, 1.334, 3.06, 1.94, 3.36, 3.33, 2.58, 2.43, 3.9, 2.37, 3.63, 5.41,
			1.767, 1.583, 6.48, 4.08, 1.258, 2.792, 1.833, 3.297, 0.54, 2.79, 3.42,
			2.28, 2.49, 2.55, 3.12, 3.24, 2.82, 2.34, 3.63, 4.05, 2.4, 3.81, 0.69,
			2.94, 3.39, 0.81, 1.39, 4.25, 0.96, 3.9, 5.14, 1.425, 1.045, 1.49, 3.208,
			3.752, 3.69, 1.62, 3.45, 2.67, 3.06, 4.56, 0.93, 3.42, 2.43, 4.63, 0.5,
			4.2, 4.38, 4.8, 1.47, 3.18, 3.6, 1.62, 1.89, 4.29, 3.39, 0.81, 3.0, 2.04,
			5.67, 3.75, 2.88, 2.61, 2.67, 3.57, 4.03, 1.14, 2.24, 3.66, 2.22, 3.24,
			2.7, 2.91, 4.14, 3.69, 2.86, 3.29, 2.5, 3.71, 1.83, 5.13, 3.87, 2.1, 3.06,
			3.24, 2.16, 3.66, 4.56, 1.247, 2.833, 3.63, 3.18, 3.33, 2.43, 2.94, 2.79,
			2.34, 1.68, 3.25, 3.35, 1.53, 4.26, 2.49, 2.618, 1.792, 2.95, 1.5, 1.67,
			3.0, 2.42, 1.75, 3.12, 1.38, 3.55, 2.82, 0.5, 3.54, 1.17, 2.37, 1.98,
			3.27, 1.86, 4.71, 3.33, 1.527, 1.833, 3.69, 2.86, 1.37, 3.78, 3.9, 1.89,
			2.76, 3.84, 3.3, 1.26, 0.72, 1.02, 1.25, 2.5, 2.99, 4.65, 4.08, 0.6,
			2.583, 3.427, 3.77, 3.61, 2.18, 6.48, 4.38, 1.0, 2.72, 1.74, 2.28, 2.08,
			1.4, 3.84, 1.44, 1.65, 2.26, 1.94, 3.48, 2.73, 0.87, 1.25, 2.32, 1.8, 4.2,
			6.61, 4.25, 5.64, 2.85, 1.62, 3.72, 3.42, 2.47, 0.5, 1.32, 3.64, 2.51,
			2.35, 3.69, 3.6, 2.43, 2.97, 2.01, 2.79, 4.3, 2.815, 2.625, 1.77, 2.67,
			2.31, 3.06, 2.5, 2.06, 2.67, 4.41, 1.923, 1.917, 6.12, 1.48, 3.26, 4.92,
			3.93, 3.75, 3.66, 3.72, 3.15, 3.69, 2.88, 3.0, 2.46, 2.55, 2.41, 2.208,
			3.542, 2.34, 2.07, 3.09, 2.52, 2.56, 4.25, 1.72, 1.38, 3.47, 2.64, 4.02,
			3.36, 1.83, 4.02, 3.25, 7.28, 4.71, 1.92, 2.07, 4.56, 5.16, 3.18, 3.808,
			2.042, 2.55, 3.72, 5.25, 3.21, 1.68, 3.78, 4.53, 3.84, 4.89, 1.83, 1.98,
			4.74, 2.43, 1.68, 1.833, 3.297, 4.59, 2.22, 3.42, 2.49, 2.1, 2.07, 4.05,
			3.63, 1.8, 2.06, 3.46, 2.64, 4.78, 3.11, 7.29, 2.58, 2.34, 3.33, 1.77,
			1.792, 4.748, 4.74, 4.09, 2.36, 2.64, 3.46, 7.67, 4.77, 4.35, 4.2, 2.28,
			2.25, 1.792, 2.648, 4.83, 1.47, 3.87, 1.35, 1.65, 3.33, 1.74, 1.86, 2.46,
			1.95, 2.445, 1.875, 3.12, 0.84, 2.37, 3.0, 4.74, 0.75, 1.59, 3.21, 2.4,
			2.01, 4.71, 2.85, 6.0, 5.078, 1.042, 1.833, 3.747, 1.71, 3.12, 1.17, 4.65,
			5.13, 2.835, 2.625, 3.6, 2.64, 2.13, 3.66, 2.64, 1.29, 1.86, 3.12, 6.39,
			2.62, 2.253, 2.417, 1.98, 1.08, 4.2, 2.22, 4.02, 4.97, 4.26, 2.97, 2.94,
			3.33, 1.653, 1.917, 5.04, 2.01, 2.39, 1.99, 2.52, 2.85, 0.99, 1.89, 3.51,
			0.58, 1.43, 7.35, 3.81, 1.06, 3.32, 3.23, 0.91, 2.25, 3.57, 1.18, 0.5,
			9.35, 1.62, 1.0, 2.93, 0.99, 3.93, 2.64, 2.76, 1.05, 2.49, 4.35, 2.64,
			3.54, 4.35, 1.11, 2.16, 2.22, 3.57, 4.8, 2.25, 3.3, 1.83, 4.47, 2.28,
			3.87, 4.05, 2.64, 3.66, 3.838, 2.792, 3.18, 4.32, 3.36, 3.48, 3.593,
			2.417, 3.81, 0.9, 4.83, 2.82, 3.51, 3.27, 2.25, 2.08, 3.56, 1.47, 4.08,
			2.55, 4.625, 1.375, 1.05, 3.99, 2.88, 1.2, 2.25, 3.69, 1.298, 1.042, 3.27,
			2.52, 3.45, 2.82, 2.578, 2.042, 1.56, 4.08, 3.54, 1.8, 4.59, 2.468, 1.792,
			2.88, 1.92, 2.37, 1.32, 2.19, 1.86, 2.04, 3.27, 3.0, 2.49, 3.567, 1.083,
			3.042, 2.458, 1.667, 2.403, 4.23, 2.242, 1.958, 2.94, 3.04, 3.26, 2.22,
			3.75, 2.22, 3.18, 2.55, 3.09, 2.25, 1.74, 1.6, 2.21, 3.99, 2.94, 2.68,
			3.59, 2.31, 5.91, 2.79, 2.7, 2.88, 3.21, 3.34, 5.04, 2.72, 1.36, 2.06,
			2.07, 3.45, 2.34, 2.61, 3.48, 1.697, 2.083, 1.292, 0.778, 2.52, 2.85,
			3.42, 1.155, 3.795, 2.49, 1.92, 1.95, 2.46, 4.23, 1.44, 2.14, 3.65, 3.96,
			5.73, 10.17, 3.3, 1.36, 2.36, 2.28, 2.22, 1.27, 3.11, 2.94, 5.717, 2.083,
			3.18, 3.33, 3.63, 2.7, 3.42, 2.1, 1.835, 1.625, 4.53, 2.06, 5.57, 1.75,
			2.02, 4.43, 1.38, 0.96, 1.77, 2.19, 3.69, 2.53, 3.62, 3.33, 2.94, 2.49,
			3.45, 2.52, 6.24, 3.97, 4.22, 2.64, 1.92, 4.155, 2.625, 3.06, 1.575,
			1.875, 3.12, 2.34, 3.33, 2.55, 4.71, 3.24, 4.23, 3.84, 2.01, 4.35, 2.8,
			3.86, 6.42, 1.8, 1.3, 2.69, 4.32, 5.79, 2.93, 3.39, 4.38, 3.84, 2.14,
			3.83, 4.2, 4.74, 4.5, 2.56, 3.3, 3.29, 4.14, 0.9, 1.92, 2.52, 2.47, 1.94,
			1.98, 4.56, 5.67, 3.9, 7.32, 3.12, 2.58, 3.09, 4.26, 3.6, 4.05, 3.69,
			2.67, 2.61, 3.57, 2.74, 2.15, 2.19, 4.07, 1.2, 0.9, 2.875, 4.085, 2.67,
			2.64, 2.34, 0.24, 2.73, 1.56, 2.31, 1.29, 2.1, 5.37, 4.05, 1.59, 2.25,
			2.13, 2.04, 1.98, 3.0, 4.47, 4.8, 3.69, 2.61, 3.6, 2.61, 3.0, 2.22, 2.01,
			2.77, 2.24, 4.08, 2.16, 4.81, 4.07, 4.67, 0.78, 4.53, 3.87, 4.17, 3.57,
			3.0, 2.12, 3.46, 2.155, 2.125, 2.91, 1.38, 4.5, 3.39, 0.73, 3.83, 1.8,
			2.625, 3.085, 2.938, 1.292, 2.12, 1.69, 3.9, 6.06, 2.93, 3.51, 2.88, 2.73,
			3.45, 1.83, 1.875, 3.045, 3.9, 2.31, 2.22, 1.89, 1.86, 2.61, 2.94, 2.64,
			2.597, 2.833, 2.58, 5.22, 1.637, 2.833, 2.4, 4.41, 4.852, 3.728, 2.74,
			3.69, 1.85, 2.13, 2.97, 3.58, 1.91, 2.76, 1.32, 3.06, 3.24, 3.87, 5.43,
			2.22, 2.79, 4.32, 2.91, 2.82, 3.6, 2.22, 0.93, 0.76, 0.5, 1.11, 2.07, 3.9,
			2.79, 3.9, 1.74, 3.66, 5.217, 1.833, 0.99, 3.12, 6.58, 3.92, 1.59, 2.85,
			1.47, 2.34, 3.91, 1.11, 6.11, 4.5, 2.55, 3.33, 1.83, 3.36, 3.78, 1.21,
			2.87, 5.4, 1.33, 1.58, 2.25, 3.21, 1.83, 2.765, 2.875, 0.748, 1.292, 3.78,
			2.74, 4.1, 2.07, 3.81, 4.65, 5.78, 2.82, 6.06, 3.1, 2.09, 2.85, 4.23,
			0.96, 3.09, 4.74, 3.03, 3.16, 3.02, 4.5, 2.37, 3.66, 3.21, 3.51, 3.57,
			3.03, 3.57, 2.07, 1.8, 3.45, 3.57, 2.58, 0.81, 1.86, 1.83, 3.63, 4.26,
			2.67, 3.33, 2.55, 3.18, 3.615, 1.875, 2.792, 2.198, 3.99, 2.6, 2.94, 2.07,
			3.09, 2.82, 2.5, 4.1, 2.5, 2.37, 2.07, 4.29, 3.49, 1.73, 3.54, 3.15, 3.43,
			2.39, 3.6, 2.73, 2.73, 4.53, 1.568, 1.792, 3.48, 1.87, 2.3, 3.505, 1.625,
			1.312, 2.708, 4.65, 2.85, 3.93, 4.473, 2.917, 2.3, 2.46, 3.57, 3.87, 2.91,
			3.48, 3.39, 3.18, 3.48, 5.61, 1.65, 2.22, 5.61, 2.22, 4.62, 2.01, 2.16,
			2.37, 6.18, 3.27, 3.253, 3.167, 0.87, 3.51, 2.94, 3.03, 1.5, 4.71, 1.793,
			0.667, 1.98, 2.19, 3.61, 6.44, 3.18, 0.81, 3.38, 2.5, 1.875, 4.245, 3.72,
			2.16, 2.67, 1.62, 3.21, 3.57, 0.99, 3.45, 3.327, 2.583, 3.69, 4.52, 0.5,
			2.119, 2.76, 2.791, 3.132, 2.958, 2.76, 3.24, 3.42, 3.06, 2.94, 5.67,
			2.13, 5.76, 1.049, 2.76, 3.091, 2.92, 3.86, 3.69, 3.582, 0.958, 1.61,
			3.779, 3.481, 3.21, 2.399, 4.271, 4.729, 1.621, 2.879, 3.99, 2.1, 3.541,
			4.08, 1.619, 2.851, 4.17, 2.43, 3.629, 3.301, 4.17, 4.02, 3.269, 3.811,
			3.28, 0.92, 3.899, 6.121, 2.25, 2.27, 2.38, 3.12, 3.46, 0.59, 3.46, 0.83,
			3.029, 3.0, 3.33, 4.17, 1.261, 1.12, 2.06, 1.11, 1.439, 3.811, 1.81, 3.83,
			2.52, 3.9, 3.0, 1.98, 3.07, 1.52, 3.45, 4.35, 0.51, 1.77, 1.44, 2.94,
			3.63, 2.97, 2.52, 2.64, 0.84, 2.73, 4.29, 0.63, 4.26, 2.4, 1.92, 4.92,
			2.04, 3.18, 3.03, 3.54, 0.91, 2.208, 3.782, 3.6, 3.54, 1.83, 1.98, 4.5,
			4.92, 2.37, 1.32, 3.51, 1.29, 3.78, 2.07, 3.75, 0.72, 2.1, 4.02, 2.37,
			1.38, 2.64, 4.59, 6.06, 3.66, 3.63, 3.18, 3.51, 2.15, 3.54, 2.62, 3.71,
			2.55, 4.73, 1.75, 4.17, 2.64, 2.19, 2.55, 2.04, 1.98, 3.518, 1.042, 1.83,
			6.0, 4.8, 2.37, 2.73, 4.02, 4.02, 3.39, 2.85, 1.44, 3.51, 2.85, 2.74,
			2.96, 4.59, 3.39, 2.82, 3.39, 6.42, 2.49, 3.24, 4.17, 3.24, 3.42, 2.08,
			4.37, 3.45, 4.8, 2.01, 2.31, 3.48, 3.93, 2.55, 4.285, 3.125, 4.95, 0.63,
			2.483, 1.417, 1.83, 1.8, 3.76, 5.24, 0.72, 2.28, 5.64, 1.77, 3.09, 4.47,
			4.89, 5.25, 3.43, 0.5, 2.55, 3.03, 3.3, 3.24, 2.812, 2.708, 2.52, 4.56,
			3.73, 2.09, 2.91, 4.08, 1.89, 3.27, 4.45, 3.33, 2.727, 2.333, 1.708,
			3.122, 5.37, 3.27, 3.63, 2.18, 2.5, 2.31, 4.308, 2.042, 2.25, 5.73, 3.187,
			3.083, 1.23, 2.46, 2.58, 2.49, 5.04, 0.63, 3.54, 3.21, 2.4, 3.0, 2.79,
			5.25, 6.975, 4.215, 3.84, 4.41, 4.17, 3.33, 3.0, 2.07, 2.37, 3.33, 3.637,
			2.333, 2.042, 2.918, 2.57, 5.11, 1.16, 3.27, 5.77, 2.33, 3.99, 1.33, 3.17,
			1.98, 2.5, 1.25, 2.85, 5.17, 4.31, 5.79, 1.23, 2.4, 1.92, 3.965, 2.125,
			3.27, 2.61, 3.48, 1.86, 1.62, 4.36, 0.99, 1.71, 2.91, 3.94, 2.82, 3.26,
			2.26, 2.66, 6.63, 4.4, 4.02, 5.29, 2.0, 4.02, 3.33, 3.003, 1.917, 2.34,
			1.83, 2.25, 4.27, 3.41, 5.44, 1.393, 1.107, 0.8, 1.65, 2.011, 3.676,
			0.833, 1.083, 2.239, 2.304, 1.064, 4.91, 1.473, 4.41, 0.5, 3.928, 1.473,
			6.383, 1.553, 0.6, 2.1, 1.8, 1.008, 0.792, 0.667, 2.083, 15.23
		],
		"transcript_en": [
			"[MUSIC PLAYING]",
			"",
			"DAVID J. MALAN: All right.",
			"So this CS50, and this is week eight, the week of all Hallows' Eve.",
			"Indeed, thanks to our friends here in the American Repertory Theater,",
			"the stage looks amazing today with some special lighting",
			"and some special characters.",
			"Of course, speaking of characters, this past week",
			"you all explored 50-ville for the very first time, looking for the rubber",
			"duck that had gone missing.",
			"And thankfully, the culprits have been found,",
			"and allow me to say that a little someone would like to say hello.",
			"Yes, even he has rather dressed up for the occasion,",
			"but thank you for all the hard work there.",
			"So this week, of course, we transition to the world of web programming,",
			"the motivation being that for the past many weeks,",
			"pretty much all of the code we have written",
			"has been focused on command line programs, compiling your code,",
			"interpreting your code, but generally just interacting with a fairly",
			"mundane blinking prompt, textually.",
			"But of course, the software that you and I use every day",
			"these days is in the form of laptops and desktops in browsers",
			"or on mobile devices or apps, and today, we begin to transition",
			"to a set of languages and a set of technologies",
			"via which you can start to apply all of the past week's knowledge",
			"and mental models for procedural programming",
			"to a much more familiar, a much more graphical domain.",
			"Indeed, over the course of the next couple of weeks,",
			"we'll be focused on web programming and the use of languages",
			"called HTML and CSS and JavaScript, with which today's websites are made,",
			"and increasingly with which today's mobile applications or apps",
			"on your phone are made as well.",
			"But in order to get to that point in the story,",
			"we need to consider what the framework is",
			"on top of which we're going to run these websites or these web applications.",
			"And so that invites the question of the internet.",
			"Exactly what is the internet?",
			"All of us use it every day, but let's take a couple of volunteers",
			"from the audience, just to define for us what we mean by the internet.",
			"All of us are literally on the internet right now,",
			"but if you take a step back and think about it, what is the internet?",
			"How might you define it for someone less technical than you",
			"or someone less familiar?",
			"Sophia, how would you define it?",
			"AUDIENCE: The network of all the computers",
			"around the world that are taking in information from the network",
			"and also giving it information.",
			"DAVID J. MALAN: Perfect.",
			"The internet is this network of networks,",
			"so if you have a small network in your home, a small network",
			"or a large network at your company or you university",
			"and you start to interconnect all of those networks using cables",
			"or some kind of wireless technology, you get the internet, so to speak,",
			"a network of networks.",
			"And this is really the infrastructure, if you will,",
			"on top of which all of today's applications are run.",
			"So when you use the web, when you use chat, when you use Slack,",
			"when you use video conferencing, Zoom or the like, you're using the internet,",
			"but think of the internet really as the lower-level plumbing that",
			"gets the zeros and ones from you to someone else and back,",
			"and the applications on top of that are all",
			"implemented, ultimately, in software.",
			"And so if we consider, then, that we've got all of these computers",
			"interconnected somehow, it stands to reason",
			"that we need to somehow decide as a global community",
			"how to get data from point A to point B and beyond.",
			"And so throughout the internet are these computers called routers.",
			"And at the end of the day, they're probably",
			"a little bigger than the desktops and laptops with which you and I are",
			"familiar, but at the end of the day, they're",
			"the same kinds of devices with CPUs, Central Processing Units, the brains",
			"inside of the computer that do all the thinking,",
			"RAM or memory, where all of the values are stored,",
			"and hard disks, where data is persisted.",
			"And pictured here, for instance, is an image from MIT",
			"that depicted a few years back of what-- some of the most significant peering",
			"points on the internet throughout the United States.",
			"So each of the red dots here represents essentially one router",
			"or one very important place into which a lot of cables",
			"come in and then go out and interconnect all points of the country.",
			"And then this story continues well beyond the United States",
			"these days using oceanic cables and other wireless",
			"or satellite technologies or the like.",
			"So suffice it to say, there's this mesh, this interconnection",
			"of all of these different computers and in turn networks throughout the world,",
			"which is to say that there's many different paths that data can take",
			"to go from point A to point B. There isn't necessarily a line between you",
			"and Facebook.com or Stanford.edu.",
			"Rather, there's a whole bunch of routers--",
			"sometimes a handful, sometimes as many as 30--",
			"that will relay your data from left to right,",
			"to up to down, or in some other direction in order to get data from you",
			"to the web server that you're trying to contact",
			"and then back to you with the server's response.",
			"So how does all of this work?",
			"Well, decades ago, humans essentially had",
			"to get together and decide as a group what standards they were going to use,",
			"or more specifically, what protocols all of these computers are going to speak.",
			"A protocol isn't so much a language as it is a set of conventions, right?",
			"Back in healthier times, you and I, if we were meeting each other in person,",
			"might extend a hand, and if I did this, you would immediately",
			"know that you should probably extend your hand too,",
			"and we would have a physical handshake.",
			"And that's a human protocol.",
			"I initiate a communication with you by extending my hand.",
			"You acknowledge that communication by extending your hand.",
			"And then that interaction is complete.",
			"So we have these human protocols.",
			"In the world of computers, there's similarly protocols,",
			"but obviously it's all zeros and ones.",
			"So if the first computer sends this pattern of zeros and ones,",
			"the other computer should reply with a different set of zeros and ones.",
			"And so these protocols we're about to discuss just",
			"standardize what those patterns of zeros and ones are,",
			"or really, what all of the messages are going back and forth.",
			"And two of the protocols most commonly used to get data on the internet",
			"from point A to point B are called TCP/IP.",
			"TCP and IP are two separate protocols, but they're so often",
			"used together that you typically mention them in one breath, TCP/IP.",
			"And these are acronyms you've probably seen maybe on your Mac or PC",
			"or somewhere on your phone settings.",
			"And it refers to essentially two sets of conventions",
			"that computers use to get data from one point to another.",
			"So what do we mean by data and what do we",
			"mean by moving things between point A and point B?",
			"We'll just consider it as an old-school envelope, whereby",
			"if you wanted to send a letter to someone else in the world,",
			"you and I would probably reach for a piece of paper back in the day.",
			"We would pick up an envelope and we would write our note",
			"on that piece of paper, put the paper in the envelope,",
			"and then the most important step after writing the actual message",
			"would be to address the envelope.",
			"And of course, in the real world, you would put the recipient's address",
			"typically in the middle of the envelope.",
			"You might put your return address in the top corner of the envelope,",
			"and then maybe postage or something like that.",
			"But we humans have pretty much standardized",
			"through all of the postal systems that kind of convention",
			"when using envelopes.",
			"So the metaphor here is that the envelope and the message",
			"therein are generally thought of or referred to as packets,",
			"packets of information.",
			"And this would be the physical incarnation",
			"of what computers ultimately are just going to do using zeros and ones.",
			"So let's tease apart the two sets of conventions",
			"they use for actually putting data in these envelopes,",
			"addressing these envelopes, and sending them out from point A to point B.",
			"Let's consider first IP.",
			"IP stands for Internet Protocol, and pretty much",
			"any Mac and PC and iPhone and iPad and Android device",
			"these days has been designed by Apple or Google or someone else",
			"to understand IP.",
			"It's as though those companies have written software",
			"running on those devices that make sure that those devices all support IP,",
			"just like I was taught, presumably by some human, this human convention",
			"of shaking hands back in the day.",
			"IP, Internet Protocol, simply standardizes",
			"how computers address each other.",
			"So in our physical human world, if you wanted to send me an envelope",
			"for instance, you might write to Harvard's Computer Science Department",
			"at 33 Oxford Street, Cambridge, Massachusetts, 02138, USA.",
			"That is presumably a unique postal address",
			"that addresses the Computer Science building on campus",
			"so that if you drop an envelope in the mail in California or anywhere abroad",
			"it should eventually via some number of hops and mail carriers and the like",
			"make its way to that particular address.",
			"Computers, then, have similarly unique addresses known as IP addresses.",
			"And so when your computer, Mac, PC, phone, whatever, sends data from itself",
			"to another server, the address that it writes",
			"on the outside of that virtual envelope is the IP address of the remote server.",
			"So for instance, if I were to send a message to you,",
			"I would figure out what your IP address is.",
			"I would write that IP address virtually on the outside of this envelope.",
			"I would probably write my own IP address on the top left-hand corner",
			"of this metaphorical envelope.",
			"And then I would send it out on the internet.",
			"And what does that mean?",
			"It would mean I take that envelope and I hand it to the nearest router.",
			"So it turns out when you're at home, you actually have a router of your own.",
			"It's that device that connects to your cable modem or DSL modem or something",
			"like that.",
			"If you're on campus, like at a place like Harvard or Yale,",
			"Harvard and Yale have their own routers, so your computer, when on campus,",
			"just knows to hand data off to that.",
			"And if you're at home using--",
			"or if you're elsewhere in the world, like in Starbucks or an airport,",
			"similarly are there routers there.",
			"So your computers generally know where the closest router is,",
			"and then router's purpose in life is, again, to figure out,",
			"does this packet go left, right, up, down, so to speak,",
			"in order to get it closer to its destination.",
			"But this sort of is a chicken and an egg.",
			"If I want to send you a piece of information,",
			"I need to know your IP address, but I don't really know your IP address",
			"until I know where you are.",
			"So there is this other system that you've probably seen an acronym for,",
			"too, called DNS, Domain Name System.",
			"And this is a technology that's deployed throughout the internet that's",
			"supported by Macs, PCs, and phones these days, that just translates what",
			"you and I would typically call domain names, or fully qualified domain names,",
			"from those English-like or human-readable characters",
			"to the corresponding IP addresses, right?",
			"There's a reason that companies do not advertise their websites",
			"as being a numeric IP address.",
			"None of us would ever remember them.",
			"They instead advertise them as Microsoft.com",
			"and Google.com and NewYorkTimes.com.",
			"DNS is a technology that your Mac and PC and phone",
			"support that know when a human types in one",
			"of those human-readable addresses, a domain name, DNS",
			"converts those names to the IP addresses.",
			"So literally, if you type in Harvard.edu or Yale.edu,",
			"enter into your web browser, your Mac or PC",
			"quickly looks up the IP address of that web server using the software that",
			"came with the Mac or PC and converts it to the corresponding IP address",
			"and then writes, virtually, on the outside of the envelope,",
			"the IP address of Harvard or Yale's web server",
			"before sending it out on the internet.",
			"So these are just services.",
			"DNS is a service that your own ISP, Internet Service Provider, provides.",
			"When you're on campus, it's Harvard or Yale.",
			"When you're at Starbucks, it's probably Starbucks.",
			"When you're in an airport, it's the airport.",
			"When you're at home, it's your own internet service provider",
			"like Verizon or Comcast or the like.",
			"So the world just decided to use that technology as well.",
			"And lastly, one other acronym for now, TCP.",
			"TCP, or Transmission Control Protocol, is a solution",
			"to a couple of problems, one of which is that it",
			"tends to be pretty convenient for individual servers on the internet",
			"to be able to do multiple things, right?",
			"And you can-- there's lots of things the internet can do.",
			"The servers can host email.",
			"They can host websites.",
			"They can host chat servers, video conferencing.",
			"I mean, that's already a growing list of features of software",
			"that you can use on the internet, and it would be nice, financially,",
			"administratively, if one server could do multiple things at once.",
			"And indeed, they can.",
			"So when a computer receives one of these virtual envelopes and that computer,",
			"that server, happens to support multiple services, email, web, chat,",
			"video, whatever--",
			"it looks at the envelope for one additional piece of information.",
			"And that piece of information is known as a port number, P-O-R-T number,",
			"which is just a small integer that the world has decided represents specific",
			"services.",
			"So for instance, in the world of TCP, the world",
			"decided years ago that our computers should virtually",
			"write the number 80 on these envelopes after the IP address",
			"to signify that this is a request for a web page, or 443",
			"on the outside of the envelope if it's a secure request for a page using",
			"something called HTTPS.",
			"More on that in a bit.",
			"And there's other numbers as well.",
			"Email has its own unique numbers.",
			"Zoom has its own unique numbers.",
			"And all of these other internet services that you and I",
			"might use every day have their own unique TCP",
			"ports so that companies and people can have one server doing multiple things,",
			"but upon receipt of one of these envelopes, the server can look at it",
			"and be-- and realize, oh, this is a request for email.",
			"This is a request for a web page.",
			"This is a request for chat, or something else altogether.",
			"Now, notably, too, TCP also handles delivery,",
			"and it's the part of the protocol that also ensures that when you send data",
			"from point A to point B, if any data gets lost because literally",
			"something's wrong with one of those routers or because maybe the-- one",
			"of those writers got overwhelmed and just received more packets at once than",
			"it can handle--",
			"that could happen, because these computers have,",
			"of course, finite memory.",
			"If you send too much data through one, the internet might get congested,",
			"your video might buffer, and a whole bunch of other symptoms might arise.",
			"So TCP also handles the process of retransmitting data as needed.",
			"If any of these packets is lost on the internet,",
			"literally TCP will also compel your Mac or PC, your phone,",
			"to resend that data as well.",
			"But what's notable about the internet is that data doesn't necessarily",
			"follow one specific path.",
			"In fact, if you send multiple packets from one person to another,",
			"those packets might actually take different routes each time.",
			"And this is actually a feature, not a bug, so to speak,",
			"because you can imagine servers getting congested",
			"or problems needed to getting--",
			"needing to be routed around.",
			"And so TCP/IP also supports, with other protocols,",
			"an adaptive solution to this problem, whereby maybe your data will",
			"go this way sometimes.",
			"Maybe it'll go this way some other times.",
			"But this is why, in part, that sometimes your internet speeds are variable,",
			"because, again, these routers in between might be different",
			"or might be a little bit overloaded.",
			"So we thought we'd try to tell this story by enlisting",
			"the help of some of the CS50 staff.",
			"In fact, Brian, let me start with you.",
			"Would you mind taking on the role in just a moment of playing a web browser,",
			"someone's own Mac or PC or phone, and request of me--",
			"maybe something silly, like asking me for a picture of a cat?",
			"BRIAN YU: Yeah, sure.",
			"So if I want to ask you, some web server, for a picture of a cat,",
			"I need to send a message to you in order to send that request to you.",
			"So I might write down my request on a sheet of paper.",
			"And I'll just put that request inside of an envelope.",
			"And then I would have to label that envelope with all the information we",
			"talked about, in particular with your IP address, that I might look up with DNS.",
			"And then I can send that envelope off.",
			"DAVID J. MALAN: All right.",
			"And I think we need a little bit of help here,",
			"because Brian and I are in different places.",
			"And so he and I can't just hand the envelope from one to the other.",
			"So let's go ahead and enlist the help of CS50 staff here,",
			"also, who have chimed in here on Zoom and see",
			"if we can't route this request from Brian,",
			"who's playing the role of a web browser, to me,",
			"who will play the role of a web server, in order",
			"to receive this request for a cat.",
			"So here we go.",
			"Let's see if we can enlist the team here.",
			"[MUSIC PLAYING]",
			"",
			"All right.",
			"Well, thank you to Phyllis for having handed me this envelope.",
			"And what we have now is the request that Brian sent me.",
			"I'm going to go open it up, and I, indeed,",
			"see a message inside requesting a picture of a cat, which",
			"is not uncommon on the internet.",
			"So now if I'm the web server and I actually",
			"have an archive of pictures of cats, I'm going",
			"to go ahead and respond to Brian with one of those cats.",
			"But to do so, I'm going to go ahead and have to look up on my hard drive",
			"or somewhere in the computer that picture of a cat.",
			"And here's one here, so I'm going to go and send Brian this very happy cat.",
			"I've got some envelopes of my own, and I'm",
			"to go ahead and write Brian's IP address on the middle of this envelope,",
			"I'm going to put my IP address on the top-left of this envelope,",
			"and then maybe any other identifying information",
			"I need, and then I'll go ahead and put the cat into the envelope.",
			"But, of course, this isn't really going to fit.",
			"And this is actually quite commonly the case.",
			"Any time a computer is trying to transmit a decent amount of data,",
			"whether it's a big image or maybe it's an even bigger video file,",
			"for equity's sake, it tends to be good for computers",
			"to chop up large packets into multiple smaller packets.",
			"In fact, you might have heard of something",
			"called Net Neutrality or a more technical topic known",
			"as Quality of Service.",
			"In a nutshell, Net Neutrality speaks to just what kinds of decisions",
			"computers should make when it comes to prioritizing data.",
			"And a common convention is, historically, that all of us",
			"should chop up our large packets into smaller packets, send them out,",
			"so they can get then commingled with other people's packets",
			"and we all reach our destinations at the same rate.",
			"Net Neutrality, as an aside, is all about an interest",
			"by some parties in prioritizing maybe the data from certain companies that",
			"pay a bit more.",
			"And so this really speaks to just use or maybe abuse of these basic primitives",
			"here.",
			"But this is not fair for me to try to cram this one",
			"big image into an envelope, so I'm going to literally go",
			"ahead and tear the picture in half, essentially chop the packet into two.",
			"Let me go ahead now and put this into the envelope,",
			"because it'll fit a little more easily.",
			"So I've got one packet of information for Brian.",
			"I've got now-- let's see-- one more packet of information for Brian",
			"that I'll fit the other half of this image into.",
			"But I think I'm going to have to do something else.",
			"Before I drop this out on the internet and hand it back to Phyllis",
			"to send out back to Brian, I might need some additional information",
			"on these envelopes.",
			"I've already got Brian's IP in the To field.",
			"I've got my IP address in the From field.",
			"I've also jotted down the port number that I",
			"should use for Brian and my own return port number.",
			"And those are decided typically by my Mac or PC.",
			"But I feel like I probably need a little more information.",
			"What more should I virtually write on the outside of this envelope",
			"to make sure that the data is received as intended?",
			"Any intuition?",
			"No familiarity with TCP/IP assumed here.",
			"But if Brian's about to now get two envelopes, what additional data",
			"should I perhaps give him? [? Greg? ?]",
			"AUDIENCE: Brian may confuse the top of the photo with the bottom,",
			"so you need somehow to tell Brian that this is a top and this is a bottom,",
			"a link maybe to converge them.",
			"DAVID J. MALAN: Perfect.",
			"And so we need to make sure Brian knows the order",
			"in which these packets should be reassembled so that he, indeed,",
			"gets the cat the right way and not the wrong way, for instance.",
			"So what probably suffices is for me to add",
			"what we'll call a sequence number to each of these packets, which",
			"is essentially a number which you can think of as one of two,",
			"and on the other one, two of two, so that Brian knows when--",
			"what order to reassemble the packets, but also more importantly,",
			"in case one of the packets, or both of them,",
			"gets lost or somehow dropped by one of the routers along the way,",
			"there's enough information on those packets",
			"to enable me and him to recover that and resend packet one and/or two as needed.",
			"So let's go ahead and do this.",
			"Let me go ahead and enlist the help of the team, starting with Phyllis here.",
			"And Phyllis, if you'd like to go ahead here and--",
			"[MUSIC PLAYING]",
			"All right.",
			"Of course, that's only half of the problem.",
			"So I'm to go ahead now and send the second packet, finally.",
			"In an ideal world, I would actually send these out in parallel,",
			"but there's no reason that they couldn't still follow different paths.",
			"In fact, this one I worry might take a little bit more time.",
			"Let's see.",
			"[MUSIC PLAYING]",
			"[SINGING IN ITALIAN]",
			"",
			"Amazing.",
			"Brian, do you want to go ahead and open up your envelopes and reassemble them?",
			"BRIAN YU: Yes.",
			"I have two envelopes.",
			"I guess I'll open up the one that says one of two first,",
			"and it is the top half of the cat.",
			"And then I'll open up the other envelope, which is two of two.",
			"And that is the bottom half of the cat.",
			"And so together, I think I now have the full cat.",
			"DAVID J. MALAN: Wonderful.",
			"Well, thank you to Brian and to the whole team.",
			"And so to recap, IP is this protocol, the set",
			"of conventions that standardizes what gets written on these envelopes.",
			"It's how computers uniquely address each other with numbers of some sort.",
			"TCP governs a few different things, but among them",
			"is this numbering of services, like 80 for insecure web traffic",
			"or 443 for secure web traffic that ensures",
			"that the data gets from one point to another",
			"and is handled by the right application running on that particular server.",
			"DNS, then, is what we use to begin with.",
			"If Brian had his own domain name, my computer",
			"would have had to look up his IP address,",
			"or conversely, he would have had to look up mine,",
			"so that we humans, who are actually using",
			"the internet in a human-friendly way, don't",
			"have to remember IP addresses, which, again, are just numbers, but instead",
			"can remember things like Harvard.edu, Yale.edu, and the like.",
			"So that, then, is the internet, the fundamental infrastructure,",
			"the plumbing on top of which we now have the ability to get data from point A",
			"to point B. And so in some sense, if you're comfortable with that,",
			"we can now abstract the internet away and just",
			"think of it as being a mechanism that gets data from one point to another.",
			"And so long as we can now assume that we have this fundamental public service",
			"that gets data from one point to another,",
			"now we can start to build on top of it in terms",
			"of software and other languages and actually use it for interesting things.",
			"But before we forge ahead to do those things, any questions or confusion",
			"we can clear up on TCP or IP or DNS or the internet or routers or any",
			"of these other new terms?",
			"[? Greg, ?] back to you.",
			"AUDIENCE: I have a question.",
			"So does chopping the information create any problem?",
			"Because, I don't know, a piece of information",
			"can go there for two seconds and another one for three seconds.",
			"Does it create any problem for the user?",
			"DAVID J. MALAN: Really good question.",
			"These packets can take different durations of time,",
			"and even though I did stipulate that they should go out to Phyllis's hands",
			"roughly at the same time, even if she needs",
			"to pass them in two different directions,",
			"there can absolutely be delays.",
			"And in fact, typically, you and I as humans",
			"will start to notice delays if packets take more than 200 milliseconds",
			"to get from point A to point B. After that,",
			"it looks like there's a bit of delay, and certainly",
			"if it's two or three seconds, you'll really notice that at that point,",
			"it's not necessarily a problem--",
			"Brian hopefully would patiently wait for the second half",
			"of the cat for some amount of time if he only received one packet.",
			"Eventually, he as a human, and in turn, he as a computer,",
			"would probably get a little anxious and would",
			"ask me to retransmit a packet if it doesn't arrive after 5 seconds, 10",
			"seconds, 30 seconds.",
			"These time outs can typically be specified",
			"by the software running on the person's computer, but at that point,",
			"you and I would certainly notice the difference.",
			"All right.",
			"So if we now have this ability fundamentally to get data from point A",
			"to point B, what is actually inside of the envelope that Brian sent me,",
			"and what was inside the envelope I sent him besides just the picture of a cat?",
			"Well, for that, we transition to another language or another protocol, rather,",
			"called HTTP, HyperText Transfer Protocol.",
			"And this is an acronym you've probably seen or typed bunches of times.",
			"It's, of course, what appears in the beginning of URLs, Uniform Resource",
			"Locators, which are the tools that you and I use to actually figure out",
			"what websites or what image we actually want to request of the internet.",
			"So the web, the world-wide web, is really just one of many services",
			"that run on top of the internet.",
			"The web gives us web pages.",
			"Zoom gives us video conferencing.",
			"Other tools give us text chatting, voice chatting, and the like.",
			"So the web is really just an application on top of the internet.",
			"It's hands-down the most popular application,",
			"but it really is just an application.",
			"It's a service that's using that underlying plumbing.",
			"So HTTP is a different protocol that really governs",
			"what goes inside of these envelopes.",
			"TCP/IP governs what goes outside the envelopes.",
			"HTTP governs what goes inside of the envelopes, assuming we",
			"are talking about web browsers and web servers and not video conferencing",
			"or something else.",
			"So with HTTP, it comes with a few different commands, or a pretty limited",
			"vocabulary, two of which are the most important terms to know,",
			"which is GET and POST.",
			"These are literally English verbs, and they",
			"are two of the commands, if you will, that HTTP supports.",
			"And what Brian probably did inside of that envelope is",
			"he probably literally wrote down GET cat or something like that.",
			"POST is used for other applications that we'll get to before long,",
			"but \"GET\" is the operative word.",
			"And it literally is how a browser will request or get information",
			"from a server.",
			"So somewhere in the envelope Brian sent me",
			"was the English word \"GET,\" probably followed by cat.jpg or something",
			"like that.",
			"There's probably a bit more information, but the essence of HTTP",
			"means that if Brian wants something from me and he's the browser",
			"and I'm the server, he should start his request with the standardized verb",
			"\"GET\" followed by the name of the file that he wants to get.",
			"So let's put this now into the context of one of the more familiar URLs.",
			"So here's, for instance, a canonical format of a URL.",
			"And let's highlight a few features of it.",
			"So first, HTTPS.",
			"Increasingly, you're seeing this on the web.",
			"Even if you don't type it, it's often automatically appearing",
			"in the address bar of your browser, because browsers or web",
			"servers are adding it for you.",
			"The S just refers to a secure version of HTTP.",
			"And we'll come back to this topic of security next week and beyond, too.",
			"But in the context of HTTP, this just means that the data between me",
			"and Brian and vice versa is encrypted somehow.",
			"It's way better than Caesar or other ciphers.",
			"It's way more mathematically sophisticated.",
			"But it essentially just scrambles the information",
			"so that Brian knows he's asking for a cat, I, the web server,",
			"knows he's asking for a cat, but if any of you or any of the TFs",
			"who were playing the role of routers maliciously or nosily",
			"opened the envelope instead of handing it off to the next staff member,",
			"they wouldn't understand what's inside the envelope,",
			"because it would look like, similar to Caesar and other ciphers,",
			"sort of like random zeros and ones.",
			"So HTTPS just means that the contents of these packets are encrypted.",
			"What else is salient about these URLs?",
			"Well, here's what we call a domain name.",
			"Odds are most everyone knows what a domain name is,",
			"and it's typically two phrases, something dot something else.",
			"And example.com is, of course, an example",
			"here, but Harvard.edu, Yale.edu, and millions of others these days.",
			"To the end of that, though, is what we would typically",
			"call the top-level domain or TLD.",
			"This is just the type of website, historically,",
			"that you're trying to visit.",
			"Dot com meant commercial.",
			"Dot edu meant education.",
			"Dot net meant some kind of network.",
			"Dot org is an organization.",
			"That's no longer really the case.",
			"In fact, there's hundreds, perhaps even thousands, of top-level domains",
			"nowadays that you can buy domains in that",
			"try to categorize things sometimes, but there's no hard rules",
			"around most of those top-level domains.",
			"You have to be an accredited educational institution to use dot edu.",
			"You have to be in the US military to use dot mil.",
			"There are similar constraints in other countries",
			"who have their own two-character country code TLDs,",
			"like dot UK for the United Kingdom, dot JP for Japan, and many others.",
			"Each country is free to standardize as it sees fit.",
			"But you and I can buy a dot com, a dot org, a dot net, a dot",
			"us, a dot-- there's many, many, many others.",
			"And if you go on Wikipedia you can see a nearly exhaustive list.",
			"But this just tends to categorize the type of website that it is.",
			"Besides that, there's this prefix, this, generally known as a hostname.",
			"And www is just a human convention.",
			"Years ago, pretty much any server on the internet",
			"that had a human-friendly name like this, www.example.com,",
			"this was just meant to connote to the user",
			"that, oh, www, this must be the address of a web server",
			"and not a mail server not a chat server or something else.",
			"It's not strictly required.",
			"It's just human convention.",
			"And odds are, you and I, when you visit websites,",
			"you probably don't even bother typing this in anymore.",
			"But it is a historical feature that allows a visual cue-- clue, typically,",
			"to the humans as to what type of server it is.",
			"So besides that, there's this one hidden piece of information as well.",
			"If you just want to visit example.com's homepage, you might just type this URL,",
			"or even just type example.com and hit Enter and let",
			"the browser redirect you, so to speak-- take you",
			"to this canonical form of the URL.",
			"But very often, you're technically requesting a specific file.",
			"And if not mentioned, that file name is typically index.html.",
			"It can be other things as well depending on the language or the server",
			"technology that someone's using.",
			"But implicit at the end of URLs is often the name of a file.",
			"Brian might have specifically requested cat.jpg,",
			"but if he were requesting not a picture of a cat",
			"but a full-fledged web page with text and other information, odds are,",
			"there's an implicit file name there, like index.html.",
			"And this is now important, because when we look inside this envelope,",
			"this is a piece of information that needs to then be in there.",
			"So let's take a look at some sample HTTP requests and responses,",
			"the more technical dive into what Brian and I and the staff",
			"acted out a moment ago.",
			"Technically speaking, when Brian sent me a request for that cat,",
			"he wrote inside this envelope, not only the key word GET and something like",
			"a cat.jpg--",
			"he also specified a couple of other things.",
			"And let's genericize it now away from cats and just propose this.",
			"Inside of an HTTP request that is any of these virtual envelopes is literally",
			"a request for, like, GET followed by slash, if you don't want to cat,",
			"you just want the default homepage, followed",
			"by a mention of what version of HTTP the browser and server should speak.",
			"1.1 is pretty common.",
			"2 is pretty-- is increasingly common.",
			"3 is even now out there.",
			"But there's just different versions of the protocol.",
			"It's like humans have refined what it means to shake hands.",
			"These versions of protocols evolve over time.",
			"But there's also a line like this, Host colon www.example.com,",
			"because-- just in case I am a particularly fancy server that",
			"supports not only example.com but maybe Harvard.edu and Yale.edu.",
			"It's possible, long story short, for companies nowadays",
			"to host multiple websites and multiple domains on the same server.",
			"This little clue inside the envelope makes sure",
			"that it goes to example.com or Harvard.edu or Yale.edu",
			"if all of these entities are sharing the same physical server.",
			"So more specifically, a request might look-- instead look like this.",
			"If you're not just requesting the default homepage but you want",
			"a specific file, it might say /index.html instead.",
			"What does my response look like?",
			"So I've gotten Brian's envelope.",
			"Now I'm going to go ahead and respond with my own one or two",
			"or more envelopes.",
			"Inside of mine, yes, is going to go pieces of that cat,",
			"but some additional information as well, per the protocol.",
			"So my response-- just like in the human world, I might extend my hand,",
			"if I see Brian initiating a handshake.",
			"I'm going to respond with something like this, HTTP/1.1,",
			"which just reminds the browser what version I'm speaking, then a number,",
			"which is the status code, followed by a shorthand summary, like OK.",
			"200 OK means I got you.",
			"I found the cat.",
			"Here it comes, piece by piece, in these envelopes.",
			"And I also put it in the envelope a mention of the content type.",
			"If it's a web page, I'm going to put text/html.",
			"If it's a jpg, I might instead say image/jpg.",
			"And there's the different content types, otherwise known as line types,",
			"for all different file formats in the world.",
			"Well, that's not always going to be the case, that the response is",
			"as simple as that, whereby your browser requests information and the server",
			"responds with the requested information.",
			"Sometimes the users make their way to the wrong place.",
			"So for instance, suppose that a browser visits www.Harvard.edu,",
			"the response might not necessarily be OK initially.",
			"It might not be status code 200.",
			"And in fact, we can see this.",
			"Let me go ahead and open up on my screen here a browser",
			"window that's going to take me to, let's say, Harvard.edu.",
			"And I'm going to go ahead and type in to the URL bar http://www.Harvard.edu,",
			"Enter.",
			"Now, all this happened pretty quickly, but if I",
			"click on the URL bar, which has been simplified or shortened",
			"by Chrome at the moment, notice where I actually ended up.",
			"Somehow or other, my browser did not keep me at HTTP.",
			"It redirected me, so to speak, to HTTPS.",
			"This is probably intentional on Harvard's part.",
			"They would rather that I'd be visiting them",
			"securely so that if I'm reading articles or other content,",
			"that's really nobody's business except mine and Harvard.",
			"Certainly no one-- no routers in between should be able to see this.",
			"So somehow, Harvard redirected me from HTTP to HTTPS.",
			"Well, how can I see this?",
			"Well, it turns out, embedded in Chrome and Edge and Firefox and Safari--",
			"all of today's browsers--",
			"there are often developer tools that sometimes you",
			"have to enable via a certain menu--",
			"but these developer tools are so powerful",
			"and they allow you, the user, or now you, the programmer,",
			"to actually see and understand what's going",
			"on underneath the hood of these browsers and servers.",
			"So I'm going to do this in Chrome, specifically.",
			"I'm going to go to View, Developer, and then I'm",
			"going to go to Developer Tools.",
			"And odds are if you're a Chrome User, this menu option has always been there,",
			"even if you never noticed it.",
			"So feel free to play along at home.",
			"And then notice this pops up on the top right here.",
			"I'm going to go ahead and move it down to the bottom",
			"just by clicking the dot, dot, dot menu and move the developer",
			"tools to the bottom of my screen, just so we can see things a little wider.",
			"And I'm going to go ahead and click on the Network tab up here.",
			"And when I click on the Network tab here,",
			"I'm going to see a whole bunch of information related to my last request,",
			"so I'm going to go ahead and do this request again.",
			"Let me go ahead and go back to the URL bar",
			"and let me go ahead and-- actually, just for good measure,",
			"let me do this in Incognito mode.",
			"And even though you perhaps are in the habit",
			"of using Incognito mode if you don't want the browser",
			"to remember where you've been or what you've logged in as-- and Incognito",
			"mode is incredibly powerful for developers tool",
			"so that you can reset the browser state to a first condition",
			"without any previous network browsing showing up in your history.",
			"So I'm going to do this again now in Incognito",
			"mode after having opened developer tools.",
			"http://www.Harvard.edu, Enter.",
			"And a whole bunch of stuff just flew by the window, some of which",
			"is this chart information, which shows me the performance.",
			"So to [? Greg, ?] your question earlier about noticing the amount of time,",
			"you can see that some of the requests that were just induced",
			"vary between a few milliseconds and over 1,000 milliseconds.",
			"But what I care about for now is this fairly arcane listing down here.",
			"A whole lot of stuff just flew across the screen,",
			"and indeed, if I zoom in on the bottom, simply visiting Harvard.edu",
			"induces 70 HTTP requests per this mention in the bottom left-hand corner.",
			"It resulted in 6.8 megabytes of information being transferred.",
			"And in total, it took a-- rather atrociously, 11.95 seconds.",
			"So [? Greg, ?] like, that is slow, relatively speaking.",
			"Well, absolutely speaking.",
			"So what's the takeaway here?",
			"Well, any time you visit a web page, there's",
			"not just the one web page itself with all of the text in it.",
			"There's probably images, maybe videos, maybe music and other things.",
			"All of those get downloaded separately.",
			"So if Brian had asked me for a full web page, like the course's home website,",
			"I might respond not with a single envelope or two envelopes.",
			"I might respond with 70 envelopes containing the responses to every piece",
			"of media that composes CS50's own website, or in this case, Harvard's.",
			"But for now, let's focus only on the first of these requests.",
			"If I look at the first row here in Chrome,",
			"I will see a reminder of where I visited first.",
			"But notice the Status column over here is 301.",
			"301 Moved Permanently.",
			"It turns out that there's numbers besides 200",
			"that tell browsers what to do.",
			"200 just means OK, here's the data we requested.",
			"301 means, nn-nn, whatever you requested has moved permanently",
			"to a different URL.",
			"So let me go ahead and click this first row",
			"and you'll see that a whole different set of tabs pops up.",
			"I'm going to click Headers here.",
			"And now let me define a term.",
			"When Brian and I are using HTTP inside of these envelopes and I write",
			"something like GET slash HTTP/1.1 or host colon www.example.com,",
			"each of those lines of text is what we'll call an HTTP header.",
			"It's a line of text inside of the envelope.",
			"So what we're seeing here is Chrome's summary",
			"of all of the headers that were inside of these envelopes.",
			"Let me go ahead and look at my request headers first.",
			"I'm going to click View Source.",
			"And I can literally see the raw request that my browser sent",
			"to www.Harvard.edu, GET slash HTTP/1.1, Host colon www.Harvard.edu,",
			"and then a bunch of other stuff which we'll ignore for now.",
			"But those are all HTTP headers.",
			"But if I scroll back up here, let's look at the response",
			"headers now, what came back in a different envelope",
			"from Harvard to my laptop.",
			"Notice here that it's HTTP 1.1, but it's not 200 OK, it's 301 Moved Permanently.",
			"This is a hint to my browser that, uh-uh,",
			"there's nothing at the URL you visited.",
			"You need to visit a different location instead.",
			"To know where I need to go, I need to scroll down and find this header here.",
			"Notice that the third line in the response is Location colon",
			"https://www.Harvard.edu.",
			"So this is how the envelope that comes back contains a clue to me to say,",
			"nn-nn, we have moved permanently to the secure version of the website.",
			"And if I zoom out now and click this little X to close those tabs,",
			"you'll see that the next request that my browser automatically sent on its own",
			"was to instead, if I scroll down here, to this request URL,",
			"https://www.Harvard.edu, and the response I",
			"got this time under this general summary here was now indeed 200.",
			"So this is just a simple mechanism that allows a browser and a server",
			"to intercommunicate in a way that can send them from one location to another.",
			"And let me make this a little more familiar.",
			"Odds are you have seen not this before, explicitly, because you, as a human,",
			"would rarely, if ever, see the number 301 or Moved Permanently",
			"until today, now that you're a programmer who's",
			"using these developer tools, but odds are you've seen another number.",
			"Maybe in the chat if you want to just chime",
			"in, if you're thinking about web pages and numbers, has anyone seen--",
			"quite often, probably, a number that maybe now makes a little more sense?",
			"Brian, what are you seeing?",
			"BRIAN YU: A lot of people saying 404.",
			"I also saw 500 and a 502.",
			"DAVID J. MALAN: Yeah, so 404 is the code that humans adopted years",
			"ago that just signifies Not Found.",
			"So if you visit an incorrect URL or an old URL that no longer exists",
			"on a server, for maybe an old cat that's been deleted,",
			"the server will respond not with 200 OK but with 404 Not Found,",
			"thereby telling your browser to display some kind of error message.",
			"Weirdly, browsers years ago weren't especially user friendly,",
			"and then browsers just told us humans 404, 404,",
			"which frankly, is not very user friendly.",
			"But all it boils down to is this little hint inside of the response",
			"envelope coming back that indicates that something went wrong,",
			"that something was not found.",
			"And there's a whole list of these status codes,",
			"and this is certainly not something you need to memorize,",
			"but as we focus more and more on web programming,",
			"you'll just get naturally familiar with some of these.",
			"There's other ways of redirecting the user from one place to another.",
			"302 and 307 can be used.",
			"For efficiency, servers can sometimes respond",
			"with 304, which essentially means, you already asked me that question.",
			"The cat has not changed on the server.",
			"Use your own copy of the cat.",
			"So long story short, if Brian's own browser were smart, it would cache--",
			"C-A-C-H-E-- that is, remember the cat that he just downloaded from me so that",
			"if Brian hits reload or he comes back to that same website again and wants",
			"to see the cat again, it just-- his browser loads the local copy instead",
			"of bothering me, the web server, and wasting time, milliseconds,",
			"sending another cat.",
			"304 would just say, the cat is the same.",
			"Use your own local copy.",
			"Then there's others.",
			"You might have seen 401 or 403 before, which",
			"refer to not being logged in correctly or something like that.",
			"500 is actually bad.",
			"And in fact, I can pretty much guarantee that over the next couple of weeks,",
			"all of you will experience your very first of several HTTP 500 errors.",
			"That's going to be next week that you screwed up with your code",
			"and you actually wrote buggy Python code that just meant the whole server didn't",
			"know what to do.",
			"And that's an internal server error.",
			"Fixable, and will help you debug it, but indeed, that's quite common as well.",
			"503 just means the server might be overloaded in some way",
			"and so service is unavailable, and there's others, dot, dot, dot, as well.",
			"So we can actually have a little bit of fun",
			"with this in a couple of different directions.",
			"It turns out that if we send this HTTP request,",
			"we can take a look at what comes back.",
			"And let me go ahead and do this.",
			"Instead of using my browser, I'm going to use a command line",
			"tool which tends to just be a little cleaner, because I don't have to futz",
			"around with all of these buttons.",
			"Let me go ahead and use a program called Curl.",
			"And Curl's purpose in life is just to connect to a URL.",
			"And it's not going to bother showing me the web page or any of the content.",
			"It's just going to show me the HTTP headers if I use a command line",
			"argument of dash capital I.",
			"And now I'm going to go ahead and http://safetyschool.org.",
			"And I'm going to go ahead and Enter.",
			"And this is my Mac now sending one envelope",
			"to safetyschool.org containing GET, that verb, requesting the home page.",
			"They are presumably going to respond to me with another envelope inside",
			"of which is some kind of response.",
			"Maybe it's a 200.",
			"Maybe it's something else.",
			"[CHUCKLES] All right.",
			"It looks like-- forgive me--",
			"that safetyschool.org has moved permanently, per this 301,",
			"to this new location www.Yale.edu.",
			"sorry.",
			"And in fact, we can do this.",
			"If I copy this URL--",
			"and let me go into a browser.",
			"I'll use Incognito again so that I don't have any past history.",
			"I'm going to go ahead and hit Enter.",
			"And voila, the visual effect is just as real as the headers would imply.",
			"So indeed, the funny thing about this joke is that someone on the internet",
			"has been paying for the domain name safetyschool.org for, like,",
			"20 years now for this joke, and the only thing it does",
			"is redirect one domain name to another.",
			"Now, fair is fair.",
			"Let me go ahead and transition away from safetyschool.org",
			"or to harvardsucks.org, which also exists, and someone on the other side",
			"has been hosting this website for some time.",
			"And in fact, if you visit that URL--",
			"let's go to harvardsucks.org, Enter.",
			"You'll actually see a whole website.",
			"So the Yalies really went all-out here.",
			"And you can actually see an amazing hack here",
			"whereby at harvardsucks.org there's an old YouTube video of an amazing hack",
			"or prank that was pulled at one of the Harvard-Yale football games",
			"some years ago where Yale, to their credit, tricked us into spelling out,",
			"with a bitmap, if-- of all things, we suck.",
			"So fair's fair.",
			"So in anyhow, bit of a stretch to connect those",
			"to underlying HTTP messages, but it all, indeed,",
			"relates to these very simple primitives.",
			"Let me point out one other thing as well.",
			"We might also see in the form of HTTP requests",
			"even more sophisticated first lines where you're not requesting",
			"just slash, the default homepage.",
			"You're not requesting /cat.jpg or /index.html.",
			"There might also be question marks and equal signs.",
			"And notice, this is an excerpt from an envelope my Mac or PC or phone",
			"might send to google.com requesting pictures of cats.",
			"And in fact, let me go ahead and do this on my browser.",
			"Let me go to HTTPS--",
			"I'm not going to bother using the insecure version at all.",
			"I'm going to go explicitly to google.com/search?q=cats.",
			"So this is the human version of the URL that my Mac",
			"will translate into this lower-level message that's",
			"going to be shoved inside of the virtual envelope.",
			"So I'm going to go ahead and hit Enter.",
			"And voila, I now see, indeed, a whole bunch",
			"of pictures of cats, including some more horrific photos from a movie that",
			"didn't fare well as well.",
			"So that is to say that it seems that once you understand URL formats,",
			"you can begin to pass input to servers.",
			"And here's now where we bridge past weeks to future weeks.",
			"Thus far, when we visited web pages like Harvard.edu and Yale.edu and the like,",
			"we're just visiting static web content.",
			"We're not actually providing user input like you",
			"would using GET string or input or any kinds of command line programs",
			"we've written.",
			"But it turns out that you URLs do support user input,",
			"and they are standardized.",
			"If you see a question mark and then the name of a variable like q",
			"and then an equal sign and then a word like",
			"\"cat,\" that's the web-based analog of a command line program having asked you",
			"what is the value of q, and the human typing in cats.",
			"So this is to say there is a way using URLs that will actually",
			"allow us to pass input to a web server.",
			"And indeed, that's what's happening when you're visiting google.com,",
			"but it just boils down to understanding these URLs.",
			"And before we begin to build some of our own solutions",
			"on top of this infrastructure, any questions now or confusion on HTTP",
			"or status codes or anything we've seen thus far?",
			"Anything at all?",
			"Yeah, over to Santiago.",
			"AUDIENCE: When you want to, for example, publish a web page,",
			"why is it that you have to buy a domain name?",
			"Is that because you're using memory in some server?",
			"DAVID J. MALAN: Yeah, that's a really good question.",
			"Why do you have to buy a domain name?",
			"It kind of boils down to capitalism, to be honest.",
			"There is a non-zero cost to running certain aspects",
			"of the internet, certainly, or really all aspects of the internet.",
			"There are some nonprofit and volunteers--",
			"non-profit organizations and volunteers that have historically helped",
			"govern it.",
			"Increasingly, though, there's overhead to operationalizing the internet,",
			"running things like the main DNS servers and other features.",
			"And so there are what are called internet registrars, much",
			"like a university registrar, whose purpose in life",
			"is to allow people to essentially rent domain names on an annual basis.",
			"And indeed, when you buy a domain name, it's not yours permanently.",
			"Instead, you're paying a yearly fee once--",
			"a renewal fee every one or two or three years or the like.",
			"It might range from a couple of dollars to hundreds",
			"or even thousands of dollars.",
			"We can go down the rabbit hole talking about domain name squatting, whereby",
			"if you think of a really cool word and you buy the domain name and someone",
			"else comes along and wants it, there's capitalism at play",
			"there, potentially an opportunity for you",
			"to sell a domain name to someone else.",
			"But in part, it helps just regulate exactly who can sign up",
			"for domain names and presumably put some downward pressure",
			"on all of them just disappearing if you could just sign up for free for as many",
			"as you want.",
			"Other questions or clarifications on not just",
			"HTTP but also TCP, IP, DNS, or anything else from today's alphabet soup?",
			"BRIAN YU: A question came in the chat.",
			"If you have multiple packets that you're trying to send from one place",
			"to the other, do they have to be sent out one after the other,",
			"or can you send all of the packets out at the same time?",
			"DAVID J. MALAN: Really good question.",
			"We did not think that we humans could do that very well choreographically using",
			"Zoom a bit ago, so we sent one packet a time through the teaching fellows.",
			"But yes, a computer would typically dump all of those packets",
			"out at the same time.",
			"They would be serialized one after the other,",
			"but it would happen very quickly.",
			"And by chance, they might all follow the same route",
			"through the teaching fellows as routers, or they",
			"might go in different directions depending on just how congested",
			"or how busy the internet is at that moment in time.",
			"They might arrive out of order, but indeed, that's",
			"why Brian needs to know what the sequence number is",
			"on the outside of the envelope so he can rearrange them in the correct order.",
			"Anything else on your end, Brian?",
			"BRIAN YU: How do the rooters know which way",
			"to send any particular packet of data?",
			"DAVID J. MALAN: Really good question.",
			"How do the routers know?",
			"So back in the day-- and in some cases, it's literally hardcoded.",
			"You can think of a router as having essentially an Excel spreadsheet",
			"in its memory with at least two columns, one of which",
			"is an IP address, the other of which is the direction it should go out on,",
			"like right, left, up and down.",
			"Like, the cables aren't going in four different directions, certainly,",
			"but you can think of it in-- metaphorically, in that way.",
			"It tells the router that if you receive data for this IP address,",
			"send it out on this cable, or if it's for this IP address,",
			"send it out on that cable.",
			"And all of these cables are connected to other routers",
			"in the same city, in different cities, across an ocean,",
			"to some other endpoint.",
			"That would be very painful, though, if humans",
			"had to manually configure all of the interconnections",
			"we saw on MIT's map just a bit ago.",
			"And so it turns out there's other protocols",
			"out there that we won't spend time on in this class,",
			"but that routers rely on in order to dynamically adapt.",
			"So long story short, there are protocols that",
			"will figure out if all of a sudden my packets",
			"are not getting through to Brian, I'm going",
			"to start routing around that, dynamically,",
			"and the routers are going to figure out, that does not",
			"seem to be a good destination because I'm not getting any response,",
			"or it's just taking way too long to hear back.",
			"So there are protocols that govern how you",
			"can decide whether to start dynamically changing those so-called routing",
			"tables, the spreadsheet to which I referred earlier.",
			"All right, so we have now, at this point, an infrastructure known",
			"as the internet that allows us to send packets of information from point A",
			"to point B by writing addresses and port numbers",
			"on the outside of those envelopes.",
			"We have another protocol called HTTP which is specifically",
			"used for web browsers and web servers, separate from videoconferencing",
			"and chat, which have their own set of conventions and protocols,",
			"but we have a mechanism for get--",
			"requesting information and responding with information.",
			"And we know from problem set 4 how you can respond with a cat.",
			"It's just a sequence of bits, whether it's",
			"a bitmap or a jpg or something else, but we haven't yet",
			"seen what an actual page looks like.",
			"And indeed, if we look a little deeper in the envelope",
			"that I'm sending to Brian and he's sending to me",
			"and we're getting back from Harvard and we're getting back from Yale,",
			"we're going to see another language altogether.",
			"It's not a programming language, per se.",
			"It's what's known as a markup language, which",
			"just means it's more about aesthetics than it is about logic.",
			"And there's going to be a couple of other languages tucked in there, CSS,",
			"Cascading Style Sheets, JavaScript, which is a proper programming language.",
			"But let's go ahead and take a five-minute break here.",
			"And when we come back, we'll learn to make web pages themselves.",
			"All right.",
			"So when you visit a website requesting the home page or a specific file",
			"on the website, exactly what is inside of the virtual envelope",
			"a little deeper down below the HTTP headers",
			"that you get back from the server?",
			"Well, that language is known as HTML, HyperText Markup",
			"Language, which indeed is not a programming",
			"language, which means there's no loops.",
			"There's no conditions.",
			"There's no functions or variables per se.",
			"It's just text that tells a browser fairly pedantically, top to bottom,",
			"left to right, what to display and how.",
			"So let's take a look at some examples.",
			"An HTML page is going to contain really two different concepts inside of it,",
			"what we'll call tags or elements, and also attributes.",
			"Well, what are those?",
			"Well, here is perhaps the simplest web page we can make.",
			"And this is HTML itself.",
			"And you'll see that it's structured in kind of a symmetric way.",
			"Some things are indented like in a proper programming language,",
			"but there is some symmetry to what's going on here.",
			"So let's tease apart top to bottom exactly what we're looking at here.",
			"This very first line is known as a document type declaration.",
			"Long story short, whenever making a modern web page,",
			"this should just be the very first line of your file, no matter what.",
			"It signifies that you and I are using the latest",
			"version of HTML, which is version 5.",
			"In the future, this line will probably change as HTML itself, the language,",
			"evolves as humans add more and more features to it.",
			"Below that, notice, is a pair of what we're going to call tags.",
			"Tags are things between open brackets that start with a word like HTML",
			"or some succinct phrase like that, optionally",
			"with something like this word and an equal sign",
			"and maybe something in quotes after that.",
			"But highlighted in yellow here is the first of our HTML tags.",
			"And coincidentally, this tag is the HTML tag.",
			"And the way it works is as follows.",
			"When a browser receives an envelope containing text like this,",
			"it first reads that first line and says OK, this file contains HTML version 5.",
			"What comes after it?",
			"Oh, here is the content of the web page.",
			"It says, hey, browser, here comes some HTML.",
			"Notice down here is the opposite of that statement.",
			"When you get to the end of this file, you'll see a similar-looking tag,",
			"but there's a forward slash front of the same word, HTML.",
			"That's what we'll call a close tag if we think of this as an open tag.",
			"Or if you think of this as a start tag, this is an end tag.",
			"And most tags indeed have that symmetry whereby when you open them once,",
			"you should eventually close them, ideally in the appropriate order.",
			"Notice that you don't have to repeat other stuff.",
			"When you close a tag, you just mentioned the name",
			"of the tag to keep it fairly succinct.",
			"And that means, hey, browser, that's it for the HTML.",
			"All right, what's inside of that?",
			"If we look down below this, you'll see that there's this thing here,",
			"which is what's going to be called an attribute.",
			"Attributes tend to be short, succinct phrases that",
			"have some special meaning for that particular tag.",
			"This particular attribute, if you read the documentation for the language",
			"HTML, will say that if you add lang= quote-unquote \"something\"",
			"to your HTML tag, that's going to be a clue to the browser that says, hey,",
			"browser, here comes HTML, and by the way,",
			"the contents of this web page are going to be in English,",
			"at least in this case, by default, for en.",
			"Every language in the world has its own two-digit or three-digit-- three",
			"character-- two-character or three-character code",
			"that can be placed inside these quotes that will standardize exactly",
			"what the browser interprets it as.",
			"Useful these days if you have translation enabled in your browser.",
			"It knows what language the page is written in so",
			"that it can help you translate it to your own spoken language.",
			"All right, below that, there's two sets--",
			"two pairs of tags, the head tag here and the body tag here.",
			"And I've highlighted them both at the same time,",
			"because you can think of these as both children of the HTML tag.",
			"So if we borrow our metaphor of a family tree and some kind of hierarchy here.",
			"If you think of the HTML tag as being like the parent, so to speak,",
			"this parent has two children, a head tag and a body tag, each of which",
			"is respectively opened and closed.",
			"Let's consider the first one, the head tag.",
			"What's inside of that, so to speak?",
			"Inside of that is the title tag which as you might guess by now",
			"is going to represent the title of the web page we're writing.",
			"Specifically, the title of this web page is going to be literally--",
			"and just goofily--",
			"hello comma title.",
			"So that's what you would see in the tab of this page.",
			"Let's back up a little bit and look now with the second child of the HTML tag,",
			"the so-called body tag.",
			"This is going to be the big, rectangular region of the web page,",
			"otherwise known as the body or viewport.",
			"And here, we see that the contents of that rectangular region of the page",
			"is going to be literally hello comma body.",
			"So that is to say this is the HTML for a fairly simplistic page whose title bar",
			"in the tab is hello comma title and whose",
			"body in the big rectangular region is quite simply hello comma body.",
			"And it's perhaps helpful now to call out explicitly",
			"that we can think of this, a la week 5, as really a data structure.",
			"Even though it's just text inside of that envelope that gets read top",
			"to bottom, left to right, what the browser is actually",
			"going to do on your laptop or desktop or phone",
			"is actually build a data structure in memory.",
			"So Microsoft, who wrote Edge, or Google, who",
			"wrote Chrome, or Apple who wrote Safari, wrote",
			"code that reads HTML top to bottom, left to right, like a big, long string,",
			"parses it-- that is, analyzes it-- and builds up into the computer's memory",
			"a tree-like data structure like this, much like for problem set 5,",
			"you built up your own hash table in memory for what was otherwise",
			"just a big text file of words.",
			"So you can see the hierarchy here.",
			"If you think of the whole file as being a so-called document,",
			"we'll draw a node, so to speak, in this tree here.",
			"The very first and only child of that is the HTML tag.",
			"Indeed, every page has to start with that HTML tag.",
			"It has two children, as I proposed, head and body respectively.",
			"And then head has a title child, and that has a child itself,",
			"which is just text.",
			"And just to be a little nit-picky, I've deliberately drawn these nodes",
			"in slightly different shapes just to connote that HTML, head, title,",
			"and body are indeed all tags, opened and closed.",
			"These ovals here are just text.",
			"Those are not inside of--",
			"those are not tags themselves.",
			"That's just raw text here and here.",
			"And then the document node is the one random one.",
			"This is the only thing that's going to start with an exclamation point,",
			"typically, unless you have what we'll call comments",
			"in HTML, which are just notes to self that we saw in C and in Python.",
			"There's similar syntax for those.",
			"All right.",
			"With that said, if this is the simplest web page we can make,",
			"where do we make it?",
			"How do we make it?",
			"So you could certainly just open up your Mac or PC",
			"and open up something like Text Edit or Notepad.exe",
			"and type this out, copy and paste it, save the file,",
			"and open it in your browser.",
			"But that's not that interesting, because if you just",
			"save an HTML file on your Mac or PC, you are",
			"going to be literally the only one in the world who can visit it.",
			"So ideally, you want a server on which you can write and save",
			"your HTML so that other people, your users, your customers,",
			"can visit the file via the internet.",
			"Now, thankfully, we all have access to a tool",
			"already called CS50 IDE, which itself is a web-based tool for writing code,",
			"and the code we'll start writing now just happens to be in HTML.",
			"So let me go ahead and do that.",
			"Let me go ahead and open up a new file.",
			"I'll go ahead and call this, say, hello.html,",
			"dot html being the conventional file extension, and let me just go ahead",
			"and retype.",
			"That so !DOCTYPE HTML says, hey, browser, here comes version five.",
			"html lang=\"en\".",
			"And now notice what the IDE is doing for me.",
			"For better or for worse, depending on your preferences,",
			"it's going to try to complete your thoughts for you so you can just",
			"type less.",
			"This is increasingly a feature of IDEs, Integrated Development Environments,",
			"because now I can type roughly half as much.",
			"Now, I'm going to go ahead and open the head of the page.",
			"Notice it got automatically closed.",
			"I'm going to go ahead and open the title of the page.",
			"That will automatically close as well.",
			"And let me go ahead and just do something like hello, title.",
			"And then down here, outside of the head tag, I'll do my body tag",
			"and do hello comma body.",
			"Now, strictly speaking, this indentation is not necessary.",
			"If I wanted to be a little more terse and not use this many lines,",
			"this is totally reasonable as well.",
			"And it's probably reasonable up to a point.",
			"If I had a crazy long title, I probably should move it to a line of its own.",
			"But again, these details are not going to matter to the computer,",
			"to the browser reading this, but they certainly",
			"make it prettier and easier for me, the human,",
			"and presumably you to read as well.",
			"So I've gone ahead and saved this file.",
			"And in the past, I would have used like make for C",
			"or would have used python for Python, but neither of those",
			"is applicable, because we're not writing or running code.",
			"I now want to visit this web page.",
			"And how do I do that?",
			"Well, I need a browser, and I'm all set there.",
			"Obviously, I can use Chrome, Safari, whatever on my own Mac.",
			"But I also need a server.",
			"And it turns out that CS50 IDE, insofar as it is already a web",
			"server that we use to write code, we can use it as a web server",
			"to serve our HTML as well.",
			"So a little bit ago, when I played the role of a web server,",
			"I need to essentially implement in the IDE",
			"that same notion, of some program that's just",
			"going to listen and listen and listen, like I was waiting for Brian,",
			"and any time I get an HTTP request from anyone's browser,",
			"I'm going to respond with the appropriate file.",
			"Now, we're not going to implement a web server ourselves.",
			"Web servers are kind of commodity these days.",
			"Anyone can just download or pay for one and use one.",
			"And indeed, the IDE comes with one quite simply called http-server.",
			"So this is a program preinstalled in the IDE.",
			"It's free and open source.",
			"You can use it on Linux or Macs or PCs as well.",
			"But it's preinstalled in the IDE.",
			"And when I run it, what it's going to do for me is start,",
			"curiously, a second web server.",
			"Because the IDE itself is already running on CS50's own web server,",
			"I need to now run my own server.",
			"But in order to distinguish one from the other,",
			"I'm just going to use a different port.",
			"And by default, the port that the CS50 IDE uses is this one 8080.",
			"So again, by default, most web servers in the world",
			"use port 80 if insecure and port 443 if secure.",
			"But those are, unfortunately, already used by CS50 IDE",
			"itself, which is running already on CS50's web server.",
			"So if I want to use the same server, the same computer in the cloud,",
			"to listen for other requests of my own, I'm",
			"just going to start my own second web server in parallel",
			"and just have it listen on a different port.",
			"And that's just so that you and I can run our own web",
			"server even though we don't have control over the IDE",
			"itself outside of our own accounts.",
			"Now, it's a pretty cryptic looking hostname, if you will.",
			"It's this random thing, 0cda3813 and so forth.",
			"But at the end of the day, it's just a URL.",
			"Notice that it ends in CS50.xyz, which is a domain name that we bought",
			"and we use solely for this purpose of running web servers on CS50 IDE.",
			"So if I go ahead and click that and click Open, voila,",
			"I will now see a fairly arcane textual listing of all of the files",
			"in the folder in which I just ran HTTP server.",
			"And let me go ahead and zoom in a little bit,",
			"and you'll see that there's only one file on there",
			"thus far that we've written, hello.html.",
			"So let me go ahead and click on that file.",
			"And voila, there it is, hello, body, my very first page.",
			"I don't see the title because I'm in full-screen mode, but let me go ahead",
			"and un-full-screen myself, and sure enough,",
			"if I zoom in on the title in the tab of this page, it's hello comma title.",
			"So what has just happened?",
			"I happened to be using CS50 IDE just because it's convenient.",
			"You and I already have accounts on it.",
			"We're running our own web server, implementing",
			"the software version of the role I was humanly playing earlier.",
			"I'm using Chrome as my browser, just like Brian was our browser in the story",
			"before.",
			"And so when I visit this long URL in my browser's bar that the server told me",
			"to visit, notice that it ends with /hello.html.",
			"So all in one environment, I'm serving web pages and requesting web pages.",
			"And this is perfect, because this is what a real-world software",
			"developer would do when building their own websites or web applications.",
			"They want to actually keep everything local and work on it",
			"and work on it until they're ready to release it to the world.",
			"Well, let me go ahead here and point out one thing in the tab here.",
			"And in fact, some of you very cleverly are-- actually, amazingly,",
			"transcribed that URL, because I'm seeing more HTTP requests coming in right now",
			"live.",
			"Notice that in the terminal window of my IDE where I ran HTTP server,",
			"I'm seeing, row by row, the requests coming in.",
			"And so this is kind of a log, because my web server is still running,",
			"and if any of you actually want to type out that same URL again,",
			"if you rewind in time in the video, you can actually visit my hello.html file",
			"right now on the internet, assuming you're watching the lecture",
			"live, and you can see new rows appearing in my output here.",
			"But that's just to say it's useful for us diagnostically.",
			"But let me go ahead and do something else here for just a moment.",
			"I'm going to go ahead, and in a moment, create another file,",
			"this time to demonstrate some other HTML tags.",
			"So let's go back here and in my--",
			"and I'll keep my terminal window running,",
			"but I don't really care about the output now,",
			"so I'm just going to go ahead and minimize it down there.",
			"I'm going to go ahead and create another file up here called paragraphs.html.",
			"And let's see if we can't introduce some other features of HTML.",
			"I'll go ahead and type out the same as before, !DOCTYPE HTML,",
			"my HTML tag with my lang for English attributes.",
			"Sometimes, admittedly, the IDE will get confused if I start a thought,",
			"don't finish my thought, then try to finish it again.",
			"And that's fine.",
			"You might just have to clean up what the IDE is trying to do for you",
			"to be helpful.",
			"I'm going to go ahead and create the head tag here.",
			"I'm going to give myself a title here.",
			"I'll call this page paragraphs.",
			"I'll keep it all in one line just to keep it succinct.",
			"I'll open up my body.",
			"And now I'm going to go ahead and type out five paragraphs of Latin text",
			"that I'll just go ahead and put right here.",
			"And let me go ahead and indent this nicely just",
			"to make it nice and readable.",
			"This is your lorem ipsum text, which is just Latin-like nonsense.",
			"And here I have five paragraphs of text now.",
			"So this is different.",
			"It's way more than just hello, body.",
			"So let me go ahead and save this file.",
			"Let me go back to my other tab here.",
			"Notice that nothing has changed until I click",
			"reload, which will reveal the latest contents of my folder.",
			"So let me click paragraphs.html, and I should",
			"see five paragraphs of Latin-like text.",
			"Huh, no, that's just a big mess, one massive, long paragraph.",
			"Any instincts for what the bug here might be?",
			"Any thoughts on the chat or with a raised hand?",
			"Yeah, over to Ryan.",
			"AUDIENCE: At least from the way it's set up,",
			"it doesn't look like HTML has auto line spacing by default,",
			"so it's going to collect them all into this one big string",
			"unless you somehow create a space in between each paragraph.",
			"DAVID J. MALAN: Exactly.",
			"HTML, like most any computer language, programming or otherwise,",
			"is going to take you literally, and if you don't tell it",
			"what to do using, in HTML cases, these tags,",
			"it's just going to do some default behavior instead.",
			"So let me actually go back to CS50 IDE--",
			"and you know?",
			"Let me introduce another tag here.",
			"It turns out there's a tag called the paragraph tag.",
			"And the shorthand notation for that is quite simply",
			"open bracket p closed bracket.",
			"The IDE is going to try to finish my thought,",
			"but because I already have the paragraph,",
			"I'm going to need to manually fix this myself.",
			"So let me go ahead and open it there.",
			"And let me go ahead now and just insert a few of these.",
			"So one there, one there, one there, one there.",
			"And let me go ahead and copy the close tag.",
			"One there, one there, one there, and one there.",
			"And now, let me just, for style's sake, indent further.",
			"And I know that pretty much in every past week",
			"I've claimed that copy paste is bad--",
			"not really the case with HTML, because if you want multiple paragraphs,",
			"there's no notion of a loop.",
			"You can't create five paragraphs of Latin-like text with HTML alone,",
			"so copy paste, in this case, is the right solution.",
			"All right.",
			"Let me go ahead now and go back to my other tab and now hit reload.",
			"Nothing's going to change until you tell it",
			"to, so just like you would reload a normal website, let me reload my own.",
			"And voila, we fixed the problem that Ryan identified by now explicitly using",
			"HTML's paragraph tag.",
			"And it's deliberately the p tag because HTML tags tend to be succinct.",
			"It's fewer characters to type.",
			"And how do I know it's the p tag?",
			"You just have to learn it at some point, in a class, in a book, in a website.",
			"And indeed, much like with Python, as with C, we're",
			"not going to aspire to teach you the laundry list of HTML tags",
			"and attributes that are out there, but focus today particularly",
			"on concepts and fundamentals so that you can",
			"add to your vocabulary quite quickly via any number of online resources",
			"that we'll point you to.",
			"All right, let's go ahead and do this.",
			"Rather than do everything from scratch, let me go ahead",
			"and copy this and create another file that I'll call headings.html.",
			"When writing a paper or when writing or reading a book,",
			"it's very common to have chapter headings or section or subsection",
			"headings, and indeed, you can do this in HTML as well.",
			"So I'm going to go ahead and introduce a couple more tags",
			"here, namely the H1 tag, which is like the biggest heading tag.",
			"And I'm just going to write the word one here just to keep it simple.",
			"Over here, I'm going to do H2, and I'll say two.",
			"Down here, I'm going to go ahead and say H3, and I'll say three.",
			"And down here, I'll do H4, and then four.",
			"And then down here, I'll do H5--",
			"here, five.",
			"And then down here, I've ran out of paragraphs,",
			"but there is a six, so I'm going to go ahead and give myself one duplicated",
			"paragraph just for demonstration's sake so that we have all six here",
			"and go ahead and save it there.",
			"All right.",
			"So if I go back now to my browser and reload, it's looking--",
			"nothing happens because I'm in the wrong file, but if I go back,",
			"I now have a file called headings.html.",
			"Let's click that.",
			"And it's the same content, but now, it's getting a little prettier, right?",
			"It's big and bold headings, one, two, three, four-- notice",
			"those headings are getting smaller and smaller,",
			"but that's the convention in a book or an academic paper",
			"where your sections and subsections and subsubsections, get",
			"smaller and smaller.",
			"And we can customize this if we really want, but out",
			"of the box HTML gives us the ability to even format things",
			"like headings like that as well.",
			"Well, what else can we do in HTML?",
			"Well, let me go back to my IDE.",
			"Let me go ahead and copy paste some of this just to save some time.",
			"And let me create another file called, say, list.html.",
			"Turns out HTML makes it really easy to write lists.",
			"So here, let me change my title to lists.",
			"And down here, if I wanted to have a list of three things,",
			"like foo, bar, and baz, which are generic computer science terms whatever",
			"you just need placeholders like x, y, and z in math, foo, bar, and baz",
			"are what people tend to reach for.",
			"All right, I have a nice clean list there.",
			"Let me go back to my other tab, go back to my directory index here,",
			"and there's list.html.",
			"Let me click on that.",
			"And voila, same problem as Ryan identified.",
			"Again, if I don't pedantically tell the browser, start a list,",
			"continue the list, keep going, end the list,",
			"it's just going to assume that I just want one big block of text.",
			"In fact, it preserved white space.",
			"It collapsed all of those new lines and tabs into single spaces.",
			"But that's not what I want.",
			"So how can I fix this?",
			"I need some kind of additional tag.",
			"And it turns out there's a couple of approaches.",
			"There's the unordered list tag, so ul, for Unordered List,",
			"which means it's not numbered.",
			"And then inside of that, you can have child tags called the li, or List Item.",
			"Foo, let me give myself another one, bar, and give myself another one, baz.",
			"So it's more to type, and definitely there's",
			"almost as many red characters, the HTML, which",
			"is just being nicely syntax highlighted for me by the IDE,",
			"than there is actual content, foo, bar, baz.",
			"But if I now go back here and reload, I get a much cleaner, bulleted list.",
			"And if you looked at the course's website,",
			"we actually make heavy use of bulleted lists for content and indentation",
			"and so forth.",
			"We're just using a whole bunch of ul tags.",
			"If, by contrast, you wanted the computer to number of things for you,",
			"you could certainly do it like this, 1, 2, 3,",
			"but you can imagine that getting a little annoying quickly",
			"if you want to reorder things or add things in between.",
			"So computers are really good at doing tedious things.",
			"So let me change this unordered list to an ordered list using ol instead.",
			"And if I go back to the other tab, reload, voila, now it's 1, 2, 3,",
			"and it's automatically numbered for me.",
			"I don't have to worry about it at all.",
			"Well, let's do one other that speaks to the structure of the page.",
			"Let me go ahead and copy my starting point, hello,",
			"and create a file called table.html.",
			"If you ever want to layout tabular data where you have rows and columns",
			"because you want to make sense of some financial information or just",
			"something akin to a spreadsheet in your own website--",
			"well, how can we do this?",
			"Let me go ahead and call this table.",
			"And down here in my body, let me introduce the table tag.",
			"And the table tag is a little more involved",
			"because you have to define what are called table rows.",
			"So I can do a tr tag there.",
			"And then inside of table rows I can have data, so td for Table Data.",
			"Let me just put the number one.",
			"And let me go ahead and make-- let me mock up something a little familiar,",
			"like a phone keypad, 2, and 3.",
			"Then let me go ahead and copy this once more",
			"and give myself another row with, say, 4, 5, 6, and let me",
			"give myself one more of those with, how about, 7, 8, 9.",
			"And then lastly, one more of those just to give myself",
			"the equivalent of a keypad and do the asterisk and then zero",
			"and then the pound key.",
			"Let me save this, go to my other browser tab, open up table.html, and voila,",
			"you see something akin to an old-school phone keypad there.",
			"And there is implicit rows and columns.",
			"If I wanted to, I can make it a little prettier with actual lines or borders",
			"in between and around these things.",
			"But HTML gives me the ability to lay out tabular data using trs for table rows",
			"and tds for the columns therein.",
			"All right this is all pretty boring and textual, and really not the web",
			"that you and I all know, so let me go back here,",
			"and let's do something a little more interesting.",
			"Let me go ahead and start off a file called maybe image.html.",
			"And let me go ahead and start with our boilerplate as before.",
			"I'll rename this title image.",
			"And down here, let me go ahead and do something like this.",
			"Let me go ahead and do image--",
			"how about source equals quote-unquote \"harvard.jpg\".",
			"It turns out I came with an image of Harvard in my IDE.",
			"And let me go ahead and describe it as much, too.",
			"Let me add this alt attribute here, Harvard University.",
			"And we'll come back to what this means in a moment,",
			"but here we have this second tag thus far that actually shows us",
			"how to customize the behavior of a tag.",
			"So the lang attribute earlier customized the behavior of the whole web page",
			"by telling the browser here comes a web page written in English.",
			"And down here, we have two attributes, alt,",
			"which has a value after the equal sign, and then src, S-R-C,",
			"which itself has a value after the equal sign.",
			"You can use single quotes or double quotes, but you should be consistent.",
			"But each of these attributes should have an equal sign",
			"in between the key and the value there.",
			"So how might I go about doing this?",
			"Well, let me go ahead and open up this file now.",
			"Let me go ahead and reload.",
			"We should see now image.html and Harvard.jpg,",
			"which I just grabbed from my IDE.",
			"And voila, image.html is the original painting",
			"of what's adorned our backdrop here for the past several weeks.",
			"So that's interesting.",
			"You can link to a specific image like that.",
			"And what's the role of the alt attribute?",
			"So the alt attribute is all too overlooked",
			"by new and experienced programmers alike,",
			"but this speaks to accessibility.",
			"Not all of us can necessarily see and hear and interact with media",
			"in the same way as others, and so those who have difficulty with sight or with",
			"sound or the like, the alt attribute is a wonderfully powerful and so simple",
			"mechanism to include on your image tags that literally just describes",
			"in English or your own spoken language what it is a human would otherwise be",
			"looking at, even if they are perhaps blind and cannot actually see",
			"what's there.",
			"And if they have a screen reader, installed software that actually",
			"can vocalize text on the screen, this incredibly usefully",
			"helps people hear what it is that you and I might otherwise only",
			"be looking at.",
			"So be sure to be mindful of those kinds of tags,",
			"and you would only know that these tags exist by, again, taking a class,",
			"reading a book, looking at our online reference.",
			"We're just beginning to add to now our vocabulary.",
			"And in fact, let's take this one step further and do something a little more",
			"powerfully and familiar still.",
			"Let me go ahead and create a file called link.html.",
			"Let me paste my starting point there.",
			"I'll retitle this as link.",
			"The web, of course, is filled with links,",
			"and indeed, HyperText Markup Language is all about hypertext,",
			"which is an arcane allusion to links.",
			"Hypertext is text with links that link elsewhere.",
			"So how might I implement a link in a web page?",
			"Well, let me go ahead and, in this page, initially just encourage",
			"people to visit Harvard, period.",
			"Let me go back to my other browser window, open up now link.html.",
			"And of course, this does not really do anything.",
			"I can't click on visit Harvard or anything else and have it do anything,",
			"because it's obviously just text.",
			"So how can I actually link the user to some destination?",
			"Well, we need another tag.",
			"It is called the anchor tag, abbreviated with a single letter a,",
			"it has an attribute of href, for Hyper Reference.",
			"And hyper reference just means, what do you want to link to?",
			"Well, let's go ahead and keep it simple.",
			"Let's link to a file I already created, image.html.",
			"And the word I want to link is literally Harvard.",
			"So on the left of the word \"Harvard,\" I have a href=\"image.html\",",
			"on the right of Harvard, I have the close tag.",
			"And again, notice just because I had an attribute",
			"on the tag does not mean you need to redundantly copy paste it",
			"in the close tag.",
			"It suffices to close only the name of the tag.",
			"Let me save the file, go back to this page now.",
			"Let me zoom in a little bit and reload.",
			"And voila, now you see the familiar hyperlink",
			"that you might see on many web pages where it's actually underlined.",
			"And indeed, if I hover over that--",
			"if I hover over that and then click, voila,",
			"we'll find ourself at Harvard University back in 1792,",
			"because now what I'm looking at is image.html.",
			"And in fact, let me go out of full screen mode for just a moment to make",
			"clear that the URL at this point in the story where I see just Visit Harvard",
			"in the page, is something/link.html.",
			"You URL will differ from mine, but mine happens",
			"to be this long, cryptic string, because it's my account slash link.html.",
			"When I click on the link, though, notice that I end up at image.html,",
			"thereby taking me to a relative URL that is a file in my own account.",
			"If I don't want to link to that file, though-- maybe",
			"I want to link to Harvard itself.",
			"It's not sufficient to just do Harvard.edu.",
			"That is not a URL.",
			"www is not a URL.",
			"I need my protocol, so to speak, either HTTP, or, better yet, HTTPS.",
			"If I save that file now and reload and go back here,",
			"the text looks exactly the same, but notice, if I hover over it,",
			"there's a tiny, tiny, tiny, tiny little visual clue",
			"at the bottom of the screen that says where I'm going to end up.",
			"And indeed, if I click this now, notice that my URL bar is not going",
			"to stay as my IDE slash link.html.",
			"It's going to whisk me away to the actual Harvard.edu.",
			"And here, it's worth noting that Chrome and Safari and browsers, for better",
			"or for worse, are increasingly simplifying",
			"the user experience or UX of browsers.",
			"I am not literally at Harvard.edu.",
			"If you click or double-click on the address bar,",
			"you'll see where you actually are.",
			"And this is, for developers, a worse.",
			"For regular users, it's probably cleaner just to see the domain name.",
			"But all of the information is indeed there",
			"if you dig for it just a little bit.",
			"But there's kind of an exploit here, possible.",
			"There's kind of an exploit here.",
			"What if I were to do something somewhat maliciously, like this.",
			"Like, let me change this to Yale.edu leave the word \"Harvard\" unchanged?",
			"If I go back now to my other tab and reload,",
			"it looks different at the moment because it's blue instead of purple.",
			"Purple by default means I've been there before, which",
			"we were a few minutes ago.",
			"Blue means I haven't visited before.",
			"But if I don't really notice that subtlety,",
			"I might very well think that, oh, this is the university I want to go to.",
			"But voila, when I click on that, wrong place.",
			"All right, silly example, but this can really be exploited for ill purposes.",
			"What comes to mind, or what threats come to mind",
			"with this very simple mechanism?",
			"Right, now that you have the ability to make web pages,",
			"you have the ability to say you're going one place",
			"but really lead the user elsewhere.",
			"Can you see how this might be abused?",
			"Santiago?",
			"AUDIENCE: I think it maybe could be used by so-called hackers who",
			"can break in and insert malicious software into your computer?",
			"DAVID J. MALAN: Yeah.",
			"AUDIENCE: And they trick you into doing that.",
			"DAVID J. MALAN: Yeah.",
			"And \"trick\" is the operative word.",
			"I mean, most of us are probably not in the habit of opening up--",
			"before clicking on a link, hovering over it, like I did a moment ago,",
			"and then very paranoiacly, looking down here to see if--",
			"am I really going to the right place?",
			"And even this can be spoofed.",
			"You can trick the user into thinking they're going to the right place",
			"but still override this behavior.",
			"And so if you've ever been the victim of or the near victim of phishing attack,",
			"P-H-I-S-H-I-N-G--",
			"\"phishing\" refers to trying to trick humans, as Santiago says,",
			"via social engineering into doing something",
			"that they didn't actually intend.",
			"And so you can imagine receiving spam in your email inbox that says,",
			"click this link to visit PayPal.com, because you",
			"need to verify your password, or click here",
			"to tell us your social security number.",
			"This is so common these days to get emails",
			"which themselves these days are-- if they're not just text,",
			"they are HTML itself.",
			"When you're looking at any email in Gmail that",
			"has clickable links or images, that email",
			"contains HTML like we're writing here.",
			"It is trivial to trick users into going places",
			"that they didn't actually intend.",
			"And so among the takeaways for today, beyond the mechanics",
			"of how to do these things, should be consideration",
			"for your own personal security, as to how distrusting you",
			"should really be of websites because of how simple these mechanisms are",
			"and how they can lead you, indeed, to the wrong place.",
			"And recall that a bit ago, we wrote this link.html example, which",
			"had, in the correct version, a link to www.Harvard.edu whose text was the word",
			"\"Harvard\".",
			"Suppose now that we want to override the browser's default",
			"stylization of links-- which, recall, if I now visit in my other tab, link.html,",
			"is pretty boring.",
			"By default, and this has been true for like 20 years, links tend to be blue",
			"and underlined before you visit them, or purple and underlined",
			"after you visited them at least once, a visual cue.",
			"But most websites today, including CS50's own,",
			"use different colors and different aesthetics for links on a web page,",
			"with or without underlining, different colors, maybe even",
			"different background colors.",
			"You can style these things using CSS in bunches of ways.",
			"So how might we do this?",
			"Well, let's go ahead and be fair here and say Visit Harvard,",
			"or, for instance, a href=\"http://www.yale.edu\"",
			"question mark--",
			"no, nope, close bracket Yale.",
			"Let's give myself two links that, of course, if I reload,",
			"just looks like this.",
			"Both of them are now boring and purple because we've been to both places",
			"already.",
			"So let me go ahead and add a style tag up here.",
			"Just to keep us in the same file, I'm going to go back to using a style tag",
			"rather than introduce a separate file.",
			"So to keep things simple in my style tag,",
			"let me go ahead and change these links, for instance, to have a color of--",
			"maybe let's make them all red initially, ff0000.",
			"And let's go ahead and save that.",
			"Let me reload, and you'll see that now both of the links",
			"are red and underlined.",
			"I don't really like the underline, so let's get rid of that.",
			"Let's change the text decoration of my a tags to be none.",
			"And again, you would only know these properties",
			"exist from some form of reference.",
			"But again, just adding to our vocabulary.",
			"Let's reload now.",
			"And now the underlines are gone.",
			"But it would be kind of cool, like some websites,",
			"if when you hover over the link-- at least on a laptop or desktop--",
			"the link then underlines, drawing your attention all the more to it.",
			"How can we do that?",
			"Well, it turns out that you can use what are called pseudo selectors, which",
			"are-- work like this.",
			"If I want to change the behavior of the a tag",
			"but only when our user is hovering over it,",
			"you literally write the name of the tag colon hover.",
			"And then inside of this block, I'm going to go ahead and say",
			"text-decoration underline.",
			"So this will say, make everything red and not underlined by default,",
			"but when the user hovers, go ahead and decorate it with an underline.",
			"So let's go back to the file after saving, reload.",
			"No visual change yet until I move my cursor up here,",
			"and voila, now it's getting a little more like modern websites.",
			"Now, this isn't quite fair to Yale that both of the links are red,",
			"so what if we change the colors of different types of links?",
			"Well, let me go down here, and I need to distinguish these links",
			"in different ways.",
			"And I could use classes for that.",
			"But if I've only got one Harvard link and one Yale link,",
			"I might as well uniquely identify them.",
			"Let me go ahead and add an attribute called id of quote-unquote Harvard,",
			"and I'll keep it all lowercase, kind of like a variable.",
			"And that then here I'm going to say id=\"yale\".",
			"I could call these things anything I want,",
			"but because there's only one Harvard link and one Yale link,",
			"I'm going to add an attribute in HTML that just lets me verbally",
			"uniquely identify each of those links.",
			"But up here, notice what I can do now.",
			"Let me go ahead and remove the color from here",
			"and let me instead say that for any tag that--",
			"for the tag that has an ID of Harvard, go ahead and color it as ff0000,",
			"but if it has an ID of Yale, go ahead and have a color of 0000ff,",
			"so that should give me my blue in RGB.",
			"And notice the new symbol here is the hash symbol.",
			"So in the world of CSS, a hash symbol before a word",
			"means the unique identifier Harvard or the unique identifier Yale.",
			"A dot before a word means the class centered,",
			"the class large or medium or small.",
			"And if you don't have any symbol before the word, like a hash or a dot,",
			"means literally the tag called a or literally",
			"the tag called a when it's being hovered over it.",
			"So again, a few pieces of syntax.",
			"It's not programming code, but it is code of some sort here.",
			"Let me save this.",
			"Let me go back to my tab and reload.",
			"And voila, now I have the beginnings of a prettier website where",
			"I'm distinguishing Harvard with its underline in red and Yale",
			"with its underline in blue, but only under those certain conditions.",
			"So we have with CSS the ability to much more precisely control",
			"the aesthetics of our web pages.",
			"All right, let's go ahead and clarify just a couple of things here.",
			"Let me go up to one final example and see if we can't now",
			"come back to that idea of user input.",
			"So let me go back to the IDE here and let",
			"me grab a little bit of starter code from my hello file as before",
			"and create one final example here called search.html that's purely HTML indeed.",
			"I'm going to name this thing search, and then I'm",
			"going to go, down in my body of the page, use another new tag.",
			"Turns out HTML also supports a form tag, and that form tag",
			"can take a couple of attributes, one of which is action.",
			"And this is where you want to have the form lead the user.",
			"I'm going to go ahead and come back to that in just a moment.",
			"The other is method, and the method is the HTTP verb to use.",
			"For now, I'm going to use get.",
			"And here, inconsistently, it should be lowercase, even though we've previously",
			"seen it in uppercase.",
			"Inside of the form tag, I'm going to have a couple of inputs, an input",
			"whose name is going to be q and whose type is going to be search.",
			"And then down here, I'm going to have another input",
			"whose type is going to be submit and whose value is going",
			"to be quote-unquote \"search\" as well.",
			"They're a little different.",
			"I'm deliberately omitting the name because it's not strictly necessary.",
			"But where am I going with this?",
			"Well, I haven't actually implemented a search engine.",
			"All I'm doing at the moment is implementing a front end to a search",
			"engine, a front end to google.com.",
			"I'm going to let Google itself do the hard work of actually searching",
			"the data-- the internet for me.",
			"So I'm going to specify an action of www.google.com/search.",
			"So here we have what is about to be a form,",
			"text boxes and buttons that the user can interact with,",
			"the action of which is going to be to send the user to this URL using get.",
			"But that URL is going to have automatically added",
			"to it by my browser one HTTP parameter, so to speak,",
			"a variable of sorts, called q.",
			"And why this?",
			"Well, recall earlier that when I visited google.com,",
			"I was able to simulate a search by literally",
			"going to https://www.google.com/search?q=cats.",
			"I claimed that Google is designed by the software engineers there",
			"to take user input via the URL.",
			"Well, you and I do not search for things by typing out long URLs",
			"like that with q equals anything.",
			"That would be incredibly poor experience.",
			"You and I just type things into search boxes or forms.",
			"So indeed, if I now go into my other tab here for search.html,",
			"you're not going to be very impressed by the aesthetics of my form right",
			"now-- it's just a rectangular text box and a search button.",
			"But watch what happens.",
			"My URL at the moment ends in search.html.",
			"I'm going to go ahead and type in something literally like cats.",
			"And now notice, if I hit Enter or manually click on the Search button,",
			"my web page, which contains an HTML form--",
			"because it has an action that's Google's URL and a method of get,",
			"my browser is going to convert that into the corresponding HTTP request",
			"and in turn URL so that the user is automatically",
			"sent to, if I double-click on it, this full URL here.",
			"And the user's input is automatically by the browser appended to the URL via",
			"question q=cat.",
			"And it's not just cats.",
			"We now have our own very simple Google search engine",
			"where we can search for dogs, too, if we want.",
			"And notice that the URL here changes to be ?=dogs.",
			"So, like, this is how the web now works.",
			"We talked earlier about how the internet works,",
			"how you just get raw data, zeros and ones, packets of info from point A",
			"to point B. This is now how the web works.",
			"When you visit a website and don't just want",
			"a specific picture of a cat or a dog, you want to search for cats or dogs,",
			"or you want to log into a website, or you want to check out of amazon.com,",
			"providing user input, you are always filling out HTML forms",
			"which look essentially just like this.",
			"They might have more inputs and they might be a little more complicated,",
			"but they are form tag on amazon.com, on Facebook.com,",
			"on any website with one or more inputs, that when",
			"submitted, so to speak, via you hitting Enter or clicking Submit or Search",
			"or whatever the button is labeled, that's how the next request gets",
			"submitted to the server.",
			"Whew.",
			"So that's a lot, and that's not all the HTML tags out there,",
			"but that's all the ideas of HTML, right?",
			"It really is like open tags and close tags, some of which",
			"can have zero or more attributes, and just understanding",
			"that mental model, and now, via forms, we",
			"have the mechanism for submitting, so to speak,",
			"user input to search to websites, to web servers.",
			"And just to call out that other verb here,",
			"turns out Google only supports get for its search program.",
			"At www.google.com/search, you can only use get, but POST is also very common.",
			"And in fact, POST is a different verb that",
			"can be tucked inside of that envelope.",
			"And POST actually changes what happens in the browser so that q=cats",
			"and q=dogs does not show up in the URL, because this is actually one other",
			"threat to our privacy, right?",
			"If you're little sibling comes over to your browser or your parents",
			"after you've been searching on the web, they",
			"can scroll through, often, your entire history of your browser.",
			"Why?",
			"Because literally everything you search for on Google or Bing",
			"or whatever ended up in the URL because of this mechanism.",
			"And for user convenience, your browser tends",
			"to cache or save all of those URLs.",
			"Now, that's marginally intrusive, certainly,",
			"when you have roommates or family members of the like to your privacy,",
			"but it's especially concerning if you are registering for websites",
			"or checking out with usernames and passwords and credit card",
			"numbers and things that are even more sensitive.",
			"Long story short, POST, which is just a different verb that you can use",
			"in HTTP, that hides the q=cats.",
			"That hides the credit card number equals this.",
			"That hides the password equals that, essentially, metaphorically, deeper",
			"in the envelope.",
			"It does not put it into the URL bar, but it still sends it",
			"to the server a little more privately.",
			"All right.",
			"That was a lot.",
			"That was a lot of tags all at once culminating in this ability to get--",
			"to submit user input.",
			"But any questions, then, on the ideas, the syntax,",
			"or the implications of making web pages with this language HTML?",
			"Nothing from you, Brian?",
			"BRIAN YU: All good here.",
			"DAVID J. MALAN: All right, well, I'm kind of",
			"embarrassed by all of the work I've done thus far, because all of these pages",
			"are incredibly boring and very underwhelming and nowhere close",
			"to the sort of user interfaces that you and I are familiar with day-to-day",
			"when using the actual web.",
			"So let me go ahead and close most of these tabs, and let's transition",
			"to not focusing on the structure of web pages",
			"alone, but now focusing on the aesthetics of web",
			"pages, the stylization of web pages, where now your artistic flair can",
			"really come out.",
			"And we can begin to recreate user interfaces ultimately",
			"more like our world of scratch, where you actually see",
			"colors and shapes and images and sounds, but still using these basic building",
			"blocks.",
			"And for this, we need a language called CSS or Cascading Style Sheets.",
			"This, too, not a programming language, but it is an additional language",
			"that you can use in conjunction with HTML in order to stylize your pages",
			"and make them prettier.",
			"CSS boils down to the use of what we'll call properties.",
			"Properties are similar in spirit to variables, or more generally,",
			"they're just more key value pairs.",
			"And again, notice this recurring theme.",
			"Like, we introduced dictionaries or dicts in Python a couple of weeks ago.",
			"Those are just collections of key value pairs in the form of a hash table,",
			"essentially.",
			"We saw just a moment ago attributes in HTML",
			"which essentially are key value pairs.",
			"q=cats is a key equals a value. q=dogs is a key equals a value.",
			"CSS has the same idea, but because different people invented this,",
			"they call these things properties instead of attributes.",
			"But it's the same idea, just a different vocabulary.",
			"And there's going to be different ways to apply",
			"different properties, like color and font size and positioning,",
			"to HTML tags using CSS.",
			"So how do we get there?",
			"Well, it turns out that CSS is a language",
			"that you can use in conjunction with HTML,",
			"which is to say you can start with an HTML page",
			"like this, like we've already created, saying hello, title and hello, body,",
			"but you can add some additional attributes",
			"and/or tags to it to begin to stylize it.",
			"You can actually add a style tag in the head of the web page,",
			"here, pictured here, which is another thing we could put inside the head,",
			"though strictly speaking, it can go elsewhere in the body as well.",
			"Alternatively, you can link to a file in a separate file.",
			"And so we'll see a couple of different approaches there.",
			"But before we do that, let's make this more real with some concrete examples.",
			"Let me go ahead and whip up a new example",
			"here in a file called css.html just to demonstrate this new language.",
			"Let me go ahead and start, as always, with just my raw HTML,",
			"with my !DOCTYPE html.",
			"Let me go ahead and do my html lang=en.",
			"Then down here, I'll do the head of my page, the title of my page.",
			"I'll just title it simply css.",
			"The body of my web page-- and now let's actually do something interesting.",
			"Let me introduce a few more HTML tags that are available in the language.",
			"One is called header.",
			"And here, I'm going to go ahead and say something like John Harvard.",
			"I'm going to make a homepage for John Harvard, the founder of Harvard.",
			"And let me go ahead here and do a main section of my page.",
			"And I'm going to say welcome to my home page.",
			"And then down here, I'm going to have a so-called footer.",
			"And inside of here, I'm going to say copyright,",
			"and I'll write copyright symbol John Harvard.",
			"So super simple web page, three lines.",
			"And just here's three new HTML tags.",
			"You would only know this, again, from a class, a book, or an online reference,",
			"but there are tags called header, main, and footer",
			"that don't do anything special.",
			"They don't make things big and bold like the heading tags did, H1 through H6.",
			"They are just what are called semantic tags.",
			"They are more than generic paragraph tags,",
			"but they help you, the programmer, and they",
			"help the browser know that, oh, this is the header of your page.",
			"This is the main part of your page.",
			"This is the footer, which can help, again,",
			"with screen readers, distinguishing what's really important on the page.",
			"It can help with translation tools, like Google Translate,",
			"to know what you actually want translated,",
			"like the main part of the page and not less important info,",
			"like the header or footer.",
			"So just three HTTP tags, but you can think of them like paragraph tags",
			"but with more specific names.",
			"All right.",
			"So let me go ahead and save this file, open up-- not my dogs here,",
			"but go back to the index.",
			"And now I have a new file, css.html.",
			"Let's click it, and voila.",
			"You know, it's pretty underwhelming, but it does what it says.",
			"It's got three lines with this content.",
			"Let's begin to stylize this and try to make it a little more inviting.",
			"So to do this, let me go ahead and add a style attribute",
			"with equals quote unquote.",
			"Now, here's where things get a little weird.",
			"In the world of HTML and CSS, you do actually,",
			"or can actually, commingle the two languages.",
			"And we kind of saw this already.",
			"We saw Python code with SQL inside of it.",
			"Today, we're seeing HTML code with CSS inside of it.",
			"So inside of these quotes, I'm going to put",
			"some of those so-called properties, key value pairs.",
			"Let me go ahead and change the font size of my header to be large",
			"and let me go ahead and align the text as centered.",
			"Notice the pattern here.",
			"It's new.",
			"It's not equal sign.",
			"There's not additional quotes.",
			"It's because, again, left hand wasn't talking to right hand,",
			"and different people invented HTML and CSS, essentially.",
			"But font-size is the name of a CSS property, an aesthetic detail.",
			"Colon is what separates the key from the value, and the value in this case",
			"is large.",
			"And I'm choosing large because it's one of the available ones.",
			"You've got small, medium, large, extra large, and a bunch of others as well.",
			"You can also use specific font sizes or pixel sizes as well.",
			"text-align is going to align text colon in the center.",
			"Now, let me go ahead and do something similar here.",
			"On the main tag, let's do font-size medium, and then text-align center.",
			"And then down here, let's do style=\"font-size small,",
			"because it's the footer.",
			"It's less important. text-align center.",
			"All right, saving the file.",
			"And I'm sad to say the semicolons are back.",
			"They're not strictly necessary in all places,",
			"but I'm doing it for consistency.",
			"They're definitely needed here to separate keys from other keys.",
			"Let me open up this page again.",
			"Let me hit reload.",
			"And voila, it's a little prettier.",
			"It's nothing to write home about, really,",
			"but it has John Harvard as large, \"Welcome to my home page\" as medium,",
			"and the footer as something small.",
			"So that's not bad.",
			"And let me clean this up, too.",
			"This open parentheses c close parentheses",
			"isn't necessarily that pretty.",
			"I don't know where the symbol is on my screen, but let me go ahead here",
			"and let me type out this, ampersand hash 169 semicolon.",
			"This is weird, but this is a feature of HTML called an HTML entity, which",
			"is a numeric code that identifies a symbol that is often not",
			"on your keyboard but you might want to display anyway.",
			"Let me go ahead here and reload.",
			"And voila, if I zoom in, now we have a proper copyright symbol.",
			"And there's other HTML entities for other symbols",
			"as well, especially if you can't see them on your keyboard.",
			"All right.",
			"What happens after this?",
			"That's not bad, but I feel like there's an inelegance here.",
			"Can anyone recognize in the code I've written thus far,",
			"even if you've never seen HTML before--",
			"is there an opportunity for better design?",
			"I claim it's correct, but feel free to chime in the chat.",
			"Can I improve the design?",
			"And even though I said earlier that copy paste is bad,",
			"that doesn't mean we can't--",
			"or is necessary in HTML, that doesn't mean we",
			"can't chip away at it in some places.",
			"Brian, anything jumping out?",
			"BRIAN YU: Some people are saying that your style attributes are",
			"starting to get very long.",
			"DAVID J. MALAN: They are getting long, and I dare say redundant.",
			"Even though the font size is changing, so that",
			"seems kind of necessary, text-align center, text-align center,",
			"text-align center-- that seems unnecessary, right?",
			"Like, why am I doing that again and again?",
			"But here's where the C in CSS comes in.",
			"CSS is Cascading Style Sheets, which literally refers to a waterfall",
			"effect of these properties.",
			"So what I can actually do is-- let me go ahead",
			"and remove text-align center from each of header, main, and footer.",
			"And let me be a little smarter.",
			"Let me go up to my body tag, which is the so-called parent tag,",
			"for those three, add a style attribute there, and put text-align center there,",
			"and trust that because body is the parent, any properties it",
			"has will cascade down onto, so to speak, its children,",
			"thereby allowing me to define text-align in one place instead of three.",
			"Let me go ahead and reload the page, and voila, nothing has changed,",
			"but I claim now that my page is better designed",
			"because I've eliminated that redundancy and made my lines, to Brian's",
			"point, a little shorter as well.",
			"So that's pretty clean, but this seems a little bit of a slippery slope.",
			"If I wanted to make a larger home page, which surely I",
			"might, with lots more content, having all of these style",
			"attributes all over the place very quickly gets messy.",
			"And in the real world, it makes it hard for you and I",
			"to collaborate with better artists than you or I might be.",
			"It might be nice for one of us, if working on a team,",
			"maybe for even a CS50 final project--",
			"one of us does the HTML, one of us does the CSS.",
			"This would be a mess if you and I were trying",
			"to collaborate on the same exact file.",
			"So let's see if we can't take a step toward factoring these out and keeping",
			"HTML and CSS separate.",
			"So how might I do this?",
			"Well, let me go ahead here and get rid of all of this.",
			"Let me get rid of all of these style attributes, which, again,",
			"just doesn't feel very maintainable, certainly as my page gets longer.",
			"And let me transition to that other format we saw a teaser for before,",
			"a style tag.",
			"Not an attribute, but a tag that can go in the head of the web page here.",
			"And let me go ahead and do something a little different here.",
			"Let me go ahead and say my header should be text-align center.",
			"My main part should be text-align--",
			"let me do this just like we did in C--",
			"text-align center.",
			"And then my footer will be text-align center.",
			"And then just for consistency, with before, font-size large.",
			"Down here in main, font-size medium.",
			"Down here, font-size small.",
			"The IDE is not recognizing all of these keywords,",
			"but it's OK that some are white, some are blue here.",
			"So there's still some redundancy here, but notice what I'm doing now.",
			"Inside of my style tag, it is allowed to use what's called a CSS selector.",
			"And there's different types of selectors, but the one we're seeing now",
			"is what's called the type selector.",
			"And it's a bit arcanely named, but this just means that if you want to style",
			"every instance of a certain tag, every header tag, every main tag,",
			"every footer tag, you can literally, inside of a style tag,",
			"put the name of that tag, then a pair of curly braces-- apologies,",
			"they are back for CSS--",
			"and then inside of those curly braces, you just",
			"put those key value pairs, the properties separated by semicolons.",
			"And I'm stylizing it nice on separate lines",
			"just so that it's a lot more readable.",
			"The effect is not going to be any different.",
			"If I go back to my other tab and reload, nothing has changed,",
			"but I've begun to tease out the CSS from the rest of my page.",
			"But notice there's still some redundancy here,",
			"and I could remove, for instance, text-align center from here,",
			"text-align center from here, text-align center from here,",
			"and maybe apply it to the body instead.",
			"But there's other types of selectors I can use.",
			"If you want to define one or more properties in a reusable way",
			"such that you can use them on all sorts of tags, turns out CSS",
			"supports what are called classes.",
			"And I'm going to go ahead and do this instead.",
			"Instead of just saying my header is going to have a font size of large,",
			"I'm going to introduce what's called a class in CSS,",
			"the syntax for which is to use a dot and then a keyword of your own choice.",
			"And I'm going to call this first set of properties .large,",
			"this next set of properties .medium, and this next set of properties .small.",
			"And this is a little weird that it's starting with a dot.",
			"That's just because humans decided that when",
			"you define what's called a class, a reuseable set of properties,",
			"you start your keyword with a dot.",
			"And I'm going to give myself one other one.",
			".centered is going to be text-align center.",
			"So none of these classes, centered, large, medium, or small",
			"are in use yet until I now apply them to my HTML tags.",
			"So let me scroll back down to my HTML where",
			"I removed earlier all of those style attributes,",
			"and I'm going to use a different attribute now called class.",
			"I'm going to go ahead and add to this header centered large.",
			"I'm going to add class to the main tag as centered medium.",
			"And down here I'm going to say class=\"centered small\".",
			"So I can have inside of the attributes called class a value",
			"that's just a space-separated list of words.",
			"And strictly speaking, it can be any number of spaces,",
			"but that's just looks stupid and is stupid,",
			"stylistically, so just one space suffices.",
			"But this just means, hey, browser, apply the centered class and the medium class",
			"to the following contents.",
			"And again, if I go back to the tab and reload, nothing, still, has changed.",
			"I'm just changing the design.",
			"I'm hopefully improving the design.",
			"But here, too, you can probably note that using centered again and again",
			"is also, again, dumb.",
			"Let me remove that redundancy.",
			"Let me add to my body a class of centered.",
			"And now things are getting a little tight.",
			"Like, I've reintroduced some attributes, but now,",
			"if I'm collaborating with someone, I can say,",
			"can you go ahead and create me CSS classes for large text, medium",
			"text, small text?",
			"I'll just assume that you're going to do that correctly,",
			"and I can just use those terms, those classes,",
			"and assume that you have defined code in CSS like this stuff here.",
			"But you know what?",
			"I can do one step better.",
			"I don't need you to even touch this same file.",
			"You and I can work pretty independently.",
			"In fact, let me go ahead and propose this.",
			"Let me highlight all of the code I just wrote up here and cut it.",
			"Let me get rid of this style tag all together.",
			"Let me create a new file called, let's say, styles.css, just by convention,",
			"but I could call it anything I want .css, paste it into there, and save it.",
			"And let me go ahead and--",
			"I don't need any of the indentation anymore,",
			"so let me just shift everything over there using a fancy keyboard shortcut.",
			"This could be the file you're working on.",
			"You create all of these properties and these classes for me",
			"in a separate file.",
			"Then in my HTML file, if you and I are collaborating, I can use a link tag--",
			"a hyper reference value of styles.css, the relationship of which",
			"is that of stylesheet to your file.",
			"Now, here's where you just kind of have to throw up your hands.",
			"In an ideal world, we would have called links in web pages the link tag,",
			"and we wouldn't have used open bracket a for anchor.",
			"This is not a link in the clickable sense.",
			"This just means link this HTML file to this CSS file",
			"with a relationship of stylesheet.",
			"What is the stylesheet?",
			"It is a sheet of styles.",
			"It is a file of properties.",
			"And those properties can be inside of types or classes or what we'll soon see",
			"are unique IDs as well.",
			"And there's other types for that as well.",
			"But here we have, now, arguably, the best-designed version",
			"in that this is pretty compact.",
			"It's pretty succinct.",
			"There's only HTML and HTML values and attributes,",
			"but all the CSS is in this second file.",
			"Now you and I can really collaborate independently.",
			"Any questions then on CSS and what we can do with it?",
			"We have only scratched the surface of CSS thus far, but suffice it to say--",
			"and actually, just to tease just how bad at this I might be,",
			"suppose you really want to have a colorful background.",
			"Well, let me go into my CSS file here, styles.css,",
			"and I don't have to use only classes.",
			"I can say something like, well, let's go ahead",
			"and make my body tag have a background color of--",
			"how about red semicolon?",
			"Let's go back to the browser, reload.",
			"OK, it's getting ugly pretty fast.",
			"Let me go ahead and change the color of my text",
			"maybe to white to make it stand out a little more on the red.",
			"Reload.",
			"All right, it's back to something there.",
			"I can change this to any color, maybe a little Yale blue over here.",
			"Reload.",
			"Voila, it's now blue.",
			"Or if you really want to be fancy, per week four, how about we make it 00ff00,",
			"speaking hexadecimal, which, of course, is going to make it green for me",
			"instead?",
			"So this is to say there's so many different CSS properties out there.",
			"And again, we're focusing here only on the list--",
			"the ideas.",
			"When it comes time to actually using these properties,",
			"we'll point you at the appropriate reference, just to flesh out your vocab",
			"all the more.",
			"All right.",
			"Any questions, then, on the capabilities of CSS and its relationship with HTML?",
			"Anything on your end, Brian?",
			"BRIAN YU: All good here.",
			"DAVID J. MALAN: So the one thing we haven't done any of today at all",
			"is programming.",
			"And for that, we actually need a third and final language, that of JavaScript.",
			"And in the past weeks of the course, we've",
			"used what we would describe as really server-side programming.",
			"You have written C code.",
			"You've written Python code on the server,",
			"specifically on CS50 IDE, which is, by nature, in the cloud, a server.",
			"But it turns out that all this time you haven't really",
			"been using your own Mac or your own PC or your own phone,",
			"for that matter, other than it's just a very expensive display, a very",
			"expensive screen.",
			"All of the code is written, all of the code",
			"is running, on this backend server.",
			"And that's a missed opportunity, because all of your users, all of your friends,",
			"all of us are on our own pretty fancy Macs and PCs or phones these days.",
			"It's kind of a shame that those devices all",
			"have CPUs and RAM and storage space, yet we're not",
			"using any of those capabilities.",
			"We're really just using the glass screen to see what's elsewhere on a server.",
			"But with JavaScript, we have another language",
			"that we'll see in a bit that will allow us to write code, save it",
			"on the server, but run it on users' computers",
			"and do what's called client-side programming, so we'll still",
			"save the code we write on the server, but we're going to include the code",
			"inside of these virtual envelopes that get downloaded by users' browsers,",
			"and instead of just reading the code, top to bottom, left to right,",
			"and displaying information, as is the case with HTTP and CSS,",
			"will additionally read the JavaScript code deeper in the envelope",
			"and execute that on users' Macs and PCS and phones.",
			"And here's where web programming gets really interesting, because you now",
			"have a full-fledged computer at your disposal that's not even your own.",
			"So let's go ahead and take another five-minute break here,",
			"and when we come back, we'll conclude with a look at JavaScript.",
			"All right.",
			"We are back and we're about to introduce a programmatic way of controlling web",
			"pages and even adding to web pages and changing the content",
			"users see, thereby making our websites no longer just static--",
			"that is, written once and viewable the same way forever,",
			"but dynamic, somehow changing in response",
			"to user interactions or user input.",
			"Let's go ahead and now consider how we can make our pages all the more dynamic",
			"by introducing JavaScript.",
			"So let's go ahead quickly and introduce just some of the syntax of JavaScript.",
			"And wonderfully, JavaScript syntactically",
			"is pretty similar to C and Python, a little more syntactically similar to C,",
			"but there's no memory management.",
			"There's no pointers.",
			"So it's kind of like somewhere in between C and Python syntax.",
			"But it should all come fairly familiar--",
			"fairly easily now.",
			"In Scratch, recall when we had a variable called",
			"counter initialized to zero, how do we now declare the same in JavaScript?",
			"It's going to look like this.",
			"So it's not quite Python.",
			"It's not quite C. You literally use the keyword let, which",
			"means let the following variable exist.",
			"The variable's called counter = 0;.",
			"Strictly speaking, these semicolons aren't always necessary,",
			"but for consistency, I'll keep using them here.",
			"Suppose you want to change the counter by one, as",
			"in Scratch, incremented by one.",
			"In JavaScript, you can do it very verbosely like this.",
			"You can do it a little more succinctly like this, like in Python in C,",
			"or the plus-plus is back.",
			"So if you've been missing that in Python, the-- as Nicholas seems to be,",
			"the plus-plus is now back as well.",
			"How about something like this, a condition?",
			"So if you want to say if x less than y, in JavaScript,",
			"it's going to say if x less than y.",
			"So here, we have the curly braces are back.",
			"The parentheses are back.",
			"But the ideas are still the same.",
			"If else in Scratch looked like this.",
			"In JavaScript, it's going to look like that.",
			"In Scratch, if else if else looks like this.",
			"In JavaScript, it's going to look like this, so more like C.",
			"There's no weird l if abbreviation.",
			"It's literally else if again, but with the parentheses",
			"and with the curly braces.",
			"And honestly, if you get hung up early on in these next few weeks-- like,",
			"these are the stupid details of learning some new language.",
			"You've got to develop the muscle memory.",
			"You've got to start remembering what language is what.",
			"But don't stress when you get hung up on curly braces and parentheses.",
			"Like, those things have never fundamentally mattered,",
			"but they do, of course, matter to the computer.",
			"But not to us, certainly intellectually, as we",
			"introduce the new compelling features of this language.",
			"How about something like a for loop or while loop, for that matter?",
			"In Scratch, if you wanted to do something forever,",
			"you can convert that now in JavaScript, similar to C, while true,",
			"or while any expression is true.",
			"If you want to repeat something three times, almost the same as C,",
			"but I'm using let here instead of int.",
			"So JavaScript, like Python, is loosely typed.",
			"It has types, but you, the programmer, don't",
			"need to stress over specifying them.",
			"The computer will figure it out.",
			"So let is how you would declare a keyword.",
			"And with that said, there are other ways to declare variables in JavaScript,",
			"including constants, but for now, we'll keep things simple",
			"and focus only on this keyword here.",
			"So here's that page again and the tree representation thereof.",
			"And this tree is useful only as a mental model",
			"for what the computer is doing inside of its memory after having loaded a page.",
			"With JavaScript, now, we have the ability",
			"to change this tree in real time.",
			"When the user clicks something, drags something, types something",
			"in, with JavaScript, we will now have a programming language",
			"that allows us to mutate this tree in real time,",
			"thereby making our pages no longer static or fixed in one state,",
			"but dynamic and changing instead.",
			"So how might we do this?",
			"Well, let's consider exactly where we can",
			"go about writing some JavaScript code.",
			"We can do that by adding a script tag in the head like this.",
			"Strictly speaking, it can also go in the body like this,",
			"and there are some logical implications of those choices.",
			"Or we can even factor it out to a file like scripts.js,",
			"just as we did with CSS.",
			"So even though the tag is different, it's scripts,",
			"and the attribute is different.",
			"It's source.",
			"And it's stupidly written like this.",
			"If you are using an external file, you literally",
			"close the tag, even though there's nothing inside of it.",
			"That's one of these--",
			"a reality of using this particular tag.",
			"Well, let me go ahead and propose that we",
			"write an actual program in JavaScript.",
			"Let me go back over to my IDE.",
			"Let's create a new file called--",
			"actually, let's go ahead and open up our old one, hello.html,",
			"and let's make it interactive.",
			"Rather than say hello, body all the time,",
			"let's see if we can't make it say a little something to me and to you.",
			"So down here in the body of my page, let me go ahead and change this",
			"and do something like this, form, close form, input--",
			"how about let's do ID of quote-unquote \"name\", and type is going to be text.",
			"And then let me go ahead and give myself a submit button, type=\"submit\".",
			"So super simple.",
			"The only difference now is I want a generic text box.",
			"I don't want one that's specific to searching.",
			"And I want a submit button, a generic one.",
			"I don't care what it says.",
			"Let me go back to my other tab, click hello.html,",
			"and we have a form similar to the Google search example,",
			"but now, I am going to use a web form in my own HTML file",
			"to interact with the user, because after all, this",
			"is how humans interact with web pages, typically, is via these forms.",
			"I want to enable the user to type in their name, click Submit,",
			"and then I want my web page now, not Google, to say Hello, David, Hello,",
			"Brian hello to whoever types this in.",
			"So I'm not going to use a form in quite the same way as before.",
			"There's not going to be an action, because I'm not",
			"going to send it to Google.",
			"I'm not going to send it anywhere else.",
			"I'm going to write code that's entirely client side in the browser itself.",
			"So what do I want the form to do?",
			"When this form is submitted, I want it to call a function called greet.",
			"And at the moment, this is a little messy.",
			"We're going to clean this up in a moment.",
			"But there is this attribute in HTTP called alt onsubmit, the value of which",
			"is not HTML per se.",
			"It's not CSS.",
			"It's now JavaScript code.",
			"I want to call the function called greet.",
			"This function doesn't exist yet, but it will soon.",
			"How do I go about doing that?",
			"Well, let me go ahead and go up here and add my script tag.",
			"And up here, let me go ahead and define a function in JavaScript.",
			"It's a little similar to C. It's a little similar to Python.",
			"You literally, though, in JavaScript say function.",
			"You write the name of your function and the arguments in parentheses.",
			"And then in curly braces, you define the function.",
			"I'm going to go ahead and just say alert quote-unquote 'hello, body' for now.",
			"I'm going to keep it simple and just goofily output hello, body.",
			"And because this form, by default, as with all forms,",
			"typically does gets submitted to a server,",
			"I'm going to add one other curiosity.",
			"I'm going to say return false also inside of this onsubmit attribute.",
			"So I realize things are escalating quickly here because there's",
			"a lot of pieces in motion, but focus again on the basics.",
			"The attribute is onsubmit.",
			"What do you want to do when the user submits?",
			"I want to execute these two lines of JavaScript code called",
			"the greet function and then return false.",
			"Return false in this context means don't submit the form.",
			"Call the function, but don't submit the form anywhere.",
			"I just want to use it as a client-side tool for interacting with the user.",
			"I don't need to send it to the server or to Google to anyone else.",
			"Let me go ahead now and specify this.",
			"I deliberately gave this text field an ID of name,",
			"but we'll use that in just a moment.",
			"Let me go over to my other tab now, reload, because I've made changes.",
			"I can type in David, but I'm going to be ignored for the moment.",
			"But when I click Submit now, notice, it's not the best user interface,",
			"but there is an alert on my screen from my specific URL that says hello, body.",
			"But I'd like it to say hello comma David.",
			"So how can I do that?",
			"Well, let me go back into my code here and let me go ahead",
			"and define a variable called name, but I could call it anything I want.",
			"And let me use this special function, document.querySelector().",
			"And this is a function that comes with JavaScript that",
			"allows you to select any HTML element.",
			"But you need to be able to identify it using some kind of selector.",
			"And here's where, for better or for worse, CSS and HTML and JavaScript",
			"start borrowing ideas from each other.",
			"If I want to get the value of the user's text box,",
			"I bet I could give it a unique ID, like quote-unquote \"name\",",
			"and I can select it by using my CSS syntax of name.",
			"And once I've selected that HTML element, so to speak, that tag,",
			"I'm going to go inside of it and get its value.",
			"So this syntax is a little familiar, a little unfamiliar.",
			"We've seen the dot notation before in C when it came to structs.",
			"We've seen the dot notation in Python when it came to libraries, like the CSV",
			"library.",
			"We're using it in a similar way.",
			"Document is this special global variable that",
			"just comes with JavaScript in the browser,",
			"and it gives you access to all things related",
			"to your document, your web page.",
			"querySelector is a function that comes with that document",
			"that Google and Microsoft and Apple wrote for you called querySelector",
			"whose purpose in life is to take a CSS selector in quotes",
			"that identifies one or more nodes that is nodes from the tree.",
			"And this tree actually has a name, though I've not used it before.",
			"This tree that we keep referring to is technically",
			"called a DOM, a Document Object Model, which",
			"is just a fancy way of saying that document, this global variable,",
			"gives you access to this DOM, this tree.",
			"So when you call document.querySelector, that induces your browser for you",
			"to search the whole tree, all of those nodes and parents and children",
			"and grandchildren and so forth-- all of those nodes,",
			"looking for the one with the unique identifier of name",
			"and then looking inside of that node, inside that rectangle, if you will,",
			"getting the actual value that the human typed in.",
			"So if I want to now output this value, I'm",
			"just going to use some old-school concatenation.",
			"Let me add to that string, hello name.",
			"And I can use double quotes.",
			"I can use single quotes.",
			"Does not matter so long as you're consistent in the JavaScript world.",
			"For whatever reasons, the convention tends to be single quotes if only",
			"because you can type it almost twice as fast because you don't",
			"have to hold the stupid Shift key to type a double quote--",
			"or to type a single quote as you would a double quote.",
			"All right.",
			"Let me go back to this page, reload, because I've made changes.",
			"Let me type in my name again.",
			"Autocomplete is popping up nicely.",
			"Click Submit.",
			"And voila, Hello, David.",
			"The user interface is still kind of lame, but it's at least now dynamic.",
			"And I can type in anyone's name, as you could, Brian, Submit.",
			"Hello, Brian.",
			"And you can change other things about the web page.",
			"And some of this is just implementation details,",
			"but recall that you can give a button a value,",
			"and you can say something like greet me.",
			"Now, if I go back here and reload, my button now says greet me.",
			"Turns out that your input for text can have a placeholder,",
			"like what's your name, and then saving that file and reloading,",
			"you see in grayed-out text a prompt on the box that's not actually there,",
			"because once you start clicking, it goes away.",
			"I can also disable that somewhat annoying autocomplete by saying",
			"autocomplete=\"off\".",
			"And then I can go back to my page and reload, and now notice,",
			"even when I click in there, it doesn't autocomplete,",
			"which is maybe good for privacy's sake.",
			"And notice, too, I can do one other thing.",
			"Let me go ahead and add autofocus.",
			"Notice that every time I reload the page, I had to click in the box.",
			"But now when I reload the page, the cursor",
			"is already there, blinking and ready to go, thereby saving your users one step.",
			"So again, another vote in favor of accessibility and usability",
			"by just putting the user where they probably want to be anyway.",
			"All right.",
			"Any questions thus far on this introduction of JavaScript",
			"by way of this function greet inside of our new script tag",
			"and using this new onsubmit attribute that calls that function",
			"and then short-circuits the form submission by just saying return false,",
			"call the function but don't submit the form to the server,",
			"like we did with Google?",
			"All right, well, let me-- at the risk of making it look more complicated,",
			"let me make it more complicated, but in a way",
			"that will be familiar over the next couple of weeks",
			"when you've seen more and more examples and you've used third-party libraries--",
			"you've seen some building blocks.",
			"We would not expect you to write this week, tonight, based on these examples,",
			"but just to give you the mental model for how JavaScript is typically",
			"written.",
			"So this with, like with CSS, tends to be a little poorly designed.",
			"When you start commingling your languages,",
			"like, ugh, that makes it hard to collaborate with someone else.",
			"It makes it hard to maintain one language independent of another.",
			"So it tends to be a good thing to keep these things separate.",
			"And that's not always the case.",
			"There's actually now a trend, especially in mobile app development,",
			"of putting these things back together.",
			"But this tends to keep things clean, at least when we're first starting out.",
			"So let me go ahead and actually go ahead and get rid of my code up here for now.",
			"And let me go ahead and get rid of this onsubmit handler.",
			"And let me go ahead now and down here--",
			"actually, up here, give myself a script tag.",
			"And let me go ahead and do the same thing a little differently.",
			"document.querySelector--",
			"this time, let me select the form.",
			"And I'm not going to bother giving it a name.",
			"There's only one form, so if I just select form, that'll give me my form.",
			"And let me use this fancy function, addEventListener.",
			"It turns out that the world of web programming",
			"is filled with what we would call events.",
			"When you click on a page, that's an event.",
			"When you drag on a page, that's an event.",
			"On a phone, when you touch a page, that's an event.",
			"Turns out, using JavaScript, you now, the programmer,",
			"can write code that listens for these events",
			"and responds to them by doing something.",
			"So I'm going to go ahead and add an event listener on my form that's",
			"listening for the Submit event.",
			"What do I want my code to do when the form is submitted?",
			"I want to call the greet function.",
			"All right, for the greet function to work, I need to reintroduce it.",
			"So let me quickly whip up the greet function.",
			"Let me go ahead and do an alert of hello and then plus name.",
			"I need to get the name node, so let me say let name = document.querySelector.",
			"",
			"And now let me go ahead-- and I still have the ID there,",
			"so let's say quote-unquote hash name dot value.",
			"So I think greet now exists.",
			"But now this line of code, notice, does this.",
			"It says, hey, browser, find me the form, then",
			"add an event listener listening for the Submit event,",
			"and when that event is call--",
			"when that event happens, call this function.",
			"This is very similar--",
			"well, somewhat similar to our lambda example last week",
			"when we passed a function into the sorted",
			"function so as to tell what to sort by value instead of by key.",
			"Remember that syntax when we define a function just to help us sort things.",
			"Notice that I do not want to call greet.",
			"I do not want to call greet on line 13.",
			"I want to tell the browser to call greet when it is ready.",
			"Therefore, I pass the function in by name.",
			"Let me go ahead now and save and reload.",
			"OK, nothing visually has changed, but when I type in David and greet me--",
			"[GASPS] huh.",
			"Nothing happened.",
			"Let me say David.",
			"Greet.",
			"Nothing happened.",
			"When in doubt, if something's acting up, let's",
			"go back to those developer tools, Developer, Developer Tools.",
			"And let's not look at network, but look at console.",
			"And here is where your new friend is going to show you all of the mistakes",
			"that you've made in JavaScript code.",
			"Just like in Python and C, you see the errors in your terminal window.",
			"Because JavaScript is being run on the client's side, in the user's browser,",
			"you can't just look at your terminal window.",
			"There won't be any errors there.",
			"You need to look in your own browser if you're the one testing things.",
			"And sure enough, notice here, cannot read property addEventListener of null.",
			"So this is a subtle one, but I did it deliberately, because it's so common--",
			"and I promise I did it deliberately.",
			"Let me go back here and point out this.",
			"Browsers are pretty naive.",
			"As fancy and as powerful as they seem to be getting,",
			"they still take us literally, just like Python and C did, top to bottom,",
			"left to right.",
			"And if on line 13 I am saying query for the form tag,",
			"but the form tag doesn't exist until line 21, it's not going to work,",
			"and therefore the error message I'm seeing makes sense.",
			"You cannot read property addEventListener of null.",
			"Where is null coming from?",
			"Form is currently null as of line 13.",
			"It does not exist until line 21.",
			"So how do we fix this?",
			"Well, one way, the quick and dirty way, would be, well,",
			"let's just move this down below, inside of the body now but below the form tag.",
			"And I think this will work.",
			"Let me go ahead and reload now.",
			"The error goes away, but I haven't done anything yet.",
			"Let me click in the box and say David, greet me.",
			"OK, it's back to working.",
			"But much like in Python and C, this is kind of a slippery slope.",
			"Like, the solution to our problems can't just be, well, move it down.",
			"Move it down.",
			"There's got to be a better way.",
			"Similar in spirit to prototypes, but not quite in the same way.",
			"The way JavaScript handles this problem is as follows.",
			"If I undo that and go back to the top where I have my script now,",
			"I can actually do this instead.",
			"I can do something like this.",
			"I can do this document.addEventListener--",
			"and this is a weird one-- but DOMContentLoaded,",
			"call this function listen.",
			"And let me go here and give myself a second function, function listen.",
			"And inside of this function will be that one line of code.",
			"So I've got two functions now, one of which",
			"handles the greeting, no changes there, a new one called",
			"listen whose purpose in life is just to add that event listener.",
			"That's all.",
			"But notice here on line 18, now, I'm adding an event",
			"listener to the document itself saying when the DOM content is loaded-- that",
			"is to say, when this whole tree has been loaded",
			"and therefore the form tag has been loaded and everything else,",
			"go ahead and call the listen function.",
			"The listen function is just going to add another listener to the form",
			"tag listening for submissions.",
			"And so now, if I go ahead and save this, reload,",
			"I'll keep my developer tools open, and type in David and greet me,",
			"still works, but I haven't had to do this stupid resort",
			"of moving my code down to the bottom and solving the problem that way.",
			"I'm just telling the browser, don't do the following",
			"until the DOMs content has loaded.",
			"All right, questions on any of this?",
			"And this is absolutely the more--",
			"the most sophisticated, I think, of the syntax and the logic we've done today.",
			"But again, we're just planting the seeds for understanding this in the weeks",
			"to come.",
			"No?",
			"Well, let me go ahead and blow your minds",
			"with one other feature of JavaScript that",
			"actually has similarities with Python.",
			"Recall that any time we define a function in one place and then",
			"use it in one place, that's generally been kind of lame.",
			"Like, why are you bothering to create a function, adding lines of code",
			"to write a function that you're only going to call once?",
			"Last week with Python recall that--",
			"two weeks ago, with Python, recall we defined a function f,",
			"and then we said, no, no, no, this is stupid,",
			"let's just use a lambda function, an anonymous function, basically,",
			"because it's only being used in one place.",
			"So this is going to be the ugliest we see, but here we go.",
			"If I know that I want to call a function called",
			"listen when the DOM's content is loaded, I",
			"don't need to give that function a name.",
			"I can actually just put the function right there.",
			"I'm going to literally copy and paste this over here.",
			"Let me remove the excess white space here.",
			"Let me go ahead and now point out--",
			"and I'm going to do this a little stylistically differently,",
			"just to be consistent with what other people do.",
			"Notice now I've done this.",
			"I've literally moved that function as the second argument",
			"to addEventListener, and I don't need its name at this point.",
			"I'm going to go ahead and just do this.",
			"The equivalent in JavaScript of a lambda function",
			"is to literally just say function with no name",
			"and still have open parentheses, with or without a space in between them.",
			"And so what this is now saying a little more elegantly,",
			"even though more cryptically, on the document object, your global variable,",
			"add the event listener listening for the DOM content loaded.",
			"Well, what do you want to do when the DOM's content has loaded?",
			"Call this anonymous function, otherwise known as a lambda function.",
			"But notice what we're going to do.",
			"We're going to query for the form and we're",
			"going to add an event listener on Submit by calling the greet function.",
			"Well, we don't need to do that.",
			"Let's go ahead and remove that.",
			"Let's go ahead and delete the greet function name and get rid of it.",
			"Let's make one more anonymous function.",
			"Let me paste this in here.",
			"I've got to clean up my formatting real quick, so let me go ahead",
			"and remove some whitespace here, remove the function name,",
			"put my curly brace over there, get rid of this one",
			"here, indent that, indent this, close this.",
			"Whew, scary looking, to be sure, or at least cryptic looking,",
			"or maybe delightful, depending on whether you like this kind of thing.",
			"But again, it's just basic building blocks, right?",
			"In Python, you can define functions that don't have names.",
			"That's great because if you want to pass one function to another function,",
			"you can literally just write the code using the supported syntax, which",
			"in JavaScript does not use the word lambda, but to use the word",
			"function no name but still parentheses, and then",
			"making sure it's still well-formed function with an open curly brace here",
			"and a closed curly brace here, you can then write out your code.",
			"And the only reason I have this other parenthesis over here",
			"is because I'm already inside of a function called addEventListener.",
			"So again, if uncomfortable with that--",
			"not a problem, certainly at this stage.",
			"But again, we're just now stacking these different ideas on top, on top,",
			"on top of one another.",
			"All right, well, let me show you now a premade example that shows you exactly",
			"what you can do now with these events.",
			"Here's a nonexhaustive list of events that you",
			"can listen for in a browser, not just things",
			"like submitting, but also clicking and dragging,",
			"key pressing, moving your mouse over, moving your mouse down,",
			"the button up and down, touching and moving, and other such events.",
			"There's this whole list of events that you can do such that you can actually",
			"do things like this.",
			"Let me go back to my IDE, and let me open up a premade example,",
			"this one called hello5.html.",
			"And in hello5.html, I've got this example already",
			"that-- it's just doing a few things.",
			"It's listening for DOMContentLoaded, but it's then listening for key up.",
			"And what's it going to do with key up?",
			"Well, let's see.",
			"Let me go over here into my index.",
			"I'm going to close the debugging tools.",
			"Let me reload my directory index here.",
			"And that gives me this other file in source eight called hello5.html.",
			"Now, notice here, I'm going to go ahead and type in David--",
			"oh.",
			"Notice, the web page itself is immediately interacting with me,",
			"and as soon as I delete it, it says, hello, whoever you are.",
			"So with JavaScript, you have the ability even",
			"to change the contents of the web page, not just by throwing an ugly alert.",
			"You can use code like you see here, which we won't get into the details of,",
			"but allows you to change the page itself.",
			"And notice here-- this is kind of ugly-looking syntax.",
			"You don't even have to concatenate.",
			"Just like Python has f strings, in JavaScript,",
			"you can use backticks plus a dollar sign and stupid curly braces",
			"and do the same thing.",
			"And I'm showing some bias here.",
			"Stupid syntax, I think, but same exact idea as it was in Python.",
			"And again, these are the kinds of things that will trip you up",
			"early on, inevitably, but again, as you get more comfortable with the language,",
			"all of the ideas will outshine the particular syntax.",
			"All right.",
			"Let's look at a few other premade examples",
			"just to give you a sense of the capabilities of JavaScript.",
			"Here's a program called background.html.",
			"And this web page you'll see is going to have three buttons.",
			"It turns out you can implement buttons on a web page in different ways.",
			"You can literally use the button tag.",
			"Down here, I have a whole bunch of code using querySelector",
			"again, but more powerfully, notice what you can also do.",
			"If you go ahead in JavaScript and select your body",
			"by saying document.querySelector body, you",
			"can actually then access a special variable inside of the page's body--",
			"or any tag for that matter-- called style.",
			"And then you can change, with JavaScript, the style of a CSS property",
			"using code.",
			"And unfortunately, left hand was not talking to right hand.",
			"In CSS, it would be background dash color, as we saw.",
			"Unfortunately, in JavaScript, a proper programming language,",
			"this would be background minus color, like literally arithmetic.",
			"So the world decided that any CSS properties with hyphens",
			"would instead become something like background capital color",
			"to distinguish the two.",
			"But it's the same exact idea.",
			"If I go now into this file here, background.html--",
			"well, now I have a very simple page with three buttons, R, G, and B.",
			"But notice when I click on them, I have defined in advance,",
			"I claim, some event listeners for click.",
			"And every time I hear the click, I change the CSS of the page.",
			"And if this weren't cool already, let me open up View, Developer Tools,",
			"developer tools here.",
			"Notice the third and final tab today is elements.",
			"No matter how ugly your HTML is, the developer tag--",
			"the developer tools elements tab will always",
			"show it to you in a very pretty, printed, colorful fashion.",
			"But it will also show you the actual CSS as it's changing in real time.",
			"So let me reload the page.",
			"By default, notice the whole page has a white background.",
			"And notice down here, indeed, the body has no style attributes on it.",
			"But if I zoom out for a moment and now click R,",
			"watch the HTML on the bottom of the page.",
			"Chrome just dynamically added background-color red.",
			"If I click green, background-color green is now there, and blue--",
			"so using these developer tools, you can interact with your own website",
			"and see what's changing in the DOM.",
			"We are changing in real time the attributes of this tree,",
			"thereby making the page all the more dynamic.",
			"This is powerful, too.",
			"Let me go to Harvard.edu, for instance, open up developer tools,",
			"and notice here, we can see all of Harvard.edu's HTML in the Elements tab.",
			"Notice it's a lot of HTML here, but there's",
			"all of these triangles that expand it--",
			"rather, that collapse it, just to make it more succinct.",
			"If you want to look at specific things, let's go ahead",
			"and say something like this.",
			"Let's see.",
			"What could be fun to change here?",
			"How about this?",
			"I'm going to go ahead and right-click or Control-click on About Harvard,",
			"because this I'm finding not what I want.",
			"It's going to automatically open in the Elements tab",
			"the actual HTML that Harvard used to create About Harvard.",
			"It's got some other tags here.",
			"Span is another thing.",
			"It's like a mini paragraph, all on one line.",
			"Class we've seen before.",
			"I don't know what lg-nav-txt--",
			"it's probably large navigational text that Harvard invented as a class name.",
			"But notice what I can do here.",
			"How about we change this to Yale and then hit Enter?",
			"And voila, hacking Harvard.edu.",
			"So of course understanding what's going on here is important.",
			"I'm only changing my local copy of Harvard.edu",
			"that's been downloaded onto my page.",
			"If you go to Harvard.edu now, those changes are not persistent,",
			"so it's not hacking per se.",
			"But this is really, too, how you can learn how to design web pages.",
			"If I go to Yale.edu, I can similarly look at all of Yale's HTML and change",
			"things here.",
			"Let me right-click on About Yale.",
			"Click on Inspect.",
			"Let me go ahead and change this to Harvard, Enter.",
			"And I can be really malicious, too, but only on my own machine.",
			"Notice over here at right, in the developer tools,",
			"you can see all of the CSS styles that are currently",
			"being applied to that particular tag.",
			"And notice this.",
			"If I change color down here at top--",
			"bottom right, let me change it to ff0000 and hit Enter.",
			"Voila.",
			"I've changed all of Yale's tags along that row to be red.",
			"So this isn't, again, about hacking some website,",
			"because it has no effect on the actual server,",
			"but it is so much easier and faster to fine-tune your own page's aesthetics",
			"by just using your browser, tinker with things,",
			"try new properties, and so forth, and then when you're ready to save it,",
			"then go into your text editor and type out",
			"or copy paste those particular attributes.",
			"What else can we do?",
			"Well, let me show you a few final examples here, too.",
			"Let me go ahead and go into size.html.",
			"Notice here-- here's some sample Latin text in an initial font size,",
			"but I'm using a little drop-down menu that you see commonly on web forms.",
			"Let me make the text larger.",
			"Let me make it extra, extra large.",
			"This is just using JavaScript, listening for change events to this drop",
			"down menu, and correspondingly changing the style's size",
			"of that particular paragraph of text.",
			"Let me do this other thing.",
			"Back in my day when I learned HTML, HTML 1.0--",
			"we're up to five now--",
			"there was literally an HTML tag called blink and that would literally do this.",
			"My first home page probably greeted visitors",
			"with, like, \"Welcome to my web page\" in this hideous, hideous blinking",
			"aesthetic.",
			"But with JavaScript, we can do the same thing.",
			"And let me go open and-- oh, let me go ahead and open Inspect here.",
			"And let me move this up here and zoom in.",
			"Notice what's happening.",
			"I wrote some JavaScript code in this file",
			"called blink.html that every half a second or second",
			"is changing the style of my body to be visible or hidden, visible or hidden.",
			"And if you want a little teaser of that, if I actually look at that HTML",
			"in blink.html, that's because in JavaScript there's",
			"this cool function called window.setInterval",
			"that lets you call a function every number of milliseconds.",
			"So if I were to change this to be even faster--",
			"let's do it every 100 milliseconds and save and reload,",
			"you'll see now it's flashing even faster.",
			"So you can do things again and again by registering",
			"these kinds of intervals in code.",
			"Even cooler, let me go ahead and grab another URL here.",
			"And just because of my browser's settings,",
			"I'm going to go ahead and open this one in Safari instead of Chrome right now.",
			"This is called geolocation.html.",
			"In this file, we've written some code in advance",
			"that's actually going to try to figure out where in the world you are.",
			"And notice, for privacy's sake, we can't just",
			"presume to figure out where you all are.",
			"We're instead going to prompt you, like this-- the browser is",
			"going to do that for you.",
			"I'm going to go ahead and allow this query.",
			"And voila, this file, geolocation.html, just prints out your GPS coordinates.",
			"Not particularly interesting, but if I go to, like, Google Maps,",
			"I can literally search for those GPS coordinates.",
			"And if you're curious as to where I am right now at this moment--",
			"that's not me, but if I go into satellite mode and zoom in,",
			"we are indeed roughly and that part of the American Repertory",
			"Theater on Brattle Street in Cambridge, Massachusetts, USA.",
			"So pretty creepy that using JavaScript, you can even",
			"figure out where your users are.",
			"Now, creepy at first glance, but if you've used Uber Eats or Grubhub",
			"or really any website, like, for the weather that",
			"asks you for your location, how is it doing that?",
			"Well, the programmer of those websites has written some code,",
			"as we did in geolocation.html, that has a line of code like this,",
			"navigator.geolocatio n.getCurrentPosition,",
			"and then it's a function built into your browser that,",
			"with the user's permission, will tell you the user's latitude",
			"and longitude, using, again, just some built-in functionality to the browser.",
			"And then one final example here in JavaScript.",
			"It turns out that you can implement autocomplete in an even fancier way.",
			"In advance of today, we converted problem set 5, spellchecker,",
			"the 140,000-plus words, the text file called large,",
			"into a corresponding JavaScript file called large.js,",
			"and we wrote autocomplete here.",
			"So let me go ahead and type in A, and I will instantaneously see an unordered",
			"list of all of the words that start with A. Let me type in A-P,",
			"Now it's changing to all the words that start with A-P. A-P-P-L-E--",
			"this is how autocomplete works.",
			"Using JavaScript, what am I listening for?",
			"Well, if I go back to this laundry list of events from a moment ago,",
			"I bet I'm listening for one of these key presses or key up events,",
			"so listening for the user hitting their key,",
			"and as soon as they type their key, I'm using probably that .value syntax",
			"to get the value of whatever the human typed in, and then I'm displaying it",
			"in the page, and then dynamically adding or removing li elements from the page",
			"dynamically.",
			"So again, we've not seen hands-on how to do this,",
			"but the building blocks are there.",
			"You can change the web page's style.",
			"You can add HTML to the page.",
			"And you can listen for these kinds of events.",
			"Now, it turns out that it is not only JavaScript that can make use of URLs",
			"in this way.",
			"And we thought we'd do one final demo here,",
			"this one calling back into play Python, whereby I'm going to do a little",
			"something with our jack-o'-lantern here.",
			"Let me bring him over closer to me.",
			"And you'll see that he's got a light bulb tucked inside of him.",
			"And let's go ahead and face him forward.",
			"It turns out that the light bulb inside of this jack-o'-lantern here is",
			"actually one of these fancier modern LED light bulbs that has an internet",
			"connection.",
			"It's an internet of things device, an IoT device.",
			"And it happens to be talking to this little wireless",
			"device here that I have on the lectern so that the light bulb is literally",
			"communicating wirelessly to that device on the lectern.",
			"And that device, in turn, is plugged into Harvard's network.",
			"And my laptop, of course, is plugged into Harvard's network, too,",
			"and so we have the ability now, it would seem,",
			"to write code on my Mac or your PC that somehow talks to this light bulb",
			"by using our local internet, our local network, if you will,",
			"to connect those two devices.",
			"And it turns out that devices like this very often",
			"have APIs, Application Programming Interfaces, that for simplicity, are",
			"actually based on URLs.",
			"They're simple URLs so that if I send a certain HTTP",
			"request to this light bulb, it will turn itself off or on or do something else.",
			"And if I send another request, it will do that thing as well.",
			"Now, that's not how all APIs work, but indeed,",
			"just because we're transitioning now to web programming,",
			"doesn't mean we're leaving Python behind.",
			"In fact, next week we'll bring Python back all the more, and SQL,",
			"combine all five of these technologies, HTML, CSS, JavaScript, Python, and SQL,",
			"and tie them all together into a full-fledged web application.",
			"But to do this, let me go ahead and create a program here",
			"called light.py in Python.",
			"And I'm doing it on my own Mac so that I'm not in the cloud.",
			"I'm actually on Harvard's local network here.",
			"Let me import a couple of libraries, import os and import requests.",
			"We've not seen this before, but there's a library",
			"that's available with Python called requests,",
			"which allows you to make, with Python, HTTP requests, just like a browser.",
			"Let me go ahead and declare a variable called username",
			"that's going to be the result of just getting what's called an environment",
			"variable called username.",
			"So for privacy's sake I didn't want to type my own username",
			"and password for Harvard's network into this program,",
			"so there exist what are called environment variables",
			"on Macs and PCs and Linux computers that you can store values secretly",
			"elsewhere.",
			"And using Python's os.genenv function, you",
			"can load those into the computer's memory somewhat privately.",
			"Let me go ahead and get the IP address of the light bulb",
			"by doing os.getenv quote-unquote \"IP\".",
			"And then lastly, let me go ahead and construct a URL.",
			"By having read the documentation, thankfully a colleague constructed URLs",
			"that looks like this, http://, the IP address of the light bulb,",
			"slash API slash My username, personally, in case different people want",
			"to control the light bulb, slash light slash one slash state.",
			"So this is a weird-looking URL, but it's essentially going to be http://",
			"whatever the numeric IP address is of this light bulb slash IP slash",
			"my username slash light slash one slash state.",
			"So I could literally copy and paste that into a browser",
			"if I knew what those values were offhand,",
			"but I'm going to do this programmatically instead.",
			"I'm going to go ahead and write requests--",
			"and I could say get if I want to send a get request, which is not what I want,",
			"because I don't want to get the value of the light bulb.",
			"I don't want to post the value of the light bulb.",
			"It turns out there's a third HTTP verb that we've not seen before,",
			"but it's often used for APIs, called put.",
			"Technically it's all caps, P-U-T, but in code, it's written in lowercase, .put.",
			"So this is going to send--",
			"it's going to send a message from my Mac to this light bulb.",
			"So let me go ahead and put to this URL the following Python dictionary.",
			"I'm going to go ahead and put a value of quote-unquote",
			"\"on\" to the Python Boolean value of false.",
			"Now, what is json?",
			"Json stands for JavaScript Object Notation,",
			"which is just a conventional way of sending",
			"textual messages across the internet.",
			"So we'll see that before long.",
			"But for now, this is just sending to the light bulb",
			"a dictionary which has a key of on and a value of false.",
			"And if I didn't do anything wrong, let me go ahead and close this file,",
			"run Python of light.py, cross my fingers, as always--",
			"voila.",
			"Now, this light bulb doesn't have to be one foot from me.",
			"It can be literally elsewhere on the internet",
			"so long as I have an internet connection and I have access to that IP address",
			"over the internet, which I didn't want to do today,",
			"lest we have hundreds of people turning the light bulb on and off for me.",
			"But let me go ahead and change the code a little bit now.",
			"Let me go ahead and turn it back on, and change on, of course,",
			"to true, as you might guess.",
			"So almost the same code.",
			"Let me go ahead now and run Python of light.py again.",
			"On.",
			"And let's make it a little fancier.",
			"Let's go ahead and get a little more logical here,",
			"doing things a little more interestingly than we have thus far.",
			"And let's see if we can't bring that blink to life as well.",
			"Let me go down here, and let's do something infinitely this time.",
			"How about while true--",
			"so forever, this demo will go on-- whoops--",
			"while true, go ahead and put to that URL not just on and off.",
			"Let's go ahead and change the brightness to a value of 254, so really bright,",
			"and let's go ahead and change on to true, as before.",
			"But then let's go ahead and sleep for a moment, so time.sleep for one second.",
			"And then let's go ahead and send another request",
			"after a second to that same URL, sending in a Python dictionary",
			"where on is now false.",
			"And then let's go ahead and sleep for one second.",
			"You might have noticed I need another library.",
			"I need to import time, which sounds amazing,",
			"but it's just the library called time.",
			"I've saved the file, and I'm forever going",
			"to send one request turning it on, another request sending it off.",
			"And now, the climactic finish, Python of light.py.",
			"",
			"All right, woo!",
			"[CHUCKLES]",
			"OK.",
			"That's it for CS50.",
			"We will see you next time.",
			"[MUSIC PLAYING]",
			"Phyllis, number two.",
			"Number two from your left.",
			"[LAUGHS]",
			"[LAUGHTER]",
			"OK, this one we can fix.",
			"",
			"That was amazing, Josh.",
			"",
			"Sophie?",
			"[LAUGHS]",
			"SPEAKER: I really tried to hide it.",
			"",
			"DAVID J. MALAN: [INAUDIBLE]--",
			"oh!",
			"[LAUGHTER]",
			"",
			"SPEAKER: So close.",
			"DAVID J. MALAN: OK.",
			"We'll try again.",
			"Here we go.",
			""
		],
		"is_youtube": false
	},
	"video_037": {
		"section": "CS50x 2021",
		"subsection": "Week 8",
		"unit": "Shorts",
		"video_sources": [
			"https://edx-video.net/HARCS50X2016-V035800_DTH.mp4",
			"https://edx-video.net/HARCS50X2016-V035800/HARCS50X2016-V035800.m3u8"
		],
		"video_duration": 1187,
		"speech_period": [
			4.58, 2.0, 2.45, 1.23, 2.833, 0.576, 2.166, 1.535, 2.13, 3.58, 0.68,
			3.099, 0.791, 3.307, 1.083, 1.041, 1.694, 1.875, 3.33, 2.708, 3.912, 4.21,
			2.32, 2.61, 2.98, 4.0, 4.8, 3.431, 2.749, 3.54, 2.3, 1.75, 3.29, 1.96,
			5.05, 4.19, 1.79, 0.86, 2.666, 1.714, 2.4, 1.15, 2.26, 2.57, 2.82, 4.86,
			0.5, 1.51, 2.458, 2.002, 4.37, 1.78, 1.25, 1.37, 2.07, 2.53, 2.504, 2.166,
			1.25, 3.64, 2.55, 2.82, 3.02, 4.09, 2.29, 2.68, 4.0, 2.94, 5.03, 2.54,
			4.1, 3.516, 0.874, 2.18, 3.29, 4.26, 3.13, 2.79, 4.31, 6.24, 3.48, 3.26,
			3.77, 2.26, 3.92, 1.27, 4.69, 3.08, 2.31, 4.99, 2.57, 4.51, 2.89, 6.2,
			4.73, 5.19, 3.09, 1.0, 4.62, 4.06, 2.48, 2.18, 1.72, 3.37, 2.24, 3.844,
			0.916, 1.32, 1.46, 1.047, 2.583, 2.19, 3.22, 3.339, 2.541, 1.98, 1.333,
			7.347, 3.69, 3.12, 2.49, 1.98, 2.05, 4.78, 1.874, 1.916, 2.72, 2.7, 4.104,
			1.916, 5.87, 3.02, 4.09, 3.002, 2.208, 2.02, 2.555, 4.176, 1.499, 2.749,
			1.891, 2.17, 6.68, 2.33, 2.68, 1.32, 6.38, 3.68, 3.1, 4.53, 5.72, 3.42,
			2.12, 2.21, 2.8, 3.7, 4.68, 3.42, 2.29, 2.761, 1.749, 1.85, 2.6, 3.72,
			7.67, 1.405, 2.125, 3.54, 1.969, 0.791, 2.86, 2.58, 3.43, 3.14, 2.89,
			2.11, 2.55, 6.14, 0.548, 2.041, 1.211, 3.477, 3.083, 2.24, 2.749, 3.501,
			2.11, 4.55, 4.54, 1.13, 1.33, 2.71, 4.29, 1.2, 1.583, 4.067, 1.296, 2.624,
			2.94, 3.637, 1.083, 2.041, 3.489, 2.25, 1.49, 5.0, 0.5, 1.34, 2.037,
			1.833, 2.47, 3.9, 2.41, 5.45, 1.89, 2.49, 5.43, 1.23, 2.24, 4.44, 6.67,
			3.7, 2.74, 1.97, 3.16, 2.17, 1.5, 1.96, 2.38, 3.07, 5.29, 2.59, 1.75,
			8.035, 7.185, 4.035, 1.875, 3.1, 7.94, 2.05, 5.8, 2.63, 3.17, 3.352,
			2.098, 1.782, 4.208, 5.595, 2.125, 3.87, 1.71, 2.09, 3.169, 1.791, 2.616,
			1.124, 2.84, 3.71, 2.77, 2.52, 2.37, 1.88, 3.51, 1.05, 4.364, 2.166,
			2.041, 2.229, 3.05, 0.5, 2.88, 2.17, 1.73, 3.46, 4.49, 1.83, 6.29, 4.05,
			2.89, 4.04, 2.56, 3.164, 3.166, 3.16, 3.41, 4.5, 1.94, 3.27, 2.94, 3.14,
			3.326, 2.374, 4.95, 2.56, 2.93, 1.124, 3.856, 1.49, 2.287, 1.333, 1.791,
			3.045, 3.124, 4.05, 3.13, 0.71, 4.73, 2.52, 6.65, 4.04, 2.14, 2.95, 3.15,
			3.32, 4.26, 1.575, 0.875, 3.424, 2.416, 3.04, 2.786, 1.874, 3.37, 3.99,
			1.97, 3.61, 6.54, 1.86, 3.04, 3.28, 2.72, 4.51, 2.0, 2.82, 1.56, 2.41,
			4.66, 1.7, 0.9, 1.08, 1.96, 2.74, 4.05, 3.82, 1.13, 3.87, 2.75, 3.12,
			2.72, 2.07, 4.4, 1.25, 3.562, 1.708, 1.84, 1.45, 1.119, 2.041, 1.52,
			0.659, 1.27, 4.651, 2.2, 3.22, 2.21, 3.794, 1.416, 1.84, 3.68, 3.85, 4.57,
			1.81, 5.24, 3.39, 1.03, 1.252, 2.458, 1.125, 2.605, 2.93, 4.43, 3.1,
			4.192, 1.708, 1.68, 2.25, 3.78, 2.7, 1.385, 2.125, 2.083, 3.007, 3.13,
			5.726, 1.874, 1.374, 1.886, 1.61, 1.416, 1.284, 3.25, 1.147, 2.083, 0.88,
			2.16, 2.81, 3.82, 2.65, 3.19, 2.56, 2.74, 2.26, 1.93, 2.85, 3.38, 1.0,
			1.94, 2.091
		],
		"transcript_en": [
			"",
			"DOUG LLOYD: If you've been watching these videos",
			"in the order which we recommend, we're about to undergo",
			"bit of a culture shift.",
			"Because now, we're going to start talking about the internet and web",
			"technologies.",
			"So up until now, we've really been doing a lot of C.",
			">> And when we've been running our programs,",
			"we have been running them from the command line.",
			"That's pretty much how the users have been interacting with the programs",
			"that we write.",
			"They pick something to prompt, something happens in the terminal window,",
			"and then it's done.",
			">> Sometimes you might have persistent data that remains afterwards.",
			"But that's pretty much it.",
			"It's at the command line.",
			"It's the only way the user can interact.",
			"From this point forward, we're going to start",
			"transitioning so that the users can interact with our websites.",
			"So we're going to be writing websites, which aren't written in C,",
			"but are written in a variety of other programming languages, including PHP,",
			"and it's sort of helper languages, HTML, CSS, and the like.",
			"So we're going to start talking about those things.",
			">> Before we get into web programming itself,",
			"I think it's probably a good idea to take a step back and talk",
			"about how computers and humans interact over the web.",
			"So this video is really a primer, a basic guide, to the internet.",
			"Now, the caveat here is the CS50 is not a networking class.",
			"So what we're going to be talking about here is pretty high level.",
			"We're not going to get into any low level",
			"details of how all this stuff works.",
			"If you're interested in that, I'd strongly",
			"recommend taking a class on computer networking.",
			"And we might even tell white lie or two just",
			"for the purposes of making the general understanding clear.",
			">> So with that said, let's talk about how we interact with the internet.",
			"So here we are.",
			"Here's us.",
			"We're pretty looking forward to getting onto the internet, which",
			"as we all know, is chock full of cats.",
			">> Now do we just connect to the internet like this?",
			"Well, probably not.",
			"Intuitively, you know that, say for example,",
			"when you change your Wi-Fi network on your computer,",
			"you don't see one called internet unless that just so happens",
			"to be the name of your local Wi-Fi.",
			"Right?",
			">> It's usually something like home.",
			"Or if you're at work, it might be the name of your company.",
			"There's not just one option called internet.",
			"And so something or some things exist in between when",
			"we want to connect to the internet.",
			"What are some of those things?",
			"Well, we're going to talk about that.",
			"We're also going to talk about some of the important things",
			"we need in order to be able to connect to the internet.",
			"And the first of these things is an IP address.",
			"So you've probably heard the term IP address before.",
			"What does it mean?",
			"Well, an IP address is basically a unique identifier",
			"of your computer on a network.",
			"Just like every home or office has a unique address",
			"to which one could send a mail.",
			">> Similarly, every computer if it wants to receive data or send data,",
			"needs to have a unique address.",
			"So that when information is sent or received,",
			"it's being sent from or received to the correct location.",
			"This addressing scheme, as I said, is called IP addressing.",
			"IP is stands for Internet Protocol, which we'll talk about again shortly.",
			">> Now, what does IP addressing look like?",
			"Well, the scheme basically was, when it was first implemented,",
			"to give every computer a unique 32-bit address.",
			"That's a lot of bits.",
			"That's 4 billion addresses.",
			">> And generally, instead of using hexadecimal notation, which",
			"we've used previously in the context of pointers in C to talk about addresses,",
			"we usually represent IP addresses in a little bit more",
			"of a human friendly way, representing them",
			"as four clusters of 8 bits represented as decimal numbers.",
			"Because humans don't frequently speak hexadecimal, unless you're programming.",
			"But people who use the internet aren't necessarily programmers.",
			">> And so making it easy and accessible for them",
			"to be able to talk about what their IP address is in case they maybe",
			"need to call up somebody to troubleshoot something,",
			"it's better to make it in the more common conventional decimal number",
			"format.",
			"And so an IP address just looks pretty much like this, w.x.y.z,",
			"where each one of those letters represents a non-negative value",
			"in the range of 0 to 255.",
			"Recall that an 8-bit number can hold 256 distinct values.",
			">> And so that's why our range is 0 to 255.",
			"And we have four clusters of 8 bits for a grand total of 32 bits.",
			"And so an IP address might look something like this.",
			"This is sort of a generic default IP address, 123.45.67.89.",
			"All of them are in the range of 0 to 255, so that's a valid IP address.",
			">> Here at Harvard University, all of our IP addresses start with 140.247.",
			"That's just the way that the IP addresses in this geographic area",
			"have been assigned.",
			"And so this might be an IP address that might exist here at Harvard.",
			">> So as I said, if every IP address is 32 bits, we have about 4 billion",
			"to give out, a little more than 4 billion.",
			"But we can kind of see a problem, right?",
			"What's the world population right now?",
			">> Well, it's somewhere north of 7 billion people.",
			"And in the Western world at least, most people",
			"have more than one device capable of internet connectivity.",
			"I have one right here.",
			"And I have another one in my pocket.",
			"And I have one back in my office.",
			">> And so that's three.",
			"And that doesn't even count the ones that I have at home, too.",
			"And so that's kind of a problem, right?",
			"We have at least 7 billion people and only 4 billion addresses.",
			">> And every device is supposed to be uniquely identified.",
			"We have developed some workarounds to deal with this problem,",
			"something called a private IP address, which we're not",
			"going to get into in this video.",
			"But basically, it allows further the web, the internet, to kind of fake",
			"out a little bit that you have a unique address by having private addresses",
			"and then funneling them through one single address, which",
			"is shared by many different computers.",
			">> But that's really not a long term fix.",
			"Even that fixed isn't going to last forever.",
			"And so we need to have a different way of dealing with this.",
			">> So as I said, we had about 4 billion.",
			"But that's not going to be good enough, right?",
			"And so the way that it has been decided there we're",
			"going to deal with this is to make longer IP addresses.",
			"Instead of 32-bit addresses, we're going to have 128-bit addresses.",
			"So instead of 4 billion addresses, we're going",
			"to have that huge number of addresses, which is 340 billion billion billion",
			"billion, so a lot of IP addresses.",
			">> And this new scheme is called IPv6 is commonly how it's referred.",
			"The old scheme being IPv4.",
			"It's a bit of a problem in that this problem has been",
			"known about for a really long time.",
			"",
			">> And you'll see this a lot in the context of computers and computing.",
			"We're good at anticipating problems.",
			"But we're bad at dealing with them even though we know about them.",
			"So IPv6 has been around for a while.",
			"And only in the last couple years have we actually",
			"started phasing in these IPv6 addresses to phase out the IPv4 addresses.",
			"But some places do have them.",
			"And they look similar to a regular IP address.",
			"But they are a lot longer.",
			">> So instead of now having four clusters of 8 bytes for your address,",
			"we now have eight clusters of 16 bytes.",
			"And 8 times 16 is 128.",
			"And we represent these in the less conventional hexadecimal form.",
			"Because having 16-bit numbers means that instead of being a range of 0 to 255,",
			"We'd have a range of 0 to 65,535.",
			">> And so having a bunch of those stuck together",
			"would be very difficult to read.",
			"And so we usually use hex just out of convenience.",
			"And so a typical IPv6 address might look something like this.",
			">> It's certainly a lot longer than the IPv4 address we've seen before.",
			"But this would be a valid IPv6 address.",
			"This one is also about IPv6 address.",
			">> This one happens to belong to Google.",
			"And notice there's a bunch of zeros there.",
			"Sometimes these addresses can get so long.",
			"And since we're still pretty early in IPv6,",
			"sometimes there can be big chunks of zeros in there that we don't need.",
			">> If you're reading this out loud, it's 2001.4860.4860.0.0.0.0.8844.",
			"It's kind of a lot, right?",
			"So if you see a bunch of zeros, you might sometimes",
			"see an IPv6 address like this, where they omit the zeros",
			"and use a double colon instead.",
			"This is OK, though.",
			"Because we know that there are supposed to be eight distinct chunks.",
			"And so by implication, we see four.",
			"So we know that there must be four sets of zeros like this, that fill it in.",
			">> So sometimes, you might see an IPv6 address not having",
			"eight separated chunks like we do here.",
			"You might see it looking like this.",
			"And that just means that everything you don't see in",
			"between where that double colon is is just zero separated.",
			">> So, OK.",
			"We know a little bit more about IP addresses now.",
			"But how do we get them?",
			"We can't just pick the one we want.",
			"If we did that, we might end up fighting somebody for the same IP address.",
			"Or somebody might have chosen it previously.",
			"If we try and take it, we're going to run into a bit of a problem.",
			"And so we can't just pick the IP address that we want.",
			">> So the way that we get an IP address is somewhere",
			"between our computer and the internet, that big internet out there,",
			"there's something called a DHCP server, a Dynamic Host Configuration Protocol",
			"server.",
			"It's a big mouthful of text.",
			"But really all it does is it assigns you an IP address.",
			">> Your DHCP server has a list of addresses that it can validly assign.",
			"And it gives you one.",
			"That's pretty much all there is to it.",
			"Now before DHCP, this task of assigning addresses",
			"fell to a system administrator.",
			"So an actual person would have to manually assign your computer",
			"and address when you connected to a network.",
			"So DHCP just sort of automates this process of giving you an IP address.",
			"But that's how you get it.",
			"It's just a program running somewhere between you",
			"and the internet that has a bank of IP addresses that it can give out.",
			"And when you connect to the network, it gives you one.",
			"So let's revisit this diagram.",
			"Somewhere between you and the internet, there's a DHCP server.",
			"OK.",
			"So that's good.",
			"Now, let's talk about DNS.",
			"So we've talked although these IP addresses.",
			"And we know that if we're going to uniquely identify",
			"a device on the internet, it has to have a unique address.",
			">> And we could visit that address if we wanted to.",
			"But you've probably never typed in something like 192.168.1.0",
			"into your browser, right?",
			"You don't type in numbers into your browser.",
			"You usually type in human readable names like google.com or cs50.harvard.edu,",
			"right?",
			">> Those aren't IP addresses, though.",
			"So exists this service called the Domain Name",
			"System, DNS, that translates IP addresses to human comprehensible words",
			"or phrases that are much more memorable than remembering a set of four numbers",
			"or, soon, a set of eight hexadecimal numbers.",
			"That would be really challenging, right?",
			">> Think about before the days of cell phones.",
			"You had your memorize your friend's phone numbers.",
			"It might have gotten tough after a little while.",
			"And similarly, if you want to visit a bunch of websites,",
			"you probably don't want to remember a bunch of numbers.",
			"You'd rather remember a bunch of words.",
			">> So this mapping, this translating, of sets of numbers to human readable names",
			"kind of makes DNS the yellow pages of the web.",
			"And you can think about it as if it's just",
			"a huge list running from 0.0.0.0 all the way down to 255.255.255.255, which",
			"would be the highest possible-- that's the full range from 0s to 255s of all 4",
			"billion-ish IPv4 addresses.",
			"I made up the ones on the top and the bottom.",
			"But the one in the middle there is actually an IP address.",
			"So if we visited 74.125.202.138, apparently that translates to that site",
			"there, io-- what the heck is that?",
			"Well, not every name that maps is actually clear what it is, right?",
			">> So sometimes somebody who owns an IP address",
			"might name their host something that they're actually not.",
			"For example, that IP address if you went there, is actually just google.com.",
			"But Google has a lot of different servers.",
			">> And they can't call them all google.com.",
			"So they have their own internal system for translating",
			"google.com to whatever server actually is connected to that IP address.",
			"And then there's another system that exists between",
			"to translate that gobbledygook here to google.com.",
			"But we won't get into that.",
			">> And similarly for IPv6s, we're also going",
			"to have a yellow pages that'll be a lot bigger.",
			"And similarly, in the middle there-- it was",
			"tough to find an IPv6 address that was legitimate.",
			"But I found one for Google.",
			">> But it's Google's Irish website.",
			"But if you went to that IPv6 address, if your browser was IPv6 capable,",
			"that would bring you to Google's Irish homepage.",
			"So there you go.",
			">> But this isn't entirely true, right?",
			"This the system seems cumbersome, right?",
			"If there's a huge list of 4 billion things to have to look up,",
			"that's pretty big.",
			"There's no yellow pages of the world, right?",
			"If you still get the yellow pages delivered to you--",
			"I got mine the other day, and I just recycled it.",
			"But if you do get the yellow pages delivered to you,",
			"you don't get a book that's every phone number that exists on the planet,",
			"right?",
			"You get a list of the local phone numbers,",
			"the ones you're most likely to call.",
			">> And that's actually what DNS is.",
			"If you think about it, DNS is really the local yellow pages.",
			"And large DNS servers like google.coms, they",
			"are actually just more like libraries that",
			"have a copy of all of the local yellow pages or all of the local DNS records.",
			"So there's really no one repository of the full DNS of the internet,",
			"just like there's no one yellow pages of the world.",
			">> There are all these local small scale DNSs that exist out there.",
			"And there are services that aggregate them together.",
			"But they depend on those smaller DNS systems",
			"updating their information, so that they have the most accurate information.",
			">> So again, this analogy is large aggregating",
			"DNS systems are like libraries that have a copy",
			"of every yellow pages of the world.",
			"They don't themselves update those books.",
			"They depend on the books coming in, so they can update the information",
			"if they need it.",
			">> So the DNS system is not a giant block.",
			"It's decentralized across many, many servers.",
			"So now we know that somewhere between us and the internet",
			"there exists a DNS server as well as a DHCP server.",
			">> Now, access points, what our access points?",
			"Well, access points you're probably pretty familiar with from actually",
			"connecting to the internet.",
			"That's the network that you choose, the home or your work network",
			"or what have you.",
			">> And I'm generalizing the concept of an access point",
			"here for purposes of this video.",
			"But there are actually a lot of things that",
			"can be rolled up into access points.",
			"There are concepts of routers, which is sort of a general term that we use.",
			">> But there are also switches and things actually called",
			"access points that are separate from this general concept of an access",
			"point.",
			"But basically what happens is with IPv4, I",
			"said we have this concept of private addresses, right?",
			"And instead of every machine having a unique IP address, which",
			"we have run out of, because we're over 4 billion devices",
			"trying to connect to the internet, what we do",
			"is instead assign an IP address to a router.",
			"That router or access point just in your home, for example.",
			">> And the router's job as to sort of act as a traffic cop,",
			"allowing everybody who's connected to that router to use the same IP",
			"address to get out.",
			"Does that make sense?",
			"So everybody at your home has a private IP address.",
			"They can't connect to the internet, or the internet rather",
			"can't speak to them, through that private address.",
			"They can only speak to them through the address in the router.",
			"And it's the router's job to take information",
			"that you're sending the router and direct it to the correct place",
			"and for information that's coming into the router for the router",
			"to send it to you.",
			">> So the routers are really the devices here-- particularly a router",
			"in your home, the most common sort of usage case for most people--",
			"that has the public IP address.",
			"That's the device that's connected to the internet.",
			"And you connect to the router to have information flow",
			"through it on your behalf.",
			">> As I said, a modern home network, the router and switch and access point",
			"are all kind of bundled up into a single device.",
			"Sometimes a modem is bundled in there as well.",
			"That's usually just called a router.",
			"But it's really all of those things together.",
			">> Large scale business networks or so-called Wide Area Networks, WANS,",
			"actually keep these devices separate.",
			"They have a switch.",
			"They have routers.",
			"They have multiple access points.",
			">> For example, at a university you'll see things",
			"that look like so-called routers mounted are all around campus.",
			"Those are all access points that flow into routers, switches, et cetera,",
			"to pass information along.",
			"Because these networks are so big that one single access point",
			"can't cover its large area.",
			">> And so these large networks, business networks, et cetera,",
			"split these into separate devices, so the network and scale",
			"and grow if needed.",
			"So again, somewhere between us and the internet, we have an access point.",
			"And that's what we connect to.",
			"And through there, we can get to the internet.",
			"As I said at the beginning of this video,",
			"this is not a course on networking.",
			"So this is not the entire story.",
			"And I've kind of glossed over it.",
			"And maybe I've left you even a little bit confused",
			"as to what some of these things are.",
			"But that's OK.",
			">> We don't need the whole story.",
			"It's enough for us to know moving forward just basically a little bit",
			"about how the internet works.",
			"So what we know is we have these private networks at our house.",
			">> And we connect to a router.",
			"And that router is connected to the internet at large.",
			"But what is the internet at large?",
			"I keep saying this, but what is it?",
			">> Well, it's really just all these individual networks at my house,",
			"and at your house, and at every other house, that are connected together.",
			"It's an interconnected network, an inter-net.",
			"So instead of thinking about the internet",
			"as this giant cloud, this ethereal thing that exists out there,",
			"it's really just a connection among all of these networks.",
			">> So here we go.",
			"We have our local network.",
			"And we're not the only person probably on our local network",
			"trying to use the internet.",
			"There's probably several of us trying to get in.",
			">> And we're not the only network that exists in the world, right?",
			"There are other networks, too, that are trying to connect to the internet.",
			"But the internet is not, again, a separate entity.",
			">> It's just a set of rules that allow these networks, these small networks,",
			"the blue, the purple, and the red network",
			"here, to communicate with each other.",
			"So there's no thing they're all connecting to.",
			"They're all just connected to each other, right?",
			">> And so somewhere on these networks exists the services",
			"that we actually want.",
			"So maybe in the blue network is where Google lives.",
			"And in the purple network is where Facebook lives.",
			"And in the red network, well, maybe that's where all those cats are.",
			">> And so if we want to get information about cats,",
			"we just traverse this chain of networks to get the information we want.",
			"And here, I've represented the network as all",
			"being able to talk to each other.",
			"And we can only talk to the network.",
			"But the network can't talk back to us.",
			">> But that's not true either, right?",
			"This is all a two-way street.",
			"Information can flow through networks back and forth.",
			">> How does it do that?",
			"Well, the internet's really a system of protocols.",
			"And we're going to start talking about what",
			"those protocols are in future videos.",
			">> But again, the internet is not a separate thing.",
			"It's a set of rules that defines how networks communicate,",
			"these small networks, these local network that we're used to,",
			"the people in our house, the people at our school, the people at our job,",
			"all sharing a network.",
			"And how these networks interconnect and talk to each other,",
			"that's actually what the internet's all about.",
			"So let's, in a future video, talk about some",
			"of the protocols that comprise the internet to hopefully",
			"give you a bit more of a well-rounded understanding.",
			"I'm Doug Lloyd.",
			"This is CS50.",
			""
		],
		"is_youtube": false
	},
	"video_038": {
		"section": "CS50x 2021",
		"subsection": "Week 8",
		"unit": "Shorts",
		"video_sources": [
			"https://edx-video.net/HARCS50X2016-V030000_DTH.mp4",
			"https://edx-video.net/HARCS50X2016-V030000/HARCS50X2016-V030000.m3u8"
		],
		"video_duration": 934,
		"speech_period": [
			5.152, 2.208, 2.66, 1.837, 2.333, 1.52, 2.78, 2.47, 3.85, 4.18, 2.5, 1.73,
			1.5, 4.47, 4.22, 2.42, 3.5, 2.37, 3.62, 3.329, 2.541, 1.38, 2.275, 2.375,
			3.13, 3.4, 1.53, 1.085, 1.245, 1.38, 1.833, 3.097, 1.25, 3.22, 1.05, 5.76,
			4.78, 1.58, 2.55, 2.37, 2.93, 3.33, 2.36, 3.44, 2.91, 4.39, 2.79, 4.02,
			4.76, 3.53, 2.87, 3.692, 1.958, 4.44, 2.79, 4.01, 3.73, 2.65, 2.65, 2.054,
			1.416, 1.95, 2.74, 2.87, 2.11, 2.28, 4.55, 2.76, 2.38, 4.45, 2.07, 2.48,
			2.01, 2.66, 2.65, 3.46, 2.63, 3.83, 4.17, 3.98, 2.78, 1.931, 3.249, 2.255,
			4.615, 4.07, 3.609, 3.041, 1.16, 3.3, 4.77, 2.94, 3.18, 1.34, 2.75, 1.98,
			2.6, 3.31, 3.89, 3.35, 4.11, 2.84, 1.96, 2.5, 1.877, 1.583, 2.19, 1.35,
			4.23, 3.149, 1.541, 1.83, 2.15, 2.54, 4.83, 2.18, 2.34, 3.49, 4.29, 3.34,
			4.2, 2.58, 3.85, 4.25, 2.13, 3.89, 3.04, 2.05, 2.29, 2.97, 2.0, 4.33,
			4.55, 3.097, 2.333, 2.58, 1.44, 2.84, 1.74, 3.15, 4.62, 2.59, 2.06, 1.796,
			2.124, 2.07, 2.15, 2.987, 1.833, 4.64, 3.3, 3.0, 2.38, 3.96, 1.596, 1.874,
			2.699, 0.791, 0.96, 2.63, 1.9, 2.42, 3.539, 2.291, 2.66, 1.57, 5.127,
			2.583, 4.32, 4.05, 1.82, 2.06, 1.84, 6.03, 2.2, 1.81, 3.825, 3.125, 3.53,
			0.689, 2.291, 3.589, 1.026, 1.375, 2.94, 2.389, 1.916, 1.7, 2.125, 3.59,
			5.779, 1.541, 0.83, 2.185, 1.065, 1.708, 0.932, 2.09, 3.45, 2.512, 1.458,
			1.79, 2.64, 1.76, 0.73, 0.81, 2.93, 4.01, 1.19, 4.19, 1.46, 2.839, 3.041,
			1.417, 2.083, 1.64, 3.77, 3.36, 2.35, 4.09, 2.82, 2.21, 3.12, 3.96, 2.86,
			3.61, 7.18, 3.05, 3.04, 2.4, 3.39, 2.8, 3.12, 0.98, 2.2, 3.48, 2.02, 2.75,
			2.236, 3.124, 1.857, 1.833, 3.23, 1.36, 5.52, 3.4, 5.99, 2.14, 1.505,
			3.365, 4.38, 3.17, 6.2, 2.65, 1.88, 5.32, 1.72, 2.78, 2.42, 1.25, 1.5,
			1.79, 1.416, 1.964, 2.08, 2.174, 3.166, 1.92, 2.22, 1.82, 4.17, 2.21,
			2.73, 3.14, 3.42, 4.04, 2.12, 4.46, 2.82, 3.38, 2.88, 4.59, 0.5, 2.958,
			2.212, 2.09, 2.45, 3.71, 3.37, 2.32, 4.38, 3.76, 0.99, 1.442, 1.708, 2.45,
			2.82, 2.25, 4.85, 1.62, 2.48, 6.62, 4.78, 4.03, 4.79, 5.71, 2.99, 2.309,
			1.541, 1.99, 2.41, 2.19, 1.25, 2.98, 2.89, 2.43, 2.46, 4.64, 3.334, 2.916,
			5.28, 3.86, 2.67, 3.03, 3.68, 1.26, 2.882, 1.958, 4.437, 2.083, 2.36,
			0.99, 1.89, 1.903
		],
		"transcript_en": [
			"",
			"DOUG LLOYD: If you watched our internet primer video,",
			"I left a bit of a cliffhanger by talking about the internet",
			"and how it's a system of protocols.",
			"Well, let's talk about the first of those protocols that",
			"actually comprises the internet.",
			"And interestingly enough, it's called the Internet Protocol,",
			"which we usually refer to as IP.",
			">> So the internet, as I said, is an interconnected network, an internet,",
			"which is really just several networks woven together and agreeing somehow",
			"to communicate with one another.",
			"What is this somehow I'm talking about?",
			"Well, this is the Internet Protocol.",
			"This dictates how information is transmitted from point A to point B.",
			"And this is sort of a condition of joining the network of the internet",
			"is agreeing to follow this protocol when information needs",
			"to be moved from point A to point B.",
			">> So at the very end of that internet primer video,",
			"I showed this image of what the internet was.",
			"And on a small scale, this is actually probably pretty accurate.",
			"This might be how three networks actually talk to each other.",
			"But it's a bit misleading.",
			"And the reason it's a bit misleading is because-- if I",
			"just number the networks for the sake of convenience here",
			"and we get rid of everything else and just focus on the networks--",
			"it's a bit misleading because it implies that all three network have",
			"a connection to one another.",
			">> One is connected to two.",
			"Two is connected to three.",
			"And three is connected to one.",
			"And when I talk about a connection here, I'm",
			"talking about a physical, wired connection.",
			"We do have wireless.",
			"But it's really impractical for data to be transmitted wirelessly",
			"over a large scale.",
			"And so at some point, we really do rely on wired technology-- telephone wires,",
			"fiber optic wires, various technologies that are physically connecting",
			"point A to point B.",
			">> And on a small scale like this-- this might be accurate,",
			"but as the image gets a little bigger, let's now",
			"imagine we have six different networks.",
			"If that's true, now we have something like this for every network",
			"to be connected to every other network.",
			"And if you look, every network has five arrows connected to it.",
			"So everything is connected to every other network.",
			">> We only have six networks here, and already look at how much wiring",
			"we have to employ, right?",
			"And the internet consists of a lot more than six networks.",
			"We can't afford to wire each network to each other network,",
			"especially considering some of these networks span oceans, right?",
			"If we're trying to connect to a network in Asia or in Europe,",
			"we're going to have to span an entire ocean.",
			"We're going to need to use wires at some point,",
			"but we want to minimize the number of wires we actually use.",
			"We don't want to send a million wires across the ocean,",
			"because they cost millions of dollars apiece to lie down.",
			"And so rapidly, we wouldn't be able to afford the internet anymore.",
			"So we have to have another way for every network",
			"to talk to every other network or else we",
			"have pieces of the internet that are disconnected",
			"from other pieces of the internet.",
			"And that's not what we want.",
			"But we don't want to have them all wired together.",
			">> And this is where routers come back into play.",
			"We can use routers in the following way.",
			"What if instead of every network being physically",
			"connected to every other network, we had these intermediary pieces, where",
			"the networks were connected to these intermediaries, which",
			"are connected to a few networks.",
			"So instead of having one connect to two, three, four, five, six, maybe one",
			"connects to a router, which maybe connects",
			"to one or two of those networks, but also",
			"maybe connects to other routers, which also",
			"will connect to those other networks.",
			">> And the router's job is-- it contains information",
			"called a routing table that dictates where do",
			"I go if I see a particular IP address?",
			"If I see an IP address starting with four, I'm going to go this way.",
			"If I seen IP address starting with a 12, I'm going to go that way.",
			"We don't need to be connected physically to network number four",
			"or network number 12 in this example.",
			"We just know generally where we want to go.",
			"And if you think about it, this is sort of similar to the concept of recursion",
			"that we talked about when we were talking about it",
			"in C. I'm not going to connect you to exactly where you want to go.",
			"I'm just going to move you one step closer to where you want to go.",
			"And I'll let somebody else deal with solving the rest of the problem.",
			"I'll just solve this little piece of the problem and defer the rest of it",
			"to somebody else.",
			"So routing information is actually kind of similar to recursion.",
			"If that's a concept that you understand well, maybe that analogy would help.",
			">> So let's take a look at this networking example",
			"again and assume that, again, we're going to use those same six",
			"networks, one through six.",
			"So let's just say that every IP address on network one",
			"starts with one dot something.",
			"And we'll say that there's some other thing that",
			"deals with how all the systems are connected to network one.",
			"We just care about connecting all of those networks together in an internet.",
			"So every device that is connected to network one",
			"has an IP address that starts with one dot and then three other numbers.",
			">> This is a generalization of the way things actually work.",
			"It's quite a bit more precise than this.",
			"But this should give you a general idea of what the Internet",
			"Protocol is actually doing.",
			"So this was the diagram we had before.",
			"This was the system that was not sustainable.",
			"Even six, this might be OK.",
			"But if we get to 10 or 20 or 50, we're going to be lying a lot of wires.",
			"And 50 is still also not even the tip of the iceberg",
			"as to the number of networks we have.",
			"So this model is unsustainable.",
			"We can't stick with this.",
			">> So let's instead adopt this model where we get rid",
			"of all the wires between the networks and we add routers.",
			"So these yellow boxes represent routers.",
			"And their job is to move information generally",
			"closer to where it's supposed to go.",
			"And maybe these are the connections that these networks have.",
			"And maybe these are the tables that are built into the routers.",
			">> So if we just start by looking at network one, for example,",
			"basically what it says is if I ever see an address that",
			"doesn't start with a one-- that's what the exclamation point one or the bang",
			"one there, not one-- I'm going to pass it off to a router.",
			"And from there, the router can make a decision.",
			"The router says if I see a one, I'm going to move to network number one.",
			"That's the green arrow heading to the left out of that top left box.",
			">> If I see a two-- that's the arrow sort of heading",
			"to the top right towards the purple network--",
			"if I see an IP address starting with a two,",
			"I'm going to go towards the two network.",
			"If I see a three, a four, a five, or a six-- that's that red arrow coming out",
			"of the top left router-- I'm not connected to three, four, five, or six.",
			"But I know somebody who is or who's a little bit closer to there.",
			"So I'm just going to say, every time I see an IP address",
			"starting with three, four, five, or six, I'm just",
			"going to send it to that router.",
			"So I'll move it a little closer to where it's supposed to go and let",
			"that router deal with the problem.",
			">> And as you can see-- if you wanted to pause here and trace--",
			"you can get to every other point in the network from wherever you are.",
			"All six networks can still connect to every other network",
			"but they're not physically connected anymore.",
			"They're now these intermediate steps.",
			"Now, of course there's a trade off of speed, right?",
			"If one was directly connected to six, we wouldn't",
			"have to go through two routers along the way.",
			"So we may be able to get the connection a little bit faster.",
			"But maybe that trade-off is worth it, right?",
			"If it's going to be so expensive in terms of actual cost, dollars",
			"and cents, to physically wire all these networks together,",
			"maybe a little bit of a slowdown in speed is OK.",
			"We can tolerate that.",
			">> So again, in that example we were just talking about, none of the networks",
			"directly connect to each other all.",
			"There could have been-- maybe in that example",
			"we could have made it so that maybe network one and two were",
			"directly connected.",
			"And that would be OK.",
			"Some networks are physically connected to other networks.",
			"But they're not all connected to each other.",
			"They rely on the routers-- in this particular example--",
			"to distribute the communication from point A to point B.",
			"On a small scale-- like what we're talking about here--",
			"this configuration actually might be more inefficient than just",
			"having direct connections.",
			"But on a large scale, we can scale the system a lot better.",
			"It's really going to reduce our cost of network infrastructure",
			"to have intermediary routers whose job it is to move traffic from the sender",
			"to the receiver, from point A to point B, as opposed to wiring everybody",
			"together.",
			">> So let's take a look at an example of information",
			"traveling using this Internet Protocol.",
			"Let's say that I am physically located at IP 1.208.12.37",
			"so I exist somewhere on the one network.",
			"And I want to send a message to you.",
			"And you're on the five network at 5.188.109.14.",
			"Your IP address specifically doesn't matter, but in this particular example",
			"we're talking about this generalization of what the internet protocol is all",
			"about.",
			"You're on the five network, and I'm on the one network.",
			"As you can see, we're not connected to each other at all.",
			">> So I start out.",
			"And I want to send you a message.",
			"And so somehow I communicate that message to the router.",
			"The router is the one that actually has the IP address.",
			"And it's looking at where it's supposed to go.",
			"We're going to five dot something.",
			"So now I'm going to start using my-- or the router,",
			"rather, is going to start using its router table to pass information along.",
			"It sees that five is not one, so it says I'm going to pass it to this guy.",
			"Then this guy has to make a decision.",
			"Where am I going to go?",
			"Well, it's not a one, so I'm not going to move to the one network.",
			"And it's not a two.",
			"I'm not going to move to the two network.",
			"It starts with a five.",
			"I'm not connected to five, this router says.",
			"And so I'm just going to pass it off to-- I'm going to go down this path.",
			"This is where threes and fours and fives and sixes go.",
			"And I'll let that guy deal with it.",
			"I'll get it a little closer to where it's supposed to go.",
			"I know it's supposed to go in that general direction.",
			"But maybe that guy can deal with it.",
			"OK.",
			"So that guy looks.",
			"He says, OK, this IP address starts with a five.",
			"Well, I'm connected to three and to six, so I can't get the message directly",
			"where it needs to go.",
			"But that other router over there, I know if I send it fours and fives,",
			"it can handle those.",
			">> So it passes it along down the path.",
			"And then this router says, well, I'm connected to networks four and five.",
			"So, yes, I can help you.",
			"I'll take your IP address that starts with a five.",
			"I'll give it to the five network.",
			"The five network will do some work on its end and give the message to you.",
			"And now we've successfully transmitted a message from me",
			"to you using the Internet Protocol.",
			">> Again, very generalized for purposes of illustration as to what's happening.",
			"But that's pretty much how the Internet Protocol works.",
			"The routers know generally where to send it",
			"and will send it one step along the way, getting it closer and closer",
			"to its destination until one router is physically connected",
			"to the network or the address or whatever",
			"in question and gives it there.",
			">> Now, in general, except for really, really small, small messages,",
			"it's not going to send it as one big chunk of data.",
			"If I'm sending you an email-- a very long email,",
			"say-- it's not going to take that entire email,",
			"bundle it up in a ball or a package or whatever,",
			"and send that entire thing down the network.",
			">> First of all, sending information along the network is expensive.",
			"It does add up.",
			"And the larger the chunk, the more costly",
			"it is to move every step of the way.",
			"And if there's somehow a slowdown and then",
			"there's this giant-- sort of like if you're driving on the highway",
			"and there's this giant truck kind of blocking the way",
			"and you can't get around it on either lane because it's kind of spread out.",
			"It slows everybody else down behind it.",
			"But small cars, if they were all small cars,",
			"they might be able to move around, if that analogy sort of helps",
			"a little bit.",
			">> So one big block in the system can really slow everybody else down.",
			"And so what IP is going to do is split this data into packets.",
			"It's going to take this big email or FTP transfer or a file transfer,",
			"or maybe I'm making a request to a web browser",
			"because I want a picture of cat.",
			"And it's going to take that request or that email or that file",
			"and break it up into many pieces and send all of the pieces separately.",
			"So in fact, I'm filling the highway with a lot of small cars, which can all",
			"move instead of a big truck that might, if something goes wrong,",
			"throttle the traffic for everybody else.",
			">> Another side effect of this is if there's",
			"some sort of catastrophic failure and something goes wrong",
			"and the packet gets dropped.",
			"Something is failed and the message can't be communicated.",
			"The router maybe had too much stuff going in.",
			"It couldn't juggle everything.",
			"And so it just literally dropped it.",
			"That's sort of the analogy, right?",
			">> It's got a lot of things going on.",
			"It's passing information from point A to point",
			"B. We're not the only two people on the internet,",
			"so it has to process a lot of traffic.",
			"And if it doesn't have enough hands and it can't figure out what it's doing,",
			"it might just drop something.",
			"So it can do something else.",
			"It's got too much going on.",
			">> If we had our message as one huge block and that was what got dropped,",
			"now we have to send the message again.",
			"And we are now possibly causing traffic again.",
			"And we run the risk of that huge block being dropped again.",
			"But if the data's been broken up into packets and we drop one of those,",
			"it's a lot less costly to send that packet one more time as opposed",
			"to the entire thing one more time.",
			"So IP is responsible for getting information from point A to point B",
			"and also breaking the information into small pieces",
			"so that the network isn't overly taxed.",
			">> IP is also known as a connectionless protocol.",
			"There's not necessarily a defined path from the sender to the receiver or vice",
			"versa.",
			"Now, in this example we've talked about, there actually is only one way",
			"to get to every network.",
			"So in this particular illustration, there actually",
			"is a defined path from point A to point B.",
			"But we can change that by just making one modification to the two routers",
			"on the left by adding this condition to the router tables.",
			">> Now notice that from the top left router,",
			"there are actually two ways to deal with a four or a five IP address.",
			"It can go down to the lower left router, or can go to the right,",
			"to the right router.",
			"It has multiple options.",
			"And this is actually kind of a good thing",
			"because it makes our network more responsive.",
			">> If for example-- it's sort of like a GPS.",
			"If you've ever been driving on the highway",
			"and suddenly your GPS warns you that traffic is ahead,",
			"you want to avoid it if you can.",
			"And so you can recalculate your route.",
			"And a router network, in addition to having information",
			"about where packets should go or where data should go,",
			"there's also sort of this general pulse on the state of its local network.",
			"What's going to happen if I send it down this path versus this path?",
			">> And so in light of heavy traffic situations on the network, maybe",
			"things will get routed a more inefficient way or a more generally",
			"inefficient way, because if we go the regular way,",
			"there's going to be a lot of traffic.",
			"The highway is completely jammed.",
			"So maybe what we'll do is instead take side roads, which",
			"ordinarily would take a lot more time, but no one's",
			"really using those side roads.",
			"And so we can route our packets that way.",
			">> So not every packet of a big chunk of data",
			"might take the same path from the beginning to the end.",
			"And our network becomes a lot more responsive",
			"if our router tables allow for there to be multiple options for where to go.",
			"We're not depending on that one truck moving out of the way.",
			"We can get off the highway at the next exit and take a different path.",
			"And so the Internet Protocol sort of does a little bit of that, too.",
			">> So that's the basics of the Internet Protocol.",
			"But there's one more issue to deal with, which",
			"is what happens if we do drop a packet?",
			"How do we know we're going to send that packet again?",
			"Right?",
			"Well, Internet Protocol doesn't guarantee delivery.",
			"We're going to be depending on another protocol",
			"to deal with that called Transmission Control Protocol, TCP.",
			"And we're going to talk about Transmission Control",
			"Protocol in the next video.",
			"I'm Doug Lloyd.",
			"This is CS50.",
			""
		],
		"is_youtube": false
	},
	"video_039": {
		"section": "CS50x 2021",
		"subsection": "Week 8",
		"unit": "Shorts",
		"video_sources": [
			"https://edx-video.net/HARCS50X2016-V043000_DTH.mp4",
			"https://edx-video.net/HARCS50X2016-V043000/HARCS50X2016-V043000.m3u8"
		],
		"video_duration": 571,
		"speech_period": [
			4.884, 3.166, 2.39, 2.85, 2.0, 3.39, 2.42, 1.83, 5.28, 1.51, 3.59, 1.81,
			2.92, 2.96, 4.14, 6.61, 2.84, 4.9, 2.9, 5.2, 4.22, 2.74, 3.82, 5.53,
			3.739, 1.041, 2.95, 5.06, 4.56, 2.24, 2.01, 3.1, 6.46, 3.69, 1.6, 3.57,
			3.32, 2.239, 2.441, 2.25, 3.5, 1.896, 4.494, 4.29, 2.46, 3.83, 1.47, 5.09,
			4.62, 2.64, 4.15, 1.05, 2.205, 2.125, 2.51, 3.112, 2.208, 4.24, 2.94,
			3.07, 1.906, 2.124, 3.34, 2.62, 2.55, 2.18, 2.94, 1.79, 3.9, 3.28, 3.15,
			2.85, 3.8, 4.44, 4.81, 4.697, 2.333, 2.43, 3.57, 3.14, 4.23, 2.96, 4.12,
			2.84, 3.18, 4.71, 2.83, 2.47, 2.12, 2.15, 3.19, 3.122, 0.958, 4.44, 3.17,
			1.86, 3.19, 1.989, 2.541, 2.117, 1.833, 3.452, 1.708, 2.875, 3.485, 5.031,
			4.009, 3.17, 4.511, 1.249, 2.583, 6.047, 3.22, 3.72, 1.91, 1.694, 2.166,
			2.53, 3.09, 2.085, 3.385, 2.22, 4.1, 2.52, 3.21, 4.12, 2.53, 2.125, 1.795,
			5.11, 2.97, 3.7, 3.089, 2.791, 3.302, 1.708, 3.08, 3.547, 2.583, 3.2,
			2.85, 2.01, 2.78, 4.09, 1.01, 1.81, 1.15, 4.99, 2.85, 2.67, 1.28, 4.25,
			3.17, 2.7, 2.06, 3.65, 4.7, 3.09, 3.355, 3.755, 3.02, 1.75, 2.049, 2.791,
			2.2, 5.02, 1.49, 5.49, 4.579, 2.841, 2.263, 2.157, 2.75, 2.42, 3.41, 1.83,
			3.25, 5.26, 1.64, 2.56, 1.99, 2.45, 3.17, 4.03, 0.96, 2.01, 2.073
		],
		"transcript_en": [
			"",
			"DOUG LLOYD: In this video we're going to talk about the Transmission Control",
			"Protocol, TCP.",
			"If you haven't watched the video on internet protocol, IP,",
			"you may wish to do so before watching this video",
			"because the two are pretty interrelated.",
			">> So, the internet protocol, again, a quick summary,",
			"that's the protocol that moves information",
			"from a sending machine to a receiving machine through the network.",
			">> So what's TCP?",
			"While just moving from a sending machine to receiving machine,",
			"isn't the full story.",
			"We also know that our program, our computers, for example,",
			"are running multiple programs, and have multiple services",
			"running on those machines.",
			"And so, if we want to get a packet, or information to a specific program,",
			"on a specific machine, we need more information",
			"than just what IP allows us to get information from point A to point B.",
			">> So, TCP can be thought of as directing the packet",
			"to the correct program, or the correct service, on the receiving machine.",
			"And so it's important to, as you might expect, know where it's supposed to go,",
			"and what the packet is for at the same time.",
			"And so, frequently, when you talk about transmission control protocol, TCP,",
			"you really often hear it in the context, TCP slash IP, or just TCP/IP.",
			"These two protocols are so interrelated that, they're basically",
			"treated as a single unit.",
			"But they are two separate protocols that do two separate things.",
			">> Again, IP is responsible for getting it from one machine to another.",
			"And TCP is responsible for getting it to the correct program,",
			"or the correct service on a machine.",
			"And it does something else that IP doesn't do,",
			"which is guarantee delivery.",
			">> So, if we now couple a machine's IP address with the so-called port number,",
			"and a port number is how a specific service, or utility, or program,",
			"is identified on a machine.",
			"If we now have an IP address plus a port number,",
			"now we can uniquely identify a particular service",
			"running on a particular machine.",
			">> So that's why TCP and IP are so frequently interrelated,",
			"because that port number on its own doesn't really",
			"mean anything if you need a port number, and the machine",
			"that you're talking about.",
			"What machine is supposed to be using this particular port, for example.",
			">> The other thing that TCP does, as I said, is it guarantees delivery.",
			"So, in addition to specifying the port number,",
			"it also indicates how many packets, the internet protocol, IP,",
			"has split the data into.",
			"And it orders those packets so they can be reconstructed on the receiving",
			"machine, even if they received-- in a different order than they were sent.",
			"Which can happen because IP is a connectionless protocol,",
			"and so different packets can take different paths through the system.",
			"",
			">> Some of these port numbers are very commonly used,",
			"and they've been standardized across all computers,",
			"like, pretty much every computer manufacturer now.",
			"So something called FTP, the file transfer protocol,",
			"which is used to transmit files, as you might expect,",
			"from one machine to another, that uses port 21 conventionally.",
			"Email, SMTP, uses port 25.",
			"DNS, the domain name system, which we talked about in our internet primer",
			"video, uses port 53.",
			"If you're ever browsing the web, you're pretty much",
			"always using port 80, unless you're browsing the web securely,",
			"secure web browsing, using port 443.",
			"",
			">> So what's this TCP/IP process?",
			"What's happening with both of these protocols together?",
			"Well, let's talk about it.",
			"When a program wants to send data, TCP helps break it into chunks,",
			"and communicates those packets to the computer's networked software.",
			"So it takes the data and it wraps information around it",
			"that indicates what port is supposed to go to,",
			"and what order that packet is out of all.",
			"So make packet one of 10, two of 10, three of 10, and so on.",
			">> IP gets those data chunks that have been wrapped with TCP,",
			"and wraps more information about where the packet is supposed to go.",
			"We might call this the IP layers surrounding the packet.",
			"So, it's sort of, like, one of those nesting dolls.",
			"We have the data in the middle, and then TCP on top of,",
			"telling it where the data inside of TCP is",
			"supposed to go, to what port or what service on a machine.",
			"Around that is the IP layer.",
			"What IP address, what machine, is actually getting this.",
			">> So then, that packet that's been wrapped with all those layers,",
			"is sent through internet protocol through the system of routers, getting",
			"from point A to point B. When the receiving machine, or device, gets",
			"it, it looks at the IP layer, it says, yup that's",
			"my IP address, so it takes off, sort of cracks the egg,",
			"and takes off the IP layer.",
			"Then it sees that there's a TCP layer, and it says,",
			"OK, looks like this is going to port x, or port y.",
			"And apparently it's packet number eight of 15.",
			"So that's good to know.",
			"So then it can take that information, take off the TCP layer now,",
			"knowing that it's for port x, and it's packet number eight,",
			"and get at the data inside.",
			"And it can prepare the data to be organized in the correct way.",
			"And once all of the data is received, TCP",
			"can hand it off to the correct service, and say, here you go.",
			"Here's the data that you received.",
			"That process might look something like this.",
			"So let's send an email from a sender to a receiver.",
			"And let's say this email is pretty small,",
			"so we only need to break it into four packets, and we'll call them A,",
			"B, C, and D. Well, we want to move that first packet what happens?",
			"Well, we take that chunk of data, the data that is part of packet A,",
			"and around that we're going to wrap it with a TCP layer.",
			"Emails, you may recall, are sent via port 25,",
			"and we have four chunks of data, here, that we're going to be using,",
			"and this is the first of them.",
			"So maybe our TCP layer contains information about, well, we're",
			"going to port 25, and this is packet number one of four.",
			">> Around that, so now we have all that information bundled up together,",
			"we're going to say where we want it to go, what machine, what IP address",
			"is supposed to get this packet.",
			"And that's part of the IP layer.",
			"And there's other information in there as well, such",
			"as the return address in case something goes wrong,",
			"it knows where to send information back, and so on.",
			">> But the IP layer goes around all of that.",
			"That entire thing is bundled together, as one big unit,",
			"and sent through an IP transfer.",
			"So it gets routed through the router network, using internet protocol.",
			"And the receiver receives the entire thing.",
			"And then it can start to deconstruct what's happening here.",
			"It looks at the IP layer, the outside layer of this data,",
			"and says, yep, that's my IP address so we can discard that.",
			"I can, kind of, ignore it, doesn't need it anymore,",
			"and it can look one level deeper.",
			"It sees that, OK, this is data that is intended to be received on port 25.",
			"It's apparently the first part of four.",
			"So, I'm going to keep that in mind, and look at the data,",
			"and slot it roughly where I think it's going to go.",
			"Now, because of the internet protocol it's not necessarily the case",
			"that the next packet the receiver gets, is packet two.",
			"In fact, the next thing the receiver gets",
			"might be packet number three because these packets",
			"took different paths because of different traffic on the network.",
			"And so, I'm not going to go through the diagram of building it",
			"up again, but packet three moves, gets stripped away",
			"of all of its layers, the IP layer, the TCP layer,",
			"and the data gets put in the right spot.",
			"And then, let's say it receives packet four.",
			">> Now let's say, that's it, it doesn't get any more data.",
			"What is it going to do?",
			"IP doesn't do anything for us.",
			"But TCP does.",
			"TCP knows, well, I've received one of four, three of four, and four of four.",
			"I'm not getting any more data.",
			"So something has gone wrong.",
			"But I can guarantee delivery.",
			"I know that packet number two is missing.",
			"And so TCP can now make a request, sort of, in the reverse direction.",
			"Bundling up its request in much the same way,",
			"and sending it via IP, which, I know, could",
			"lead to some sort of infinite loop of everybody dropping packets on the way.",
			">> But suffice it to say that TCP says, I'm missing a packet.",
			"I need to send information back to the sender.",
			"Fortunately the sender's IP address is, sort of, bundled up in the IP layer.",
			"It's part of-- it's the return address on the envelope.",
			"And say, I'm missing packet number two, can you please resend it.",
			"When the sender receives that information,",
			"it doesn't have to send the entire email again.",
			"It only needs to send that individual piece of it that was missing,",
			"so we could send packet number two.",
			"And when it gets it, now TCP says, I have all four pieces of data",
			"that I need.",
			"So, I can assemble them together, and take this entire block of information",
			"and pass it along to port 25, where it will be interpreted as an email.",
			"And that-- in this way we've now send an email from sender",
			"to receiver using TCP/IP.",
			"",
			"So, as I said, if at any point along the way something went wrong,",
			"TCP can deal with it.",
			"It can make a request that the information gets sent back to it.",
			"And it can reconstruct the message.",
			"And once it's reconstructed the message from all the packets it's received,",
			"then it can organize them and deliver them to the correct service.",
			">> So that's TCP in a nutshell.",
			"That's how we guarantee delivery of information.",
			"Remember the TCP frequently works with IP,",
			"so these two protocols really do go hand in hand.",
			"We discussed them in several videos here because they do different things,",
			"but they're so interrelated, they you'll usually use them together.",
			">> I'm Doug Lloyd.",
			"This is CS50.",
			""
		],
		"is_youtube": false
	},
	"video_040": {
		"section": "CS50x 2021",
		"subsection": "Week 8",
		"unit": "Shorts",
		"video_sources": [
			"https://edx-video.net/HARCS50X2016-V041200_DTH.mp4",
			"https://edx-video.net/HARCS50X2016-V041200/HARCS50X2016-V041200.m3u8"
		],
		"video_duration": 902,
		"speech_period": [
			5.95, 3.36, 2.75, 3.014, 2.166, 3.73, 6.75, 2.92, 2.89, 3.04, 7.7, 3.95,
			3.74, 2.969, 1.291, 3.44, 3.13, 3.6, 4.91, 3.86, 2.68, 2.17, 2.26, 3.82,
			3.61, 2.26, 1.45, 2.87, 3.33, 3.12, 2.2, 5.099, 1.791, 1.56, 2.41, 3.41,
			2.9, 3.49, 2.889, 2.681, 2.15, 2.59, 3.03, 2.08, 3.06, 3.12, 4.56, 3.06,
			3.74, 1.17, 2.6, 1.12, 3.0, 1.54, 3.36, 5.95, 5.749, 2.291, 1.87, 4.71,
			2.272, 2.208, 1.48, 1.5, 2.79, 2.89, 5.565, 1.095, 2.9, 3.624, 1.166,
			2.08, 2.52, 2.77, 2.94, 2.66, 3.22, 2.37, 3.76, 2.989, 1.541, 4.37, 5.719,
			4.888, 1.083, 3.5, 1.63, 3.01, 3.48, 3.17, 3.266, 2.374, 1.66, 1.02,
			3.064, 1.166, 1.41, 1.666, 2.964, 2.42, 3.7, 3.81, 3.08, 5.932, 2.958,
			1.499, 6.081, 2.01, 3.28, 1.891, 1.749, 3.62, 3.2, 2.12, 5.48, 0.66, 3.46,
			2.82, 2.79, 2.13, 3.53, 6.28, 4.92, 1.99, 6.64, 2.44, 3.79, 2.91, 1.916,
			2.874, 1.42, 4.72, 2.86, 2.53, 2.34, 2.71, 3.47, 5.26, 2.832, 2.208, 2.33,
			3.31, 2.41, 4.916, 1.954, 3.36, 1.49, 3.41, 5.21, 2.46, 3.29, 4.6, 3.52,
			3.3, 2.07, 1.24, 4.37, 2.59, 3.03, 2.78, 2.46, 1.9, 3.39, 1.48, 4.727,
			0.833, 1.041, 1.23, 0.999, 2.34, 3.02, 2.06, 1.282, 1.208, 3.89, 2.039,
			1.361, 2.23, 2.71, 2.35, 5.45, 1.917, 2.083, 1.91, 1.87, 2.41, 1.87, 3.85,
			3.17, 1.515, 2.955, 1.5, 1.708, 4.634, 2.728, 2.232, 1.958, 1.4, 2.76,
			2.45, 2.52, 1.13, 4.27, 2.606, 3.513, 1.041, 1.08, 3.03, 4.82, 3.0, 1.9,
			1.53, 2.3, 2.497, 3.083, 2.96, 1.17, 2.09, 1.32, 1.59, 2.041, 3.408,
			1.541, 3.18, 3.19, 3.6, 3.21, 3.09, 4.91, 1.84, 3.15, 2.53, 2.162, 1.708,
			3.125, 0.935, 1.81, 2.14, 2.33, 4.522, 2.958, 1.958, 2.882, 2.33, 4.51,
			2.96, 3.79, 3.22, 0.57, 0.835, 1.375, 1.208, 3.802, 3.14, 2.59, 3.44,
			4.56, 0.92, 1.29, 4.11, 1.829, 3.041, 6.76, 3.897, 1.833, 1.14, 6.52,
			4.48, 1.61, 3.722, 1.624, 1.504, 3.332, 1.958, 2.74, 2.78, 6.32, 2.84,
			2.34, 2.38, 2.37, 4.092, 3.768, 3.78, 2.31, 1.445, 1.875, 4.79, 2.85, 3.9,
			1.85, 6.49, 2.31, 2.12, 2.61, 1.15, 2.08, 2.03, 2.02, 1.43, 3.184, 0.916,
			4.16, 2.33, 2.36, 2.91, 2.65, 5.15, 2.23, 2.38, 2.65, 4.64, 2.68, 5.55,
			0.92, 2.04, 1.987
		],
		"transcript_en": [
			"",
			">> SPEAKER: Let's talk about another protocol-- the Hypertext Transfer",
			"Protocol, or HTTP.",
			"So we've talked about IP and TCP in previous videos.",
			"And those are protocols that dictate how information",
			"moves from machine to machine and from program to program or service",
			"to service via the internet, via this network of routers and machines.",
			">> But that's usually not the entire picture, right?",
			"Usually when we send information, the program",
			"itself-- when data is received, say, for example,",
			"in email via TCP port 25 or a web page request via port 80,",
			"there's usually a system of rules there to process what I've just received.",
			"And HTTP is an example of just such a protocol.",
			">> HTTP is the only application layer protocol",
			"that we're going to talk about.",
			"But it is another set of rules dictating how",
			"information is to be transmitted and processed via the internet.",
			"In particular, HTTP specifies exactly how",
			"one must make a request for a web page and exactly how",
			"a server, a machine that hosts web pages,",
			"delivers that information back to clients.",
			">> So this protocol doesn't actually have anything",
			"to do with how information moves from point A",
			"to point B. It's really the system of rules",
			"for-- it's basically the rules of engagement for working with a web page,",
			"similar to when somebody waves their hand at you,",
			"you're supposed to wave back.",
			"That's sort of a conventional human protocol.",
			"HTTP protocol just says, if you want to request a web",
			"page, make sure your format looks like this-- sort of like formatting",
			"a business letter, for example.",
			"And the response will similarly come according to this protocol.",
			"There are other application layer protocols",
			"that we're not going to talk about in videos.",
			"But these include things like the File Transfer Protocol,",
			"Simple Mail Transfer Protocol for sending emails, the Data Distribution",
			"Service, Remote Desktop Protocol, RDP, which",
			"is used if you want to remotely access your computer from another computer,",
			"XMPP, which is frequently known as Jabber or chat,",
			"so this is the protocol for using chat services.",
			"And there are many, many, many others.",
			">> So every time you're using a service, the service",
			"is expecting information to be received-- a request",
			"to be received-- in a very particular format",
			"and is required to return information back",
			"in a very particular format as well.",
			">> So let's go back to our illustration of us wanting to talk to the internet.",
			"So we're happy, and we want to go to cats.com, right?",
			"So if we're just talking to cats.com, we might say something like hey,",
			"can I see your home page?",
			"And cats.com will probably respond, yeah, sure.",
			"Here you go.",
			"So that's a human sort of ask-and-answer.",
			">> What does that look like in HTTP?",
			"Well, it actually kind of translates pretty cleanly to something like this.",
			"We might say GET/HTTP/1.1 from host cats.com.",
			"So basically what I'm doing here is asking for the web page www.cats.com/.",
			"We usually omit the slash nowadays, but that would just",
			"mean cats.com's homepage.",
			">> Oh, and by the way, I'm going to be using HTTP version",
			"1.1 to communicate with you.",
			"That's sort of analogous to saying, like, by the way,",
			"I'm going to be speaking in French, or by the way,",
			"I'm going to be speaking in English.",
			"That's just the format of the protocol.",
			"It's also 1.0, which is not commonly used anymore.",
			"So I'm speaking HTTP 1.1, and I would like www.cats.com/.",
			"Please get that for me.",
			">> And then there's other information, too-- the dot, dot, dot there,",
			"which is information about who you are so cats.com",
			"would know where to send it.",
			"But these are the two sort of critical parts",
			"at the very beginning of an HTTP request--",
			"just like when you start a letter you say, dear, blank.",
			"This is very similar in spirit to that.",
			">> And if cats.com is going to say, oh, sure, here you go.",
			"They might respond like this-- I'm also responding.",
			"I also speak HTTP 1.1.",
			"Your request is approved, 200 OK.",
			"What you're about to receive is HTML and then",
			"dot, dot, dot some extra information.",
			"And at the very bottom of the request is actually the HTML,",
			"the markup language, the content of cats.com's homepage.",
			">> So HTTP/1.1-- I acknowledge your request was accepted via HTTP 1.1.",
			"Your request was approved.",
			"I can give you what you want, 200 OK.",
			"You're about to receive HTML.",
			"And then here's the HTML that you requested.",
			">> But sometimes our requests don't always go quite according to plan.",
			"Can I see your cats.html page?",
			"Well, what if they say, we don't have a cats.html page,",
			"which seems kind of unrealistic because they're cats.com.",
			"You'd think they would have cats.html.",
			"But OK.",
			"So this is sort of the conventional human interaction",
			"we've now had with cats.com.",
			"How does that translate?",
			">> This might be something familiar to you.",
			"Our request looked exactly the same, except instead of getting slash",
			"we're now getting cats.html.",
			"So now what basically this entire request is saying is please give me",
			"www.cats.com/cats.html.",
			"So the host and the middle part of that top line",
			"there indicate precisely what page I am asking for.",
			"But cats.com in this case isn't going to be able to respond positively.",
			"They don't know we're talking about.",
			"And so this is something you might have seen before-- HTTP 1.1 404 Not Found.",
			"I couldn't find what you were asking for.",
			"By the way, I'm going to give you back some HTML, and usually that HTML",
			"is the content of some 404 page.",
			"And in the case of cats.com, it's probably",
			"some cute cats in a basket with a sad 404 face next to them,",
			"because you're going to be sad when you don't get page",
			"that you were looking for.",
			">> That's kind of the basics of what a protocol, the HTTP protocol requests",
			"look like.",
			"They're really similar to how we would make a similar interaction",
			"in just human conventions asking for something",
			"and getting it back or writing a letter and expecting a response",
			"letter in a particular format.",
			"That's pretty much what HTTP is just canonicalizing",
			"for all devices that wish to access web pages, hypertext transfers.",
			">> So a line of the form, this the method request target HTTP version,",
			"is called an HTTP request line.",
			"It's usually the first thing that is transmitted as part of an HTTP request",
			"or if you're asking for HTTP.",
			"It's sort of like, as I said, saying dear, blank at the top your letter.",
			"They know that you're writing them a letter.",
			"So this is very similar to saying, I know",
			"that they're making an HTTP request and this is the particular format",
			"they're asking for.",
			">> HTTP version is probably always going to be HTTP/1/1.",
			"1.0 also exists but isn't really used anymore.",
			"For purposes of CS50, GET is probably always",
			"what you're going to be using when you're actually",
			"making direct HTTP requests.",
			"But POST is another option that we're not going to talk about right now.",
			"And then request-target is what page on the host's server",
			"you would like to get.",
			"As I said, that host name is a separate line, usually",
			"the second line of the overall request.",
			"And so taken together, the host name and the request target",
			"specify a specific resource being sought.",
			"In our 404 example a second ago, I was asking again for www.cats.com,",
			"cats.com being the host.",
			"And in my request line, I said /cats.html.",
			"That was my request target.",
			"So overall I was asking for the contents or the resource located",
			"at www.cats.com/cats.html.",
			">> And then based on whether the resource exists",
			"and whether the server can deliver the resource pursuant to the client's",
			"request, you might get various status codes back.",
			"Some of these status codes you've seen because they're part of the response.",
			"Some of them, 200 OK, are probably pretty silent.",
			"You've probably never seen a page respond 200 OK.",
			"You just get the page.",
			"It's not like a 404 error, which is usually pretty clear.",
			"You usually see that it says 404.",
			">> So let's talk about what some of those status codes might be.",
			"Again, when the server responds to us, they're",
			"going to respond HTTP version status.",
			"Usually HTTP/1.1.",
			"What are these status codes going to be?",
			"Well, we might get a success.",
			"So in the success category, we might get code 200 with the text OK.",
			"What does this mean?",
			"Well, everything is good.",
			"You made a valid request.",
			"Here's a valid response.",
			"I was able to deliver exactly what you wanted.",
			">> Sometimes you might get other things that you won't notice right away",
			"but are somewhat failures.",
			"They're called redirections.",
			"There's two common ones here.",
			"301 Moved Permanently-- what this basically means",
			"is the page is now at a new location.",
			"It will live there forever.",
			"And most browsers will automatically redirect you.",
			"So you'll never really see a 301, either, unless you're",
			"using a really out-of-date browser, possibly,",
			"because the 301 response is part of the dot, dot, dot of the 301 response.",
			"It also tells you where the new page is.",
			"And so most browsers will just redirect you there,",
			"assuming that you want to go there.",
			">> Sometimes you'll also get 302 Found.",
			"And this one you actually might still see occasionally.",
			"Sometimes pages move temporarily.",
			"So it's not going to be built into the request telling the browser",
			"to permanently change any time it sees the request that you",
			"make to change it to something else.",
			"So you might see 302 Found, which basically",
			"says this page lives somewhere else.",
			"But it's not going to live there forever.",
			"It will eventually probably go back to where you think it is.",
			">> Then you'll get things like client errors.",
			"So these are ones you've probably seen, now.",
			"You probably haven't seen the 200s or the 300s,",
			"but you're probably familiar with the 400s.",
			"And that's what we'll talk about in a second, 500s as well.",
			">> You might see 401 Unauthorized.",
			"Usually this means you're trying to access a page,",
			"but you haven't logged in.",
			"So you try and go to some profile or something on Facebook",
			"or you try and access some-- you're at work.",
			"You're trying to access something on your work's internet,",
			"but you're not logged in.",
			"You can't see the page.",
			"You might get a 401 unauthorized, which means we probably",
			"will be able to satisfy this request, but first you need to log in to do so.",
			">> Conversely, you might get 403 Forbidden, which is it doesn't really",
			"matter if you're logged in or not.",
			"This request isn't allowed.",
			"The resource exists on the server.",
			"But you are not allowed to access it.",
			"This is usually internal files that live on the server for various reasons",
			"but are not intended to be accessed from the outside world,",
			"and so they are forbidden.",
			"They live there.",
			"I'm not saying I can't find it.",
			"But I'm saying I cannot give it to you.",
			"And it doesn't matter if you're logged in or not.",
			"And then of course, the very common 404 Not Found.",
			"The file doesn't exist on the server.",
			"I would like to satisfy your request, but I can't.",
			">> You also sometimes see server errors, the most common generally",
			"being 500 Internal Server Error, which doesn't actually tell you anything",
			"at all about what has gone wrong.",
			"But it's not actually you making a mistake in your request.",
			"It's actually the server failing to deliver on the request somehow.",
			"So 500 is the general response.",
			">> You'll also see something like Service Unavailable,",
			"which I believe is code 503.",
			"And Gateway Timeout-- if you ever had a page just",
			"sit there loading and loading and loading",
			"and you never know if it's going to load and then eventually it just says--",
			"just gives up.",
			"That's a 504 Gateway Timeout.",
			"The server wanted to execute your request,",
			"but something went wrong on the server side--",
			"not on your side-- to cause that to be a problem.",
			"Now, we could end the story here, but what I'm actually going to do now",
			"is I'm going to open up my browser and show you",
			"how you might be able to see some of these status codes",
			"even if you don't generally see them.",
			"And we're going to do that by taking a look at some developer tools.",
			">> All right So here I am now in my browser window.",
			"And I want to learn a little bit more about these HTTP requests.",
			"How do I know-- certainly we know if a page goes-- when something goes wrong,",
			"we get a 404.",
			"We've all seen that.",
			"We don't need to illustrate that.",
			"But what are some other ones?",
			"And how would we see these requests in action?",
			">> So first thing I'm going to do is open up Developer Tools.",
			"So Developer Tools are built into most modern browsers",
			"and allow us to see things that we don't otherwise",
			"see-- some extra information sort of being transmitted underneath our web",
			"requests.",
			"I'm using Google Chrome here.",
			"And to open Developer Tools in Chrome, you just hit F-12,",
			"and it's going to open it up on the side.",
			"Once I type the request, I'll zoom in so we can see what's going on here.",
			"But what I'm going to do in my browser bar is-- and I'll zoom in over here--",
			"I will make a request to www.google.com.",
			"We've all probably made this request before.",
			"I'm going to hit Enter.",
			"",
			">> Now, over here in my Developer Tools, I've chosen the Network tab.",
			"And you notice a lot of things here.",
			"Look at these-- 200 OK, 200 OK, some of these status codes coming up.",
			"I don't know why I'm getting 302 Found.",
			"I didn't realize I'd see that one.",
			"But basically notice that pretty much, in terms of my Google request--",
			"I made a very simple request for Google's page.",
			"And in the process of delivering my request,",
			"Google has apparently made a lot of other requests on my behalf.",
			">> But I've made a get request for Google's page and I'm getting a lot of 200 OKs.",
			"I'm not seeing 200 OK on my screen, but I'm getting",
			"a lot of requests that have been made.",
			"One more that I'm pretty sure is going to work",
			"is-- for those of you who are really old-school,",
			"you may know that Facebook was not always at Facebook.com.",
			"In its early days it was at wwww.thefacebook.com.",
			"They apparently could not get access to Facebook.com for quite awhile.",
			">> And so what I'm expecting here is to get information.",
			"And we'll see if this pans out.",
			"What I'm expecting here is to get information",
			"that Facebook has moved permanently from thefacebook.com to Facebook.com.",
			"So I'm expecting somewhere near the top of my requests",
			"over in my Developer Tools to get a 301 notification",
			"that Facebook has moved permanently.",
			"Again, I won't see 301 on my browser screen.",
			"And because it's a 301, it's a permanent move.",
			"My browser, being that it's a modern browser,",
			"is probably going to redirect me to Facebook.com anyway.",
			"But let's see what happens.",
			">> And now I'm going to go to thefacebook.com.",
			"And yep, there it is right at the top.",
			"It went away, but it was there.",
			"Let me scroll up here.",
			"",
			"Right here at the top.",
			"I made a request to thefacebook.com, and I'm getting a response",
			"that this page has moved permanently.",
			"And then 307 here is an internal redirect.",
			"And so this is what has actually moved me to the much more",
			"familiar www.facebook.com.",
			">> So these response codes do still happen, even if we don't see them.",
			"I'm not going to illustrate 401, 403, 404,",
			"because you've probably seen those at various points.",
			"And 500, I would just be kind of-- we'd get lucky",
			"if got a 500 because we don't know what servers are currently down anywhere.",
			"But these codes do exist, and there is a way",
			"to access them even if we don't see them firsthand on our systems.",
			"I'm Doug Lloyd.",
			"This is CS50.",
			""
		],
		"is_youtube": false
	},
	"video_041": {
		"section": "CS50x 2021",
		"subsection": "Week 8",
		"unit": "Shorts",
		"video_sources": [
			"https://edx-video.net/HARCS50X2016-V029600_DTH.mp4",
			"https://edx-video.net/HARCS50X2016-V029600/HARCS50X2016-V029600.m3u8"
		],
		"video_duration": 1294,
		"speech_period": [
			6.1, 2.69, 3.11, 3.239, 1.791, 4.24, 1.712, 2.208, 3.09, 1.16, 2.07,
			2.125, 2.241, 1.874, 5.69, 2.41, 2.78, 2.749, 2.061, 2.62, 2.389, 2.291,
			2.95, 3.54, 1.51, 4.13, 2.06, 3.4, 4.47, 1.2, 2.53, 3.871, 1.999, 3.41,
			2.27, 2.79, 1.92, 4.99, 3.92, 3.68, 2.04, 3.05, 6.08, 2.23, 2.8, 2.37,
			2.02, 2.7, 2.83, 2.91, 4.952, 2.958, 3.08, 2.609, 1.291, 1.458, 3.352,
			2.0, 2.54, 2.04, 5.27, 3.55, 3.08, 3.01, 3.297, 3.083, 2.92, 4.91, 2.45,
			2.44, 4.011, 2.749, 1.85, 2.76, 2.32, 3.71, 3.24, 2.08, 4.21, 1.1, 3.44,
			2.43, 1.48, 0.8, 2.92, 2.46, 1.45, 3.76, 2.91, 1.56, 2.119, 1.508, 1.583,
			2.05, 1.72, 3.72, 2.13, 3.79, 2.86, 2.5, 1.708, 2.282, 1.73, 3.18, 4.914,
			1.416, 3.4, 1.49, 3.19, 3.28, 2.68, 3.077, 0.833, 1.9, 1.54, 2.0, 1.81,
			2.63, 3.189, 1.791, 4.16, 3.889, 1.791, 2.58, 3.81, 4.384, 2.416, 1.25,
			3.49, 2.07, 1.75, 2.88, 2.6, 2.12, 3.15, 0.89, 2.99, 3.13, 3.28, 5.84,
			2.72, 4.12, 2.26, 5.0, 2.96, 3.38, 1.06, 3.98, 2.2, 2.297, 1.333, 1.833,
			5.217, 2.83, 3.2, 3.914, 0.916, 2.9, 1.91, 5.17, 2.45, 4.54, 2.126, 2.54,
			2.264, 2.186, 2.124, 3.91, 3.07, 3.82, 2.44, 4.11, 0.6, 2.65, 3.33, 2.79,
			2.63, 5.07, 0.79, 1.739, 2.291, 1.66, 2.624, 4.696, 0.822, 3.208, 2.71,
			3.25, 4.88, 0.99, 4.07, 1.88, 1.94, 2.69, 1.52, 3.88, 3.68, 2.61, 3.083,
			2.647, 2.46, 4.14, 1.11, 4.01, 3.26, 3.27, 3.59, 2.92, 3.77, 2.55, 2.93,
			1.71, 1.79, 3.88, 3.41, 2.46, 5.382, 2.958, 0.499, 1.213, 2.958, 4.02,
			1.06, 2.382, 3.208, 3.15, 3.84, 2.96, 4.864, 0.666, 2.35, 3.2, 3.2, 1.97,
			3.267, 1.833, 3.44, 3.04, 4.55, 1.05, 4.52, 1.3, 6.53, 1.83, 1.6, 1.96,
			1.54, 1.7, 2.58, 1.88, 4.43, 2.85, 4.85, 2.0, 3.66, 2.835, 1.625, 4.25,
			0.56, 1.63, 3.46, 1.1, 2.56, 3.42, 1.73, 1.15, 1.26, 2.46, 1.16, 3.424,
			1.416, 4.26, 2.065, 2.375, 2.8, 2.33, 3.81, 3.82, 0.98, 1.82, 2.927,
			2.833, 1.65, 2.41, 2.66, 1.25, 2.567, 2.333, 2.26, 1.73, 1.46, 2.73,
			1.387, 2.333, 2.84, 1.11, 3.62, 1.88, 1.54, 1.59, 2.38, 2.25, 2.68, 3.08,
			2.429, 1.791, 4.35, 3.29, 2.21, 2.2, 0.18, 1.333, 2.167, 2.708, 0.882,
			4.864, 2.916, 2.84, 3.28, 2.167, 1.833, 0.999, 3.381, 2.547, 1.083, 2.51,
			1.07, 1.67, 2.79, 3.744, 1.166, 1.666, 1.774, 2.95, 1.5, 1.85, 2.41, 1.73,
			1.33, 6.34, 1.28, 1.39, 1.28, 3.88, 3.44, 2.11, 4.84, 2.26, 2.42, 3.72,
			3.63, 1.64, 1.49, 4.34, 2.3, 3.48, 2.05, 0.89, 2.08, 1.81, 3.0, 2.504,
			1.416, 4.01, 3.77, 2.83, 3.58, 2.72, 2.78, 2.041, 2.069, 4.25, 2.1, 2.46,
			5.13, 5.02, 2.43, 4.43, 1.58, 4.07, 3.939, 2.681, 3.36, 2.62, 1.91, 3.24,
			3.89, 2.559, 2.691, 4.89, 3.29, 1.43, 2.22, 5.55, 2.661, 2.749, 4.13,
			2.93, 2.88, 3.65, 5.12, 2.76, 2.41, 4.93, 8.27, 4.43, 3.57, 2.57, 4.179,
			2.541, 3.35, 2.437, 2.083, 1.91, 0.541, 1.679, 1.97, 5.4, 3.97, 3.93, 3.2,
			3.55, 3.64, 2.62, 3.51, 1.99, 2.31, 1.208, 1.952, 2.37, 3.53, 4.19, 3.83,
			3.54, 2.32, 3.52, 4.41, 2.53, 2.31, 3.51, 4.63, 2.01, 2.97, 3.16, 2.33,
			1.95, 2.2, 2.97, 4.75, 4.38, 4.36, 1.859, 1.541, 2.63, 1.749, 4.151, 3.45,
			1.38, 2.07, 3.914, 1.916, 3.23, 4.18, 3.577, 2.833, 3.06, 0.92, 2.26,
			1.409
		],
		"transcript_en": [
			"",
			">> DOUG LLOYD: So we spent about-- if my math is right,",
			"and I think looking back-- I think we spent about 35 videos talking",
			"about various aspects of C, maybe a little more, maybe a little less.",
			"And we didn't cover everything in C, but we",
			"covered a big chunk of the language, the vast majority of it,",
			"certainly for common uses.",
			"Now we're going to talk about another language, HTML.",
			"And we're going to cover it in just one video.",
			">> But that's going to be OK.",
			"That's going to actually become something you're going to get used to.",
			"Now that you have the fundamentals of one language,",
			"it's actually pretty easy to start learning others.",
			"So we're going to start to step a little back",
			"and gloss over the basic differences between these languages",
			"and sort of leave you to it.",
			"There's a lot of really great resources on the internet, which",
			"we're going to start directing you towards because the internet is",
			"a vast repository of information.",
			"And so it's not like you'll be losing out necessarily",
			"by not having the information covered in a video.",
			"You'll still be able to get everything you need and use",
			"the knowledge you've already built up by understanding C",
			"to make the learning curve for these other languages actually a lot flatter.",
			"I promise.",
			">> But let's talk about one language that's really fundamental for every web",
			"page, which is HTML.",
			"HTML is the Hyper Text Markup Language.",
			"HTML is a language but it is not a programming language.",
			">> HTML doesn't have variables.",
			"It doesn't have logic or functions or anything like that.",
			"We can't do any programming per se in HTML.",
			"Sometimes you'll hear people describe themselves",
			"as HTML programmers, which isn't entirely accurate.",
			"We can't write HTML programs.",
			">> HTML is just used to mark up text.",
			"It's called a markup language.",
			"And what this does-- this markup-- we use tags in HTML and these tags--",
			"this markup-- semantically defines the structure of a page",
			"and causes the plain text that exists between tags to be interpreted",
			"by browsers in different ways.",
			"And perhaps it's best to explain this by way of an illustration.",
			">> Here's a very simple HTML page, not an HTML program, again, an HTML page.",
			"And we know it's an HTML page because we've",
			"bounded everything with HTML tags.",
			"So this is what an HTML tag looks like.",
			"It's between angle brackets.",
			"And notice at the top we have HTML and at the very bottom,",
			"after we've done what is apparently a lot of other HTML,",
			"we have angle bracket slash HTML.",
			"So that sort of is the boundary between what is HTML and what is not.",
			"And of course, conventionally, just as you wrote all of your C programs",
			"with dot C extensions, all of your HTML files",
			"will end with dot HTML extensions.",
			"But there's more going on here.",
			"We don't just have these HTML tags.",
			"We apparently have this thing called a head tag.",
			"Well, OK, what's that?",
			">> Well maybe it's best to distinguish by way of a body,",
			"body being the content of the web page.",
			"So maybe the head tag defines stuff that isn't in the browser window proper,",
			"but is somehow important to our web page being rendered correctly.",
			"For example, inside of the head tag we have title tags.",
			">> So title being hello world, that's actually going to be what",
			"shows up in the tab in Chrome or in safari or Firefox--",
			"whatever browser you prefer-- that's what's going to show up in the title.",
			"And before tabs it would show up in your entire browser window",
			"and you can only have one page open in a browser window at a time.",
			"So that's going to be the title of my page up in the tab",
			"or the browser window bar, hello world.",
			"And then the content of my web page will be world, hello.",
			"So let's take a look at what some thing like this might look like.",
			"This is a pretty simple HTML page.",
			"So I'm here in my CS50 IDE and I've zoomed in a little bit.",
			"And I'm just going to open up hello dot HTML",
			"and show you that this is pretty much the page content that we saw before.",
			"My simple HTML, head tags, title tags, body, and so on.",
			"I've indented to be clean.",
			">> And then what I can do in my IDE is just preview the page.",
			"And there we go.",
			"The content of my page is world, hello, and I don't see anything",
			"in from the head tags there.",
			"It's just the content of the body.",
			"World, hello.",
			"And again the body just said, world, hello.",
			"The other part is missing.",
			">> So that's really all it is.",
			"This is a very simple basic HTML page.",
			"Now I've indented my HTML to be really nice and organized,",
			"but I don't actually have to.",
			"I could make it look pretty ugly.",
			"And this would still work.",
			"This would be the exact same web page.",
			"I've just gotten rid of all of the white space.",
			">> As it turns out, white space is data.",
			"And so when we're sending data from sender to receiver, from server",
			"to client, data costs money.",
			"And so getting rid of whitespace is actually a good idea",
			"if you're somebody who serves up a lot of web content.",
			"It's a bad idea if you're somebody who's learning this stuff",
			"and you want to have it nicely organized.",
			"This is a lot easier to parse than this.",
			"But it's functionally identical.",
			">> The indentation and stuff like that doesn't actually matter in HTML.",
			"All that matters is opening tags and closing tags in the correct order.",
			"Notice what happened here, though.",
			"The markup gives us a way to communicate extra information",
			"about what we've written.",
			"The Hello, World part was interpreted as the title.",
			"And the world, hello part was interpreted as the content",
			"or what should be visible on my web page.",
			">> There are over 100 of these different tags and lots of great resources",
			"online to find them.",
			"We're going to talk about a few of them in this video, some",
			"of the really fundamental stuff.",
			"But we're not going talk about it all because it",
			"would be exhaustive to do so.",
			">> Another thing you can do, though, is open up developer tools.",
			"And if you recall from our video on HTTP,",
			"I explained how to open up developer tools.",
			"In Chrome it's usually the F12 key to open up the developer toolbar.",
			"Then instead of choosing the Network tab, you can choose the Elements tab.",
			"And if you load a web page, you'll actually",
			"see the HTML that creates that web page.",
			"And so you can learn a lot about HTML by looking at your favorite websites",
			"and seeing how they build the various pieces of them that you like.",
			"So maybe there's this cool pattern or something like that.",
			"How do they make it with HTML?",
			"Well you can just open up your developer tools and hover over that element",
			"and see exactly what HTML makes it.",
			"So that's a really good way to learn HTML,",
			"and I strongly recommend that you do it both to learn HTML",
			"and also to learn a little bit about some of the options",
			"available to you in developer tools, which",
			"will certainly come in handy as you begin doing more intensive web",
			"programming.",
			">> So let's take a look at a couple of common HTML tags.",
			"And we'll jump and take a look at what these tags will also render",
			"as by looking at some files in my IDE.",
			"So here are three very basic tags for tweaking the visual appearance of text.",
			"There's B tags, I tags, and U tags.",
			"And respectively what they do is render the text between them in bold,",
			"italics, and underlining.",
			"So let's see what that would look like on an actual web page in my IDE.",
			">> So here in my IDE I have a file called BIU dot HTML.",
			"BIU dot HTML just being bold, italics, underlining.",
			"I'll open it up.",
			">> And we'll see that here I have this text is B tags bold.",
			"This text is I tags italic.",
			"And this text is U tags underlined.",
			"What is this going to look like?",
			"Well again, all I have to do is go over here",
			"to my browser, my file browser, click Preview, and this is what comes up.",
			">> The text in between the B tags is indeed now bold.",
			"The text in between the I tags is indeed now italic.",
			"And the text in between the U tags is indeed now underlined.",
			"So that's pretty good.",
			"We now know how to make text look a little more fancy",
			"or draw emphasis to certain things.",
			"Another couple of common tags here are paragraph tags, P, and header tags,",
			"which I've rendered here as HX.",
			">> These P tags, these paragraph tags, break your text up into paragraphs.",
			"It's not enough to just hit Enter and leave spaces,",
			"because a computer is only going to do what you tell it to do",
			"and it ignores white space for the most part.",
			"So we can't just hit Enter and expect our computer",
			"to interpret that we want to start a new paragraph.",
			"We have to very explicitly say this is one paragraph-- this is another--",
			"by enclosing each in a set of P tags.",
			">> And we also have these options for H tags, these header tags.",
			"We have six different levels of headers, one, two, three,",
			"four, five, and six, which are progressively larger and larger",
			"headers.",
			"And they get smaller and smaller and smaller and smaller.",
			"So we have a top level header, a second level header, and so on, and so on.",
			">> Let's take a look at maybe some P tags and some header tags",
			"in action on a web page.",
			"So here in my IDE I have a file called PH dot HTML, PH being paragraphs",
			"and header tags.",
			"Open that up.",
			"There's a lot going on here because I've put some lorem",
			"ipsum, some just random text in here.",
			"So I'll zoom out a little bit because there's so much going on.",
			"But notice that I have at the very top here I have an H1, a level one,",
			"header tag.",
			"Then I have a paragraph, which is just a bunch of random text-- lorem ipsum--",
			"just default standard filling in text.",
			"So I have two paragraphs inside of that level one header and then down below I",
			"have a level two header here on line 24, a second level header, and another two",
			"paragraphs.",
			"Well what does this look like if I view it in my preview?",
			"Let's see.",
			">> So notice that the first level header here",
			"is actually quite a bit bigger than the second level header.",
			"So we used H1 tags.",
			"And notice that the P tags allow us to break things out into paragraphs.",
			"If we had gotten rid of those P tags and actually just put Enters or Returns",
			"in between what we hoped would be the different paragraphs,",
			"they would all just slam together and it wouldn't have this nice paragraph",
			"separation with space above and below.",
			"And so that's what paragraph tags and header tags",
			"are commonly used to do to draw attention to portions of our web page",
			"in that way.",
			">> Next up are some tags that we use to build lists on our web page.",
			"So we have unordered lists-- ULs-- which are just",
			"bulleted lists, ordered list which are numbered--",
			"OLs-- and inside of either one of those we need to have",
			"sets of how to indicate list items, LI.",
			"And so we have open UL tag and we put items inside of it.",
			"And then when we're done with that, we can close the UL tag.",
			">> And similarly we can have an ordered or numbered list",
			"and put list items inside of that.",
			"So let's take a look at a couple of lists",
			"and what they would render as on CS50 IDE.",
			"So I have here in my IDE a file called lists dot HTML.",
			"Let's take a look.",
			">> And notice here I have an unordered list with five things in it.",
			"And then I have an ordered list, and I've changed the tag a little bit,",
			"right?",
			"I've said start equals six.",
			"It turns out with an ordered list I can set the starting point wherever",
			"I want-- by default it will be one-- by just adding this so-called attribute",
			"to my OL tag.",
			"And so this list will start counting at six.",
			"So the elements of that numbered list should be six, seven, eight, nine, ten,",
			"because there are five elements in the list, as opposed to one,",
			"two, three, four, five, which would be the case if I had said OL",
			"without specifying the start attribute.",
			">> So we'll just preview this so you can get a sense for what's going on here.",
			"And there we go.",
			"There's my list.",
			"The first five elements are unordered or bulleted lists.",
			"And the next five elements are a separate ordered list",
			"starting from six.",
			"So that's how we can build lists using HTML.",
			"Another thing you might want to do with HTML",
			"is build a table of information of rows and columns",
			"to present information in a particularly organized way.",
			"To do this with HTML we can have a table definition beginning open bracket",
			"table.",
			"And then inside of that table we might have a set of rows, TR tags",
			"to indicate each row.",
			"And then TD tags go inside of TR tags to specify a column within a row.",
			">> Why is it called TD and not TC?",
			"Well, TD stands for table data.",
			"Usually you're putting your information there.",
			"So that's why it's TD and not TC.",
			"It's a little bit confusing.",
			">> So you have table tags and inside of your table tags",
			"you have a number of rows, TRs.",
			"And inside each row you have TDs for the number of columns",
			"that you want to have in that particular row.",
			"Let's take a look at a very simple table over in CS50 IDE.",
			">> So I have here a file called table dot HTML.",
			"Let's have a look at what that looks like.",
			"There's a lot going on here but if you notice I have a table open.",
			"I'm starting the definition with table.",
			"And then in my first row I apparently have four columns, one, two, three,",
			"four.",
			"And then I'm done with that row.",
			">> Then I start another row and do two, four, six, eight.",
			"Finish that row.",
			"Do another row, three, six, nine, 12.",
			"And then a last row, four, eight, 12, and though it's",
			"a little cut off here, 16.",
			">> I finished that row.",
			"I finished the table.",
			"And then I'm done with my HTML.",
			"What does this look like?",
			"",
			"Well, it's not really much to see.",
			"I've clearly organized my information in a somewhat more organized way.",
			"But it's not super pretty here.",
			"And we're going to deal with that when we talk about CSS.",
			"We'll revisit this idea of what we do to make a table--",
			"maybe format it a little bit better?",
			"But I do still have four rows, each of which has four columns,",
			"and really what this amounts to is a very simple four by four multiplication",
			"table.",
			">> Just a few more tags we'll talk about.",
			"Let's talk about the concept of an HTML form.",
			"So you may have seen this in the context of logging into a web page.",
			"Usually you type in your user name.",
			"You type in your password, and you're good to go.",
			"That would be the beginning of a form.",
			">> Skipping over div a second.",
			"We also have inputs which kind of fit inside of forms.",
			"These are the elements that you're actually typing into,",
			"or the radio buttons you're ticking, or the check",
			"boxes that you're ticking off.",
			"So these go inside of forms.",
			"And they comprise basically each row of the form",
			"if your form is formatted well.",
			"Then there's this concept of a div, which doesn't really",
			"fit in any particular category of tags like the ones I've",
			"been doing previously.",
			"It just sort of demarcates the beginning of some arbitrary division--",
			"div-- of the page.",
			"There's no visual break.",
			"There's no line.",
			"It's not set off as a separate chunk automatically.",
			"You'd have to style it that way to do that.",
			">> It just sort of says I want a piece of space on my web page,",
			"and I'm just going to call it this division of my page.",
			"We can put stuff inside of divs, and in fact,",
			"when we head over to IDE in a second, we'll",
			"see that I'm putting my form inside of a div.",
			">> So I have here in my IDE a file called div form dot HTML.",
			"Let's open it up.",
			"Notice that like I said, div is kind of arbitrary.",
			"Right?",
			"It doesn't really mean anything.",
			"So I have an arbitrary first division of my page.",
			"And then instead of another div later on, starting on line eight,",
			"I have this form.",
			"And inside of the form I have a number of inputs, fields of the form.",
			"So I have a field whose name is A-- which doesn't really mean anything",
			"right now-- that apparently takes text, another one that",
			"takes a password, another that's a Radio button, another that's a check box,",
			"and another that's a Submit button.",
			"Well, what does this all actually look like?",
			"Well, let's take a look.",
			"We'll open it up in our preview window.",
			"Notice that this arbitrary first division-- there's",
			"no visual separation here.",
			"It didn't really do anything, right?",
			">> And then I have my form.",
			"And I didn't do any special formatting.",
			"So the form is just one big row of information.",
			"If I had formatted my form differently, I might have it line by line by line.",
			"But I didn't do any styling.",
			"Again, we're not talking about CSS here.",
			"We're just talking about HTML.",
			">> Well in my text form I can type-- remember that forms of type text",
			"so I can put my name.",
			"And in my password I can type my password.",
			"And because that field is of type password,",
			"you don't know what my password is.",
			"It's all dots.",
			">> I can also choose to tick off a radio button or tick off a check box.",
			"Or I could submit my form.",
			"And I didn't do anything, so when I submit my form,",
			"the page just refreshes.",
			"But I could perhaps configure my Submit button to do something else.",
			"And we'll see what we can do with that in a future video on PHP.",
			"But this builds a very simple form that we",
			"can use to have users interact and submit information to our website.",
			">> One last comment before we move on to some other tags",
			"are to take a look at this input tag one more time.",
			"Notice that I've highlighted the ends of the tag in red.",
			"Every other tag we've seen so far has had a beginning and an end, an opening",
			"tag and a closing tag.",
			">> But an input tag doesn't.",
			"There's no text that goes in between input tags.",
			"All of the information we're intending to convey",
			"is bound up as part of the attributes of that input.",
			"Notice we have input name equals x.",
			"Type equals y.",
			"That's really all the information we need.",
			">> This is called a self closing tag.",
			"It doesn't require an opening and a close because all of the information",
			"is contained inside the tag and its attributes.",
			"So sometimes you'll see this, too.",
			"So just be aware that if you have a tag that is entirely self-contained,",
			"it opens and closes itself with the open angle bracket on the left",
			"and the slash angle bracket on the right.",
			"We'll see another one of those right now with image tags as well.",
			">> Before we talk about images, we need to talk about hyperlinks.",
			"If we want our web page to be interactive and move us around,",
			"it would be nice be able to click on one of those",
			"what has typically been a blue link.",
			"This is actually how we build a hyperlink in our web page.",
			"And interestingly enough there's another HTML tag",
			"called link, which is not a hyperlink.",
			"A here stands for anchor, and that's how we indicate a hyperlink.",
			">> A href equals x means go to web page X. And everything",
			"between the open A tag and the close A tag",
			"is what's going to be that underlined blue text that looks like a link",
			"that we're familiar with.",
			"Below that we have an image tag, which is a self closing tag for displaying",
			"an image located at X. And you might be able to change",
			"that image by specifying width and height",
			"and other attributes in that dot dot dot there.",
			">> At the very bottom here we have a very interesting",
			"looking tag that doesn't have a closing tag.",
			"It's exclamation point doctype HTML.",
			"So HTML has been around since the early 1990s for building web pages,",
			"and it's gone undergone several revisions since then.",
			"Most recently in 2014 it underwent a revision",
			"called HTML5 which is now the current sort of de facto HTML standard.",
			">> To indicate that our web pages are written using HTML5,",
			"this is how we start off.",
			"It can be omitted but what that basically",
			"means is you can't use any of the tags that are HTML5 tags, those new tags.",
			"So we always start off if we're using HTML5.",
			"And all the tags we've talked about previously are not HTML5 tags.",
			"But this would indicate that HTML5 tags will be present.",
			"And so we have exclamation doctype HTML, which",
			"is at the very beginning of our HTML file, and then after that point",
			"we actually have our HTML open tag and proceed from there.",
			">> The last one is a comment tag, which looks slightly different, too.",
			"It starts off with angle bracket exclamation dash",
			"dash but no closing bracket.",
			"In between those two elements there is where you write your comments.",
			"And let's take a look at images and comments and links in CS50 IDE.",
			">> So I have here a file called image link dot HTML which I'm going to open up.",
			"And notice I've got a couple of comments here in my HTML comments.",
			"So just like in C and other programming languages,",
			"HTML just by being a markup language does have the ability to have comments.",
			"And so I'm apparently going to place a picture of Rick Astley",
			"somewhere between this div tag, this arbitrary division.",
			"Apparently that file is located at Rick dot JPEG, which",
			"if we head back over to my file tree for a second,",
			"is a file that exists in the current directory.",
			"So that's OK.",
			"I can reference it.",
			">> Then I can have internal links.",
			"So notice on line 11 here my href is hello dot HTML.",
			"So that just refers to hello dot HTML which exists in the current directory.",
			"And I can also have external links by just specifying HTTPS",
			"to indicate that I'm not talking about a file in my current directory.",
			"I'm talking about a file that exists somewhere on the internet, which I have",
			"to request using the HTTP protocol.",
			">> So let's take a look at what this page might look like",
			"and get ready for a picture of Rick Astley to show up on your screen.",
			"So I'll preview this.",
			"There's Rick Astley at the very top in this arbitrary",
			"division I put it at the top.",
			"And then down below I have my links, right?",
			">> I have a link to hello dot HTML.",
			"And if I click that, I get moved over to this page",
			"that we're very familiar with from the very beginning of our program.",
			"If I pop that page open again, if I pop image link open one more time,",
			"I can also go externally to CS50's website.",
			"And there we see-- I'll zoom out a little bit here--",
			"we'll see CS50's website sort of embedded in the middle of our page.",
			"So I was able to make an internal link as well as an external link.",
			">> The last rule with HTML that we're going to talk about here",
			"is that your HTML should be well formed.",
			"In C we talked a lot about the various syntax of things.",
			"In HTML the syntax really revolves around tags.",
			"Every tag you open needs to be closed.",
			"And in fact, every tag you open should be closed in reverse order.",
			">> So if you open a bold tag, an italic tag, and then an underline tag",
			"to do all three to a particular set of text,",
			"you should close them in reverse order.",
			"So if you opened bold, italic, underline, you",
			"want to close underline, italic, bold.",
			"This sort of encapsulation is what keeps HTML nice and organized.",
			">> Unlike C, though, syntax errors won't actually cripple your HTML possibly.",
			"Your HTML may be not well formed but would still work.",
			"And so these errors can sort of slide by.",
			"It's up to you to really be vigilant.",
			"Sometimes they will fail but sometimes you can get away with it.",
			">> It can be a really difficult task, though,",
			"to keep track of when you opened a tag, when you closed it,",
			"especially as your HTML files get bigger and bigger.",
			"You'll want some help.",
			"And there are online validator tools that you",
			"can use to have a look at your web page and see if it's well formed HTML.",
			"And you should definitely take a look at those",
			"and start to use them as you begin doing some work with HTML,",
			"writing HTML, just so you get some good habits about organizing",
			"your HTML in a good way and good style and making sure",
			"that you're not doing anything that could create a syntax error that",
			"would cause you a bit of a problem down the road.",
			">> I'm Doug Lloyd.",
			"This is CS50.",
			""
		],
		"is_youtube": false
	},
	"video_042": {
		"section": "CS50x 2021",
		"subsection": "Week 8",
		"unit": "Shorts",
		"video_sources": [
			"https://edx-video.net/0b03adf6-1516-4493-a1d9-46fe09674054-mp4_720p.mp4",
			"https://edx-video.net/0b03adf6-1516-4493-a1d9-46fe09674054.m3u8"
		],
		"video_duration": 819,
		"speech_period": [
			5.66, 3.08, 2.06, 2.66, 2.689, 1.041, 3.71, 4.49, 5.02, 2.125, 0.916,
			1.144, 4.295, 1.26, 2.66, 3.43, 1.95, 2.98, 2.12, 4.14, 3.27, 3.04, 2.74,
			4.144, 0.666, 4.18, 4.161, 1.499, 2.139, 3.291, 3.58, 6.1, 1.43, 2.03,
			3.27, 2.08, 3.36, 3.39, 4.405, 1.625, 4.5, 3.63, 2.989, 3.461, 2.89, 4.34,
			1.701, 2.249, 3.26, 2.61, 0.749, 3.321, 2.49, 2.77, 2.7, 1.764, 3.166,
			2.795, 2.865, 3.87, 3.16, 6.08, 3.31, 2.09, 4.93, 2.79, 1.54, 2.125,
			2.165, 4.71, 3.29, 4.23, 2.73, 1.3, 1.61, 4.31, 1.34, 3.09, 5.1, 3.37,
			2.439, 3.291, 3.291, 1.089, 5.014, 1.416, 2.63, 2.3, 2.67, 3.91, 1.71,
			1.64, 2.92, 2.812, 2.458, 5.83, 0.83, 1.7, 1.999, 4.971, 4.34, 2.65,
			2.899, 3.041, 2.24, 4.43, 3.06, 3.32, 2.06, 3.359, 1.041, 3.44, 2.64,
			1.73, 3.71, 2.62, 2.21, 2.69, 2.72, 3.1, 3.81, 3.28, 2.47, 5.09, 2.97,
			5.97, 2.15, 2.74, 3.21, 4.01, 4.74, 4.01, 2.3, 3.851, 2.249, 2.416, 5.804,
			1.92, 2.25, 3.01, 4.16, 4.39, 4.12, 2.33, 2.07, 2.27, 4.87, 3.24, 2.24,
			2.62, 3.16, 3.49, 2.47, 2.61, 1.802, 1.958, 3.29, 2.51, 2.36, 3.06, 2.38,
			3.954, 1.166, 3.2, 5.867, 1.583, 1.49, 1.69, 3.065, 2.625, 2.73, 3.07,
			1.404, 1.625, 2.875, 2.056, 1.165, 1.875, 1.708, 2.894, 2.208, 4.21, 0.76,
			2.0, 1.86, 3.17, 2.37, 2.48, 3.9, 4.86, 0.829, 2.541, 2.0, 0.87, 2.35,
			1.56, 1.291, 3.399, 2.64, 4.04, 3.06, 4.28, 2.427, 1.333, 1.74, 2.58,
			2.091, 1.749, 3.557, 1.583, 3.02, 3.79, 2.67, 4.11, 4.41, 3.61, 2.61,
			3.555, 1.176, 2.499, 2.69, 2.48, 1.17, 1.83, 2.58, 2.56, 3.32, 1.337,
			2.583, 3.31, 2.59, 3.18, 3.73, 2.87, 1.254, 1.666, 4.704, 0.916, 2.38,
			3.93, 3.43, 2.88, 2.5, 2.88, 3.76, 1.47, 2.04, 2.78, 1.861, 1.749, 3.07,
			2.01, 3.454, 2.166, 4.011, 1.749, 2.26, 5.42, 1.94, 1.97, 3.204, 1.916,
			4.78, 3.52, 4.031, 1.749, 2.836, 1.874, 2.46, 3.14, 1.577, 0.833, 1.66,
			2.54, 3.93, 4.1, 2.767, 3.083, 3.53, 3.67, 2.087, 2.083, 1.299, 2.541,
			3.1, 1.67, 2.26, 3.14, 2.61, 0.92, 2.27, 2.171
		],
		"transcript_en": [
			">> [MUSIC PLAYING]",
			">> DOUG LLOYD: So let's take one more video to talk about one more language.",
			"This time we'll talk about CSS.",
			"So CSS, which is short for Cascading Style Sheets,",
			"is another language we use when constructing websites.",
			"Think about it like this.",
			"If HTML is what we use to organize the content we want to put on our page,",
			"CSS is the tool that we generally use to customize how our websites look,",
			"and how the user experience really is, interacting with our website.",
			">> Similar to HTML, CSS is not a programming language.",
			"It doesn't have logic.",
			"It doesn't have variables.",
			"It doesn't have any sort of that flow related things that C does.",
			"It's a styling language.",
			"And its syntax is pretty simple, and just describes",
			"how the elements of our page have certain HTML",
			"elements should be modified.",
			"To that end, if you haven't yet watched our video on HTML,",
			"or are unfamiliar with HTML generally, you",
			"may want to take a look at that first, because this discussion of CSS",
			"is going to depend on some knowledge of HTML.",
			">> So here's a really simple CSS stylesheet.",
			"Even if you've never programmed with CSS before,",
			"I'm pretty sure you can figure out exactly what this stylesheet does.",
			"What does it do?",
			"Well, applied to the body of our web page, everything between body tags",
			"on our HTML, and it sets the background color of that page to blue.",
			"Well, it's a very simple stylesheet.",
			"It's actually very human friendly language, CSS.",
			"So even if you've never used it before, you probably could guess what that did.",
			"In fact, if we loaded a page, where this stylesheet was embedded somehow,",
			"the background color of our page would be blue, and not the standard white.",
			">> So how do we build stylesheets?",
			"Well first, we have to identify a selector.",
			"In the last example, that selector was body.",
			"Then we have an open curly brace, and we're",
			"going to begin defining the stylesheet for that selector.",
			"In between the curly braces, we just have a list of key value pairs.",
			"The previous value pair was background color blue semicolon,",
			"but we could do more and more of these.",
			"You could have multiple things applying to that tag, that selector body.",
			"Each one of them is separated by a semicolon, and we call each one of them",
			"a declaration, a CSS declaration.",
			"When we're done with all the styling we want to apply to that particular tag,",
			"we just have a closing curly brace to end the stylesheet,",
			"and we're done defining the stylesheet for that particular selector.",
			">> What are some common CSS properties?",
			"Well, maybe you want to put a border around something.",
			"So you can say, border, that would be your key,",
			"and then your values would be, what style, color, and width",
			"you want it to be.",
			"So the style could be a solid line, a dotted line, a dashed line,",
			"a ridge line, which would be wavy line.",
			"Maybe you want to have it be blue or black or green.",
			"Maybe you want it to be 1 or 2 or 10 pixels wide.",
			"You can specify all of those things.",
			"Maybe you want to set the background color of your page in a particular way.",
			"We already saw that, setting the background of the body to be blue.",
			">> Then you can use a key word, so CSS has certain colors",
			"that are built into it, blue, green, black, a very simple colors we know.",
			"But you can also specify any hex color that you'd like.",
			"Recall that colors can be identified by a set of three hex numbers",
			"from 0 to 255, rg and b, the red, green, and blue component.",
			"And so we can specify any color we want by,",
			"instead of using blue or green or black, using pound and then six digits of hex,",
			"and that would give us the six digit color.",
			"So that's the background color.",
			">> We also have the foreground color, which is usually",
			"going to be the text of your page.",
			"And you could similarly do that with key word and or six digit hex.",
			"So you can specify any color you want for the text of your page",
			"against a particular background color, up above.",
			"You can also change and deal with font, and the way text",
			"is rendered on the page.",
			">> So you can change your font size.",
			"You can use key words, such as extra, extra small, or xx small, or medium,",
			"large, and so on.",
			"You can use fixed points, 10 point, 12 point, and so on.",
			"You can use percentages, 80%, 20%, where 100% is the default font",
			"size, which is usually going to be something like 11 or 12 points.",
			"Or you can even base it off of the most recent font size.",
			"If you just wrote something and you know what you want is for it to be smaller,",
			"but you don't know exactly what size you want it to be, well, you can just say,",
			"font size smaller.",
			"And it will base off of the, just up above, it's font size.",
			"And you can get smaller or larger.",
			"So there's a lot of different ways to specify font size.",
			">> You can also specify what font family you want.",
			"If you have a particular name, there's a way in CSS--",
			"we're not going to talk about it here-- to define a very specific font",
			"and embed it into your page.",
			"You can also use generic names.",
			"There's a lot of web safe fonts that are pre-defined in CSS.",
			"And if you are a user of Microsoft Office in the last 20 years,",
			"you're probably familiar with a lot of these web safe fonts",
			"already, Times New Roman, Arial, Courier New, Georgia, Tahoma, Verdana,",
			"and so on.",
			"Those are all considered web safe fonts.",
			"And actually, part of the reason they came to be",
			"was to be used to make web-- every page had access to this default set of fonts",
			"with various serifs, and all this font stuff we won't get into,",
			"but these are usually accessible in your CSS,",
			"even if you don't otherwise define the fonts.",
			"Lastly, you can align your text, instead of it being, by default, aligned",
			"to the left, you could align it to the right,",
			"or you could align it centered, or justified so that it hit both margins.",
			"So those are all options you can use to change what your text looks like,",
			"and how it's displayed on your page.",
			">> Your selectors don't have to be tags only.",
			"We previously saw a body tag selector, and tag selector",
			"does look just like that.",
			"You name a tag, and then you define a stylesheet for that tag.",
			"But you can also do something called an ID selector.",
			"An ID selector looks pretty similar.",
			"But notice, that now I'm not using an HTML tag, I'm using, in this case,",
			"#unique, or hash unique.",
			"If you recall from our video on HTML, we talked",
			"about how tags can have attributes.",
			">> And one attribute that applies to pretty much all HTML tags,",
			"but we didn't talk about it, is something called an ID tag.",
			"So this particular CSS would apply only to HTML tag that has",
			"a very specific ID, that you've named.",
			"So if you have somewhere in your code, somewhere",
			"in your HTML file, a tag and you specify as an attribute to that tag,",
			"ID equals unique, this particular stylesheet",
			"here will only apply in between that tag with the ID of unique.",
			">> You can also do something called a class selector.",
			"So in addition to having ID attributes, you can also",
			"add a class attribute to HTML tags.",
			"And when you use a class attribute, it can be applied to multiple tags.",
			"So if you have several things that are similar, maybe you want to say,",
			"open tag blah, blah, blah, blah, class equals students.",
			"And then this particular stylesheet would apply",
			"to every tag whose class is students.",
			"In this case, we'd set the background color to yellow,",
			"and we'd set opacity, which is a tag we didn't talk about,",
			"but just deals with how transparent something is, to 70%, in this case.",
			">> There's two options for writing stylesheets.",
			"You can write them directly into your HTML",
			"by placing the stylesheets in between style tags.",
			"And those style tags go inside of the head tags of your web page.",
			"The perhaps more preferred way to do it is to write a separate .css file,",
			"and then link it into your document using link tags.",
			"Link tags, again, are different from hyperlinks,",
			"if you recall from our video an HTML.",
			"And link tags are how we pull in separate files.",
			"It sort of like the equivalent of the #include for web programming.",
			">> So let's take a look at table.HTML.",
			"If you recall from our HTML video, I showed",
			"an example of a very simple multiplication",
			"table that looked pretty ugly, and maybe there's",
			"a way to make it better with CSS, to make it actually look",
			"more like a multiplication table, or something",
			"that isn't just stuck together with no actual division",
			"between the rows and the columns.",
			"So let's head over to CS50 IDE, and take a look",
			"at how CSS can, sort of, tweak what we started with before,",
			"and make it something a lot better.",
			">> So we're in CS50 IDE now, and if unfamiliar,",
			"we'll pull up in this table that HTML page.",
			"Table.HTML basically just defines the contents",
			"of a multiple-- it was supposed to be a four by four multiplication table.",
			"It's pretty straightforward.",
			"And we would think that it would look pretty well organized.",
			"But in fact, when we preview this page, we see that it's kind of ugly, right?",
			"Clearly we have rows and columns here.",
			"There some sort of separation.",
			"But it's not a meaningful separation.",
			"We're not actually getting too much information here.",
			"And there's no separation between the rows and columns in terms",
			"of horizontal or vertical rules.",
			"We could probably make this look a little bit better.",
			"So let's try.",
			"So I'm going to close this tab up here.",
			"And I'm going to close my table.HTML, and I have another version here",
			"called table2.HTML.",
			"We'll open that up.",
			"The body of the page is pretty much the same,",
			"but I've changed a little bit at the top.",
			"And I'll scroll up here.",
			"Notice that this time, I'm using embedded style tags.",
			"I've opened a style tag, and I'm now defining a CSS stylesheet just inside",
			"of it.",
			"I have a stylesheet that says, table.",
			"That's my tag selector.",
			"I'm not using dot or hash, which I would be doing if I",
			"was using an ID or a class selector.",
			"I have a tag selector here-- table.",
			"This style is going to apply to every table tag.",
			"Apparently I want to put a one pixel wide, solid blue border,",
			"inside my table.",
			"That sounds like it would probably help the situation, right?",
			"We're going to have things look a lot better.",
			"So this is fine.",
			"Stylistically, I've just embedded my stylesheet in here.",
			"It's certainly an acceptable way to do it.",
			"Let's see what this looks like.",
			"So I'll go back down here, and I'll will preview my table2.HTML.",
			"",
			"Well, that's not quite what I wanted, but it is exactly what we asked for.",
			"We said that this style is going to apply to our table.",
			"Our table now has a one pixel wide, solid blue border around it.",
			"We're not actually getting at the table cells.",
			"We're just getting at the table.",
			"So CSS worked.",
			"It has applied a stylesheet to our table.",
			"But didn't quite do what we wanted it to do.",
			"How do we get to do what we want it to do?",
			">> Well, let's take a look at one more version of this in table3.HTML.",
			"So I'm just going to close these tabs.",
			"I'm going to go back over here to my file tree, and open up table3.HTML.",
			"",
			"Again, it's going to look pretty similar here at the beginning.",
			"But notice, this time, instead of using a stylesheet embedded right in there,",
			"I'm going to link in a stylesheet using the link tag.",
			"So I'm apparently linking in a stylesheet called tables.CSS,",
			"and this well equals stylesheet just means-- well,",
			"what is this file relative to what I'm doing-- is a stylesheet that I'm",
			"using for my page.",
			"So if I really want to see what I'm doing with the CSS here,",
			"I need to go open that table.CSS file as well.",
			"So we'll go back over here again to our file tree.",
			"There's table.CSS.",
			"We'll pop it open.",
			"Now we're seeing a little of the CSS.",
			"Apparently, I have a couple of things going on here.",
			"I apparently want to put a five pixel wide, solid red border,",
			"around my table.",
			"We already know that that's going to just go on the perimeter.",
			"We saw that in table2.HTML.",
			"With each row, I apparently want to specify",
			"that the row height is 50 pixels high.",
			"So for every row, remember that's what the tr tag does,",
			"I'm making it 50 pixels high.",
			">> Lastly, I have this comment.",
			"And this is how we make comments in CSS.",
			"It's very similar to seize block comments syntax slash star.",
			"All the text you want.",
			"There's no slash slash though in CSS.",
			"For short inline comments, we have to use this particular format here.",
			"It looks like I'm doing a lot of things in my td tags.",
			"Remember td tags, or table data, which really are just",
			"the columns inside of our rows, and apparently",
			"for each piece of data in my table, I want",
			"to set the background color to be black, the color to be white,",
			"color is foreground color.",
			"So this is going to be the text of my page.",
			"I want big font, 22 point font, and I want",
			"it to be of the font family, Georgia.",
			"So I'm not going to have the default font.",
			"I'm going to specify Georgia, which is one of those web safe fonts",
			"that we've seen before.",
			"I want my text to be aligned centrally, in the middle of the box,",
			"I don't want it to be left aligned or right aligned.",
			"And I want my column width to be 50 pixels wide as well.",
			"Let's take a look at what this looks like,",
			"and see if this is maybe an improvement.",
			"So I'm going to go to table3.HTML, which recall, includes table.CSS as a link,",
			"and we'll preview it.",
			"That's a lot better, right?",
			"This is actually starting to look a lot more like a multiplication table.",
			"I have that red border around my table but now",
			"I also have specified that each row is 50 pixels wide,",
			"or it's 50 pixels tall-- excuse me-- each column is 50 pixels wide.",
			"The data in each column, and only the data, has a black background.",
			"So that's why those white lines are there.",
			"Because the space in between all of those cells,",
			"it's not a border in and of itself, it's just",
			"I'm only filling in the cells, which actually",
			"makes the borders of the table, which apparently did exist all along, it",
			"was just thin white lines.",
			"Now they're visible.",
			"Now they pop off on the screen.",
			"And so this is a very simple stylesheet that I've applied,",
			"and now my table looks a lot more like a four by four multiplication table,",
			"instead of a just jumbled mess, where everything is clearly rows and columns,",
			"but not super well organized.",
			"We're really just scratching the surface of what you can do with CSS here.",
			"Fortunately the CSS documentation is pretty straightforward.",
			"You'll use several of its attributes, fairly frequently.",
			"The ones we talked about earlier in this video.",
			"There are several that you probably won't use all.",
			"And that's fine, too.",
			"But just know, that there's a lot of documentation out there.",
			"So even if we didn't cover everything, you're certainly not left on your own.",
			"But CSS is really fun to experiment with.",
			"And I would strongly encourage you to play around with your web pages,",
			"and see how you can make them look and feel to improve the user",
			"experience of visiting your page.",
			"I'm Doug Lloyd.",
			"This is CS50.",
			""
		],
		"is_youtube": false
	},
	"video_043": {
		"section": "CS50x 2021",
		"subsection": "Week 8",
		"unit": "Shorts",
		"video_sources": [
			"https://edx-video.net/HARCS50X2016-V031500_DTH.mp4",
			"https://edx-video.net/HARCS50X2016-V031500/HARCS50X2016-V031500.m3u8"
		],
		"video_duration": 1086,
		"speech_period": [
			5.47, 2.0, 2.55, 2.55, 2.91, 3.0, 2.434, 1.916, 4.14, 2.46, 3.6, 3.3,
			3.915, 1.815, 2.23, 2.34, 3.364, 2.916, 1.81, 5.06, 1.7, 4.31, 3.81, 2.85,
			2.7, 2.1, 2.01, 1.98, 2.166, 2.124, 3.27, 1.08, 2.4, 1.53, 3.48, 2.34,
			3.3, 2.82, 1.34, 3.85, 2.85, 5.04, 3.81, 2.34, 2.692, 1.958, 4.47, 2.67,
			2.1, 4.05, 2.947, 2.333, 3.78, 3.72, 2.94, 1.41, 3.9, 3.43, 4.405, 1.375,
			3.208, 1.352, 1.47, 4.02, 2.542, 2.791, 3.017, 2.42, 3.24, 2.76, 3.33,
			4.557, 1.833, 1.98, 1.75, 2.24, 2.49, 3.03, 2.73, 2.2, 3.61, 1.02, 2.08,
			2.85, 2.52, 1.958, 3.382, 2.64, 2.857, 1.083, 1.46, 2.958, 1.522, 3.233,
			2.666, 2.041, 3.287, 2.083, 2.31, 3.932, 1.708, 1.21, 2.99, 2.01, 3.93,
			1.82, 3.67, 4.8, 2.79, 3.208, 3.772, 2.83, 2.02, 3.436, 2.374, 3.12, 4.44,
			3.0, 3.247, 3.083, 1.77, 2.53, 2.91, 2.9, 4.41, 3.45, 2.785, 1.125, 1.85,
			3.75, 3.08, 1.31, 0.84, 2.69, 4.26, 3.33, 1.86, 1.35, 3.12, 1.44, 4.68,
			2.7, 3.93, 2.37, 6.42, 2.04, 4.195, 0.875, 1.53, 6.42, 2.82, 2.44, 2.75,
			2.416, 5.174, 3.464, 2.416, 4.02, 3.87, 5.49, 0.57, 3.63, 4.62, 3.75,
			3.72, 3.48, 3.51, 2.55, 1.53, 4.2, 3.81, 3.51, 5.31, 4.36, 2.99, 4.46,
			0.5, 2.374, 3.075, 3.931, 2.62, 3.17, 2.88, 1.51, 2.42, 3.6, 2.85, 3.552,
			2.958, 2.73, 1.84, 4.28, 4.17, 4.54, 2.18, 3.75, 2.07, 2.04, 2.79, 1.59,
			5.01, 2.212, 1.708, 2.73, 2.47, 2.625, 4.215, 3.75, 2.43, 4.181, 1.999,
			2.169, 3.041, 2.74, 2.1, 2.89, 5.344, 2.416, 2.73, 1.96, 3.105, 1.125,
			3.14, 1.62, 3.06, 1.931, 1.749, 2.74, 4.74, 2.16, 4.47, 4.56, 3.16, 1.84,
			3.67, 3.462, 2.208, 1.541, 2.896, 1.833, 1.527, 2.583, 2.34, 1.99, 3.62,
			2.8, 2.27, 1.781, 2.749, 1.1, 2.45, 1.291, 3.769, 4.24, 3.0, 2.84, 2.9,
			3.4, 2.69, 4.477, 2.583, 1.81, 2.84, 2.612, 1.708, 1.375, 0.792, 1.707,
			2.246, 4.32, 0.81, 2.31, 1.78, 2.583, 1.877, 1.534, 1.166, 2.31, 4.38,
			2.219, 1.541, 3.26, 2.526, 2.284, 5.54, 2.91, 1.721, 2.749, 2.91, 4.53,
			2.4, 1.36, 2.95, 2.89, 1.95, 1.83, 1.89, 2.307, 1.833, 4.17, 1.87, 3.125,
			2.625, 1.92, 2.854, 1.916, 2.76, 3.54, 2.971, 2.999, 4.736, 3.124, 2.73,
			3.75, 2.967, 1.833, 3.09, 0.75, 3.03, 2.01, 3.39, 2.78, 2.077, 2.083,
			2.69, 3.47, 1.38, 3.26, 1.75, 2.91, 3.12, 2.37, 3.732, 1.958, 4.33, 2.64,
			3.48, 3.39, 2.64, 2.55, 4.574, 2.416, 2.545, 2.375, 1.82, 4.03, 3.75,
			4.18, 5.3, 3.04, 3.65, 2.691, 2.499, 3.716, 0.874, 3.58, 2.54, 1.92, 2.49,
			2.07, 3.66, 2.28, 2.195, 3.433, 3.041, 1.821, 2.29, 1.05, 7.21, 1.04,
			2.44, 3.11, 4.81, 3.56, 3.36, 4.23, 2.59, 1.55, 3.27, 3.182, 1.708, 3.6,
			2.46, 0.91, 1.88, 1.581
		],
		"transcript_en": [
			"[INSTRUMENTAL MUSIC PLAYING]",
			"DOUG LLOYD: So near CS50's end, we introduce you",
			"to several different programming languages,",
			"and we aren't able to cover them in nearly as much depth",
			"as we're able to cover C earlier in the course.",
			"The goal here is not to give you a complete rundown of what",
			"these languages do, but to give you enough of the basics",
			"and show you enough of the parallels to things",
			"that you already know so that you can go forth and really flesh out",
			"your knowledge of these different languages.",
			"And another one of these we're going to cover right now is JavaScript.",
			"Now, similar to other languages we've discussed,",
			"it is a modern programming language that is derived from C's syntax.",
			"So if you're familiar with C, you're going",
			"to be able to pick up JavaScript pretty quickly.",
			"It's been around just about as long as Python.",
			"It was invented a few years afterwards in the mid 1990s.",
			"Now what's really important about JavaScript, as well as HTML and CSS,",
			"which we've discussed in other videos, is",
			"that those three languages pretty much make up the core user experience",
			"of what it means to be online.",
			"So understanding how to use and work with JavaScript, HTML, and CSS",
			"will allow you to really create websites that users",
			"will enjoy visiting, because you'll be able to create a great user",
			"experience for them with these three languages.",
			"To write JavaScript, it's really easy.",
			"Open up a file with a dot js file extension,",
			"and start writing in JavaScript right away.",
			"If you're familiar with a language like PHP,",
			"you know that you have to sort of bind your code up",
			"in these delimiters-- bracket, question mark, PHP, and all that stuff.",
			"We don't have to do that in JavaScript.",
			"We literally just start writing our code in a JavaScript",
			"file, which is pretty nice.",
			"Our website will also know that what our file is is JavaScript,",
			"because we're going to tell it in an HTML tag.",
			"We're going to say, I have a script that is of type JavaScript,",
			"and it is a file with a dot js file extension.",
			"Pretty straightforward.",
			"Now, unlike Python, which runs on the server side-- that is, on the side",
			"that is hosting the website, JavaScript applications",
			"run client side on your own machine when you are visiting a website.",
			"To include JavaScript in your HTML, it's pretty easy.",
			"Just like when we include CSS with style tags,",
			"we can include JavaScript in between script tags.",
			"So we can have an open script tag and literally",
			"start writing JavaScript right in our HTML, which is kind of cool.",
			"But also like CSS, where we have link tags,",
			"we can write our JavaScript in a different file",
			"and connect it using the source attribute of a script tag.",
			"In CS50, and really probably more generally,",
			"this is definitely the preferred way to go, particularly",
			"if you have a JavaScript file that might be used--",
			"or the contents of which might be used-- on different pages of your website.",
			"You don't have to write the JavaScript between the script tags",
			"on every single page.",
			"You want to be able to just refer to an outside file",
			"and link that in every single time.",
			"So let's quickly run down some of the fundamentals",
			"that you might use in JavaScript.",
			"So, variables-- they're really similar to Python variables and really similar",
			"to C variables.",
			"No type specifier is required.",
			"And if you want a local variable, you preface it with the var keyword.",
			"So in Python, we would say something like this-- x equals 44.",
			"We don't want to do that in JavaScript, because that would actually",
			"create a global variable, if you were to put a semicolon at the end.",
			"We would want this-- var x equals 44.",
			"That creates a local variable called x in JavaScript,",
			"and stores the value 44 in it.",
			"Conditionals-- all of the old favorites from C are available for you to use.",
			"If, else if, else, switch, question mark colon-- all of those are fair game.",
			"We're not going into detail on those at all,",
			"because we've covered them in our videos on C.",
			"But they're all here to use in JavaScript,",
			"and behave pretty much exactly the same.",
			"Loops, meanwhile-- all of ones we're familiar with from C",
			"are also still available-- while loops, do-while loops,",
			"and for loops, although we do have a couple of other variations",
			"that we'll talk about in just a little bit.",
			"Now, functions in JavaScript are all introduced with the function keyword.",
			"So it's a function.",
			"Write a function name and parameters, and then",
			"we define our function between curly braces just like we would in C,",
			"except in C, of course, we're not using the function keyword.",
			"But there's also a catch with JavaScript, which",
			"is that functions can be anonymous.",
			"Meaning you don't have to give them a name.",
			"Now, you might be asking yourself, wait, how can I call a function",
			"If it doesn't have a name?",
			"Well, we'll talk about that in just a little bit,",
			"and we'll talk about what I mean in particular here when I'm describing",
			"binding things to HTML elements.",
			"We'll talk about that in the video on the document object model,",
			"but we'll talk about anonymous functions in just another minute.",
			"I'll give you an example and you can see how they",
			"might be useful in certain contexts.",
			"And those contexts actually do kind of materialize",
			"a lot in JavaScript programming.",
			"JavaScript, like C, and like Python, are analogous to Python's lists.",
			"Has arrays, and you can declare an array.",
			"It's pretty straightforward.",
			"For example, var nums creates a local array.",
			"And then I have square brackets, and I just",
			"have a comma-separated list of all the values that I want to put in the array.",
			"I can also mix types.",
			"I don't have to have all integers, or all floats, or all strings,",
			"like I do in C. I can have different types mixed together there.",
			"JavaScript has the ability to behave a few different ways.",
			"That's why it can be a little bit tricky as the very first language to learn,",
			"because a sets up a bunch of rules for itself and then breaks them.",
			"It is very, very flexible, but perhaps almost",
			"a little too flexible as a first language.",
			"But it can behave as an object-oriented programming language.",
			"Object-oriented might be a term that you've heard before,",
			"but if not, we'll try to give a quick little crash course here.",
			"An object is really similar in spirit to a structure",
			"that we are familiar with, hopefully, from C. Now, in C,",
			"structures can have a number of different fields or members.",
			"Another term for those that we see commonly in object-oriented programming",
			"are properties.",
			"But those properties, or fields, or members, just like in",
			"C, can never stand on their own.",
			"So for example, if we define the structure for a car like this--",
			"struct car, and inside of that, there are two different fields or members--",
			"int year and char model tens, or a 10-character string",
			"that we can use to store the cars' model.",
			"We can do things like this.",
			"We can say struct car Herbie, which declares",
			"a variable of type struct car named Herbie,",
			"and then we can say Herbie dot year equals 1963.",
			"Hurbie dot model equals Beetle.",
			"That's totally fine.",
			"That's valid C. But we can never say this in C--",
			"we can never say, year equals 1963, model equals Beetle.",
			"Now, we can't say that because year and model are so fundamental to what",
			"it means to be a struct car.",
			"They are part of a struct car.",
			"And so if we're ever using year and model--",
			"we can't use them in the abstract.",
			"We always have to associate those things with a particular struct car.",
			"So that is not OK.",
			"Objects, in addition to having fields, or members, or properties,",
			"also have something called methods, which",
			"is sort of like if a C structure had a function that could only ever apply",
			"to that structure.",
			"So it's as if we have a function where structures are the only things that",
			"need to be passed in.",
			"Now, that, we have in C.",
			"But we can't define a function inside of the curly braces of a struct.",
			"That is more-- that is object-oriented programming.",
			"That is different from here.",
			"But just like properties, methods don't stand on their own either.",
			"It's not like a function that just exists in the abstract.",
			"It is a function that only exists in the context of, in this case, an object.",
			"So where we might do this in C-- function parentheses object,",
			"where object is a parameter to the function being called--",
			"that is not object-oriented styling.",
			"Object oriented means the object is at the core of everything,",
			"and instead, we're going to call this function that is a part of the object.",
			"OK?",
			"So this is what object-oriented programming looks like in a very,",
			"very basic form, is, there are functions that are affiliated or associated with",
			"objects, and we call those functions as follows--",
			"by specifying the object and saying we want some function",
			"to execute on that object, like this.",
			"The fields and methods of an object are really similar in spirit",
			"to the idea of a dictionary, which you may be familiar with",
			"or recall from Python.",
			"So we could, for example, have something like this-- var Herbie equals--",
			"curly braces, now, not square brackets, it's curly braces--",
			"and then, a comma-separated list of key value pairs, where",
			"year 1963 is sort of like saying Herbie dot year equals 1963 in C,",
			"and Herbie dot model equals Beetle.",
			"This is akin to how we would do the same thing in JavaScript,",
			"by creating an object and giving it a couple of properties right away.",
			"All right.",
			"Now, let's go back to loops, because I mentioned earlier,",
			"there are a couple of different new loops that we can use in JavaScript.",
			"So now that we have this object, how would we maybe iterate across",
			"all of the key value pairs of that object?",
			"Or in fact, how we iterate across all of the elements of an array,",
			"if we wanted to do that, besides using a for loop, a while",
			"loop, or a do-while loop?",
			"So in Python, we saw something like this--",
			"for key in list, and then we would have some code where we would use",
			"key every point from there on down--",
			"a stand in for the i-th element of the list.",
			"You can't do that in JavaScript, but we can do something pretty similar",
			"for var key in object.",
			"And then open curly brace.",
			"And between those curly braces, we can use object square bracket key",
			"to refer to the key-th element of the object,",
			"or the key-th key in a key value pair set of the object.",
			"We also have a slightly different variation",
			"for var key of object, which, instead of having to use",
			"object square bracket key, we can now refer",
			"to iterating across all of the values--",
			"as opposed to this, which iterates across all the keys,",
			"this would iterate across the values.",
			"So we can cover both sides of a key value pair using for var key",
			"in, or for var key of.",
			"Here's an example of an array where we're",
			"going to use these two different types of loop.",
			"So we have here a week array that has 7 elements in it--",
			"Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday.",
			"And I want to use a four var day in week array.",
			"So I want to use a for in loop, and I want to console dog log.",
			"Console dot log is the JavaScript equivalent of print f.",
			"You can access it using developer tools in most modern browsers.",
			"What's going to happen when they print this out?",
			"It's going to print out a list of all of the keys.",
			"Well, in this array, there's really no keys-- there's a bunch of indices.",
			"So this will print out 0, 1, 2, 3, 4, 5, 6,",
			"because there are seven elements of my array,",
			"and I am logging which element I'm talking about.",
			"If I wanted to print out the days instead, I would use a for of loop,",
			"and I would get the following printed out to the console--",
			"Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday.",
			"What if I want to concatenate information?",
			"So remember, we can tie different strings together.",
			"We could do that in Python.",
			"We can do it as well here in JavaScript.",
			"And we do that by using plus.",
			"So if I want to console dot log a bunch of different strings concatenated",
			"together, I just use plus to do it.",
			"But here's a little bit of a catch, right?",
			"If I'm using plus, now it means two different things.",
			"I want to concatenate strings together, but maybe here, I want to add.",
			"I really encourage you to take a look at what",
			"happens if you write the week array into some JavaScript,",
			"and then have a loop that iterates across and console dot logs this.",
			"You might find that you get something that you don't expect.",
			"And so, JavaScript is making its best guess,",
			"and it's assuming that day and 1 are both strings, when really,",
			"what I want to do is add them together, literally, because they're numbers.",
			"But fortunately JavaScript gives us a way around that",
			"by using a function called parse int.",
			"Now, this is going to give us what we expect to see.",
			"This, on the other hand, is going to give us",
			"something we don't expect to see.",
			"But it's just, again, a case of, we're using the same operator",
			"to mean two different things, and the language sometimes",
			"has to make a best guess.",
			"So it's not always a great thing that languages nowadays don't often",
			"require us to specify a data type--",
			"if we were able to specify a data type here,",
			"we would be able to disambiguate this.",
			"But here with JavaScript, it thinks it's being very helpful for us",
			"by not specifying a type.",
			"And it's going to make our best guess as to what we want to do,",
			"but sometimes it guesses wrong.",
			"But it gives us ways to work around it if it does indeed guess wrong.",
			"So arrays are actually a special case of an object.",
			"And, actually, in JavaScript, everything is a special case of an object.",
			"X, any variable, var x equals 44--",
			"that's an object that just happens to have one property.",
			"Arrays are an object that happens to have a number of properties,",
			"and also some certain methods that can be applied to them.",
			"So we can call the size method, or pop, or push, or shift.",
			"And I'll leave you to figure out, or to do some research into,",
			"what those different things are.",
			"But suffice it to say that they are functions that are basically",
			"so baked into what it means to be an array",
			"that we can just call them without having",
			"to write them in the first place.",
			"That's pretty cool.",
			"Here's another cool thing that you can do",
			"with arrays-- there's another method for them called",
			"map, which basically allows us to apply a function to every single element",
			"of an array.",
			"And in particular, this is a great example",
			"for using an anonymous function.",
			"So let's take a look at how we might use an anonymous function",
			"and why it might be useful to do so.",
			"Here's an array called nums.",
			"It has five elements in it--",
			"1, 2, 3, 4, and 5.",
			"Now, what I want to do is, I want to map some function on to them.",
			"So what I'm saying here is, nums equals--",
			"so I'm going to do something to nums.",
			"I'm going to reassign that back to nums.",
			"Nums equals nums dot map--",
			"and remember, map takes in a function.",
			"It's a function that I want to apply to all of the elements of that array.",
			"One thing I could do is just write this function somewhere else,",
			"and give it a name, say I called it--",
			"what's going to happen here is, every value's going to be doubled.",
			"Let's say that I wrote a function called double numbers.",
			"I could say, nums equals nums dot map parentheses double numbers,",
			"and it would just double every number.",
			"That would be fine.",
			"But here, notice I'm using that function key word,",
			"and I'm giving a list of parameters-- in this case, num--",
			"but I'm not giving that function a name.",
			"Why am I not giving that function a name?",
			"Well, I'm just doing this mapping here.",
			"I'm never going to need to double these numbers again.",
			"Why am I going to clutter up the name space,",
			"and give it some name when I'm never going to use it",
			"again outside of this context?",
			"It's kind of convenient that we can actually use the function in this case,",
			"then, without having to give it a name, and still",
			"have it do what we want to do.",
			"So all I'm doing here inside of those parentheses of maps is,",
			"the open parentheses on the first line there--",
			"and that close parentheses is actually on the third line.",
			"And in between the parentheses, where I'm specifying the parameter to map,",
			"I'm literally defining an entire function in there.",
			"And then if I execute this line of code, what's going to happen to nums?",
			"Well, you can probably guess, it's going to just double every element of nums.",
			"All right, one more thing I want to touch on really quick about JavaScript,",
			"and that is the notion of events.",
			"So an event is something that goes hand in hand with HTML on JavaScript,",
			"and it is a response to a user doing something on a web page.",
			"So for example, perhaps they click a button.",
			"Perhaps the page has finished loading after the user hits refresh,",
			"for example.",
			"Maybe they hover over a portion of the page, or something like that.",
			"All of those things are events.",
			"And JavaScript has support for what is called an event handler, which",
			"is some JavaScript code that will execute",
			"once that event has taken place.",
			"So it allows our site page to be very interactive.",
			"We type in a box, for example--",
			"we could have an event handler, that pops up a message that",
			"says, please enter your password.",
			"So it's just a complete-- it's an empty field that says nothing at all.",
			"You start to type in it, and then this box",
			"pops up because you started typing, which is an event on the page.",
			"And it tells you to do something that is a JavaScript event",
			"handler taking effect.",
			"Many elements of HTML have support for events as an attribute.",
			"So here's an example of some really basic HTML.",
			"I have my head and my body, and inside of the body, there are two buttons.",
			"And they have this attribute called on click.",
			"On click is a definition, basically, for an event handler.",
			"So I want something to happen when I click the buttons.",
			"Right now it's nothing, but I can put something in there",
			"so that when I click on either of those buttons,",
			"that function that's in between the quotation marks there would get called.",
			"We can write a really generic event handler in JavaScript,",
			"for example, that creates an event object,",
			"and will tell us which of those two buttons were clicked.",
			"And it might look something like this.",
			"Button on click equals alert name event.",
			"If we do this, we have basically set up our HTML,",
			"so that when either button one is clicked or button two is clicked,",
			"the alert name function will be called, and an event will be passed in.",
			"The event is automatically generated by the page,",
			"and it basically contains all of the information about what just happened.",
			"And from that information, we can extract more information.",
			"So for example, here what the alert name function might look",
			"like, and notice that here, I'm also accepting an event parameter.",
			"What am I doing then?",
			"I'm getting a new JavaScript local variable called trigger,",
			"and I'm asking for that event's source element.",
			"And what that is basically telling me is,",
			"what is the element on the page that was interacted",
			"with that triggered this event?",
			"Or rather, put another way, what element effectively",
			"was passed in to this function.",
			"Because, again, this is automatically generated.",
			"The page knows which button we touched, and so, basically,",
			"what's happening here is, that button-- whichever one of the two it was--",
			"is getting passed into this function.",
			"Then-- and you'll see a little bit more of this when we talk about the document",
			"object model--",
			"I can access that trigger's inner HTML to figure out which button was clicked.",
			"Now, what is inner HTML?",
			"Let me jump back a couple of slides for a second here.",
			"The inner HTML is what is between the button tags.",
			"In this case, button one is inner HTML and button two is also inner HTML.",
			"So what happens when I click on those buttons is, it will alert to me,",
			"you clicked on button one if I happened to click on button one,",
			"or, you clicked on button two, if you happened to click on button two.",
			"Now, again, we are just scratching the surface of JavaScript,",
			"but I wanted to give you a sense of some of the different things",
			"that you can do, so that you can then go forward, look at the documentation,",
			"and see the very wide range of things that you can do as well,",
			"by just applying some of the basic tenets",
			"that we've learned about in CS50, and really expanding",
			"your knowledge exponentially.",
			"I'm Doug Lloyd.",
			"This is CS50.",
			""
		],
		"is_youtube": false
	},
	"video_044": {
		"section": "CS50x 2021",
		"subsection": "Week 8",
		"unit": "Shorts",
		"video_sources": [
			"https://edx-video.net/HARCS50X2016-V035400_DTH.mp4",
			"https://edx-video.net/HARCS50X2016-V035400/HARCS50X2016-V035400.m3u8"
		],
		"video_duration": 1234,
		"speech_period": [
			4.439, 2.791, 1.88, 2.24, 4.4, 0.71, 2.99, 3.58, 1.72, 3.325, 2.125,
			3.715, 2.295, 3.42, 3.92, 3.99, 5.04, 0.89, 3.3, 2.86, 4.13, 4.651, 1.249,
			2.51, 3.67, 3.75, 2.77, 3.14, 4.71, 3.55, 2.09, 2.129, 0.791, 1.916,
			3.484, 1.75, 2.67, 2.11, 1.81, 2.38, 5.14, 2.63, 4.24, 2.1, 2.009, 4.611,
			2.4, 4.83, 2.42, 4.39, 2.33, 1.75, 1.82, 2.42, 2.81, 5.29, 2.07, 1.43,
			1.96, 2.92, 2.31, 2.79, 1.82, 4.34, 1.782, 0.958, 2.28, 5.577, 1.083,
			3.05, 3.35, 3.6, 1.03, 3.92, 3.65, 3.47, 3.09, 3.69, 3.875, 1.375, 0.78,
			2.33, 4.39, 1.41, 3.4, 3.86, 0.88, 1.83, 3.38, 3.515, 0.624, 1.041, 3.139,
			1.361, 2.55, 2.55, 1.92, 1.0, 1.833, 1.477, 5.32, 2.52, 4.87, 3.74, 3.7,
			2.44, 4.032, 2.708, 4.27, 2.53, 2.46, 4.15, 5.19, 1.75, 3.97, 4.74, 4.025,
			2.915, 2.6, 2.45, 3.27, 4.53, 2.0, 1.175, 2.905, 2.56, 3.8, 2.63, 2.12,
			2.23, 3.44, 3.29, 4.69, 3.72, 1.49, 4.217, 2.583, 2.15, 5.02, 3.62, 3.68,
			3.82, 3.03, 2.18, 4.84, 1.91, 2.26, 6.282, 1.208, 1.791, 4.859, 4.28,
			4.46, 3.69, 4.94, 2.51, 4.355, 2.625, 3.531, 0.499, 2.96, 2.99, 3.21,
			3.42, 6.16, 4.36, 3.26, 3.17, 5.61, 3.19, 5.28, 1.386, 1.124, 3.53, 1.25,
			1.39, 3.86, 2.4, 3.52, 4.67, 2.124, 0.916, 1.041, 2.449, 3.61, 4.65, 5.07,
			4.95, 3.67, 2.67, 3.25, 2.12, 1.92, 4.12, 3.63, 2.9, 1.18, 4.44, 2.27,
			4.24, 3.01, 6.78, 0.89, 3.345, 1.625, 3.77, 3.27, 1.541, 1.729, 0.79,
			2.06, 1.61, 4.04, 3.59, 0.5, 3.73, 6.367, 0.833, 2.86, 5.06, 2.68, 3.14,
			2.287, 2.333, 4.95, 1.209, 0.499, 0.902, 4.05, 3.98, 3.0, 3.6, 3.03,
			3.787, 1.083, 2.291, 3.249, 3.33, 1.25, 6.82, 2.65, 5.17, 2.68, 2.04,
			3.17, 0.58, 4.03, 3.08, 4.83, 2.85, 3.68, 2.46, 2.99, 2.58, 1.33, 3.55,
			2.39, 1.541, 0.909, 3.41, 2.88, 3.42, 1.38, 2.97, 3.4, 1.72, 2.48, 5.43,
			3.79, 1.55, 2.14, 1.99, 2.18, 2.92, 3.83, 2.33, 4.28, 2.16, 3.63, 1.69,
			2.66, 4.97, 3.25, 3.49, 3.37, 5.43, 0.93, 2.59, 3.79, 2.82, 1.01, 3.0,
			3.44, 2.93, 4.85, 1.97, 1.73, 1.82, 4.23, 7.77, 1.26, 3.79, 4.57, 2.59,
			3.22, 4.75, 2.66, 4.1, 4.74, 2.06, 3.18, 3.23, 2.33, 4.05, 4.24, 0.92,
			5.46, 1.23, 1.76, 2.05, 1.8, 2.97, 5.239, 2.041, 1.5, 5.36, 4.3, 2.84,
			3.69, 2.51, 0.9, 2.28, 2.092
		],
		"transcript_en": [
			"",
			"DOUG LLOYD: In this video, we wanted to call out separate attention",
			"to a very particular element of JavaScript",
			"that you might find handy when you're starting",
			"to work on manipulating web pages and changing the content of your web page",
			"on the fly.",
			"And that's the notion of the Document Object Model.",
			"So as we saw in our video on JavaScript, objects are very flexible.",
			">> And they can contain various fields.",
			"And though we didn't go into a lot of detail, those fields or properties,",
			"that we would probably more appropriately call them",
			"in the context of an object, even those properties can be other objects.",
			"And inside of those objects can be other objects.",
			">> You have this very large object with a lot of other objects",
			"inside of it, which sort of creates this idea of a big tree.",
			"Now, the document object is a very special object in JavaScript",
			"that organizes your entire web page under this sort of umbrella",
			"of an object.",
			"And so inside of the document object are objects presenting",
			"the head and body of your web page.",
			">> Inside of those are other objects, et cetera, et cetera,",
			"until your entire web page has been organized in this big object.",
			"What's the upside here, right?",
			"Well, we know how to work with objects in JavaScript.",
			">> So if we have an object that refers to our entire web page, that",
			"means by calling the correct methods to manipulate that object",
			"or modifying certain of its properties, we",
			"can change the elements of our page programmatically",
			"using JavaScript instead of having to code things with, say, HTML.",
			"So here's an example of a very simple web page, right?",
			"It's got HTML tags, a head.",
			">> Inside of there is a title, hello world.",
			"Then I have a body.",
			"Inside of that, I have three different things.",
			"I have an h2 header tag, a paragraph, and a link.",
			"This is a very simple web page.",
			">> Well, what might the document object for this look like?",
			"Well, it's a little scary maybe at first.",
			"But it's really just a big tree.",
			"And at the very root of it is document.",
			">> Inside of the document is another object referring to the HTML of my page.",
			"And the HTML of my page is all of this.",
			"And then inside of the HTML object, I have a head object,",
			"which refers to everything there.",
			">> And inside of there, I have a title object.",
			"And inside of there, I have another object that's just hello world.",
			"I could have my body represented like this.",
			">> Inside of my body, I have an h2 object and a p object for paragraph",
			"and an a object for a link.",
			"And so this entire hierarchy can be represented as a big tree",
			"with lots of smaller little things coming out of it.",
			"Now, of course, when we're programming, we",
			"don't think of things like a big tree.",
			"We want to see actual code related things.",
			">> And fortunately, we can use our developer tools",
			"to actually take a look at this website's document object.",
			"And let's do that.",
			"So I've opened up a browser tab.",
			">> And I've opened up Developer Tools.",
			"And in my video on JavaScript, I mentioned that the console is not",
			"only someplace where we print information,",
			"it's also a place where we can input information.",
			"In this context, what I'm going to say is",
			"I would like to get back the document objects,",
			"so I can start to have a look at it.",
			"So how might I do this?",
			"Well, if I want to organize it really nicely,",
			"I'm going to say console.dir, D-I-R. Now, I use console.log to just print",
			"out something very simple.",
			"But if I want to organize this hierarchically like an object,",
			"I want it sort of structured like a directory structure.",
			">> So I want to console.dir document.",
			"I'm going to hit Enter.",
			"And right below it now, and I'll zoom in here,",
			"I've got this response document with a little arrow next to it.",
			"Now, when I open this arrow, there's going to be a lot of stuff.",
			">> But we're going to ignore a lot of it and just kind of focus",
			"on the most important part, so we can begin to navigate this document.",
			"There's a lot more to the DOM than just parent nodes and child nodes.",
			"There's a lot of ancillary stuff.",
			">> So I'm going to open this up.",
			"And there's a whole lot of stuff that pops up.",
			"But all I care about is right here, child nodes.",
			"Let's open that up.",
			">> Inside of there I see something familiar, HTML.",
			"So inside of our document one level down, HTML.",
			"I open that up.",
			"What are we expecting?",
			">> If you recall from our diagram, what should we find inside of HTML?",
			"What two nodes are below it in the tree?",
			"Let's find out.",
			"We open up HTML.",
			"We go down to its child nodes.",
			">> Pop that open.",
			"There's head and body.",
			"And we can open up the head.",
			"Go to its child nodes.",
			"Well, there's the title.",
			">> And we could go on and on like this forever.",
			"We could do this with body as well.",
			"But there is a way for us to look at the document organized as a big object.",
			"And if we look at is a big object that looks a lot",
			"like code, that means that we can start to manipulate this big object using",
			"code to change what our website looks and feels like.",
			">> So that's a pretty powerful tool we have at our disposal now.",
			"So as we just saw, the document object itself",
			"and all of the objects inside of it have properties and methods, just",
			"like any other object that we've been working with in JavaScript.",
			"But we can use those properties and use those methods to sort of drill down",
			"from the big document and get lower and lower and lower,",
			"finer and finer grains of detail, until we",
			"get to a very specific piece of our web page that we want to change.",
			">> And when we update properties of the Document Object or call those methods,",
			"things might happen on our web page.",
			"And we don't need to do any refreshing to have those changes take effect.",
			">> And that's a pretty cool ability to have when we're working with code.",
			"So what are some of these properties that are part of a document object?",
			"Well, you probably saw a couple of them really quickly",
			"as we were zipping through the giant document",
			"object we just saw in the web browser.",
			">> But a couple of these properties might be things like inner HTML.",
			"And you might even recall me using this in the JavaScript video",
			"at the very end when I was talking about events.",
			"What was this inner HTML?",
			"Well, it's just what's in between the tags.",
			">> And so the inner HTML, for example, of the title",
			"tag, if we had kept going in that example a moment ago,",
			"would have been hello world.",
			"That was the title of our page.",
			"Other properties include node name, which",
			"is the name of an HTML element such as title.",
			"ID, which is the ID attribute of an HTML element.",
			">> Recall that we can specially indicate specific elements of our HTML",
			"with an ID attribute, which usually comes in handy in the context of CSS,",
			"specifically.",
			"Parent node, which is a reference to what's just up above me in the DOM.",
			"And child nodes, which is a reference to what's down below me.",
			"And we saw a lot of that just looking through.",
			"Child nodes, that's how we got lower and lower into the tree.",
			">> Attributes, that's just an array of attributes of the HTML element.",
			"So an example of attributes might be if you have an image tag,",
			"it usually has a source attribute, maybe a height and a width attribute.",
			"And so that would just be an array of all of the attributes associated",
			"with that HTML element.",
			">> Style is another one that does represent the CSS",
			"styling of a particular element.",
			"And later on in this video, we'll specifically",
			"leverage style to make a couple of changes to our website.",
			"So those are some properties.",
			">> And there are also some methods that we can",
			"use to also more quickly maybe isolate elements of the Document Object.",
			"Perhaps, the most versatile of these being getElementById.",
			"So I might say something like, because remember it's a method of the Document",
			"Object, document.getElementById.",
			">> And inside of those parentheses, specify an HTML element with a particular ID",
			"attribute that I've previously set, and I'll immediately",
			"go right to that element of the overall website.",
			"So I don't have to maybe drill down through every single layer.",
			"I can just use this method to find it, sort of like a heat seeking missile,",
			"right?",
			"It just goes and finds exactly what it's looking for.",
			">> GetElementsByTagName is very similar in spirit.",
			"Maybe this would find all of the bold tags or all of the p tags",
			"and give me an array of everything that I could then work with.",
			"appendChild adds something one level down in the tree.",
			">> So I can add an entire new element one level lower.",
			"Or I can remove an element that's one level lower as well if I want",
			"to delete something from my web page.",
			"Now, a quick coding note and a quick headache saving note, hopefully.",
			">> getElementById-- the d is lowercase.",
			"I can't tell you how many times I have used getElementById and capitalized",
			"the d there.",
			"Because it's really common.",
			"If we write the word ID, it's usually capital I capital D.",
			"And my code just doesn't work.",
			"And I can't figure out why.",
			"This is a really, really, really common bug that everybody makes,",
			"even experts that have been doing this forever.",
			"So just be aware, getElementById, that d is lowercase.",
			"And hopefully, that saves you several minutes at least of heartache.",
			">> So what does all of this tell us?",
			"We have these methods.",
			"We have these properties.",
			"Now, if we start from document, document.",
			"whatever, we can now get to any single piece of our web page",
			"that we want to using JavaScript just by calling these the methods",
			"and leveraging the properties that we find at various locations.",
			">> This can get wordy, this document.getElementByID,",
			"maybe have a long tag name, maybe you do more calls later on.",
			"Things can get a little bit wordy.",
			"And as programmers, as you've probably seen in many of these videos,",
			"we don't like wordy things.",
			">> We like to be able to do things quickly.",
			"So we would like a more concise way to say something.",
			"So this sort of leads to the notion of something called jQuery.",
			"Now jQuery is not JavaScript.",
			"It's not part of JavaScript.",
			">> It is a library that was written by some JavaScript programmers",
			"about 10 years ago.",
			"And its goal is to simplify this what's called client side scripting, which",
			"is basically what we were just talking about with DOM manipulations.",
			"And so if I wanted to modify the background color of my web page, maybe",
			"a specific Div.",
			">> Here, I'm apparently getting ElementById colorDiv.",
			"And I want to set its background color.",
			"If I'm just using pure JavaScript using the Document Object Model,",
			"that's a lot of stuff, right? document.getElementByID",
			"colorDiv.style.backgroundColor=green.",
			"",
			">> Whew.",
			"That was a lot to say.",
			"It's a lot to type, too.",
			"And so in jQuery, we can maybe say this a little bit more concisely.",
			"The trade off being it's maybe a little bit more cryptic all of a sudden,",
			"right?",
			">> At least the long is a bit more explanatory as to what we're doing.",
			"This dollar sign, parentheses, single quote, hash, colorDiv, right?",
			"What does that mean?",
			"Well, that's basically just document.getElementByID colorDiv.",
			">> But it's this sort of shorthand way of doing it using jQuery.",
			"Let's just take a look now at a couple of different ways",
			"that I might actually use this Document Object",
			"Model to manipulate pieces of my site.",
			"In particular, we're going to be working on manipulating",
			"the color of a particular Div, colorDiv, on a web page.",
			"So let's take a look at that.",
			"All right.",
			"So I'm on a page.",
			"It's called test.html when you download this if you want to tinker with this.",
			"And I've got a bunch of buttons on this page.",
			"And I'm saying individual functions for background color, purple, green,",
			"orange, red, blue, one single function for background color, event handler",
			"for background color, and using jQuery.",
			"What am I talking about when I'm doing this?",
			"So we've seen the buttons.",
			"Now, let's take a look at some of the source code here.",
			"We'll start with test.html.",
			"So individual functions for background color is what I've typed here.",
			"Let me scroll a little bit.",
			"",
			">> And you'll notice that I have defined these buttons",
			"to say when this button is clicked, call the function turn purple.",
			"When this button is click, rather, call the function turn green,",
			"turn orange, turn red, turn blue.",
			"You can probably guess that this is perhaps not the best design",
			"sense, right?",
			">> It would be nice if I could have a more general approach.",
			"Well, first we'll take a look at what those five functions are",
			"document.getElementByID colorDiv.style.background=purple,",
			"green, orange, red, and blue, respectively.",
			"So, not particularly the best design.",
			">> The next set of buttons I have is I've written",
			"a single function called change color that apparently",
			"accepts a string as its argument.",
			"So this is a little bit better.",
			"Purple, green, orange, red, blue is now an argument.",
			"So I've written a more general case JavaScript function,",
			"which might look something like this.",
			"I'm passing in.",
			"This function change color is expecting an argument called color.",
			"And I'm saying set the background color to color.",
			"So here represents what I've got here.",
			"So that's a bit better.",
			">> But I might be able to do better than that.",
			"If we go down to take a look at the event handler situation,",
			"now all these calls look the same.",
			"If you recall for our discussion on event handlers,",
			"I can get information about which of these buttons was clicked and use that.",
			">> And so in event.JavaScript, I've written change color event, which",
			"figures out which button was clicked.",
			"That's the trigger object line.",
			"And then here, it gets really wordy.",
			"But what I'm doing is I'm setting the background",
			"color to triggerObject inner.HTML.",
			"That's the text in between the button tags.",
			">> And then I apparently have to set it to lowercase.",
			"And that's how I can convert an entire string to lowercase in JavaScript using",
			"that method to lowercase.",
			"Because when I set a color, as I'm trying to do here,",
			"the color has to be all lowercase.",
			">> But the button that I had, if we take another look,",
			"notice that the text there is written with a capital P for purple.",
			"And then at the very bottom here, I apparently",
			"try and do this using jQuery as well.",
			"And in this case, I'm not actually calling a function at all.",
			"I've just said the class that I'm using for this button is a jQ button.",
			"That's it.",
			">> So how does jQuery know what I'm doing?",
			"Well, this is one of the advantages slash disadvantages of jQuery.",
			"It can allow me to do things very concisely, but maybe not",
			"as intuitively.",
			"Maybe those other three make a bit more sense what I'm doing.",
			"Here, though, what's going on?",
			">> Apparently, creating an anonymous function",
			"that loads whenever my document is ready, so document.ready,",
			"some function is going to happen.",
			"Basically, when is a document ready?",
			"It's when my page has loaded.",
			">> So as soon as my page has loaded, the following function is always ready.",
			"It says, if an object of type jQButton, or if class jQButton has been clicked,",
			"execute this function.",
			"So here's two anonymous functions, one defined inside of the other.",
			">> So my entire context here so far is my page",
			"when it loads it calls this function.",
			"And this function is waiting for a button to be clicked.",
			"And when a button is clicked, jQ button specifically is clicked,",
			"it calls this other function, which is going",
			"to set the background color of colorDiv to be",
			"whatever text is in between the tags.",
			">> This is the notion of which button was clicked.",
			"But otherwise, this is sort of behaving similar to an event.",
			"It's just the same way I would express this in jQuery.",
			"Again, it's probably a lot more intimidating.",
			"It's not as clear as something like event.js,",
			"which is maybe a little bit more verbose, but a little bit less",
			"intimidating.",
			">> But if we pop back over to my browser window, if I start clicking-- well,",
			"that changed to purple.",
			"This is green using the string method.",
			"This is orange using the event handler.",
			">> This is red using jQuery, right?",
			"They all behave exactly the same.",
			"They just do it using different approaches to solve the problem.",
			"There's a lot more to jQuery then we're certainly",
			"going to talk about in this video.",
			"But if you want to learn more, you can go to the jQuery sort of documentation",
			"and learn quite a bit more about this very flexible library, which",
			"is great for doing client side scripting such as what we were doing",
			"to manipulate the look and feel of our web page",
			"with the Document Object Model.",
			"I'm Doug Lloyd.",
			"This is CS50.",
			""
		],
		"is_youtube": false
	},
	"video_045": {
		"section": "CS50x 2021",
		"subsection": "Security",
		"unit": "Lecture",
		"video_sources": [
			"https://edx-video.net/97e7fed3-2e71-423e-ab78-58cd2eba8757.m3u8",
			"https://edx-video.net/97e7fed3-2e71-423e-ab78-58cd2eba8757-mp4_720p.mp4"
		],
		"video_duration": 3458,
		"speech_period": [
			48.804, 2.656, 2.16, 3.78, 2.94, 2.602, 2.708, 4.65, 1.2, 2.67, 2.79, 3.6,
			3.24, 3.3, 2.37, 2.55, 3.33, 1.62, 3.3, 2.91, 2.522, 1.708, 3.66, 2.61,
			2.85, 2.61, 2.94, 4.44, 2.25, 3.09, 1.89, 2.44, 2.0, 2.47, 4.337, 1.083,
			2.37, 4.29, 2.67, 3.325, 3.125, 1.74, 1.68, 1.38, 3.6, 2.76, 3.39, 1.74,
			0.875, 2.875, 3.39, 1.2, 3.57, 3.6, 2.64, 4.08, 1.71, 4.44, 2.83, 4.13,
			1.95, 4.08, 3.24, 3.99, 0.94, 4.34, 3.12, 4.08, 2.58, 2.91, 3.36, 2.79,
			4.69, 3.019, 1.981, 2.34, 3.06, 2.458, 2.972, 2.19, 4.27, 3.26, 1.98, 3.6,
			4.26, 1.44, 4.86, 4.35, 1.74, 2.55, 3.33, 3.33, 3.66, 1.73, 3.85, 7.155,
			2.145, 6.27, 6.64, 0.5, 0.685, 1.055, 5.1, 6.407, 1.333, 4.51, 4.34, 6.03,
			2.88, 4.56, 3.09, 3.3, 3.15, 3.24, 3.06, 4.08, 4.53, 3.72, 2.37, 3.15,
			1.8, 2.37, 3.06, 2.55, 1.472, 1.708, 1.458, 3.612, 3.57, 3.94, 4.52, 1.95,
			4.2, 1.485, 1.875, 2.19, 2.167, 4.193, 2.55, 3.86, 1.72, 2.32, 4.52, 1.95,
			3.57, 2.925, 2.625, 3.57, 3.69, 5.07, 2.1, 4.68, 4.08, 1.766, 3.333,
			5.041, 1.079, 3.101, 2.66, 4.74, 3.21, 6.15, 1.17, 1.71, 2.52, 3.99, 2.28,
			1.74, 3.06, 3.03, 1.44, 3.42, 1.29, 5.34, 3.99, 4.17, 4.36, 2.33, 3.84,
			1.32, 2.79, 2.79, 2.34, 2.273, 2.167, 2.64, 1.29, 3.21, 1.23, 3.75, 3.04,
			4.94, 1.92, 3.22, 4.01, 2.46, 4.4, 7.3, 3.3, 2.4, 2.58, 2.85, 5.16, 3.39,
			2.79, 4.56, 2.07, 3.93, 3.13, 3.0, 2.69, 3.48, 1.8, 3.78, 4.5, 1.89, 2.4,
			2.13, 3.3, 6.21, 1.86, 1.497, 1.833, 3.51, 2.06, 1.75, 3.39, 3.45, 4.08,
			1.71, 4.033, 0.917, 3.18, 4.02, 2.85, 2.25, 4.14, 3.63, 3.15, 1.69, 3.89,
			3.54, 2.67, 2.85, 4.47, 2.76, 4.98, 1.23, 1.05, 2.1, 4.35, 2.49, 2.34,
			2.82, 6.06, 4.47, 4.2, 5.31, 2.925, 1.875, 4.32, 4.74, 3.268, 2.042, 2.37,
			2.85, 4.17, 4.41, 2.73, 6.27, 2.76, 7.23, 2.97, 3.38, 2.64, 4.485, 1.875,
			3.21, 1.86, 1.62, 1.92, 3.54, 3.28, 1.82, 1.83, 3.49, 3.89, 1.44, 1.35,
			2.91, 4.81, 2.3, 3.69, 3.027, 1.833, 3.34, 2.69, 3.69, 1.74, 2.4, 3.54,
			7.44, 2.94, 3.57, 4.05, 1.47, 3.24, 3.09, 2.61, 2.08, 3.56, 2.717, 2.833,
			1.83, 1.41, 3.18, 1.68, 2.64, 3.6, 1.816, 2.833, 1.75, 4.371, 3.07, 3.77,
			4.14, 3.51, 2.07, 2.64, 3.46, 1.22, 3.18, 0.99, 2.4, 2.19, 4.088, 2.542,
			3.083, 2.467, 6.39, 3.15, 3.63, 3.87, 2.83, 3.23, 2.64, 4.38, 4.81, 3.23,
			4.35, 1.005, 1.305, 1.32, 3.18, 1.02, 3.18, 5.25, 2.88, 3.0, 4.71, 2.73,
			3.042, 3.088, 3.045, 0.875, 2.708, 1.192, 4.8, 1.765, 1.625, 2.46, 6.85,
			2.13, 2.97, 5.51, 2.29, 1.59, 2.58, 1.925, 2.125, 3.0, 2.79, 2.58, 2.71,
			3.65, 2.47, 2.81, 2.85, 1.8, 4.3, 1.68, 2.75, 3.54, 3.222, 2.208, 2.1,
			3.75, 4.83, 1.89, 3.88, 2.09, 4.89, 4.26, 1.53, 4.02, 3.45, 1.44, 1.24,
			3.05, 3.202, 1.958, 1.833, 4.377, 2.64, 3.27, 2.01, 2.82, 3.15, 3.03, 2.5,
			4.13, 2.85, 3.6, 4.35, 0.54, 2.375, 1.955, 2.09, 4.62, 1.92, 1.42, 2.78,
			3.78, 3.9, 2.19, 1.53, 1.47, 2.94, 3.75, 1.35, 4.29, 1.86, 4.68, 2.25,
			4.29, 1.867, 2.583, 1.97, 2.31, 2.61, 3.09, 3.15, 4.14, 1.93, 1.52, 0.66,
			1.0, 1.252, 0.958, 3.795, 2.125, 0.89, 0.73, 5.3, 1.65, 1.97, 1.0, 1.417,
			2.953, 3.133, 1.167, 3.118, 1.667, 2.505, 2.885, 1.375, 1.44, 2.375,
			4.295, 3.682, 0.958, 0.833, 2.267, 2.06, 3.63, 4.38, 3.54, 3.75, 4.62,
			2.73, 1.32, 3.07, 5.76, 1.44, 2.61, 5.25, 3.03, 2.82, 3.3, 3.27, 2.64,
			2.4, 2.64, 3.15, 6.54, 4.23, 3.42, 2.13, 2.23, 1.82, 1.86, 2.37, 4.56,
			4.08, 3.6, 2.4, 2.07, 3.58, 6.62, 2.58, 3.39, 3.12, 2.94, 2.7, 4.77, 5.02,
			3.39, 4.61, 1.56, 3.81, 5.74, 1.0, 1.708, 3.052, 1.56, 1.74, 2.72, 1.0,
			1.958, 2.509, 2.083, 1.56, 2.417, 1.181, 1.792, 2.76, 3.09, 2.31, 3.433,
			2.417, 1.48, 3.0, 3.71, 1.05, 2.22, 3.03, 2.25, 4.53, 2.647, 1.583, 2.47,
			1.37, 1.32, 2.07, 2.64, 2.16, 2.25, 2.46, 3.58, 2.48, 2.64, 4.86, 2.73,
			2.67, 4.86, 1.32, 0.66, 2.61, 2.34, 2.52, 2.79, 3.645, 2.625, 5.52, 4.3,
			3.86, 4.23, 1.59, 3.72, 1.77, 2.76, 2.07, 2.07, 2.07, 3.57, 4.59, 2.34,
			2.17, 2.48, 4.74, 3.03, 1.26, 2.82, 1.72, 3.77, 0.78, 0.703, 0.917, 1.95,
			0.75, 3.54, 1.62, 3.81, 3.357, 1.833, 1.56, 1.29, 4.577, 3.083, 4.82,
			4.11, 2.37, 2.7, 3.13, 3.383, 2.667, 2.58, 1.77, 3.03, 3.0, 3.21, 2.49,
			2.28, 3.36, 4.11, 2.31, 0.66, 3.18, 2.31, 2.67, 3.93, 1.23, 3.462, 2.208,
			3.84, 2.08, 3.8, 3.34, 3.01, 1.52, 4.62, 2.67, 5.58, 3.84, 1.23, 1.75,
			2.24, 2.91, 3.66, 2.31, 4.86, 0.9, 2.13, 3.04, 3.75, 2.91, 2.48, 2.91,
			2.34, 3.0, 0.712, 2.708, 1.41, 1.53, 3.94, 3.405, 3.125, 3.15, 2.0, 1.75,
			4.32, 3.45, 3.66, 0.63, 3.805, 0.5, 3.584, 6.331, 2.07, 1.589, 1.121,
			2.75, 3.75, 2.17, 2.3, 2.159, 3.69, 1.051, 3.69, 3.36, 2.97, 3.659, 4.141,
			3.78, 3.48, 3.0, 4.78, 1.25, 1.333, 1.947, 1.67, 4.74, 3.57, 2.79, 1.56,
			4.05, 3.15, 2.7, 3.818, 1.042, 3.42, 1.95, 1.187, 2.083, 3.72, 3.15, 4.02,
			2.34, 4.44, 0.75, 2.28, 3.0, 3.36, 1.26, 3.66, 0.918, 1.542, 3.12, 2.43,
			2.31, 3.467, 1.333, 2.85, 1.993, 0.917, 0.9, 2.875, 1.985, 4.14, 4.35,
			1.89, 2.7, 2.94, 2.43, 2.04, 4.11, 2.823, 1.917, 6.27, 3.24, 2.97, 3.36,
			1.605, 2.235, 2.52, 2.88, 1.798, 0.542, 1.385, 1.865, 2.24, 4.447, 1.583,
			2.25, 1.68, 4.025, 1.625, 2.5, 2.71, 2.88, 4.2, 3.658, 1.292, 1.708,
			2.582, 3.24, 2.65, 2.6, 2.49, 3.06, 2.88, 3.51, 2.697, 1.833, 5.02, 2.31,
			2.97, 2.7, 1.92, 3.57, 4.03, 3.41, 3.51, 3.0, 3.01, 2.18, 2.22, 2.818,
			2.042, 3.21, 3.24, 3.79, 3.35, 4.02, 4.8, 3.66, 2.28, 1.77, 2.083, 1.967,
			2.64, 2.91, 1.88, 2.5, 4.39, 1.82, 2.64, 2.91, 5.58, 3.81, 2.16, 1.89,
			1.74, 2.58, 3.39, 2.79, 2.19, 3.93, 1.77, 1.95, 2.842, 1.958, 2.4, 4.23,
			3.09, 3.09, 4.77, 2.857, 3.083, 3.69, 4.41, 5.89, 2.402, 2.208, 2.49,
			3.42, 2.74, 3.35, 2.19, 3.135, 2.655, 1.86, 4.59, 1.92, 3.3, 4.513, 1.667,
			2.82, 2.19, 2.46, 3.3, 6.12, 2.61, 1.56, 4.5, 3.33, 2.19, 3.69, 0.805,
			2.125, 3.58, 0.99, 2.58, 1.86, 2.37, 1.75, 3.68, 3.3, 0.63, 2.19, 3.93,
			2.16, 2.64, 3.36, 2.56, 4.46, 3.44, 3.09, 2.34, 3.6, 3.9, 2.73, 3.09, 6.5,
			6.81, 2.45, 3.053, 1.417, 2.04, 2.62, 2.6, 2.02, 2.39, 4.11, 1.92, 1.833,
			5.607, 3.252, 2.208, 1.68, 2.79, 3.54, 4.47, 2.87, 1.75, 2.95, 1.55, 3.63,
			2.49, 3.54, 2.97, 1.75, 3.042, 0.7, 1.708, 2.97, 3.54, 5.16, 3.99, 1.89,
			3.18, 2.58, 4.5, 2.22, 2.25, 4.41, 4.785, 1.61, 2.125, 1.74, 3.54, 3.79,
			4.64, 3.7, 3.5, 1.95, 2.85, 2.58, 2.56, 2.54, 1.14, 1.86, 1.86, 2.867,
			2.833, 2.19, 4.2, 3.09, 2.34, 3.27, 5.43, 4.29, 3.27, 1.56, 2.53, 4.135,
			2.125, 4.59, 4.53, 2.14, 4.07, 3.27, 2.702, 0.958, 2.57, 1.38, 4.96, 2.93,
			2.55, 3.12, 3.81, 3.24, 3.87, 3.27, 2.52, 4.02, 3.54, 2.16, 2.52, 2.49,
			2.13, 2.61, 1.65, 3.06, 4.56, 4.86, 1.8, 3.63, 2.85, 2.04, 5.4, 2.4, 2.52,
			5.52, 3.587, 1.333, 1.86, 2.875, 1.385, 2.43, 3.04, 2.36, 1.59, 2.01,
			4.05, 1.56, 2.74, 2.93, 5.53, 2.41, 6.83, 1.38, 1.71, 5.34, 3.96, 4.41,
			3.15, 0.75, 5.37, 2.97, 1.767, 2.083, 3.71, 4.02, 2.61, 2.55, 2.49, 4.41,
			3.21, 3.5, 1.75, 4.74, 1.497, 1.833, 2.58, 2.94, 3.21, 3.12, 4.2, 2.85,
			4.583, 1.417, 3.75, 3.45, 3.3, 3.56, 6.19, 2.76, 1.35, 4.47, 3.99, 1.08,
			2.55, 3.31, 3.41, 3.9, 2.88, 5.07, 1.47, 2.5, 2.93, 4.05, 2.25, 1.86,
			3.178, 1.292, 2.94, 3.84, 3.54, 2.61, 2.275, 3.125, 3.3, 4.5, 3.09, 3.09,
			2.01, 2.85, 3.3, 3.27, 3.04, 2.45, 2.73, 4.47, 2.79, 2.76, 2.91, 2.88,
			4.02, 1.74, 3.45, 2.94, 2.56, 2.24, 3.06, 1.74, 2.43, 1.792, 3.083, 1.335,
			4.17, 1.53, 1.23, 2.22, 3.45, 4.29, 5.64, 5.8, 2.4, 2.7, 2.22, 3.12, 3.03,
			2.07, 2.417, 1.783, 2.55, 2.13, 3.27, 2.043, 2.667, 3.22, 3.75, 2.48,
			3.72, 3.48, 1.87, 1.13, 3.36, 2.47, 2.78, 2.15, 58.35
		],
		"transcript_en": [
			"[MUSIC PLAYING]",
			"DAVID J. MALAN: All right, this is CS50.",
			"And this is not a typical week of CS50.",
			"Indeed, we're midweek here in the fall of 2020",
			"here on campus, which would normally be first year family",
			"weekend, an opportunity for the parents and family members",
			"of the undergraduates here at Harvard to actually come to campus,",
			"sit in on classes, attend talks, and get to know their students in situ",
			"here right on campus.",
			"Of course, this particular year, all of us",
			"are staying afar, digitally, except those of us",
			"who are actually here living in Cambridge itself already.",
			"And so what we thought we would do this year is hold a virtual talk of sorts,",
			"a virtual discussion focused on one topic that doesn't require",
			"any prior familiarity with computer science,",
			"does not require that you be in or have taken",
			"CS50 itself because it's about a topic that's at least in part",
			"familiar to all of us.",
			"Even if it's a little bit less familiar technically,",
			"it's certainly familiar to all of us as users of technology.",
			"And that topic is security or cybersecurity.",
			"And what we propose today is that we have",
			"a discussion about how you might go about keeping your own computer-- be",
			"it a laptop or desktop or your own phone, which",
			"is also a form of computer-- secure.",
			"And I daresay that this topic, even though we'll",
			"get into some of the technicalities of what it means to be secure,",
			"is familiar in the sense that all of us think about or encounter good security",
			"and bad security in the real world every day.",
			"Think about the home that you live in, be it a house or an apartment",
			"or a dormitory or somewhere else.",
			"Typically, you'll have things, like, locks on the doors.",
			"And you might even, depending on where you live,",
			"have bars on the windows and the like.",
			"But typically, there are manifestations of security at different levels.",
			"And I mean that literally.",
			"For instance, in a typical city, there might be bars",
			"on the first floor windows, but not on the second floor or the third floor.",
			"And that is to say that someone could technically",
			"make their way into your home by way of the second floor or the third floor,",
			"but it's going to be more difficult, of course, because they need a ladder.",
			"They need some other form of physical access",
			"to a height like that, at which point, they're probably",
			"going to attract more attention.",
			"And so the probability that an adversary is",
			"going to break into your home given that they",
			"have to actually rise to that level and get above the first floor",
			"is probably relatively low.",
			"It's not zero.",
			"There's nothing stopping someone technically from pulling up a ladder",
			"and going into that open window or the light that has no bars.",
			"But it's less likely.",
			"And that's actually a good way to think about security in the digital world",
			"as well, that there's really no such thing as secure.",
			"Like, your phone is not secure fundamentally.",
			"Your laptop, your desktop is not secure fundamentally.",
			"It's secure to some extent.",
			"It might be secure against certain attacks or certain types of adversaries",
			"or adversaries with certain amounts of resources.",
			"And those resources might be time, might be money, might be technical savvy.",
			"But it really is going to be a trade-off.",
			"And so while a bit unfortunate, one way of thinking about security",
			"is that you don't want to be a secure in an absolute sense.",
			"In the real world, you want to be more secure than your neighbor's house,",
			"for instance.",
			"You want to somehow raise the bar, either physically or metaphorically,",
			"to the adversary so that it's going to take that adversary just too",
			"much time, too much money too much effort to break into your home",
			"that they might as well just go next door instead.",
			"And the same is going to be true in the world of computers.",
			"But we're going to measure the security of systems",
			"more computationally, not so much physically.",
			"So with that said, let me invite you to open up this URL here on your screen.",
			"If you're using a laptop or desktop, go ahead and just open it up",
			"in a separate tab in another browser.",
			"If you're on your phone, you can go back and forth",
			"between two windows most likely, depending on your operating system.",
			"But go ahead, when you have a moment, and open up this URL.",
			"And we'll use this URL to ask a few interactive questions",
			"that you can respond to digitally.",
			"And we'll also take questions and comments throughout today as well.",
			"So with that said, what does it mean to be secure, then?",
			"Let's take a couple of thoughts on this.",
			"What do you think of the word \"secure\" as meaning",
			"in the context of your phone, of your computer, of your home?",
			"Interpret as you will.",
			"What does it mean to be secure, would you say?",
			"Any digital hands in Zoom?",
			"If you're feeling shy, feel free to chime",
			"in via the chat and Brian can proxy.",
			"But otherwise, do feel free to raise your hand virtually",
			"if you would like to offer your definition.",
			"Yeah, how about over to Pranav, if I'm pronouncing it right?",
			"What does it mean to be secure?",
			"PRANAV: Yeah, I think it means, by security,",
			"you mean to protect all the data that's stored on a particular system",
			"if we're talking about technology.",
			"And at least make it hard and buy yourself enough time",
			"that a certain person may not hack into your system at the current moment",
			"because--",
			"DAVID J. MALAN: Good.",
			"PRANAV: --let's face it.",
			"You may not be able to protect your system for your entire lifetime.",
			"But I would say, at least buy yourself, continuously buy yourself time.",
			"DAVID J. MALAN: OK, I like that.",
			"So security is all about keeping someone out of your resources.",
			"But as I myself have claimed thus far, that's hard to argue in the absolute.",
			"Really you want your system to just take too much time to compromise, your phone",
			"or your laptop to take too much time to compromise, at which point",
			"you're sort of probabilistically, statistically safe against adversaries.",
			"Because again, they're not going to want to waste that much time or effort",
			"or money hacking into your particular system versus someone else.",
			"Now, there are different ways that you and I in the real world",
			"try to keep our laptops and our phones secure.",
			"And one of those most popular mechanisms is, of course, passwords.",
			"Passwords, being some kind of phrase, some kind of number that you actually",
			"configure your device with so that ideally, only you know that password.",
			"And only you, therefore, can get into the device by using that password.",
			"And so by a show of physical hands, how many of you",
			"have passwords on your laptops or desktops",
			"if you use one of those devices?",
			"So almost all of the hands are going up.",
			"Those of you who don't have your hand going up, you've probably made,",
			"I presume, a conscious choice to not use a password.",
			"Maybe it's annoying to type in.",
			"Maybe you don't really worry about anyone",
			"around you getting into the device.",
			"But you should concede or recognize that there is therefore a threat.",
			"It's much easier for someone to get into your laptop or desktop",
			"then into that of anyone else who raised their hand just a moment ago.",
			"Now, those of you who have a phone, a mobile device, those",
			"of you with that device, how many of you have",
			"a password or a passcode on that device, on your phone?",
			"So somewhat fewer hands I'm seeing.",
			"So it's good that so many hands are going up.",
			"But there, too, it seems that some of you don't have.",
			"And hopefully, you've thought about the implications",
			"of that, which means that your parents, your siblings, a stranger, if they just",
			"physically pick up your phone, whether it's in your home",
			"or in a cafe or an airport, has immediate access to all of your data.",
			"So arguably, much less secure, certainly,",
			"than someone that requires a password.",
			"But let's consider how we can measure the security of your phone,",
			"measure the security of your computer, just",
			"by using this simple familiar mechanism, like, a password.",
			"So it turns out that you and I, frankly, as humans,",
			"aren't very good at picking these passwords in the first place.",
			"As of 2019, just some months ago at year's end,",
			"this was determined by security researchers to be sadly,",
			"the most common password in the world, literally, 123456.",
			"That was the most common password according",
			"to many measures this past year among those passwords that were known.",
			"Number two on the list was slightly better, 123456789.",
			"After that was qwerty.",
			"If that one looks a little weird, if you have a US English keyboard and you look",
			"at the top left row of your keys, Q-W-E-R-T-Y is what they would spell",
			"on a US keyboard.",
			"People are really not trying very hard to come up with their password,",
			"even though it's not technically an English word, per se.",
			"Password was the number four most popular password, P-A-S-S-W-O-R-D,",
			"which is a little too tongue in cheek to be at all secure.",
			"After that was slightly worse, 1234567; after that, 12345678; after that,",
			"12345.",
			"You can perhaps see the pattern here.",
			"After that was, adorably, iloveyou.",
			"But if you think you're being clever by having iloveyou as your password,",
			"well, there's a lot of other humans in the world that",
			"think they're being cute, too.",
			"111111 was also popular.",
			"And then lastly, 123123.",
			"So now why these passwords?",
			"You can perhaps infer from this list why some of these passwords",
			"are the way that they are.",
			"Odds are these people were using these passwords on phones or on websites",
			"or in other systems that probably had, like, a minimum password length.",
			"These people probably needed a password that was six characters long.",
			"These people probably needed one that was nine characters long, and so forth.",
			"So you can perhaps see some manifestations of policies",
			"that companies and universities and software manufacturers",
			"might have in place.",
			"But suffice it to say, if your password is on this list,",
			"your first takeaway from today's discussion",
			"should be change that password--",
			"at least if you care about the account.",
			"And I would argue, too, and we'll come back to this,",
			"it really probably should figure into your decision making",
			"what type of account it is.",
			"If it's for some silly website or game that you're never going to use again,",
			"maybe it's not a big deal.",
			"If it's your bank account, your student record, something medical related,",
			"probably you really don't want your password on this list.",
			"So there, too, consider the context in which we make all of today's decisions.",
			"Now, why are these passwords bad?",
			"And why are passwords themselves potentially at risk?",
			"So a term of art in computer science is that of brute force attacks.",
			"And this kind of is what it says.",
			"This refers to an adversary-- someone who's out to get you or get someone--",
			"has a device or writes software that tries to just guess your password.",
			"Brute force attack means that if they don't know your password,",
			"they're not just going to try random numbers necessarily.",
			"They're going to try 111111.",
			"And then they're going to try 111112.",
			"Then they're going to try 111113, either manually, by typing it into the phone",
			"that they might have stolen off of you, or maybe by writing software,",
			"and then connecting that software via a laptop",
			"or desktop to your phone via USB cable or lightning connector or the like.",
			"A brute force attack pretty much just means",
			"that the adversary doesn't necessarily know anything about you-- your name,",
			"your birthday, your children's names, nothing like that.",
			"But they do have a lot of time or a lot of skill.",
			"And so they're just going to try all possible passwords.",
			"And what's eye opening, I think, about this type of attack",
			"is that it already gives us an opportunity",
			"to start thinking about how can we protect ourselves against an attack?",
			"And just right now, how secure are your accounts on your phones and computers",
			"against brute force attacks?",
			"Well, let's consider how an adversary might do this.",
			"This is kind of a silly YouTube video here.",
			"But let me go ahead and play this animation, really,",
			"which shows a small robot of sorts that is typing using this little robotic arm",
			"onto an Android phone down there.",
			"There's a zoomed in version of it.",
			"And pretty much this is a brute force attack",
			"by a robot, a physical device that an adversary has designed",
			"to just type in all possible passcodes.",
			"And even though the video itself is short,",
			"you can imagine the adversary going about their day, going to sleep.",
			"And this thing just keeps brute forcing its way through your password.",
			"So eventually, it might get lucky and stumble upon whatever code you",
			"were indeed using.",
			"But of course, there's probably other threats, too.",
			"There's other threats.",
			"In fact, anyone who's taken CS50 or CS50x or even",
			"just the first few weeks of it, learning a little bit of C or Python,",
			"both of which are common programming languages, anyone",
			"who knows a little bit about programming can certainly",
			"write software that simulates what that robot was physically doing.",
			"And the thing about software is as soon as you don't have any moving parts,",
			"you can do things much, much faster because it's all electronic.",
			"It's not at all mechanical.",
			"And so in this case, what if I were to steal your phone off",
			"of you, for instance, write some software on my Mac or PC,",
			"and then plug my Mac or PC into your phone",
			"with, again, a USB cable or a lightning connector,",
			"such that I could write code that tries all possible passcodes again and again?",
			"For instance, suppose that your phone is using--",
			"and this is not an uncommon default on iPhones or on Android phones,",
			"at least in the past--",
			"four digits.",
			"Suppose that you're required to choose minimally",
			"a passcode or password, synonymous here, that are four digits long.",
			"And we're talking decimal digits, so 0 through 9.",
			"So 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, you need",
			"to choose four of those digits in some pattern.",
			"Well, how many possible passcodes are there that are four digits long?",
			"If your passcode is 4 digits long, you can begin to think about the security",
			"of your passcode in terms of, well, how long would it take an adversary",
			"to brute force their way to my actual password starting at 0000,",
			"going all the way up to, for instance, 9999.",
			"Well, let me go ahead and open up the screen.",
			"If you pull up that same URL from before, you'll see in just a moment",
			"a poll that'll ask you this very same question, that being,",
			"how many 4-digit passcodes are possible?",
			"In just a moment, you'll see this on your screen.",
			"Let me go ahead and full screen it on my end as well.",
			"Go again to the URL that's atop my screen here,",
			"if you missed the URL earlier or happened to close the tab.",
			"How many 4-digit passcodes are possible?",
			"How many 4-digit passcodes are possible?",
			"Among the answers here are 4 or 40 or 9,999 or maybe 10,000--",
			"or quite fine, too, you're unsure.",
			"Go ahead and buzz in with one of those responses, if you could.",
			"All right, looks like we have got a few hundred responses thus far.",
			"We'll give you a few more seconds to buzz in.",
			"And let me go ahead and begin to reveal the results here.",
			"So it looks like quite a few of you, 60-plus%",
			"think it's 10,000 possibilities.",
			"27% of you think it's 9,999 possibilities.",
			"And then a few others think it's 40 or four.",
			"And a bunch of you are unsure.",
			"So let's consider, then, how we would answer",
			"this question so that we have a mental model for answering this on our own.",
			"Let me go ahead and propose that to answer this question,",
			"we just do some very simple arithmetic.",
			"It doesn't need to get very complicated.",
			"But the math could be thought of in the following way.",
			"If we've got a 4-digit passcode, that's four digits, each of which",
			"can be zero through nine.",
			"And there's 10 total digits.",
			"Therefore zero through 9.",
			"Eight nine so 10 possible values for each of those four digits.",
			"So if that's the case, I think it's fair to say",
			"that there's 10 possibilities for the first digit times 10 possibilities",
			"for the second times 10 times 10.",
			"And of course, if you multiply this all out,",
			"the answer was indeed 10,000 possibilities.",
			"So if you have an iPhone or an Android phone right now",
			"and you've got a 4-digit passcode that you think no one knows,",
			"that may very well be the case.",
			"But you should worry about or consider, well,",
			"what happens if a friend with a fancy robot connects your phone to that",
			"and just tries all possible values from 0000 to 9999, or smarter still,",
			"connects your phone via cable to their laptop,",
			"writes software to generate all of those possibilities?",
			"Well, a little worrisomely, it's not all that hard to do the latter",
			"and to actually write code.",
			"So in fact, let me go ahead here and on my own Mac, let me go ahead",
			"and open up a program that's going to let me write",
			"some code in a file called crack.py.",
			"So \"crack\" is a term of art in programming,",
			"which means to brute force your way into a password somehow,",
			"so to figure out what it is algorithmically.",
			"Those of you, particularly parents and family members who have never",
			"seen any of this before, totally fine.",
			"That's new to you.",
			"Your sons and daughters and others here in the room",
			"have seen little bit of this code.",
			"But we'll keep it short, which is to say that it actually",
			"doesn't take all that much effort to write code that brute",
			"forces an attack on your own phone.",
			"And the code I'm going to write here is in a language called Python,",
			"which is quite popular these days.",
			"And I'm going to say a command like this, from string import digits, which",
			"is just a clever way in Python, this programming language,",
			"just give me access to all the possible digits in decimal, 0 through 9.",
			"And then I'm going to import, so to speak, from a library, some software",
			"that some other smart people wrote, something called product.",
			"So it turns out, in a programming language,",
			"you have lots of functions or functionality.",
			"Much like in the world of math, you have functions, like, addition, subtraction,",
			"multiplication, and division.",
			"In the world of programming, you have all of those capabilities,",
			"but many more.",
			"And so one of the functions I'm importing here",
			"is this notion of a product, which really just means",
			"a permutation of all possible digits.",
			"And now I'm going to use what's called a loop in programming.",
			"A loop in a program is just something that does something again and again.",
			"And I'm going to go ahead and say this, for passcode",
			"in, the product of all of those digits, and repeat the digits four times total,",
			"go ahead and print out each passcode.",
			"Let me go ahead and print it out using somewhat cryptic syntax.",
			"But that's only because I'm going to print out a list as an actual string.",
			"Parents and family members, don't worry for now what that means.",
			"CS50 and CS50x students, this is just a clever way",
			"with a couple of lines of code to iterate over",
			"all of the digits 0 through 9, combine them four at a time,",
			"and print out all possible permutations of those four digits.",
			"So if I didn't screw up here, I'm going to go ahead and save my file and run",
			"a command called python on crack.py and hit Enter--",
			"boom.",
			"That was so fast.",
			"In fact, let me do it again.",
			"Let me clear my screen and rerun this crack.py program--",
			"boom.",
			"That's how fast a computer, my little Mac here,",
			"can try all possible codes between 0000 and 9999.",
			"And it's so fast because it did them all in the blink of an eye.",
			"So if you're thinking that your 4-digit passcode is keeping you somewhat",
			"secure, it probably really isn't because it wouldn't take that much effort",
			"for maybe someone in your household to write code like this,",
			"connect to your phone secretly at night when you're not paying attention,",
			"and figure out, potentially, what your code actually is.",
			"So what would be better than using just digits?",
			"What would be better?",
			"Well, why don't we use letters of the alphabet, English alphabet,",
			"for today's purposes?",
			"And in the English alphabet, we have more letters than we have numbers.",
			"So how might we think about this?",
			"Let's go ahead and ask a question here.",
			"If you change your phone after today to use",
			"four letters of the English alphabet instead of using numbers alone,",
			"how many possibilities are there then?",
			"Well, let me go ahead and open up a different poll question here,",
			"which asks this time, how many 4-letter passcodes are possible?",
			"And we'll see what folks think and answer to this,",
			"as the answers begin to come in.",
			"",
			"To be fair, I have not qualified one thing.",
			"So you might have to be making certain assumptions.",
			"There are indeed 26 letters of the English alphabet.",
			"However, there's uppercase and lowercase.",
			"So if you allow the user to type in something case",
			"sensitively, so to speak, where case matters,",
			"it's not 26 possibilities for each of those four characters.",
			"It's instead 52 possibilities.",
			"So it looks like an overwhelming number of you, 78%",
			"think there's some seven million possibilities when",
			"using 4-letter passcodes.",
			"About 11% of you think that 52,000 are all of the passcodes.",
			"So let's go ahead and do the quick math.",
			"Again, it doesn't need to be particularly sophisticated, the math.",
			"Let me go ahead and open up this time, similar approach",
			"to this problem, whereby if we have four letters of the alphabet,",
			"and let's assume case sensitivity, which, to be fair,",
			"you might not have assumed, well, then I think",
			"we have 52 possibilities times 52 times 52 times",
			"52 for each of the four letters in your passcode.",
			"And if you multiply that out-- boom--",
			"you indeed get seven million plus possibilities.",
			"So consider the takeaway here.",
			"If you are currently using a passcode that's four digits, purely numeric,",
			"you have only 10,000 digits between you and some adversary hacking",
			"into your phone potentially.",
			"If you change your 4-digit passcode to be a 4-letter passcode,",
			"then you've got seven million possible passcodes",
			"between you and the adversary.",
			"Now, why is this better?",
			"Well, again, whether they're using a robot or using code,",
			"it's just going to take them more time to hack into your device.",
			"And again, at that point, if it's going to take",
			"them that much time, that much effort, maybe",
			"even that much money to hack into your phone, you, relative to other people",
			"might indeed be more secure because it's probably",
			"going to be easier for that adversary to go steal someone else's phone",
			"and try to get into that one instead.",
			"Well, let's consider what this does in actual code.",
			"Let me go back to my Mac here.",
			"And let me go ahead and open up that same file as before.",
			"And let me go ahead and change something as follows.",
			"Instead of using just digits, let me use what I'm going to call ASCII letters.",
			"Families who are not familiar with CS, ASCII",
			"just refers to essentially all of the printable letters of the alphabet",
			"that you would typically see in English, so A through Z, capital and lowercase",
			"here.",
			"And I'm going to go ahead and change my mention of digits",
			"here to be ASCII letters as well.",
			"So again, the program is almost identical.",
			"But it's going to use all 52 uppercase and lowercase English letters instead",
			"of all 10 digits.",
			"Let me save this file.",
			"Let me rerun python of crack.py.",
			"And this time I actually have a moment to walk over to the screen",
			"and point out now that we're just now through the lower case zs.",
			"Now we're going through all the possible passcodes",
			"that start with capital letters.",
			"It's still pretty fast.",
			"This is maybe, what, 10 seconds later done?",
			"We went from AAAA to ZZZZ.",
			"So we've raised the bar.",
			"And again, the security of our phone in this case is arguably more.",
			"It's higher because now it's going to take",
			"the adversary more time or more effort to actually hack into our device.",
			"Well, let's consider, perhaps, another question, then.",
			"What if we generalize it further to be characters?",
			"And those of you among families, perhaps,",
			"might not know the distinction between characters and letters.",
			"So let me open this up to the floor here.",
			"When you register for a website these days,",
			"it's somewhat annoying because those websites typically",
			"force you to choose a good password.",
			"And what do they typically mean by good password?",
			"What does your password these days often have to contain before the website even",
			"lets you proceed?",
			"Any thoughts?",
			"And let's see.",
			"Brian, who do we have?",
			"How about Dax?",
			"What are your thoughts?",
			"DAX: Eight characters at the very least, number, and a capital.",
			"DAVID J. MALAN: So at least a number and character.",
			"So combine the two.",
			"I like that.",
			"So instead of 26 or 52 or 10, we instead have, maybe, 62",
			"if we combine letters and numbers.",
			"Other thoughts on what websites typically--",
			"DAX: Special characters.",
			"DAVID J. MALAN: --force you to do?",
			"DAX: Special characters-- asterisk, hashtag, dollar sign.",
			"DAVID J. MALAN: OK, so special characters or punctuation characters.",
			"So maybe it's a hash symbol.",
			"Maybe it's an exclamation point, a parenthesis, a comma, a period,",
			"something else-- yeah, so these symbols.",
			"And frankly, I get as annoyed as you probably",
			"do when these websites annoy you and say, no,",
			"that you can't use that password.",
			"No, you can't use that password.",
			"You need to choose something that's much harder to guess.",
			"But indeed, if we add punctuation to the mix, I think we can do even better.",
			"In fact, a character, therefore, is any type of character.",
			"Maybe it's punctuation.",
			"Maybe it's a letter.",
			"Maybe it's a digit, unlike just letters alone.",
			"So if we have four characters, it turns out",
			"that typically, at least in ASCII, the system that CS50 students will know,",
			"computers typically use, there's 94 possibilities for each symbol",
			"because you've got 10 digits, zero through nine.",
			"You've got 26 lowercase letters, 26 uppercase letters-- and then",
			"if you count them up on an English keyboard, 32 characters more that",
			"represent punctuation, like, hashes and exclamation",
			"points and commas and periods.",
			"So if you have 94 possibilities for each of those symbols,",
			"it turns out that you then have a total of 78 million possible passcodes.",
			"And that's pretty good.",
			"Now we're really raising the bar to the adversary",
			"because now they have to waste even more time trying to hack into your passcode.",
			"And in fact, let me go ahead and simulate that with some actual code.",
			"Let me go ahead and open up my same program as before.",
			"And this time let me go ahead and import not just ASCII letters,",
			"but also digits, and also literally, punctuation.",
			"The code I'm writing in this language called Python literally",
			"gives me access to all printable punctuation",
			"by just importing it with this first line of code.",
			"And I just need to change one line of code down here.",
			"I need to actually say ASCII letters plus digits plus punctuation.",
			"So this is Python shorthand notation for joining multiple lists.",
			"Those CS50 students among you will know that you can join two lists, perhaps,",
			"in this way, using what looks like concatenation.",
			"But with lists, it combines them all together.",
			"But I'm still going to do of length 4 here.",
			"Now let me go ahead and save this program",
			"and rerun it as python of crack.py.",
			"And now I can frankly take my time walking over to the screen",
			"because now what you're seeing on the screen is four possible symbols.",
			"But it's including 32 possible punctuation symbols, which",
			"means this list is much longer, right?",
			"At this point in the story, we were already",
			"through all of the lowercase letters up through Z a moment ago.",
			"Now we're only at the Ms, Ns, Os, Ps, which is to say,",
			"that if my Mac weren't just printing this on the screen,",
			"but were instead connected to your phone that I stole and somehow",
			"sending all of these possible passcodes into your phone,",
			"it would be taking this much time to actually solve.",
			"Now, to be fair, we're almost at the lowercase zs.",
			"So if we stall for a minute or two longer, this program, too, will finish.",
			"So even 78 million possibilities is not all that impressive.",
			"And so I daresay that we should do even better than this.",
			"So what might be better than four characters for a password?",
			"Any thoughts or volunteers?",
			"What would be a better password than four characters, where,",
			"again, each character is a letter, a number, or a punctuation symbol?",
			"The list is pretty good.",
			"But I think we can do better because even",
			"this will be done in under a minute.",
			"Yeah, thoughts about it, Leo?",
			"LEO: Right.",
			"Have a longer password to use, like, at least eight characters.",
			"DAVID J. MALAN: Perfect.",
			"So have a longer password using at least eight.",
			"And notice here, we're even now going through the numbers.",
			"But we're almost done, it seems, with the numbers.",
			"But now we're going through punctuation.",
			"But again, if I give this a little more time-- and I think",
			"I was a little overzealous.",
			"Under a minute probably isn't going to fly.",
			"But certainly, by the end of class, that will have been done.",
			"But what if we do a little better and use eight characters?",
			"Well, eight characters is going to take even longer.",
			"But let's go ahead and ask you all how much longer this might take.",
			"Let me go ahead and open up a somewhat different question,",
			"but similar in spirit.",
			"In just a moment that will appear on your screen.",
			"And the question here is going to be how many 8-character passcodes are",
			"possible?",
			"And this time I'm waving my hand at it.",
			"I didn't even bother doing the math precisely yet.",
			"But I'm proposing that it's roughly a million,",
			"a billion, a trillion, a quadrillion, a quintillion.",
			"Some of you are perhaps noticing a pattern here.",
			"And you went straight for quintillion.",
			"That bar jumped up really fast.",
			"So maybe you're right.",
			"Good instincts, perhaps.",
			"It looks like we're getting equilibrium.",
			"About 60% of you think it's 1 quintillion.",
			"25% of you think it's a quadrillion.",
			"And then fewer and fewer for the others.",
			"Well, let's take a look at what the actual answer is.",
			"Give me just a moment to actually do out the math here on my screen.",
			"And if we do out the math on my screen here,",
			"we'll see, of course, that we need to do some more math.",
			"We need to do 94 times itself eight times instead of just four,",
			"to Leo's suggestion of using eight possible symbols.",
			"And if you do this out, I had to think about this.",
			"This in fact is, let's see, we've got millions, billions, trillions,",
			"quadrillions.",
			"Gotcha.",
			"So it wasn't the biggest option on the list.",
			"The answer is indeed quadrillion.",
			"So 6 quadrillion, if you will.",
			"But-- but-- but those of you who are fans",
			"of having quintillion possibilities, which is pretty, pretty",
			"secure because it's just going to take the adversary way longer",
			"to hack into your password, well, all it takes to go from 6 quadrillion",
			"to some number of quintillion is just two more characters.",
			"So in fact, if Leo had proposed not an 8-character passcode,",
			"but a 10-character passcode, we actually would have hit quintillions.",
			"So life gets interesting.",
			"Life gets more secure, the longer and longer and more complicated",
			"these passcodes get.",
			"All right, so by logic, then, you should all probably",
			"have passcodes that are not eight, not 10.",
			"Maybe they're 20 characters long.",
			"Maybe they're 100 characters long.",
			"But here we see another theme in security, that of trade-offs.",
			"Like, the end all is probably not to be as secure as possible,",
			"but to be as secure as possible conditional",
			"on some other goals you might have.",
			"So let me ask this, what's the trade-off here?",
			"In making your password longer and longer and more and more complicated,",
			"what price do you pay as the human?",
			"What's the downside?",
			"In computer science, as in life, there's always a catch.",
			"There's always a cost.",
			"So what's the cost when you make your passcode more and more secure?",
			"Any thoughts?",
			"Let see.",
			"Who do we have, Brian?",
			"Over to Jenny?",
			"What do you think?",
			"JENNY: Yeah, I feel that it is very difficult for a human being",
			"to remember such a long password.",
			"And due to that, we even store those long passwords somewhere in the system",
			"itself so that we can use that whenever we have to log in into the system.",
			"DAVID J. MALAN: Yeah, there's this trade-off",
			"of just remembering the darn things.",
			"And you make a perfect point.",
			"If I can get on my soapbox again, if you are among those people who have pretty",
			"good passwords, and by good passwords, I mean, some numbers, some letters,",
			"some punctuation, but it's written on a Post-It note on your monitor at work,",
			"or maybe it's slightly more cleverly written in a Microsoft Word file",
			"in your hard drive, or maybe it's in a Google Doc,",
			"or maybe it's even on a piece of paper in your drawer--",
			"you're just exposing yourself to other threats, of course.",
			"But here, too, is a sociological consideration or just a policy",
			"consideration, whether you're running a business or a university",
			"or just a household with multiple family members.",
			"What should your own policies be?",
			"Because arguably it's not Jenny's fault, it's not our fault",
			"if we are resorting to writing things down on paper",
			"if our passwords are so darn hard to remember.",
			"And moreover, I haven't even made the suggestion yet,",
			"but if you are one of those people in life",
			"who is using the same password on multiple devices",
			"or on multiple websites or on multiple apps, you are bad.",
			"Like, you are also doing something bad.",
			"Why?",
			"Because if any one of those apps or websites is compromised",
			"and your password gets out, whether it's \"iloveyou,\"",
			"quote unquote, or something much more complicated,",
			"all an adversary has to do now is try that same password",
			"on your other accounts.",
			"And so you're just exposing yourself to more risk by reusing passwords.",
			"But to Jenny's point here, my God, where does it end?",
			"Now I need a really long random password on this website, this one,",
			"and this one, and this app, all over the place.",
			"I mean, honestly, I as a human certainly can't remember all of those passwords.",
			"And even if I could, I feel like there's better things in life to be remembering",
			"than passwords for accounts like this.",
			"So there's surely a trade-off here.",
			"But again, the goal is to keep the adversary out with some probability,",
			"not necessarily out in the absolute.",
			"So what else can we do to prevent the adversary from hacking into our systems",
			"so that I can have a somewhat easier, more memorable passcode,",
			"but at least keep them out?",
			"Well, here's a screenshot of something you",
			"might have done by accident, perhaps late",
			"at night when a little groggy, or a little blurry-eyed,",
			"trying to type in your password incorrectly too many times.",
			"In fact, by a show of physical hands, how many people",
			"have locked yourself out of your phone before by typing in the wrong password",
			"too many times?",
			"I did it, like, literally just the other day.",
			"And so on iPhone, for instance, it looks a little something like this.",
			"And if we zoom in, notice that it's saying, try again in 1 minute.",
			"So you don't have to get rid of the phone and start over.",
			"But the iPhone is telling you to come back in a minute.",
			"And if we look at, for instance, Android, something similar--",
			"your Android wallpaper will differ, certainly.",
			"But down here, for instance, it says too many attempts.",
			"Try again later.",
			"I mean, that's a little infuriating because if I pick up my phone",
			"now, I want to get in now.",
			"Well, when the heck is later?",
			"So putting that aside, what's the takeaway here?",
			"Why are Apple and why are Google doing this?",
			"Because I bet all of you, if you've ever locked yourself out of your phone,",
			"are super annoyed at that moment in time and probably don't",
			"appreciate Apple or Google.",
			"But what's the upside of what they've just",
			"done when they lock you out of your phone for having",
			"guessed your password incorrectly?",
			"Why is this arguably a feature and not a bug, a mistake?",
			"Sam?",
			"SAM: Yeah, it's used to decrease the chances of a successful brute force",
			"attack.",
			"DAVID J. MALAN: And how does it decrease the chance of that, would you say?",
			"SAM: Because it makes the attacker have to commit more tries before they",
			"can successfully get into the phone.",
			"So it decreases the chances.",
			"DAVID J. MALAN: Exactly.",
			"So this is a very common principle in security.",
			"And it was pointed out earlier, too, just slow the adversary down.",
			"We don't have to rethink the problem of security.",
			"We don't have to redesign passwords necessarily.",
			"But we should make it harder for the adversary",
			"to log in, ideally, without making it harder for you and I to log",
			"in to our own devices.",
			"So consider the simplest passcode that had four digits.",
			"A 4-digit passcode, there were 10,000 possibilities.",
			"A computer, a robot could guess all of those pretty quickly.",
			"But what if after typing in the wrong passcode three times",
			"or maybe ten times, some small number of times, what if the iPhone or Android",
			"phone locks you out for a minute, just like iPhone did a moment ago?",
			"Well, that might mean, even though there's only 10,000 possibilities,",
			"maybe it will take the adversary 10,000 minutes",
			"to track your password because they keep getting slowed down every time",
			"they type in an incorrect one.",
			"And maybe it's not quite 10,000.",
			"It's some factor of that.",
			"But you can slow them down in that way.",
			"Maybe you have a 10-character passcode with 78 quadrillion possibilities.",
			"And imagine the phone just slows you down 1 second.",
			"Maybe you can only type in one passcode per second.",
			"That sounds pretty fast.",
			"But 78 quadrillion seconds is crazy long.",
			"And so even that kind of slowdown might very well",
			"be enough to keep the adversary out.",
			"And so if you don't have features like this enabled on, really, any device,",
			"you should look for them.",
			"Nowadays, thankfully, they tend to come pre-configured for this.",
			"But there is a downside.",
			"There is a downside.",
			"You shouldn't just turn on these kinds of defenses",
			"blindly because what's the downside of keeping this feature enabled",
			"or leaving it enabled--",
			"those are the same things-- or enabling it, if it's not already enabled?",
			"What's the downside here, to be clear?",
			"Because none of our advice today will be 100% a win.",
			"David?",
			"DAVID: Well, if you forget your password,",
			"that means it's going to take longer for you to access your phone again.",
			"DAVID J. MALAN: Yeah, it's going to take you, the user, the owner of the device,",
			"even longer to log in.",
			"And I'll admit, too, I have on multiple occasions not locked myself out once.",
			"I then got stubborn.",
			"And I think my anger level just rose.",
			"So I started typing in more angrily, and therefore making more mistakes.",
			"And what Apple and Google do is they have",
			"what you might describe as exponential backoff, which",
			"is a fancy way of saying, the first time you get penalized one minute.",
			"Now you have to wait one minute.",
			"If you screw up again, then you have to wait two minutes.",
			"If you screw up again, maybe it's five minutes.",
			"Maybe it's 10 minutes.",
			"Maybe it's an hour.",
			"And I swear, at that point I wanted to throw my phone across the room",
			"because I couldn't get into my own device.",
			"And there you start to sacrifice, of course, usability, right?",
			"If my device is so secure that even I can't get into it,",
			"then is it really worth having at all?",
			"And so finding that inflection point is part",
			"of engineering good secure systems because you",
			"have to find that inflection point so that your users",
			"are using good passwords and passcodes.",
			"But they're not just taping them onto the monitor on a Post-It note",
			"or disabling them all together.",
			"All right, let me pause here to see, are there",
			"any questions about passwords, passcodes, brute forcing or these kinds",
			"of defenses, given that passwords are perhaps",
			"our most common defense against adversaries",
			"accessing hardware and software that we don't want them to?",
			"Yeah, Dax, question?",
			"DAX: Now so there is a definite number we",
			"can calculate that for 4-digit numbers this is",
			"the most possible number of outcomes.",
			"But what about biometrics?",
			"Fingerprints?",
			"Face scanning?",
			"DAVID J. MALAN: Yeah, really good question.",
			"So what about biometrics, using face scanning?",
			"Like, Apple has face ID these days, which also annoys me sometimes",
			"if it doesn't quite get my face right.",
			"Or these days if we're wearing masks, it's",
			"infuriating to use that kind of feature.",
			"But maybe probabilistically, there are fewer people with exactly",
			"your facial features than someone else.",
			"And so that would be more secure than picking some passcode.",
			"Sometimes you use fingerprints or retinal scans",
			"or the distance between your fingers, all of these different measures",
			"that statistically tend to not so much uniquely",
			"identify us, but uniquely identify us all enough.",
			"And there's threats there, too.",
			"A former colleague of ours, for instance,",
			"had a twin brother who because of Apple's face ID",
			"was now able to get into his phone by just picking it up off of the table",
			"because as twins, they both looked all too similar.",
			"So there's downsides and upsides there, too.",
			"But biometrics can also help things so that it's",
			"a factor you have on you always and not something,",
			"for instance, that you just only have to remember.",
			"And in fact, that's a perfect segue to what computer scientists",
			"call two-factor authentication.",
			"In the security world, security people would",
			"call the passwords we're using one factor, and something",
			"like biometrics, a second factor.",
			"And indeed, two-factor authentication means a defense mechanism",
			"against the adversaries that doesn't rely just on something",
			"you know, like, a password.",
			"It also relies on something typically that you have, like,",
			"a hand or fingers or eyes or face or the like,",
			"so that even if someone compromises your password",
			"and downloads it somewhere from a database where you've used it before,",
			"they don't necessarily have access to your eyes and your hands",
			"and your face and the like, unless they have physical access to you.",
			"So it just narrows the scope of the threats.",
			"But there's other forms of two-factor authentication.",
			"For instance, if this sounds familiar now, and maybe",
			"you don't even call it two-factor authentication.",
			"It's often called two-step authentication.",
			"By a show of physical hands, who has one or more accounts that",
			"uses two factors instead of just one?",
			"Yeah, so here, too, it's good to see so many hands going up.",
			"But if you do not use two-factor authentication",
			"for things like your email account or your bank accounts or your brokerage",
			"accounts or your health medical accounts,",
			"you really should start considering doing so.",
			"And what form does this typically take?",
			"Well, let me show a screenshot here, for instance.",
			"Even if you just have a simple Gmail account",
			"that you use for work or for personal use,",
			"you can enable what Google calls two-step verification, which",
			"is two-factor authentication.",
			"And what you'll be prompted for when logging into your Gmail",
			"account if you enable this is not only your username and your password,",
			"but also a 6-digit code.",
			"And six digits doesn't sound terribly long.",
			"But in this case, the way these technologies typically work",
			"is that you are sent that 6-digit code once via email or via text message",
			"or via special app that you install on your phone or some other device",
			"so that only you have that code.",
			"Only you have that device.",
			"And therefore, only you know that code.",
			"And better yet, these codes expire.",
			"So even if some adversary intercepts it or sees you typing it",
			"in over your shoulder, you can only use these codes once,",
			"which makes them even better than passwords",
			"alone because they expire after single time use.",
			"And so consider now, again--",
			"and I can't emphasize this enough-- if you",
			"are of the age where you have your own bank accounts, again,",
			"brokerage accounts, anything medically related,",
			"anything that you find especially important or personal,",
			"like, your own email or chat accounts, if you're only using a password,",
			"you now as of today already have the mathematical tools",
			"and the mental model, I daresay, to figure out just",
			"how easily someone could compromise your account and get into your information",
			"and take your money or read your emails or the like.",
			"So you can improve that situation by just coming up with a better, longer,",
			"more random password that you remember or memorize in some way,",
			"or additionally, by enabling the second factor so that you narrow",
			"the number of threats that are dangerous to you as a result.",
			"So with that said, too, with two-factor authentication,",
			"there's another thing you can bring into play when it",
			"comes to managing all your passwords.",
			"I alluded to using Microsoft Word before or a Post-It note.",
			"There are software solutions to this, too.",
			"So another defense we would like to offer up for your consideration today",
			"is what's generally called a password manager.",
			"This is a piece of software, either for free or that you pay for,",
			"for your phone or your laptop or desktop, that",
			"literally manages your passwords.",
			"In its simplest form, think of it like a spreadsheet, but that's \"secure,\"",
			"quote unquote, on your own computer.",
			"That is, these password managers-- and here's two popular ones.",
			"onepassword.com is one popular tool. lastpass.com is another one.",
			"And there's others if you google around.",
			"But I would, as always, read up on reviews or get second opinions.",
			"Don't just take at face value what we propose.",
			"But these password managers are programs that you",
			"type your usernames and passwords into.",
			"And then you save them all behind one master password, one password that's",
			"really long, hopefully, really random with lots",
			"of numbers and letters and symbols.",
			"But all you have to remember is that one main password.",
			"And by entering that password into your Mac or PC or phone,",
			"you then unlock all of your other accounts.",
			"And you can then just copy and paste your actual accounts' usernames",
			"and passwords.",
			"Or these programs also give you keyboard shortcuts.",
			"So you hit a keyboard command, and voila, you're automatically",
			"logged into websites.",
			"You don't have to copy/paste or manually transcribe them.",
			"So to this day, what does this mean?",
			"For me, I use one of these password managers.",
			"And most of my colleagues do as well.",
			"Many of us, most of us, don't even know the passwords",
			"we use for various websites or apps or the like.",
			"Why?",
			"Because we now trust that the password manager",
			"can, with the click of a button, generate a really long random password",
			"with lots of numbers, digits, and punctuation.",
			"And then it will remember it for me.",
			"And I just have to remember that one main password that's",
			"protecting all of those others.",
			"So that's good in that now I can practice what I've been preaching.",
			"But there is a downside.",
			"I'm exposing myself to a new risk or vulnerability.",
			"That is to say, what's the trade-off here?",
			"Why should you not necessarily just run off after today's class,",
			"download and install a password manager, and start using it",
			"without a little bit of thought first.",
			"What's the downside, perhaps?",
			"Yeah, over to Lexlene if I'm saying it right?",
			"LEXLENE: Yeah, if someone cracks your password manager password,",
			"then they have access to all your passwords.",
			"DAVID J. MALAN: Yeah, so really depends on what the threat here is,",
			"or what you're most worried about.",
			"If someone compromises, guesses, figures out",
			"your main password that protects all of the others,",
			"now you've just handed them all of your accounts at once.",
			"And that's a massive trade-off.",
			"However, if you again consider the alternative,",
			"coming up with big random passwords and then memorizing them all, or somewhat",
			"foolishly, writing them down on a Post-It note",
			"and putting it on your monitor, the question",
			"shouldn't be is this the right way to do things,",
			"but really, relatively speaking, is this a better way to do things?",
			"So you're always going to be vulnerable to some risk.",
			"Which of those risks do you worry about?",
			"And maybe you can mitigate that concern by maybe",
			"you could write down your main password for your password manager",
			"and maybe put it in a physical vault or a fire locker or the like",
			"that with very low probability someone else would get access to,",
			"unless they physically attack that device,",
			"or hide it somewhere in a book on your shelf or the like.",
			"So that yes, it's vulnerable.",
			"But the odds that someone finds it might just be relatively low.",
			"But again, this is the theme, figuring out",
			"what the right balance is for your accounts and the type of security",
			"that you want to aspire to achieve.",
			"Well, let's consider a few other defenses.",
			"And we'll leave time at the very end for questions about particular tools",
			"and techniques.",
			"What's another building block that we can",
			"bring to bear when it comes to protecting ourselves online?",
			"So encryption-- CS50 students will know that encryption refers, again,",
			"to the scrambling of information, making data look like it's random data,",
			"but by encrypting it with what's called the key, typically, a key that only you",
			"and the recipient somehow know.",
			"Encryption tends to be the solution to a lot of our problems.",
			"And indeed, these password managers typically",
			"additionally encrypt your data so that even someone who steals your Mac and PC",
			"can't just open up the program and see it.",
			"All of the data, too, is similarly encrypted.",
			"Many of you have already been trained or conditioned by society to at least look",
			"for or hope for or recognize https://.",
			"The s means secure.",
			"That just tends to be a good thing because it means",
			"a website you're visiting is secure.",
			"It's encrypted, as opposed to just http, which",
			"was much more common just a few years ago and is completely unencrypted.",
			"So that is to say if you visit a website that says just http in the URL, anyone",
			"between you and that website theoretically can be listening in,",
			"so to speak, on your traffic, the zeros and ones going back and forth.",
			"Anyone can see what pages you're visiting.",
			"If you're in some foreign country visiting sensitive materials,",
			"the government could know what websites you're visiting",
			"and what content, for instance, you're reading.",
			"https makes that much harder.",
			"It's not 100%.",
			"There are attacks still that are possible.",
			"But again, it just raises the bar.",
			"But there's another technique that's increasingly",
			"being discussed in the media, and with which you should be familiar,",
			"known as end-to-end encryption.",
			"End-to-end encryption means that when you're using a third-party service,",
			"typically, whether it's a chat service, a video conferencing",
			"service or the like, you're not just encrypting",
			"your traffic, the zeros and ones, between you",
			"and Google, you and Microsoft, you and Amazon, or some other third-party.",
			"You are encrypting your data between you and the person you're talking to.",
			"So WhatsApp, for instance, the popular messaging tool,",
			"early on had this feature.",
			"And many other chat programs nowadays have it as well,",
			"including iMessage and Signal and Telegram and the like.",
			"End-to-end encryption means that even though you're",
			"using a third-party service, a company that you may or may not trust,",
			"your communications are communicated between you and the person",
			"with whom you're speaking.",
			"The company in between, their servers, even though your data is going through",
			"their servers, cannot decrypt that information.",
			"They cannot see the information in its raw form.",
			"So that's a good thing.",
			"",
			"So WhatsApp does this, too.",
			"Zoom kind of does this, at least, only recently does this.",
			"So Zoom, for instance, the technology that we are all using right now,",
			"actually took some flak, rightly so, some months",
			"back, when in their marketing literature on their website, as I recall,",
			"advertised Zoom as offering end-to-end encryption, which",
			"was false because what end-to-end encryption means is,",
			"as I described it, between you and the person with whom you're communicating.",
			"But the marketing literature at the time was",
			"referring to end-to-end encryption between you",
			"and Zoom, which is not what security researchers or computer scientists",
			"or technologists in general would define end-to-end encryption as.",
			"And so they took some flak for that, rightly so.",
			"They've begun, though, in recent weeks, rolling out",
			"actual end-to-end encryption.",
			"We are not using it right now.",
			"It actually makes certain features harder to use.",
			"So there, too, there's a trade-off.",
			"But generally speaking, if you're having the most intimate or private",
			"or personal or financial or medical of communications with people,",
			"this is another feature you should start to look for and listen for and expect",
			"of the tools that you're using.",
			"And especially when it comes to censorship in various countries",
			"and communities, this is the kind of software",
			"that's increasingly under attack by governments",
			"because they often want backdoor so that the USA's NSA or FBI",
			"or some other entity can get into these communications.",
			"That's made much more difficult, in a good way,",
			"by using end-to-end encryption so that your communications are indeed secure.",
			"Well, in our final moments together, let's focus ultimately on Zoom,",
			"the very technology we're using.",
			"Because they've taken some flak, certainly",
			"beyond end-to-end encryption, which you might not have even heard of,",
			"as just being insecure.",
			"And a lot of school systems, a lot of users",
			"decided some months ago to stop using Zoom for this reason,",
			"even though their business is still booming.",
			"So is Zoom secure?",
			"Let's ask one final question of the group",
			"here, keeping in mind that we've now just spent the past hour discussing",
			"topics of security.",
			"Let me go ahead and ask this final question here,",
			"which will appear on your screen in just a moment.",
			"It is quite simply, is Zoom secure?",
			"All right, let's see how the responses are coming in.",
			"I'm seeing 55% no, 16% yes, 28%, unsure.",
			"So a reasonable spread there.",
			"Let's take a couple of comments here.",
			"Among those of you who think Zoom is secure, why do you think it's secure?",
			"Would anyone be comfortable raising a virtual hand so we can call on you,",
			"or maybe commenting in the chat as to why you think Zoom is secure?",
			"Let's see, over to, how about, Sam?",
			"What do you think?",
			"SAM: Two days ago, Zoom offered end-to-end encryption to all the users.",
			"DAVID J. MALAN: Yeah, so it was, in fact, that timely.",
			"Zoom began rolling out, on a trial basis,",
			"essentially, end-to-end encryption with all users.",
			"So if you are using that, and-- and this is key, too--",
			"and Zoom has implemented that concept correctly,",
			"then, yes, maybe Zoom is secure in the sense",
			"that your video conversation with someone else",
			"is in fact private between you and them.",
			"With that said, if you're in a coffee shop or in a library, at least",
			"in healthier times, and someone's looking over or listening",
			"in on your conversation, arguably even that technology is not secure.",
			"You can imagine there being other threats.",
			"Maybe you have accidentally been vulnerable to a virus, some kind",
			"of threat on your own computer.",
			"And even though, yes, your data is encrypted",
			"between you and that other person, that doesn't",
			"mean there's not malicious software running on your own personal Mac",
			"or PC or the other person's, recording everything",
			"you say and uploading it to some third-party adversary.",
			"So there, too, whenever you ask or answer questions about security,",
			"take into account those kinds of qualifications,",
			"those conditionals, because security should never",
			"be discussed, really, in a vacuum.",
			"So those of you who said no, I think we could come up with even more reasons.",
			"But at least let me dispel just a few because I do think some of the flak",
			"Zoom took was overstated because those criticizing didn't really",
			"understand some of the issues that were being touted in the media.",
			"So for instance, all of you today, to log into this meeting, for instance,",
			"followed a URL, most likely, that you had been emailed",
			"or that you saw on your screen.",
			"And that URL probably looked a little something like this-- https://,",
			"which is good, zoom.us or something like that, followed by a number,",
			"the meeting ID--",
			"for instance, 5551112222.",
			"But it was a different number for today's meeting.",
			"So if you received this URL after registering, is it secure?",
			"Well, even though all of you here right now have presumably registered,",
			"technically there was nothing stopping any of you",
			"from texting or emailing or DMing this same URL",
			"to anyone else on the internet.",
			"And they could therefore join, perhaps, without registering.",
			"So maybe that's a threat, though, Zoom typically sends you",
			"not a URL that's as simple as this when you register, but a longer one, indeed.",
			"And there's another detail that some URLs have,",
			"too, which might look like this--",
			"a question mark at the end, and pwd for password,",
			"and then some kind of password.",
			"And indeed, the URLs you clicked today looked a little more like that,",
			"still different because they were special registration URLs.",
			"But here, if your URL has this password, now you",
			"need to know both the meeting ID and the password",
			"in order to join that particular Zoom meeting.",
			"And if you're not running big classes, like we are today with this meeting,",
			"but rather you're having one-on-one or smaller scale meetings,",
			"typically you are receiving or generating a URL that looks like this,",
			"or better yet, that looks like this, so that it",
			"doesn't suffice for an adversary to just guess the meeting ID.",
			"And that's what was happening early on.",
			"Zoom typically did not require that people",
			"choose passwords for their meetings, which meant the only thing between you",
			"and some adversary Zoombombing you, so to speak, hacking",
			"into your meeting, which they just had to guess the meeting ID.",
			"And we've seen already it took me, what, like 1 minute,",
			"30 seconds to write a Python program that",
			"just generated all possible numbers of length four or eight or whatever.",
			"So people with too much free time are writing",
			"code that just tries all possible URLs.",
			"And so if you've ever been Zoombombed, maybe that's",
			"because someone shared the URL with someone they shouldn't have.",
			"Or maybe someone with a bit of programming experience or just luck",
			"guessed your meeting ID.",
			"So this was a feature in the sense that, honestly,",
			"having to type in a meeting ID and a password is just annoying.",
			"It starts to hurt the usability of the system.",
			"And a lot of people in the corporate world,",
			"they're going to choose another product if another product is easier",
			"to start the video conference with.",
			"So arguably, it was a conscious decision on Zoom's part.",
			"Now universities and companies have started",
			"requiring this or another feature called a waiting room, which some of you",
			"might have experienced today.",
			"But that just, again, raises the bar to someone attacking the system.",
			"So is Zoom secure?",
			"Yes and no.",
			"It really should be considered not in a vacuum,",
			"but in the context of what kinds of threats are you worried about",
			"and what kinds of defenses are you willing to put up?",
			"So just like in the real world, you might have your own home or apartment",
			"or the like, on which you might have locks and bolts and bars on the window.",
			"At some point, if it takes you five minutes to unlock",
			"every lock on your door just to get into your home,",
			"it might be much more secure, but you're probably",
			"not going to enjoy going home because it takes that long to get in.",
			"And you might put bars on the window to keep that person physically out,",
			"but it's not going to look particularly nice.",
			"And there's nothing stopping them from going one floor up.",
			"So there, too, there's this trade-off.",
			"And so among the takeaways, we hope, from today, are",
			"one, just better thought processes when it",
			"comes to what does it mean for your phone or your computer",
			"or your homes for that matter to be secure,",
			"and to recognize that there's always going to be some trade-off.",
			"And we would encourage you, ultimately, to ask these kinds of questions.",
			"If any company, if any app, if any website just says on their website,",
			"\"we are secure,\" that's nonsense.",
			"That means nothing in and of itself until you start asking questions, like,",
			"what are you secure against, and how?",
			"Well, thank you so much for joining us here.",
			"Let's officially wrap here.",
			"But folks are welcome to stick around for some more time",
			"if you'd like to ask questions in the group.",
			"But if you have to take off, please feel free to head out.",
			"[MUSIC PLAYING]",
			""
		],
		"is_youtube": false
	},
	"video_046": {
		"section": "CS50x 2021",
		"subsection": "Week 9",
		"unit": "Lecture",
		"video_sources": [
			"https://edx-video.net/c8107223-09c5-41b4-b728-152575653bc5.m3u8",
			"https://edx-video.net/c8107223-09c5-41b4-b728-152575653bc5-mp4_720p.mp4"
		],
		"video_duration": 9023,
		"speech_period": [
			30.195, 19.375, 3.63, 2.31, 3.93, 3.24, 3.21, 3.0, 2.64, 2.04, 3.18, 3.03,
			3.72, 3.88, 2.39, 4.29, 3.27, 2.55, 1.89, 2.88, 3.87, 2.76, 4.62, 1.98,
			5.94, 1.71, 3.359, 2.581, 3.75, 4.17, 3.12, 2.85, 2.46, 2.7, 5.36, 3.76,
			2.34, 3.97, 3.677, 1.833, 2.16, 3.51, 2.11, 4.49, 1.74, 2.91, 4.38, 2.04,
			3.486, 2.394, 2.91, 2.64, 4.29, 6.48, 2.67, 3.63, 1.57, 3.5, 3.54, 2.97,
			3.33, 3.87, 2.76, 3.54, 2.73, 5.25, 3.0, 3.3, 3.39, 2.46, 3.3, 3.27, 2.62,
			2.72, 2.37, 1.71, 1.23, 1.47, 3.66, 3.31, 2.33, 3.63, 5.25, 2.16, 2.97,
			3.81, 3.54, 4.32, 0.85, 2.55, 2.75, 3.33, 3.84, 2.76, 1.98, 3.09, 4.97,
			3.153, 1.542, 3.615, 3.85, 3.74, 4.26, 5.22, 2.67, 4.32, 3.63, 2.812,
			1.958, 3.99, 3.66, 3.93, 3.42, 3.7, 2.39, 3.0, 2.22, 2.88, 3.42, 2.7,
			1.17, 3.75, 4.08, 3.88, 4.23, 3.83, 4.17, 3.48, 1.68, 2.22, 2.64, 2.16,
			2.49, 2.13, 1.69, 2.4, 2.72, 1.98, 3.67, 0.59, 2.91, 2.28, 2.73, 2.07,
			3.54, 2.34, 4.29, 4.23, 0.9, 3.27, 1.83, 3.809, 3.851, 3.86, 2.28, 2.19,
			5.04, 4.95, 1.83, 2.73, 2.07, 2.82, 2.46, 3.21, 5.1, 1.66, 3.35, 3.39,
			3.24, 3.36, 3.96, 3.87, 1.95, 4.14, 3.36, 1.14, 2.01, 2.19, 4.38, 3.9,
			4.867, 2.333, 3.69, 3.75, 3.93, 5.91, 1.14, 3.42, 2.89, 1.168, 1.792,
			3.27, 3.24, 2.23, 3.39, 3.34, 2.317, 1.583, 2.03, 1.63, 2.0, 2.82, 1.29,
			3.69, 3.825, 2.565, 4.11, 4.35, 3.13, 3.38, 3.36, 3.66, 5.46, 1.72, 1.85,
			4.29, 3.12, 1.47, 2.34, 3.0, 1.32, 3.21, 2.7, 3.9, 3.39, 2.1, 4.38, 3.18,
			2.53, 4.16, 3.45, 1.92, 4.23, 2.16, 4.364, 4.696, 0.81, 4.13, 3.16, 1.65,
			3.12, 1.86, 3.9, 2.52, 2.07, 3.33, 3.04, 1.32, 2.09, 1.95, 3.9, 2.61,
			2.25, 4.2, 2.28, 3.93, 3.66, 3.27, 3.45, 3.0, 2.07, 1.95, 2.52, 4.96,
			1.98, 3.11, 2.17, 4.37, 3.75, 1.74, 4.54, 2.21, 2.31, 3.66, 1.17, 2.43,
			1.8, 4.38, 3.15, 3.69, 2.2, 1.61, 1.89, 3.21, 2.46, 3.67, 2.73, 1.98,
			2.63, 2.7, 5.08, 1.37, 6.0, 2.61, 2.13, 2.73, 3.0, 3.78, 3.93, 5.47, 0.78,
			4.01, 3.09, 4.35, 3.66, 1.89, 2.89, 1.93, 2.63, 1.62, 3.6, 1.62, 2.06,
			1.24, 1.47, 3.99, 3.42, 3.03, 4.11, 3.75, 3.27, 2.53, 3.5, 3.78, 4.03,
			3.92, 2.49, 4.86, 1.5, 3.78, 3.69, 1.69, 2.12, 3.81, 1.77, 4.38, 5.43,
			2.64, 1.47, 2.82, 2.292, 2.418, 1.502, 1.708, 1.33, 5.99, 2.65, 2.21,
			2.97, 3.72, 2.46, 3.96, 1.65, 2.16, 3.78, 1.39, 2.93, 5.07, 3.73, 1.07,
			4.92, 5.88, 2.1, 3.18, 3.33, 3.66, 3.75, 2.97, 3.42, 3.57, 5.85, 4.86,
			2.79, 3.0, 2.13, 2.74, 2.96, 1.86, 3.84, 3.21, 4.95, 4.98, 3.0, 4.95,
			1.03, 3.56, 3.72, 1.2, 2.49, 2.17, 1.77, 5.216, 2.958, 3.996, 2.61, 1.2,
			3.69, 3.03, 1.71, 3.21, 1.62, 3.45, 1.95, 1.23, 3.0, 2.64, 2.94, 1.89,
			4.26, 1.11, 3.33, 2.42, 3.01, 2.79, 1.98, 4.6, 3.59, 3.3, 3.81, 3.18, 4.0,
			2.12, 3.93, 4.41, 3.3, 2.79, 3.81, 3.24, 3.42, 1.56, 3.78, 2.16, 2.58,
			3.63, 2.19, 2.73, 4.29, 6.57, 2.88, 2.25, 2.37, 3.24, 4.17, 2.1, 0.7,
			1.833, 3.617, 3.42, 2.88, 1.83, 2.58, 1.11, 1.05, 4.41, 3.623, 2.917,
			4.05, 2.37, 5.113, 0.917, 1.95, 3.06, 5.76, 1.098, 1.542, 4.14, 2.37,
			2.22, 2.71, 1.1, 2.94, 1.65, 2.85, 3.0, 5.37, 4.05, 6.083, 0.667, 1.98,
			2.91, 4.148, 1.792, 1.92, 2.05, 3.65, 1.278, 3.042, 2.17, 2.61, 3.05,
			3.69, 3.66, 4.38, 0.94, 2.48, 2.83, 3.5, 2.5, 1.44, 3.243, 1.167, 3.17,
			3.42, 4.2, 4.29, 3.33, 2.95, 1.91, 2.62, 2.0, 3.06, 3.42, 3.18, 4.26,
			1.77, 3.24, 4.44, 1.86, 3.54, 3.58, 3.71, 1.5, 3.18, 2.16, 2.82, 4.53,
			1.91, 2.47, 3.36, 2.44, 3.158, 1.542, 1.75, 1.16, 1.63, 2.87, 2.94, 1.38,
			2.19, 3.72, 0.87, 3.33, 2.8, 5.15, 1.5, 3.34, 1.667, 1.833, 2.28, 3.09,
			2.4, 2.46, 2.58, 2.98, 1.23, 2.72, 3.18, 2.07, 1.89, 2.34, 2.917, 1.353,
			2.48, 2.85, 2.49, 3.42, 1.26, 0.9, 3.51, 5.07, 3.96, 2.43, 5.43, 2.31,
			4.2, 4.05, 2.19, 2.61, 4.35, 5.4, 2.76, 3.75, 2.37, 3.06, 2.99, 2.667,
			2.283, 3.6, 4.62, 3.33, 2.43, 1.44, 0.87, 1.11, 3.54, 2.91, 2.73, 1.35,
			1.8, 4.917, 1.833, 4.11, 6.84, 1.0, 4.58, 3.29, 2.42, 4.75, 5.323, 0.917,
			2.28, 3.51, 2.29, 4.32, 3.24, 1.68, 1.88, 1.71, 2.7, 6.15, 5.94, 2.13,
			2.96, 3.25, 1.71, 3.48, 1.95, 3.87, 2.01, 3.36, 3.33, 2.31, 4.65, 1.57,
			0.62, 3.45, 1.71, 6.37, 6.43, 2.97, 0.81, 2.73, 3.36, 2.61, 1.32, 4.32,
			2.79, 3.518, 3.292, 2.52, 2.9, 1.35, 2.71, 2.67, 2.4, 2.67, 5.31, 4.665,
			1.125, 3.87, 2.967, 2.583, 2.37, 1.92, 3.685, 3.125, 2.61, 3.24, 2.61,
			1.56, 3.54, 0.96, 3.69, 1.65, 1.12, 2.239, 4.951, 3.03, 3.69, 3.21, 3.21,
			1.59, 2.339, 4.051, 3.37, 2.99, 0.66, 1.679, 1.77, 5.221, 3.27, 3.09,
			3.67, 3.14, 1.59, 3.12, 2.94, 4.02, 2.478, 3.042, 2.95, 2.09, 4.47, 4.74,
			5.12, 3.1, 1.53, 4.26, 2.76, 3.18, 1.23, 3.06, 5.04, 1.68, 2.64, 3.54,
			4.29, 4.23, 3.9, 2.91, 4.35, 4.29, 3.22, 3.018, 2.792, 2.43, 3.45, 4.98,
			2.16, 1.96, 3.59, 3.45, 5.37, 3.36, 4.32, 4.53, 2.97, 3.9, 0.52, 2.42,
			2.34, 2.43, 1.17, 2.43, 2.82, 3.18, 2.88, 0.78, 5.19, 4.05, 2.2, 4.47,
			2.12, 3.9, 1.87, 1.52, 3.45, 1.95, 3.39, 1.74, 3.3, 3.99, 2.46, 5.643,
			1.917, 4.89, 2.59, 4.16, 2.58, 3.54, 3.69, 3.97, 1.25, 2.29, 3.11, 3.42,
			3.1, 3.5, 5.16, 4.95, 1.26, 3.85, 4.04, 2.58, 2.37, 1.77, 2.083, 2.357,
			2.13, 4.83, 3.05, 1.0, 0.78, 4.5, 3.12, 0.57, 3.78, 1.65, 3.33, 4.59,
			4.75, 1.58, 4.56, 4.83, 3.87, 3.63, 1.75, 2.84, 2.04, 5.76, 3.06, 2.218,
			2.042, 3.29, 2.47, 3.92, 3.36, 4.56, 3.76, 3.41, 2.55, 2.13, 2.83, 2.57,
			1.74, 2.71, 2.45, 1.59, 1.33, 1.76, 2.4, 3.083, 1.417, 2.67, 2.34, 1.89,
			2.7, 1.5, 2.61, 3.48, 3.3, 6.1, 3.89, 2.55, 5.13, 5.66, 0.72, 2.98, 1.75,
			1.95, 1.5, 2.04, 2.13, 1.25, 3.073, 1.917, 1.35, 2.52, 2.208, 5.772, 3.25,
			4.01, 2.64, 2.31, 1.96, 0.96, 2.0, 3.96, 2.86, 2.27, 3.9, 3.12, 1.29,
			3.57, 3.91, 3.47, 7.38, 3.33, 2.55, 4.11, 3.9, 6.33, 1.77, 2.76, 2.58,
			2.88, 3.9, 1.33, 3.35, 2.55, 2.07, 3.79, 3.5, 4.17, 3.93, 3.01, 4.01, 1.3,
			1.85, 7.28, 4.77, 5.49, 5.04, 3.525, 4.375, 0.8, 2.31, 2.76, 3.61, 2.792,
			1.458, 4.02, 1.47, 3.03, 4.95, 5.19, 3.24, 2.4, 2.88, 3.57, 2.7, 2.61,
			3.36, 4.74, 3.75, 3.03, 3.54, 3.2, 2.125, 2.185, 4.12, 7.12, 4.59, 3.99,
			4.29, 2.82, 2.14, 0.908, 3.042, 3.78, 4.17, 3.99, 1.98, 4.8, 2.28, 5.68,
			0.5, 0.55, 3.23, 3.27, 3.0, 3.06, 3.87, 2.91, 4.05, 2.16, 3.24, 3.06,
			1.77, 1.715, 2.125, 1.32, 2.37, 2.34, 1.9, 4.94, 1.71, 1.65, 2.79, 1.65,
			3.66, 4.05, 2.73, 3.24, 1.68, 2.38, 2.508, 2.042, 6.39, 4.713, 1.917,
			2.542, 1.518, 1.52, 2.82, 2.49, 3.42, 3.18, 2.138, 1.292, 4.4, 1.8, 1.75,
			4.67, 1.95, 3.6, 1.8, 2.22, 3.15, 3.78, 3.99, 2.55, 2.82, 4.125, 3.165,
			2.43, 3.87, 2.315, 2.875, 3.22, 3.11, 2.41, 4.16, 0.66, 4.23, 2.64, 1.68,
			2.29, 2.99, 5.4, 2.26, 2.708, 4.332, 1.3, 2.1, 2.458, 2.189, 3.083, 1.792,
			5.888, 2.34, 3.4, 2.69, 2.62, 1.13, 4.777, 1.833, 1.89, 2.76, 2.04, 3.39,
			2.13, 5.85, 4.29, 2.76, 2.02, 2.75, 1.792, 5.058, 3.77, 1.75, 2.65, 3.148,
			1.042, 1.75, 2.39, 3.91, 5.01, 3.95, 2.07, 3.69, 2.67, 2.08, 3.98, 3.03,
			1.043, 2.667, 3.73, 5.1, 4.57, 0.53, 3.54, 6.0, 2.63, 0.5, 3.38, 5.31,
			2.91, 2.11, 2.42, 4.11, 2.68, 1.92, 1.5, 2.542, 3.508, 1.71, 3.63, 1.83,
			2.117, 2.083, 2.22, 3.49, 2.54, 3.33, 3.21, 3.46, 2.885, 2.625, 4.38,
			2.35, 7.07, 3.492, 2.958, 1.853, 1.417, 1.53, 2.28, 4.2, 3.33, 3.01, 4.31,
			2.7, 3.78, 3.495, 3.69, 1.875, 1.458, 3.472, 2.39, 4.49, 2.38, 1.89, 2.44,
			5.21, 1.2, 1.6, 2.87, 7.54, 2.0, 3.06, 3.66, 2.01, 3.81, 0.84, 1.77, 2.01,
			1.433, 3.167, 1.82, 1.8, 1.08, 2.01, 2.82, 1.2, 4.08, 1.44, 3.45, 2.01,
			2.13, 2.28, 4.23, 2.94, 5.36, 4.95, 4.5, 4.95, 2.82, 2.378, 1.792, 1.81,
			6.46, 6.18, 1.62, 3.87, 4.44, 1.77, 1.86, 2.34, 7.15, 3.05, 2.76, 1.95,
			4.37, 3.042, 2.458, 2.16, 3.24, 3.99, 3.107, 2.833, 1.65, 3.03, 0.78, 0.5,
			0.97, 0.9, 2.7, 1.65, 2.28, 2.73, 4.2, 0.87, 2.73, 3.36, 4.18, 0.5, 1.708,
			4.022, 3.0, 2.28, 1.26, 3.24, 1.778, 2.542, 1.86, 1.89, 3.9, 9.09, 5.22,
			2.732, 0.958, 2.01, 2.55, 2.55, 2.2, 1.43, 1.29, 3.87, 4.11, 3.18, 2.42,
			2.5, 1.47, 3.03, 2.08, 2.15, 3.48, 3.72, 2.46, 1.5, 4.47, 1.62, 3.9, 1.62,
			2.293, 3.167, 2.91, 2.31, 2.46, 2.7, 3.208, 2.792, 1.53, 5.03, 3.91, 4.2,
			4.44, 1.53, 3.89, 0.5, 1.955, 1.875, 1.573, 2.417, 1.17, 2.7, 1.87, 1.97,
			4.26, 4.2, 5.762, 1.708, 3.72, 3.72, 4.32, 7.11, 1.77, 3.67, 1.58, 7.86,
			2.94, 5.49, 3.018, 3.042, 1.2, 2.19, 4.297, 2.333, 1.917, 4.593, 2.375,
			2.792, 2.663, 1.98, 4.05, 3.12, 5.015, 1.375, 2.583, 1.417, 3.59, 2.58,
			3.24, 3.3, 3.81, 2.73, 4.05, 4.102, 2.708, 1.69, 3.26, 7.47, 4.45, 1.7,
			2.88, 2.34, 4.14, 3.47, 2.43, 2.22, 3.06, 3.3, 2.94, 2.91, 1.86, 2.22,
			3.45, 3.34, 2.69, 2.19, 3.84, 3.81, 3.69, 3.4, 4.76, 5.392, 1.958, 3.07,
			2.69, 4.17, 1.92, 1.11, 5.19, 3.45, 4.8, 0.99, 1.44, 5.31, 2.985, 2.625,
			1.125, 3.615, 3.39, 1.53, 3.39, 2.61, 6.24, 1.68, 2.25, 3.43, 1.88, 4.53,
			1.98, 3.21, 2.02, 5.419, 3.571, 3.63, 4.08, 2.429, 2.851, 4.14, 4.53,
			4.63, 2.33, 1.979, 4.351, 2.14, 1.31, 3.779, 3.33, 3.121, 3.69, 3.66,
			5.619, 3.681, 3.81, 3.75, 5.7, 0.84, 1.53, 1.939, 1.87, 0.531, 1.32, 1.89,
			0.962, 1.208, 0.32, 1.71, 2.88, 2.01, 2.22, 4.77, 0.58, 0.5, 2.37, 2.19,
			2.542, 1.248, 4.16, 6.03, 5.59, 0.87, 1.53, 1.08, 1.083, 3.507, 0.63,
			2.07, 3.12, 3.54, 5.28, 2.58, 2.73, 1.47, 4.92, 4.86, 3.03, 4.5, 2.94,
			3.18, 2.79, 1.38, 3.45, 2.82, 2.527, 2.333, 3.69, 2.48, 0.79, 0.69, 2.07,
			2.1, 1.62, 4.045, 2.375, 2.13, 1.93, 1.74, 3.17, 3.78, 2.95, 1.92, 3.14,
			4.86, 2.01, 2.25, 1.095, 1.125, 3.33, 4.29, 2.82, 2.402, 2.458, 3.03,
			1.14, 4.92, 0.54, 1.5, 2.067, 1.833, 4.66, 2.45, 3.45, 3.51, 1.44, 5.41,
			3.8, 2.835, 2.925, 3.51, 2.357, 2.083, 2.82, 2.67, 2.67, 3.09, 1.6, 2.3,
			4.08, 2.79, 4.32, 4.523, 1.417, 4.47, 2.37, 6.57, 2.13, 1.92, 1.74, 4.95,
			3.825, 1.875, 3.69, 2.49, 1.5, 4.48, 1.43, 3.75, 2.55, 3.69, 4.23, 6.81,
			4.32, 1.74, 2.04, 3.12, 2.92, 2.69, 2.64, 2.24, 5.84, 3.53, 2.08, 3.35,
			4.33, 3.5, 1.36, 0.53, 0.75, 2.25, 2.07, 1.08, 0.82, 0.5, 1.5, 2.55, 2.58,
			1.44, 6.21, 3.24, 3.42, 2.26, 2.69, 2.602, 2.708, 1.23, 5.59, 5.03, 4.77,
			2.43, 5.55, 3.78, 1.39, 3.38, 2.67, 1.56, 4.41, 1.29, 2.67, 0.84, 1.47,
			3.51, 0.67, 2.292, 1.718, 2.4, 3.84, 4.95, 1.72, 2.24, 3.52, 5.18, 1.95,
			2.815, 3.125, 1.96, 2.0, 3.36, 1.18, 3.57, 6.5, 2.97, 3.27, 4.075, 2.375,
			6.12, 4.11, 8.19, 3.0, 2.4, 2.46, 1.5, 2.19, 3.24, 2.068, 2.042, 2.79,
			3.33, 3.78, 1.08, 4.542, 2.958, 0.79, 2.6, 3.82, 5.54, 4.62, 2.22, 5.97,
			3.787, 2.333, 1.74, 0.778, 1.542, 1.49, 2.13, 5.28, 5.04, 4.46, 2.08,
			2.25, 3.45, 6.0, 2.28, 1.95, 2.46, 4.08, 1.02, 1.05, 2.34, 1.83, 5.1,
			4.42, 2.75, 3.21, 2.41, 2.42, 5.13, 2.01, 2.24, 2.97, 3.0, 1.44, 1.68,
			2.93, 2.7, 0.842, 1.958, 3.7, 1.0, 1.75, 3.95, 2.35, 3.447, 2.583, 2.24,
			4.5, 1.48, 2.84, 3.302, 3.208, 3.48, 3.36, 2.67, 2.26, 5.3, 2.55, 2.22,
			1.5, 3.945, 1.875, 4.59, 2.79, 3.1, 4.04, 3.7, 1.77, 2.6, 3.48, 3.96,
			2.37, 2.76, 3.18, 1.52, 2.21, 5.28, 4.13, 3.48, 1.62, 2.37, 1.68, 4.242,
			2.958, 0.79, 3.9, 6.02, 3.77, 2.45, 6.56, 3.72, 2.43, 2.64, 1.74, 4.59,
			5.04, 4.02, 1.5, 3.18, 2.25, 3.51, 2.05, 3.77, 3.6, 2.37, 4.62, 5.88,
			1.95, 3.3, 1.5, 4.92, 1.56, 2.55, 3.12, 3.39, 4.29, 0.93, 1.95, 6.68,
			3.55, 2.95, 2.93, 2.28, 1.68, 2.49, 6.06, 2.16, 4.41, 5.43, 1.89, 3.0,
			3.13, 1.68, 3.39, 0.78, 3.51, 3.81, 4.17, 2.64, 3.39, 4.02, 2.33, 2.92,
			2.13, 1.74, 2.25, 4.38, 5.82, 2.28, 2.71, 0.8, 3.87, 2.68, 4.22, 5.01,
			1.71, 3.3, 7.02, 2.77, 3.56, 1.08, 3.36, 3.19, 4.46, 4.26, 2.52, 2.47,
			2.6, 1.115, 2.125, 4.38, 2.2, 3.95, 1.84, 2.03, 3.11, 1.27, 3.19, 3.32,
			3.065, 2.875, 0.96, 1.99, 1.7, 2.048, 1.292, 2.57, 3.15, 3.75, 2.44,
			2.708, 0.892, 3.44, 1.547, 0.583, 2.4, 2.16, 3.9, 5.55, 1.74, 1.66, 2.16,
			2.03, 2.04, 1.77, 3.315, 2.625, 2.25, 2.29, 2.31, 2.0, 3.78, 2.06, 1.25,
			2.06, 7.17, 2.37, 4.29, 2.547, 2.583, 1.24, 2.84, 2.94, 0.85, 4.26, 2.085,
			1.625, 2.31, 4.29, 1.75, 2.0, 2.04, 4.153, 3.167, 1.59, 3.15, 6.03, 4.98,
			2.22, 5.38, 0.66, 3.03, 3.45, 4.32, 2.16, 2.76, 1.92, 3.527, 1.333, 1.875,
			4.725, 3.45, 2.94, 2.16, 3.87, 3.33, 2.04, 1.98, 2.97, 4.17, 3.03, 3.595,
			3.125, 1.17, 2.67, 3.24, 2.85, 3.63, 1.87, 0.5, 0.39, 2.07, 3.03, 3.82,
			0.5, 2.58, 1.92, 2.58, 1.71, 4.86, 2.52, 3.48, 3.03, 3.57, 1.98, 2.67,
			1.78, 3.83, 2.76, 5.13, 4.89, 6.79, 1.38, 3.03, 3.3, 1.62, 2.615, 2.875,
			1.42, 1.56, 2.42, 0.93, 2.77, 2.99, 2.82, 4.65, 0.87, 2.34, 2.49, 2.49,
			1.71, 4.83, 2.85, 2.25, 5.43, 2.52, 3.03, 3.81, 4.02, 3.93, 1.68, 0.87,
			1.21, 3.49, 3.3, 3.39, 1.02, 1.57, 4.07, 2.34, 4.15, 4.19, 2.94, 2.85,
			2.4, 6.36, 0.99, 4.38, 3.36, 2.88, 3.66, 3.72, 2.31, 2.91, 8.77, 0.64,
			3.492, 2.208, 1.55, 2.46, 0.87, 2.94, 2.958, 2.292, 4.2, 1.65, 3.46, 3.74,
			3.78, 2.97, 2.58, 3.81, 2.88, 2.13, 3.51, 1.86, 3.75, 2.22, 3.75, 0.81,
			3.69, 3.69, 2.88, 1.93, 2.76, 4.4, 3.723, 2.917, 2.125, 3.325, 2.85, 2.61,
			2.88, 4.44, 1.93, 3.56, 1.02, 4.92, 1.68, 1.83, 5.7, 4.62, 2.67, 4.26,
			3.63, 3.68, 2.47, 3.9, 3.78, 4.57, 2.07, 2.81, 3.18, 4.53, 3.3, 2.52,
			4.77, 3.57, 2.55, 2.19, 5.76, 2.76, 3.63, 3.33, 3.42, 4.53, 4.65, 1.78,
			4.61, 1.47, 3.45, 3.25, 1.94, 2.767, 2.333, 2.55, 3.34, 2.66, 3.48, 3.78,
			2.76, 2.67, 2.76, 3.72, 4.48, 1.16, 3.21, 3.82, 3.26, 3.0, 3.27, 1.59,
			2.6, 2.79, 5.16, 4.05, 2.1, 2.32, 2.33, 4.95, 4.12, 2.18, 2.2, 1.663,
			2.167, 2.13, 4.11, 2.79, 2.19, 3.27, 3.6, 5.02, 2.75, 3.06, 2.67, 2.9,
			1.24, 1.86, 2.85, 3.03, 3.15, 1.59, 3.0, 3.78, 3.54, 2.97, 0.75, 2.248,
			2.042, 2.01, 4.29, 3.87, 3.31, 2.43, 2.9, 4.05, 3.78, 1.29, 2.88, 4.68,
			2.34, 2.82, 7.63, 4.37, 2.16, 2.88, 3.57, 3.78, 3.3, 2.97, 2.1, 2.23,
			3.47, 2.46, 2.4, 2.4, 6.48, 3.99, 2.13, 2.88, 4.3, 2.47, 3.31, 0.9, 3.0,
			1.59, 1.77, 2.28, 2.7, 1.86, 3.983, 2.167, 4.35, 2.34, 3.42, 0.997, 2.333,
			5.31, 4.47, 6.9, 4.5, 2.64, 3.57, 1.93, 2.13, 1.91, 4.75, 3.2, 1.86,
			3.288, 3.042, 2.51, 6.65, 4.47, 3.39, 3.21, 2.91, 4.8, 4.08, 3.18, 5.04,
			2.64, 2.73, 3.19, 1.1, 3.55, 5.15, 0.99, 1.38, 2.64, 1.65, 2.458, 3.392,
			1.35, 3.0, 5.4, 2.333, 2.917, 2.97, 1.56, 1.45, 2.18, 3.97, 3.095, 1.875,
			3.03, 6.24, 1.59, 5.41, 2.0, 2.04, 1.95, 2.34, 2.34, 4.35, 1.44, 1.62,
			1.9, 3.98, 3.42, 3.12, 1.9, 2.1, 4.4, 4.53, 5.35, 6.32, 2.23, 1.43, 1.77,
			2.53, 1.35, 6.53, 6.16, 2.4, 2.02, 1.73, 6.252, 1.458, 1.62, 2.55, 1.5,
			1.77, 1.972, 1.208, 2.34, 3.0, 5.4, 2.16, 2.94, 3.253, 2.417, 3.36, 2.61,
			1.35, 4.53, 5.55, 3.57, 3.48, 3.69, 3.57, 2.52, 3.3, 3.14, 3.25, 3.46,
			3.29, 0.76, 3.083, 3.357, 1.32, 3.15, 2.88, 3.18, 3.33, 4.65, 4.87, 3.2,
			7.423, 1.667, 2.02, 2.18, 5.44, 0.5, 1.62, 7.02, 1.29, 3.9, 2.2, 3.63,
			2.81, 3.0, 3.04, 1.07, 5.55, 2.64, 4.8, 1.862, 1.708, 2.73, 3.51, 2.1,
			2.22, 3.93, 6.21, 2.91, 4.17, 5.25, 3.45, 3.4, 4.04, 4.59, 1.27, 3.21,
			2.78, 3.66, 2.13, 1.38, 1.92, 3.493, 0.917, 4.32, 2.46, 4.6, 2.81, 1.31,
			1.0, 1.05, 2.85, 1.888, 1.292, 1.65, 1.53, 4.35, 3.58, 4.24, 3.86, 2.22,
			3.48, 3.87, 1.71, 1.23, 3.67, 5.78, 3.46, 1.71, 0.83, 7.83, 2.247, 1.833,
			1.417, 2.603, 3.33, 5.28, 1.5, 1.92, 2.55, 4.29, 2.97, 1.23, 3.96, 4.2,
			1.68, 3.09, 1.98, 1.11, 2.04, 5.76, 2.97, 4.38, 4.665, 1.875, 3.93, 3.441,
			3.129, 2.292, 2.125, 2.393, 2.65, 3.47, 3.68, 5.19, 2.31, 1.583, 1.25,
			2.477, 1.66, 2.69, 3.96, 2.22, 2.192, 3.208, 1.792, 3.638, 2.43, 2.13,
			3.27, 1.95, 3.18, 1.23, 2.55, 2.55, 2.73, 2.64, 3.032, 1.708, 2.7, 1.8,
			3.99, 2.13, 3.3, 3.51, 2.76, 3.06, 3.03, 1.56, 3.15, 4.02, 3.57, 2.82,
			3.33, 3.36, 4.26, 4.08, 2.7, 3.48, 2.73, 2.91, 3.03, 4.41, 2.17, 2.54,
			5.16, 2.07, 5.62, 2.13, 1.29, 2.5, 2.54, 3.42, 3.81, 2.25, 2.25, 3.3,
			2.79, 3.84, 3.285, 6.165, 2.4, 2.34, 1.072, 2.708, 2.94, 1.875, 2.355,
			3.21, 2.97, 2.22, 2.64, 2.34, 3.63, 1.47, 2.91, 2.49, 3.87, 2.08, 1.89,
			3.2, 3.49, 3.41, 2.85, 2.94, 1.68, 5.14, 3.17, 2.61, 3.343, 1.167, 2.667,
			1.113, 2.93, 4.71, 4.39, 2.93, 4.83, 3.72, 2.1, 4.47, 2.1, 3.93, 2.19,
			3.09, 1.59, 2.782, 2.708, 1.45, 2.4, 3.04, 1.0, 2.46, 3.66, 3.21, 6.57,
			2.19, 1.77, 5.55, 2.43, 2.61, 2.458, 2.112, 2.24, 3.24, 4.47, 2.08, 4.25,
			2.903, 2.167, 1.47, 3.24, 3.67, 1.86, 3.05, 1.95, 4.05, 3.96, 0.75, 2.64,
			2.07, 5.1, 2.31, 2.46, 1.75, 2.15, 2.61, 2.22, 2.28, 3.66, 3.15, 0.81,
			2.19, 2.55, 1.13, 2.71, 3.14, 3.7, 2.77, 2.1, 2.85, 2.4, 1.59, 3.12, 1.72,
			2.99, 4.08, 2.04, 2.81, 1.39, 7.02, 4.14, 4.23, 5.072, 1.708, 5.46, 2.17,
			5.63, 0.82, 5.48, 0.99, 2.31, 0.78, 3.68, 2.92, 1.57, 1.5, 1.19, 1.15,
			2.06, 3.0, 2.1, 3.18, 1.41, 5.4, 7.597, 1.583, 2.61, 3.06, 3.78, 3.9,
			1.36, 3.63, 3.39, 2.0, 1.167, 2.223, 2.405, 2.875, 3.12, 1.77, 2.22,
			3.125, 3.775, 5.097, 2.833, 2.31, 2.79, 1.53, 3.292, 2.918, 3.193, 2.417,
			4.5, 3.353, 2.917, 1.56, 3.167, 1.673, 3.32, 3.03, 3.24, 3.51, 3.54, 4.2,
			3.99, 3.0, 2.79, 5.01, 3.123, 1.917, 1.59, 2.28, 4.02, 0.93, 2.79, 2.88,
			2.82, 2.76, 2.31, 2.25, 2.73, 3.3, 6.68, 1.29, 2.46, 4.83, 2.25, 5.46,
			1.77, 2.1, 4.847, 0.583, 3.083, 1.837, 2.875, 3.065, 3.9, 1.508, 1.792,
			3.48, 2.88, 4.0, 2.21, 1.3, 2.06, 2.917, 1.493, 1.92, 2.208, 3.492, 0.91,
			3.117, 1.583, 4.11, 2.47, 3.56, 1.35, 1.41, 0.75, 4.77, 2.142, 2.458,
			1.25, 1.958, 1.793, 1.679, 3.12, 4.607, 2.083, 2.1, 2.67, 3.7, 3.71, 3.07,
			2.48, 4.29, 3.47, 1.75, 2.97, 1.92, 2.79, 1.17, 1.8, 2.44, 2.57, 2.83,
			2.82, 3.29, 3.84, 1.68, 2.4, 1.83, 2.76, 5.01, 2.2, 1.247, 1.833, 3.63,
			4.26, 3.84, 2.85, 3.508, 1.542, 2.94, 3.2, 4.09, 3.35, 4.03, 0.99, 3.29,
			2.04, 2.05, 3.77, 1.77, 2.82, 2.37, 3.88, 3.83, 2.76, 4.05, 1.5, 3.37,
			4.01, 2.19, 3.99, 2.61, 2.88, 2.2, 4.15, 1.75, 2.46, 2.16, 6.28, 1.45,
			2.64, 4.32, 4.08, 2.43, 3.96, 1.91, 2.44, 4.34, 0.93, 3.65, 1.99, 2.42,
			2.557, 3.083, 4.65, 2.05, 2.75, 2.73, 2.17, 3.86, 4.44, 1.36, 2.39, 2.148,
			1.542, 2.34, 2.07, 2.82, 6.39, 6.84, 0.81, 2.16, 4.559, 3.241, 4.273,
			1.667, 4.102, 2.708, 2.94, 2.64, 3.22, 2.18, 5.515, 1.875, 2.45, 3.269,
			5.131, 1.199, 6.0, 2.371, 1.9, 5.0, 5.29, 1.56, 2.0, 3.059, 4.561, 1.29,
			2.969, 1.621, 2.65, 3.92, 2.75, 3.13, 2.16, 3.96, 3.96, 3.87, 3.12, 2.25,
			1.859, 3.451, 3.219, 4.041, 3.42, 2.67, 1.65, 5.28, 3.43, 1.28, 3.39,
			1.08, 1.36, 5.479, 3.458, 2.333, 3.12, 2.13, 2.309, 2.701, 3.39, 1.11,
			2.677, 0.833, 0.66, 4.74, 2.98, 2.627, 1.833, 1.92, 2.338, 1.292, 1.29,
			3.18, 2.04, 1.96, 7.94, 0.63, 1.65, 2.49, 2.32, 4.34, 5.553, 1.917, 3.13,
			3.3, 4.04, 2.1, 3.69, 1.765, 2.625, 3.778, 3.292, 3.22, 2.45, 2.52, 3.72,
			3.53, 1.0, 3.36, 1.27, 2.0, 4.2, 2.345, 1.875, 3.87, 5.58, 1.805, 2.125,
			2.91, 1.74, 4.11, 2.64, 3.39, 3.25, 3.38, 1.84, 0.75, 3.17, 4.77, 2.7,
			4.17, 2.85, 2.19, 1.71, 3.51, 2.61, 3.91, 3.65, 2.19, 3.48, 5.41, 2.0,
			5.85, 4.72, 3.17, 3.81, 5.555, 3.265, 2.82, 3.39, 1.92, 2.37, 2.375,
			1.375, 2.28, 2.22, 1.092, 2.958, 2.79, 4.14, 3.69, 3.72, 2.23, 1.98, 2.36,
			3.36, 3.58, 2.27, 2.22, 2.52, 6.42, 3.99, 3.03, 3.85, 4.43, 6.31, 7.74,
			3.36, 5.85, 4.18, 2.0, 1.83, 3.3, 3.0, 1.92, 2.7, 1.69, 1.2, 2.42, 3.96,
			3.78, 3.96, 2.58, 4.56, 1.32, 2.19, 2.67, 3.3, 5.22, 2.79, 3.39, 2.89,
			2.81, 0.96, 2.55, 3.455, 2.125, 3.27, 3.21, 3.42, 2.82, 4.71, 5.4, 3.39,
			5.25, 2.82, 2.28, 2.64, 4.71, 4.71, 2.58, 4.53, 3.09, 4.14, 4.02, 4.41,
			4.53, 1.38, 3.39, 1.48, 2.81, 2.11, 2.27, 2.04, 4.77, 7.11, 3.33, 3.52,
			2.69, 3.72, 1.512, 2.208, 1.792, 2.528, 2.13, 4.204, 5.456, 0.9, 3.48,
			1.83, 1.23, 0.39, 2.16, 0.583, 3.519, 1.958, 4.11, 3.24, 2.91, 6.68, 0.64,
			1.17, 1.02, 2.25, 2.083, 1.427, 2.61, 3.35, 56.93
		],
		"transcript_en": [
			"[MUSIC PLAYING]",
			"",
			"DAVID J. MALAN: All right, this is CS50, and this is week nine,",
			"the week where we synthesize the past several weeks",
			"and the past several languages, including HTML, CSS, and JavaScript",
			"most recently, plus some SQL, plus some Python.",
			"Indeed, the goal for this week is to synthesize all of those materials",
			"into a topic that's broadly described as web programming.",
			"Now to be fair, last week we did introduce a bit of JavaScript,",
			"and via JavaScript can you indeed program,",
			"but it was entirely client side as we used JavaScript last week.",
			"This week we'll reintroduce a server side component",
			"and indeed end by tying together the browser, the so-called client,",
			"and the web server, the backend of any web application.",
			"So to get there, let's consider where we came from.",
			"Last week in order to serve up any of your static web pages,",
			"static in the sense that once you write them, they don't change",
			"fundamentally, they don't particularly take user input",
			"unless you add a little bit of JavaScript,",
			"we use just this simple program called http-server.",
			"Now there are other equivalents of this command on Macs and Windows",
			"and Linux and other platforms, but for our purposes,",
			"http-server the program literally just runs a web server.",
			"And a web server is just a piece of software",
			"that's constantly listening on port 80 or port 443 in terms of TCP recall,",
			"and it's just listening for connections.",
			"And any time your browser connects it looks at the URL",
			"that you visited and maybe some parameters that you",
			"may have provided via that URL, or more generally via a form,",
			"and it then serves up a web page, optionally with some kind of output.",
			"But of course everything last week really was just static.",
			"It was just HTML files, CSS files, and maybe",
			"some JavaScript files or JavaScript within.",
			"But within the requests that your browsers",
			"were sending to that web server, were recall HTTP headers like this.",
			"And so among the things that program http-server was doing,",
			"and among the things any web server was doing,",
			"was analyzing the contents of that virtual envelope, top to bottom,",
			"left to right, trying to understand what is it your browser or your friend",
			"or your family member if you shared your you",
			"URL with them was trying to request.",
			"And if the first line of those HTTP headers was just get slash,",
			"that just means give me the default web page.",
			"And by convention, recall that typically means specifically give me the file",
			"called index dot HTML.",
			"That might have been explicit if you literally typed index",
			"dot HTML into the browser's URL bar, that would even more explicitly tell",
			"the server to give you that file.",
			"But recall we also played with google.com",
			"and specifically its search functionality.",
			"And recall that we manually last week constructed",
			"a URL that looked like this, and then we replicated it",
			"with an actual HTML form, the result of which when submitting it brought us",
			"to a URL of the form HTTPS colon slash slash, www.google.com slash search,",
			"question mark q equals cats.",
			"And last week http-server is fairly simplistic.",
			"It only served static content.",
			"So it was pretty much ignoring things like these URL parameters.",
			"But if you actually want to write a backend web server,",
			"a web application like google.com itself, you",
			"need to be able to analyze the contents of this virtual envelope,",
			"figure out what path the user wants, or route, so to speak.",
			"Slash search would be the route here in question.",
			"And then you have to figure out what the exact HTTP parameters are.",
			"Q, in this case, whose value is \"cats.\"",
			"So someone somewhere has to write code that parses that string, figuring out",
			"that you want slash search and then, OK, let's ignore the question mark.",
			"Let's declare a variable called q, and let's give it a value of \"cats.\"",
			"Like somewhere in the picture there needs to be code that does that.",
			"And today we introduce you to that very code.",
			"And we're going to introduce you to a library called Flask.",
			"And technically speaking, Flask is also called a framework.",
			"A framework is a way of doing things.",
			"It's a way of organizing your code, it's a way",
			"of writing your code that more specifically is",
			"just how you should use this library.",
			"Now why does Flask exist?",
			"And there are alternatives.",
			"Well, Flask exists just to honestly simplify a lot of tasks",
			"that for you and me would just get pretty boring pretty quickly.",
			"Imagine how annoying it would be if you wanted",
			"to implement some new website or some new mobile application for that matter,",
			"and you had to write code that analyzed text like this every time",
			"just to figure out what the user's input is.",
			"Wouldn't it be nice if you can just call a function, the equivalent",
			"of get string or get int, and let some other function written",
			"by someone else look at that text, figure out what the parameters are",
			"and what their values are, and just hand them to you in nice easy to use",
			"variables.",
			"So that is one of the things that Flask does for you.",
			"It analyzes the insides of these virtual envelopes,",
			"figures out what the user input is, figures out",
			"what the route is, like slash search or slash index dot HTML",
			"that the user wants, and makes it more easily",
			"available to you, the programmer.",
			"And it's a framework now in the sense that typically when",
			"you create, as we will today, a Flask based web application,",
			"you're going to typically organize your files and folders in this way.",
			"And this is what I mean by framework.",
			"Frameworks are not just libraries where they have functions that you can call.",
			"They typically have documentation that says, to use these functions,",
			"you should additionally organize your files and folders in this way.",
			"And perhaps the simplest Flask application would have these files:",
			"application dot py, which is where really all of our effort",
			"is going to go in writing code, in this case in Python,",
			"requirements dot text, which is just a simple text file that enumerates,",
			"top to bottom, one per line, what are the other libraries that you",
			"want to use in your application, static, which",
			"is going to be a folder that literally contains",
			"static files like your gifs, your jpegs, your pings, your CSS",
			"files, your JavaScript files, any of the files you wrote this past week,",
			"now they're going to go into this static folder, and lastly templates.",
			"And templates is going to be where more of your HTML goes.",
			"And we'll see what the distinction is there versus last week.",
			"So in short if you want to make a web application,",
			"not a website, a web application that takes user input,",
			"produces user output, maybe talks to a database,",
			"maybe sends emails, maybe does any number of other things,",
			"programmatically you have a web application",
			"and will use this framework here called Flask.",
			"And there are alternatives.",
			"In the world of Python there is a framework called Django,",
			"in the world of PHP there are frameworks like Symfony and Laravel and the like.",
			"In Java, in C sharp, and other languages there are similar frameworks.",
			"So this is just representative of the types of frameworks that are out there.",
			"But it's perhaps helpful to know before we dive into some actual code",
			"that these frameworks tend to implement certain design patterns.",
			"A design pattern is, again, just a fancy way of describing ways",
			"that humans write code.",
			"Suffice it to say over the past many decades,",
			"a lot of humans working initially independently",
			"kept solving the same problems again and again,",
			"and they realized, wow, I'm noticing patterns",
			"in how I'm solving a problem for this project",
			"and for this project and another.",
			"And once human programmers noticed these patterns,",
			"they might formalize them by writing a book,",
			"by writing a blog post or the like, and then",
			"give them a name, a design pattern that they recommend that other people adopt.",
			"Why?",
			"Just because it helps you organize your code instead",
			"of putting all your code in one massive file,",
			"well maybe if we put some code here, some code here,",
			"we can collaborate more effectively with others",
			"and just keep ourselves sane when maintaining bigger and bigger projects.",
			"So Flask implements what's generally known",
			"as an MVC design pattern or paradigm.",
			"MVC just refers to an acronym representing model, view,",
			"and controller.",
			"And these are sort of technical terms of art that at the end of the day",
			"we'll see are relatively simple.",
			"Controller is going to be where you write most of your Python code.",
			"It is the file or files that control your web application.",
			"So in the past, any time we've written a C program or a Python program,",
			"you have in effect been writing controller code.",
			"We just never slapped that label on it.",
			"There's also going to be today what we'll call a view, the V in MVC.",
			"And view just refers to all of the stuff that a human views, the HTML, the CSS,",
			"more generally the user interface.",
			"Anything involving the user is going to be described",
			"as part of your application's view.",
			"But again, any of the code that you, the programmer, write,",
			"that's part of your controller, so to speak.",
			"And then lastly is the so-called model, the M in MVC.",
			"And this generally refers to what technique, what service, what software",
			"you're using for your data.",
			"So maybe that's a SQL database, maybe that's a CSV file.",
			"The model refers to the data that your application is using.",
			"So again, none of these terms are introducing",
			"things we couldn't have done last week or in weeks prior.",
			"All we're doing by introducing MVC as an acronym or a design pattern",
			"is just to slap a label on the approach that Flask,",
			"and in turn many programmers, whether you're",
			"using Python or other languages used when designing web based applications.",
			"There are alternatives but this is among the most popular and perhaps",
			"among the simplest.",
			"So much like we've done with any language,",
			"let's take a look at the simplest possible web",
			"application you might write using this library or framework called Flask.",
			"It turns out if you fill a file called application dot py",
			"with these lines of code, you have just made your very first web application.",
			"Now it's not going to do much of interest, as we'll see,",
			"but this is the minimal amount of code pretty much that you need in order",
			"to write a web application that is a program that once you start",
			"it is going to just be constantly listening and listening and listening",
			"for TCP requests on port 80 or 443 to come in from people's browsers,",
			"your own included.",
			"And then now you have the ability to write",
			"code that responds to those users.",
			"So what do I mean by this?",
			"Well, let's go ahead and see this in action",
			"and start writing some of our own very first programs.",
			"I'm going to switch over to CS50 IDE, which we'll continue using here.",
			"I'm not going to run http-server anymore.",
			"Instead we're going to use Flask which will take the place of that server.",
			"And I'm going to go ahead and let's create a very simple file first.",
			"I'm going to go ahead and, actually let's do this.",
			"I'm going to first create a directory.",
			"So I'm going to create a directory called Hello,",
			"and I'm going to cd into Hello.",
			"And as always, if you open your file browser",
			"you'll see the same thing at top left, but in general I'll",
			"focus on the command line.",
			"And now that I'm in the Hello directory, let me go ahead and create a file.",
			"And I'll save this in Hello, whoops, I'll save this in Hello.",
			"",
			"And let me go ahead and call this, let's say,",
			"application dot py, and again, saving it in the Hello directory.",
			"All right if I type ls, I'll see it there and it's currently empty.",
			"So let me go ahead and pretty much copy some of that code from a moment ago.",
			"Let me go ahead and from the Flask library import something",
			"called Flask, capital F in this case, which is just their convention.",
			"And let me go ahead and also import something called render.",
			"Actually let's not even do that yet.",
			"Let's keep this minimalist at first.",
			"In order to turn this file into a full-fledged Flask application that",
			"is my own server, I'm going to go ahead and define a variable called",
			"app by convention.",
			"I'm going to call this Flask function, and I'm",
			"a little weirdly going to pass an underscore, underscore, name,",
			"underscore, underscore.",
			"Now we've only seen that special variable once in the past.",
			"And that, recall, was when I said, well, you should either",
			"call main at the bottom of your Python file to call your main function,",
			"or you can do this annoying thing where you say, if name equals,",
			"equals main then call main.",
			"So no matter why we used that in the past, this special variable,",
			"underscore, underscore, name, underscore, underscore essentially",
			"refers to the name of the current file.",
			"So this is a line of code that says, Flask, turn the current file",
			"into an application, that is a web application that",
			"will listen for browsers' requests.",
			"Now in my file I have to tell Flask what are my routes.",
			"A route is simply a URL.",
			"So slash, or slash index dot HTML, or slash",
			"search, or any number of other paths that you see in today's URLs",
			"on websites.",
			"And to do this in Flask I say app dot route, quote unquote slash.",
			"Now, this is something we've not seen in Python before,",
			"but this is actually a Python feature.",
			"Any time you see an at sign at the beginning of a function like this,",
			"it's what's called a Python decorator.",
			"And for our purposes today, this is just a special way",
			"of applying one function to another.",
			"But let me leave it at that for now and just",
			"say that the convention when using Flask is that at first you",
			"define your route like your slash default route,",
			"then you define a function.",
			"And the function can be called whatever you want,",
			"but by convention you should probably call",
			"it something appropriate for the actual route in question.",
			"And again, humans tend to call the default route your index.",
			"So I'm going to go ahead and call this function index.",
			"And below that, let me just go ahead and do something silly like Hello, world,",
			"literally returning that string.",
			"And let's go ahead and see what exactly happens here after doing that.",
			"Let me go ahead now and in my Hello directory if I type ls,",
			"notice that again, I only have one file, application dot py.",
			"In order to start my server today, because it's a Flask application,",
			"I do not want to use http-server, I instead",
			"want to run the command Flask run.",
			"So Flask is, yes, a library.",
			"But it also comes with a program when you install it",
			"on your Mac or PC or the IDE that lets you start a Flask application as well.",
			"And you'll see some cryptic output here.",
			"But just like http-server, you'll see the URL",
			"of your currently running application.",
			"And if I go ahead and click this URL and open it in another tab, voila,",
			"I see my very first dynamic web application.",
			"It's only printing Hello, world.",
			"And in fact, if I go to Chrome's view page source feature,",
			"notice that it's not even full-fledged HTML.",
			"It's literally text, but that's because I didn't",
			"bother returning any actual HTML yet.",
			"So let's do that.",
			"Let's actually do this more properly and not just return",
			"some arbitrary string of text.",
			"Let me stop the server and let me focus now on doing this.",
			"By default the route called slash I've claimed",
			"means that you should return a file called index dot HTML.",
			"Well let's assume for the moment it exists.",
			"How do I go ahead and return it?",
			"Technically I'm going to go ahead and render",
			"a template called index dot HTML.",
			"And in order to use this function render template,",
			"I need to import it from the Flask library as well.",
			"So Flask again is a library, comes with a lot of functions.",
			"The first one of which is called Flask itself.",
			"That's what activates this as a web application.",
			"Render template is another function whose purpose in life",
			"is to go find a file called index dot HTML, grab its contents,",
			"so that you can then return it.",
			"So it's similar in spirit to using open and read in Python a few weeks ago.",
			"But it's going to give us some other fancy features as well.",
			"But let me go now into my command line, type",
			"ls to remind us that we only have application dot py.",
			"I don't want to create index dot HTML in the same directory.",
			"Flask, recall, has certain organizational recommendations",
			"like this here whereby I should actually put index dot",
			"HTML and all of my HTML files today onward in my folder called templates.",
			"So let's do that.",
			"Let me go ahead and make a directory called templates with make dir enter.",
			"If I type ls now you'll see that I have a templates directory.",
			"Now let me go ahead and create a new actual file called index dot HTML.",
			"Let me store that in my templates, directory and now let me go ahead",
			"and something pretty familiar.",
			"We've done this many times at this point whereby we just",
			"whip up a quick HTML page.",
			"I'll give my doc type of HTML up here.",
			"Let me have my HTML tag.",
			"My language will be English by default. Down here I'm",
			"going to have the head of my page.",
			"Inside the head I'll have a title.",
			"I'm going to call this Hello.",
			"Down here I'll have my body.",
			"Inside the body I'm just going to say Hello, world instead.",
			"So still no progress really from last week.",
			"But let me now go back to application dot py,",
			"remind us that we've just now returned the function call,",
			"render template of index dot HTML, and again, this function, render template,",
			"is going to go open that file, grab all of the bytes inside of it",
			"and return them ultimately via this line.",
			"So now let me go ahead and run Flask run again, let me go ahead",
			"and click on my IDE's URL, voila, same thing.",
			"But now if I open up Chrome's view source feature,",
			"notice now that I've returned a full-fledged web page.",
			"So again, not really fundamentally that interesting,",
			"but I've taken this baby step now toward generating any HTML that I want.",
			"So let's make this more interesting.",
			"I've claimed all along that there is this way of course with web programming",
			"to take user input via the URL.",
			"So how can we go about doing that?",
			"Well, me go ahead and propose this.",
			"Let me go ahead here and write an additional line of code",
			"that does something like this.",
			"Let me declare a variable called, actually let's do this.",
			"After render template, it turns out you can pass in 0 or more named arguments.",
			"And the names of these arguments are entirely up to you,",
			"and we haven't seen that thus far.",
			"Thus far in the past, any time we've used someone else's function,",
			"you had to check the documentation or the lecture notes",
			"to figure out what were the available arguments you",
			"could pass into this function.",
			"But that's not true with render template.",
			"It's a little more powerful.",
			"So if I want to pass a user's name from my application dot py file,",
			"which, recall we're going to start calling my controller,",
			"I can say, give me a variable called name.",
			"What do I want the value of this person's name to be?",
			"Well really what I want it to be is the equivalent",
			"of whatever is after that question mark, right?",
			"The only way, fundamentally, to get user input from a URL, we've seen,",
			"is whatever is after the question mark.",
			"And I don't want q, and I don't want cats,",
			"I want name equals David or name equals Brian.",
			"So how can I do that?",
			"Well, let me go ahead and say this: name equals",
			"request dot args dot get, quote unquote name,",
			"and let me Additionally add request to the top of this file.",
			"So what am I doing?",
			"When I import this other request variable from the Flask library,",
			"this gives me access to the HTTP request and with it any parameters",
			"that might have been in the URL.",
			"And what Flask does for me is it parses that URL.",
			"It figures out what is q, what is cats, what is name, what is David.",
			"Whatever is after the question mark, Flask parses it for me",
			"and hands it back to me as variables, and I can get access to those variables",
			"by calling request dot args for arguments,",
			"dot get, and then the name of the parameter",
			"that I want to get from the URL.",
			"So now if I save this, let me go back to index dot HTML,",
			"and here is why this file today onward is now called a template.",
			"A template, just like in the human world,",
			"is kind of a framework into which you can plug other values.",
			"It's a template that you can base your own work on.",
			"It's like a blueprint that you can base a building on.",
			"So templates typically have special syntax",
			"via which you can plug in some values.",
			"And I'm afraid the syntax is slightly new versus past things we've seen,",
			"but if you use two curly braces, as though one weren't",
			"bad enough in C and in other contexts, two curly braces, left and right,",
			"you can tell Flask's render template function to plug",
			"in right there the value of any variable that you",
			"have passed into render template as one of these arguments in the function",
			"call.",
			"So let me go ahead now and run Flask run again to restart my web server.",
			"Let me go ahead and open this URL, and it looks pretty stupid right now.",
			"Hello, None.",
			"But recall that None is a special value in Python.",
			"It means something has no value.",
			"So you know what I could do?",
			"It turns out that, let me go back over here, if I go back to my URL,",
			"and let me zoom out so you can see it, let me go ahead and add a slash,",
			"question mark, and not q equals cats because that's irrelevant now,",
			"but how about name equals David.",
			"And let me zoom in on that.",
			"All I've added is the slash question mark name equals David.",
			"Let me go ahead and hit Enter, and voila, now I",
			"have a web page that says Hello David.",
			"And indeed if I view my page source, notice the HTML",
			"has been dynamically generated.",
			"There is no file on my IDE that says Hello comma David,",
			"rather it's been dynamically plugged in.",
			"And notice this can change.",
			"If I go ahead and change the name to Brian, enter,",
			"his page changes, and of course if I view the page source now",
			"it's as though I had a file called index dot HTML",
			"that literally had Brian's name in it.",
			"But no, there's just that placeholder within my template instead.",
			"And I can clean this up.",
			"Notice it looked pretty stupid if there was no value for name,",
			"but it turns out the request dot args, dot",
			"get function takes a second optional argument.",
			"If I don't know if there's going to be of value",
			"and I want to give it a default argument,",
			"my second argument to the get function can actually be the default value.",
			"So if I go ahead now, and let me go ahead rerun Flask.",
			"And let me go ahead now and reload with no name argument.",
			"Now you see a default value of Hello comma world, but if I go back up there",
			"and put my name back in, now it doesn't need the default.",
			"I see what the human actually typed in.",
			"So what's going on here, well, if you consider",
			"what google.com is doing when you type in cats and hit Enter,",
			"that word q equals cats is being passed to google.com in the URL,",
			"Google is running some program, maybe it's Python with Flask,",
			"maybe it's some other language that's analyzing the URL,",
			"grabbing q equals cats, and then they're searching their database essentially",
			"for a keyword of cats, and then they're dynamically",
			"generating the HTML that shows you all of those pictures and search",
			"results of cats.",
			"There is no web page, there's no HTML file on Google servers",
			"that constantly has a big list of cats.",
			"Like there's certainly no human maintaining a really big HTML",
			"file just filled with image tags and cats all day long.",
			"Suffice it to say that's all dynamically generated.",
			"And even with this trivial example, we see now",
			"perhaps that we're scratching the surface of that very capability.",
			"All right, let me pause here and see if there are any questions or confusion,",
			"because it's a lot all at once given that with any framework",
			"you typically have to learn the conventions first",
			"and then you can start to be productive.",
			"BRIAN: Yeah, so in your, when you called the render template function,",
			"someone asked why don't you need to say it's in templates slash index dot HTML,",
			"and why did you just say index dot HTML?",
			"DAVID J. MALAN: Good question.",
			"This is one of those \"just because\" answers.",
			"The render template function has been implemented in such a way",
			"that it assumes that your files are in the templates directory.",
			"You can technically override that by reconfiguring the application,",
			"but the default and indeed the convention",
			"is to just put those files in templates.",
			"Good question.",
			"Santiago?",
			"SANTIAGO: Why when you declare the app, app dot route,",
			"you have to include the forward slash as an argument to that?",
			"DAVID J. MALAN: Yeah, so why do you have to include the forward slash?",
			"That is the way, in Flask, of telling Flask, use",
			"the following function for this route.",
			"And slash is perhaps the simplest, certainly most basic route",
			"that you could define.",
			"It's sort of the absence of any other words.",
			"So you have to put slash there because otherwise the server won't",
			"know what to do if you visit something dot com, slash, and that's it.",
			"We can change this notice.",
			"I can change this to anything I want.",
			"Let me stop my server, and let me change this to slash secret, as though I'm",
			"creating a secret URL on my website.",
			"Let me go ahead and rerun Flask run.",
			"Let me open up this URL, and notice what happens.",
			"Nothing happens.",
			"Not found, 404 when I visit slash.",
			"And Chrome is just being annoying.",
			"It's hiding the slash just for simplicity these days,",
			"but the slash is there even though you're not seeing it as the human.",
			"But if I change this and go to slash secret, then we see that page again.",
			"So that app at app dot route function just",
			"lets you define what route should be associated with the following function.",
			"Other questions?",
			"Yeah, over to Sophia.",
			"SOPHIA: The model, is it a part of the HTML file now?",
			"Like the name, I guess as the data, is it encoded with an HTML file?",
			"DAVID J. MALAN: Yeah, at the moment I would",
			"argue we don't really have a model yet.",
			"Like there's no database, there's no CSV file,",
			"so right now we're just playing with C, controller and V, view.",
			"And that's totally fine.",
			"It's only when we have a full-fledged application like we soon will today",
			"that really the M comes into play.",
			"But again, this is sort of, reasonable people might disagree.",
			"They're just conventions, they're not hard, fast rules.",
			"All right, so this is a little silly, that in order",
			"to be greeted by my website you have to have the wherewithal",
			"to know that you have to type your own name into the URL bar, right?",
			"No one does that.",
			"That's just not how the web typically works.",
			"We instead find ourselves as humans filling out forms.",
			"So let's take this one step further and actually improve things in such a way",
			"that we actually have a form instead.",
			"So let me go ahead and do this.",
			"I'm going to go ahead and create another file.",
			"Let me go ahead and do this.",
			"Let me go into my templates directory where I currently",
			"only have index dot HTML, and let me just copy this file,",
			"index dot HTML, into another one right now called greet dot HTML.",
			"And that is to say I want my greet file, ultimately, let me go ahead",
			"and open this in my editor, greet ultimately",
			"is going to do the job that index was a moment ago.",
			"And I'm going to change the behavior of index",
			"dot HTML to instead have an actual form.",
			"So I'm going to go ahead and delete this and I'm",
			"going to do a form action equals, a route",
			"called slash greet, which doesn't exist yet, but I wager it soon will.",
			"I'll use get initially, and then inside of this form",
			"let me go ahead and give myself an input whose name is going to be literally",
			"name, because I want the human's name.",
			"So the red name is the tag's name.",
			"Name in green at the moment is the name of the human in question,",
			"although a little confusingly.",
			"And then let me go ahead and say the type of this field will be text.",
			"And then let me go ahead and give myself an input type, equals submit,",
			"so I have a submit button, and the value of that",
			"will be whatever the default is.",
			"So now let me go back to application dot py,",
			"let me go back to my Hello directory.",
			"Make sure you don't run Flask run in your templates directory.",
			"Make sure you only ever run it where the application dot py file is.",
			"Let me run this file.",
			"Let me go ahead and open it now, and voila.",
			"My slash route, the default route notice,",
			"has changed to be this HTML form.",
			"And if I look at the view source of that in Chrome,",
			"you'll see exactly what I just typed.",
			"So there's nothing dynamic about the form.",
			"That is indeed hard coded.",
			"There's no placeholders there.",
			"But notice that this form has been designed in advance by me to go",
			"to the slash greet route using get.",
			"Well how do I implement that?",
			"Well let me actually go into my application",
			"now, because you'll notice if I type in my name, David, and click Submit,",
			"not found.",
			"Because notice that slash greet does not exist.",
			"That is not a defined route in my application.",
			"So let me go back to my server, and let me go ahead down below,",
			"and let's just do something similar.",
			"App dot route, quote unquote, slash greet.",
			"So let's give myself a second route.",
			"Let me go ahead and define the function that",
			"should be called when a user visits slash greet.",
			"And again, you can call it anything you want, but let's keep ourselves,",
			"let's keep things simple and just call it the same thing",
			"as the route, though again, that's not a requirement.",
			"And then in my greet function, well what do I want to do?",
			"Let me go ahead and say, return \"to do.\"",
			"I haven't done it yet.",
			"But again, as in C and in Python, take baby steps,",
			"and just make sure the basics of your code are working so far.",
			"Let me rerun Flask run.",
			"Let me open my URL.",
			"And now let me try filling out this same form again.",
			"And actually I'm a little annoyed that the autocomplete is popping up,",
			"but we can turn that off later.",
			"Let me go ahead and click Submit, and voila.",
			"Now the greet route does exist.",
			"Notice that slash greet is fully functional.",
			"It's not a not found anymore, but it's of course not doing anything useful,",
			"hence the \"to do.\"",
			"Well that's OK.",
			"Let me go back here and stop the server.",
			"And let me instead have greet render a template called greet dot HTML.",
			"But recall that greet dot HTML is where I started.",
			"It is the file now that has this placeholder.",
			"So I think what I can do is just move the code that I was using earlier",
			"for index which no longer needs it, because index",
			"dot HTML has only a hardcoded static form, let me go ahead",
			"and just move the name parameter to my greet route instead.",
			"Let me go ahead and restart my server.",
			"Let me go ahead and open my URL.",
			"Let me go ahead and type my name in and hit submit, and voila.",
			"So now we have two fully functional routes, slash and slash greet,",
			"the first of which just so happens to only display",
			"the static form, the second of which actually happens to do something",
			"more interesting and greet the user.",
			"And I mentioned a moment ago, I was kind of annoyed by the user interface",
			"here, the fact that it's remembering who typed their name in before,",
			"I just, rubbing me the wrong way, leaks a little bit of privacy.",
			"So let me actually go into my index and recall",
			"that there's other attributes in HTML like autocomplete equals off.",
			"I can also do autofocus to give that textfield the blinking cursor",
			"by default. And now let me go ahead and restart",
			"my server after making this change.",
			"Let me go ahead and reload.",
			"And you know what?",
			"We can do a little better.",
			"Let's also add one of those placeholder, quote unquote name,",
			"just so that it's a little more clear to my visitors",
			"that, oh, you want me to type my name, David, here.",
			"Autocomplete is now off.",
			"I click Submit, voila.",
			"We now have a working, if simple, web application.",
			"All right, so what were the additions there?",
			"Same exact application as before, but we added a second route",
			"and a second template so that one form could submit data to the other route",
			"instead.",
			"So let me pause here to see if there's any questions or confusion before we",
			"continue to iterate on this.",
			"Questions or confusion.",
			"SPEAKER 1: I'm wondering how that came equals double quote name,",
			"is that equivalent to the name that you later specified?",
			"DAVID J. MALAN: It is.",
			"And I'll demonstrate this by changing that now.",
			"I called it name just because we're indeed talking about humans' names,",
			"but I could call this anything I want.",
			"So for instance in my form I'm collecting this as the person's name.",
			"But I could change it to first underscore name, for instance,",
			"if I only care about their first name.",
			"Let me change the placeholder to make clear",
			"that I only want their first name.",
			"Let me now go to my application dot py.",
			"Let me get the first underscore name HTTP parameter, and then",
			"in my template, greet dot HTML, let me change this to first underscore name.",
			"And actually I need to make one more change.",
			"I need to change this to first underscore name as well.",
			"So it's a little annoying that you have to repeat yourself all over the place,",
			"but they mean different things.",
			"In the context of application dot py, this is a parameter",
			"that I'm passing into my template.",
			"In the context of this get function, this is the HTTP parameter",
			"that I'm grabbing from the URL.",
			"And in the context of my template, this refers",
			"to the first of those, which is the argument I'm",
			"passing into render template.",
			"And if I reload the server, and let me go ahead and reload the form here.",
			"Let me type in only my first name.",
			"Click submit.",
			"A whole bunch of things changed, not in terms of output",
			"but in terms of functionality.",
			"And you'll see that now I'm using first underscore name instead of name itself.",
			"Other questions or confusion about routes or parameters",
			"in the URL, templates or otherwise?",
			"No?",
			"All right, well let me ask a question then of us.",
			"Let me go ahead and scroll this down just a bit to make room.",
			"Here, again, is my index dot HTML file.",
			"It contains a form.",
			"Here now is my greet dot HTML file, which contains just,",
			"hello comma so and so.",
			"What looks poorly designed about this?",
			"I'm going to go ahead and revert just to my shorter names just so a little more",
			"fits onto the screen at once.",
			"But what looks poorly designed about this?",
			"I claim that it's correct.",
			"We seem to have a working web application.",
			"But what is poorly designed arguably?",
			"BRIAN: Let's hear from Peter.",
			"SPEAKER 2: Well I guess you're getting it,",
			"so the URL is exposing the personal data of the input, whatever",
			"they might have put in, so I guess we'd want to use post instead to hide it.",
			"DAVID J. MALAN: Good catch.",
			"So all this time I have very deliberately but a little worrisomely",
			"been leaking information in the URL in the sense",
			"that now it's probably going to be saved by my browser, right?",
			"Often when you're typing something to your URL bar,",
			"you can see what you've searched for before,",
			"what websites you've been to before, and that's a good user interface",
			"feature in that it just helps you type your keystrokes because you can just",
			"hit Tab and hit Enter to finish your thought quickly.",
			"But it's a little invasive if you don't want people knowing where you went",
			"or what you searched for or if it's a lab computer",
			"or your siblings are using it too.",
			"There's a lot of reasons why you don't want your typed input ending up",
			"in that URL bar.",
			"And I proposed last week that we can avoid this by using,",
			"what you proposed is post.",
			"And indeed let's do this.",
			"Let me go back to my index dot HTML.",
			"Let me make a simple change in my HTML file, changing the method to post.",
			"Post is going to be almost the same as get,",
			"but instead of putting my parameters in the URL",
			"like q equals cats or name equals David in the URL,",
			"it's going to instead metaphorically put it lower, deeper",
			"inside the virtual envelope.",
			"So it's still being sent from the browser to server,",
			"but it's not going to get remembered by the browser in the URL bar.",
			"But if I do this I need to change my controller.",
			"I need my Python code to look in a somewhat different location",
			"to get at that.",
			"And it's a pretty simple change.",
			"Instead I have to do this.",
			"I have to tell Flask that the route, slash greet,",
			"is actually going to support a different set of methods.",
			"Rather than supporting get, which is the default,",
			"I have to pass in the somewhat cryptic argument called methods.",
			"And then I have to pass in literally a Python list of the methods",
			"I want this list to support.",
			"By default if you don't use this argument, all",
			"of these routes, the first and the second,",
			"have essentially this default value, methods equals,",
			"quote unquote get in a list, so a list of size one.",
			"It would be a little annoying if you had to type that all over the place,",
			"so the default just allows you to just type nothing at all.",
			"But if you want to support post, you do have",
			"to override this and change the get default to post explicitly.",
			"And you have to get the parameters from a different variable.",
			"Instead of using request dot args which refers to the arguments in the URL,",
			"you have to change it to request dot form.",
			"These are horribly named.",
			"In Flask, these global variables, request dot args and request dot form",
			"refer to get and post respectively.",
			"Better names might have been request dot get and request dot post,",
			"but this is what we have.",
			"So request dot args is for get requests in the URL.",
			"Request dot form is for post requests where the same info is buried deeper",
			"in the virtual envelope.",
			"So after those changes, let me go ahead and make,",
			"sorry not make, wrong language, Flask run.",
			"All right let me go ahead and open my URL, and voila.",
			"I'm going to type in David, click Submit, and now notice the magic.",
			"Now the route is still slash greet, but no one",
			"who uses my laptop later is going to know what my name was",
			"or what my Google search was or what my credit card number was",
			"or anything else that I might have typed into a form here like my name.",
			"But the output is still fully functional.",
			"So this indeed, to be clear, is post is what",
			"you would use whenever you're collecting anything remotely personal",
			"like people's email addresses, perhaps, or their credit",
			"card, or their passwords, certainly, and other values,",
			"but you can otherwise use get as we've been using thus far.",
			"Well let me ask a follow up question, because I",
			"think we can still do better than this.",
			"There's something fundamentally about the design of index dot HTML",
			"and greet dot HTML that feels a little suboptimal.",
			"And I dare say several of you noticed this same problem in this past week",
			"when you were just creating a few HTML files on your own.",
			"What was a little tedious or annoying or messy or poorly designed",
			"as best you could tell from creating these several HTML",
			"files for your own personal home page?",
			"BRIAN: The chat is suggesting you've repeated some HTML between the two HTML",
			"files.",
			"DAVID J. MALAN: Yeah, my god, I mean honestly by the second file,",
			"third file, fourth file, you're probably just copying and pasting",
			"your previous files and then making minor changes,",
			"and that's all you could do.",
			"With HTML and CSS alone and even JavaScript,",
			"you can't share HTML across multiple pages.",
			"Your only option this past week when serving static content",
			"was to copy and paste that content redundantly.",
			"And look at this.",
			"In my index dot HTML file, everything I've just highlighted from line 1 to 7",
			"happens to be exactly the same as everything from line 1 to 7",
			"in greet dot HTML.",
			"So here's another feature you get with Flask or any web programming framework.",
			"These aren't specific to Flask, per se.",
			"You get the ability to factor out common content.",
			"And so how do we go about doing this?",
			"Well, let me go ahead and do this.",
			"Let me go ahead and create a third file that by convention in Flask",
			"is called layout dot HTML.",
			"And to be safe, to be sure, I'm going to put this in my templates directory",
			"because again it's an HTML file.",
			"I'm going to go ahead and copy paste all of that same boilerplate, if you will,",
			"all of the commonalities, and delete what was specific to greet dot HTML.",
			"And I think what we're looking at, lines 1 through 10,",
			"is now like a template for, if you will, the layout for my other two web pages.",
			"So you know what, let me go ahead and do this.",
			"Let me use some special syntax and say block body, and then, a little weirdly,",
			"end block here.",
			"So this is Flask specific syntax or technically",
			"Jinja specific syntax, which is a language that Flask",
			"is using which someone else wrote, this is special syntax in Flask that",
			"essentially says put a placeholder here.",
			"Put a placeholder here so I can plug in other HTML in just a bit.",
			"So how do I use this now?",
			"Well let me go to my index dot HTML file,",
			"and let me get rid of all of the redundancy,",
			"boiling down index dot HTML really into its essence.",
			"The only thing that's special about index dot HTML was that form.",
			"So if I want to use the same layout that I just created, let me go ahead",
			"and say up here using that special syntax, extends layout dot HTML,",
			"and then down here let me say, here is my body block, if you will.",
			"Let me un-indent that a bit.",
			"And then let me say down here end block.",
			"So again, syntax is weird, but the ideas are pretty similar.",
			"This is almost similar in spirit to our header files",
			"in C, where you could factor out some commonalities",
			"and just reuse them in multiple places.",
			"Here it's a little fancier because you can kind of",
			"have this blueprint, this layout, literally",
			"that you can then plug different content into.",
			"So this first line says, hey Flask, the following file, index dot HTML,",
			"essentially inherits from, it extends my default layout.",
			"Well what's that layout?",
			"It's this.",
			"Notice that this layout defines this placeholder, arbitrarily called body.",
			"I could have called it x or y or z, but I'm going to call it body.",
			"Why?",
			"Because really it's like 100% of the contents of my body.",
			"So seems like a good name.",
			"And then in index dot HTML, I just now need to tell Flask,",
			"here comes some code that you should plug into that placeholder.",
			"And you can plug one or more lines of HTML code in here.",
			"So let me go ahead and save this.",
			"Let me go ahead now and go to greet, similarly delete all that redundancy,",
			"and now let me go up here and say again, extends layout dot HTML,",
			"and then down here let me say here is my body block.",
			"Let me just un-indent this slightly, and then let me say end block",
			"and save that file.",
			"So now these HTML files are quickly looking weird.",
			"Like there's barely any HTML in here, it's",
			"really just text and weird Flask syntax, same thing in index dot HTML,",
			"but again, this is one of the values of a web application.",
			"Where you have a programming language like Python,",
			"you can factor out those commonalities and really",
			"start generating pages dynamically just like the Googles and Facebooks",
			"and others of the world do every day.",
			"So let me go ahead now and rerun Flask run",
			"and cross my fingers as always because I made a whole bunch of changes here.",
			"Let me open my URL, and voila, seems to be working OK so far.",
			"Let me go ahead and, before I submit this, let me show you the page source.",
			"Notice that it's there it's not quite as pretty printed,",
			"like the indentation's a little off, but that's OK.",
			"Your templates should be well styled.",
			"Everything should be beautifully indented in your templates.",
			"But if your templates are then rendered by Flask",
			"and the whitespace isn't quite as pretty,",
			"that doesn't matter because again, the browser doesn't care.",
			"But indeed, I have a full-fledged complete web page.",
			"Let me submit this form.",
			"It seems to still work.",
			"That's my slash greet route.",
			"I'm seeing Hello, David, and if I view page source here,",
			"notice another confirm form submission.",
			"This is actually a safety feature.",
			"You don't want websites tricking you into like checking out",
			"twice with your credit card via post, so I'm",
			"going to go ahead and click reload manually",
			"which confirms that I want to resubmit this form because there's",
			"nothing dangerous about it.",
			"There is now my greet route.",
			"So this probably would have saved you all a lot of headache or tedium",
			"or copy paste, you just didn't have this tool in the tool kit last week.",
			"You cannot do it with HTML and CSS or even JavaScript alone in the browser.",
			"So this is where you have templates really shining.",
			"Not only can you have templates use two curly braces",
			"to plug in values of variables, you can use this curly brace percent sign",
			"syntax and plug in actual contents of other files.",
			"Whew.",
			"Questions or confusion?",
			"BRIAN: There was a clarification question.",
			"Could you tell us what is [? Jinja? ?]",
			"DAVID J. MALAN: Yes, so I skirted over that because I",
			"was getting annoyed at just like how many new terms there",
			"are today and frankly in the web programming world",
			"that we're sort of stuck with.",
			"So this is a good example of code reuse.",
			"There's a lot of smart people out there, a lot",
			"of people solving different problems.",
			"It would be a little annoying and a little arrogant if all of us",
			"tried to solve all of the world's computing problems.",
			"And so the authors of Flask decided that for their template feature",
			"they would not reinvent the wheel and come up with their own syntax.",
			"They would use someone else's existing crazy syntax, if you will,",
			"that uses the double curly braces and the curly brace",
			"and the percent signs so that they're just combining",
			"one person's language with another.",
			"And this is so common.",
			"And this is a good thing because technically you",
			"can plug in a different language if you really are anti-Jinja for some reason,",
			"you just hate the syntax, you can actually use something else.",
			"And so this is actually a demonstration in computing",
			"of really a component based design where you",
			"can plug different pieces of software together and have",
			"them still interoperate.",
			"And we'll add to the course's website links to Jinja's documentation,",
			"and we'll see in a little bit what more you can do with Jinja in the template.",
			"So again, Jinja just refers to really the double curly brace syntax",
			"and the curly brace percent sign syntax that appears in our templates files.",
			"All right, one last feature when it comes to saying hello.",
			"Thus far in application dot py, I've been",
			"keeping things a little conceptually simple if complicated syntactically",
			"by having two separate routes, one route, slash, for my form,",
			"and then another route for my actual greet route that",
			"actually displays the information.",
			"But strictly speaking I can be a little clever",
			"and combine these routes, if only because if you're",
			"building a pretty sophisticated website that's got lots of routes,",
			"it's kind of annoying if like every route needs two routes if one form has",
			"to submit to another.",
			"So let me just propose that we tighten up our implementation",
			"and actually reuse our one route.",
			"So let me go ahead and delete my greet route,",
			"just because it's bothering me that I'm getting a little redundancy there,",
			"and let me go ahead and say that my default route, my index,",
			"will actually support both methods, get and post.",
			"So I'm going to use the same route, not only to show the user the form,",
			"but also to say hello to the user as well.",
			"So I need to be able to support both get and post on the same route.",
			"So how am I going to do this?",
			"Well, let me go ahead and do this.",
			"What I can do is if request dot method equals equals get,",
			"then I can actually go ahead and execute this line of code here.",
			"Else if request dot method equals equals post, then what I'm going to do",
			"is this, return, render template, greet dot HTML,",
			"and I'm going to pass in a name of request dot form",
			"dot get, name, and then a default value of world.",
			"So nothing new.",
			"That's just the code that I deleted a moment ago.",
			"But notice now I'm reusing the same route,",
			"and I'm just checking logically in my controller code,",
			"if you will, well if the method came in as get,",
			"go ahead and just display the form.",
			"If the method came in as post, go ahead and greet the user.",
			"Now why is this going to work?",
			"Well it turns out, whenever you visit a URL on the internet,",
			"like HTTP colon slash slash, www.harvard.edu or yale.edu",
			"or google.com, you have always been making get requests.",
			"In fact, recall last week when we looked at those sample HTTP requests,",
			"and the headers, everything we did last week",
			"had the keyword get by default in the envelope.",
			"So get does not have anything fundamentally to do with forms,",
			"it's actually the default HTTP verb that's",
			"used whenever you just visit any URL.",
			"Any time you visit a URL on the web you are using get by default.",
			"When you submit a form, you are potentially using get as I did first,",
			"or you are using post as I did second.",
			"So what's the takeaway here?",
			"Well let me go ahead and make one change to my form.",
			"I do want to submit via post.",
			"I'm going to submit though no longer to slash greet",
			"but just to my default route.",
			"And if I did everything right here, let me go ahead and run Flask run,",
			"let me open up my URL as before, and I'm at my slash route.",
			"Notice if I view my page source, the action is going to be slash also,",
			"so I'm sort of using the same route for two different pieces of functionality.",
			"Let me type in my name, click Submit, and voila, amazingly, it worked.",
			"Hello, David, but my route has not changed.",
			"Now, why is this why is this useful?",
			"It may or may not be.",
			"It's just the capability you now have because if you can express yourself",
			"programmatically in Python, you can distinguish between the two verbs",
			"get and post that are inside of your incoming HTTP request, and if anything",
			"this just means you don't need twice as many routes just to have one thing pass",
			"to another, and it turns out there's also",
			"other features that derive from just being able to reuse the same routes.",
			"But more on that down the road.",
			"All right, any questions then on saying hello, Flask, or these routes?",
			"No?",
			"All right.",
			"Well just as a teaser here, here is a screenshot",
			"of pretty much the very first web application I made back in the day.",
			"When I was an undergraduate, I got involved in intramural sports,",
			"not in an athletic sense but in a computer science sense.",
			"I volunteered to actually build the very first website for Harvard's freshman",
			"intramural sports program, otherwise known as Frosh IMs.",
			"At the time we were using paper to write your names down on and email",
			"addresses down on, your choices of sports,",
			"we would walk across Harvard Yard, the grassy area in the middle of Harvard,",
			"slide it under the door of one of the proctors or resident advisors,",
			"and voila, we were registered for sports.",
			"But there was no website.",
			"There was an internet but there was no website yet.",
			"So this was late 90s.",
			"So I thought it would be fun to implement",
			"that same idea of a piece of paper for registering",
			"for sports in a web browser.",
			"And now unfortunately I only knew C and maybe some C++ at the time and a couple",
			"of other languages from other CS courses.",
			"I knew nothing about web programming.",
			"So I taught myself how to web program with the help of lots",
			"of questions and answers from friends.",
			"I happened to use a language called Perl, and the result at the end",
			"was this frightening design here with lots of menu options",
			"up top that use JavaScript and some images here",
			"and some CSV files essentially on the backend that",
			"stored all of the registration data.",
			"I knew nothing about databases at the time.",
			"But it was my first foray into web programming.",
			"And what we thought we'd do after our first break",
			"here is reimplement the idea of a registration system using HTML, CSS,",
			"and Python and ultimately SQL to reimplement the same idea,",
			"worrying even less today about the aesthetics.",
			"But let's go ahead and take our first five minute break here.",
			"And when we come back Frosh IMs.",
			"All right, we are back.",
			"So the goal at hand is to implement the most primitive of features",
			"that I first implemented via this Frosh IMs",
			"website years ago, that of allowing students to register for sports.",
			"And to register for a sport, let's collect everyone's name and maybe",
			"the sport for which they want to register.",
			"So how are we going to do this?",
			"Well, let me go ahead and copy just the layout from our previous hello examples",
			"just because it's pretty good boilerplate.",
			"And I'm actually going to make one change.",
			"It turns out that it's very easy to make your website pretty mobile friendly",
			"just by adding a couple of lines of code.",
			"In particular in my head here I'm going to go ahead and add a tag called meta.",
			"It's going to have a name of viewport.",
			"Viewport refers to the rectangular region",
			"that defines most of your web browsers' user interface.",
			"The content of this meta tag is going to be initial scale",
			"equals 1 and width equals device width.",
			"And this last keyword is kind of the magic.",
			"This incantation here essentially tells the browser",
			"whatever the user's, whatever the width of the user's device",
			"is, assume that that's the maximum width for my web page,",
			"and it's going to scale my font sizes automatically",
			"up or down based on whether you're using a laptop or desktop or iPhone",
			"or Android phone or something else altogether.",
			"There's other things you need to do to make your websites responsive,",
			"so to speak, and it's helpful to use libraries like Bootstrap for that,",
			"But this minimally helps at least address issues of font size.",
			"So I'll start including that here as well.",
			"Now let me go into my application dot py, which unfortunately for Frosh IMs",
			"is empty.",
			"And indeed to be clear, over the break I created, application dot py is empty,",
			"a templates directory, and inside my templates directory",
			"is just that layout dot HTML.",
			"So we've got a little bit of work to do here together.",
			"So let's go ahead and start building out this application.",
			"Let me go ahead and import from Flask the Flask function itself",
			"plus render template which I bet we're going to need,",
			"and then also request which we're probably going to need as well.",
			"Let me initialize the application with this Flask function using",
			"underscore underscore name.",
			"So again, that's literally how we began earlier.",
			"And let's just go ahead and start defining our first route.",
			"App dot route, quote unquote slash.",
			"Let me define a function called index, but again I could call it anything,",
			"but that's good convention, and just to get",
			"me started I could really do this quickly and say return \"to do,\"",
			"but I'm kind of confident now in my ability",
			"to at least use render template.",
			"So let's at least render a template called index dot HTML",
			"that admittedly does not yet exist.",
			"So let's make it exist.",
			"Let me go ahead and create a new file called index dot HTML.",
			"And again I could call this whatever I want,",
			"but if this is going to be my default route,",
			"I might as well call my default page the most common default",
			"name, which is index dot HTML.",
			"Let me store it in my Frosh IMs folder and my templates folder",
			"so that it's in the proper place.",
			"In here, let me go ahead and say that this extends my layout dot HTML.",
			"And then down here let me say my body block will be whatever's in here,",
			"and then my end block will close that.",
			"In here, now I'm feeling a little uncomfortable",
			"with how much code I've written so let's just put a \"to do\" there,",
			"and let's make sure this whole thing works.",
			"So let me go back into my directory, do Flask run, enter.",
			"All right, go ahead and open up this browser tab, and it just says, \"to do.\"",
			"So I think I'm in a good place, and indeed",
			"if I view page source I see a full fledged web page,",
			"including that meta tag we just added, but with just a big to do here.",
			"Now what do I want to do?",
			"The biggest thing I want to do is actually",
			"have students be able to register for a sport.",
			"So let's go ahead and define ourselves an HTML form via which to do this.",
			"So inside of my body block in my index dot HTML template.",
			"Let's go ahead and first just call this the registration page with an H1 tag,",
			"and then let me go ahead and give myself a form.",
			"The action will be, I mean, the sky's the limit, let's keep it simple",
			"and just do slash register rather than complicate things",
			"by using the same route again.",
			"Let's keep things a little private, so let's do a method of post",
			"so that my roommates don't know what sports I'm registering for or not",
			"registering for.",
			"And then in here let's go ahead and ask the user for their name.",
			"So let's go ahead and do an input, name equals name,",
			"where the name of this input is going to be name in the human sense.",
			"The type of that box will be text, and let's add some of the fanciness",
			"as before.",
			"Autocomplete equals off, or oof.",
			"Autofocus, whoops, autofocus, and then over here a placeholder",
			"so that it's self-describing of name.",
			"All right.",
			"And then let me go ahead and give myself a submit button,",
			"input type equals submit, and let's add a value of register,",
			"just to make the website a little more user friendly.",
			"Let me go ahead and stop my server and restart it",
			"so I can reload all of these changes, and let",
			"me go over to this URL again, and voila, we have the beginnings of a form.",
			"It's only asking for name, so it's not quite there.",
			"So I need to ask for some sports as well.",
			"Now there's a bunch of ways we can do this,",
			"and even though you might not have seen them all yet in CS50,",
			"you've certainly used them on the actual internet when you visiting websites.",
			"So let's do a drop down menu initially.",
			"Let me do what's called the select menu because you select an option, the name",
			"of which is going to be \"sport.\"",
			"Select menus if you read the documentation",
			"or follow an online tutorial, you'll see that they",
			"must have children called options.",
			"And children must have values.",
			"So for instance, let's use a value of how",
			"about \"dodgeball,\" which is a common intramural sport.",
			"And then inside of the option tag, you actually",
			"have to say, much like a link, what the human should see.",
			"So I'm just going to redundantly say dodgeball here too.",
			"And let me go ahead and make that my life a little easier here.",
			"Let me, \"to do,\" \"to do,\" just to speed things up.",
			"Let me do a little bit of copy paste here.",
			"And how about we change this one to flag football, flag football.",
			"Over here let's do, say, soccer and soccer.",
			"And again just like links there might be this duality, the same values,",
			"but they don't have to be the same.",
			"But for now, we'll keep it simple.",
			"This is what the computer will see.",
			"This is what the human will see.",
			"And then down here we'll call this ultimate Frisbee and here",
			"the same thing, ultimate Frisbee.",
			"OK, so now I have a working drop down menu.",
			"So let me go ahead and prove as much by restarting my server,",
			"visiting my same URL, and voila.",
			"The user interface is kind of ugly, definitely very minimalist,",
			"but if I now type in my name David, notice that by default dodgeball",
			"is selected because one of those options should be, but I can actually fix that.",
			"Let me, I don't like how I'm forcing everyone",
			"to think they have to do dodgeball.",
			"Let me do an option here with an empty value for instance.",
			"And I can even say something up here, for instance,",
			"like let's just say what it is, sports, so, with no value.",
			"So it's not an actual valid option.",
			"Let me go ahead and open my URL now.",
			"OK, so now I see sport in the dropdown too.",
			"So David, sport, OK, it's a little weird that you can register for sports.",
			"That's not really a thing.",
			"So let me fix that.",
			"And it turns out if you read the documentation for a select menu,",
			"you can actually disable the option and also, let's say, select it by default.",
			"So these are just additional attributes that you",
			"would discover in the documentation for the option tag that",
			"now let me make the user interface a little more robust just so that users",
			"aren't registering for \"sport.\"",
			"Let me go ahead and do David, and now notice, sport is selected by default,",
			"but it's grayed out.",
			"It's not a valid value anymore.",
			"So minor user interface improvement.",
			"Dodgeball sounds amazing.",
			"That was not an intramural sport in my day, but it apparently is these days.",
			"So let me go ahead and register for this.",
			"OK, but, of course, not found.",
			"Well why is that?",
			"Well if we look at the URL I just ended up at,",
			"I've not implemented my slash register route yet.",
			"All right, so let's do that.",
			"To do that, I need to go back into application dot py, and let's go ahead",
			"and do some registration trickery.",
			"App dot routes slash register, I'm going to define",
			"a function that I might as well call register,",
			"but I could, again, call it anything I want.",
			"And in this function let's keep it simple initially.",
			"Let's just go ahead and return a template called success",
			"and just presume that the registration was successful.",
			"And in fact, let me go ahead and create a new file called",
			"success dot HTML in the Frosh IMs templates directory,",
			"and let me make sure that also extends layout dot HTML,",
			"and that it has a block body, and, for good measure, end block.",
			"And then down here, I'm going to keep this so simple for now.",
			"You are registered, exclamation point.",
			"Not really registering anyone for anything,",
			"but I'm going to claim that they were.",
			"So now if I rerun my application, and I go back to my form here,",
			"and I now re-register David for dodgeball and click Register, huh.",
			"Now it's a bug.",
			"And let me pause here just to see if the pieces are fitting together.",
			"Method not allowed, even though I'm at slash register.",
			"Any thoughts on how to fix this?",
			"Method not allowed?",
			"And notice, you can even see in my terminal window",
			"in red an error message, status code 405 which means method not allowed,",
			"which is a rare one but I indeed screwed up.",
			"Yeah, over to Santiago?",
			"SANTIAGO: Yeah, I think that when you defined",
			"the app dot route for read, or register, [INAUDIBLE]",
			"you didn't specify a methods is post.",
			"DAVID J. MALAN: Yeah, so by default my methods are all get,",
			"but if I want to use post for privacy's sake,",
			"recall that I just have to tell Flask that the methods I want you to support",
			"for this route are this list of verbs or methods,",
			"and that list is going to be of size one with just the keyword post in it.",
			"So again, when you encounter these issues, which you absolutely will",
			"when doing all of this for the first time,",
			"don't worry so much about the specifics of the error message, but the ideas.",
			"Like what's gone wrong?",
			"Method.",
			"Method not allowed.",
			"What could that mean?",
			"The only methods we've talked about are get and post,",
			"so maybe it's something related there.",
			"Well the route in question was slash register,",
			"so maybe it's something related to my register route,",
			"and see if those kinds of clues can lead you to a solution like Santiago",
			"just proposed.",
			"Let me go ahead and restart my server.",
			"Let me go ahead and reload my form, type in David again,",
			"I'm going to select dodgeball, register, voila, you are registered.",
			"All right.",
			"I'm not actually registered for anything,",
			"but I feel like there's still a missed opportunity for error checking now.",
			"In fact, let me go back to my form, not type David",
			"and not select dodgeball and click Register.",
			"Well this is kind of stupid.",
			"Like its claim, it's saying I'm registered even if I only type my name,",
			"no sport, you are registered.",
			"So there's a missed opportunity here for some error checking.",
			"So let's at least go in and add this.",
			"Let's go ahead and do something like this.",
			"How about if not request dot form dot get",
			"name or request dot form dot get sports, or not that,",
			"then let me go ahead and return render template failure dot HTML,",
			"otherwise I'll return success dot HTML.",
			"So let me try this now.",
			"Let me rerun the server, Flask run.",
			"Let me go ahead and reload my form, no changes to the form,",
			"but now if I don't cooperate and I click Register,",
			"OK, now really bad things are happening.",
			"This is one of those 500 errors.",
			"Let's see where I screwed up.",
			"Internal server error and the subsequent paragraph are not very descriptive.",
			"But if I go to my terminal window, here's my exception",
			"a Jinja 2 exception, that's the templating language,",
			"failure dot HTML is not found.",
			"All right, well that's just because I made a stupid mistake,",
			"so let me stop the server.",
			"Let me go ahead and copy success dot HTML for now.",
			"Let me go ahead and paste it in here.",
			"And I could probably factor this out, but we're",
			"going to keep it simple for now and call this failure dot HTML,",
			"put it in Frosh IMs templates, save it.",
			"Now let me rerun my server.",
			"Now let me go back.",
			"Let me try not typing in anything and just registering, OK, voila.",
			"Now it's actually checking.",
			"And if I go back here, name, OK, I'll not type in a sport,",
			"it's still not checking.",
			"But there's still this kind of hack here.",
			"You know, you recall from last week that if you right click or control click",
			"on anything in any web page, you can inspect it",
			"in Chrome or your preferred browser, and that",
			"lets you start poking around the HTML.",
			"And watch this, maybe I'm a little bit upset",
			"that there's no, let's say, tennis.",
			"Tennis is not offered by the intramural sports program, but darn it",
			"I want to register for such.",
			"Well, again, using a browser, there's nothing stopping me from, for instance,",
			"I don't know how to do this, let's change ultimate Frisbee to tennis,",
			"and literally change the HTML on the page, zoom back out,",
			"close the inspector, ha, ha, now tennis is a sport at Harvard.",
			"So now watch what I can do.",
			"Register for tennis, type in my name David, voila, registered for tennis.",
			"Right?",
			"I've hacked the website.",
			"All right, so in some sense I kind of sort of",
			"have hacked the website this time.",
			"Now obviously I'm not doing anything with this information",
			"on the server at the moment.",
			"I'm just blindly saying registered or not registered.",
			"But notice what I've just done.",
			"In fact, let's really notice what I've done.",
			"Let me go ahead and inspect the page again, let me go to my network tab,",
			"and let me resubmit this form, and watch what happens here.",
			"Let me go back here, let me type in David, let me do this quick hack again,",
			"let me go ahead and right click on sport,",
			"inspect, let me get rid of ultimate Frisbee and change this to tennis",
			"again, and let me change this to tennis again, enter.",
			"Now let me go to my network tab, select tennis from the dropdown,",
			"and then down here, let me go ahead here and click Register.",
			"Notice what's going on down here.",
			"Just like last week, you can see a list of all of the HTTP requests.",
			"So let's look at slash register.",
			"Let me now zoom in on all of this and scroll down to the form data",
			"which we didn't see last week but is there for post requests.",
			"I have legitimately sent from my browser David and tennis to the server.",
			"The onus is now on you, the programmer, to make sure",
			"that you're not actually going to let me register for tennis if it is not",
			"a supported sport.",
			"So now there's more error checking necessary.",
			"It's not sufficient to just trust that the user typed in a name and a sport.",
			"You can't just check for the absence of either of those.",
			"Now, we should really be smarter and make sure",
			"that whatever sport the human's browser sent actually exists at Harvard.",
			"And you could imagine this going very wrong very quickly,",
			"if it's a bank account, like how much money do you want to deposit?",
			"Well I'll just hack the HTML and change the amount of money",
			"I'm depositing or withdrawing, right?",
			"You should not be able to change a server's data",
			"or database by just changing some HTML.",
			"You should never, ever trust your users, or myself in this case.",
			"So how do we defend against this?",
			"Well there's a solution to this problem that actually gives us",
			"some other features as well.",
			"Let me go ahead and get rid of this silliness",
			"where I've literally hardcoded all of these sports",
			"in the HTML, which literally I resorted to copying and pasting.",
			"That should have been the first clue that we can probably do better.",
			"Let me instead go into application dot py, and let me go up here,",
			"and let me just define a global variable called Sports.",
			"I'll capitalize it as is the convention when defining constants.",
			"And let me go ahead and say, the sports are going to be this Python list.",
			"So I'm going to keep it pretty and put it on multiple lines using",
			"square brackets because it's a list.",
			"Here's where I'm going to say dodgeball as one sport,",
			"flag football was our next, comma, soccer is our third, volleyball fourth,",
			"and then lastly we'll leave in ultimate Frisbee as legitimate.",
			"So those are my sports.",
			"How do I now use that list of sports?",
			"Well, I can just pass them into my template.",
			"I can say something like this: Sports, or anything, x, or y,",
			"or z, but sports is more descriptive, equals sports.",
			"So this is to say, I'm going to create in my template",
			"a variable called sports, the value of which",
			"is going to be that same global variable.",
			"And to be clear, Flask requires that you choose a name.",
			"You can't just pass in sports because Flask just",
			"won't know what to do with a single argument like that.",
			"You have to give these things names.",
			"And again, it tends to lead to this redundancy",
			"where you're reusing the same words, but one is your variable on the right,",
			"the other is the name you're using in your template on the left.",
			"So now let's do this in index dot HTML.",
			"Here's where templating gets more powerful.",
			"In templates like Jinja, you don't just have curly braces left and right,",
			"and you don't just have the blocks with the curly braces and percent signs,",
			"you even have some simple programming constructs.",
			"I can actually do something like this.",
			"It turns out I can actually do something like this.",
			"For sport in sports, end for, so it's a little stupid,",
			"the syntax, that you literally say end and then",
			"the name of whatever the preposition was a moment ago,",
			"but now let me go ahead and generate an option whose value is",
			"quote unquote the current sport, close, that and then in here",
			"let me say sport again.",
			"Done.",
			"Now I have used a for loop in my template, the syntax for which",
			"looks almost identical to Python, that's deliberate, the authors of Jinja",
			"essentially borrowed Python's own syntax so it's not too much new information",
			"overload.",
			"And notice what I'm doing.",
			"I'm using this Jinja syntax to iterate over that Sports variable.",
			"It's a for loop, so I'm saying iteratively set sport",
			"equal to the first sport, then the second, then the third, then",
			"the fourth, then the fifth.",
			"And then inside of this block here, this for loop,",
			"I'm using the double curly braces to just plug in the sport there,",
			"plug in the sport there.",
			"And what's amazing about this feature of Flask",
			"and in turn web frameworks in general is that now when",
			"I run Flask run, and I open up my URL and go to this form, voila, it's there.",
			"It's dynamically generated for me.",
			"And if I look at my page's source in my browser,",
			"notice that all of those options are indeed there.",
			"But I didn't have to type them out manually.",
			"I now have it in an array and I'm dynamically generating even more HTML.",
			"And what's more powerful about that savings",
			"is that now I can go into my application dot py, and let's",
			"not just check for this value.",
			"So if not request dot form dot get name, that was saying if there is no name,",
			"and then this part here was saying if there is no sport,",
			"why don't I more specifically say, or the sport",
			"that the user input into the form is not in sports.",
			"So here's where Python gets pretty elegant.",
			"Now I'm checking two Boolean expressions.",
			"Is it the case that there is not a request dot form dot get name,",
			"or is it the case that the sport that was in the user's form",
			"is not in the global variable, sports, then it should be failure.",
			"So you can send me tennis, you can send me water polo,",
			"you can send me any sport you want.",
			"I am now going to reject it because I am validating your submission",
			"against server side data.",
			"And again, this is thematic.",
			"Unfortunately you can never, ever trust user input.",
			"You should always assume that some annoying",
			"hacker out there or friend or sibling is going",
			"to be trying to hack into or crash your programs.",
			"But you can defend against that by programming defensively in this way.",
			"So case in point now, if I go ahead and David, dodgeball, register, that works.",
			"But if I do this little hack again where I go into my HTML,",
			"I go down here, I change ultimate Frisbee, for instance,",
			"to tennis, and also change it here to tennis,",
			"zoom out, close that, choose tennis, type in my name, David, voila.",
			"Wait a minute.",
			"Damn it.",
			"Why did that work?",
			"Oh, wait.",
			"OK.",
			"I didn't restart the server.",
			"It was still running the old code.",
			"Now I open it up.",
			"Now we have to do this again.",
			"OK.",
			"Now I'm going to go ahead and hack the site.",
			"Let me go ahead and inspect this, expand the sports, let's go ahead",
			"and change ultimate Frisbee to tennis.",
			"Let's go ahead and change that to tennis.",
			"Close the window, change the dropdown to tennis, and now, there we go.",
			"OK.",
			"All right.",
			"I was confused for a moment, but again, just restart the server,",
			"and it will reload the changes we actually made.",
			"And thank you so much, Brian, for diving in there to save me.",
			"I figured it out.",
			"All right, any questions or confusion beyond my own now on what it is we've",
			"just done by one, dynamically generating a list of user select menu options",
			"and also validating on the server against that same list of data?",
			"Any questions?",
			"Or anything on your end Brian?",
			"BRIAN: Nothing here.",
			"DAVID J. MALAN: All right.",
			"So let me just demonstrate real quickly these just different user interface",
			"mechanisms.",
			"And suffice it to say, we're not too focused",
			"for our purpose on user interface design.",
			"Using a library like Bootstrap can you make these forms look much prettier",
			"just by adding a few more HTML tags and a few more CSS classes,",
			"but let me go ahead and make one tweak here",
			"whereby we can change the UI from being the select menu",
			"to a bunch of different things.",
			"I index dot HTML I can go ahead and define, inside of my for loop,",
			"instead of using the Select menu an input, name equals sport,",
			"type equals radio for radio button, which",
			"are the mutually exclusive circles that you might tick on a box, on a website,",
			"and then the value of this will be this particular sport.",
			"And then over here, let me go ahead outside of the radio button",
			"and actually display to the human that sport name.",
			"Let me restart the server.",
			"Let me reload my page, and voila, we no longer have a select menu,",
			"but we have radio buttons, which achieve the same result,",
			"but they're just laid out in a slightly different way.",
			"And they're indeed mutually exclusive like an old school",
			"radio in a car where you can only select one of them at a time,",
			"but otherwise the site works completely the same.",
			"So which to use?",
			"It depends.",
			"If you've got 100 different sports you probably",
			"don't want 100 different radio buttons if only",
			"because they take up so much space.",
			"But if instead you might want to use a drop down menu instead.",
			"All right, so what's the key thing we're still not doing?",
			"We've got a pretty dynamic user interface,",
			"but I'm just throwing away the information",
			"once the user clicks Register.",
			"So let's actually start remembering, just as I did back",
			"in the day, who has actually registered so that we actually have",
			"a proper working registration system.",
			"So how can we go about doing this?",
			"Well we've seen in our look at Python in the past",
			"that we can store data inside of a Python program using a list,",
			"using a dictionary, using a set.",
			"There's a lot of data structures that Python gives us.",
			"So let's start simple.",
			"And let's actually do that.",
			"Let's go ahead and store our registrants maybe in a dictionary.",
			"So in application dot py, which is thus far now unchanged,",
			"let me give myself one other global variable, registrants,",
			"and let me initialize it to an empty dictionary.",
			"And recall that we did this to implement a phone book where",
			"I added my name and phone number and Brian's name and phone number",
			"a couple of weeks ago.",
			"We used a Python dictionary to store those key value pairs, name and phone",
			"number.",
			"Here let's do something similar.",
			"Let's store the user's name and the sport",
			"for which they're registered so that we then",
			"have in the computer's memory a list of all of the valid registrations.",
			"So how are we going to do this and what needs to change?",
			"Well let me go ahead and change this back to the Select menu",
			"just because it fits on the screen a little better instead of the radio",
			"buttons.",
			"And from here we will have again, the user interface that we saw earlier.",
			"So let me go ahead and do Flask run, let me go ahead",
			"and open this up, and voila, we have that same interface",
			"as before, the goal of which now is when I click Register,",
			"I don't want to just naively see you are registered or you are not register,",
			"I want to actually register the user.",
			"So I think we're going to need to do a bit of work",
			"in application dot py, the file that's actually",
			"processing the user's registration.",
			"So instead of just validating the form by checking",
			"if they had a name or a sport that was in sports,",
			"let's do something a little different.",
			"So let me go ahead and sort of start anew here,",
			"and let me do something like this: name equals request dot form dot get name,",
			"just so I have it in a variable, it'll be a little easier to use.",
			"And then let's just say if not name, then let's go ahead and return render",
			"template failure dot HTML.",
			"All right, let's then check sport.",
			"Sport equals request dot form dot get sport, storing it in a variable",
			"just so I can do this a little more cleanly.",
			"And then if not sport, go ahead and return render template, template,",
			"failure dot HTML.",
			"And then let's do one more check, but I'm just",
			"being a little more pedantic this time.",
			"If sport not in sports, then let's go ahead",
			"and return render template failure dot HTML.",
			"But you know what, this seems a little silly.",
			"If all I'm doing, if I know as the programmer what the error is,",
			"but I'm just telling the user you are not registered,",
			"that's not particularly good design.",
			"I'm not telling the user any information about what they did wrong.",
			"So let's do this instead.",
			"Instead of failure dot HTML, let me go ahead and create a different file",
			"called error dot HTML.",
			"And this will be called error dot HTML in my Frosh IMs directory",
			"in my templates directory, and in here, let's go ahead",
			"and actually put an error message, for instance, something like this message.",
			"So there's nothing really there other than a placeholder for message,",
			"but let's see what this will do for us.",
			"Let's now go back to application dot py.",
			"And instead of error dot HTML, let's be a little more specific",
			"and pass in an error message like missing name.",
			"And down here, let's change this to error dot HTML",
			"and say a message of missing sport.",
			"And down here, let's change this to errors",
			"dot HTML, whoops, error, error in the error, message of invalid sport.",
			"So there's a sport there, but it's just not in the list of valid sports,",
			"so we should tell the user accordingly.",
			"So now let's just try this real quick.",
			"Let's try this real quick and input this data in correctly so we can see these.",
			"Let me rerun the server, reload the form, let's type in nothing",
			"and just try to register.",
			"OK.",
			"Missing name.",
			"It's more useful than just \"you are not registered.\"",
			"All right, fine, let me give you my name, David.",
			"Register.",
			"Missing sport.",
			"OK.",
			"Now let me go ahead and give you a sport.",
			"And now if I registered, I'd probably get some other error",
			"because I haven't handled the successful outcome yet.",
			"So let's finish this up.",
			"Let's go back to my application dot py in my register route",
			"and then ask ourselves, well what does it mean to register the user?",
			"I want to remember that the user is registered for a given",
			"sport in the computer's memory.",
			"And the computer's memory, recall, I'm using",
			"by way of this global variable called registrants.",
			"And it's all caps just to make clear that it's a global variable,",
			"but that's not required.",
			"And then down here, why don't I do this, registrants, name equals sport.",
			"So this is very similar to what we did with names and phone numbers, keys",
			"and values, where I'm using name to index into the Python dictionary,",
			"and I'm setting the value equal to the sport.",
			"And then let's go ahead for now and say return, render template, whoops,",
			"render template, success dot HTML.",
			"So let's test this out.",
			"Let's go over to Frosh IMs, whoops, let's learn from my mistakes.",
			"Stop the server and reload.",
			"Let me go back to the browser.",
			"Let me go ahead and type in David, who will register for dodgeball, register.",
			"Claims it's registered.",
			"Let me do Brian will register for flag football.",
			"Registered.",
			"He is registered.",
			"But I don't know who's registered or not.",
			"I don't know.",
			"But you know what, let's do a little sanity check here.",
			"Let me just print out registrants, right?",
			"When in doubt, print or print f is your friend.",
			"So let's just do a little poking around here and run Flask run again.",
			"This time let's go back to the form and register David, sport, dodgeball,",
			"register, same behavior.",
			"But down here, notice we have this.",
			"And I see a couple of you are registering as well.",
			"So I see Lucas has registered for dodgeball as well,",
			"Brian Y. has registered for volleyball.",
			"So OK, now Harsh has registered for volleyball.",
			"So this is the problem with having an internet when we do these live demos,",
			"but apparently it does in fact work.",
			"So let's go ahead and make this a little cleaner",
			"here, and instead of just printing registrants, let's go ahead",
			"and do something like this.",
			"Why don't I go ahead, and you know what, let's do this.",
			"Let's go ahead and render a template called registrants dot HTML.",
			"And I think to make this happen, I'm going to need another route,",
			"but this one will be kind of interesting in that we've never",
			"dynamically generated quite this kind of success message.",
			"So let me go ahead and whip something up real quick here.",
			"Let me go to a new file, registrants dot HTML, Frosh IMs, templates,",
			"and then in that folder, templates, and in here we're going to do",
			"extends layout dot HTML, down here, block body, end block,",
			"and then down here, in here, I'm going to do, this going to take me",
			"a moment here, H1, registrants.",
			"Then below that I'm going to give myself an HTML table.",
			"Inside of the table, I'm going to define what's",
			"called a table head, which is not strictly required",
			"but it helps distinguish the head from the body from the optional footer.",
			"Inside of here I'm going to create a table row.",
			"Inside of here I'm going to create three columns,",
			"using TH, table heading, which you might not have seen before.",
			"Typically makes things bold by default to make clear it's the heading.",
			"And I'm going to put the person's name and then another heading of their sport",
			"down here.",
			"And then below the table head I'm going to do tbody, which is the table body,",
			"another tag you might not have seen before but just represents, indeed,",
			"the body.",
			"And I'm going to generate dynamically a whole bunch of TRs.",
			"So for name in registrants, let's go ahead",
			"in this Jinja for loop in my template and output dynamically a table row.",
			"Inside of that table row, some table data, specifically the person's name,",
			"and then specifically in the other column",
			"the person's sport, which I can access, as we'll see by way of a variable",
			"called registrants by indexing into it via the name.",
			"So registrants, in a moment, is going to be a dictionary",
			"that I pass into my template.",
			"I think that's it.",
			"It's a little tedious to type it out.",
			"But notice there's no data.",
			"It's only HTML and templating.",
			"If I go back here now and pass in registrants equals registrants,",
			"just like with the sports variable I'm providing my registrants template",
			"with a variable called registrants, but again I could call it x or y or z,",
			"but registrants feels a little more appropriate,",
			"setting it equal to the value of that global variable,",
			"thereby giving my template access to that dictionary.",
			"If I now save the file, rerun Flask, go ahead back here,",
			"whoops, let me go ahead and do this once more.",
			"Let me go ahead and rerun Flask.",
			"Let me go ahead and select my URL.",
			"Let me go ahead and register David for dodgeball and click Register.",
			"Voila.",
			"Harsh, you beat me to it.",
			"So Harsh is registered for flag football.",
			"David has registered for dodgeball.",
			"It's not the prettiest user interface, but if I view the page source,",
			"you'll see that we indeed have the table head, followed by the table body,",
			"followed by Harsh for flag football, followed by David",
			"for dodgeball, and then after that any subsequent registrants",
			"who are registering at the same time.",
			"So this is pretty cool, I dare say, in that now we",
			"have the ability to save all of these registrants to a global variable.",
			"But what's a downside here?",
			"We've made progress.",
			"I'm now showing you users who have registered,",
			"so that means the RA or proctor who's running the sport",
			"knows who's registered.",
			"But there's a catch.",
			"What could go wrong here?",
			"What's bad about using a dictionary?",
			"Sophia?",
			"SOPHIA: I'm assuming that every time you reload",
			"the server you're just going to reset, and you're not going save the data?",
			"DAVID J. MALAN: Exactly.",
			"If I'm just using a global variable, it'll",
			"work forever so long as the server runs forever and the IDE stays online",
			"and we don't lose power or any other number of reasons.",
			"But as soon as the web server, excuse me, stops or is turned off",
			"or something goes wrong, we're going to lose all of that data.",
			"So this is why a couple of weeks ago with Python",
			"we actually used CSV files or ultimately a SQLite database.",
			"But let me make one change too.",
			"Because what I don't like right now is that at the moment",
			"the only way to view my registrants is to actually register yourself.",
			"And maybe that's a feature if you want to require people register before they",
			"see who else is registered, but it feels nice to have a different route,",
			"maybe slash registrants, that anyone can visit",
			"to see the actual list of registrants.",
			"So let me go ahead and make one tweak here.",
			"Let me go ahead down here and define another route, app dot route, slash,",
			"whoops, registrants.",
			"And then define registrants as my function",
			"but I could call it anything I want.",
			"And let me actually move this rendering of template here.",
			"And you know what, let me be a little clever.",
			"Let me actually redirect the user to slash registrants.",
			"So let me go ahead and import one more function up here,",
			"redirect, from the Flask library.",
			"And this is a function that will literally do one of those HTTP 301s",
			"or some other status code that will send a location to the browser that says,",
			"uh-uh, go here instead.",
			"And the reason for this is that it's just nice now",
			"that inside of my register route, once you're registered,",
			"I don't need to literally copy and paste this line in two different places",
			"and actually have redundant code.",
			"I can just say, redirect the user to slash registrants",
			"which already exists now so that they can see themselves",
			"and who else has registered.",
			"So if I do this again, let me restart the server.",
			"Let me go back to the form, type in David for dodgeball, register.",
			"OK, so Harsh, you didn't make the cut this year, this time, but we see Break",
			"and Moash and David now registered in that split second,",
			"amazingly, for these sports.",
			"But notice the URL, which is the key point.",
			"Now we're at slash registrants.",
			"And if I keep reloading I'll keep seeing all of the changes since then.",
			"All right, but Sophia makes a really good point in that the data is all",
			"going to be lost.",
			"So I think we should clean this up and maybe do one final version here,",
			"where we actually save the data in, for instance, a SQLite database",
			"or maybe even email it out so that we have a backup copy as well.",
			"So let me go ahead and propose this.",
			"Let me go ahead and propose that we make a few changes here, a few changes,",
			"borrowing some inspiration from our look at both SQL and Python.",
			"So I'm going to leave most of this alone for now.",
			"I'm going to go ahead and get rid of this variable.",
			"We'll have to store the data elsewhere.",
			"And instead, let's go ahead and use a database, a SQLite database.",
			"So let me go ahead and declare a database as SQL.",
			"SQLite, colon slash slash slash, Frosh IMs dot db.",
			"Let me go ahead and import this.",
			"This, recall, is from CS50's library, this SQL library.",
			"And let me go ahead in my window for just a moment",
			"here and copy the database from an example I brought with me just so",
			"that we don't have to create the database as well",
			"and sort of rehash things from our week on SQL.",
			"Let me go ahead and grab the database here, and indeed, voila,",
			"the database is out of the oven.",
			"And we now have a local file in my directory called Frosh IMs dot db.",
			"So let's go ahead and first look at this database, SQLite of Frosh IMs dot db",
			"dot schema, enter.",
			"Here is the database table that I created in advance just so we",
			"wouldn't have to reinvent the wheel.",
			"I'm creating a table called registrants with an ID column, with a name column,",
			"and a sport column.",
			"The primary key is going to be that ID.",
			"The textfield should not be null and the sport should not be null.",
			"But we've seen all of this syntax actually in past weeks.",
			"So it's just a simple table to give me an ID for every registrant, a name,",
			"and a sport.",
			"But I'm going to do this in Python now.",
			"So let me go ahead and go back into my, let me go back into my application dot",
			"py, and let's go ahead and do this.",
			"When I want to actually register the user,",
			"let's validate them as before, making sure",
			"that they've given us their name and their sport,",
			"and now let's just use a little SQL.",
			"Instead of saving it into what was a global variable let's",
			"do db dot execute, insert into registrants a name and a sport,",
			"I don't need the ID, it will auto increment for me",
			"as the primary key, and two values, question mark and question mark.",
			"Again, beware SQL injection attacks, and let me pass in name and sport.",
			"And I think that's all I need.",
			"I'm now going to use a little bit of SQL in my Python",
			"in order to insert that name and sport into the database,",
			"and after that, I think I'm fine.",
			"But I do need to change registrants because this variable down here no",
			"longer exists.",
			"But that's OK, because recall from our look at SQL in Python,",
			"I can do something like this: registrants equals db dot",
			"execute, select star from registrants.",
			"Indeed that simple query would seem to give me access",
			"to all of the registrants thus far, and now I can just pass that in like that.",
			"Again, it looks a little weird that the name of your variable in your template",
			"is the same as the name of this variable.",
			"But again, that's because on the right is the variable, on the left",
			"is the name you want to use in your template,",
			"but you could call it anything you want.",
			"All right, here, as always, let me cross my fingers.",
			"Flask run, all right, let me go ahead and open up my URL.",
			"Let me go ahead and type in David, dodgeball, register, OK, interesting.",
			"So Harsh and Naveen got in there real fast,",
			"again, you're just kind of waiting with the Submit button.",
			"But this is a mess.",
			"Something is clearly wrong now, I'm seeing like weird dictionary syntax.",
			"But that's because I haven't adjusted my template.",
			"So let me go into registrants dot HTML and recall",
			"that when I select with select star from registrants,",
			"this is like getting back rows.",
			"I just renamed it to registrants, but I'm really getting back rows.",
			"And rows are just dictionary, each row is a dictionary",
			"of columns and the values they're in.",
			"So I think my syntax just needs to change a little bit in my registrants",
			"dot HTML.",
			"I should really think of this as for registrant in registrants,",
			"and let me go ahead and output the registrant's name.",
			"And down here let me output the registrant's sport.",
			"So again, this is more similar to the time we spent on SQL and Python",
			"than it is to HTML and CSS right now.",
			"Now I'm iterating over all of the rows.",
			"And if you prefer, let's change even the semantics.",
			"Let's go back over here.",
			"Let's do it just like we did a couple of weeks ago.",
			"Let's just get back a bunch of rows, pass in those rows to my template,",
			"and now iterate over those rows.",
			"And each row has a name field, and each row has a sport field.",
			"So that too would be equivalent.",
			"But once you understand the difference, let's",
			"call it what they really are instead of this more generic row,",
			"so let me revert that.",
			"Now let me go ahead and rerun the code.",
			"Let me try to beat everyone else to the punch, type in David for dodgeball,",
			"and, Oh my god, OK, lot of people.",
			"OK, new and better Harsh, all right, so you're working really quickly",
			"it should seem.",
			"So now we see all of the same results.",
			"The database is really hopping now.",
			"I'm a little nervous about scrolling any further,",
			"so I'm going to leave it there.",
			"But we now have a full fledged web application honestly",
			"that is now much more representative of real world websites.",
			"We have our own database using SQL, we have our own templates dynamically",
			"generating this table even though it's ugly at the moment,",
			"but I could certainly beautify it with some CSS or some Bootstrap",
			"in particular.",
			"But we now have a fully functioning website.",
			"What would be the icing on the cake?",
			"You know what?",
			"It's pretty cool, even though we take it for granted",
			"when a website emails you a confirmation.",
			"What if we add one final feature just like I actually did years ago",
			"whereby you email the registrant or yourself to report",
			"that someone has actually registered?",
			"So how can we go about doing this?",
			"Well, let me go back into my code here.",
			"And let me add one final flourish.",
			"I'm going to scroll up to the top here, and I'm",
			"going to import another library.",
			"From Flask mail import mail and message.",
			"And again, you would only know to do these things from a class,",
			"from the documentation, from a tutorial or the like.",
			"I looked it up in advance to see how to do this.",
			"And then I have to, according to the documentation,",
			"there's a bunch of initialization steps required",
			"when you want to write Python code to generate emails programmatically.",
			"You've got to know your username, your password,",
			"and a bunch of other settings.",
			"So let me go ahead and configure those now.",
			"App dot config, quote unquote, mail default sender is one.",
			"And I'm going to go ahead and set that equal to os",
			"dot get env of mail default sender.",
			"So default sender refers to a default email address.",
			"So for instance, if I wanted all these emails to come from me,",
			"I could do something like that.",
			"But instead I'm going to store them in variables elsewhere because I",
			"pre-configured my ID in advance so that no one could see my username",
			"and password.",
			"So I'm just going to grab some of those values from the so-called environment.",
			"You won't use this feature too often but we'll",
			"show it to you in the next problem set.",
			"It's a way of getting access to a variable that's",
			"been defined elsewhere in your IDE or in your Linux system",
			"or Mac or PC more generally.",
			"All right, I need to define a few more of these.",
			"Let me go ahead and just do some boilerplate,",
			"even though this looks like a little copy paste, which it is,",
			"it is in fact necessary because there's a lot of settings for a mail server.",
			"So let me do them one at a time.",
			"Mail password, I don't want you to see that either,",
			"so I'm going to go ahead and grab that from my environment, mail password.",
			"Let's see, I need a mail port, mail port, so that's going to be 587.",
			"It turns out I'm going to use Gmail, and Gmail",
			"lets you send email on TCP port 587, so I looked that up in the documentation",
			"too.",
			"Mail server in fact will be SMTP dot gmail.com.",
			"I found that on Google's documentation.",
			"Mail use TLS, which is a type of encryption,",
			"let me go ahead and enable that as true.",
			"And then lastly mail username, I don't want",
			"you to know what username I'm using, but I'm",
			"going to go ahead and grab this from my environment, username.",
			"And this is actually deliberate.",
			"Though I'm sort of saying it tongue in cheek,",
			"it is bad, bad practice to type in usernames, passwords, or anything",
			"remotely private or secure into your code.",
			"Because imagine if you did type your own Gmail username or password",
			"into this program just to try it out literally",
			"right now at home and then you can submit50 or check50, guess what?",
			"You're sending your username and password to us, the staff,",
			"not to mention GitHub and the whole internet,",
			"by including it in your source code.",
			"So while I'm sort of making fun at what I'm doing here,",
			"this storing of private information in these environment variables",
			"is actually best practice because it means it's not in my code,",
			"I'm not going to accidentally copy and paste it elsewhere.",
			"All right, I need to import one other thing which will explain all of these",
			"red X's.",
			"I need to also import OS.",
			"So it's kind of a bold claim to import a whole operating system,",
			"but there's indeed a library that comes with Python",
			"called OS which gives you access to things like these environment variables",
			"and others.",
			"Whoo.",
			"OK.",
			"That was a lot, and I need one last line of code,",
			"a mail variable equal to passing my Flask",
			"application to a function called mail.",
			"All right.",
			"I think all of those errors will soon go away,",
			"I think it's just being a little slow on me.",
			"Let's go ahead now and actually send mail.",
			"Indeed the red errors are gone.",
			"Let me scroll down, and before I redirect the user to slash registrants",
			"but after registering them, let me go ahead and do this.",
			"Let me define a message variable equal to capital message, which",
			"is the feature I imported from that library,",
			"and let me create a subject line of You are registered!",
			"And let me go ahead and, huh.",
			"Oh, I don't actually know who to send this to, so that's OK.",
			"Let's go ahead and change something here.",
			"Let's go ahead and have the user ask not for their name,",
			"let's ask the user for their email now.",
			"So I'm going to change my actual form to ask for their email instead.",
			"And now let me go back over here, and let me go back in here",
			"and set a second argument of recipients equals email.",
			"And let me change this here.",
			"Let me go ahead and get the user's email from the form.",
			"If there is no email let's yell at them and say missing email.",
			"Sport is unchanged.",
			"Let's go ahead and insert into registrants.",
			"You know what, let's not bother inserting into the database actually.",
			"Let's keep this super simple.",
			"Let's get rid of the SQL stuff.",
			"Let's just have it send a confirmation email.",
			"So it's even simpler.",
			"We'll keep the focus entirely on email here.",
			"So I've created the message with a subject line and the",
			"to line, so to speak, via the recipients.",
			"Now I'm going to go ahead and send mail dot send message.",
			"Save.",
			"Here's where I'm going to cross my fingers as always.",
			"I'm going to go ahead now and run this program.",
			"I'm going to restart, reload my form here.",
			"It's indeed asking me for email.",
			"Let me go ahead and type in, let's say John Harvard's address here.",
			"John Harvard, like me, will register for dodgeball,",
			"and let me go and click Register.",
			"Now the website is about to say internal server error, which comes as a surprise",
			"to me, but let me see why.",
			"Oh I accidentally am still using the database.",
			"So let me fix this.",
			"Let me go ahead and, since we're not using the database anymore,",
			"let me go ahead and revert to our simpler return render template",
			"success dot HTML.",
			"All right.",
			"User error.",
			"Let me go ahead and restart the server.",
			"OK, bad gateway, whole other problem, here we go. jharvard@cs50.",
			"Let me go ahead now and register for dodgeball.",
			"Register.",
			"Crossing my fingers.",
			"I am registered, and indeed, let's go over to my other browser",
			"here where I have Gmail open.",
			"I am currently masquerading as John Harvard in Gmail here.",
			"Let me go ahead and refresh my inbox, and oh my god, a message from the CS50",
			"bot that I am indeed registered.",
			"So now we have a programmatic way of sending emails.",
			"I hit it twice, so I got two emails this time.",
			"But indeed I've now dynamically generated emails as well.",
			"A lot.",
			"But the ideas really are just based on templates",
			"and the idea of sort of putting our controller logic and application dot py",
			"and all of the user aesthetics and our so-called views,",
			"and now that we've had a database or in some sense an email backend,",
			"now we also have the notion of a model where the data is actually being stored",
			"or in this case, sent.",
			"Any questions or confusion or clarifications",
			"here on the use of SQLites or email or any of these Frosh IMs features?",
			"All right.",
			"So why is there a shopping cart with cookies on the stage?",
			"Well for that let's take our final five minute break.",
			"We'll come back, talk about something called sessions,",
			"and build even more sophisticated web apps.",
			"Back in five.",
			"All right, we're back, and there's one feature that we haven't really",
			"fundamentally touched on at all when it comes to web programming,",
			"and it's one that you and I take for granted every day,",
			"any time we log into some website, buy something online, or generally interact",
			"with dynamic websites.",
			"And that's a feature that's generally known as sessions.",
			"There is a mechanism built into web applications, whether they're",
			"implemented in Flask or in other frameworks or languages that",
			"allow the web servers to remember a little something about you.",
			"And this is super important to how the web today works,",
			"because without it you wouldn't be able to log in to Gmail or to any other site",
			"and have the website remember that you are logged in.",
			"Consider, after all, when you log in to Gmail,",
			"you type your username, your password, maybe your two-factor authentication",
			"code, and then you see your inbox.",
			"And from there, you're not prompted to log in again the next time you open",
			"an email and then the next time you open an email,",
			"you stay logged in for some number of minutes or hours or even days",
			"on your computer.",
			"Even if you close the browser tab, even if you shut down your computer,",
			"when you come back to Gmail quite often, you're still logged in,",
			"and it remembers in some sense that you have been logged in.",
			"Well, how does this actually work?",
			"Well underneath the hood, anytime you visit gmail.com,",
			"your browser is sending a request like this for slash, the default",
			"route of gmail.com, and hopefully you're going to either see your inbox,",
			"or if you're not yet logged in, you're going to see that login screen.",
			"Indeed, the response is probably going to come back",
			"along the lines of 200 OK, content type of text HTML,",
			"and that's when you see the login form or your inbox.",
			"But recall from last week there's other HTTP headers",
			"that can be tucked inside of that virtual envelope that",
			"provide hints to the browser and server as to how they should interoperate.",
			"That's indeed what HTTP is all about.",
			"It's a protocol set of conventions that govern how browsers and servers should",
			"interoperate.",
			"And it turns out that sometimes this server returns what are called cookies.",
			"And odds are you've heard of cookies.",
			"Odds are you have some sense that cookies",
			"are bad or dangerous but also necessary, and indeed, all of that is true.",
			"Cookies are essentially pieces of data or even files",
			"that are planted on your computer or your phone",
			"by a server that help them remember that you've been there before.",
			"In some sense, they help remember who you are, but even websites",
			"that you're not logging into very often put cookies onto your phone,",
			"or your laptop or desktop which essentially might",
			"be a big random number that only you are given so that even if they don't know",
			"that it's Maggie who's visited the site, or Ryan, or Nicole, or someone else,",
			"they know that unique identifier has been seen before.",
			"And they can therefore track your behavior.",
			"So if you've heard the term tracking cookies, that's all it is.",
			"It's some piece of data, a big random number that's",
			"been installed on your browser that your browser then remembers.",
			"And the mechanism is as simple as this: one of the HTTP headers",
			"that comes from server to browser literally",
			"is set dash cookie, colon, then the name of a cookie, for instance session,",
			"and then value, and the value might be that big random number.",
			"And because of HTTP, again, it's a protocol",
			"that browsers and servers speak together,",
			"the browsers are designed to send that cookie back to every subsequent page",
			"you visit on gmail.com or whatever server you're on.",
			"In other words, when you visit gmail.com then an hour from now,",
			"even after closing your tabs, or even tomorrow after going to sleep,",
			"your browser is not only sending these headers, if you",
			"have been given a cookie from gmail.com before, your browser sends",
			"a similar header but without the word set, it says cookie, colon,",
			"session equals value.",
			"So unbeknownst to you, your browser is constantly reminding the server",
			"that you've been there before.",
			"And this is similar to the real world when you're perhaps in,",
			"when you go into a club or a bar or an amusement park",
			"and you go through the gates, you typically",
			"are allowed back in by having your hand stamped.",
			"And this way they don't have to check your tickets again",
			"or your ID or the like, they just stamp your hand",
			"which is a little reminder that you have been there before.",
			"And so in fact, here, I've got a little stamp here.",
			"If I visit a website, it's like my hand is being stamped here,",
			"and my browser, by design of HTTP is supposed",
			"to, every time I visit another page, click another link,",
			"represent my hand just like you're going back",
			"into the bar or the club or the amusement park",
			"to remind the person at the door, the bouncer, that you've been there before",
			"and to let you through rather than prompting you to log in again.",
			"So that's what a cookie is.",
			"It is like this virtual hand stamp that's put on your computer,",
			"but your computer is designed to present it again and again.",
			"So if you've ever wondered how sometimes you go shopping on one website",
			"and then all of a sudden, creepily you're on Facebook or something else,",
			"and you're seeing ads for the very thing you didn't buy on this other website,",
			"that all derives from cookies.",
			"Long story short, there's advertising companies",
			"that Facebook and Google and others partner with that",
			"put little images on the website or JavaScript files or other such files,",
			"and because those ads are on different websites the cookies are shared",
			"across multiple websites in some sense.",
			"So it's like you are constantly presenting your hand",
			"stamp to all these different third party companies,",
			"and this is how they're advertising to you or even tracking you at worst.",
			"As an aside, when you use incognito mode or private mode on your browser,",
			"all of your cookies are temporarily thrown away.",
			"You get an empty cookie jar, so to speak,",
			"so that you do appear to be logged out.",
			"And in fact, even in class, I've used incognito mode",
			"a few times because I want to start fresh and not",
			"have any of my prior clicks or our prior demos messing up future demos.",
			"But the reason I was doing that was just to get rid of all cookies",
			"and therefore all states.",
			"So on the one hand, cookies are an incredibly important and powerful",
			"mechanism, but suffice it to say, and more on this down the road,",
			"they can be misused, certainly when it comes to one's privacy or security.",
			"So with that said, let's focus on the good part of cookies",
			"and consider how a typical website remembers that you're logged in.",
			"Let's take that very simple idea and make it clear",
			"that it's all within your power now with code to do this.",
			"So let's start as follows.",
			"I've created a new directory called login",
			"just to demonstrate a program that logs people in.",
			"I've got my same layout as before, and I've added one more tag.",
			"It tends to be best practice to tell the browser that you're",
			"using essentially Unicode.",
			"This way I can have emojis and other characters in my HTML.",
			"So I've added this line five which you'll see on Bootstrap's documentation",
			"and other sites, so now I have sort of a good starting point for this page.",
			"But there's really no content, there's just a block being defined here,",
			"block body.",
			"So that's just my same layout as before.",
			"And indeed if I type ls you'll see an application",
			"dot py and a templates folder.",
			"In that templates folder for now is just layout dot HTML.",
			"So let's go ahead and start writing a quick application whose purpose in life",
			"is just to present the user with a form via which they can log in",
			"and then remember that they are logged in.",
			"So from Flask let me import Flask.",
			"Let me also import the redirect function, the render template function,",
			"the request variable, and now a session variable.",
			"This is something new.",
			"And then from Flask session, let me go ahead",
			"and import session, and then down here let me do app gets Flask,",
			"underscore, underscore, name.",
			"And now I need a few more lines of code from documentation.",
			"App dot config, open bracket, session permanent equals false,",
			"and again, this is specific only to the library called Flask session",
			"that I'm using, and that library is going",
			"to enable hand stamps, essentially, for my application.",
			"And I'm going to configure it to use literally the file system,",
			"so session type equals file system, and file system",
			"is just fancy speak for the hard drive or my own IDE account,",
			"and this is an alternative to using a database or something",
			"else like that, and then session app.",
			"So this is just boilerplate, I literally copied",
			"these three lines from the documentation for this library.",
			"But to use this library, and this was also",
			"true of the mail library a moment ago, there's",
			"another file I should point out.",
			"So when I am here, I should create one other file that I mentioned earlier",
			"but we haven't created ourselves, this time called requirements dot text.",
			"And I'm going to put this into my login directory,",
			"and I'm going to require Flask for this application,",
			"and I'm also going to require a library called Flask session.",
			"So again, I claimed before on the slide that requirements",
			"dot text is just a simple list of the requirements, the libraries you",
			"want to use.",
			"And there are commands you will use at the command line",
			"to install those requirements.",
			"You won't typically need to do this for the problem set,",
			"but just so you've seen it, if you want to install",
			"the requirements for a Python application,",
			"you typically do a command like this.",
			"Pip install dash r, requirements dot text.",
			"And I'm not going to do because I did it in advance,",
			"but just know that in order to install libraries, it's much easier in Python",
			"than it was, for instance, in C. They tend",
			"to be more easily packageable via this technology called",
			"pip and things like it.",
			"All right, let's go ahead and create a couple of routes.",
			"App route slash def index, so just boilerplate as before,",
			"and let's just go ahead and simply return render template of index dot",
			"HTML by default, and then let's go ahead and create one other route,",
			"app dot route slash login, and in my login route, which",
			"will be governed by a login function, let me go ahead",
			"and return render template login.",
			"So let's keep it simple for the moment.",
			"And now let me go ahead and implement this form.",
			"So let me go ahead and create a file called",
			"login dot HTML, whose purpose in life is just going to have my login form,",
			"and what I want in that login form is just a space for the user's name.",
			"In the real world, I would most certainly",
			"do something like a username and a password,",
			"but we're going to keep it simple, focus only on the essence of the idea,",
			"and do something like just the user's name.",
			"So, in login dot HTML, I'm going to extend layout dot HTML as before.",
			"I'm going to have my block body, and I'm going to have my end block tag,",
			"and then inside of here I'm going to have a form, the action for which",
			"will be slash login, the method for which will be post.",
			"I'll do best practices here, I don't want my username and password",
			"in the real world being stored in people's autocomplete histories.",
			"Let me do input, autocomplete equals off for good measure, autofocus",
			"for convenience, name equals the user's name,",
			"placeholder as before equals name, and then type equals text.",
			"And then down here, input type equals submit.",
			"So this is almost the same to our previous forms for registering",
			"and so forth, but now I'm going to use it for login purposes.",
			"So let's do a quick check.",
			"Let me go back to my application, do Flask run,",
			"I'm going to go ahead and open up my URL, and first error, let's see,",
			"template not found.",
			"OK, so that's actually expected.",
			"I kind of knew I didn't create index dot HTML,",
			"so I'm OK with that error for now.",
			"Let me go ahead and zoom out though, because I deliberately",
			"wanted to go to my slash login route because I wanted to test that first.",
			"That seems to be working.",
			"Now let's go ahead and create the file that doesn't exist,",
			"index dot HTML, so index dot HTML, put this in my login folder in templates,",
			"and I'm going to do this one pretty similarly.",
			"I'm going to go ahead and copy paste just to save a bit of keystrokes,",
			"but here I'm going to say, you are not logged in because I literally",
			"haven't implemented that feature yet.",
			"So that's pretty reasonable.",
			"Let me go ahead and restart Flask.",
			"Let me go to my index, and I should see, indeed, you are not logged in.",
			"But if I go to login, I see my login form.",
			"So let's make this a little more interactive.",
			"Let me go into index dot HTML here and say,",
			"you are not logged in, a href slash login, log in, period.",
			"Let's create a better user interface.",
			"So let me rerun Flask, let me go back to my web page, hit reload,",
			"and now I have the beginnings of user interface,",
			"super simple, but very similar to a website",
			"where if you're presented with the web page, you're not logged in,",
			"you're given a link or a button or something to log in.",
			"And if I click this, it's just a simple get",
			"request, which is the default for links, to slash login.",
			"So we're almost there.",
			"We almost have the ability to log in.",
			"Let's do something with the information.",
			"So let me go back to application dot py, and when the user logs in,",
			"what is it I want to have happen exactly?",
			"Well if they log in, first of all, I want to support multiple,",
			"I want to support post here.",
			"So let me do that for privacy's sake.",
			"And then let me go ahead and do this.",
			"If request dot method equals post, as before,",
			"let's go ahead and remember that user logged in.",
			"And then redirect user to slash.",
			"Else let's go ahead and render the login form.",
			"So I'm not done yet.",
			"But this is the key idea.",
			"I need to somehow remember that the user logged in.",
			"So how can I do this?",
			"Well, one, I can get the user's name from request dot form dot get name.",
			"And I should assume that, yeah, that's OK, we won't validate that for now.",
			"And what do I want to do with the user's name?",
			"I want to store it in the session.",
			"So what exactly is the session?",
			"Well it turns out that as soon as you have this hand stamp, it's like,",
			"it's kind of like a coat check too.",
			"I don't mean to add too many metaphors here,",
			"but in a fancy restaurant if you like hand your coat to someone,",
			"they'll often put it in the closet and then",
			"hand you back a number, which in some sense",
			"is a little clue like this, a little hand stamp",
			"so that they can line you up.",
			"It probably shouldn't just be a smiley face because otherwise everyone",
			"would get the same coat back, but they give you some kind of identifier,",
			"and they put your coat into some hanger, a bucket, or some space in that closet.",
			"So why is this relevant here?",
			"Well the same is happening in the world of web browsers.",
			"When you get a unique cookie, that's giving you a unique hanger.",
			"I really should have thought this metaphor through before,",
			"but you're given a unique hanger where all of your stuff can go,",
			"including your coat, but in this case, including any variables",
			"you want to remember.",
			"So with that said, what I have access to thanks to Flask,",
			"but really thanks to HTTP, is this special variable called session.",
			"That is a special variable in that it's at the one hand,",
			"on the one hand global, which means I can use it everywhere,",
			"but fancy enough, it's tied to the current user.",
			"So even if all of us on Zoom right now visit my URL,",
			"as is kind of happening anyway, each of us",
			"is getting our own copy of a variable called session.",
			"And it's implemented underneath the hood by way of this cookie mechanism.",
			"Each of us when you visit my application are getting a different cookie value.",
			"That cookie value is like mapping to a different hanger in the closet",
			"so that my data will go on this hanger, your data will go on that hanger,",
			"and so forth.",
			"And now I'm actually kind of proud of this metaphor that's working out OK.",
			"The hanger is going to be where all of our individual data is stored.",
			"What do we want to store?",
			"This is simple, let's just store the user's name,",
			"thereby remembering that I've logged in, or Brian's logged in,",
			"or Sophia's logged in, or Ryan's logged in, or anyone else.",
			"But the session global variable here that I've",
			"highlighted in this very first line is going to be implemented by Flask for us",
			"in such a way that each of us as users get our own version thereof.",
			"So I'm going to quite simply use this as a dictionary in Python.",
			"I'm going to go ahead and add to the session here the user's name as name.",
			"And I don't even need this variable now.",
			"Let me tighten this up just a little bit.",
			"Let me go ahead and just store in the session, which",
			"is like this hanger, the key of name and the value of whatever the user logged",
			"in as.",
			"And redirects I know how to do.",
			"Let me go ahead and return redirect slash, let me get rid of my pseudocode,",
			"and I think that's it.",
			"That is sufficient, excuse me, to remember that a user has logged in.",
			"You sort of put their name in the session,",
			"but then it stands to reason that we need to check for this value.",
			"So now let's improve index dot HTML, which at the moment",
			"just blindly says always, you are not logged in.",
			"Well let's actually make that decision, not just hard code that.",
			"So let's do this.",
			"If not session dot get name, this is the syntax",
			"for saying if there's no name in the session,",
			"then go ahead and return redirect slash login.",
			"So if there's no name in the session, that",
			"means you haven't given me your name yet.",
			"Let me force you to by sending you to slash login.",
			"Otherwise go ahead and render the template.",
			"All right, well what more might I do now?",
			"Well let me go into my index file here.",
			"And instead of just naively hard coding this, watch what I can now do.",
			"I can in here say, in Jinja syntax, not the curly braces, not the block syntax,",
			"not the for loop, you can also use if conditions.",
			"If session dot name exists, then I can say something like,",
			"you are logged in as session dot name, period.",
			"Then I might have something like a href equals slash logout.",
			"Doesn't exist yet, but we can come back to that, log out.",
			"Else if there is no session name, then let's assume",
			"that the user is indeed not logged in and then say, you are not logged in,",
			"log in.",
			"So if I did this right, let me go ahead and stop the server here.",
			"Let me go ahead and rerun Flask run, reload my form,",
			"I still see, OK, wrong URL.",
			"Let me go to index.",
			"Oh no, this is right.",
			"I'm on slash login, method's not allowed,",
			"I think Santiago already pointed out what mistake I made earlier,",
			"which I just repeated.",
			"Let me go to application dot py.",
			"I need to support multiple methods here.",
			"I also want to support get so that I can actually render my template as needed.",
			"So let me go ahead and rerun this server.",
			"Here we go it's slash login.",
			"And notice what happens.",
			"Let me zoom in on this.",
			"Let me get rid of the login and just go to slash,",
			"notice that I'm immediately redirected.",
			"Let's do what we did last week.",
			"Let's open up the inspector.",
			"Let's go to the Network tab.",
			"Let's again visit slash and hit Enter, voila, notice what happens.",
			"If I visit that request, zoom in on Chrome's network tab,",
			"scroll down to response headers, notice that we get a 302, found,",
			"which is a redirect code like 301, and the location is actually,",
			"if you look over here, slash login.",
			"So all the mechanics of HTTP are coming back into play.",
			"All right let me go ahead and log in as David, click Submit, amazing.",
			"You are logged in as David.",
			"Notice what's going on.",
			"I'm now at the slash route.",
			"This is true, so this does not apply, so I'm actually seeing index dot HTML.",
			"And notice I accidentally clicked log out, let's fix that.",
			"Let's give us our logout route.",
			"So here we go.",
			"App dot route slash logout, def log out, and then in here I",
			"need to just forget that the user has logged in.",
			"And there's a few different ways to do this.",
			"Let me do it the simplest for now.",
			"Session name equals none.",
			"Let's just change whatever your name is or my name is to none,",
			"then let's return redirect back to slash.",
			"So let's see what happens now.",
			"Let me restart the server.",
			"Let me go back to my index page.",
			"Because I'm still logged in here, I'm going to go ahead and log out.",
			"OK, let me go ahead and log in as Brian, for instance, submit.",
			"You are logged in as Brian.",
			"And notice I can reload, I can close the tab, I can reopen the tab.",
			"It's all being remembered thanks to my browser representing the cookie.",
			"And in fact, you can see that.",
			"Let me go to inspect, let me go to the Network tab,",
			"and let me reload this same page.",
			"Reload.",
			"Notice this response here.",
			"In 200, notice that if I scroll down here to the request headers, notice",
			"that my browser is requesting, oops, sorry,",
			"notice that my browser is requesting slash, but notice if I scroll down,",
			"down, down, nope, there we go, down, down, down, notice, unbeknownst to me",
			"and unbeknownst to you perhaps all this time,",
			"my browser is also presenting the hand stamp and saying my cookie value",
			"is session equals 35456 dot, dot, dot.",
			"Generally speaking it's bad to tell other people your sessions because now",
			"you could all hijack my session by pretending to be me,",
			"but of course this application doesn't do anything.",
			"But don't do this with accounts that you care about.",
			"No one should be seeing your cookie values.",
			"So we actually see the cookie there, and it came from the server",
			"the very first time I visited.",
			"All right, any questions on that there?",
			"BRIAN: Does the cookie just exist forever,",
			"or is there a time when it disappears?",
			"DAVID J. MALAN: Good question.",
			"Does the cookie live forever or is there a time limit?",
			"It depends on how you configure it.",
			"So this cookie will have a default time limit",
			"of some number of minutes or hours or days, after which it will expire",
			"unless the server refreshes it for me.",
			"You can, though, set cookies that do last forever,",
			"which you probably don't want to do for the notion of logging in because odds",
			"are all of us have accidentally walked away",
			"from like a lab computer or a friend's computer, forgotten to log out.",
			"It's at least nice to know that eventually I'll",
			"be logged out automatically from this site,",
			"and that's what's called a session cookie, one that eventually expires.",
			"But it's also useful when you visit websites,",
			"you notice that some websites have those buttons that say remember me,",
			"or something like that.",
			"Well you can actually set permanent cookies that don't just",
			"store some random value on your computer,",
			"they actually store some piece of information",
			"that gets prefilled into forms subsequently.",
			"And this is useful to remember your preferred settings for a website",
			"if you've customized something, if you're",
			"in night mode or day mode or something like that,",
			"it can remember those kinds of settings.",
			"And even CS50's website remembers what your selection was.",
			"When you log in to some of CS50's websites,",
			"you'll sometimes see a login prompt for Harvard or Yale.",
			"And if you've never noticed, I regret this because we put a lot of effort",
			"into this, it remembers if you used Harvard last time",
			"or used Yale last time so you don't have to constantly interact",
			"with the dropdown, it just remembers your implied preference.",
			"We do that using cookies.",
			"And so as an at home exercise if of interest, truly do start",
			"opening the browser's network tab, start looking at those headers,",
			"and you can begin to infer how all of today's websites work.",
			"And in fact it's becoming increasingly a challenge",
			"to implement things with cookies because long story short, a lot of the browser",
			"manufacturers are finally starting to disable what are called third party",
			"cookies, those sort of advertising style cookies that come from other servers,",
			"not gmail.com, not Facebook.com, but other servers that are all too often",
			"used to track people.",
			"But recently, especially in the EU and now more recently in the US,",
			"if you've ever had to click boxes saying I accept cookies,",
			"I accept the necessary cookies, and so forth, honestly this",
			"is sort of a nice idea, but it's also a little silly in",
			"that now the world is just conditioning you and me to just constantly click",
			"these boxes without really thinking of it.",
			"But what you're really doing is granting permission",
			"when you click those boxes to allow your hand to be stamped.",
			"All right, any questions then on cookies,",
			"or on how we've gone about implementing this login mechanism?",
			"Seeing anything on your end Brian?",
			"BRIAN: Nothing else here.",
			"DAVID J. MALAN: All right, well let me go ahead and do this.",
			"Let me go ahead and get ready an example that we",
			"made in advance that will allow us to explore",
			"a full-fledged e-commerce website, a store of some sort.",
			"And we'll call this literally Store and this time",
			"rather than write things from scratch, let me go ahead",
			"and open things in my browser from a directory called store.",
			"So this is available as always on the course's website.",
			"And let me go ahead here and into store, let me go ahead",
			"and open up application dot py, requirements",
			"dot text, and my templates, including layout, books, and cart.",
			"So this is a good exercise in honestly reading",
			"someone else's sizable amount of code.",
			"It's a few files.",
			"How do you even begin when you've downloaded a program like this,",
			"when you've downloaded distribution code for CS50 or any other course,",
			"how do you begin to wrap your mind around it?",
			"Well again, if you understand what the roles are",
			"played by these different files, application dot py is your controller,",
			"anything ending in dot HTML and templates is a view,",
			"you can begin to sort of follow the breadcrumbs",
			"and figure out what does what in these files.",
			"So let's start with application dot py.",
			"Notice I'm importing CS50's library, a bunch of Flask functionality,",
			"including session support.",
			"Below that I'm initializing the application as I've done before,",
			"and below that I'm connecting to a database which",
			"contains a whole bunch of products in a store, books in this case.",
			"I then configure sessions, and we just did that,",
			"so that code is the same as before.",
			"And I think we can begin to infer what this website's going to do.",
			"So my default slash route has an index function,",
			"and it looks like there's a table in that database called books,",
			"so I'm selecting star from books to get me all the books.",
			"And then it looks like I'm rendering a template called books dot HTML,",
			"and I'm passing in those books.",
			"So let's follow the breadcrumbs here and go into books dot HTML.",
			"It looks like books dot HTML extends layout dot HTML.",
			"All right, let's look at layout dot HTML.",
			"Nothing really interesting going on there, just the boilerplate placeholder",
			"code that we've seen before.",
			"So I'm going to close that and assume that it's not interesting.",
			"Been there, done that.",
			"But books dot HTML, if we continue further, is a little juicy.",
			"We've got my block body between lines 3 and 14.",
			"In there I've got a H1 tag just saying books at the top of the page.",
			"And then I've got a for loop in my template,",
			"again using Jinja syntax, that has below that an H2 with apparently",
			"the title of a book, and then below that, a form,",
			"and I haven't seen all of these features before,",
			"like I'm not sure yet what hidden means, but notice that I do recognize a Submit",
			"button that has a value of add to cart.",
			"So it sounds like we're implementing a shopping catalog for like an amazon.com",
			"or some kind of bookstore online.",
			"All right, so now let's go back to application dot py,",
			"and let's look in cart.",
			"It looks like cart supports both get and post, all right,",
			"so maybe I'm using the same route to handle two different things,",
			"and we've seen that before.",
			"The function is called cart, which makes sense.",
			"This thing, let's come back to this, just to initialize our session,",
			"we'll come back to that.",
			"And it looks like there's not much more to this program.",
			"If get is the verb, let's focus on the bottom",
			"first, so let's ignore the if condition, what am I doing?",
			"Selecting star from books where the ID of the book is in this list of books.",
			"Well, where is this list of books coming from?",
			"Session, quote unquote, cart.",
			"So in the last example I used the session to store your name and my name",
			"and everyone's name on a per user basis.",
			"Now I'm using it to store what we'll call a shopping cart.",
			"And indeed, this is the reason why there's a shopping cart,",
			"thanks to our friends at the theater, on stage.",
			"This is how shopping carts are implemented",
			"on websites, via cookies underneath the hood",
			"to give you the illusion of user specific variables, dictionaries",
			"that you can store anything you want in there.",
			"So it looks like my session cart key is going",
			"to have a value equal to the IDs of a whole bunch of books.",
			"I don't know how they're there yet, but let's assume",
			"that's what I'm interpreting.",
			"And then down here, I'm just rendering a template called cart dot HTML,",
			"passing in the books from the database.",
			"So how do they get into the session?",
			"Well, if the user submits the form to the cart,",
			"I think this code is now relevant.",
			"If the user posts to slash cart, it looks",
			"like I'm going to get the ID that they've typed in maybe?",
			"Maybe?",
			"And if there is in fact an ID, and it's not none,",
			"it's not the default value of none, I'm going",
			"to go ahead and append to the cart the ID of that book,",
			"and then I'm going to redirect the user to cart.",
			"So I think that's enough complexity that I think it's time",
			"to look at what's actually going on.",
			"So let me go ahead and do exactly that.",
			"Let me scroll up and run Flask run.",
			"Let me go ahead and open my URL.",
			"OK, it's not the prettiest of website, but it",
			"looks like my database has like all seven Harry Potter books in it,",
			"and notice that each of them has a button, add to cart, add to cart,",
			"add to cart.",
			"Let's look at the HTML source to see what",
			"my books dot HTML template generated.",
			"Kind of interesting.",
			"So there's that H1 books at the top.",
			"Here's the first of my H2s with the title of the book.",
			"Notice that there is this funky symbol here because it's like a curly quote,",
			"so this is one of those HTML entities that lets you output symbols",
			"that you couldn't type easily on your keyboard.",
			"Here's my first form that I dynamically outputted.",
			"And I claimed earlier that I didn't know what hidden was,",
			"but it does what it says.",
			"It allows you to submit a piece of data in a form that",
			"is visually hidden from the user.",
			"It's not a text box that they can type into but it is there.",
			"And what's cool about this is that notice I gave it a value of 1.",
			"But in this form I gave that hidden field",
			"a value of 2, down here a value of 3.",
			"Well, why is that?",
			"Let me go into my IDE for just a moment, let me run SQLite on my store dot db,",
			"let me show you with dot schema that inside of this database",
			"is a books table, each of which has an ID, a title, and that's it.",
			"Let me do select star from books using SQLite 3, and voila,",
			"you see not only the titles of the books,",
			"but a unique ID numbered aptly according to the order in which they came out,",
			"as a coincidence, but intentional.",
			"And so now down here, let me go ahead and move my terminal down a little bit",
			"here.",
			"Let me go ahead and rerun Flask run, and if I now submit one of these forms,",
			"let's see what happens.",
			"Add to cart the first book.",
			"Interesting.",
			"I've been redirected to slash cart, and notice I have an ordered list,",
			"an OL tag, it would seem, with that first book.",
			"Let me go back to the catalog.",
			"Prisoner of Azkaban was pretty good.",
			"Let's add that to cart.",
			"Now I see this here.",
			"And notice this, if I reload, reload, I don't",
			"know why I'm holding up my hand because I'm clearly using my other hand,",
			"but I'm reloading the page again and again,",
			"and it's showing me exactly what is in my cart.",
			"So where is this coming from?",
			"Well, if we go back to our code, this logic here under the post condition",
			"is adding the ID, book number one, book number three, to my session's cart key.",
			"Now where did that cart key come from?",
			"This is the only other piece I proposed we come back to.",
			"I just need some way at the top of my code to initialize the cart.",
			"And long story short, there's not going to be a key called cart in the session",
			"unless you put it there, like Flask doesn't come with name or cart.",
			"You have to put it there.",
			"So notice if cart, quote unquote, is not yet in my session,",
			"I'm just initializing it to an empty Python list.",
			"And I could use a set, I could use a dictionary,",
			"I could use anything I want.",
			"I chose to keep it simple with a list, but that's",
			"how I'm remembering what's in my cart.",
			"And unlike all of our previous examples, because I see a bunch of you",
			"are now trying to add things to your own cart, each of us",
			"is seeing different shopping carts.",
			"We all have different things in our shopping cart.",
			"If I keep reloading, doesn't matter how many of you are trying to add books",
			"to your cart, you're only adding them literally to your cart",
			"and not mine because we all have different stamps on our hand.",
			"All right, so here too I would encourage you when you, next time you",
			"go on Amazon and add some things to your cart,",
			"like literally, that is all that's happening underneath the hood.",
			"And Amazon surely has other features, you",
			"can change quantities, which is kind of nice, you can add things to wish lists,",
			"which is nice, but all of that, if you start looking at the HTML,",
			"and you look at the network request going back and forth, all of those",
			"features that we just take for granted these days are just",
			"built on very simple, well, relatively simple HTML",
			"forms and these inputs and these buttons and on the server, these sessions.",
			"And Amazon might be using a different language, a different framework,",
			"but all of these ideas are the same.",
			"And so indeed this week is not about teaching you Flask which in a few years",
			"time will probably be irrelevant.",
			"It's about teaching these ideas and principles of these HTTP requests",
			"and responses, these cookies, these sessions, and the features",
			"that we can therefore build on top of them.",
			"All right, I think we have time for one final example that",
			"will now bring back our old friend JavaScript from last week.",
			"Up until now, we have been using Python on the server",
			"to generate dynamically HTML, and even though my designs today",
			"have been hideous, you could certainly imagine adding CSS to them",
			"some, classes, some Bootstrap, just a pretty things up like",
			"the forms especially, but that's not anything new versus last week.",
			"But last week we did have JavaScript as a programming language,",
			"but it was a client side programming language,",
			"at least in our usage thereof.",
			"It was a way of getting the user's browsers",
			"to run code, conditions, and functions, and loops, and so forth on the browser",
			"not on the server.",
			"Today, we've introduced Python again, so we have now the ability",
			"to do something on the server, and where the web gets",
			"really interesting these days is when we marry",
			"the so-called front end that the user sees",
			"and the backend which is the server.",
			"The front end is the user interface you and I interact",
			"with, the backend is the Python code, the SQL code",
			"that the humans never see but you, the programmer, see.",
			"So what can we do to combine these two components, ultimately,",
			"front end and backend?",
			"Well let's do something like this.",
			"Let's bring back our old database of shows, and let me go ahead",
			"and show you quickly what's in this folder here.",
			"In shows we have SQLite 3 shows dot db, a smaller version",
			"of what we played with a few weeks back.",
			"I've whittled this down just for size's sake",
			"to have only the names, only the IDs of TV shows and the titles of TV shows",
			"and that's it.",
			"I threw away the ratings and the writers and the directors and all of that",
			"just to keep the focus only on the titles",
			"because now we're going to start sending a lot of data back and forth",
			"over the internet using Python and JavaScript.",
			"Well let me go ahead now and open up this example as made in advance.",
			"And this is in shows.",
			"And we'll see a few files here, application",
			"dot py, requirements dot text, and my templates,",
			"which are index and layout and search.",
			"All right, so a bunch but not more than we've really seen before.",
			"And let's go ahead and, I kind of cheated earlier.",
			"I didn't look at requirements.",
			"But I might as well look at requirements for good measure.",
			"Here's just an example of what else might be in requirements dot text:",
			"CS50 library and Flask.",
			"And again, those are preinstalled in the IDE,",
			"but we do this so that if you get adventurous and try",
			"running these things on your own Mac or PC, you have all of the configuration",
			"that you need.",
			"Well let's start as before with applications dot py,",
			"and let me go ahead and do this first.",
			"Let me run this thing first so we can actually see the app in motion",
			"and then understand how it works.",
			"So if I visit this, let me go ahead and type in office.",
			"All right, nothing happens yet.",
			"Let me click Search.",
			"OK.",
			"I then see a big bulleted list of all shows that mention office, so not",
			"The Office per se, but an office.",
			"And let me go ahead and zoom out here and look at the URLs.",
			"Let me go back here.",
			"Let me point out that we're at the slash route.",
			"Again, the slash is there, it's just Chrome",
			"is hiding it by default these days.",
			"And when I search for something like office and hit Enter,",
			"notice that I end up at slash search, question mark, q equals office.",
			"So I borrowed some inspiration from Google, right?",
			"I kind of cheated last week where I really only",
			"implemented the front end to Google, the HTML form,",
			"and then I let Google find me some cats and some dogs and so forth.",
			"But now as, with Python, you now have the ability",
			"to implement both sides of that application.",
			"So if I look at the source code here, notice",
			"that I seem to be returning a really big unordered list of list items that",
			"represent, again, all the titles of office related shows.",
			"All right, this is fine and good, but this",
			"is of like old school web programming where you fill out",
			"a form, you hit Enter, and boom.",
			"But these days recall most any time you visit a website,",
			"lots is happening at once.",
			"You've got some autocomplete going on here,",
			"you've got chat messages popping up here,",
			"you've got a map over here that's automatically moving",
			"and a little car for Uber is moving around at the same time.",
			"Like the web of today, web 2.0 if you will,",
			"which is not a technical term as much as it is a buzzword,",
			"refers to just increasingly dynamic web interactions",
			"between users and computers.",
			"And with JavaScript and with your own backend,",
			"be it Python or something else, you can now",
			"begin to build these more dynamic interfaces as well.",
			"Wouldn't it be cool if when I start typing O F F I C E,",
			"we actually immediately saw the results.",
			"And we've seen this already.",
			"Last week, remember that I started searching",
			"for all words that start with A, and I used a really large dictionary",
			"from p set 5, but that was 140,000 words but just words.",
			"This database of titles is several megabytes large.",
			"And I don't necessarily want to send the entire database",
			"of movies to the browser, one, because of performance and size,",
			"and maybe two, intellectual property.",
			"I don't really want to send every user my entire database.",
			"You can imagine wanting to keep a little more control over the data you're",
			"providing, requiring users to log in or pay for your service or the like.",
			"So there's reasons where you might want the browser to talk to the server",
			"and only get the data the user is searching for, not the whole thing.",
			"So let's do that.",
			"Let's enhance this show's application in such a way",
			"that it actually does things more dynamically,",
			"but let's first understand how it works.",
			"So I have a couple of libraries here, CS50's and Flask.",
			"I'm configuring Flask here.",
			"I'm then configuring my database here.",
			"Down here, I just have a very simple route",
			"that renders index dot HTML, which apparently, let's take a look,",
			"has that form, very simple, very similar to last week,",
			"very similar to today, all of the forms we've done thus far.",
			"Here's that name equals q, and everything else is pretty boilerplate.",
			"So let's get rid of that file now.",
			"The layout, also pretty boilerplate, it looks like things in the past.",
			"So let's close that one as well and go back to index, application dot py.",
			"So the juicy part seems to be the search route.",
			"And this was the piece we were missing last week when we used Google instead",
			"to find us some cats and some dogs.",
			"Here I have a route called slash search, a function",
			"called search that will be called for that route,",
			"and here is kind of a nice amalgam of SQL and Python.",
			"I'm going to give myself a variable called",
			"shows, which is going to be the result of all of the rows",
			"that come back when I execute this.",
			"Select star from shows where title is like this placeholder question mark.",
			"Now what am I going to plug-in?",
			"Notice it's a little cryptic at first glance,",
			"but I seem to be taking the user's input, q, from request",
			"dot args dot get, so that's using get apparently because of the word args,",
			"and it's not form now, it's request dot args.",
			"So I'm getting the user's q value, which was office in my case, and just",
			"as a quick check, what's with the percent",
			"signs on the left and the right?",
			"Because we've seen a lot of percent signs today, but these are different.",
			"Perhaps in the chat?",
			"What do these percent signs represent in this context?",
			"Brian, you want to echo the consensus?",
			"BRIAN: Yeah, people are saying they're SQL placeholders.",
			"DAVID J. MALAN: Yeah, so SQL wildcard placeholders.",
			"That means zero or more characters to the left, zero or more to the right.",
			"This is why I was getting matches with office at the beginning of the word,",
			"office at the end, and office in the middle.",
			"If I really wanted to be anal I could get rid of the percent signs",
			"and require only a perfect match, but that's not my goal",
			"with this particular implementation.",
			"Once I get back all of, whoops, once I get back all of these rows",
			"I have here a line, return render template, search dot HTML,",
			"passing in all of those shows.",
			"So the last thing to look at is search dot HTML.",
			"It's pretty simple, and surely like an hour ago",
			"this would have looked super cryptic.",
			"It frankly might very well still look cryptic.",
			"But once you start using this syntax yourself",
			"you'll see that, oh, this is just a template that",
			"is allowing me to dynamically output an unordered list of LI tags, each",
			"of which represents the title of a show that's been passed into this template.",
			"All right.",
			"So now then the final flourish.",
			"Let's go about enhancing this application so that there is no form",
			"to submit in the same way, but instead all of the logic",
			"actually happens between JavaScript and the backend.",
			"I'm going to go ahead and do this first.",
			"I'm going to go back to application dot py here, and instead of this here,",
			"I'm going to go ahead and do the following: I'm going to go ahead",
			"and instead of rendering a template, I'm going",
			"to use a new function called jsonify.",
			"It's kind of a funny name, and I have to import it up here.",
			"So let me import jsonify.",
			"It turns out that jsonify, or json, means JavaScript Object Notation.",
			"And we'll see what it looks like in a moment.",
			"But the world years ago standardized on a format",
			"for transmitting data between servers and browsers",
			"using a very lightweight text format, Jason, or json, JavaScript Object",
			"Notation.",
			"Jsonify is a Flask function that takes a Python list or a Python dictionary",
			"and converts it into json format.",
			"So we'll see this in just a moment.",
			"So notice that I'm now returning the jsonification of the show's",
			"variable, which recall is just the rows that came back from db dot execute.",
			"So let's see this in action.",
			"I'm actually going to go to my, let me go ahead",
			"and restart the server because I've made some changes.",
			"Let me go ahead and now go to the server slash search, question mark,",
			"q equals office.",
			"So I'm going to manually visit this URL and hit Enter.",
			"Notice what comes back.",
			"It's kind of cryptic at first glance here.",
			"But notice this is indeed what's called JavaScript Object Notation.",
			"There's a square bracket over here at top left.",
			"This means, hey browser, here comes a list.",
			"There's a curly brace, which means, hey browser",
			"here comes a dictionary, otherwise known as an object in JavaScript.",
			"Quote unquote ID is the key in this dictionary.",
			"108878 is the value of that key.",
			"Here comes the second key, quote unquote title, the value of which",
			"is nice day at the office, quote unquote.",
			"Then there's a closed curly brace, which is",
			"end of the dictionary or end of the object, a comma,",
			"and then there's a whole bunch of these other dictionaries.",
			"So in short, all we're looking at here is a very raw text",
			"based format of a Python dictionary converted to again,",
			"something called json, JavaScript Object Notation,",
			"which literally, this is about it.",
			"Json uses double quotes, colons, curly braces, and square brackets,",
			"and that's about it, to represent information.",
			"So this is great.",
			"But this is a horrible, horrible user interface if what the user sees",
			"is this mess.",
			"But that's not the point.",
			"The point now is to have our backend return a json array of search results",
			"and let the browser convert it into HTML.",
			"Recall from last week I claimed that with JavaScript you",
			"can mutate or change your dom, the document",
			"object model, the tree in memory.",
			"And what you can do in particular with JavaScript",
			"is add more nodes to that tree.",
			"You can add more things to that family tree like structure.",
			"So yes, hello.",
			"We just got, Hi, David, Hi, David, Hi, David via get.",
			"Thank you very much.",
			"OK.",
			"So let me minimize that, and let me open up now, not",
			"search dot HTML which we're not going to bother using anymore,",
			"but instead index dot HTML.",
			"And index dot HTML, you know what, I'm going",
			"to go ahead and borrow some code here.",
			"I'm going to go ahead and open up index dot HTML,",
			"and I'm going to simplify this.",
			"Let me stop the server.",
			"I'm going to go ahead and get rid of my layout template,",
			"and I'm going to get rid of my search template",
			"because I just don't need them anymore.",
			"So I'm going to simplify this program and focus entirely now on index dot",
			"HTML.",
			"So what do I want to do in here?",
			"I need to involve some JavaScript now.",
			"So how am I going to go about doing this?",
			"Well first I need to go ahead and use a library called jQuery,",
			"and jQuery is something that's a little decreasing in popularity,",
			"but it's still used by Bootstrap, and so we'll",
			"continue using it because you're already including it in fact,",
			"for some of your other examples, but we need a different version of it.",
			"So I'm going to quickly Google jQuery CDN, I'm going to go to this website,",
			"and long story short, there's a lot of libraries",
			"out there that you can use by just grabbing their script tag",
			"and using it inside of your own.",
			"So I'm going to go ahead here, and let me just clean up the tag",
			"so it's all in one long, if ugly, line, but via copying and pasting",
			"that line, which we'll typically do for you in the problem sets in distribution",
			"code, I'm going to go ahead and copy that library into my file",
			"so that it's among the libraries I can use.",
			"And now I'm going to go ahead, just as we did last week,",
			"and I'm going to add a script tag inside of my own pages head,",
			"and then down here, let's see, where do I want to do this?",
			"Actually, you know what?",
			"Let me go ahead and do this a little differently just for consistency",
			"with what you'll see online.",
			"I'm going to go ahead and do this all in my body",
			"so we don't have to worry about things being out of order.",
			"We'll indeed keep it all inside of the page's body.",
			"And what I'm going to do is give myself this:",
			"an input, autocomplete equals quote unquote off,",
			"autofocus, and then I'm going to give it a placeholder of query",
			"and then a type of text.",
			"So I'm going to have a very simple search box there",
			"and I'm going to have an unordered list with nothing in it.",
			"And that's deliberate for now.",
			"Then I'm going to import this, the jQuery library.",
			"And then down here, inside of my own script tags,",
			"this is where I'm going to write the actual code.",
			"I'm going to do let input equals document dot,",
			"let's do query selector just like last week, and let me go ahead",
			"and select my input tag.",
			"This works.",
			"I don't need an ID or any class because at the moment I only have one input,",
			"so query selector of quote unquote input will give me that tag specifically.",
			"Let me go ahead now and add to that input",
			"an event listener that listens for the key up event.",
			"Recall from last week our discussion of events, and key up,",
			"like the user touching and letting go of the key",
			"is one of the events you can listen for.",
			"And any time the user does that, I want to call the following function,",
			"and it's an anonymous function which we saw last week too.",
			"And what I'm going to do inside of this anonymous function is the following.",
			"I'm going to call a new function, the only new JavaScript function today,",
			"called dollar sign underscore get.",
			"This is shorthand notation for jQuery dot get,",
			"but, sorry, dollar sign dot get is shorthand for jQuery dot get.",
			"And I'm going to go ahead and get the following.",
			"I'm going to get a slash search URL with a question mark followed by q equals,",
			"and then I'm going to go ahead and put input dot value.",
			"So notice with this line of code, this JavaScript string,",
			"I'm kind of dynamically constructing in JavaScript code",
			"the URL that I want to request shows from, slash search question",
			"mark q equals, whatever the value of the input box",
			"was that the user typed something into.",
			"And the way this dollar sign dot get function works",
			"is it supports what's called a callback.",
			"A callback is a function that will eventually be",
			"called when it has an answer for you.",
			"And this is important on the web.",
			"The internet can sometimes be slow, and you",
			"might want to write code that contacts another server",
			"like I'm about to do now.",
			"And that server might be slow or the internet connection might be slow,",
			"and it would be annoying if your entire browser froze",
			"while you waited and waited and waited for the server's response to come back.",
			"It's a lot nicer if you can say, when you have the data,",
			"call me back, so to speak, sort of metaphorically on the phone,",
			"call me back by calling this function.",
			"So what function do I want it to call?",
			"I want it to call this anonymous function that's",
			"going to take as input an argument called shows,",
			"but I could call that anything I want, and I'm going to do this.",
			"I'm going to create an HTML string that's",
			"initially nothing, quote unquote.",
			"I'm then going to do this, a for loop in JavaScript",
			"letting a variable called ID equal to whatever ID is in the shows that just",
			"came back to me, and now inside of this for loop,",
			"let me go ahead and inside of this for loop",
			"create a title that's equal to shows, which is again,",
			"the data that came back on the, came back via that callback so",
			"to speak, shows dot ID dot title, and semicolon,",
			"then I'm going to do HTML plus equals quote unquote list item plus title",
			"plus quote unquote closed list item.",
			"Then down here, lastly, I'm going to do document dot query selector, quote",
			"unquote ul, dot inner HTML gets HTML.",
			"All right, this is definitely the craziest thing",
			"we've done thus far today, and it's tying together",
			"so many different ideas, not to mention new syntax, so of all the examples,",
			"don't worry too much if this is just a lot at once.",
			"The goal really now is not to introduce you",
			"to this syntax so that you can repeat it tomorrow, but rather",
			"the idea of what we're doing.",
			"So what are we doing?",
			"We have a simple web page with a text input.",
			"We've got a simple web page with an unordered list that's currently empty.",
			"Below that, we're including this third party JavaScript library called jQuery,",
			"which Bootstrap also happens to use for some of its graphical components.",
			"Then I have my own JavaScript code that first",
			"declares a variable that gives me access to the input tag on my own webpage",
			"a few lines above.",
			"I'm then using this fancy function dollar sign",
			"get to do what's called an AJAX call.",
			"AJAX refers to the ability for a web page",
			"to make additional HTTP requests programmatically to a server.",
			"It is allowing, this is how all websites today",
			"get your chat messages if a friend just messaged you on some platform.",
			"It's how when you're typing in your address,",
			"it can autocomplete your address based on the entire globe's",
			"worth of addresses.",
			"It's how Google search autocomplete works as well.",
			"Dollar sign dot get is a function built into jQuery that's",
			"using some standard JavaScript functionality that's",
			"going to allow me to visit the URL that ends with slash search",
			"question mark q equals whatever the human typed in,",
			"and when the response is ready, this anonymous function",
			"is going to get called back, and it's going to be handed an input,",
			"an argument called shows that is going to equal this stuff.",
			"This is what my JavaScript function is going to receive as its shows argument.",
			"And notice, it's a list or an array, inside",
			"of which is a list of dictionaries or objects with two keys, ID, and title.",
			"This, let me stipulate, happens to be the syntax in JavaScript",
			"for iterating over such a data structure,",
			"and this happens to be the syntax in JavaScript",
			"for allowing me to create one line after another, another LI, another LI,",
			"appending it using concatenation to this variable called HTML.",
			"And this very last line of code says to the browser,",
			"go select me that UL and plug into its inner HTML",
			"the contents of it, the value of my variable.",
			"And now crossing my fingers I did not screw up syntactically, let me go ahead",
			"and do Flask run, I still need to run Flask because I do have a backend here.",
			"Let me go back to my browser and reload the slash route.",
			"Let me go ahead now and type in O, F, dammit.",
			"Oh wait, it was just slow.",
			"So notice, everything I've typed thus far or everything I'm seeing thus far",
			"matches the word off.",
			"And if I continue this, office, and let it search",
			"and let the internet do its thing, now indeed,",
			"it's been whittled down to a list of office matches.",
			"And notice again if I go to the inspect tab,",
			"open the network tab under inspect, let me go ahead and type in office,",
			"notice here that every keystroke I typed triggered, O F F I C E to be executed,",
			"triggered an AJAX call, that is an HTTP call to the server.",
			"And notice that if I click on the last one there, scroll down,",
			"I will see not only my request and my response,",
			"but if I click on the response, I'll indeed see this big json",
			"array of all of the data.",
			"And it's actually rather fortuitous that it was slow,",
			"because we were going to end with one demo.",
			"For instance, if I was curious to know, being indoors",
			"all day, what the weather is like, I might maybe",
			"call Brian up on this here telephone.",
			"[PHONE RINGING]",
			"BRIAN: Hello?",
			"DAVID J. MALAN: Hi, Brian, do you know what the weather is like outside today?",
			"BRIAN: I haven't been outside in a little bit, but I can check,",
			"and I will call you back.",
			"DAVID J. MALAN: OK.",
			"And notice it would be annoying if I had to wait on the phone for him",
			"to go outside.",
			"So I'm going to hang up, and I'm just going to wait for him to call me back,",
			"and that's exactly what's happening in my code.",
			"When I pass this anonymous function to this get function,",
			"and they get here means HTTP get, this is telling the browser,",
			"call this function once you have the answer,",
			"much like hopefully Brian's about to have the, and indeed, the call back.",
			"Hello.",
			"BRIAN: Hi.",
			"I looked up the weather.",
			"It looks like it's going to be a brisk fall day today.",
			"DAVID J. MALAN: Wonderful, well thank you so much.",
			"And that is it for CS50.",
			"We will see you all next time.",
			"[MUSIC PLAYING]",
			""
		],
		"is_youtube": false
	},
	"video_047": {
		"section": "CS50x 2021",
		"subsection": "Week 9",
		"unit": "Shorts",
		"video_sources": [
			"https://edx-video.net/HARCS50X2016-V031400_DTH.mp4",
			"https://edx-video.net/HARCS50X2016-V031400/HARCS50X2016-V031400.m3u8"
		],
		"video_duration": 1038,
		"speech_period": [
			3.337, 2.583, 3.177, 1.833, 3.72, 2.39, 2.41, 4.47, 2.85, 2.83, 4.8, 1.76,
			3.06, 4.23, 1.83, 4.44, 2.22, 3.39, 3.54, 2.476, 1.874, 2.94, 2.43, 3.54,
			1.29, 3.78, 2.22, 1.17, 4.83, 4.56, 1.44, 2.31, 2.22, 3.54, 3.18, 2.77,
			5.54, 4.96, 2.78, 2.61, 3.87, 2.16, 2.309, 4.671, 2.77, 3.16, 3.23, 1.83,
			3.52, 3.72, 3.8, 4.29, 3.03, 3.87, 2.37, 2.67, 1.81, 1.25, 1.8, 2.334,
			1.416, 2.708, 3.322, 2.22, 3.09, 4.38, 3.51, 2.06, 4.12, 2.64, 3.6, 2.34,
			3.48, 3.15, 3.45, 3.87, 2.712, 2.208, 2.43, 1.85, 2.2, 5.37, 3.47, 4.0,
			2.43, 2.85, 5.27, 4.14, 2.014, 1.916, 4.06, 2.04, 2.92, 3.19, 4.95, 2.58,
			1.65, 5.97, 2.1, 3.102, 2.208, 3.034, 1.916, 1.96, 2.0, 2.55, 2.13, 1.62,
			4.23, 4.93, 3.37, 2.77, 1.714, 2.666, 2.97, 3.12, 2.82, 3.48, 4.024,
			1.666, 3.16, 2.79, 3.72, 3.36, 3.37, 4.107, 2.333, 1.75, 2.36, 3.75, 2.61,
			3.03, 3.74, 1.94, 2.43, 2.05, 1.53, 3.53, 2.71, 1.43, 2.46, 2.34, 2.79,
			2.79, 3.75, 3.795, 2.145, 3.86, 4.3, 3.477, 1.833, 3.19, 2.54, 5.417,
			2.833, 2.76, 5.31, 2.09, 4.48, 3.885, 2.625, 1.38, 2.58, 3.24, 2.7, 3.06,
			2.35, 2.27, 1.08, 3.24, 3.45, 4.74, 2.49, 3.089, 4.531, 2.55, 2.61, 4.32,
			1.26, 2.55, 2.29, 1.5, 3.29, 0.99, 1.9, 1.78, 1.75, 3.51, 3.585, 2.875,
			0.56, 2.76, 2.833, 3.647, 2.19, 2.585, 2.125, 3.45, 2.291, 1.999, 2.75,
			2.8, 2.49, 1.53, 3.124, 2.316, 3.68, 3.459, 1.791, 3.27, 4.347, 2.833,
			3.41, 2.97, 2.91, 3.36, 4.17, 1.51, 1.46, 3.9, 2.85, 3.0, 5.22, 2.28,
			3.78, 4.44, 3.98, 4.53, 1.86, 2.55, 3.09, 3.54, 3.0, 3.03, 5.492, 1.708,
			2.1, 1.87, 2.54, 2.7, 2.22, 4.59, 3.22, 4.657, 2.833, 2.05, 3.38, 2.09,
			1.99, 6.54, 5.13, 2.73, 3.1, 1.81, 5.17, 3.437, 1.333, 2.61, 6.167, 3.083,
			2.5, 1.791, 3.719, 2.13, 3.15, 2.4, 2.07, 4.294, 1.916, 3.66, 2.85, 1.567,
			2.333, 2.07, 4.59, 2.4, 2.97, 2.664, 2.166, 3.27, 2.1, 3.196, 1.874, 2.55,
			3.42, 3.15, 5.15, 2.28, 2.82, 3.69, 2.31, 2.86, 2.09, 2.01, 3.98, 2.68,
			2.708, 2.002, 2.1, 1.41, 2.34, 4.64, 3.49, 3.39, 3.72, 2.46, 1.529, 2.041,
			2.73, 3.09, 2.16, 1.5, 3.5, 3.12, 3.0, 2.822, 3.208, 2.61, 1.92, 3.041,
			1.139, 3.05, 1.833, 2.787, 2.64, 2.07, 3.18, 1.36, 4.91, 4.22, 1.75, 1.83,
			3.03, 4.62, 3.66, 3.842, 1.708, 2.846, 1.874, 1.79, 1.44, 3.249, 1.578,
			1.833, 5.592, 2.208, 3.51, 1.89, 2.65, 2.9, 1.29, 2.73, 3.53, 1.17, 1.8,
			1.81
		],
		"transcript_en": [
			"DOUG LLOYD: In a different video, we introduced you to Python and its syntax",
			"and we talked all about how it can be used at the command line",
			"to write programs that you would run from your terminal.",
			"There's a lot more to Python than just that.",
			"We can also use it to write web applications.",
			"It is a really common use case to have website back",
			"ends that are written in Python because Python contains",
			"a lot more native functionality to support things like networking,",
			"opening socket connections, maintaining connections between two",
			"different locations on the internet.",
			"And C can do these things too, but in C, it's really, really difficult",
			"and really a lot of code.",
			"In Python, because it is a more modern language that abstracts away",
			"some of these kind of boring, tedious details of C,",
			"it thus becomes a lot more straightforward",
			"and a lot more tenable to write more complex web apps in Python",
			"instead of using C.",
			"In addition, there are a lot of what are called web frameworks that",
			"make this even easier because they take some of the Python things",
			"that we would have to do and abstract those away.",
			"So basically you can think of a web framework",
			"sort of like a library that's written in Python,",
			"that is specialized in taking advantage and doing",
			"some of the things in Python for you that you would otherwise",
			"have to do yourself.",
			"Creating a web server in Python is not all that many lines of code",
			"to do it in just raw Python.",
			"But it's a little tedious.",
			"Not nearly as tedious as C. But using one of these different web frameworks.",
			"For example, Django, Pyramid, or what we use in CS50, which is Flask,",
			"makes it a lot easier.",
			"Now, those frameworks are all great.",
			"We're talking about Flask in CS50 specifically",
			"because it is very lightweight and still quite feature-rich,",
			"which means that it will work well on CS50 IDE",
			"where you are using a cloud-based infrastructure,",
			"and the amount of space and memory you have is limited by design.",
			"Using the lightest weight web framework possible was really important.",
			"So we've talked about HTML in the past and we know",
			"that we can use HTML to build websites.",
			"But there is one major limitation that HTML websites suffer from",
			"and that is that they are static.",
			"So imagine we want to create a website, for example,",
			"that displays the current time, just the time in Cambridge, Mass,",
			"displaying it to the latest minute, let's say.",
			"This is some HTML that would do exactly that.",
			"So the current time in Cambridge is 14:08.",
			"So 2:08 PM.",
			"This is great for a minute.",
			"But at 2:09, it becomes not accurate anymore.",
			"So if you're the webmaster and you have a page that's written entirely in HTML",
			"and your job is to present an accurate website that",
			"reflects the current time in Cambridge, every minute",
			"you have to go through and update this page so that it is always",
			"consistent and so that whenever a user visits the site,",
			"they're getting the actual correct time.",
			"This is awful.",
			"You would not want to do this.",
			"And if you were actually a webmaster and this was your job,",
			"you probably wouldn't last too long because you'd",
			"be literally just changing things.",
			"And imagine if we were going to the nearest second or the nearest",
			"millisecond, you wouldn't be able to actually even do it.",
			"The only way to update our source in HTML",
			"is to literally go in and edit our HTML.",
			"If we incorporate Python into our code, though, we can be a lot more flexible",
			"and we can allow our pages to become dynamic",
			"without requiring any human intervention.",
			"And that's ultimately our goal here, is to automate these processes for us",
			"so that we don't have to think about them day",
			"to day, getting buried in that minutia.",
			"So we're going to do this specifically in Flask.",
			"And here's an example of a web application in Flask",
			"that would display the current not only time in Cambridge",
			"but it would also display the current date, day of the week, year,",
			"and it would display that time to the nearest ten thousandth of a second.",
			"Just a couple of lines of code from Flask.",
			"Import Flask, we'll talk about that in just a second.",
			"Here, I'm just importing a couple of modules",
			"that are also available in Python.",
			"So Flask is one module available in Python.",
			"Here, I'm importing the datetime module and specifically I'm",
			"pulling one function from it, also called datetime.",
			"And from the pytz or py timezone module, I'm",
			"pulling one function called time zone.",
			"Then I'm initiating my Flask application.",
			"And then I'm basically using the datetime and timezone functions",
			"from those two modules that I imported to figure out what the current time is",
			"in the time zone America/New York.",
			"New York is in the same time zone as Cambridge",
			"and that's the standard time zone name.",
			"So I'm just going to use that one.",
			"So I'm figuring out exactly what the current date and time is",
			"and assigning that to a variable in Python called now.",
			"And then I'm returning some string where I'm plugging in whatever now is.",
			"And apparently I'm doing that to app.route/.",
			"We'll talk about all that in a second.",
			"But basically I wrote this on a web page in Python in something",
			"called application.py, specifically.",
			"And then I ran this application and visited",
			"the page that was generated from it, it would tell me",
			"the current date and time to the nearest ten thousandth of a second.",
			"If I refreshed, it would update it every time.",
			"It wouldn't be static, it would become dynamic",
			"and I wouldn't have to do any more intervention.",
			"This would work for as long as my computer worked,",
			"as long as the web server was running worked",
			"to give me the current date and time.",
			"And I, as the webmaster, can focus on much more fulfilling and fun things",
			"than updating my HTML source every 60 seconds.",
			"So getting started using Flask is really easy within CS50 IDE.",
			"We first open up a Python file and in general, we're",
			"going to call it application.py.",
			"But you can call it whatever you want but in all these examples,",
			"we're going to be referring to it as application.py.",
			"The very first line of application.py is going to be the following.",
			"From Flask, import capital F, Flask.",
			"So flask with a lowercase f is the name of a module.",
			"Capital F Flask is going to be the name of a function within that module.",
			"In particular, it's going to be a class.",
			"Generally, you may recall from our video on Python syntax,",
			"that we indicate classes with a capital letter.",
			"That's what we're doing here, we're importing the Flask class.",
			"After we import it, we then need to initialize a Flask application.",
			"You saw that on the previous code example as well.",
			"App equals flask parentheses underscore underscore name underscore underscore.",
			"Underscore underscore name underscore underscore is just",
			"the name of the file.",
			"So basically this is creating a flask application",
			"based on whatever file this line of code appears in.",
			"Which, again, is always going to be generally application.py.",
			"So it's basically creating an app, a Flask application",
			"from the application.py file.",
			"And then from there, we just have to write",
			"functions, which we're familiar with doing in Python,",
			"to define the behavior of our application",
			"when we do different things.",
			"So here, for example, are two functions that I might write.",
			"And you'll notice that this is not new.",
			"This is just writing in Python.",
			"We're not writing in anything special here.",
			"I'm defining a function called index, whose sole purpose",
			"is to return you are at the index page.",
			"And I'm defining another function called sample,",
			"whose sole purpose is to return the string you are on the sample page.",
			"Now, how do I associate these functions with my site?",
			"Well, what I can do is something like this.",
			"This is called applying a decorator, and I'll talk about this in just a second.",
			"But basically what it means here is if I go to my web applications home",
			"page, which you may recall from our video on HTTP, is just slash.",
			"So if I don't type anything else, it's going",
			"to default to index.HTML or nothing.",
			"It will show me you are at the index page.",
			"If, however, I go to whatever my web applications address is slash sample,",
			"it will not show me the index page, it will show me the sample page.",
			"So basically what I'm doing here is I'm defining the behavior",
			"that I want to appear on different pages within my flask application.",
			"So again, these are called decorators.",
			"And in Flask context, we're basically just associating a particular function",
			"with executing when you visit a particular URL.",
			"Decorators are actually not something that are native to Flask,",
			"they're native to Python more generally.",
			"But that goes beyond the scope of what we cover in the class.",
			"But generally they are used to modify the behavior of a function",
			"or associate a function with something.",
			"But in Flask, we're going to use it specifically to associate functions",
			"with visiting certain domains.",
			"OK?",
			"We also then need to--",
			"So we've now written some code, the index and sample functions.",
			"Now we want to run our Flask application.",
			"We do that in three steps, the first two of which you only have to run once.",
			"First thing you have to do is export the Flask app.",
			"Flask app is a system variable and it's going",
			"to become stored in the memory of your IDE specifically,",
			"so that if you ever run an application again,",
			"it knows exactly which application to run.",
			"So we're basically just saving in memory somewhere the location",
			"of our Flask application.",
			"It's being stored in a system variable.",
			"So export flask app equals application.py,",
			"because that's the name of our file.",
			"The second line is technically optional but it's recommended particularly",
			"as you get started.",
			"Export flask debug equals 1.",
			"1 here just basically means true.",
			"So basically you're going to be running it",
			"so that when you run your flask application in your IDE,",
			"you are seeing all of the things that it's doing in debug mode.",
			"So if something goes wrong, it will get printed out to your terminal,",
			"you'll see it.",
			"It's not like your site will just crash and you won't know what happened.",
			"And then after executing those two lines of code, again, in our IDE,",
			"just executing those two commands, rather, in our IDE, flask run.",
			"And then what will happen specifically in your IDE,",
			"is it will take about a second to spin up",
			"and then it'll give you a URL that you can click on",
			"and visit, which will be the home page of your application.",
			"Again, after the first time you get configured",
			"with the particular application you want to run,",
			"you can leave these two blue lines out, you won't need them again.",
			"You can just continue to type flask run and it",
			"will continue to run that same application over and over",
			"until you no longer want to run it.",
			"And then you would export a different application, export a different debug",
			"mode, and so on.",
			"So in addition to just running code as we",
			"did before, just having it print out you are at the index",
			"and you are at the sample page, we can also",
			"pass data in to our Flask applications.",
			"We can do this using HTTP get, you may recall, by passing in data via URL.",
			"So I might write a function that looks a little something like this.",
			"It's a function called show and instead of taking",
			"no parameters like index and sample did earlier,",
			"I'm accepting a parameter here called number.",
			"And I'm returning you passed in, and then I'm",
			"apparently going interpolate or stick in some number.",
			"Where does that number come from?",
			"Well, look at my decorator here.",
			"@app.route slash show slash.",
			"And those angle brackets are actually important,",
			"we actually have to leave those in, number.",
			"So that if I visited my application slash show slash 10,",
			"the page would show you passed in 10.",
			"If I went to slash show slash 50, it would say you passed in 50.",
			"So it allows me to collect information using HTTP get",
			"by having the user supply it via a URL.",
			"We can also pass in data via HTML forms, which are transmitted not by get",
			"but by something called post.",
			"Now, by default, Flask is configured to only accept",
			"HTTP get requests or information via the URL",
			"so we have to modify a couple of things to make sure that Flask will also",
			"respond to HTTP post requests, for example,",
			"when data is submitted via a form.",
			"So if you get to problem set 7 in CS50, which is CS50 finance,",
			"you'll see that in our distribution code,",
			"we have something that looks a little similar to this.",
			"So this is where this is coming from if you want to take a look.",
			"I've taken out a couple of things just to fit this four",
			"lines of code on the slide here.",
			"But this is some of the sample code that we give you",
			"that is checking to see whether the user has provided",
			"a user name in a particular field.",
			"So notice that in addition in my decorator to saying where",
			"the function should be associated, so in this case with slash login,",
			"I'm also saying not only that, but you should",
			"be accepting data via the get method or via the post method.",
			"So that's how I explicitly call it out.",
			"Then I'm defining my login function.",
			"And I'm saying if not request.form.get username.",
			"Using get here is unfortunately a side effect of Python.",
			"That does not mean we're using the get method here.",
			"Basically what I'm asking for is go and retrieve,",
			"literally using get in that context.",
			"Go and retrieve from the form the field called username.",
			"And here I'm saying if it doesn't exist, apologize to the user.",
			"Say they need supply a username.",
			"So basically this is asking the question is the user name",
			"field of whatever form the user submitted to get here, is that blank?",
			"If it is, we need to apologize to the user and have them return something.",
			"If not, we'll go to some more lines of code down below",
			"and you're going to see those lines of code",
			"in the distribution code for PSet 7, if you want to take a look.",
			"Now, we can also vary the behavior of a function",
			"depending on which type of HTTP request we got.",
			"We can do one thing if we got a get request",
			"and we can do one thing if we got a post request.",
			"For example, if we got a get request, we might show them the form.",
			"But if we got a post request, then we're going",
			"to be expecting that they have provided some data via the forms.",
			"We can use one URL to do two different things",
			"depending on how the data came to us.",
			"And that actually is what we do, that some of the code I",
			"took out on the previous page.",
			"But this code also appears in the login function for PSet 7.",
			"If the request method was post, that was then",
			"where I was checking to see whether the fields were all filled in.",
			"Otherwise, what I actually do here, which an else here",
			"implies if the request method is get, because I only",
			"have two methods this function accepts, get and post.",
			"Otherwise, what I'm doing is actually displaying",
			"the form in the first place, the form that I expect them to type into.",
			"Which submits to this page again in the hopes",
			"that they will have submitted data that I could use.",
			"And I would process in the post part of this function as opposed",
			"to in the get part of this function.",
			"So if request.method basically is allowing me to check how I got data.",
			"Request is something that is part of Flask",
			"and it will let me see whether I got data via get or via post",
			"and allow me to do different things depending on which it was.",
			"There are a lot of functions within the Flask module",
			"that will be useful for you as you continue to develop applications.",
			"So in addition to saying from Flask import",
			"Flask at the beginning of your files, you",
			"might say from Flask import Flask comma any of these.",
			"And you'll leave out the parentheses when you're doing that part",
			"but you'll use the parentheses when you're calling the functions.",
			"URL underscore for.",
			"So this allows me to define a function and have",
			"a decorator associated with it.",
			"And maybe that decorator specifies that the URL here",
			"is really long or, for whatever reason, not that helpful.",
			"What I can do here is instead of specifying",
			"the exact URL I want to go to, I can say what",
			"I want you to do here is go to the URL for whatever function it is.",
			"So say my login function was associated with some URL that",
			"was like 50 characters long.",
			"Here, I could just pass in, instead of typing out",
			"that 50 character long URL where I wanted to use it,",
			"I could just say URL underscore for login.",
			"And because I associate it with a decorator,",
			"it'll just plug it in there instead.",
			"So it's a way to kind of shorthand a couple of things.",
			"Redirect, as you might expect, is Flask's function",
			"that redirects you from one page to another.",
			"Session is useful for HTTP session data.",
			"As we've talked about get and post, you may recall that there's also a third.",
			"And there are a few others but there's another thing",
			"we would use called a session variable.",
			"It's not necessarily an HTTP thing but it's usually stored in the headers",
			"there as well.",
			"And we can use that, for example, to track that a user is logged in.",
			"And constantly check that they are logged in",
			"even if they're going to different pages on our site.",
			"So a session is used sort of like a global variable.",
			"It's accessible by all pages.",
			"If you establish a session, you can store data in the session for the user",
			"as well.",
			"Render template is used to create pages on your site that",
			"mix HTML and Python together.",
			"So I might render a template, for example,",
			"where that template is the form that I want",
			"to show to the user, the form I was talking about on an earlier slide.",
			"I might have an HTML template where I've written the general form there.",
			"And I might render a template and reference in the parentheses",
			"there the HTML for the form that I was just talking about.",
			"And you can do some other cool things too",
			"where you mix HTML and Python together using",
			"a language called Jinja, which is going to be",
			"beyond the scope of this particular video.",
			"But if you want to get more information about what",
			"you can do in the Flask quickstart guide and you really can get started pretty",
			"quickly with it, the URL is there.",
			"And if you want to learn about Jinja and how",
			"you can mix HTML and Python together to create basic templates where",
			"you can maybe substitute a couple of different things",
			"in depending on what the user has submitted via a get or post request.",
			"You can get some information on Jinja there.",
			"Jinja is Python-inspired syntax.",
			"So some of the things that you'll be familiar with from Python syntax",
			"will be relevant there.",
			"But there are a couple of little twists as well.",
			"And you can learn more about Jinja at that URL there as well.",
			"I'm Doug Lloyd.",
			"This is CS50.",
			""
		],
		"is_youtube": false
	},
	"video_048": {
		"section": "CS50x 2021",
		"subsection": "Week 9",
		"unit": "Shorts",
		"video_sources": [
			"https://edx-video.net/HARCS50X2016-V029000_DTH.mp4",
			"https://edx-video.net/HARCS50X2016-V029000/HARCS50X2016-V029000.m3u8"
		],
		"video_duration": 812,
		"speech_period": [
			2.4, 3.447, 2.583, 1.874, 3.226, 3.36, 3.141, 2.499, 1.98, 0.916, 3.614,
			3.439, 1.691, 2.88, 4.14, 3.13, 1.985, 2.895, 2.19, 3.48, 1.31, 2.53,
			4.41, 4.08, 3.93, 2.09, 4.04, 3.77, 3.73, 1.7, 2.94, 3.48, 3.125, 1.875,
			2.32, 2.28, 3.341, 1.249, 1.98, 2.92, 4.23, 4.16, 2.94, 2.594, 3.166,
			1.65, 2.629, 1.541, 2.833, 4.397, 1.95, 4.8, 2.64, 4.092, 3.208, 2.14,
			3.01, 2.004, 2.166, 4.32, 2.79, 5.22, 3.27, 5.76, 4.17, 3.64, 3.35, 0.87,
			0.9, 2.541, 0.831, 2.208, 2.083, 3.437, 3.494, 1.916, 2.54, 2.49, 1.98,
			1.708, 2.432, 2.445, 2.625, 3.26, 0.97, 1.791, 5.209, 3.05, 1.26, 3.53,
			1.393, 1.916, 2.125, 2.526, 5.13, 2.28, 1.71, 2.675, 2.125, 3.33, 3.33,
			2.01, 5.04, 2.07, 3.37, 2.485, 2.125, 1.56, 4.57, 4.187, 1.333, 1.62, 1.3,
			1.85, 1.833, 4.917, 2.76, 2.04, 3.06, 3.39, 3.63, 1.05, 3.27, 3.42, 4.87,
			4.49, 2.58, 3.199, 2.291, 2.76, 2.88, 3.14, 3.391, 1.749, 5.09, 2.68,
			3.12, 6.0, 1.35, 2.58, 2.37, 3.24, 7.67, 2.29, 4.147, 1.583, 2.97, 6.06,
			2.174, 2.416, 2.1, 4.86, 2.34, 2.472, 1.958, 3.79, 4.08, 2.73, 3.107,
			1.583, 0.83, 2.75, 2.52, 1.75, 1.35, 2.166, 1.644, 5.31, 1.99, 1.76, 7.41,
			2.38, 3.77, 4.35, 3.18, 3.42, 3.51, 2.01, 5.52, 5.54, 3.91, 1.251, 1.749,
			4.905, 5.445, 2.41, 2.42, 2.036, 3.124, 3.57, 4.42, 1.85, 2.61, 4.945,
			2.375, 1.74, 2.66, 0.38, 0.833, 2.097, 3.21, 2.88, 3.28, 2.06, 3.66, 4.92,
			1.76, 2.541, 2.209, 4.04, 2.5, 3.15, 1.98, 4.5, 4.09, 3.147, 2.333, 3.6,
			3.168, 1.932, 3.92, 3.43, 1.5, 1.41, 5.49, 2.46, 1.08, 2.26, 4.33, 1.756,
			1.374, 2.42, 3.43, 4.21, 3.27, 1.82, 3.21, 3.21, 0.84, 3.176, 1.124, 2.83,
			1.87, 2.29, 4.63, 1.32, 3.027, 1.333, 2.55, 2.44, 2.5, 1.958, 2.162, 5.25,
			3.76, 2.42, 3.826, 1.874, 2.64, 2.57, 2.08, 2.79, 2.49, 2.51, 3.04, 6.04,
			1.05, 2.42, 2.67, 2.644, 2.666, 3.18, 3.18, 2.189, 2.041, 3.0, 0.55, 5.0,
			1.41, 3.09, 5.41, 1.25, 1.95, 1.78
		],
		"transcript_en": [
			"[MUSIC PLAYING]",
			"",
			"DOUG LLOYD: So as you continue your exploration of JavaScript,",
			"there's one other technique that really might",
			"come in handy as you begin to build more complex websites,",
			"and that is using something called Ajax.",
			"So, so far, in our exploration of JavaScript,",
			"we've been limited to doing a couple of really simple things",
			"for the purpose of illustration, like you click a button,",
			"and something happens.",
			"Maybe the color changes on your site, or maybe a couple of words change.",
			"But the catch is everything we've been doing so far has been client side.",
			"It's all happening on our computer.",
			"We're never really talking to the outside world.",
			"We can, however, talk to the outside world and make changes on our website,",
			"have something happen that interact with the server,",
			"but maybe it doesn't reload our entire page.",
			"We want to create a more pleasant user experience.",
			"Ajax allows us to do that.",
			"Ajax used to stand for something called Asynchronous JavaScript in XML.",
			"That's a backronym.",
			"That's not really what it's called anymore.",
			"And actually, most commonly now, instead of XML, we use JSON.",
			"But Ajax has just been the name that's kind of stuck for the technique.",
			"And what Ajax allows us to do is to refresh, basically, sections",
			"of our page without the entire page.",
			"And if you're, for example, somebody who follows sports, for instance,",
			"you might see this if you're on a sports website",
			"where scores of games that are going on currently are being updated,",
			"but the whole page doesn't refresh.",
			"That means that the page is basically taking advantage of Ajax",
			"to just update small portions of the page.",
			"The techniques that you can do with Ajax are pretty limitless.",
			"You can do a lot of different things with it.",
			"And we're going to focus on a very specific example where, again, we're",
			"clicking a button, and something happens.",
			"But the difference is this time when something happens,",
			"we're making a server request.",
			"We're making an outbound request from a page.",
			"It's not just happening on our machine.",
			"But you can do things like updating, for example,",
			"the sports scores on a website that tracks that information or your email.",
			"You might notice that sometimes when you get a new email,",
			"your entire body of your page refreshes to put",
			"that new email at the top of your inbox, but the whole page doesn't refresh.",
			"That's happening with Ajax as well.",
			"But it's constantly running all the time.",
			"It's just basically querying forever.",
			"We're, again, just going to focus on clicking a button and something",
			"happening, but that something being not just local to our machine anymore.",
			"So, in order to do this, we have to create",
			"another special kind of JavaScript object called an XMLHttpRequest.",
			"And what this does is it allows us to make it",
			"asynchronous, so not at the same time as the refresh of the page",
			"or loading the page, but sometime there after while we still are on the page.",
			"That's what we mean when we say asynchronous.",
			"it allows us to make an asynchronous request",
			"to a server to get more information.",
			"It's actually very easy to create this, fortunately.",
			"This line for example would create a new x amount HTTP request object.",
			"And in this case, I'm just calling that xhttp,",
			"and assigning it to just a random, local variable in JavaScript.",
			"Once you have the object, so once you've created it,",
			"the first thing you have to do is define an onreadystatechange behavior.",
			"Onreadystatechange is really just a wordy way",
			"to describe the steps that are happening when you visit a page.",
			"So, for example, you click on--",
			"you're on a page.",
			"You refresh the page.",
			"It sort of all goes blank for a second, then some of the data",
			"starts to populate.",
			"And then it stops refreshing, and you're ready to go.",
			"That's going through a series of different states,",
			"where it goes from the request hasn't been initiated to your sending",
			"the request to the request is received to the request is on its way",
			"back to you, and then the request is complete.",
			"Those are, for example, a couple of different state changes",
			"that might take place when you're visiting a site.",
			"And it will also be the kinds of state changes",
			"that will take place when you're updating",
			"a smaller section of your site.",
			"Typically, we define something that is supposed",
			"to happen when the state change is using an anonymous function.",
			"And we're going to see an example of this in just a moment.",
			"We don't have to give that function a name,",
			"we just want it to do something whenever it",
			"detects some change in the status of loading the site.",
			"There are five different states.",
			"They go from 0 to 4.",
			"That is the readyState property, so that's part of the onreadystate change.",
			"It's clearly related.",
			"And those are what I basically just described,",
			"where 0 is the request has not yet been initialized",
			"and, 4, which is the end, which is the ultimate goal",
			"of a an onreadystate state change request or an Ajax request",
			"is to get that readyState to 4, which basically",
			"means the entire them has loaded.",
			"And hopefully, the status that we get back is 200.",
			"Those are the two things we're really caring about.",
			"We want to make sure that when our Ajax request is completed,",
			"that the readyState is 4, so the data has been received,",
			"and the data was received OK.",
			"You may recall 200 being the HTTP code for OK.",
			"That was the one we, fortunately, never saw.",
			"We didn't go to a website and get a-- you don't go to website and get a 200,",
			"like you get a 404, for example.",
			"So we want, ultimately, for the readyState to be 4,",
			"and the status to be 200.",
			"When that's the case, we can then update our site.",
			"Once we have that, we just need to open the request and send the request.",
			"And then, our site will refresh.",
			"Again, we're going to see a very concrete example",
			"of this in just a minute.",
			"So if it doesn't make sense just now, hopefully, it",
			"will when we start to see some code, and you",
			"see how that interaction takes place for real on a website.",
			"There is, I want to point out again, a very slightly different way",
			"to do this syntactically using jQuery.",
			"And, in fact, you will very commonly see nowadays",
			"Ajax requests made using jQuery.",
			"We're explicitly showing you the pure JavaScript version of this",
			"just so you see it.",
			"But as you become more comfortable using jQuery for client-side scripting,",
			"for example, for using DOM manipulation or for Ajax request,",
			"you'll probably see the syntax of this slightly differently.",
			"So here is a JavaScript function that is preparing, opening,",
			"and sending an Ajax request.",
			"So the first thing I would do is I'd create my new XMLHttpRequest,",
			"and I'm going to, again, assigned to a random variable,",
			"this time called aj for Ajax.",
			"Then, I'm going to define a function that is going",
			"to execute on the readyState changing.",
			"So every time the readyState changes, this function will execute.",
			"But as you can see, it's only really going",
			"to do something, eventually, once the readyState is 4, and the status is 200.",
			"So it's going to--",
			"this function will get executed every time the state changes,",
			"but it's only going to have a meaningful thing to do once the readyState is 4,",
			"and the status is 200.",
			"And we'll see a concrete example of that in a second",
			"where we're going to be updating a section of our site",
			"with different photos and information.",
			"Once that is done, we're then going to open our XML requests or Ajax request.",
			"This is just a simple way to do this.",
			"We're basically creating a GET request of a particular URL.",
			"Don't worry about what the true means.",
			"And then, we're just going to send that request.",
			"So, again, you'll usually see this written in jQuery, instead of",
			"in pure JavaScript.",
			"So if you want to learn a little bit about how to do that,",
			"you can take a look at this URL here.",
			"But for now, let's head into the IDE and see this example in action,",
			"making Ajax requests of a server, where the server",
			"happens to be running locally on my machine,",
			"to see how we can change a page asynchronously.",
			"So if you download the source code that comes with this short",
			"and you open up the index.html within there,",
			"you'll find a page that looks like this called Ajax test.",
			"There's a dropdown menu in the section that says Information Goes Here.",
			"We'll see what that means in a second.",
			"I'm not going to tinker with that yet.",
			"I want to show you what's behind the scenes before we take a look.",
			"So here is the source code for that.",
			"At the top here, I'm just loading a couple",
			"of [? scripts. ?] I'm loading jQuery because I",
			"will use a little bit of jQuery in this as well just",
			"to give you a little taste of it.",
			"I have my own JavaScript scripts that I wrote called Ajax.js we're",
			"going to take a look at just a second.",
			"You'll see that the information goes here",
			"that we were just looking at on the site is in a div whose ID is infodiv.",
			"That will be really important in just a minute.",
			"And then I have a form where I have a couple of different options.",
			"And when something happens, particularly when the value changes,",
			"when I select a different options from the list,",
			"I'm going to call this function, cs50info",
			"and then I pass in the parameter this.value.",
			"You may recall from our video on JavaScript",
			"that this is a way to self-refer to the event that",
			"triggered the JavaScript function being called in the first place.",
			"So this is another form of an event handler as opposed to on click,",
			"it's on change.",
			"And what this is going to do is it's going",
			"to allow me to figure out which one of the options triggered the change.",
			"And I'm going to capture this.value, so this is what I mean with value,",
			"is I'm going to get this piece of information.",
			"So if I choose Rob Bowden from this list,",
			"basically, I'm passing in CS50 info.",
			"And then, the value that actually gets passed into that function is bowden.",
			"They're all in lowercase-- chan, [? mailand, ?] and [? zaclova. ?] So",
			"those are the different things that will be passed into that CS50 info function.",
			"What does that CS50 info function do?",
			"Well, let's take a look at Ajax.js.",
			"Here's CS50 info, if the name is empty, so if I didn't choose one of the actual",
			"options, if I just choose the default option at the top--",
			"you might be familiar with this from using dropdowns,",
			"where there's a blank thing and you have to actually pick something--",
			"I return.",
			"I don't do anything.",
			"I don't want to try and do anything fancy.",
			"Otherwise, I create an XMLHttpRequest.",
			"We just saw this in the slides a moment ago.",
			"And I define a function that is going to wait for the readyState to be 4,",
			"and the status to be 200.",
			"And when it does, when it's there, what do I want to do?",
			"I want to update the HTML inside of the infodiv.",
			"This is the jQuery way to describe this.",
			"This is the line of jQuery that you're going to see in this--",
			"the rest of it is JavaScript, this is jQuery--",
			"to whatever I get back from my Ajax request.",
			"Remember, I haven't made the Ajax request entirely just yet.",
			"That's going to be right down here with the open and send.",
			"But when I do, I'm going to get data back,",
			"and I'm going to update whatever the HTML of infodiv, which at the beginning",
			"was information goes here-- that was what was in between the div tags.",
			"I'm going to to change that to whatever I get back in my request.",
			"But I'm going to do it without updating the entire page.",
			"I'm going to refresh, so to speak, just that div,",
			"just that section of the page.",
			"So what file am I opening?",
			"Well, I'm sending a GET request for name plus .HTML.",
			"Remember, that name is just the name of the value, the variable that's",
			"being passed in as a parameter here.",
			"So that's what name is.",
			"So name is going to be bowden or chan, [? mailand, ?] or [? zaclova. ?] And",
			"apparently, I'm going to add .HTML at the end of it.",
			"Well, what does one of these look like?",
			"Well, it looks like just kind of a snippet of HTML.",
			"It's clearly not entirely correct HTML because I don't have",
			"HTML tags on the top and bottom of it.",
			"I don't have body tags around it.",
			"But it's some little bit of HTML.",
			"It has a paragraph with a name, an image tag,",
			"and a couple of other paragraphs with some information.",
			"So let's see this actually in action and see what it does.",
			"So right now, I have Ajax tests.",
			"And remember, when I choose an option, that function",
			"is going to execute that CS50 info function passing in whatever one",
			"I choose.",
			"So let's choose Zamyla.",
			"So notice what it did here.",
			"It popped in all of that information from our page.",
			"There's that Zamyla tag.",
			"So I'll pop back to the ID for a second.",
			"We have a paragraph with her name, an image, class of 2014,",
			"and Winthrop House.",
			"Indeed, all of that information is now here.",
			"But what happens if I change it?",
			"I don't want my entire page to refresh, but I do",
			"want the content of that div to change.",
			"So let's try and switch it to, for example, Rob.",
			"And if you look really carefully, and depending",
			"on if my computer is a little bit slower or faster,",
			"you might quickly see all of the content get deleted and then replaced.",
			"That is the asynchronous request happening very quickly.",
			"So let's see if we can see it.",
			"You might have noticed right there that everything deleted and then everything",
			"came back, but now, I have new data because I",
			"chose a new option from the list.",
			"Remember if I choose Select Someone, nothing happens.",
			"I returned immediately, so it doesn't go back",
			"to information goes here, although I could have written",
			"the function differently to do that.",
			"But I can just make these different asynchronous requests,",
			"and it's going to keep updating the information that I see on the page",
			"without refreshing the entire page, just the section that I care about.",
			"So this is pretty cool.",
			"Now, we can, not only change things locally",
			"on our machine, simple things like colors,",
			"but we can also now send outbound requests to servers.",
			"And they don't even have to be servers that are running locally.",
			"I could be maybe sourcing information from Yahoo Finance",
			"if I want to pull data from Yahoo Finance asynchronously.",
			"Maybe I'll do that and load that into my page",
			"and have that be some information that constantly",
			"gets updated because maybe I have a different way of displaying the data",
			"or something.",
			"So it's an interesting new strategy that we have at our disposal.",
			"We can send requests locally.",
			"We can send requests outbound to other servers",
			"and really take advantage of creating a better user experience using Ajax.",
			"I'm Doug Lloyd.",
			"This is CS50.",
			""
		],
		"is_youtube": false
	},
	"video_049": {
		"section": "CS50x 2021",
		"subsection": "Artificial Intelligence",
		"unit": "Lecture",
		"video_sources": [
			"https://edx-video.net/08b3a4ea-ccba-4e32-8e57-01b0d2c8b5b4.m3u8",
			"https://edx-video.net/08b3a4ea-ccba-4e32-8e57-01b0d2c8b5b4-mp4_720p.mp4"
		],
		"video_duration": 4353,
		"speech_period": [
			2.475, 47.33, 3.165, 3.48, 2.65, 3.89, 3.75, 3.24, 3.18, 3.9, 3.39, 2.88,
			2.417, 3.883, 2.34, 2.13, 2.61, 3.57, 2.425, 1.125, 1.125, 2.825, 3.18,
			2.22, 2.28, 2.34, 1.69, 3.745, 2.125, 1.8, 3.22, 2.48, 3.0, 4.14, 1.98,
			3.24, 1.98, 2.31, 2.17, 2.34, 2.42, 3.16, 2.99, 3.39, 2.31, 3.93, 2.97,
			1.29, 2.55, 2.61, 3.97, 3.41, 3.66, 3.12, 3.09, 2.91, 2.67, 3.6, 1.95,
			4.62, 1.8, 3.12, 2.46, 3.6, 3.42, 3.88, 3.11, 2.13, 3.51, 1.65, 3.63,
			2.85, 2.55, 2.19, 3.578, 2.542, 2.8, 3.89, 4.05, 3.69, 3.96, 2.25, 4.17,
			3.18, 1.95, 2.34, 5.19, 4.05, 2.08, 2.375, 2.745, 2.37, 3.39, 3.93, 3.84,
			3.0, 3.457, 2.333, 1.92, 3.39, 2.61, 3.69, 3.09, 2.76, 2.19, 2.4, 1.86,
			2.16, 1.77, 3.99, 2.79, 3.812, 1.708, 3.882, 2.958, 1.05, 2.82, 3.06, 4.8,
			3.78, 3.03, 2.97, 4.04, 3.13, 3.78, 2.97, 2.56, 3.62, 2.11, 2.93, 2.22,
			2.73, 3.63, 3.45, 2.28, 2.97, 3.04, 2.24, 1.972, 2.208, 2.202, 1.958,
			3.18, 3.13, 2.6, 3.24, 4.018, 2.792, 2.16, 3.12, 3.15, 3.69, 3.49, 2.09,
			2.4, 3.31, 2.7, 2.22, 3.8, 1.44, 4.919, 3.698, 1.583, 1.86, 4.2, 3.64,
			4.17, 3.02, 3.54, 3.24, 1.613, 0.667, 0.96, 2.708, 2.272, 4.343, 2.167,
			2.61, 2.52, 4.352, 2.458, 2.875, 3.545, 2.67, 3.12, 3.36, 2.31, 3.51,
			3.08, 0.96, 4.058, 1.292, 1.68, 1.605, 2.875, 1.792, 2.968, 1.14, 3.84,
			3.07, 3.62, 2.46, 2.1, 3.57, 2.328, 2.542, 4.1, 1.92, 2.16, 2.79, 1.765,
			2.375, 2.97, 2.72, 2.5, 1.77, 2.22, 2.97, 2.46, 3.57, 2.52, 2.01, 1.86,
			4.62, 2.91, 2.34, 1.8, 2.52, 2.76, 3.24, 2.08, 2.84, 3.622, 2.708, 3.36,
			1.77, 4.05, 2.28, 3.63, 3.81, 3.81, 2.145, 1.875, 3.37, 2.568, 1.542,
			1.92, 3.39, 2.13, 3.18, 4.53, 1.63, 2.57, 3.44, 1.75, 3.58, 2.61, 3.02,
			2.22, 4.08, 2.38, 4.25, 3.0, 3.96, 3.57, 5.28, 2.25, 3.39, 4.56, 2.04,
			3.63, 3.84, 2.7, 3.51, 5.01, 4.19, 3.25, 4.01, 1.75, 3.39, 1.247, 1.333,
			2.76, 2.79, 1.95, 5.19, 3.03, 2.85, 3.06, 3.75, 4.175, 0.625, 1.21, 3.59,
			1.51, 2.3, 2.235, 1.875, 3.3, 2.1, 2.49, 2.53, 3.59, 2.97, 3.45, 3.3,
			3.27, 4.31, 2.32, 4.74, 2.64, 3.287, 1.333, 2.367, 1.833, 3.81, 3.48,
			3.66, 1.77, 3.06, 3.39, 3.03, 1.53, 3.93, 2.7, 4.47, 3.9, 2.28, 3.12,
			1.14, 2.665, 3.125, 1.02, 2.125, 2.345, 4.41, 2.1, 2.73, 4.227, 1.833,
			1.96, 2.66, 4.5, 2.46, 2.609, 2.76, 3.72, 3.061, 3.419, 3.251, 3.14, 3.39,
			2.49, 2.1, 3.75, 3.27, 2.79, 3.51, 2.97, 3.42, 1.83, 1.95, 1.908, 3.042,
			1.65, 1.875, 2.055, 3.03, 3.48, 1.23, 5.76, 1.98, 3.27, 3.33, 1.71, 2.61,
			3.76, 0.5, 4.32, 1.99, 3.68, 2.7, 4.11, 2.118, 1.542, 3.78, 3.54, 3.6,
			2.34, 3.99, 1.36, 2.03, 3.18, 2.4, 1.333, 3.257, 1.89, 1.29, 2.01, 3.91,
			2.93, 2.04, 4.02, 2.327, 2.083, 2.94, 3.69, 3.39, 3.84, 3.68, 1.02, 1.62,
			2.82, 3.45, 1.982, 3.208, 3.36, 2.67, 2.04, 4.29, 3.997, 2.333, 3.81,
			4.23, 2.43, 2.25, 2.82, 3.51, 2.543, 2.167, 2.43, 3.09, 2.82, 3.42, 3.78,
			4.17, 3.14, 2.61, 1.89, 3.48, 2.34, 3.88, 0.985, 0.625, 2.34, 2.607,
			2.583, 3.295, 3.125, 2.28, 2.76, 2.1, 1.9, 3.47, 1.693, 2.417, 1.39, 3.98,
			2.61, 3.27, 2.49, 2.97, 2.01, 3.09, 3.42, 2.04, 1.65, 2.23, 2.99, 3.87,
			3.16, 2.25, 2.27, 2.88, 4.23, 3.03, 4.2, 1.95, 2.61, 4.0, 0.5, 2.94, 3.3,
			0.93, 2.583, 1.115, 1.792, 1.92, 2.73, 2.34, 3.45, 3.36, 3.4, 2.84, 1.625,
			2.792, 1.233, 1.8, 2.21, 4.24, 2.75, 3.27, 2.765, 2.125, 3.42, 3.78, 1.32,
			4.32, 1.5, 3.0, 1.32, 1.72, 1.52, 2.55, 2.94, 2.37, 1.8, 3.85, 3.17, 1.37,
			3.25, 0.91, 1.71, 2.553, 3.167, 1.21, 2.737, 2.833, 1.5, 2.808, 2.292,
			6.49, 2.27, 2.76, 4.03, 1.13, 3.15, 3.472, 1.958, 4.95, 2.1, 3.28, 4.28,
			1.98, 4.2, 2.25, 1.44, 2.67, 1.833, 1.709, 1.888, 3.82, 3.09, 2.82, 4.02,
			4.62, 2.64, 2.85, 2.46, 1.405, 3.125, 2.67, 2.07, 2.1, 3.94, 3.705, 2.375,
			2.74, 3.2, 2.55, 3.69, 2.25, 1.89, 4.055, 2.125, 2.43, 4.077, 1.833, 3.45,
			2.17, 3.62, 2.16, 3.03, 3.0, 1.32, 3.45, 2.25, 2.667, 2.103, 2.093, 2.917,
			3.27, 3.0, 2.89, 2.0, 4.09, 3.698, 2.292, 3.25, 2.99, 2.73, 2.73, 3.93,
			2.58, 3.24, 3.668, 1.792, 2.85, 2.71, 2.34, 2.33, 2.37, 2.13, 2.77, 1.59,
			2.42, 1.8, 2.893, 1.917, 2.542, 3.418, 2.09, 4.63, 1.62, 2.61, 5.25, 1.26,
			1.8, 3.27, 4.65, 4.86, 2.11, 2.36, 4.6, 3.86, 3.72, 4.05, 2.7, 3.78,
			2.877, 1.833, 4.29, 2.85, 2.19, 3.24, 2.73, 1.958, 2.842, 2.82, 3.99,
			3.99, 4.08, 1.19, 1.75, 3.39, 2.67, 3.38, 2.88, 5.1, 1.11, 4.5, 2.757,
			1.833, 3.03, 3.42, 3.18, 3.37, 2.84, 5.2, 2.3, 2.16, 2.61, 3.48, 4.29,
			4.3, 2.99, 2.82, 3.27, 2.88, 6.18, 3.21, 2.31, 3.33, 1.21, 2.75, 2.73,
			1.95, 3.6, 3.36, 4.11, 2.928, 2.292, 2.73, 2.34, 4.56, 2.02, 3.26, 1.86,
			2.03, 2.542, 1.005, 1.833, 2.418, 1.542, 1.62, 2.82, 3.228, 1.542, 3.639,
			3.56, 2.131, 3.55, 3.83, 3.69, 0.97, 3.92, 3.33, 3.869, 1.661, 2.75, 1.63,
			3.689, 4.011, 3.75, 3.36, 4.59, 1.93, 3.41, 3.81, 2.065, 1.625, 2.55,
			4.59, 2.49, 1.667, 2.083, 1.71, 2.76, 1.84, 2.57, 2.28, 3.06, 2.537,
			2.083, 1.458, 2.682, 2.4, 3.27, 4.95, 1.36, 4.13, 2.4, 2.4, 2.64, 2.88,
			3.9, 2.56, 3.03, 3.96, 3.87, 1.95, 4.52, 3.61, 4.71, 2.19, 3.57, 1.86,
			3.36, 3.46, 2.72, 3.24, 3.42, 2.04, 1.98, 2.02, 4.1, 2.34, 2.22, 2.34,
			3.96, 2.73, 2.37, 3.21, 2.31, 3.06, 3.3, 3.66, 4.02, 2.22, 4.35, 2.04,
			1.92, 3.06, 1.07, 3.28, 2.28, 3.385, 2.375, 2.25, 2.73, 4.35, 4.86, 2.77,
			2.96, 2.43, 2.13, 4.26, 2.52, 3.09, 3.09, 5.64, 2.67, 3.12, 3.69, 2.52,
			2.55, 3.82, 3.14, 3.72, 3.03, 5.46, 2.002, 1.958, 3.48, 3.66, 3.84, 1.45,
			4.67, 2.19, 3.81, 3.0, 4.83, 3.31, 3.41, 4.48, 1.95, 2.54, 2.265, 1.875,
			3.78, 3.18, 4.2, 4.29, 6.01, 2.93, 3.78, 4.86, 4.23, 5.08, 3.11, 3.313,
			2.417, 3.49, 2.96, 4.2, 1.88, 2.31, 1.65, 4.83, 3.3, 2.31, 2.46, 3.69,
			4.45, 2.48, 2.64, 3.24, 3.418, 2.792, 3.63, 1.282, 1.958, 2.01, 3.072,
			2.208, 2.58, 3.75, 2.32, 2.167, 1.843, 2.34, 4.005, 1.875, 3.45, 1.05,
			2.58, 1.805, 2.125, 2.67, 4.44, 3.15, 2.49, 2.13, 3.99, 2.16, 2.74, 2.0,
			2.7, 2.22, 3.508, 1.792, 1.39, 3.44, 2.0, 4.47, 1.75, 3.6, 1.98, 2.79,
			2.95, 2.75, 1.272, 2.958, 2.01, 2.13, 2.97, 2.64, 2.67, 3.57, 3.0, 4.08,
			4.68, 1.84, 3.11, 2.768, 1.792, 3.78, 2.22, 3.03, 1.62, 3.15, 3.39, 1.68,
			2.133, 1.917, 3.45, 2.83, 2.33, 1.89, 2.07, 3.06, 3.15, 2.86, 2.18, 2.37,
			2.51, 1.75, 3.54, 1.8, 3.39, 3.69, 4.08, 2.55, 2.19, 3.158, 2.042, 1.91,
			3.93, 4.02, 2.1, 4.32, 3.45, 3.345, 1.875, 2.7, 1.65, 2.82, 3.51, 2.34,
			3.587, 2.083, 2.07, 2.46, 2.56, 2.15, 1.333, 3.467, 1.84, 3.68, 3.22, 2.0,
			4.62, 3.01, 4.97, 2.55, 2.988, 0.792, 2.07, 6.46, 1.545, 2.375, 2.52, 2.1,
			3.12, 2.95, 3.71, 2.13, 2.34, 1.86, 2.5, 5.653, 1.417, 4.14, 1.14, 2.46,
			4.38, 2.91, 2.79, 2.88, 2.25, 3.93, 2.55, 4.22, 1.81, 2.135, 2.335, 3.68,
			3.87, 4.2, 3.93, 3.39, 3.01, 3.11, 4.08, 2.16, 3.3, 2.778, 3.042, 1.53,
			2.43, 3.0, 3.21, 1.92, 1.98, 2.34, 5.05, 2.48, 3.27, 3.15, 2.93, 2.17,
			2.31, 3.24, 2.28, 0.5, 1.73, 3.05, 2.37, 3.507, 2.583, 4.68, 1.14, 3.63,
			1.74, 4.5, 2.85, 2.67, 2.34, 3.43, 3.03, 3.74, 3.45, 1.68, 2.31, 2.04,
			2.64, 2.43, 2.34, 1.47, 2.862, 2.208, 1.34, 3.337, 1.333, 3.083, 2.257,
			9.3, 1.05, 4.35, 3.97, 2.42, 3.57, 2.675, 2.875, 2.91, 3.69, 3.295, 3.065,
			6.13, 2.67, 3.6, 2.22, 4.53, 2.58, 2.55, 2.59, 3.98, 2.49, 4.17, 1.84,
			2.66, 5.37, 2.19, 4.17, 1.93, 3.05, 3.37, 2.03, 2.88, 2.49, 3.15, 2.642,
			2.708, 3.59, 4.14, 2.535, 1.875, 3.3, 3.81, 3.36, 4.717, 2.333, 2.23,
			3.42, 3.86, 2.82, 4.38, 4.11, 2.79, 3.78, 2.79, 2.19, 4.44, 4.32, 2.22,
			2.7, 2.79, 2.02, 4.49, 2.94, 4.11, 1.748, 1.792, 2.61, 2.508, 1.792,
			4.228, 1.792, 3.167, 1.958, 1.355, 4.02, 2.25, 3.06, 1.06, 3.18, 2.84,
			2.46, 4.17, 2.4, 3.36, 4.35, 1.92, 2.25, 3.45, 3.33, 3.25, 2.24, 3.87,
			1.63, 4.01, 4.245, 2.125, 1.917, 3.633, 3.3, 1.97, 3.84, 3.45, 4.012,
			2.708, 3.09, 2.49, 4.7, 2.045, 2.125, 1.8, 2.02, 4.91, 3.06, 3.69, 1.86,
			3.96, 4.02, 2.14, 1.55, 5.28, 6.81, 2.94, 3.27, 1.65, 2.73, 3.0, 2.703,
			1.917, 3.75, 1.53, 1.838, 2.542, 2.73, 4.39, 1.7, 7.8, 6.24, 3.033, 3.167,
			0.9, 2.49, 2.26, 3.5, 2.61, 3.27, 1.38, 2.97, 2.19, 2.04, 1.65, 3.3, 1.86,
			2.97, 4.01, 0.5, 2.63, 3.15, 0.855, 2.715, 1.88, 4.37, 4.65, 4.35, 2.82,
			1.9, 3.01, 3.34, 2.61, 2.13, 1.56, 2.13, 1.83, 3.36, 1.57, 2.85, 3.023,
			0.917, 1.003, 2.667, 3.54, 2.882, 2.458, 2.7, 2.49, 2.21, 2.5, 3.96, 2.19,
			2.31, 1.92, 4.11, 3.6, 3.3, 2.68, 1.86, 5.18, 3.088, 2.042, 3.4, 3.98,
			4.29, 3.21, 3.24, 2.73, 3.927, 2.583, 1.708, 2.352, 1.25, 2.55, 1.83,
			2.417, 2.648, 1.875, 3.93, 3.74, 1.65, 3.3, 3.33, 2.55, 3.42, 2.58, 2.74,
			4.01, 3.21, 3.84, 2.94, 3.15, 3.03, 3.48, 3.6, 2.4, 3.78, 4.77, 3.09,
			2.01, 4.17, 1.23, 3.06, 2.88, 3.72, 2.64, 1.92, 3.18, 3.84, 1.49, 2.92,
			2.1, 5.01, 3.39, 3.39, 2.94, 2.8, 3.95, 3.27, 3.48, 3.0, 3.54, 3.36, 1.8,
			3.88, 2.883, 2.417, 3.45, 4.41, 2.61, 2.37, 2.91, 3.81, 3.24, 3.06, 2.13,
			2.55, 3.09, 2.88, 3.07, 2.72, 1.86, 2.875, 2.985, 3.08, 2.67, 1.35, 3.81,
			3.31, 2.75, 2.26, 3.02, 2.79, 3.61, 3.71, 2.4, 2.25, 3.03, 3.09, 2.4,
			2.56, 3.89, 3.46, 2.39, 1.62, 2.408, 1.792, 2.583, 4.587, 1.53, 4.65,
			1.14, 2.94, 3.48, 2.842, 1.958, 3.57, 2.69, 3.89, 3.35, 2.25, 3.09, 1.47,
			3.96, 1.63, 3.14, 2.88, 2.01, 4.05, 3.45, 3.58, 3.47, 1.47, 2.94, 4.0,
			2.51, 3.49, 2.0, 1.417, 1.253, 3.21, 4.89, 2.25, 2.52, 1.5, 2.88, 1.92,
			4.83, 2.67, 2.28, 2.489, 3.54, 3.241, 3.48, 4.76, 0.99, 1.93, 2.309,
			3.216, 1.875, 3.975, 2.805, 4.603, 3.167, 2.52, 2.16, 4.09, 2.697, 2.333,
			3.15, 3.51, 3.12, 2.79, 1.92, 2.975, 2.125, 2.1, 2.665, 2.375, 4.05, 0.54,
			2.34, 3.96, 2.55, 1.745, 2.125, 3.51, 5.508, 2.292, 1.71, 2.77, 1.833,
			3.197, 3.57, 2.31, 3.69, 3.42, 3.69, 4.08, 2.61, 2.85, 2.49, 2.79, 4.2,
			2.75, 57.35
		],
		"transcript_en": [
			"[MUSIC PLAYING]",
			"",
			"DAVID MALAN: This is CS50, Harvard University's introduction",
			"to the intellectual enterprises of computer science--",
			"over here, computer science.",
			"So today we are joined by CS50's own Brian Yu.",
			"This is an unusual week, a look at artificial intelligence or AI.",
			"You might recall that some weeks ago when we first introduced Python,",
			"we talked about writing programs that answered you",
			"by saying hello if you said hello, or by saying goodbye if you said goodbye.",
			"But those programs were all implemented with if conditions and else ifs",
			"and else ifs and so that really wasn't artificial intelligence.",
			"If you wanted to have a whole conversation with a computer",
			"program like that, that would be a huge number of ifs and else ifs just",
			"to anticipate all of the things the human might say.",
			"So we can do better, and indeed humans have",
			"been doing better in this field of artificial intelligence.",
			"And I'm so pleased to say that Brian is here to lead us along that way.",
			"Now, CS50's own, Brian Yu.",
			"BRIAN YU: Thanks very much.",
			"Welcome, everyone, to CS50.",
			"And today as David alluded to, the topic of discussion",
			"is artificial intelligence, which is all about taking our computers",
			"and trying to make them intelligent somehow,",
			"trying to get them to be able to act in a way",
			"that's somewhat rational, somewhat human and that",
			"could take a number of different forms.",
			"One example of artificial intelligence, for example, might be game play.",
			"You might be familiar with the game of tic-tac-toe,",
			"where you've got this three by three grid",
			"and X and O take turns trying to get three in a row.",
			"And if, for example X started the game and played",
			"in the middle square of this grid and then it was O's turn",
			"and O played in the top, it turns out that at this point in the game",
			"X has a very strategic move.",
			"And a human that's very good at the game or a computer that can maybe",
			"try and figure out how to play this game well,",
			"might make an intelligent move like playing",
			"in the top right corner for example.",
			"And if X plays in the top right corner, well then",
			"O is going to need to play in the bottom left corner",
			"in order to block X from getting three in a row.",
			"And here maybe you can see one of a couple of possible good moves",
			"that X has now, but X could play a move like moving",
			"in the right square over there.",
			"And now O is in a tricky position, X has one way that could potentially",
			"win the game horizontally, and another way they could potentially",
			"win the game vertically.",
			"And so O is going to have to block one of those ways,",
			"and maybe they go to block horizontally but then",
			"X is going to win no matter what just by playing in that bottom right corner.",
			"And so a human playing this game could reason through the game thinking",
			"about how the opponent might respond and how X would respond in turn",
			"and a computer might try to do the same thing for a game as simple",
			"as tic-tac-toe or a game even more complex.",
			"But AI goes beyond just game plan, you might see examples",
			"like handwriting recognition, where nowadays computers",
			"are pretty good at taking human handwritten text, which can be messy,",
			"which is different from person to person,",
			"and somehow figuring out with pretty high accuracy exactly what characters",
			"the human was actually writing.",
			"AI comes up in areas like spam detection.",
			"Maybe in your email inbox you have your inbox",
			"and your spam email usually gets sorted into a separate folder",
			"where you might get a whole bunch of emails coming into your email inbox",
			"and somehow your computer is able to figure out with reasonable accuracy,",
			"which emails are good and which emails are spam.",
			"Now of course, the computer is not perfect at this.",
			"There are false positives, where the computer thinks that an email might",
			"be spam when it isn't actually.",
			"And there are false negatives too, where a spam email might accidentally",
			"end up in your inbox because the computer doesn't catch it,",
			"but those sorts of false positives and false negatives",
			"are the types of things that AI researchers are",
			"working on trying to reduce to make these systems more and more accurate.",
			"You see these kinds of systems show up as well if you've ever",
			"been on a video watching website, like YouTube or Netflix,",
			"for example, where you have watched a whole bunch of videos or TV shows",
			"or movies and then software behind Netflix or behind YouTube",
			"is able to give you recommendations, suggest other videos that you",
			"might be interested in watching based on the things that you've watched already.",
			"And in more recent years, AI has gotten pretty good",
			"at doing even more sophisticated things, things like generating data.",
			"Take a look at these two images, for example, of people",
			"and see if you notice anything strange.",
			"See if either of these people look strange to you.",
			"In fact, can you figure out which of these two images is not a real person?",
			"That is to say, a computer-generated person that looks like it's human",
			"but is not actually a photo of a real person.",
			"So you can look at these two images carefully, maybe look",
			"at the eyes and the hair and the mouth and the nose",
			"and see if you can figure out which one it is.",
			"It turns out neither of these two images are images of real people.",
			"They're both computer generated, not photos of real people but a computer",
			"has been trained to generate images of people that look like real people that",
			"could fool someone into thinking that it's a real person,",
			"but it's all just AI generated information.",
			"So today we'll take a look at all of those ideas, how it",
			"is that artificial intelligence works.",
			"And ultimately one of the big takeaways is that AI is not just",
			"one algorithm or one principle, it's really",
			"a collection, a category of approaches to problem solving that can all",
			"be used to try and solve some of these problems of trying",
			"to make computers intelligent.",
			"So let's begin with one of the first areas",
			"where we might want to make our AI work and that's",
			"in the area of decision making.",
			"Very frequently we want to train a computer",
			"to be able to make a decision well.",
			"That decision might be deciding if an email is spam or not spam,",
			"or deciding whether or not to recommend a video to you,",
			"or it could be deciding what action to take in a game, for example.",
			"So let's take a simple game, maybe you've",
			"played a game like this before where you control this paddle along the bottom",
			"and you're trying to bounce this ball in order to hit all of the bricks",
			"along the top.",
			"Imagine if you were trying to program a computer",
			"to be able to play this game strategically, to play this game well",
			"and the computer observed the ball move that way.",
			"So the ball is moving that way, what should you program the computer to do?",
			"Well, it makes logical sense that if the ball's moving to the left, then",
			"you should program the computer to move the paddle to the left as well,",
			"to try and catch that ball before it falls through the ground.",
			"And so you could take that kind of logic and encode it",
			"into a computer program using what we might call a decision tree.",
			"Decision trees are just a way of representing a decision",
			"that a computer might make by asking questions",
			"and depending on the answers to those questions we might ask another question",
			"or make some sort of decision.",
			"So for this game of the paddle, we could create a decision tree",
			"by asking a question like this, we could ask,",
			"is the ball to the left of the paddle?",
			"If the answer to that question is yes, well then the action we should take",
			"is we should move the paddle to the left because the ball is moving left,",
			"the paddle should move left as well.",
			"If the answer to the question is no, well then we",
			"need to maybe ask another question, we might ask a question like,",
			"is the ball to the right of the paddle?",
			"And if the answer to that question is yes,",
			"then we'll go ahead and move the paddle to the right.",
			"And if the answer to the question is no, well that",
			"means the ball is not to the left of the paddle",
			"and it's not to the right of the paddle, so we may as well just not",
			"move the paddle at all in that case.",
			"So this again is that decision tree that can",
			"allow us to make these choices about what it is that our AI should",
			"do in this situation and we could take that decision tree and turn it",
			"into a kind of pseudocode, something that might look like something",
			"you would write in C or in Python.",
			"I might say while the game is ongoing, if the ball is",
			"to the left of the paddle, go ahead and move the paddle to the left.",
			"Else if the ball is to the right of the paddle, move the paddle to the right.",
			"And else if neither of those are true, then don't move the paddle at all.",
			"So one of the advantages of this decision tree",
			"is that it translates quite nicely to the conditions",
			"that you're familiar with from the world of programming.",
			"So let's give this a try with something a little more complex.",
			"Let's take the game of tic-tac-toe for example.",
			"And imagine you were trying to program an AI to strategically play",
			"the game of tic-tac-toe.",
			"What questions might you ask in your decision tree, what yes or no questions",
			"might you want to ask to create an AI that can play this game well,",
			"that can play this game strategically?",
			"And maybe I'll take a volunteer if anyone",
			"wants to suggest one possible question I might want to ask of my AI",
			"as I'm trying to teach this AI how to play this game?",
			"Any thoughts for questions that I might ask in this situation?",
			"And let's go to--",
			"let's see, let's try [? Vasily ?] if you have an idea?",
			"AUDIENCE: Maybe let's ask what is the probability",
			"of winning given a certain move?",
			"BRIAN YU: Great.",
			"And what would winning mean?",
			"How could you detect what it would mean to win, like what are you",
			"going to look for on the board?",
			"AUDIENCE: Three consecutive yeah, Xs or circles.",
			"BRIAN YU: Great, you're looking for some opportunity",
			"for like three consecutive Xs or three consecutive Os.",
			"So one of the questions you might ask is checking",
			"to see whether or not you could get three in a row maybe on the next turn.",
			"If you already have two in a row and there's an empty space",
			"that could be an opportunity for something that we might want to try.",
			"Any other questions we might want to ask as part of our strategic decision",
			"making if we're trying to play this game of tic-tac-toe,",
			"any thoughts about other things we could try,",
			"other types of things we should be looking for or asking",
			"as we're training our artificial intelligence, as we're",
			"trying to program it to play this game strategically?",
			"Let's go to Santiago, you have an idea?",
			"AUDIENCE: Hello, Brian.",
			"If there is any possibility to win, the other player?",
			"BRIAN YU: For the other player?",
			"Yeah, so you might want to check the other player to see",
			"if they have some possibility to win.",
			"And if they have some possibility to win you could try to block them.",
			"So those are great questions you could ask.",
			"And we could start to formulate a decision tree for tic-tac-toe",
			"based on those questions.",
			"I might start by asking, can I get three in a row on this turn?",
			"And if the answer is yes, well, then my action is pretty straightforward.",
			"I should play in the square that will get me to three in a row.",
			"If the answer to the question is no, well then I",
			"might ask Santiago's question, I might ask,",
			"can my opponent get three in a row on their next turn?",
			"And if the answer to that is yes, well then, we better",
			"play in the square to block them from getting three in a row,",
			"otherwise they're going to win the game if we don't block them now.",
			"If the answer to this question is no though,",
			"if I can't get three in a row in this turn",
			"and my opponent can't get three in a row in the next turn,",
			"well now it's a little bit less clear.",
			"You could maybe try and come up with additional questions",
			"you might ask but these two questions are very clear",
			"and the rest maybe a little bit less obvious but ultimately we",
			"don't want to be doing any of this as we're starting to make",
			"our AI more and more intelligent.",
			"As David was alluding to earlier, ultimately",
			"rather than us have to program every condition into the computer,",
			"telling it what to do in every situation,",
			"we'd like for the computer to be smart enough to just figure out on its own,",
			"analyze on its own all of the possibilities",
			"and figure out what move it should make.",
			"And ultimately we want our computer to make",
			"the optimal decision, the best possible decision when playing this game.",
			"And so to do so we can introduce our first algorithm",
			"in artificial intelligence that we'll look at today",
			"and that algorithm is called minimax.",
			"Minimax is a game playing algorithm that's",
			"useful any time you have two competing players that",
			"are trying to play some sort of competitive game like tic-tac-toe,",
			"but it'll work for other games as well.",
			"And ultimately as with we've seen all throughout CS50,",
			"we need some way of representing this game inside of the computer.",
			"And ultimately you'll recall way back from the beginning of CS50,",
			"we've been trying to take everything and represent it just with numbers",
			"and we can do the same thing with games.",
			"As far as our AI is concerned, there are only three possible outcomes",
			"of the game that our AI is going to care about,",
			"either O wins or X wins and X gets three in a row,",
			"or it's possible that neither side wins, that it ends up being a tie.",
			"And so what we're going to do is take each of these three possible outcomes",
			"and assign a number to each of those outcomes.",
			"We'll say O winning, we're just going to say,",
			"let's call that negative one, X winning, we'll call that one.",
			"And a tie, well that's somewhere in between the two.",
			"So we'll go ahead and call that zero.",
			"Nobody wins that game.",
			"And now each player has a goal, some objective that we",
			"can quantify using these numbers.",
			"The X player, who we might also call the max player,",
			"aims to maximize the score, what's best for X is a score of one,",
			"meaning X is going to win.",
			"But if X can't win, well then tying the game",
			"is zero, that's better than losing the game which is negative one.",
			"Meanwhile the O player we're going to call",
			"the min player, the minimizing player, their goal is to minimize the score.",
			"Negative one is the best outcome for the O player,",
			"but if negative one can't happen, if O can't win, well,",
			"then tying the game is still better than X",
			"winning because X winning would mean our minimizing player, player O,",
			"is ultimately going to lose the game.",
			"And so we can take every board in tic-tac-toe and assign a score to it,",
			"it's either one or zero or negative one.",
			"So this board for example, this game is over, X has already won the game",
			"and because X has won the game, we're going to give that a value of one.",
			"One corresponds to X winning, negative one to O winning, zero for a tie.",
			"So let's now consider this game board.",
			"This game board isn't over yet, but we can still assign a score to it.",
			"Let's assume that it's X's turn, what score would we give this board?",
			"Well, when we're giving each board a score,",
			"we're considering what would happen if both players were playing optimally.",
			"In other words, if both players are playing the best possible moves",
			"and in this case, if X is playing the best possible move,",
			"well then X is going to play in this square to get three in a row",
			"and so this board also has a value of one because if X plays their best move,",
			"ultimately X is going to win the game, that has a value of one.",
			"So let's take a look at another board, maybe one that's a little bit trickier.",
			"Now in this board let's assume it's O's turn, so O gets to make a move",
			"and then because there's one empty square,",
			"X will get to make a move after that, what value",
			"would you give to this board?",
			"Maybe we'll ask for a volunteer.",
			"Remember the possibilities are one if X is",
			"going to win, negative one if O is going to win,",
			"and a zero if it's going to be a tie.",
			"If both players play the best moves and it's O's turn right now,",
			"what value would you give to this board and why?",
			"Maybe let's go to Santiago, go ahead.",
			"AUDIENCE: Yeah, I would say that the value would be zero",
			"because if both players pay their best move no one in the end",
			"will win because O will block X and then there would be nothing left to do.",
			"BRIAN YU: Yeah.",
			"Absolutely correct.",
			"It's certainly possible that X could win because X has two in a row,",
			"they could get three in a row.",
			"But if both players play their best moves,",
			"well then O is going to block here and then",
			"X is going to play in the upper left and it's",
			"going to be a tie, which means this board is going to have a value of zero.",
			"And the way a computer might figure that out",
			"is by reasoning it through exactly the same way we did,",
			"by considering both of the possible options.",
			"If I want to know the value for this board where it's O's turn,",
			"well then I'm going to consider both of the possible options.",
			"O has two choices, O could play in the top left",
			"or O could block X by playing in the bottom there",
			"and the computer would consider both of those possible choices",
			"and try and figure out what value each of those boards has.",
			"So what happens if O plays in the top left?",
			"Well, then X is going to play in the bottom and X is going to win the game.",
			"X winning the game, that has a value of one,",
			"remember X winning, that's the value of one, which means this board also",
			"is going to have a value of one.",
			"So X wins, that's not great.",
			"So let's consider the other possible choice,",
			"O could also have blocked X by playing in the bottom here",
			"and in that case, that's going to lead to X playing in the upper left,",
			"it's the only other possible option, that board has a value of zero,",
			"it's a tie since nobody won.",
			"Which means this board also has a value of zero.",
			"And now the minimizing player is going to look at these two options.",
			"If I play in the top left, that's going to be a value of one,",
			"that's not good for me.",
			"If I play in the bottom, that's going to be a value of zero, so that's better.",
			"And so ultimately we can conclude that this board up",
			"top as Santiago correctly stated, is also going to have a value of zero.",
			"If both players play their best moves it's ultimately going to be a tie.",
			"And this is what we may call a game tree, where",
			"you're exploring all of the possible branches, all of the ways",
			"this game could go.",
			"And from here, we're two moves away from the end of the game.",
			"But you could back up and consider what would it look like three moves away",
			"from the end of the game.",
			"And you'd end up with a bigger tree because you now",
			"need to explore even more possibilities if you're",
			"trying to figure out what the value of any particular game board is.",
			"And so that's the way the minimax algorithm works,",
			"consider all of the possible moves you could make",
			"and then recursively in a sense, consider if I make my best move, what's",
			"my opponent going to do in response and then",
			"what could I do in response to that?",
			"And we could formulate that as a little bit of pseudocode",
			"by saying if the player is X, well then for all of the possible moves",
			"let's go ahead and calculate a score for that board.",
			"The same way we were just doing, by recursively following",
			"all the possible moves, let's get a score for that board",
			"and let's choose the move with the highest score.",
			"And otherwise, if the player is O, well, then we'll do the same thing.",
			"For all the possible moves, we'll calculate a score for that board,",
			"but then we'll choose the move with the lowest score.",
			"So the X player is picking the move that maximizes the score,",
			"the O player is picking the move that minimizes the score.",
			"And using this approach you can create an AI",
			"that can play a game like tic-tac-toe perfectly.",
			"It'll never lose the game if you've programmed it correctly.",
			"And this works not only for tic-tac-toe but for other games as well.",
			"But do you see any problems with this approach?",
			"This approach of considering all of my possible moves, then",
			"all of my opponent's possible responses to those moves, and then",
			"all of my possible responses to those moves recursively",
			"until we get down to the end of the game.",
			"Any possible problems that might arise?",
			"Let's go to Sophia maybe.",
			"AUDIENCE: It can take a really long time to like explore all the branches",
			"and actually come to a conclusion.",
			"BRIAN YU: Yeah, the amount of time it's going",
			"to take to explore all of those possible moves,",
			"it could be quite large depending on how complex the game is.",
			"For a game like tic-tac-toe, maybe think about how many possible games",
			"of tic-tac-toe there are.",
			"It turns out there are about 255,000 possible games of tic-tac-toe, which",
			"seems like a lot, but computers are pretty fast",
			"and computers can make it through all 255,000",
			"of these possible tic-tac-toe games usually in a matter of seconds",
			"on most modern computers.",
			"But if you imagine a game like chess for example,",
			"known for being a fairly complex game, how many possible games of chess",
			"are there?",
			"If there are 255,000 possible games of tic-tac-toe,",
			"how many possible games of chess are there?",
			"Well, it turns out that only after the first four moves,",
			"if you only look at the first four moves of chess,",
			"there are 288 billion possible chess games, which",
			"is a lot for any computer to try to deal with",
			"and that's only the first four moves.",
			"If you consider the entire game of chess, nobody knows the answer exactly,",
			"but people estimate that 10 to the 29,000",
			"is probably a lower bound on the number of possible chess games.",
			"The actual number is probably higher than that.",
			"That is far too many for any computer to be able to reasonably get through",
			"in any amount of time.",
			"Computers as they exist now are not going",
			"to be able to consider all of the possible moves going",
			"all the way to the end of the game in order to figure out",
			"what the score for any board is.",
			"Which is why a game like chess is much harder for an AI",
			"to play than a game like tic-tac-toe.",
			"But it's not impossible.",
			"And in fact, the best computer chess players",
			"are far better than the best human chess players at this point.",
			"So what could we do, what maybe improvement could we make",
			"or what change could we make to the algorithm",
			"so that our AI can still play a game like chess even though there",
			"are so many additional possible moves?",
			"There are a lot of possible answers but any ideas,",
			"anyone want to offer a thought or a suggestion",
			"as to how we might address this problem?",
			"They are so many moves to consider, too many for a computer",
			"to ever reasonably try to attempt.",
			"Any thoughts on something we could try?",
			"Let's go to, Kurt.",
			"Yeah, you have an idea?",
			"AUDIENCE: Yeah, just if there was some way along the way",
			"to maybe assign some point values where you could, below some threshold maybe",
			"you could like discard those paths?",
			"BRIAN YU: Yeah, we want some way to be able to more intelligently not explore",
			"all of the paths, but somehow like discard some of the paths",
			"or not consider some of them or stop ourselves somewhere.",
			"So that rather than consider all of the 10",
			"to the 29,000 possible games of chess, we just consider fewer of them.",
			"Exploring fewer possible games, exploring fewer possible levels",
			"and so there are many variants on the minimax algorithm.",
			"One of the most common being what's called depth-limited minimax, where",
			"in depth-limited minimax, we consider what's called an evaluation function.",
			"Rather than follow the game until the very end,",
			"we follow the game some number of moves.",
			"In chess maybe you're going 15, 16 moves, but not all the way",
			"to the end of the game and then you're just asking a question like all right,",
			"at this point in the game, who seems likely to win?",
			"Even if we're not going to calculate it all the way,",
			"you can maybe make some judgment by counting up",
			"how many pieces of what value each side happens to have.",
			"And you might come up with other strategies for different games.",
			"But this now is where we need to start being even more",
			"intelligent, to thinking about how can we come up with a good evaluation",
			"function that's able to take a complex game and estimate who",
			"is potentially likely to win.",
			"So that then is minimax, an example of an algorithm that",
			"can be used to play games.",
			"And I'll pause here for any questions about minimax or game",
			"playing artificial intelligence before we",
			"move on to an entirely different type of artificial intelligence.",
			"Yeah, Sophia, go ahead.",
			"AUDIENCE: Yeah.",
			"I just have a question, like this algorithm",
			"is kind of following like how you would think about the game,",
			"but are there any other algorithms that like don't necessarily",
			"look like step by step evaluations?",
			"BRIAN YU: Yeah, there are definitely other algorithms and other approaches.",
			"In fact, right now what we've given an example of",
			"is really just an example of an exhaustive search,",
			"searching for all of the possible different moves",
			"and then making a judgment based on that.",
			"We'll see some examples of more intelligent algorithms or algorithms",
			"that can learn later today in fact.",
			"And we'll take a look at some of those other possibilities",
			"and how we might apply them.",
			"And so this then is really an example of what we might call a search algorithm.",
			"A search algorithm is just a type of algorithm",
			"where we're looking for some solution or some answer.",
			"It could be looking for the best move to make in a game",
			"or you might imagine a search problem more abstractly of something",
			"like finding your way through a maze.",
			"You're trying to get from one point in a maze to another point in a maze",
			"and you have to make decisions about which way to turn and how to go.",
			"And the real world application of this might",
			"be something like driving directions.",
			"If you go into Google Maps for example.",
			"And you type where you are and where you're trying to get to,",
			"Google Maps pretty quickly can give you a fairly optimal route, some path",
			"to take which way to turn and when, when to make which decision, that",
			"will get you from one point to another.",
			"This is an example of a search problem, Google Maps",
			"needs to somehow search through all of the possible routes you",
			"can take to figure out how to get you to the place that you're going.",
			"And so we could come up with an algorithm for trying to do that.",
			"Imagine we have a maze like this, we're trying to get from point A to point B",
			"but of course, we have some walls here, these",
			"grayed out squares are walls that we can't cross through,",
			"but we'd still like to try and find some path that will get us from point A",
			"to point B.",
			"There are a number of algorithms that you might try.",
			"And you could think about if you were solving this maze as a person,",
			"how would you do this?",
			"How would you decide what decision to make, whether to go left",
			"or whether to go right?",
			"But as far as the computer is concerned, we",
			"need to give it a very precise algorithm.",
			"And one of the simplest algorithms we might come up with",
			"is one called depth-first search.",
			"And the way that depth-first search would navigate its way through a maze",
			"is to say, the AI is going to just follow a path",
			"and if ever the AI needs to make a choice, it reaches a fork in the road,",
			"so to speak, where it could go left, or it could go right,",
			"it's just going to choose one randomly.",
			"It doesn't know which way is better, so it's going to pick one path",
			"and it's going to try it.",
			"And if ever it hits a dead end, it reaches",
			"some wall where it can't make any more progress,",
			"then our AI is just going to back up and it's going to try another path instead.",
			"So I can show you what that looks like, we're starting at point A,",
			"we're trying to get to point B. And the way our AI might work",
			"is that we might start by just following one square after another.",
			"Initially, we don't have much choice in the matter,",
			"we haven't reached any branching points or any forks in the road.",
			"But at this point right here, now we have a decision, we could go left",
			"or we could go right.",
			"And as far as depth-first search, otherwise known as DFS is concerned,",
			"DFS doesn't know which way to go.",
			"It doesn't know whether to go left, it doesn't know whether to go right,",
			"so we pick one randomly.",
			"We might choose to go left for example.",
			"So we're going to go left and we're going to keep",
			"following the path until we get to another fork in the road.",
			"We could go left or right, DFS doesn't know which to pick,",
			"so we're going to choose randomly, maybe we'll go left",
			"and now we hit a dead end.",
			"At that point our algorithm knows this was not a good path to take.",
			"So it's going to back up to the latest decision point",
			"and make a different choice.",
			"So it's going to back up to right here and say, all right, I tried going left,",
			"it didn't work.",
			"Let's try going right instead.",
			"So it's going to go right, it'll hit a dead end,",
			"realize that OK, this was not a good path to take, it just led to dead ends,",
			"it didn't go anywhere.",
			"So instead of going left, let's try going right.",
			"So we'll try this path, maybe we'll try going up but hit a dead end,",
			"so we'll try going to the right.",
			"Here again, we hit a decision, we're going to make some choice.",
			"And again, we're just going to repeatedly hit dead ends",
			"and try new paths until eventually we make our way to the destination.",
			"And so that is depth-first search, and as long",
			"as there are like a finite number of squares,",
			"this algorithm is eventually going to find a path to the destination",
			"if such a path exists.",
			"Like if there is a way to get from point A to point B,",
			"then this algorithm will eventually find it because it tries something",
			"and if we reach a dead end then we try it again",
			"and we keep doing that until eventually we find our way to the destination.",
			"But this algorithm isn't great.",
			"There are certainly some problems, some maybe room for improvement.",
			"So maybe I'll ask all of you, what problems do you see with this approach?",
			"Maybe reasons why this algorithm might not",
			"be ideal, areas where we might be able to improve upon this algorithm",
			"as it stands right now?",
			"This again is depth-first search.",
			"Let's go to Joy.",
			"AUDIENCE: I think it is very time consuming.",
			"BRIAN YU: Yeah, it's very time consuming.",
			"And it's time consuming in a number of ways.",
			"In one sense, we're exploring a lot of paths that really don't lead anywhere",
			"in the sense that we explored all of this area",
			"but ultimately that didn't help us towards trying to find the goal.",
			"And it's also time consuming in the route that it ultimately finds,",
			"like if you imagine using Google Maps, for example, to navigate",
			"our way from one place to another, it's likely",
			"going to be the case that you want to find an efficient route,",
			"you want like the fastest way to get from where",
			"you are to where you want to go.",
			"And if Google Maps were to give you like a long and winding route with lots",
			"of detours that got you to the destination but took",
			"much longer than it needed to, that's probably",
			"not the best user experience for you.",
			"And depth-first search unfortunately could run into just that situation.",
			"Imagine a maze like this, where from point A, we could go up",
			"or we could go to the right, we don't know which to take,",
			"so depth-first search will just randomly choose.",
			"We might choose to go up and maybe we'll go right",
			"and we'll find our way to the destination.",
			"Sure, depth-first search was able to find us a path from A to B,",
			"but remember that often what we want to do",
			"is we want to make the optimal decision.",
			"This is a correct path for getting from A to B, but it's not the best path.",
			"If we're looking for the shortest path from A to B,",
			"well that's going to be this one, it's going",
			"to be this path here that goes from A to B there.",
			"So we'd like some way to fix that, we'd like",
			"an algorithm that is able to find us the shortest path,",
			"not just finding us any path.",
			"And so for that, we can use an algorithm called breadth-first search, otherwise",
			"known as BFS.",
			"And the way this algorithm works is that instead of whenever we",
			"reach a fork in the road, pick one until we hit a dead end",
			"and then pick the other.",
			"What breadth-first search is going to do is whenever we hit a fork in the road,",
			"let's take both paths, let's take one step on the left",
			"and then one step on the right and then another step on the left",
			"and another step on the right and effectively just",
			"search outwards from the starting point.",
			"We're going to start from the beginning and look for all of the places",
			"we can get to by taking one step away from A,",
			"and then everywhere we can get to taking two steps away from A,",
			"and then three steps away from A, so on and so forth.",
			"So we're always looking at the things that",
			"are nearby before we look at the things that are further away.",
			"So the way this might work is that from A we're going to take one step up",
			"and then we're going to search one square to the right.",
			"And then we'll look a second square on this direction and then a second square",
			"along the path to the right and then a third square and a third square",
			"and we're going to repeat that process, effectively alternating",
			"between all of the different options that we have",
			"until eventually we find this optimal path from A to B.",
			"And because we're looking for the shorter paths",
			"before we look for those longer paths, eventually we're",
			"going to find that shortest possible path.",
			"Now there are still problems with this too.",
			"As Joy pointed out, these algorithms have a tendency",
			"to explore a lot of paths unnecessarily.",
			"Let's go back to that original maze for example",
			"and consider what would breadth-first search",
			"do if I presented it with this maze.",
			"We'll consider what might happen, we might",
			"go until we reach the first decision point right here,",
			"we could go left or right.",
			"And remember, depth-first search picked one",
			"and just followed it until a dead end.",
			"What breadth-first search is going to do is it's going to pick both.",
			"It's going to go to the left and to the right.",
			"And then to the left and to the right and basically alternate",
			"between all of those until we reach another decision point and then",
			"it's going to consider all of those possibilities.",
			"Let's go left or left here and right and consider these possibilities too",
			"and it's going to keep exploring.",
			"Any time we reach any decision point, it's",
			"going to explore this way and that way, this way and that way,",
			"over and over again.",
			"And ultimately, if we repeat this process",
			"and consider what breadth-first search is looking for,",
			"sure it's going to find me the shortest and in this case, the only possible",
			"path to get from A to B but it took such a long time to be able to do so.",
			"It looked at so many different squares, in fact,",
			"it looked at all of the squares in order to do",
			"something as simple as find the shortest path to get from one point to another.",
			"And so here we can try to start to be a little bit more intelligent.",
			"What we'd ideally like to do is that when we reach this first decision",
			"point, go left or go right, most humans if you gave them this maze",
			"and told you to try to solve it at this decision point,",
			"you wouldn't just pick randomly, you would choose to go to the right",
			"because you know the goal is somewhere to the right",
			"and so it's probably the case that we should",
			"follow that direction if we're trying to find our way to the end of the maze.",
			"And so these algorithms we've looked at so far,",
			"depth-first search and breadth-first search",
			"are examples of what we might call uninformed search.",
			"They're not using any specialized knowledge about the problem.",
			"They don't really know anything about the maze.",
			"They're just basically blindly guessing and hoping",
			"that eventually we make our way to the solution.",
			"But in AI we can improve upon this by using an informed search.",
			"An informed search uses something that we know about the problem",
			"to try and improve the way we search, to allow us to search a little bit more",
			"effectively.",
			"And to do so we're often going to make use",
			"of what's known as a heuristic, some way of estimating how",
			"good a particular state is going to be.",
			"So in this maze for example, if I'm trying to get from A to B,",
			"a heuristic would allow me to answer a question like,",
			"if I see point C over here and point D over there, which one of those points",
			"would I rather be at?",
			"Which one is better for trying to find our way to the destination?",
			"And between C and D, breadth-first search and depth-first search,",
			"they have no knowledge of which one of those",
			"is going to be better, as far as it's concerned every square is just",
			"a square, but if you're looking at this as a maze,",
			"most people would intuitively tell you, well, D is better.",
			"Even if I don't know exactly how to get to the destination,",
			"if I could be at either C or D, I'd probably",
			"pick D because it just looks like it's closer to that destination.",
			"And so the heuristic we could use is one that's",
			"often known as the Manhattan distance.",
			"The Manhattan distance between any two squares",
			"effectively says ignore the walls, ignore all the boundaries,",
			"just consider how many squares like in this case up and to the right",
			"would I have to go to get from where I am to the destination.",
			"And so for C, we would go up this many squares and then all the way",
			"to the right, whereas from D doesn't matter whether you go up",
			"or to the right first, but I would go right four squares and then up two.",
			"D as far as Manhattan distance is concerned",
			"is much closer to the goal than C and so I would rather be at D than at C.",
			"And as soon as we have that notion of like between any two choices,",
			"which one of those would I rather be at?",
			"That gives us a way to improve upon the random guessing",
			"that the other algorithms do.",
			"Remember the depth-first search when it reached a fork in the road",
			"and it could go left or right, it didn't know which to pick,",
			"so it just randomly picked one.",
			"Now that we have a heuristic like this, we can make an informed choice.",
			"We can say, I don't know whether left or right is the correct solution,",
			"but right is probably going to be better than left because of this heuristic.",
			"And so I can make those sorts of judgments.",
			"And so for that, we'll take a look at another algorithm",
			"known as greedy best-first search.",
			"So in greedy best-first search, what we're going to do",
			"is consider for each of the squares what it's heuristic value is according",
			"to the Manhattan distance in this case.",
			"So this square for example, is one away from the goal,",
			"so we've labeled it with the number one.",
			"This square meanwhile is two away from our goal,",
			"so we're labeling it with the number two, this is three away,",
			"this is four away.",
			"You'll notice though that we're ignoring any",
			"of the walls, any of the boundaries, because those",
			"are going to be difficult to compute.",
			"We want something efficient.",
			"This square here, even though in order to get to the goal",
			"we have to follow this winding path to go around all the boundaries,",
			"we're still giving it a score of two.",
			"We want something efficient, right now, it just looks like it's two away.",
			"So it's not a perfect heuristic, the heuristic is just an estimate",
			"but we're using it as an approximation that's",
			"going to help us as we go about this search process.",
			"And so what we'll do is we'll start the same way, starting from point A looking",
			"at all of the squares we can get to until we reach our first decision",
			"point.",
			"So here we could choose to go left or we could choose to go right",
			"and in this case, going left according to the heuristic,",
			"this square is 13 away from the goal and this one over here",
			"is 11 away from the goal.",
			"So between those two, being 11 away from the goal,",
			"that sounds a whole lot better.",
			"So greedy best-first search is going to make the choice to go to the right.",
			"So we'll go 11, we'll keep following until we reach the next decision point.",
			"Here from the eight we have two choices, up or to the right.",
			"As far as the heuristic is concerned both of these are equivalent,",
			"going up we're seven squares away, going to the right we're six plus one.",
			"That's a total of seven squares away.",
			"So here even greedy best-first search sometimes needs to pick randomly.",
			"If both squares have the same heuristic value, we just have to make a choice.",
			"And maybe we make a bad choice and hit a dead end",
			"but then we can just try the other one.",
			"So seven, six, we're going to keep following.",
			"Here we have another decision point, we can go down or we can go to the right,",
			"but the one to the right has a smaller heuristic value.",
			"It's a six instead of an eight.",
			"So we're always going to try and pick the one that",
			"looks like it's going to be closer.",
			"So we'll pick the six, we'll go to the five.",
			"And here we reach one more decision point,",
			"we can go up which has a heuristic of four",
			"and we can go down which has a heuristic of six.",
			"So even here because the four is the smaller value,",
			"we're going to go up even though you, the human can",
			"see we're ultimately going to run into a dead end,",
			"the computer doesn't know that yet.",
			"The computer just has to judge based on the heuristic what",
			"it thinks is the best thing to do but eventually",
			"it's going to run into that wall, realize that it can't make any progress",
			"and then go back down here and will follow that path until ultimately we",
			"arrive at the solution.",
			"And so here we arrived at the same solution that breadth-first search did,",
			"but we didn't need to consider all of the squares.",
			"We could ignore all of these off to the left,",
			"we could ignore all of these down below just",
			"by being a little bit smarter about what choice we make.",
			"Instead of just choosing randomly we make an informed choice",
			"based on that heuristic.",
			"I'll pause here for any questions then about the algorithms",
			"we've looked at so far, depth-first search, breadth-first search, and now",
			"an informed algorithm, greedy best-first search.",
			"Any questions about these algorithms?",
			"Yeah, let's go to let's see, Sofia?",
			"AUDIENCE: In like the decision to go randomly",
			"is it possible to like go further and see if there's like lesser values,",
			"like go one more step?",
			"BRIAN YU: You certainly could like maybe try and look ahead a couple of steps",
			"and look at what might be following it.",
			"And that might offer numbers that would improve upon the situation.",
			"But even this algorithm is not perfect.",
			"In fact, when you're just looking at these heuristic values",
			"and following the heuristic values, sometimes the heuristic values",
			"will lead you in a good direction, like sometimes in this case,",
			"we ultimately, we made a couple of wrong turns",
			"but ultimately we kind of found our way.",
			"But that's not always going to be the case.",
			"There are some cases where because the heuristic is really just an estimate,",
			"the heuristic can sometimes be wrong.",
			"Take a maze like this for example, if you",
			"were to follow greedy best-first search, you",
			"would go 16, 15, 14, 13, 12, at this point",
			"you could decide either the 11 or the 13.",
			"And greedy best-first search would look ahead and say,",
			"this path looks pretty good and it's going to-- and none of these values",
			"are any bigger than this 12 and so it would",
			"find this path that takes you from A to B.",
			"But even that path isn't actually the optimal path to take.",
			"The optimal path to take, the shortest path between A and B",
			"is actually this one here, which looks a little counterintuitive",
			"and the reason we didn't catch it is because it",
			"involves like going to the left first and then winding around.",
			"And normally according to this heuristic,",
			"we usually don't want to be going to the left",
			"because we know that our goal, point B where we're trying to get to,",
			"it's off to the right.",
			"So even if you're looking at these heuristic values and looking ahead,",
			"this algorithm might not be perfect.",
			"And so we might try to improve upon this algorithm even more.",
			"And so for one final search algorithm that I'll show you,",
			"the most complex one that we've seen yet,",
			"is an algorithm known as A * search.",
			"A * search tries to build upon the ideas of greedy best-first search, which",
			"is to say we're going to use a heuristic to try and intelligently make choices,",
			"but we're going to try and solve the problem we just saw,",
			"which is that greedy best-first search isn't always optimal.",
			"When it just takes into account the heuristic,",
			"it's not always going to make the best choice",
			"because we might end up choosing a path that's ultimately longer.",
			"What A * search is going to try to realize",
			"is that if we've made it like all the way down here",
			"and now we're at a spot where we could be like 11 squares away",
			"from the goal, that's OK but honestly, being 13 squares away from the goal",
			"much sooner is probably better.",
			"So we can't just take into account the heuristic value,",
			"we should also take into account how far have we gone already.",
			"If I've already traveled many squares and I",
			"find myself pretty close to the goal, I would rather",
			"have traveled fewer squares and find myself close to the goal.",
			"And so A * search is going to try to combine these two",
			"pieces of information, combine the heuristic information that we have seen",
			"here, and also combine how many steps have",
			"I taken so far because that factors into the ultimate optimal solution too.",
			"And so here's how A * search is going to work.",
			"It's going to be the exact same idea as before,",
			"just looking at the heuristic value, but instead of only considering",
			"the heuristic value, we're going to consider taking the heuristic value",
			"and adding to it how many steps we've already taken.",
			"So we take our first step.",
			"And now we've taken one step and we're 16 squares away from the goal",
			"according to the heuristic, for a total of 17.",
			"And then we take our second step and we're 15 squares away from the goal",
			"and we take our third step and we're 14 squares away from the goal,",
			"and we keep going until we reach a decision point after five squares,",
			"we're now 12 away from the goal and now we have a choice,",
			"we could go six squares and be 11 away from the goal",
			"or we could go six squares and be 13 away from the goal, which is worse.",
			"So we're going to make the decision to go up.",
			"So for now, it doesn't seem like we've done any better,",
			"we haven't found the optimal solution just yet.",
			"But notice what will happen, eventually if we",
			"follow this path for long enough we'll end up at a point",
			"where we've made 14 steps and we're estimated",
			"to be five away from the goal, one, two, three, four, five, ignoring the walls.",
			"And now we have a choice, we could be six squares away from the goal",
			"after having walked 15 steps, so 15 plus six that's a total of 21,",
			"or this option is still available to us.",
			"We could be six squares away from the start,",
			"but be 13 away from the goal, six plus 13, that's a total of 19",
			"and that 19 is a smaller number than this 21.",
			"So this 19 is ultimately a better choice as far as A * is concerned.",
			"So by combining information about how far we've traveled",
			"and how far is left to go, we can make a more intelligent choice,",
			"we can say you know what, let's go ahead and try this path",
			"and A * then will ultimately be able to find its way",
			"to get from the starting point ultimately to the goal.",
			"And this algorithm then relies upon having a good heuristic function",
			"and it just so happens that you can prove",
			"that if you pick a good heuristic function,",
			"this algorithm will be optimal.",
			"it will always find the shortest path from point A to point B",
			"and it's not going to get stuck like greedy best-first search might",
			"on a path that isn't actually optimal.",
			"And so there are many of these sorts of search algorithms",
			"that are designed to try and find intelligent ways to find",
			"a solution to some problem, to navigate its way through some landscape.",
			"And so I'll pause here for any questions then",
			"about search algorithms in general.",
			"We've taken a look at what we call classical search, navigating",
			"our way through a maze for example, or finding driving directions as well",
			"as what we might call adversarial search, where there's an opponent",
			"and you're trying to search for the best move in a game of tic-tac-toe",
			"or a game of chess.",
			"DAVID MALAN: Brian, one question from the chat.",
			"Does the assignment of these heuristic values",
			"also take a lot of time for the computer or is that automatic?",
			"BRIAN YU: Ideally you want to find a heuristic that's",
			"going to be efficient to calculate.",
			"So if the time it takes to calculate the heuristic takes a long time, then yeah,",
			"it could be the case that this would be even worse.",
			"But ideally, you want to look for a heuristic that's",
			"going to be very quick to calculate and this",
			"is why sometimes when we're looking at heuristics,",
			"we're going to ignore some of the details that make this more complex.",
			"Like when we're calculating these heuristics,",
			"we're ignoring the walls because having to deal with the walls is",
			"going to make it even--",
			"it's going to make it take longer and longer amounts of time",
			"to be able to figure out these values.",
			"And so by ignoring the walls, we can pretty quickly",
			"calculate just like x, y coordinate wise,",
			"how many coordinate squares are we away from that destination.",
			"Also, I've been labeling all of the squares",
			"in this grid with their heuristic value, just so you can",
			"see what those heuristic values are.",
			"In practice, if our search algorithm never touches a square,",
			"like it never touches any of these squares,",
			"it's not going to bother computing heuristic values for them",
			"because it's not relevant to the search process.",
			"So it'll never actually calculate the heuristic values",
			"for all of these squares, which will save time too.",
			"I have just shown them to you visually so that you can see all of the squares",
			"and what numbers would be assigned to them.",
			"But yeah, really great question.",
			"",
			"All right and, Kurt, was there another question?",
			"",
			"AUDIENCE: Yeah, I was just wondering if, I",
			"mean, the example that you showed it's using like a map",
			"to actually search through a map, so it kind of",
			"like maps directly onto sort of the concept",
			"but like could this also be used for like textual search",
			"or other kinds of searches through like different kinds of problem",
			"spaces or no?",
			"BRIAN YU: Yeah, this can be used for a lot of different problem spaces.",
			"For text they're usually different approaches",
			"in the world of like natural language processing",
			"but you can use these kinds of search algorithms any time",
			"you have some computer which we'll usually",
			"call like an agent, something that's making decisions, that",
			"has to make certain decisions at certain points,",
			"even if those decisions aren't like geographic decisions about which",
			"way to walk, for example, as long as it's making some decision that moves it",
			"into like a different position, you can often apply these types of algorithms",
			"in order to solve problems.",
			"And so these algorithms are not just good for maze solving,",
			"they can be used in other domains too.",
			"So ultimately what I want to move on to now",
			"is less about just coming up with these algorithms that let the AI figure out",
			"exactly what to do right away, but looking",
			"at a type of artificial intelligence that you've probably",
			"heard of called machine learning.",
			"And machine learning is all about trying to take our AI",
			"and trying to get it to learn, learn somehow from data",
			"or learn from experience.",
			"Much the same way that humans might learn,",
			"that we learn from looking at our environment,",
			"we learn from our surroundings, we learn from our experiences,",
			"and we get something out of those experiences.",
			"And so one type of machine learning is known",
			"as reinforcement learning, where you learn",
			"from positive or negative rewards.",
			"The computer does something well and it gets a reward,",
			"the computer does something poorly, it gets some sort of punishment",
			"and the computer tries to learn from that.",
			"Let's imagine for example, a very simple game",
			"that we might want our computer to play, the computer",
			"is going to try to navigate its way through these tiles",
			"and it's going to try and get to the goal,",
			"similar to what we've seen before, but this time the computer",
			"doesn't know where the obstacles are.",
			"Let's imagine that there are some obstacles in its way highlighted",
			"in red here and if our computer agent, this yellow dot here,",
			"ever hits one of those obstacles, the computer loses this game.",
			"So it hits an obstacle, the computer loses but the computer",
			"doesn't know where the obstacles are.",
			"I'm showing them to you visually but the computer has no idea.",
			"How would the computer try to solve this problem?",
			"How would you try to solve the problem?",
			"Well, all it can do it first is randomly make a choice, randomly guess.",
			"Like let's choose to go to the right, OK we hit an obstacle that was no good.",
			"But the computer now can learn from experience.",
			"As long as it knows once it hits the obstacle that was a bad outcome, well",
			"now in the future the computer can learn, I better not do that anymore,",
			"rather than go to the right, let me try something else, I'll try moving up.",
			"All right, that seemed to have worked better,",
			"let me try making another action and let's try another one,",
			"maybe I'll go down this time.",
			"OK that led to an obstacle, so the computer learns from that too.",
			"It learns that was a bad thing to try, so let's try something else.",
			"Maybe we try going up this time, that too",
			"leads to an obstacle, that was no good, so maybe we'll try going to the right.",
			"That seemed OK, maybe we'll go to the right again.",
			"All right, that led to another obstacle.",
			"And so over and over it's just making mistakes",
			"and we let the computer make those mistakes",
			"but every time it makes a mistake, the computer",
			"is learning something from that.",
			"It's learning what to do or what not to do the next time it",
			"goes through the same process.",
			"And so in the future, it can navigate its way around and eventually",
			"with enough trial and error, it can find its way to the goal.",
			"And once it's found its way to the goal, it'll",
			"remember that too, it'll know I now know exactly what sequence of actions",
			"will take me from the starting point to the goal.",
			"And so in the future I can just keep doing that again and again and again.",
			"So that then is an example of reinforcement learning,",
			"but even with this example here do you see any potential problems",
			"with this approach?",
			"Limitations or downsides to what we've just",
			"done here, reasons why this AI might not be perfect, any thoughts?",
			"Let's go to [? Lexleen. ?]",
			"AUDIENCE: It might not be taking the most efficient path.",
			"BRIAN YU: Yeah, absolutely because it's randomly trying,",
			"eventually it will find its way to the goal",
			"but it might not necessarily find the best path because here there",
			"was a faster path, there was a faster way to get to the goal,",
			"and that was to say once you get here go up instead",
			"and that will lead to a more efficient path.",
			"But because our AI is learning, like whenever it",
			"reaches the goal it learns to do that.",
			"When it doesn't reach the goal learns not to do that.",
			"Our AI doesn't have that ability to find that better path in the future.",
			"And so we could improve upon this.",
			"And this is what we call a trade off between exploring and exploiting",
			"in artificial intelligence.",
			"We want our AI to do both of these things.",
			"We want AI to exploit the knowledge it already has, it knows what to do,",
			"it knows what not to do, we want it to use that information,",
			"but we also want it to explore a little bit.",
			"We want it to sometimes try some new action",
			"that it hasn't tried before because maybe",
			"that'll be even better than the things I've already tried in the past.",
			"So so far our AI in the example just now,",
			"was only ever exploiting the knowledge it already has but it was never",
			"exploring something new.",
			"And so often when we're training AI, we want",
			"it to find some sort of nice balance between the two.",
			"We want it to make good choices, but occasionally take a risk,",
			"try something else, see if maybe we can find a better solution.",
			"And so one strategy for doing this is known as the epsilon-greedy approach",
			"to trying to solve these problems, where we assign a value, epsilon,",
			"which is equal to some proportion, some probability",
			"that our computer is just going to make a random choice.",
			"And so we might say if we generate a random number",
			"and it's less than epsilon, which in this case happens like 10% of the time,",
			"then let's go ahead and make a random move,",
			"rather than make an intelligent, smart move just pick a move randomly",
			"and the rest of the time, 90% of the time,",
			"make the move that we know to be the best, the one with the highest value",
			"we know of so far.",
			"And this will often result in a nice balance.",
			"90% of the time our AI will make good choices",
			"that it knows to be good choices, but 10% of the time",
			"it'll make a new choice, something random",
			"and maybe it'll stumble across something bad",
			"and know to avoid that in the future, but maybe it'll",
			"come across something better and know to do that better in the future as well.",
			"And so I'll show you a real live demo of this actually.",
			"Years back, the Italian Institute of Technology",
			"was working through an example of trying to do something just like this,",
			"but before we move on I think there's a question from the chat?",
			"DAVID MALAN: Brian, someone asks, is this related",
			"to genetic algorithms, this approach?",
			"BRIAN YU: Genetic algorithms are another type of this type of learning.",
			"We're going to actually going to talk about genetic algorithms in just",
			"a moment.",
			"So we'll get there very shortly.",
			"But yes, definitely something related.",
			"So the Italian Institute of Technology a couple of years",
			"back tried to teach a robot how to flip pancakes.",
			"Something that you might have done before or seen someone else",
			"do before but in practice, it's difficult to encode in a robot",
			"exactly how to do that.",
			"Exactly what moves to make, exactly how to move its robotic muscle to be",
			"able to flip a pancake effectively.",
			"So rather than try to program every last movement into the computer,",
			"they just let the robot learn via reinforcement learning.",
			"Every time it flipped a pancake incorrectly it",
			"learned what not to do in the future and every time it",
			"flipped a pancake correctly, it learned what to do in the future.",
			"And so I'll go ahead and pull up an example of this now.",
			"And so what we're going to take a look at here is a artificial pancake.",
			"And initially, the human researcher shows",
			"the robot what success looks like.",
			"The robot needs to know what is success and what",
			"is failure so the human demonstrates.",
			"Here is what it looks like to actually do the pancake flipping",
			"by demonstrating exactly what motion to make",
			"and what it feels like to successfully flip a pancake",
			"and then we let the robot try it.",
			"",
			"All right, that was his first try, not to successful.",
			"We'll try it again.",
			"Here's after three tries.",
			"OK, not great but it's learning.",
			"Every time it does something wrong it learns what not to do in the future.",
			"He has five tries, he has 10 tries, not great.",
			"And now after 15 tries or so, or 11 tries I guess, we'll see what happens.",
			"OK so not great, right?",
			"It takes a while to learn these kinds of techniques to learn, here's 15 tries,",
			"all right but finally after enough tries once you do enough practice with this.",
			"Here's after 50 tries and we now actually",
			"have a robot that has learned to successfully perform this task,",
			"not because human programmers told it exactly how to do so,",
			"but because it learned from that failure and learned from experience.",
			"And once it knows how, it knows exactly what to do in the future.",
			"It can continually replicate that behavior over and over again",
			"once it's trained to be able to perform that task.",
			"",
			"So that then is how you might take advantage of this idea of reinforcement",
			"learning but someone in the chat brought up another approach",
			"to this type of thing known as genetic algorithms or genetic learning.",
			"And this is where a lot of machine learning",
			"has taken inspiration from the human brain, how humans learn",
			"and how nature works and because nature has managed",
			"to evolve intelligent beings, why couldn't we",
			"try to do the same thing in a computer as well?",
			"And so in nature, you have generations of populations that evolve over time,",
			"where the most fit organisms survive and are",
			"able to evolve and mutate and change over time to become better and better",
			"at adapting to their environment.",
			"And so one strategy, one approach to trying",
			"to build intelligent machines is rather than program one algorithm that",
			"is really good at performing a task, let's",
			"just create a lot of algorithms that are really bad at performing the task",
			"because that's much easier to do.",
			"But we'll let them evolve, we'll let them try some task",
			"and after they do it, they won't do very well",
			"but we'll take the ones that did the best",
			"and replicate them and mutate them and let them try again.",
			"And then repeat this generation after generation,",
			"eliminating all of the computer programs that don't perform well",
			"but duplicating and mutating the ones that do.",
			"The pseudocode for which might look a little something like this.",
			"We're going to start by making an initial generation of candidates",
			"randomly, where each candidate is some program designed to try and solve",
			"some task but rather than program it intelligently",
			"the way you've been doing all semester, we're",
			"just going to program them randomly to just make random choices",
			"and we're going to repeat this process until eventually they're successful.",
			"We're going to for each one of these candidates calculate its fitness,",
			"calculate how good is it at performing the task that it's designed to do.",
			"And then we're going to remove the least fit candidates.",
			"Maybe take the half of them that didn't do very well,",
			"eliminate those but take the ones that did do well",
			"and make a new generation from the remaining candidates, duplicate them,",
			"make a few mutations to them randomly just to change things up",
			"and to see how things work in order to try to create a better generation.",
			"And over time as we repeat this process, in much the same way that evolution",
			"is able to continually produce better and better organisms that",
			"are more and more fit, we can do the same thing with our algorithms",
			"too, producing better and better algorithms over time.",
			"I have another demo to show you of this.",
			"Here is a simulation of some self-driving cars that",
			"have not been programmed how to drive but are starting out driving entirely",
			"randomly each of these rectangles you see",
			"is one example of a virtual self-driving car.",
			"Each of the little crosshairs you see, the little Xs,",
			"are sensors that the car has access to.",
			"So the car has access to data about how far away in any given direction",
			"particular obstacles are and what these cars are trying",
			"to learn is how to drive through some sort of environment",
			"while not crashing into anything.",
			"And initially they didn't do very well, you",
			"notice they were crashing almost immediately but now we're",
			"about six generations in, seven generations in,",
			"they're starting to do a little bit better.",
			"They're starting to get a sense for like turning when you run into a wall.",
			"Even when they get to new environments they",
			"haven't necessarily seen before, they're starting to do a little bit better.",
			"But of course, they're still not great, they're",
			"still crashing quite frequently.",
			"Sometimes a generation does even worse than the generation before it,",
			"because it's not always going to be the case that when",
			"you make random mutations those mutations are not necessarily",
			"going to be better.",
			"Sometimes the mutations actually end up being a little bit worse.",
			"And so they might move backwards a little bit.",
			"But over time, generation after generation,",
			"you're hopefully seeing that now 10 generations in, these cars in general",
			"are doing a whole lot better than they were before",
			"and every generation we're taking whichever cars made it the furthest,",
			"duplicating those, eliminating the rest, and moving forward.",
			"Is there a question in the chat?",
			"DAVID MALAN: Yeah, with regard to the pancakes,",
			"how did the robot know what was wrong with the previous pancake flips?",
			"In the case of the cars how does the car know that it erred?",
			"BRIAN YU: Yeah, so whenever you're doing anything with reinforcement learning,",
			"whether it's the pancakes or these robots here,",
			"the programmer still needs to tell the AI what does success look like",
			"and what does failure look like.",
			"So in the pancake example, we trained the pancake flipper",
			"to be able to know that when you're flipping this pancake when it's first",
			"taught what does it look like when it's successful.",
			"So it gets a feel for that and it was probably",
			"also told that if the pancake falls, that's not a good thing for example.",
			"And that's not something that the AI should try to do.",
			"And in this case, I assume these cars have",
			"been programmed to be told that if you crash into something that that is not",
			"good, that the car presumably can detect after it's crashed into something",
			"and so it probably also has some sense of like how far it was able to drive,",
			"such that we could duplicate the ones that did drive the furthest",
			"and not the ones that didn't and let's see how this car does,",
			"it was so close to the end, didn't quite make it.",
			"Maybe give it one more generation and we'll see how this generation does.",
			"And all right, so it's navigating these turns,",
			"looks like a whole bunch didn't make it but as long",
			"as we get one successful one, we can learn",
			"from that successful one in the future.",
			"Here's the ending, looks like they crashed but and all right, it",
			"looks like one car was finally able to make it to the end",
			"and was able to successfully learn that task of how to navigate",
			"through this environment of mazes.",
			"So I'll pause here for questions then about reinforcement learning",
			"and how these ideas might have worked.",
			"And, Samuel, did you have a question?",
			"AUDIENCE: Yes.",
			"So with the genetic algorithm, the car one specifically,",
			"so all the cars are learning from each other as each one crashes?",
			"BRIAN YU: It's not so much that the cars are learning from each other",
			"that we're generating new cars based on the cars that",
			"were previously successful.",
			"The idea being that if we run 10 cars and see",
			"how far they go, we take the five that went the furthest,",
			"we eliminate the other five that didn't make it very far",
			"but then we duplicate and repeat the ones that",
			"did do well, such that in the future, hopefully this new generation of cars",
			"will make it a little bit further.",
			"And generation after generation, the hope",
			"is that we're able to make it a little further along the road",
			"until eventually as you saw like 15 generations in,",
			"we were able to get some cars that could perform the task successfully.",
			"Let's go now to Josiah.",
			"AUDIENCE: Is the car specifically learning just from the track?",
			"I mean, when you change the track, do we need another, I mean,",
			"do we need to start from zero again or?",
			"BRIAN YU: Yeah, so if the track were different would it have to learn again?",
			"Hopefully not.",
			"Hopefully what the cars were learning was",
			"in this case was learning based on sensor data,",
			"like how far away a wall is in any direction, which way to turn.",
			"And the goal is for this type of approach to generalize.",
			"And I mean, hopefully actual self-driving cars in the real world",
			"are not trained this way.",
			"But you would hope that as they're trained on sample environments,",
			"that when you put them in a different environment",
			"they would be able to generalize their knowledge",
			"to be able to apply similar techniques.",
			"That if in a real world setting you take a car and put it on a road",
			"that it's never seen before, hopefully it's",
			"seen enough examples of things that are like it, sensor data",
			"that it recognizes, that it's able to make an intelligent decision based",
			"on that.",
			"So yeah, the hope is and the goal in many cases with AI",
			"is to be able to generalize this knowledge beyond just",
			"a specific example.",
			"",
			"Any other questions?",
			"Yeah, let's go to [? Yagonch. ?]",
			"AUDIENCE: Yeah, so can these algorithms ever reach like a bottleneck,",
			"just like in real life evolution, there are branches",
			"and some branches just reach a bottleneck.",
			"So is that possible here [INAUDIBLE]?",
			"BRIAN YU: Yes, it's definitely possible that there might be--",
			"the algorithms might end up converging to something that seems pretty good",
			"and it doesn't seem like any mutations are doing any better,",
			"but it turns out a totally different algorithm",
			"might actually do better than that.",
			"That's what we will often call a local maximum",
			"in the context of artificial intelligence,",
			"where there is some better approach, there is some better algorithm",
			"but we can't necessarily find it.",
			"There are other strategies for trying to deal with that problem.",
			"But it is definitely a challenge we're thinking about.",
			"And one more question.",
			"Let's go to Sophia.",
			"AUDIENCE: I have a question about how the fitness is calculated.",
			"Like in both of these cases, is it like [INAUDIBLE] motors that",
			"are running or here like the distance?",
			"BRIAN YU: Yeah, in the case of the pancake, it was probably",
			"like a binary of just like did the pancake end up",
			"landing in the pan or not, was our way of calculating",
			"the fitness of that particular example.",
			"In the case of the cars, we would probably calculate fitness",
			"based on distance traveled, whichever cars ended up traveling the furthest,",
			"that would be our definition of fitness and that's",
			"really the part the programmer needs to be involved in.",
			"The programmer needs to decide, what does it",
			"mean to be most fit, what does a bad example look like and using that,",
			"once the computer knows what success looks like and what failure looks like,",
			"then it's able to learn from that to be able to do better in the future.",
			"",
			"All right, so that was genetic algorithms,",
			"which is one example of computers that are able to learn from the way",
			"that humans learn, learning from the way that nature works for example,",
			"but computer scientists didn't really stop there.",
			"There are other examples that we can do to add to this as well.",
			"And so one other example of using this idea of reinforcement learning",
			"and using genetic algorithms might be in video recommendations for example,",
			"where you could have some watch history and the way",
			"that an algorithm like YouTube or Netflix might suggest videos for you",
			"to watch is via this reinforcement process,",
			"that it will just try suggesting videos to you and learn from experience.",
			"If it suggests a video to you that you like, that you click on",
			"that, you watch all the way through, well",
			"then the algorithm learns in the future, let's recommend",
			"more of those sorts of things.",
			"That's like the car traveling very far and so we",
			"learn to do more of that in the future.",
			"If they recommend a video to you and you don't click on it",
			"you don't ever watch it, well then it's probably not",
			"going to recommend that to you in the future.",
			"And it's probably going to learn from that experience as well.",
			"And so this is one example of computer science learning from nature,",
			"learning from the way that humans are.",
			"Another place that's happened too is by looking at the human brain.",
			"That the human brain consists of neurons and those neurons are connected",
			"to one another and they pass information from one to another,",
			"electrical signals flow through one neuron to another neuron",
			"and that's how brains are able to make these very",
			"sophisticated kinds of computations.",
			"And this is what we might call a neural network, a collection of these neurons.",
			"And one place that AI has been looking into especially recently gaining",
			"in popularity, has been trying to develop artificial neural networks.",
			"Instead of using a biological neuron we just",
			"use what we might call an artificial neuron or a unit.",
			"And you can think of this unit as just storing some value,",
			"like some electrical signal for example, like you might find in the human brain,",
			"now just in a digital format and these artificial neurons,",
			"these units can be connected to each other",
			"in sort of an input that translates into an output sort of format",
			"where this arrow represents some sort of calculation, some calculation that",
			"is taking this value on the left and transforming it",
			"into that value on the right.",
			"And neural networks are usually not just one input unit and one output unit,",
			"but they can be more complex.",
			"You might have a neural network with two different inputs, each of which",
			"connects to an output or even more sophisticated neural networks",
			"like this one, where you have multiple layers of these units that are all",
			"connected to each other, each of these arrows performing",
			"some sort of calculation and if you've ever",
			"heard the term deep learning, this is often what that's referring to,",
			"this idea of deep neural networks with many layers, each of which",
			"is performing calculations.",
			"And ultimately using some linear algebra,",
			"these neural networks are able to figure out",
			"exactly how to tune these calculations to translate input into some output.",
			"If you give a neural network enough data it can learn from that data,",
			"it can learn exactly how to set these various different arrows",
			"to be able to calculate some task, to be able to translate",
			"some input into some output.",
			"So for example, that might take the form of handwriting recognition.",
			"How exactly do we train computers to be able to learn",
			"how to recognize handwriting given all the different types of handwriting?",
			"Well, one way to try to do that is by using a neural network,",
			"setting up a network of all of these neurons and all of these connections",
			"and then you give to that neural network a whole bunch of data.",
			"I give to the neural network a whole bunch",
			"of already existing handwritten digits, each of which is labeled.",
			"So the computer knows which image corresponds to which digit.",
			"This data set you're looking at here is a very famous data",
			"set of handwritten digits called the MNIST data set,",
			"and given all of this data the computer can start to train the neural network",
			"and start to figure out exactly what calculations",
			"to run at each layer of the neural network",
			"to be able to translate the input into the output,",
			"to be able to translate like a screenshot of what looks",
			"like a handwritten number eight, that we all could tell is the number eight",
			"but might be difficult for us to describe exactly how a computer could",
			"figure that out, but via the neural network,",
			"by training the neural network on all of the sample data,",
			"it's able to learn some sort of function that",
			"can translate this input, this handwritten digit",
			"into the output, what the actual digit happens to be.",
			"And these neural networks have proved to be incredibly versatile",
			"and we won't get into all the math here because it",
			"does get a little bit more complex, but it's used all over the place.",
			"It can be used for email spam detection, where",
			"if you give the computer a whole bunch of data, a whole bunch of emails,",
			"some of which are labeled spam and some of which are not,",
			"it can learn a function.",
			"It can learn exactly how to tune that neural network to be able to predict,",
			"for any given email, whether it's spam or not.",
			"And really the key factor here to making these networks work",
			"is having access to large amounts of data.",
			"And this is why a lot of companies now are doing a lot of work",
			"and trying to get a lot of data and use that data in training",
			"their machine learning models, it's because the more data that you have,",
			"the better you can make these algorithms because the better you can tune them",
			"to all the different types of inputs there might be,",
			"to help to make them even more accurate in the future,",
			"to be able to test these networks to see how well they work.",
			"And every time you're interacting with websites online,",
			"you're often helping to provide some of that data.",
			"Every time you go to your email app for example",
			"and you mark an email as spam, that email app might be learning from that,",
			"learning OK this type of email, that's an example of a spam email.",
			"And so it learns in the future to do a better job",
			"of trying to do that classification.",
			"And likewise, every time an email is marked as spam",
			"and you have to tell the computer, you know",
			"what, that wasn't spam the computer is learning from that too.",
			"It's more data that the computer can use to help to inform its algorithm",
			"and the way that it's working.",
			"And so for one final example, we can take a look at how images like this",
			"were actually generated.",
			"How could a computer possibly get an image like this",
			"and generate it and make something that looks very much like a real person,",
			"even though it's not actually a real person?",
			"Well, it's done using the exact same technique,",
			"using a neural network that learns how to translate inputs",
			"into outputs by having access to a large amount of data.",
			"In this case, having access to many, many photos of real people,",
			"so the computer can start to get a sense for what a real person looks like,",
			"it can start to train the network in that way.",
			"And then rather than build the entire person all at once,",
			"build it up step by step.",
			"A computer generating a photo like this, this is a pretty complicated task,",
			"it's pretty difficult to do.",
			"But you know what's easier is generating that.",
			"That is 16 pixels it doesn't look like a person at all",
			"but this a computer could do pretty readily,",
			"just generate what seems to be a whole bunch of kind of random looking pixels.",
			"But then you would train the computer to add a little bit of detail",
			"to this image to be able to learn if this were a real image,",
			"how would I add a little more detail to it to make it look a little bit more",
			"like what a person would look like?",
			"And it does so again by having access to large amounts of data",
			"many, many photos of people, so it can begin to learn from that experience.",
			"So the computer learns how to take this image",
			"and turn it into this for example.",
			"Still doesn't really look like a person but it",
			"looks a little more like a person.",
			"It's got a higher resolution.",
			"You can maybe make out that there is some hair here and a face here.",
			"And then the algorithm learns how do you take an image like this, an 8 by 8 grid",
			"and turn it into a 16 by 16 grid.",
			"Now this, I mean, it still doesn't look like a person,",
			"but it looks a little more accurate.",
			"And over time we can follow these steps one",
			"after another adding more and more detail.",
			"Until eventually, the computer is able to generate an entire image that really",
			"looks like a person, that's very hard to distinguish just",
			"by this input to output process.",
			"Learning some mapping from inputs to outputs",
			"by having access to a whole lot of data.",
			"So before we wrap up here I'll pause for any final questions",
			"about artificial intelligence, any of the algorithms",
			"we looked at for searching, for learning or anything like that?",
			"Any final questions?",
			"Yeah, Sophia, go ahead.",
			"AUDIENCE: I had a question about like with the fitness,",
			"how is all the I guess, like data-- you mentioned they get regenerated",
			"like the successful ones, but I was wondering",
			"like how is all that data sort like what the success was exactly,",
			"but fitness is just like a score it's hard to know",
			"like exactly what decisions it made that said it was successful.",
			"BRIAN YU: Yeah, and that's actually one of the trickier things about machine",
			"learning, that we can train these machine learning models",
			"to be very, very good but it's not always",
			"immediately apparent to us like what it was doing in order to be successful.",
			"And this is an active area of research within machine learning,",
			"including some faculty at Harvard that work on this too,",
			"which is the interpretability of machine learning results.",
			"Like the algorithm becomes very, very good at recommending a video to you",
			"or generating an image of a person, but it's hard for a person",
			"to look at that machine learning model and understand",
			"how it arrived at that conclusion.",
			"Ultimately, in many cases, people just throw their hands up and say,",
			"we don't really care how the algorithm is doing it,",
			"as long as the algorithm is doing it successfully",
			"and eventually produces good results, we'll",
			"just take the ones that are doing the best and use those,",
			"even if we don't necessarily understand exactly how those algorithms are",
			"working.",
			"And that's definitely an area of concern for some people",
			"and an area of research for others that are looking into these types of tools",
			"and technologies.",
			"Is there a question in the chat maybe?",
			"DAVID MALAN: A final question from the chat, Brian.",
			"Every time I choose the parts of the picture that contain traffic lights",
			"or crosswalks to prove I am not a robot, am I training Google's driverless car?",
			"BRIAN YU: Maybe not Google's necessarily, but certainly",
			"a lot of times when you're doing that type of thing.",
			"I mean, in one part it's to verify that you are in fact human.",
			"That is one of the purposes of those things,",
			"to make sure that robots aren't signing up for websites, for example.",
			"But certainly it could be just giving more examples of labeled data.",
			"That oftentimes what machine learning models rely on",
			"is labeled data where you have like a digit, a handwritten digit,",
			"and you have a label of \"this is the number 2,\" or \"this is the number 8.\"",
			"And so the computer can then use those digits along with those numbers",
			"in order to figure out how to learn how to take handwritten digits",
			"and convert it to individual numbers.",
			"And so having access to that kind of labeled data ultimately",
			"ends up being really, really valuable.",
			"All right, so that's it for artificial intelligence for today.",
			"Thank you all so much and we'll see you next time.",
			"[MUSIC PLAYING]",
			""
		],
		"is_youtube": false
	},
	"video_050": {
		"section": "CS50x 2021",
		"subsection": "Week 10",
		"unit": "Lecture",
		"video_sources": [
			"https://edx-video.net/d13aed87-879f-4383-88fa-eeaea7180ece.m3u8",
			"https://edx-video.net/d13aed87-879f-4383-88fa-eeaea7180ece-mp4_720p.mp4"
		],
		"video_duration": 4633,
		"speech_period": [
			0.5, 2.47, 45.462, 0.958, 1.66, 1.88, 2.67, 2.235, 2.625, 2.94, 3.15, 2.1,
			2.55, 3.18, 1.08, 4.8, 0.84, 2.25, 3.69, 3.42, 1.83, 2.07, 2.94, 4.92,
			2.28, 2.67, 1.33, 5.32, 3.37, 3.33, 2.29, 2.24, 3.489, 2.451, 2.17, 2.27,
			1.22, 2.5, 2.64, 2.61, 2.7, 3.18, 1.68, 3.36, 2.62, 2.63, 3.87, 4.08,
			0.508, 2.792, 2.07, 2.37, 3.48, 2.31, 3.9, 3.06, 2.79, 2.062, 1.958, 2.13,
			2.88, 3.03, 3.42, 2.62, 2.84, 3.51, 3.84, 5.387, 2.083, 2.73, 1.92, 1.738,
			2.792, 2.25, 1.98, 2.73, 0.9, 1.8, 0.862, 1.358, 1.198, 1.985, 2.247,
			3.808, 1.041, 0.94, 5.971, 1.05, 3.776, 3.528, 4.966, 2.51, 1.85, 1.042,
			2.718, 1.86, 3.11, 1.118, 0.5, 4.132, 1.08, 0.725, 1.035, 0.866, 1.734,
			3.46, 1.64, 1.125, 2.902, 1.833, 3.92, 1.98, 2.22, 3.038, 1.792, 2.58,
			2.46, 3.03, 2.79, 2.46, 2.31, 1.83, 2.61, 3.36, 3.39, 2.55, 2.91, 3.75,
			3.45, 3.013, 0.542, 5.077, 1.208, 1.917, 3.123, 2.79, 2.91, 3.17, 2.5,
			3.6, 2.55, 3.48, 3.66, 3.0, 2.82, 2.585, 2.375, 4.31, 2.85, 3.69, 3.33,
			3.58, 2.3, 3.18, 2.8, 3.35, 3.48, 3.54, 2.76, 3.0, 2.52, 3.24, 3.31, 1.01,
			3.09, 3.82, 3.92, 3.73, 2.69, 2.88, 2.76, 2.88, 4.41, 1.98, 5.97, 3.24,
			1.35, 3.55, 4.039, 2.221, 2.37, 2.46, 2.94, 3.69, 2.16, 2.13, 2.52, 3.66,
			2.14, 1.37, 2.22, 3.1, 3.06, 2.75, 3.69, 4.075, 2.375, 2.517, 2.583,
			2.795, 1.375, 3.15, 3.09, 4.26, 2.33, 1.75, 3.15, 3.69, 3.8, 3.3, 3.54,
			2.28, 3.63, 0.84, 2.1, 2.43, 1.95, 1.048, 1.292, 1.41, 3.06, 4.11, 3.48,
			4.5, 1.8, 1.33, 2.87, 3.63, 1.54, 2.33, 2.46, 4.11, 1.35, 3.54, 2.73,
			4.05, 2.19, 2.1, 1.565, 2.125, 3.408, 2.292, 3.96, 2.04, 2.52, 1.62, 3.0,
			2.79, 2.452, 1.958, 2.125, 3.435, 2.96, 1.59, 2.76, 3.25, 5.73, 2.57,
			2.49, 2.91, 4.92, 1.023, 1.917, 2.13, 2.7, 3.51, 2.7, 2.19, 3.54, 3.883,
			2.417, 1.542, 1.758, 3.12, 2.653, 2.417, 2.13, 3.33, 3.27, 1.62, 0.54,
			2.083, 1.684, 0.583, 0.84, 4.44, 2.325, 1.125, 1.56, 3.69, 1.35, 3.01,
			0.5, 4.53, 2.1, 10.048, 2.542, 2.62, 2.22, 0.748, 1.292, 0.87, 1.167,
			1.113, 3.54, 3.91, 3.02, 4.71, 2.16, 5.34, 3.36, 8.07, 4.632, 0.958, 3.62,
			2.138, 1.042, 1.77, 1.56, 2.46, 1.62, 2.58, 2.42, 5.67, 3.12, 2.85, 3.27,
			2.72, 2.607, 0.583, 1.08, 0.69, 1.0, 2.12, 3.17, 3.07, 4.23, 3.87, 1.05,
			4.26, 4.92, 4.74, 2.09, 2.83, 2.79, 3.0, 1.94, 1.75, 2.26, 2.27, 4.77,
			2.475, 4.185, 2.1, 0.75, 0.81, 2.07, 2.1, 1.863, 2.667, 3.06, 0.542,
			3.538, 1.643, 3.167, 0.9, 0.92, 2.53, 2.212, 3.208, 2.67, 2.75, 1.72, 2.5,
			2.12, 1.875, 3.63, 2.125, 4.74, 3.29, 5.37, 1.33, 2.39, 1.71, 2.94, 1.71,
			3.12, 4.717, 0.833, 1.02, 2.43, 2.917, 1.883, 2.22, 2.79, 3.023, 0.667,
			1.71, 3.13, 1.55, 4.29, 0.78, 0.99, 1.11, 1.93, 7.05, 3.433, 0.667, 4.81,
			4.87, 1.53, 0.69, 1.47, 5.02, 2.15, 6.75, 1.42, 2.75, 2.363, 0.667, 0.792,
			2.488, 3.65, 1.785, 3.455, 2.7, 1.65, 2.37, 4.83, 2.91, 3.3, 3.27, 1.65,
			4.01, 1.02, 10.58, 1.77, 3.57, 3.87, 2.942, 1.708, 1.917, 1.203, 3.06,
			2.262, 1.458, 2.4, 1.95, 2.76, 1.33, 0.5, 3.333, 4.517, 1.17, 1.957,
			0.833, 2.82, 2.24, 1.17, 2.557, 1.625, 1.728, 1.845, 3.765, 3.51, 0.96,
			1.86, 2.02, 2.18, 0.9, 1.17, 0.84, 0.6, 0.42, 0.3, 1.74, 1.252, 0.833,
			0.942, 1.833, 5.37, 3.39, 1.653, 0.667, 1.667, 0.603, 2.34, 2.853, 2.917,
			2.542, 4.048, 2.97, 3.06, 0.84, 0.667, 2.323, 1.77, 3.58, 2.12, 1.43,
			0.978, 2.542, 1.4, 4.93, 3.23, 3.27, 4.68, 2.22, 2.34, 1.74, 2.49, 4.74,
			2.01, 3.15, 0.75, 2.18, 2.71, 2.49, 1.38, 3.27, 2.13, 2.335, 1.125, 3.47,
			2.76, 3.597, 2.833, 2.06, 3.75, 3.39, 2.55, 2.042, 3.568, 2.67, 3.118,
			2.792, 4.5, 3.36, 3.04, 5.16, 2.917, 2.083, 1.77, 2.07, 3.48, 1.87, 2.75,
			2.042, 3.268, 2.46, 2.31, 4.03, 3.74, 3.27, 2.52, 0.99, 0.99, 1.41, 3.69,
			0.69, 0.75, 0.78, 4.11, 2.02, 2.82, 4.52, 3.87, 1.32, 4.35, 3.12, 4.5,
			4.59, 1.86, 3.22, 1.402, 2.458, 3.66, 3.0, 4.208, 2.542, 2.46, 3.63, 3.39,
			2.46, 2.59, 2.25, 4.11, 3.75, 2.76, 2.05, 2.91, 3.9, 3.63, 2.22, 4.66,
			3.54, 3.45, 2.22, 4.17, 3.22, 3.0, 2.38, 3.8, 1.98, 2.94, 3.33, 3.15,
			3.79, 2.31, 4.14, 4.35, 3.09, 3.12, 2.88, 3.97, 2.82, 4.78, 3.84, 4.88,
			2.79, 2.19, 2.34, 5.09, 2.46, 2.47, 4.64, 1.66, 4.13, 3.49, 3.06, 3.09,
			3.3, 2.1, 3.06, 3.3, 2.07, 4.65, 3.54, 3.24, 3.87, 3.66, 2.57, 2.28, 3.69,
			3.78, 3.09, 2.58, 2.04, 3.62, 2.65, 4.6, 2.49, 3.24, 2.76, 2.55, 2.92,
			2.47, 2.63, 2.88, 2.34, 3.15, 3.42, 3.81, 3.203, 2.167, 4.17, 2.56, 4.42,
			4.44, 2.335, 3.125, 2.81, 2.85, 3.36, 3.27, 3.39, 4.05, 1.2, 3.15, 3.06,
			2.67, 4.26, 2.46, 2.96, 3.08, 4.5, 3.9, 3.99, 2.28, 3.45, 3.06, 4.26,
			2.79, 3.36, 4.17, 3.3, 3.6, 3.09, 2.67, 3.12, 3.51, 3.15, 2.73, 2.34,
			4.38, 1.47, 2.91, 3.58, 2.9, 3.33, 2.29, 1.98, 3.48, 2.64, 2.64, 3.6,
			1.68, 3.21, 2.79, 2.01, 3.84, 2.26, 3.93, 3.0, 3.12, 3.84, 3.84, 3.45,
			2.37, 5.37, 2.04, 4.26, 2.97, 4.07, 2.4, 2.25, 2.649, 3.651, 2.51, 2.685,
			3.779, 4.109, 1.917, 2.78, 2.279, 3.871, 4.41, 2.46, 3.48, 2.1, 4.08,
			3.329, 2.431, 3.36, 3.54, 2.64, 2.64, 3.12, 3.3, 2.85, 3.21, 2.22, 1.86,
			2.34, 3.69, 2.22, 2.31, 2.82, 3.24, 1.77, 3.78, 3.21, 3.57, 2.28, 2.41,
			2.3, 2.04, 3.75, 2.28, 2.58, 3.87, 4.47, 2.13, 2.44, 2.12, 4.15, 2.27,
			2.25, 4.17, 4.71, 4.11, 3.75, 4.29, 4.9, 2.27, 2.1, 3.64, 3.8, 4.372,
			1.958, 3.96, 4.14, 3.0, 2.0, 3.36, 3.66, 2.1, 4.06, 3.81, 2.1, 2.49, 3.45,
			4.26, 3.33, 3.24, 4.09, 2.45, 3.48, 2.28, 3.78, 4.77, 3.39, 3.75, 2.7,
			4.26, 5.16, 2.28, 2.79, 2.43, 3.23, 2.1, 3.36, 2.94, 2.79, 2.97, 2.13,
			2.58, 4.32, 2.16, 2.07, 4.36, 3.89, 3.84, 3.45, 2.34, 3.9, 2.25, 5.07,
			2.13, 2.76, 3.39, 2.1, 2.05, 5.51, 2.34, 4.53, 2.37, 2.97, 3.21, 4.26,
			1.69, 3.14, 3.41, 3.24, 3.0, 2.76, 3.3, 3.79, 1.7, 2.79, 2.58, 2.19, 2.37,
			2.43, 3.0, 2.91, 1.84, 3.62, 3.24, 2.73, 2.49, 4.59, 3.32, 1.71, 3.36,
			4.41, 3.0, 2.13, 3.16, 2.0, 2.53, 2.93, 2.7, 2.64, 2.58, 3.3, 1.98, 3.27,
			3.57, 4.58, 4.83, 4.98, 3.06, 3.93, 2.55, 3.27, 2.76, 3.24, 5.58, 3.03,
			4.35, 2.43, 2.28, 2.19, 2.58, 1.92, 4.81, 3.65, 2.61, 5.55, 2.82, 3.48,
			2.17, 2.0, 2.69, 3.07, 2.76, 2.37, 2.4, 3.6, 2.43, 2.1, 1.32, 2.04, 2.25,
			3.51, 2.22, 2.85, 2.7, 2.85, 2.64, 2.28, 3.18, 3.81, 3.3, 1.89, 1.8,
			2.042, 2.728, 3.76, 2.03, 3.28, 2.54, 3.03, 3.78, 3.57, 4.2, 2.833, 3.084,
			1.983, 0.35, 1.667, 3.185, 2.958, 2.5, 2.54, 2.68, 2.96, 2.61, 4.23, 2.38,
			3.217, 0.583, 1.32, 2.1, 3.84, 3.87, 2.79, 3.84, 2.67, 2.19, 2.07, 5.4,
			1.92, 3.51, 3.01, 3.57, 3.23, 1.17, 2.88, 2.91, 1.95, 2.28, 3.012, 2.208,
			2.22, 2.625, 2.565, 2.59, 2.0, 2.26, 3.56, 2.28, 1.87, 3.53, 2.76, 1.41,
			5.85, 2.148, 3.042, 1.56, 1.56, 1.41, 3.18, 1.71, 3.21, 1.85, 1.75, 2.392,
			1.958, 4.23, 2.81, 1.75, 2.34, 3.51, 2.88, 3.21, 2.58, 3.33, 1.98, 3.51,
			3.93, 2.65, 3.59, 3.28, 3.86, 1.792, 1.958, 3.51, 3.99, 0.72, 3.48, 4.15,
			3.32, 2.37, 2.67, 2.85, 1.68, 2.1, 3.51, 3.39, 2.4, 3.84, 3.12, 1.83,
			3.39, 2.43, 2.16, 2.763, 1.917, 2.22, 2.01, 3.57, 1.2, 2.88, 1.15, 3.14,
			2.76, 2.04, 3.12, 3.78, 2.97, 2.38, 3.14, 1.858, 2.792, 4.11, 4.157,
			2.833, 4.202, 1.708, 3.87, 3.1, 2.75, 2.1, 4.36, 0.5, 2.4, 2.772, 1.458,
			2.73, 3.098, 1.792, 1.74, 1.727, 2.833, 3.12, 3.12, 3.81, 3.06, 2.5, 4.49,
			3.33, 2.31, 3.66, 2.01, 3.63, 3.09, 3.75, 3.84, 4.63, 3.26, 2.27, 3.76,
			3.24, 3.81, 4.005, 4.765, 3.32, 2.43, 3.42, 0.82, 3.8, 3.453, 2.667, 2.88,
			2.7, 2.848, 2.042, 1.35, 1.81, 2.0, 2.88, 3.357, 1.833, 4.11, 3.06, 2.22,
			2.16, 3.835, 2.375, 3.66, 2.58, 3.33, 1.24, 3.29, 2.652, 2.208, 2.64,
			3.36, 1.14, 3.1, 2.84, 3.6, 1.77, 3.36, 2.19, 2.09, 2.5, 3.78, 2.1, 1.53,
			3.07, 2.258, 2.292, 3.36, 3.15, 2.49, 3.0, 3.42, 2.19, 3.06, 3.09, 2.07,
			3.275, 2.125, 1.625, 1.75, 2.595, 2.23, 4.16, 2.948, 2.042, 3.89, 2.332,
			2.708, 1.08, 2.46, 1.92, 2.292, 2.418, 3.88, 3.44, 3.24, 2.28, 2.25, 2.19,
			3.15, 4.18, 2.63, 4.69, 2.53, 1.25, 3.38, 2.01, 3.24, 2.7, 4.35, 1.39,
			3.42, 2.09, 3.67, 3.24, 4.19, 2.28, 4.11, 3.33, 1.95, 0.78, 1.472, 1.208,
			2.5, 1.27, 4.71, 2.43, 2.52, 2.46, 2.14, 3.9, 2.19, 3.54, 0.93, 2.125,
			3.905, 0.75, 2.237, 0.583, 1.23, 3.21, 1.43, 2.5, 1.65, 2.655, 2.625, 3.3,
			1.373, 2.167, 1.708, 4.082, 2.74, 1.67, 4.65, 4.77, 5.37, 2.58, 2.07,
			3.15, 2.28, 2.91, 1.15, 1.83, 1.37, 1.86, 2.04, 2.65, 3.53, 3.12, 2.91,
			2.52, 2.4, 3.64, 4.49, 3.3, 3.12, 4.63, 2.5, 5.18, 1.98, 4.59, 0.677,
			2.083, 3.26, 1.75, 1.62, 3.39, 2.31, 2.76, 3.25, 2.252, 1.458, 1.68, 3.93,
			4.77, 4.62, 3.96, 3.15, 0.81, 3.72, 1.092, 1.458, 3.042, 2.708, 0.76,
			1.917, 3.213, 1.95, 1.98, 2.43, 3.39, 3.18, 3.18, 2.19, 2.4, 1.02, 2.69,
			2.49, 3.63, 2.5, 2.66, 3.3, 1.72, 3.74, 2.43, 3.15, 1.968, 1.542, 2.97,
			0.99, 2.438, 3.292, 2.31, 1.65, 1.643, 2.167, 1.815, 1.375, 2.3, 0.96,
			5.07, 2.55, 4.16, 5.75, 3.27, 1.95, 2.15, 4.48, 2.04, 2.28, 2.19, 2.32,
			2.3, 2.37, 1.058, 2.542, 1.77, 2.61, 2.76, 1.54, 2.06, 3.0, 2.01, 4.47,
			4.38, 5.61, 1.5, 4.38, 4.44, 2.47, 0.5, 1.2, 2.16, 2.34, 0.902, 1.708,
			2.79, 1.98, 1.68, 2.82, 2.14, 1.833, 1.427, 2.7, 3.18, 2.16, 2.67, 2.88,
			1.41, 5.07, 2.96, 3.12, 2.52, 1.11, 1.86, 0.587, 1.083, 2.23, 2.4, 1.958,
			1.995, 2.167, 3.27, 1.98, 3.9, 2.22, 3.75, 1.32, 1.38, 2.43, 3.157, 1.833,
			3.74, 0.78, 1.3, 2.78, 3.988, 0.542, 1.32, 2.368, 2.042, 1.65, 2.38, 5.39,
			1.33, 0.62, 1.708, 1.772, 1.74, 4.5, 2.53, 4.76, 2.07, 2.52, 4.29, 2.28,
			2.88, 3.75, 4.23, 1.38, 3.12, 3.33, 1.14, 2.77, 1.75, 2.08, 2.01, 3.36,
			1.83, 1.8, 3.36, 2.13, 0.42, 1.417, 1.823, 2.91, 3.84, 1.32, 1.11, 1.74,
			3.18, 1.17, 4.02, 3.72, 3.99, 1.91, 3.26, 1.25, 2.31, 1.882, 1.708, 1.68,
			2.46, 3.18, 0.6, 0.5, 2.47, 1.59, 2.91, 2.52, 3.42, 3.14, 2.989, 1.651,
			1.703, 3.167, 0.68, 1.35, 1.917, 3.713, 1.75, 3.387, 2.083, 2.63, 2.4,
			2.667, 3.393, 0.66, 2.045, 2.125, 2.639, 2.101, 4.019, 1.651, 6.019,
			3.011, 3.14, 2.07, 2.08, 1.489, 4.17, 0.671, 1.25, 3.358, 1.292, 2.625,
			2.445, 1.5, 1.537, 0.833, 1.83, 2.31, 3.179, 0.871, 2.61, 4.05, 2.04,
			2.94, 1.77, 4.38, 0.96, 1.77, 1.92, 2.415, 2.125, 2.083, 0.847, 1.5, 2.07,
			1.8, 1.2, 2.13, 2.137, 0.833, 3.78, 1.15, 2.75, 3.9, 3.93, 3.75, 3.09,
			2.85, 2.58, 2.64, 0.54, 1.2, 2.542, 2.078, 3.51, 1.21, 2.93, 1.29, 1.98,
			3.91, 3.92, 2.67, 2.94, 4.71, 4.29, 0.84, 0.75, 1.26, 2.79, 0.78, 1.2,
			1.2, 1.35, 2.82, 2.46, 1.62, 0.39, 2.208, 1.602, 0.24, 2.82, 1.71, 2.94,
			2.28, 1.627, 0.833, 1.75, 5.6, 4.5, 1.29, 3.6, 2.7, 3.96, 1.65, 0.78,
			4.258, 1.292, 2.167, 2.783, 1.905, 2.905, 1.25, 1.56, 1.9, 3.11, 3.13,
			1.46, 2.13, 3.69, 5.04, 5.46, 2.4, 3.15, 3.12, 3.78, 1.79, 1.23, 2.07,
			1.14, 0.3, 1.292, 3.418, 2.2, 2.36, 2.07, 3.69, 3.24, 0.96, 2.43, 3.12,
			2.4, 2.95, 1.667, 2.166, 2.367, 1.8, 2.13, 3.727, 0.833, 1.32, 1.95, 2.91,
			2.19, 2.4, 2.08, 3.75, 4.41, 1.17, 2.64, 1.71, 1.57, 2.36, 2.94, 1.77,
			2.04, 0.875, 2.125, 3.125, 3.025, 0.962, 0.958, 3.99, 2.37, 3.81, 3.75,
			5.23, 1.2, 0.96, 1.8, 3.84, 2.25, 2.87, 3.16, 1.77, 1.89, 2.31, 1.5, 1.38,
			9.6, 3.35, 55.56
		],
		"transcript_en": [
			"",
			"[MUSIC PLAYING]",
			"",
			"DAVID MALAN: All right.",
			"This is CS50.",
			"And this is the end.",
			"All that remains here on out is really your final projects.",
			"And we cannot wait to see what you create.",
			"Today what we thought we would do is take a bit of a look back,",
			"but also we'll look forward so that you know exactly where",
			"and what you can do beyond CS50 itself.",
			"But first a word of thanks.",
			"We are, of course, here in the Loeb Drama Center",
			"with The American Repertory Theater, who have been our amazing hosts",
			"this whole semester.",
			"And truly, they have breathed new life, new lights, new animation, new sounds",
			"into CS50.",
			"And we are so grateful to have had such a privilege",
			"to work with the amazingly talented team here to indeed bring",
			"this whole stage to life and evolve it over the course of the semester.",
			"And then, of course, there's CS50'S team.",
			"And though I'm the only one here on stage",
			"with everyone else spread quite far apart this semester,",
			"it would not be without CS50's team that we have the videos that we have,",
			"the technology that we have, and all of the visuals",
			"that supplement, hopefully, everything that you yourselves",
			"have been doing hands on.",
			"So thank you truly to both teams for having made this semester all possible.",
			"These are suffice it to say, among the more unusual and difficult times.",
			"And we hope, if you're watching this now live, or in some time from now,",
			"that this finds everyone healthy and well.",
			"And that, indeed, we have helped you find your way",
			"along this path of learning something new.",
			"Of course, there's more folks even than that",
			"behind the scenes, CS50'S whole team.",
			"And when I look out on the crowd here, really, there",
			"is no crowd here in person.",
			"And if you've wondered what it looks like behind the scenes,",
			"pictured here is a photograph of exactly what",
			"it is I am seeing when we hold each of these classes.",
			"And indeed, if we Zoom in, when we're having these conversations",
			"or answering or asking questions, it really is just us",
			"and some TV screens here this year.",
			"But we do look forward to all reuniting before long.",
			"Now behind the scenes, there's indeed this whole team.",
			"In fact, pictured here are just most of, but not even",
			"all, CS50'S teaching Fellows, teaching assistants, and course assistants,",
			"both at Harvard and at Yale, without whom this semester would also not",
			"be possible.",
			"Because they are, indeed, the backbone of and the support structure",
			"for getting everyone ultimately to the finish",
			"line with problem sets, labs, and more.",
			"But it's worth noting that we are all fallible.",
			"And, indeed, I'm told it's fairly instructive when",
			"I do something completely wrong, or get a little befuddled here on stage",
			"and can't quite figure out why my own code isn't working,",
			"or can't quite answer a question off the top of my head.",
			"This all happens, certainly, to all of us.",
			"So even if you are feeling here, toward the end",
			"of the semester, that not everything quite clicked",
			"and you're still struggling sometimes to find that bug in your code,",
			"or you're still googling or searching for some answer to some smaller",
			"technical problem, rest assured, or take comfort in knowing,",
			"that that is never really going to go away.",
			"And in fact, to reinforce that, besides all of the mistakes",
			"I here have made on stage, we thought we would share a little bit of a clip,",
			"some bloopers if you will, from when the teaching staff some weeks ago prepared",
			"that passing of TCP/IP packets on video, which worked out wonderfully well,",
			"where folks were passing up, down, left and right.",
			"The goal of which was to get three TCP/IP packets",
			"from the bottom right-hand corner of Zoom",
			"to the top left-hand corner of Zoom.",
			"But we thought we would give you a glimpse of what actually went on",
			"behind the scenes and just how many takes it took us",
			"to get even that demonstration right.",
			"I give you some of CS50'S team.",
			"[VIDEO PLAYBACK]",
			"- There we go.",
			"Buffering.",
			"OK.",
			"Josh?",
			"- Hi.",
			"- Helen, oh!",
			"[LAUGHTER]",
			"- [INAUDIBLE].",
			"No, wait.",
			"",
			"That was amazing, Josh.",
			"",
			"Um, Sophie?",
			"[LAUGHTER]",
			"Amazing.",
			"That was perfect.",
			"Moni?",
			"[LAUGHTER]",
			"I think I--",
			"- [INAUDIBLE].",
			"- Amazing.",
			"- Guy?",
			"",
			"That was amazing.",
			"Thank you all.",
			"- So good!",
			"[APPLAUSE]",
			"[END PLAYBACK]",
			"DAVID MALAN: So suffice it to say, computer science is hard for all of us.",
			"And so some of these feelings, some of these frustrations",
			"are never going to go away.",
			"But hopefully you have, indeed, all the more tools in your toolkit,",
			"all the more of a foundation now to build on",
			"so that you can take comfort in being a little uncomfortable as you forge ahead",
			"and solve new problems, learn new languages,",
			"and ultimately pick up new ideas and skills.",
			"But remember, for CS50 alone, what ultimately",
			"matters in this course is not so much where",
			"you end up relative to your classmates, but where you end",
			"up relative to yourself when you began.",
			"And consider, it wasn't all that long ago that you began.",
			"In fact, just some weeks ago was this perhaps,",
			"the biggest of your problems in CS50, just trying",
			"to figure out how to get the pyramid to align right,",
			"whether you did the less comfortable version or the more",
			"comfortable version, figuring out how to print spaces,",
			"how to shift the pyramid over and the like, figuring out how to nest loops,",
			"let alone getting all of the semicolons and compilation steps right.",
			"And then, fast forward to just a week or two ago",
			"when you built your very own web application, one",
			"that used a third party API and pulled in nearly real time data",
			"and generated views for the user, had a controller governing",
			"with the model exactly all of the data you were reading and writing",
			"and the like.",
			"Like, that is a huge way to have gone over the course of just a few months.",
			"So take comfort in that, too.",
			"Especially as you dive into your final project",
			"and might bump up against some more walls, those, too,",
			"will you ultimately push through.",
			"So what have we focused on over the course of this semester?",
			"A lot of the times we've spent time talking about and doing programming.",
			"But really, we'd like to think it's some of the higher level",
			"ideas and the takeaways that are what last you",
			"far longer than the particulars of these languages.",
			"Whether it's Scratch or C or Python or JavaScript or SQL,",
			"or any of the other practical tools that we looked at, all of those",
			"are eventually in some form going to be out of date.",
			"Or they might remain with us is older languages,",
			"but newer and better things will come along.",
			"And what we hope, then, is that over the past few months,",
			"you've walked away with the fundamentals and sort of a foundation on which you",
			"can bootstrap yourself to learn new things as they come out",
			"and really reduce new things to their basic building blocks,",
			"the puzzle pieces with which we began, first principles from which you",
			"can infer how some new system, some new piece of hardware,",
			"how some new language must surely work.",
			"Because underneath the hood, at the end of the day, it's still going to be,",
			"for some time, just 0's and 1's.",
			"And so we introduced in Week 0, recall, computational thinking,",
			"encouraging you to think more methodically, more algorithmically.",
			"But really, computational thinking is just a computer scientist's incarnation",
			"of what we might otherwise think of as just critical thinking.",
			"This process is taking as input information",
			"and producing as output some solution.",
			"And in between there, of course, are our algorithms, the black box that's",
			"doing something interesting and perhaps difficult. But at the end of the day,",
			"this is problem solving.",
			"And this isn't going anywhere, irrespective of the languages",
			"that you use or pick up or even forget somewhere along the way.",
			"And indeed, today, too, whether this is input and output in binary form,",
			"or it's just information and decisions or facts and conclusions,",
			"this process of taking input and producing",
			"as output correct answers, correct conclusions,",
			"correct decisions is hopefully going to be with you far",
			"longer than the particulars of C or Python",
			"or any of the more hands-on skills that we've spent time on this term.",
			"And recall, too, that at least within CS50,",
			"the tools with which we propose that you evaluate the quality of your approach",
			"to problem solving are these three axes, the first and foremost",
			"of which is surely correctness.",
			"Because if it doesn't work, what's the point of it all in the first place?",
			"So getting your code, your algorithm, your process from input to output",
			"to be correct is certainly paramount.",
			"But after that comes questions of design.",
			"If you actually want to build more complex systems,",
			"or solve more sophisticated problems, you really",
			"do want to design your solutions to those problems cleanly.",
			"You don't want them to be slow or inefficient.",
			"You don't want them to be a mess in real terms.",
			"You don't want your code to be completely undecipherable.",
			"Because that's just going to hamper you longer term to using those same tools,",
			"those same libraries to solve more interesting,",
			"more sophisticated problems.",
			"And it's surely going to make it harder to interface",
			"with other people, other collaborators, and other systems.",
			"And indeed along those lines, is style still important?",
			"It's perhaps the third in this trio for us.",
			"But it's the aesthetics of your code, and the indentation in the variables",
			"and all that, much like you might convey in our human language,",
			"put your best foot forward with punctuation and the like.",
			"It just helps other people understand you.",
			"And indeed, even though we spent a lot of our time interacting",
			"with computers, in a course like this, at the end of the day,",
			"you're really just communicating.",
			"And whether you're communicating to a machine or to another human,",
			"doing that cleanly and in a way that helps your ideas,",
			"your solutions, become adopted is surely no less important",
			"than some of these other ideas as well.",
			"But what about other basic building blocks",
			"that transcend the particular languages and pieces that we did?",
			"Well, abstraction, this idea of taking fairly complicated ideas",
			"and simplifying them so you don't have to worry about the lower level",
			"implementation details, you can focus only on the solution",
			"that that puzzle piece or that building block actually provides.",
			"And abstraction is everywhere around us.",
			"Certainly in code, we saw functions like get_string as an abstraction.",
			"I don't know.",
			"I don't really remember exactly how get_string",
			"is implemented underneath the hood, let alone a function",
			"that comes with C, like printf.",
			"But I know that it works.",
			"And I know that it takes input.",
			"I know that it produces output.",
			"And I can therefore build my own ideas, my own software,",
			"on top of that building block, abstracting away those particulars.",
			"And in the real world, too, we abstract things--",
			"we abstract away things all of the time, taking a complex idea or a process",
			"and assume that that will be done.",
			"Someone else might do that.",
			"And I can therefore build on the output of that process,",
			"even if I am myself am no expert in the underlying implementation",
			"details thereof.",
			"But then there's precision, this other idea",
			"where it's super important, certainly when writing code,",
			"but also when talking to another human, to be precise and make super clear",
			"what you mean.",
			"And to consider the corner cases, to consider the inputs",
			"that you might not otherwise expect, but might nonetheless",
			"happen so that you don't err and have some unexpected behavior, as we",
			"certainly did more than once in actual code.",
			"And sometimes, abstractions and precisions",
			"are kind of at odds with one another.",
			"Because abstraction would sort of have you think at",
			"and talk at a fairly high level, whereas precision",
			"would suggest that you really should get into the weeds",
			"and really go step by step by step when it comes to giving someone",
			"else or a computer instructions.",
			"And we thought we would bring this to life, perhaps,",
			"with a couple of examples.",
			"And we thought we would try to involve as many people as we can in this,",
			"albeit from afar, by having everyone, if you can,",
			"take out a piece of paper and a pen or pencil.",
			"It's OK if you don't quite have that available.",
			"You can do this on a computer, too, if you'd rather",
			"draw on a notepad or a tablet, or something like that totally fine.",
			"But ideally, taking out now something with which to draw and something",
			"to draw on.",
			"We're going to go ahead and try to apply some principles",
			"of computational thinking and see just how helpful or hurtful",
			"it is to use abstraction or precision at one level or another.",
			"So I think to do this, Brian, we're going to need",
			"a helping hand from the audience.",
			"I think we're going to need for one person",
			"out there to volunteer to write instructions verbally",
			"for everyone else.",
			"We're going to treat everyone in the audience,",
			"or really, n minus 1 people in the audience",
			"as the computers today who are going to be programmed.",
			"And we need one human volunteer to be the programmer.",
			"And that programmer is going to be Daniel.",
			"So Daniel, thank you for volunteering.",
			"Brian, could we go ahead and share with Daniel, and only Daniel,",
			"a picture of something that we want everyone else to draw?",
			"So Daniel, what you should see on your screen in a moment,",
			"if you haven't already, is a picture.",
			"Don't tell anyone else what it is.",
			"You may use any words in a moment that you want.",
			"You should not use your hands or any gestures like that.",
			"But the goal is going to be to write an algorithm verbally",
			"for everyone else in the room, step by step,",
			"so that ideally they draw what it is you see.",
			"And you can say anything you want, but just no physical gestures.",
			"Does that make sense?",
			"- Got it.",
			"And do you want to say a little bit about yourself",
			"first to the group before we begin?",
			"STUDENT: Sure.",
			"My name's Daniel.",
			"I'm from Ezra Stiles College at Yale University.",
			"And I really CS50 this semester.",
			"DAVID MALAN: Oh, wonderful.",
			"Thank you for volunteering.",
			"And let's go ahead and have everyone else with their paper",
			"and pencil or pen ready.",
			"Daniel, what should be the first thing everyone does, step one.",
			"STUDENT: OK.",
			"So the first thing we're going to draw is a hexagon.",
			"So it's a regular hexagon.",
			"And we're going to make sure that we draw it so that one of the vertices",
			"is on the very bottom of the hexagon, and one of the vertices",
			"is at the very top of the hexagon.",
			"So one side is not laying flat.",
			"You're doing--",
			"DAVID MALAN: Wup, dut, dut dut.",
			"No hand gestures.",
			"STUDENT: No hands, no hands.",
			"Right.",
			"One vertice at the very top, one vertice is at the very bottom.",
			"And you've got your other four vertices on the sides.",
			"So once you've got your hexagon, your next step",
			"is going to be find your midpoint of the hexagon.",
			"And so once you've found your midpoint, you're",
			"going to draw three lines from a vertices to that midpoint.",
			"The vertices that you're going to choose to draw from",
			"are the very bottom to the midpoint and then from the midpoint to the vertices",
			"that are on the left and right of the top vertices.",
			"DAVID MALAN: All right.",
			"Any final instructions?",
			"STUDENT: I think, hopefully, that should be it.",
			"DAVID MALAN: [INAUDIBLE].",
			"Those were very long steps one and two.",
			"But yes.",
			"All right, well, let's go ahead and reveal.",
			"This will be a little bit of a hack.",
			"But if anyone everyone is comfortable picking up",
			"their piece of paper or their tablet and holding it",
			"in front of their Zoom camera steadily for five or 10 seconds,",
			"we'll see exactly what everyone has drawn.",
			"If you go into gallery view, you'll be able to see everyone else.",
			"Daniel, hopefully you're seeing some familiar pictures?",
			"I think we definitely have range.",
			"Are you seeing one or more that match what you had in mind?",
			"STUDENT: Yeah.",
			"They all look pretty good.",
			"DAVID MALAN: They all?",
			"All right, so good.",
			"Let me go ahead, then, and share on my screen",
			"in just a moment what it is Daniel was describing.",
			"So what Brian had shared with Daniel in advance was this picture",
			"here, which I dare say is a cube.",
			"But indeed, it's composed of a hexagon and then the additional lines",
			"that Daniel described.",
			"And Daniel, I did happen to see, maybe on pages two and three of the Zoom",
			"window, there were definitely some that weren't quite cubes.",
			"What was going through your mind as to how you approached",
			"the algorithm that you provided?",
			"STUDENT: I wanted to--",
			"to me, the first thing that went through my head was a cube.",
			"But I knew that there's so many ways to draw a cube.",
			"I didn't want to describe it as a cube.",
			"Because if I said just draw a cube, I knew",
			"that we would get tons of different results.",
			"So I wanted to be as clear as possible.",
			"And I knew that if I could describe it in sort of a mathematical way,",
			"describing it with a hexagon and describing it",
			"with the vertices in the midpoint, that hopefully more people would",
			"be able to draw a precise shape.",
			"DAVID MALAN: Yeah.",
			"Really well said.",
			"Now if we had everyone's volume on, odd are,",
			"you'd hear a bit of chuckling now, perhaps,",
			"or maybe a little bit of awkwardness.",
			"And I daresay not all of the pictures quite turned out that way,",
			"but that's a perfect example of where maybe abstractions can kind of get us",
			"into trouble.",
			"Because if Daniel had just said, draw a cube, right, some of you",
			"might start drawing immediately a cube.",
			"But many of you would have a question, well, what should the orientation be?",
			"What should the size be?",
			"What should the position be?",
			"And so there, precision becomes increasingly important.",
			"But the more precise it gets, odds are some of you",
			"just kind of got overwhelmed with the amount of detail and sort of lost track",
			"where your pen or pencil was supposed to be at one point",
			"because you were operating at a much lower level.",
			"So there's this tension, then.",
			"But I think we did get some of you to that finish line.",
			"Let's see if we can't now take the pressure off of all of you,",
			"and thank you to Daniel, in particular, let's",
			"see if we can't now have all of you collectively program me, if you will.",
			"So I'm going to go ahead and pull up my screen here",
			"where I have the ability to draw with my mouse and cursor on my screen here.",
			"And Brian, if you don't mind, could you share with everyone",
			"else a picture that I promise I have not seen in advance.",
			"So we will see how this goes.",
			"So I'm the only one right now in the Zoom room",
			"that has not seen this picture.",
			"But Brian has gone and provided only you all with the URL.",
			"So pull that up on your screen.",
			"And then, Brian, if we could perhaps iteratively call on some volunteers.",
			"Why don't I try to draw what people tell me to do, step by step?",
			"BRIAN YU: All right.",
			"David has not seen this.",
			"I just picked this out, like, five minutes ago.",
			"And you're all going to raise your hand if you want to give him, like,",
			"one instruction for what to do next.",
			"And let's start with George.",
			"STUDENT: So you're going to start by drawing",
			"a circle near the top of the screen.",
			"DAVID MALAN: OK.",
			"A circle near the top of the screen.",
			"And let me make clear, I have no delete abilities on the computer.",
			"So once I commit, we're in.",
			"So drawing a circle near the top of the screen.",
			"OK.",
			"Thank you, George.",
			"Brian, step two?",
			"BRIAN YU: All right, let's go to Sophia next.",
			"STUDENT: Then, in the very center of the screen, door a black, filled in circle,",
			"which is approximately a tenth of the size of the circle at the top.",
			"DAVID MALAN: OK.",
			"A black, filled in circle, I heard, that's a tenth of the size.",
			"So I'm going to do something like this, and then just kind of shade it in.",
			"All right, thank you, Sophia.",
			"Step three?",
			"BRIAN YU: Let's go to Santiago.",
			"STUDENT: You're going to draw another circle.",
			"But it's not actually going to be a circle,",
			"it's more of an ellipse, that's going to be bigger than the first one.",
			"So it's going to be in the middle.",
			"And it's going to enclose that filled in circle",
			"and leave some room in the bottom.",
			"DAVID MALAN: OK.",
			"So it's an ellipse.",
			"It's bigger than the first circle.",
			"But it encloses the smaller one?",
			"All right, so I heard kind of this.",
			"",
			"OK.",
			"Step 4?",
			"STUDENT: Under that smaller ellipse, you're",
			"going to want to draw a bigger circle underneath it",
			"and act as if the circle is going through that ellipse,",
			"but don't actually show the lines going through the ellipse.",
			"So that is, we draw a bigger circle underneath, but without having",
			"the lines go through.",
			"It looks like it will kind of be going through the edge of it.",
			"DAVID MALAN: OK.",
			"I'm a little worried here, but what I heard was like this, maybe?",
			"Step five?",
			"BRIAN YU: All right, let's go to [INAUDIBLE] next.",
			"STUDENT: So in that kind of middle ellipse,",
			"you know, like, when kids act like they're an airplane,",
			"and then they make, like, airplane noise,",
			"then they do that weird thing with their arms?",
			"DAVID MALAN: Uh huh.",
			"STUDENT: So draw those kind of, like, arms in that middle ellipse,",
			"coming out of the big middle ellipse.",
			"DAVID MALAN: In the middle ellipse?",
			"This lower one?",
			"STUDENT: The one outside of it.",
			"DAVID MALAN: Oh, this big ellipse?",
			"STUDENT: Yeah, the outer bound.",
			"Yeah.",
			"DAVID MALAN: All right, so I should draw some hands like a kid would have when--",
			"",
			"OK.",
			"I'm not sure this is going to end well.",
			"BRIAN YU: All right.",
			"We need some more volunteers to help David finish this.",
			"Let's go to Gabrielle.",
			"STUDENT: OK.",
			"Try to draw a--",
			"DAVID MALAN: Try is the operative word.",
			"[LAUGHTER]",
			"STUDENT: You've got a bigger ellipse that's",
			"at the very bottom, that's bigger than both the top and middle one,",
			"but showing no overlapping lines between the middle one and the one",
			"that you're trying.",
			"DAVID MALAN: So show no overlapping lines.",
			"So I heard an even bigger ellipse.",
			"So, like, oops, sorry.",
			"This?",
			"OK?",
			"STUDENT: Good job.",
			"DAVID MALAN: Thank you.",
			"OK.",
			"Good.",
			"Keep the positive reinforcement coming.",
			"Final couple steps?",
			"BRIAN YU: All right.",
			"[? Ika? ?]",
			"STUDENT: One other step you would have to do",
			"is draw a small, filled in circle, slightly smaller than the one",
			"you already drew, right in the center of the first circle",
			"you drew right at the top.",
			"DAVID MALAN: OK.",
			"Right in the center of the first circle.",
			"OK.",
			"And I think this is starting to take shape for me.",
			"And I regret some of my earlier decisions.",
			"BRIAN YU: [INAUDIBLE],, you want to provide an additional instruction?",
			"STUDENT: Another circle in between the last one you just drew",
			"and in between the edge of the circle, so",
			"to the left of that circle you're going to draw another circle.",
			"DAVID MALAN: To the left of this circle?",
			"STUDENT: Mhm.",
			"DAVID MALAN: OK.",
			"",
			"BRIAN YU: And Ryan?",
			"STUDENT: Underneath, you're going to want to repeat the same process,",
			"except draw a circle on the right side.",
			"DAVID MALAN: OK.",
			"Little loop.",
			"BRIAN YU: I think we've got maybe one or two more steps left.",
			"Let's go back to Sophia.",
			"STUDENT: Underneath the filled in circle, that's in the middle ellipse,",
			"you want to draw two replicas of that circle",
			"below the original one in the middle ellipse.",
			"DAVID MALAN: In the middle ellipse, so here, OK.",
			"I think I know what this is.",
			"BRIAN YU: And Jason, how about one last instruction?",
			"DAVID MALAN: All right.",
			"STUDENT: Underneath, in the top most circle,",
			"under the three, so the row of three circles, draw a wide V,",
			"sort of shaped with two straight lines.",
			"DAVID MALAN: A wide V with two straight lines.",
			"OK.",
			"That part, I think, I nailed.",
			"Shall I switch over and reveal?",
			"So this is the URL I believe all of you were given.",
			"I have not visited it yet.",
			"But if I go and visit this now.",
			"Hey, that's not all that bad.",
			"All right, I definitely took a detour partway through.",
			"But here's another example.",
			"Had you just started with draw a snowman as follows, like,",
			"that might have helped orient me, truthfully, similar in spirit",
			"to Daniel's design that would have given you a mental model of what I,",
			"or given me a mental model of what it is I should have been drawing.",
			"So here, too, abstraction is hard.",
			"And even precision is hard and figuring out the right level of detail",
			"to operate at is kind of part of the process of problem solving.",
			"Though, now that I look at it, that's actually not half bad.",
			"Like, I definitely did the wrong thing over here.",
			"But very well done to all of our volunteers online.",
			"So remember these kinds of details when you're",
			"trying to explain some process to someone, when you're giving someone",
			"instructions, even if it's for something mundane in the real world,",
			"like going to run errands or pick up supplies at the market, being precise",
			"is certainly important, but the more precision you provide, the much easier",
			"it is for the person to get lost in those weeds.",
			"And so sometimes a higher level list of details is all that someone might need.",
			"So now that you have this ability to program and to do things",
			"that we've shown you in lectures and problem sets,",
			"and indeed, have the ability to figure out",
			"how to do things that we haven't even shown you,",
			"we wanted to take a moment to consider just whether you should do those things",
			"and, if you should, how you should do them.",
			"But beyond just answering these questions with your own instincts,",
			"we thought we would invite some of our colleagues",
			"from the Philosophy department to propose a more formal framework,",
			"a thought process by which we can approach problems",
			"when it comes to technology and the writing of code",
			"to help us decide, ultimately, just because I can code something,",
			"should I, and if so, indeed, how should I do that?",
			"So allow me to introduce our colleagues from the Philosophy department, Meica",
			"Magnani and also Susan Kennedy.",
			"Meica?",
			"MEICA MAGNANI: So hi.",
			"I'm Meica Magnani.",
			"I am a philosophy postdoc with the Embedded Ethics Program",
			"here at Harvard.",
			"SUSAN KENNEDY: Hi.",
			"I'm Susan Kennedy.",
			"And I'm also a philosophy postdoc with the Embedded Ethics Program at Harvard.",
			"MEICA MAGNANI: And before we get started,",
			"I'll just say a few things about the Embedded Ethics Program.",
			"So we are an interdisciplinary team of philosophers and computer",
			"scientists working together to integrate ethics into the computer science",
			"curriculum.",
			"The idea behind this approach is to embed tools of ethical reasoning",
			"into computer science courses themselves.",
			"The reason for this is that when making decisions about the design, deployment,",
			"or development of a piece of technology, one is, whether or not one realizes it,",
			"making ethical decisions.",
			"That is, making decisions which stand to have social, political,",
			"or human impact.",
			"At Harvard, we think it's important for computer scientists",
			"to be equipped with tools for thinking through these implications.",
			"SUSAN KENNEDY: Technology holds a lot of power and influence over us.",
			"And that means, by extension, that the people who design technology do, too.",
			"Now that you're starting to think about what responsibilities",
			"you might have as computer scientists, so you",
			"can avoid notable mishaps, like face mash, for instance,",
			"we're going to turn your attention to the topic of social media platforms",
			"and how they affect the distribution of and engagement",
			"with news and information.",
			"It would seem that this topic is especially relevant",
			"now, given the recent US presidential election, where political content has",
			"been dominating the internet and television broadcasts and controversy",
			"has played out on social media, garnering attention",
			"from around the world.",
			"Undoubtedly, technology has completely revolutionized",
			"the way information and news is both disseminated and consumed.",
			"Instead of a paper boy shouting, get your news here on the street corner,",
			"just about everyone uses the internet to stay up",
			"to date with what's happening, not just locally, but around the world.",
			"And in the past few years, social media platforms, in particular,",
			"have started to play a huge role in how people access, share,",
			"and engage with information.",
			"For instance, research shows that 44% of US adults",
			"report getting the news from Facebook.",
			"It's safe to say a lot has changed in recent years,",
			"owing to developments in technology.",
			"And this matters when we consider what's at stake, namely, the ability",
			"for the public to engage in discourse that",
			"supports a well-functioning democracy.",
			"So I'll first present you a brief overview of where we came from",
			"and where we are now, owing to technological developments",
			"and then consider what challenges we're faced with today.",
			"Before the internet, news and information",
			"was almost entirely in the hands of a few major broadcast stations and print",
			"media outlets, otherwise known as the mass media sphere.",
			"Since a few organizations were responsible for disseminating",
			"all the news, information was essentially",
			"filtered through a narrow lens or narrow aperture",
			"from organizations to a wide public audience.",
			"The journalists who are responsible for researching and writing",
			"the content for these organizations all shared a professional ethos.",
			"They were concerned with truth, representation of social groups,",
			"creating a forum for criticism, clarifying public values,",
			"and offering comprehensive coverage.",
			"And notably, since the aim was to produce",
			"content that appealed to a wide audience,",
			"there was less polarization and extremist commentary than we see today.",
			"But the journalists responsible for news coverage",
			"were very uniform in a lot of ways.",
			"There were relatively affluent, highly educated, mostly white, male,",
			"and so forth.",
			"And this had effects on the coverage of racial politics, economic policy,",
			"and views about the role of the US in the world.",
			"Moreover, there were seldom opportunities for the audience",
			"to respond, to develop new themes or topics,",
			"or level criticism against the mass media sphere.",
			"There weren't any likes and comment sections",
			"for the newspaper or television broadcasts.",
			"If you didn't like it, well, tough luck.",
			"This all started to change in recent years,",
			"as news coverage not only moved online, but onto social media platforms.",
			"We now live in a digitally networked public sphere.",
			"So instead of having a narrow aperture of communications,",
			"or just a few organizations to disseminate information to the public,",
			"we now have a digital sphere with a wide aperture, where lots of people",
			"can share news and information.",
			"More specifically, the sources of content",
			"are not just organizations and the professional journalists they employed,",
			"but the public and particularly, social media users.",
			"Anyone can tweet or post on Facebook, and anyone",
			"can read those tweets and posts.",
			"It's not only resulted in greater diversity",
			"of content, but greater access to information as well.",
			"If you want to follow the news, there are a ton of options",
			"and free places online you can access with just a few mouse clicks.",
			"These prospects of increased diversity and access",
			"are what led many people to believe that the digital sphere held",
			"great promise for improving the public discourse that",
			"supports a well-functioning democracy.",
			"And in some ways, this has been true.",
			"For example, thanks to Twitter and Facebook,",
			"we saw the mobilization of social justice movements,",
			"like Me, Too and Black Lives Matter.",
			"And the increased diversity of perspectives",
			"made it possible for individual researchers and scientists",
			"to weigh in on the CDC'S claims about coronavirus.",
			"So while the CDC did not initially say coronavirus was characterized",
			"by airborne transmission, leading to community spread,",
			"they ended up revising their stance after scientists",
			"took to Twitter with evidence proving that this was the case.",
			"While the digital sphere has brought about some improvements,",
			"it's also exacerbated some problems and created new challenges.",
			"For example, since anyone can create content, fact checking and monitoring",
			"have become much more difficult. People are",
			"left to fend for themselves when it comes to figuring out whether something",
			"they read online is trustworthy.",
			"We've also seen increased personalization with respect",
			"to news and information, where specific content could",
			"be targeted to specific users by the means of curated news",
			"feeds on social media and cable news stations cropping up",
			"that take a particular angle on the news that they cover.",
			"This is significant.",
			"Because we end up with a somewhat paradoxical effect.",
			"Despite a greater diversity in the content that's available,",
			"there's less diversity in the news and information people",
			"actually end up consuming, with the personalization of information having",
			"a tendency to reinforce a person's viewpoints,",
			"rather than challenge or broaden them.",
			"Additionally, in the absence of centralized sources of news,",
			"we've also seen different aims expressed by those creating and sharing content.",
			"Some have bypassed a concern for truth in an effort to garner more views",
			"and likes with extremist content or fake news.",
			"And fake news became a huge issue around the time",
			"of the 2016 presidential election, as there were concerns",
			"that the massive spread of misinformation on social media",
			"could influence or sway individuals political views.",
			"While the spread of misinformation has always been an issue,",
			"it's truly been exacerbated by the digital public sphere,",
			"with social media platforms essentially pouring gasoline on the fire.",
			"The dissemination of fake news explodes on social media",
			"because the structure of digital environments, from likes to retweets,",
			"allows a single post on fake news to go viral,",
			"reaching the screens of millions around the world.",
			"And there are serious worries about how fake news has played a role",
			"in amplifying political polarization.",
			"So while technology has made possible unique advantages,",
			"it's also brought on unique challenges.",
			"One major question that we're faced with now",
			"is figuring out how content should be regulated on social media platforms,",
			"if at all.",
			"Given the scale of the problem, some might be skeptical,",
			"believing that any form of content regulation would be impossible.",
			"There's just too many people posting online to fact check them all.",
			"And fake news spreads so quickly, it's hard to stop before it's already",
			"reached a huge audience.",
			"There's also worries that attempts to regulate",
			"content could end up becoming a form of censorship that violates",
			"the right to freedom of speech.",
			"But some people are more optimistic about the possibilities",
			"of designing social media platforms in a way that promotes and preserves",
			"democracy.",
			"In particular, there's a possibility that with responsibly designed",
			"algorithms and user interface choices, we",
			"might be able to slow the spread of fake news",
			"and more generally improve the ways information is disseminated and engaged",
			"with on social media.",
			"For example, some people believe that companies like Facebook, Twitter",
			"and YouTube have a responsibility to regulate content",
			"because of the enormous influence they have over us.",
			"In particular, it's thought that social media platforms have a responsibility",
			"to police fake news and reduce the power of data driven algorithms that",
			"personalize the user experience, even if doing these things",
			"would come at the cost of user engagement,",
			"resulting in less time spent on the platform and less advertising revenue.",
			"It's clear that the path going forward in terms",
			"of content regulation on social media platforms is going to be tricky.",
			"Whether or not we promote democratic ideals or undermine",
			"them will come down to the particular design choices we make.",
			"In order to use technology to create solutions",
			"to the problems we're facing today, we'll",
			"need to make informed decisions about design choices.",
			"And this requires some critical thinking about ethics and philosophy",
			"to figure out the best way to do this.",
			"But we're hoping that students like you, taking CS50,",
			"can harness your creativity, technical knowledge, and ethical reasoning",
			"to design technology in a responsible way.",
			"So I'm now going to pass things over to Meica,",
			"who will tell you about some philosophical concepts that'll",
			"help you think proactively about particular design",
			"choices and algorithmic tools that can be implemented to structure",
			"social media platforms in a way that promotes democratic public discourse.",
			"MEICA MAGNANI: In Democracy and The Digital Public Sphere,",
			"an article which offers a fantastic diagnosis of our situation,",
			"and from which Susan and I are drawing heavily",
			"upon for this lecture, the authors Joshua Cohen and Archon Fung,",
			"tell us that the bloom is off the digital rose.",
			"As Susan was describing, we had such high hopes",
			"for the democratizing potential of social media and the internet.",
			"But now we face an environment in which fake news runs rampant,",
			"citizens appear to be dramatically polarized,",
			"information swirls in its own isolated bubbles,",
			"and hate speech reaches appalling levels of vitriol.",
			"All of which stand to threaten, or so people speculate,",
			"the conditions required for an effective democracy.",
			"So the following questions arise, in what ways",
			"are the conditions of democracy threatened?",
			"What can or should be done about it?",
			"Is the structure of our technology responsible?",
			"Or is it just us, as human beings, creating these problems?",
			"In this module, we're focusing specifically",
			"on the issue of content regulation.",
			"Social media companies like Twitter, Facebook, and YouTube",
			"are now all in the game of trying to address these problems through platform",
			"design and features.",
			"From one angle then, they are acting in the service of protecting democracy",
			"by trying to get control over the spread of misinformation,",
			"the amplification of hate speech, and the deepening of polarization.",
			"However, from another angle, they're stepping in",
			"to shape the distribution of information.",
			"And depending on the particular design choices,",
			"might be set to be regulating or silencing",
			"speech, which of course, is at odds with democratic commitments",
			"to free speech and discourse.",
			"The point of this module, then, is to give you some tools",
			"to think through these issues, tools for understanding the problem,",
			"diagnosing the sources of the problem, and brainstorming solutions.",
			"In the remaining 10 or 15 minutes, I'm going",
			"to provide an overview of the main tools which",
			"you will find detailed in the readings.",
			"They are also the tools you will be asked to analyze in this week's lab.",
			"So first then, we need to think clearly about what",
			"is required for a healthy democracy.",
			"If we're going to be making claims about how tech threatens democracy,",
			"we better understand A, what a democracy is, and B, what sort of conditions",
			"support democracy, such that those conditions could come under threat.",
			"In their article, Archon Fung, who is a professor in political science",
			"here at Harvard, and Joshua Cohen, who is a political philosopher now working",
			"with the faculty at Apple University, provide us with these tools.",
			"So behind the idea of democracy is an ideal",
			"of what political society should be.",
			"Fung and Cohen reduce this ideal to three elements.",
			"First, the idea of a democratic society, a society",
			"in which the political culture views individuals as free and equal.",
			"Even though it is likely that these people have",
			"different interests, identities, and systems of belief, as citizens,",
			"they are committed to arriving m through reflection and discourse, principles",
			"that will enable them to work together while respecting their freedom",
			"and equality.",
			"Second is the idea of a democratic political regime, which",
			"is characterized by regular elections, rights of participation,",
			"along with associative and expressive rights",
			"that make participation both informed and effective.",
			"Third and lastly is the idea of a deliberative democracy,",
			"according to which political discussion should",
			"appeal to reasons that are suitable for cooperation",
			"amongst free and equal persons.",
			"So in justifying a policy, you cannot appeal to, say, your own religion,",
			"given that others do not necessarily hold those same beliefs.",
			"You can appeal to the notion of, say, religious freedom, but not",
			"the particular beliefs contained within the religion itself.",
			"So democracy, then, is basically an ideal",
			"that we govern ourselves by collective decision making, decision making that",
			"respects our freedom and equality.",
			"This decision making consists not only of the formal procedures of voting,",
			"elections, and legislation, it is also informed by the informal public sphere,",
			"that is, citizens identifying problems and concerns,",
			"discussing and debating problems, expressing opinions, challenging",
			"viewpoints, and organizing around causes.",
			"This is an absolutely critical part of the democratic decision-making process.",
			"It is where we, as the public, form, test, disperse, exchange,",
			"challenge, and revise our views.",
			"The flow of information, along with user engagement",
			"on Facebook, YouTube, and Twitter, are all part",
			"of this informal public sphere.",
			"In order that individuals can participate",
			"as free and equal citizens in this arena of public discourse,",
			"Cohen and Fung lay out a set of rights and opportunities",
			"that a well-functioning democracy will require.",
			"And these are the tools of analysis on offer.",
			"So first, rights.",
			"\"As citizens of a democracy, we have rights",
			"to basic liberties, liberties of expression and association.",
			"The right to expressive liberty is important",
			"not only for the freedom of the individual,",
			"so that he or she will not be censored, but also for democracy itself.",
			"It enables citizens to bring their ideas into conversation with one another",
			"and to criticize and hold accountable those who exercise power.\"",
			"Second is the opportunity for expression.",
			"\"Not only should we be free of censorship, but",
			"we should have fair opportunity to participate in public discussion.",
			"It shouldn't be the case that because someone is, say,",
			"wealthier or more powerful, that they have more opportunity to participate.\"",
			"Third is access.",
			"\"Each person should have good and equal access",
			"to quality and reliable information on public matters.",
			"That is, if we make the effort, we should",
			"be able to acquire this information.",
			"Effective participation in decision making requires being informed.\"",
			"Fourth is diversity.",
			"\"Each person should have good and equal chances to hear a wide range of views.",
			"We need access to competing views in order to have",
			"a more informed and reasoned position\"",
			"And lastly, number five, communicative power.",
			"\"Citizens should have good and equal chances to explore interests and ideas",
			"in association with others.",
			"And through these associations, to develop new concerns that",
			"might challenge the mainstream view.\"",
			"These rights and opportunities together provide critical conditions",
			"for enabling participation in public discussion.",
			"They might seem like a lot to keep track of initially,",
			"but if we're going to think through how social media threatens democracy,",
			"and more concretely, how platform design might promote or hinder democracy,",
			"these are valuable tools.",
			"We can use, say, the access condition, the idea",
			"that we should all have access to reliable information,",
			"as a lens of analysis.",
			"Does our platform prevent certain groups or users",
			"from accessing reliable information?",
			"Or we can use the diversity condition, the idea",
			"that we should all have access to a plurality of conflicting views",
			"as a lens of analysis.",
			"So for example, we might ask ourselves, does our platform",
			"create a filter bubble in which individuals are no longer confronted",
			"with opposing views?",
			"In addition to understanding what conditions support",
			"a democratic society, we also need to understand the purported problems",
			"before we can propose effective interventions.",
			"Consider fake news.",
			"Why are people so gullible when it comes to fake news?",
			"Why do they often repost without proper critical assessment?",
			"Regina Rini, in the reading, proposes that in order",
			"to understand the phenomenon of fake news,",
			"we should think about it as a form of testimony.",
			"When another person shares information with you,",
			"you typically take it to be true.",
			"This is because of the norms governing our practice of testimony.",
			"When you assert something, passing it on to others,",
			"you typically take responsibility for its truth.",
			"It is assumed that you have either acquired evidence",
			"for yourself or you've received this information from a source",
			"that you deem reliable.",
			"Most of our knowledge about the world comes through this practice.",
			"We could not possibly acquire evidence for all the beliefs we hold.",
			"So we often have to rely on sources we deem and hope to be credible.",
			"But social media, Rini points out, has unsettled testimonial norms.",
			"When someone posts a piece of news, we seem to hold two conflicting views.",
			"On the one hand, we see it as an active endorsement.",
			"The person posting has taken some degree of responsibility",
			"for the accuracy of their post, the same way one",
			"would before passing on information in a conversation.",
			"On the other hand, though, it's just a share.",
			"We see this attitude coming through when Donald Trump, called out",
			"on one of his questionable tweets, retorts with, eh, it's just a tweet.",
			"To fight fake news, then, Rini argues that we",
			"need to stabilize social media's norms of testimony so that, as she says,",
			"the same norms that keep us honest over cocktails",
			"will keep us honest in our posts.",
			"We need people to be held accountable for,",
			"or to have a sense of responsibility, for the information",
			"that they share with others.",
			"Her concrete proposal, give users a credibility score.",
			"So in practice, this would be an amendment to Facebook's system,",
			"using independent fact checking organizations,",
			"Facebook flags problematic news and warns users before they repost it.",
			"When a user tries to post something that has been identified",
			"as false or misleading, a pop up appears that explains the problem",
			"and identifies the original source.",
			"It then asks the user to confirm that they would",
			"like to continue with their repost.",
			"A user's credibility score, for Rini, would",
			"depend on how often they choose to ignore these warnings",
			"and pass on misleading information.",
			"Quote, \"a green dot by the user's name could",
			"indicate that the user hasn't chosen to share much disputed news.",
			"A yellow dot could indicate that they do it sometimes.",
			"And a red could indicate that they do it often.\"",
			"Unquote.",
			"The idea, then, is that a credibility score",
			"would incentivize users to take responsibility",
			"for what they share and would also give others a sense of their reliability",
			"as sources.",
			"So Rini comes up with this solution through a careful analysis",
			"of why we are so gullible to fake news.",
			"I will leave it up to you to consider this proposal",
			"in light of the various rights and opportunities required",
			"for a democratic public sphere.",
			"Does Rini's proposal violate or threaten freedom of expression?",
			"Does it promote or hinder our access to reliable information, our access",
			"to diversity of views, or does it promote or hinder",
			"our communicative power?",
			"It is these sorts of questions that we hope",
			"that you will start to ask yourself when thinking",
			"through the following sorts of issues.",
			"What problems do fake news, hate speech, polarization, et cetera",
			"pose to democracy?",
			"How successful are various attempts by companies like Twitter, YouTube,",
			"and Facebook to address these problems?",
			"And how might particular design features of social media platforms",
			"promote or hinder these particular rights and opportunities?",
			"Whether as a future computer scientist, a tech industry leader,",
			"or just as a user of these technologies, we hope asking these sorts of questions",
			"will help you navigate these tricky issues with a more critical eye.",
			"SUSAN KENNEDY: We're really looking forward to the sorts of design choices",
			"that you'll be making in the future.",
			"MEICA MAGNANI: Great.",
			"Thanks so much for having us here today.",
			"And best of luck to everybody.",
			"DAVID MALAN: Well, thank you so much to Susan and Meica for joining us.",
			"Indeed, in this coming week's lab, we'll have an opportunity",
			"to consider some of these issues in the context of some very",
			"specific real world scenarios.",
			"So we now thought we would take a look forward at what you can do",
			"and how you can do it after CS50 when it comes",
			"to the more practical side of things beyond computational thinking alone.",
			"So programming, of course, for many of you,",
			"this will be by design the only computer science or programming course",
			"that you take.",
			"And that's certainly OK.",
			"Indeed, we hope that you'll be able now to return",
			"to your own domains of interest in the arts and humanities, social sciences,",
			"or sciences and actually be able to have a concrete set of practical skills",
			"be it in Python or C or any of the other technical languages",
			"we looked at and can actually solve problems in your own preferred domain.",
			"And if you're interested in learning more about computer science",
			"itself and moving on in that world, we hope",
			"that you'll walk away with a solid foundation",
			"for further theoretical and systematic explorations of this particular field.",
			"But very practically speaking, we hope now",
			"that you can not only program, but also ask questions better,",
			"whether that's in the technical world or even in just the real world.",
			"Odds are, if you've ever asked a question on CS50's discussion forums,",
			"the teaching fellows or I might have very well responded with questions",
			"asking you to clarify.",
			"Or better yet, you would have provided us, in anticipation,",
			"with answers to all of the questions that we might have.",
			"And if you've noticed on Ed, we deliberately",
			"have this sort of template via which you're",
			"coaxed to answer, well, what are the symptoms that you are seeing?",
			"What's the error message that you're struggling with?",
			"What steps have you tried to resolve the problem?",
			"Because if we imagine in the real world, even just reaching out",
			"to some random company's customer service line,",
			"those are exactly the kinds of questions that someone else",
			"is going to have to ask you to better understand",
			"a problem from your own perspective.",
			"And so we would encourage you to think about, as you emerge from CS50 itself,",
			"just how to ask better questions of people.",
			"If you've got more information than they,",
			"how can you succinctly but correctly convey that information to them",
			"so that they can help you more efficiently.",
			"But also, finding answers.",
			"Like, we absolutely understand that many of CS50's weeks, all of CS50's weeks,",
			"maybe, have been quite the frustration.",
			"Because you quite often feel like, well, we didn't cover that in lecture.",
			"Or I didn't see that in section.",
			"And I see some noddings of the head.",
			"So this seems to be the case.",
			"And much as I would love to reassure otherwise, like,",
			"that was very much the intent.",
			"Because the last of the training wheels of any course like this",
			"now really do officially come off.",
			"And in the coming weeks, while we'll still",
			"be with you to lend a hand with final projects",
			"and answer questions along those lines, there's",
			"of course no specification for the final project telling you exactly what to do,",
			"or in what language to do it, or what libraries to use.",
			"Undoubtedly, in the coming weeks, you will",
			"run into error messages you haven't even seen before.",
			"And frankly, maybe I, maybe Brian, maybe the teaching assistants,",
			"and the course assistants haven't even seen those errors before.",
			"But the goal, of course, is to get you over those hurdles in a way",
			"that you can figure out how to do those things on your own.",
			"And so when it comes to just using the internet, be it Google, or Stack",
			"Overflow, or interacting with other humans,",
			"just finding answers when it comes to the world of programming",
			"or really just the world of problem solving more generally,",
			"we hope that is actually a lasting skill.",
			"And we hope that you've been able to do that with admittedly frustration,",
			"but with the safety net of the course underneath you all these months.",
			"But here on out, we hope you'll be more comfortable, again, being uncomfortable",
			"as you figure out new things.",
			"And part of that is just reading documentation.",
			"And here, too, this is a frustration that may very well never go away.",
			"Like, some documentation out there for certain languages or libraries, just",
			"isn't good.",
			"It was written by people that just don't think",
			"like you or I do, don't think with the same form of empathy as you might hope.",
			"And therefore, it's written at a very low level of technical detail,",
			"and they don't just tell you what does the function do.",
			"Or conversely, it's written at such a high level that, my God,",
			"you have to start looking at the source code of the library",
			"to even figure out how to use it.",
			"And you will see both extremes.",
			"But getting comfortable with reading things like Python's documentation,",
			"like some API's documentation is just going to empower you, we hope,",
			"all the more to just do much cooler things",
			"and solve more powerful problems on your own, ultimately.",
			"And then lastly, and this is perhaps the biggest one, teaching you",
			"how to teach yourself new languages.",
			"There is a reason we didn't spend that much time on Python.",
			"And we spent even less time on JavaScript.",
			"And about an equal amount of time on SQL.",
			"We spent a number of weeks on C, not because C",
			"is more important than any of those languages,",
			"but because along the way, many of you, most of you",
			"were just learning programming itself.",
			"And even as the language has changed and evolved as the course went on,",
			"the ideas didn't go away.",
			"There were still functions, and conditions, and loops, and even",
			"events by terms.",
			"And, again, so we hope that you walk away from a class like this",
			"not thinking that, oh, I learned how to program in C.",
			"Or oh, I learned how to program in Python.",
			"Because none of us have been experts at those things yet.",
			"But you certainly are now more expert at just being a programmer",
			"and figuring out what holes you need to fill in in your knowledge, what",
			"gaps you need to fill in order to figure out,",
			"oh, what is the syntax for this same approach in this language",
			"as I've already seen in another.",
			"And that's, indeed, why we compared so many of these languages side",
			"by side to just reinforce that the ideas are no different, even",
			"though the syntax is going to require a bunch of Googling, a bunch of asking.",
			"And that, too, is something we hope you'll be able to do on your own",
			"as the next and best thing comes along well after these languages.",
			"Well, speaking of training wheels, you're",
			"welcome and encouraged to keep using CS50 IDE for your final project.",
			"And heck, you can use it even after that for other courses or projects.",
			"But at the end of the day, this, too, is probably a training wheel",
			"that you should take off for yourself.",
			"The IDE is designed to be representative of a real world programming",
			"environment.",
			"But we definitely did a lot of things for you.",
			"We installed all the libraries you might need over",
			"the course of the semester for you.",
			"We've got these nice commands that end in the number 50.",
			"Those don't tend to exist in the real world when you're at your first job,",
			"or you're going back to your own department",
			"and solving some problem in code, there's",
			"not going to be a help50 longer term.",
			"And so what we thought we would do, too, is spend just a few minutes",
			"giving you a sense of what are some of the more industry standard",
			"tools that you should consider using, playing with, perhaps",
			"over break or in the months to come, so that you know exactly how to do",
			"the same kinds of things you did this term, but on your own Mac",
			"or PC or some other device.",
			"So for instance, if you would like to install a set of command line tools",
			"on your Mac or PC, turns out some of them are already there.",
			"Indeed, I mentioned at one point that Mac OS",
			"has under its applications folder utility's terminal a terminal window.",
			"And Windows has an analog as well.",
			"But there's other commands that don't necessarily come with your Mac or PC,",
			"for instance, a compiler for C or some other tools.",
			"And so we would encourage you to visit URLs like these on your Mac or PC,",
			"respectively, if you'd like to just install more of the command line tools",
			"that you saw and used in CS50 in your own environment.",
			"Another tool we would recommend that you read up on, or in this case",
			"watch, a video by Brian, is Git.",
			"Git is an example of version control, a fundamental building",
			"block of any good software practice these days.",
			"We kind of use Git in CS50, but we hide this detail from you.",
			"Any time you have run check50 or submit50, we underneath the hood,",
			"have been running an open source command called Git, which pushes your code,",
			"in this case from CS50 IDE to GitHub.com, which is just one",
			"of several popular websites via which you",
			"can host code, share code, collaborate on code, run automated tests,",
			"and the like.",
			"But Git itself can be used to put an end to the convention",
			"that you probably have, even with things like Microsoft Word or Google Docs,",
			"where when you want to save something or another copy of a file,",
			"maybe you just changed the end of the file name to 2,",
			"and then the next time to 3, or to 4.",
			"Or maybe you do dash Sunday night, dash Monday morning.",
			"I mean, I'm still guilty of this sometimes when I",
			"want to version my files.",
			"There are better ways to do that.",
			"And so if you find yourself in the future,",
			"doing something that you think there's got to be a better way,",
			"Git is an example of one of those better ways.",
			"And if you watch this particular video, read",
			"up a bit more, it will help you not only maintain multiple versions, in essence,",
			"backups of your own code, it will also empower you ultimately",
			"to collaborate with others.",
			"As for text editors, the tool that you might",
			"use to actually write code, perhaps one of the latest and greatest and most",
			"popular out there these days is something called VS Code.",
			"This is an open source tool that you can download on your own Mac and PCs.",
			"Increasingly, it's available on the web as well.",
			"But this is one of the most popular tools, certainly, out there today.",
			"But it's just a text editor.",
			"And there are absolutely alternatives to each and every one of these tools",
			"that you're certainly welcome to take a look at as well.",
			"Well, if you're interested in the web side of things,",
			"and you want to host a website, like a static website, just",
			"your own personal homepage, GitHub pages is a thing.",
			"Netlify is a thing.",
			"And dot dot dot, there are so many other web hosts out there,",
			"many of which offer free or student level",
			"accounts so that they don't necessarily need to even cost anything.",
			"But static is different from dynamic.",
			"And if you actually want to host a web application that actually takes",
			"user input, stores things in a database, does",
			"more interesting things than a static website,",
			"you might want to use something called Heroku, which is just",
			"a popular third party service that also has a free entry level account that you",
			"can use to start playing with, quite commonly used",
			"by students for final projects.",
			"And then there's other providers out there, bigger cloud providers,",
			"so to speak, like Amazon, and Microsoft, and Google,",
			"for which the learning curve's perhaps a little higher.",
			"But they, too, are really good typically about providing discounts",
			"or free accounts for student uses as well.",
			"How to stay abreast of topics in technology.",
			"We focus, of course, in a class like this really on fundamentals.",
			"But you're not going to be able to pick up the news in any form down the road",
			"and not see something that's technology related.",
			"And if you'd just like to keep your fingers on the pulse of things",
			"in the tech world more generally, here's just a few places",
			"that you might enjoy staying abreast of.",
			"So Reddit has a couple of different communities, or subreddit, specifically",
			"about programming, both for experienced programmers",
			"and those of us who are still learning.",
			"Stack Overflow, of course, you've probably",
			"used to solve small problems over the course of the past term.",
			"Server Fault is similar in spirit to that,",
			"but it's focused more on administration, Linux-type stuff as well.",
			"Techcrunch is a popular place, not just for consumer-focused news,",
			"but just really anything that's trending in tech.",
			"And then a website called Hacker News on YCombinator's site",
			"that also is a place to just glance at once in a while",
			"because you'll see the latest and greatest libraries or something",
			"that's quite nascent.",
			"So if in general you just want to get a sense of what's new",
			"and what's trending out there in the tech world, things",
			"that you should just be aware of even if you don't care",
			"to get into the weeds of doing those things hands on,",
			"these are all good sites and surely others out there as well.",
			"And then, CS50, of course, has its own online community, some of which",
			"some of you have been part for some time, in high school or even prior.",
			"Please feel free to keep in touch with us in some way,",
			"or give back a little something to your successors who",
			"might take this or another course down the road",
			"and participate not only in asking questions in these communities here,",
			"but also in answering others' questions as well.",
			"So we thought we would do a little less of the talking",
			"now and turn things around for a sort of final community activity together.",
			"Thanks to many of you who have contributed questions",
			"over the past couple of weeks.",
			"Thanks to Brian, we thought we'd put together a CS50 quiz show",
			"on which to end this final lecture.",
			"These are questions written by you, by the staff, by Brian.",
			"And it'll be an opportunity for everyone to buzz in",
			"with their answers to some 20 questions that we have prepared in advance.",
			"Time is of the essence.",
			"So your score will be higher if you buzz in more quickly.",
			"So it's important not only to be correct,",
			"but also to be fast for this particular one as well.",
			"And in just a moment, I'm going to go ahead and share my screen.",
			"And, again, we'll have some 20 questions here, all of them drawn from,",
			"inspired by CS50 in some form.",
			"And after each question, depending on how many people get it right or wrong,",
			"we'll take a moment to at least explain where it is you went right",
			"or where it is you went wrong.",
			"All right, Brian.",
			"Ready on your end?",
			"BRIAN YU: We are ready to go.",
			"DAVID MALAN: All right, well, let's go ahead and take a look",
			"with the first question here.",
			"What are the steps for compiling source code into machine code?",
			"Preprocessing, compiling, assembling, and linking?",
			"Writing, compiling, debugging, and testing?",
			"Processing, creating, asserting, and clang?",
			"Or make?",
			"Go ahead and buzz in on your phone or laptop or desktop,",
			"using that same URL that Brian provided.",
			"You've got 20 seconds for each question, two of which now remain.",
			"That's it for time.",
			"Let's go ahead and take a look at the results here.",
			"It looks like 70% of you said preprocessing, compiling, assembling,",
			"and linking.",
			"Brian, would you like to tell us if that's right?",
			"BRIAN YU: Yes.",
			"That is the correct answer.",
			"Preprocessing first, compiling, assembling, and linking, all of that",
			"is behind the scenes.",
			"So you don't necessarily think about every time you compile.",
			"But those are, indeed, the steps.",
			"DAVID MALAN: And to be fair, make is arguably an abstraction",
			"for all of that insofar as it just kicks off the whole process.",
			"But I think a little more precisely, an answer to steps would be,",
			"indeed, those four things there.",
			"All right, let's take a look at the scoreboard here.",
			"We have a whole number of guest accounts.",
			"Guest number 200 is in the lead, but tied with several other guests here.",
			"So those of you with 1,000 points buzzed in really quickly.",
			"So again time is of the essence.",
			"Next question, what is the runtime of binary search?",
			"Is it O of 1, O of log n, O of n, or O of n squared?",
			"15 seconds remain, the runtime of binary search.",
			"Recall, this was one of the first algorithms we looked at.",
			"It was first incarnated with a phone book,",
			"even if we didn't call it that by name early on.",
			"Brian, let's take a look at the results.",
			"Looks like 61% of you say log n.",
			"Brian?",
			"BRIAN YU: Log n is the correct answer.",
			"If you remember that phone book, the question",
			"really came down to how many times can we",
			"divide that phone book and half again and again",
			"and again, until we get down to just one page.",
			"And that turns out to be log of n if three are n pages in the phone book.",
			"DAVID MALAN: Indeed, and sort of pro tip moving forward in life, any time",
			"you see something happening in half and half and half and half,",
			"odds are there's going to be an algorithm involved",
			"somewhere in the analysis thereof.",
			"All right, next leaderboard here, guest 200 slipped down a little bit.",
			"But we have a whole bunch of people tied in first place for 2,000 points now.",
			"Next question, which of these animals was the first",
			"to be mentioned in a CS50 lecture?",
			"Llama, python, duck, cat.",
			"15 seconds remain.",
			"Which was mentioned first in a CS50 lecture?",
			"And let's see the results.",
			"Looks like cat just barely eked out duck with 51%.",
			"Brian?",
			"BRIAN YU: And cat is, in fact, the correct answer.",
			"Llamas showed up in Lab 1, but they were not mentioned in lecture.",
			"The duck didn't show up until a little bit",
			"later when we talked about debugging.",
			"And Python was briefly mentioned at the end of the lecture.",
			"But it was after we introduced ourselves to Scratch.",
			"And the main character in Scratch is, of course, the cat.",
			"DAVID MALAN: All right, we're probably going to see a bit of spread here soon.",
			"We have a whole bunch of people with 3,000, though.",
			"But the names are starting to vary.",
			"Let's move on to the next question.",
			"Every time you malloc memory, you must also be sure to--",
			"realloc, return, free, or exit?",
			"Every time you malloc memory, you should also be sure to realloc,",
			"return, free, or exit?",
			"Recall that malloc was the source of a lot of segmentation faults",
			"mid-semester.",
			"The responses now are 78% said free.",
			"Brian, do you concur?",
			"BRIAN YU: And they are all correct.",
			"Whenever you malloc memory, ask the computer for some memory dynamically.",
			"When you're done with it, you should give it back to the computer",
			"by calling free.",
			"DAVID MALAN: Indeed, and Brian, as a teachable",
			"moment, why is it that we never had a call free forget_string, which we now",
			"know underneath the hood is using something",
			"like malloc to allocate memory?",
			"BRIAN YU: So get_string was a function in CS50's library.",
			"And CS50's library takes care of that memory management process for you.",
			"So you didn't have to worry about freeing all of that memory yourself.",
			"DAVID MALAN: Indeed, but anytime you call malloc, you must call free.",
			"All right, the leaderboard here looks like we have",
			"guest 600 still in the lead with 4,000.",
			"Next question.",
			"What is a race condition?",
			"When conditions are nice out for racing?",
			"When two things happen at the same time and produce an unexpected result?",
			"When a line of code is executed too quickly?",
			"When a line of code is executed too slowly?",
			"What is a race condition?",
			"Ah, things just escalated quickly.",
			"But you'll recall this came up in the context of SQL.",
			"And databases, 0 seconds, let's see.",
			"85% said when two things happen at the same time",
			"and produce an unexpected result. Brian?",
			"BRIAN YU: That is the correct answer.",
			"I appreciate that at least 1% of people said when conditions outside",
			"are nice for racing.",
			"But in the context of computer science, at least,",
			"when two things happen at the same time and could produce an unexpected result,",
			"that is what we would refer to as a race condition.",
			"DAVID MALAN: Indeed, recall that's how Brian and I ended up",
			"with too much milk in the refrigerator.",
			"Because we both inspected the state of that variable",
			"at essentially the same time.",
			"All right, the leader board here.",
			"Now we have a whole bunch of people with 5,000 points.",
			"Let's move on.",
			"Does zooming in on a photo let you enhance it to generate more detail?",
			"Yes, just like in CSI.",
			"No, a photo only has a certain amount of detail.",
			"Does zooming in on a photo let you enhance it to generate more detail?",
			"And I will admit, I was watching some show recently and thought of you",
			"all when they literally said, enhance.",
			"All right, 0 seconds.",
			"Looks like 93% of you said, no, a photo only has a certain amount of detail.",
			"7% of you said yes, just like in CSI.",
			"Brian, can you help us reconcile the two?",
			"BRIAN YU: The 93%, in this case, are correct.",
			"A photo only has a certain number of pixels.",
			"And if you keep zooming in on one pixel, you're",
			"not going to be able to generate additional detail that",
			"wasn't there before.",
			"DAVID MALAN: And to be fair, that's kind of sort of changing.",
			"Or at least the answer is getting a little harder nowadays",
			"with machine learning or artificial intelligence,",
			"where algorithms sort of figure out what level of detail",
			"could or should be there.",
			"But that really is just statistical inference,",
			"that is not actually recovering information that was ever stored",
			"on the camera or some other device.",
			"All right, the leaderboard now is at 6,000 points with these folks tied.",
			"Which of the following is not a characteristic of a good hash function?",
			"Deterministic output, randomness, uniform distribution, efficiency.",
			"Things just got real again.",
			"Which of the following is not a characteristic of a good hash function?",
			"Recall we used hash functions in the context of hash tables",
			"when talking about data structures.",
			"All right?",
			"One second.",
			"The answers are more spread this time.",
			"62% don't like randomness.",
			"Brian, should they?",
			"BRIAN YU: And that is the correct answer.",
			"Randomness is not a characteristic of a good hash function.",
			"You want your hash function to always give you",
			"the same output given the same input.",
			"That way you can rely on whatever the output of it is.",
			"If it's random, it's going to be hard to use.",
			"DAVID MALAN: Indeed, consider a spellchecker",
			"that randomly says yes or no.",
			"This is a word, probably not a property you want.",
			"All right, the leaderboard now, we're eking our way up to 7,000 points,",
			"but finally starting to see some spread.",
			"So a few of you haven't been quite quick or correct enough.",
			"Next question, what does FIFO stand for?",
			"FIFO.",
			"Is it a common dog's name, your credit score, first in, first out,",
			"function input, file output?",
			"What does FIFO stand for?",
			"I'll be curious to see the spread here.",
			"Let's see.",
			"80% of you said first in, first out.",
			"Brian?",
			"BRIAN YU: That is correct.",
			"And that was what we were using to describe",
			"what would be called like a queue, where the first thing in the queue",
			"is the first thing that comes out of the queue.",
			"So it obeys that FIFO ordering.",
			"DAVID MALAN: Indeed, let's see the leaderboard here.",
			"All right, we have some 8,000s, but more in the 7,000 range.",
			"Next up is a more colorful question.",
			"Which of the following would represent pink using RGB values?",
			"And I'll let you read these on your own.",
			"And surely, there's some Googling happening behind the scenes now.",
			"But that's OK.",
			"In fact, Google is pretty smart.",
			"If you type in a hexadecimal code, it might even",
			"show you a little color wheel or swatch.",
			"All right, let's take a look at the results.",
			"Looks like 55% of you said ffd0e0.",
			"Brian?",
			"BRIAN YU: And that is correct.",
			"So those RGB values are like six different values,",
			"where each two correspond to one color, two for red, two for green,",
			"two for blue.",
			"This is all in hexadecimal.",
			"And pink would be a lot of each of them.",
			"Because it's very close to white, which is, like,",
			"all red, all green, and all blue.",
			"But it's more red than it is green and blue.",
			"And so that one, ffd0e0, is a lot of red, a little bit less green,",
			"and a little bit less blue.",
			"DAVID MALAN: Indeed.",
			"All right, let's see where we're at here.",
			"We're now up to-- interesting.",
			"No one has a perfect score anymore.",
			"But guest 200 is still in the lead with just shy of 9,000 points.",
			"In C, which of the following lines of code allocates",
			"enough memory for a copy of the string s?",
			"I'll let you read these.",
			"In C, which of the following lines of code allocates",
			"enough memory for a copy of the string s?",
			"Bunch of viable choices here, it would seem.",
			"And time, let's take a look at the results.",
			"Looks like 46% said malloc of size s.",
			"But Brian, 33% said malloc of strlen of s plus 1.",
			"Who is right?",
			"BRIAN YU: And in this case, the minority, the 33% are correct here.",
			"Malloc, remember, takes as its argument the number of bytes of memory",
			"that you want to allocate.",
			"And if you have a string and you want to figure out how many bytes you need,",
			"first thing you need to know is figure out",
			"how long is that string. strlen will tell you",
			"how many characters are in that string.",
			"But you do need one additional byte, because at the end of every string,",
			"we have that null terminating character.",
			"And we need one byte of memory for that.",
			"So strlen of s will give you the length of the string plus 1.",
			"That's how many bytes you need for memory.",
			"DAVID MALAN: Indeed.",
			"And see, you get nothing for free.",
			"Anything you want you need to do yourself.",
			"And indeed, the plus 1 is a problem for you to solve.",
			"The distribution now, guest 200 still in the lead with just",
			"shy of 10,000 points.",
			"That was question 10.",
			"We're in the second half of the game.",
			"How should you organize your clothes to be cool?",
			"This is number 11.",
			"Stack, queue, dictionary, binary tree.",
			"How should you organize your clothes to be cool?",
			"You might recall Jack and Lou, who taught us this one.",
			"Two seconds remain.",
			"And it looks like 48% said queue, Brian.",
			"BRIAN YU: And that is correct.",
			"So from that video with Jack and Lou, there",
			"were different ways of organizing the clues.",
			"But the conclusion of that video was, you",
			"want to put your clothes in a queue.",
			"So that after you're done with one, you put it at the end of the queue.",
			"And you use something else before you go back to the one you already wore.",
			"DAVID MALAN: Indeed.",
			"All right.",
			"And the leaderboard now, looks like guest 10 broke 10,000.",
			"But so did a bunch of other people.",
			"Next question, what is a segmentation fault?",
			"When a computer runs out of memory, when our program tries",
			"to read an empty file, when a program tries to access memory that it",
			"shouldn't, when an earthquake happens.",
			"Looks like a lot of these could be pretty close.",
			"Two seconds.",
			"And let's see.",
			"Looks like 80% said when a program tries to access memory that it shouldn't.",
			"Brian?",
			"BRIAN YU: That is the correct answer.",
			"Segmentation fault can happen if you're trying",
			"to touch memory that you're not supposed to have access to inside of a program.",
			"DAVID MALAN: And for the 13% of people who",
			"said when a computer runs out of memory, why is that not quite the answer here?",
			"BRIAN YU: So the computer could run out of memory.",
			"Where when you call malloc, malloc might return null,",
			"because there's no available memory to allocate.",
			"But as long as you check for that, and we try and encourage you,",
			"whenever you're mallocing memory, to check to see if the value you get back",
			"is null.",
			"That can help you to avoid those types of errors.",
			"DAVID MALAN: So let's take a look at the board now.",
			"11,000 something for guest 200.",
			"Let's now proceed with this question.",
			"Which of the following types of overflow can result from recursion",
			"without a base case?",
			"Heap overflow, integer overflow, stack overflow, buffer overflow.",
			"And all forms of overflow, indeed, came up.",
			"One of them is also, of course, the name of a popular website.",
			"But all of these are actual things.",
			"But which is correct?",
			"All right, let's see the results.",
			"Looks like 61%, 60% went with stack overflow.",
			"Brian?",
			"BRIAN YU: And that is correct.",
			"Every time you call a function, you end up getting a little bit of memory",
			"on the stack for that function.",
			"And if you keep calling that function recursively over and over",
			"and never stop, because there's no base case,",
			"then you can run out of stack space.",
			"And we call that a stack overflow.",
			"DAVID MALAN: Indeed.",
			"All right, let's see the leaderboard now.",
			"Guest 200, still the one to beat.",
			"But guest 216 is not too far behind.",
			"Next question.",
			"In the town of Fiftyville, what were the names",
			"of the three people who witnessed the rubber duck robbery?",
			"I'll let you read these.",
			"In the town of Fiftyville, what were the names of the three people",
			"who witnessed the rubber duck robbery.",
			"A new problem this year, recall that he disappeared altogether from the IDE",
			"for that week.",
			"All right, let's see the results.",
			"Brian, this one is close.",
			"33% said Ruth, Eugene, and Raymond.",
			"BRIAN YU: And Ruth, Eugene, and Raymond is correct.",
			"They've got more responses than any of the others.",
			"It was tricky.",
			"But yeah, that's the correct answer.",
			"There wasn't a whole lot of reason behind the names.",
			"I put a lot of thought into the story itself.",
			"But not a lot of thought to the names.",
			"Those were kind of just randomly selected.",
			"But those were the names of the witnesses.",
			"DAVID MALAN: Indeed.",
			"And the leaderboard now, we still have guest 200 is the one to beat.",
			"This is question 15.",
			"So we are nearing the end, still chance to pull ahead.",
			"Which of these command line programs checks your code for memory leaks?",
			"Valgrind, clang, mkdir, make.",
			"Notice that none of these have 50 on it, which means these are all real world",
			"commands that you would continue to see on your own Mac or PC",
			"or some future Linux system.",
			"And let's see the results.",
			"Here we have valgrind, the clear winner, 78%.",
			"Brian?",
			"BRIAN YU: And that's the correct answer.",
			"That's the program you can use in order to check your program",
			"to see if you have any memory leaks, to see",
			"if you're touching memory you shouldn't, if you're forgetting to free something.",
			"Valgrind is useful for all of that.",
			"DAVID MALAN: And if I may, I feel like 5% of you are just messing with us now.",
			"Hopefully, but we shall see.",
			"All right, last five questions to go.",
			"After taking a look at the leaderboard now, guest 200's still up at the top.",
			"Which of the following exists in C, but not Python.",
			"Boolean expressions, do-while loops, recursive",
			"functions, floating-point numbers.",
			"Which of the following exists in C, but not Python?",
			"An interesting comparison between two languages that goes beyond syntax.",
			"All right.",
			"Time's up.",
			"Let's take a look.",
			"Looks like 68% went with do-while loops.",
			"Brian?",
			"BRIAN YU: That is correct.",
			"Python has for loops.",
			"Python has while loops.",
			"But it doesn't have do-while loops in the same way that C does.",
			"You'd have to find some other way of trying to achieve",
			"that same kind of logical idea.",
			"DAVID MALAN: Indeed.",
			"And Brian, what was the approach that we took when we",
			"tried to recreate that some weeks ago?",
			"BRIAN YU: Yeah.",
			"So one approach to it is having an infinite loop, while true,",
			"that will just always repeat.",
			"And then when you reach a point where you can exit the loop,",
			"you can use the command break to get out of the loop",
			"and move on to the rest of the program.",
			"DAVID MALAN: Indeed.",
			"All right, let's take a look at the board.",
			"Guest 200 still now at 15,938, but still a few close folks behind.",
			"What HTTP request method should you use when sending private information",
			"like a password?",
			"GET, POST, SELECT, or TEXT?",
			"Which HTTP request method should use when sending",
			"private information like a password?",
			"Take a look at the results.",
			"All right.",
			"And the distribution is a lot of people said POST, Brian, 74%",
			"BRIAN YU: And they are correct.",
			"Yeah, if it was a get request, then you would end up",
			"with sensitive information inside the URL that might show up",
			"in your browsing history, for example.",
			"So to be secure, you want to be sure to use the POST request",
			"method for that type of stuff.",
			"DAVID MALAN: And to be clear, don't do this.",
			"Get is possible, and we saw how to do that.",
			"But of course, that then ends up in your history and other exposed places.",
			"SELECT and TEXT were not HTTP verbs.",
			"So POST is indeed spot on.",
			"All right, only three questions remain.",
			"Guest 200 is still the one to beat, followed by guest 216.",
			"What data structure allows for constant time look up for words in a dictionary?",
			"A linked list, a binary search tree, an array, or a trie?",
			"Recall that a dictionary was an abstract data",
			"type, insofar as you could implement it in different ways.",
			"But to get constant time look up, you might want",
			"to use one of these over the others.",
			"Let's see the results.",
			"Interesting.",
			"Brian, 32% said trie.",
			"Can you help us out here?",
			"BRIAN YU: Yeah.",
			"The trie is the correct answer.",
			"For all of the others, the linked list, the binary search tree, and the array,",
			"as you have more and more words in the dictionary,",
			"it's going to take longer and longer to find a word,",
			"as you have to either linear search through it",
			"or you have to go down through various nodes in the binary search tree.",
			"The trie on the other hand, it only depends upon the length of the word",
			"that you're looking up.",
			"It doesn't matter how many words are in the dictionary.",
			"You just follow one node for each letter in the word you're looking up.",
			"And you'll find that word in constant time.",
			"DAVID MALAN: And Brian, if constant time, Big O of 1 is so good,",
			"why not use tries, then, for everything?",
			"BRIAN YU: Well, there are trade offs for everything.",
			"The trie gives you theoretically constant time.",
			"But one of the big trade offs is memory.",
			"That tries end up using much more memory to be",
			"able to store a dictionary than many of those other data structures would.",
			"DAVID MALAN: Indeed.",
			"Let's look at the results.",
			"And guest 200 still at the lead.",
			"But guest 752 is now nipping at their heels.",
			"We have two final questions.",
			"And speed, again, does matter.",
			"What is a cookie?",
			"Data used to identify your computer to websites, a delicious snack,",
			"both of the above, or none of the above.",
			"This is a tough one, Brian.",
			"Especially if there's only one right answer.",
			"We might see a bit more of a split.",
			"Which of these is a cookie?",
			"All right, let's see the results.",
			"Data used to identify your computer to websites with 60%.",
			"Both of the above was 35%.",
			"Only 2% of you like cookies alone.",
			"Brian?",
			"BRIAN YU: Both of the above was the correct answer.",
			"I'll remind that all of these questions were written originally by students",
			"and the answer choice of students selected as the correct one was",
			"both of the above.",
			"DAVID MALAN: All right.",
			"And now the second to last leaderboard, Guest 200 is still in the lead.",
			"But there's been some variance toward the bottom there.",
			"Very last question of CS50 itself.",
			"What's your comfort level now?",
			"And we'll let you decide among these answers, too.",
			"All right.",
			"Answers are all in.",
			"Let's take a look at the distribution.",
			"Looks like 43% of you said you're among more of those more comfortable.",
			"24% of you went with the second.",
			"19%, very fascinating distribution from top to bottom.",
			"But the point is that you are all indeed now officially inducted",
			"into those more comfortable.",
			"Thank you so much for joining us in CS50.",
			"We cannot wait to see your final projects.",
			"This, then, is the end.",
			"And this was CS50.",
			"",
			"[MUSIC PLAYING]",
			""
		],
		"is_youtube": false
	}
}
