{"text_001": {"section": "Week 1", "subsection": "Welcome (start here)", "unit": "Welcome", "body": ""}, "text_002": {"section": "Week 1", "subsection": "Welcome (start here)", "unit": "Welcome", "body": "Welcome to Computer Science 101! For us to offer the best course experience possible, we'd like to ask you to answer a few questions in the form of a survey. Whether you are just browsing or you are determined to complete the entire course, the more we know about you, the better we can serve all learners in this course. As one of the first learners in this new offering, your responses will be especially important to us. Please click the button below to share your responses. Open Survey"}, "text_003": {"section": "Week 1", "subsection": "Introduction", "unit": "Stanford CS101 Introduction", "body": "Stanford CS101 Introduction Nick Parlante - Stanford University ( Nick's Home Page ) CS101 on Stanford Online Basic ideas of how computers work Not a magic box, basics understandable Look inside, how they work (play) Understand what they can do No computer background required at all \u00a0Curious .. next step This class explores the essential qualities of computers, how they work, what they can and cannot do, and requires no computer background at all. Acknowledgements: thanks to Google for supporting my early research that has helped me create this class. Format note: Video + Document Each video has a companion written document Written explanations, diagrams, live code examples Switch or revisit the document from the video Review, curious about link ... it's all there Fundamental Equation of Computers The fundamental equation of computers is: \u00a0\u00a0Computer = Powerful + Stupid Powerful - look through masses of a data  -Billions of \"operations\" per second Stupid \u00a0-Operations are simple and mechanical \u00a0-Nothing like \"insight\" or \"understanding\" In movies - the mechanical stupidity of computers is missing ( HAL 9000 video ) Exercises: Powerful + Stupid ... comes through vividly Stupid, but very useful. How is that? That's what CS101 is about  -Visit this funny computer world, play, see how it works  -Understand how computers get useful work done  -Ultimately not intimidated, computer is not some magic box Hidden agenda: open eyes for some, more computer science courses Computers are very powerful, looking through large amounts of data quickly. Computers can literally perform billions of operations per second. However, the individual \"operations\" that computers can perform are extremely simple and mechanical, nothing like a human thought or insight. A typical operation in the language of computers is adding two numbers together. So although the computers are fast at what they do, the operations that they can do are extremely rigid, simple, and mechanical. The computer lacks anything like real insight. Or put another way, computers are  not  like the HAL 9000 from the movie 2001: A Space Odyssey. If nothing else, you should not be intimidated by the computer as if it's some sort of brain. The computer is a mechanical tool which can do amazing things, but it requires a human to tell it what to do. High Level - How Does a Computer Work? Computer is driven by \"code\" instructions (lots more later) Instructions simple, mechanical, e.g. add 2 numbers The computer \"runs\" a long series of instructions Run through the instructions, purely mechanical Question: if the computer is so mechanical... But So Many Useful Features Think of all the useful computer features (phone, camera)  --Email, instant messaging  --MP3 audio  --Red-eye reduction If computers are so stupid... how are they so useful? What connects the two sides? Programmers Make It Happen Human programmer thinks of a useful feature  --Creativity, insight about problems, computers Programmer thinks through the solution \"Algorithm\" -- steps to accomplish Breaking it down, writing code for the computer Dumbing it down for the computer This is computer programming Every useful feature you've ever used has this pattern This is a great picture Best features of both sides: inexpensive/fast + creative insight CS101 explorations: code and algorithm Since the computer is totally mechanical and stupid -- how do they manage to do so many useful things? The gap between the computer and doing something useful is where the human programmer creates solutions. Programming is about a person using their insight about what would be useful and how it could be done, and breaking the steps down into code the computer can follow. Next: start with code"}, "text_004": {"section": "Week 1", "subsection": "Code Writing", "unit": "Code Writing", "body": "Code Writing In this section, write some code and run it Every action in the computer comes down to code To understand the nature of computers... You have to play with code a little Code  refers to the language the computer can understand. For these lectures, we'll write and run short snippets of code to understand what the essential qualities of computers, and especially their strengths and limitations.  Experimenting with code, the nature of computers will come through very clearly ... powerful in their own way, but with a limited, mechanical quality. IMHO, this mixed nature of computers is something everyone should understand, to use them well, to not be intimidated by them.  Before Coding - Patience We'll start with some simple coding below First code examples are not flashy Code is like lego bricks... -Individual pieces are super simple -Eventually build up great combinations But we have to start small Foreshadowing Within a few hours of lecture, we'll be writing simple visual effect code with the monkey, moon, and banana:  But for now we just have print() Patience  We're going to start by learning a few programming elements, and later we'll recombine these few elements to solve many problems. These first elements are simple, so they are not much to look at on their own. Be patient, soon we'll put these elements together -- like lego bricks -- to make pretty neat projects. Javascript Computer Langauge \"Javascript\" is a popular computer language CS101 coding: Javascript + some CS101 specific features Not the whole Javascript language, just bits Just enough code to experiment with key ideas For this class, we'll use a variant of the language known as \"Javascript\", with some added features for this course. The Javascript language works in the web browser, so all of our experiments can live right in the browser with nothing else required. We'll look at just the of Javascript needed for our experiments, not the full language one would see using Javascript professionally. That said, Javascript is a real language and our code is real code. Our small programs show the important features of code, while keeping things fast and small.  1. First Code Example - Print Here is code which calls the \"print\" function. Click the Run button below, and your computer will run this code, and the output of the code will appear to the right. print(6);\nprint(1, 2); Run  executes each line once, running from top to bottom print  is a function -- like a verb in the code Numbers within the parenthesis ( ... ) are passed in to the print function Multiple values separated by commas Experiments  change the code and run after each change see the new output:  -Change a number  -Add more numbers separated by commas inside the print(...)  -Copy the first line and paste it in twice after the last line  -I promise our output will get much more interesting! Syntax  the code is not free form  -Syntax of the code is very limited and strict  -A reflection of the inner, mechanical/dumb nature of the computer  -Don't be put off - \"When in Rome...\"  -We're visiting the world of the computer Note \"print\" is not a normal part of Javascript, I added it for CS101 Reminder: Video + Document - pause the video and try it yourself 2. Print String // The line below prints one number and one string\nprint(6, \"hi\");\nprint(\"hello\", 2, \"bye\"); Thus far we have numbers, e.g. 6 A  string  is a sequence of letters written within quotes to be used as data within the code  -e.g. \"hello\"  -Strings work with the print function, in addition to numbers  -Strings in the computer store text, such as urls or the text of paragraphs, etc. A  comment  begins with // and extends through the end of the line. A way to write notes about the code, ignored by the computer. Experiments: -Edit the text within a string  -Add more strings separated by commas  -Add the string \"print\" - inside of string is just data, not treated as code Code vs. Data Code = instructions that are Run Data = passive numbers, strings, handled by the code Note that  print  is recognized as a function in the code vs. the \"hello\" string which is just passive data (like verbs and nouns) The computer ignores the comments, so they are just a way for you to write notes to yourself about what the code is doing. Comments can be use it to temporarily remove a line of code -- \"commenting out\" the code, by placing a \"//\" to its\n Thinking About Syntax and Errors (key message!) Syntax - code text structured for the computer Very common error - you type in code, with slight syntax problem Professional programmers make that sort of \"error\" all the time Fortunately, very easy to fix ... don't worry about it Not a reflection of some author flaw Professionals get syntax errors all the time Beginners can be derailed by syntax errors, thinking they are making some big error Examples below to inoculate you: a bunch of typical syntax errors + fixing them Fixing these little errors is a small, normal step Syntax  The syntax shown above must be rigidly followed or the code will not work: function name, parenthesis, each string has opening and closing quotes, commas separating values for a function call. The rigidity of the syntax is a reflection of the limitations of computers .. their natural language is fixed and mechanical. This is important to absorb when working with computers, and I think this is where many people get derailed getting started with computers. You write something that any human could understand, but the computer can only understand the code where it fits the computer's mechanical syntax. When writing for the computer, it is  very common  to make a trivial, superficial syntax mistakes in the code. The most expert programmers on earth make that sort of error all the time, and think nothing of it. The syntax errors do not reflect some flawed strategy by the author. It's just a natural step in translating our thoughts into the more mechanical language of the computer. As we'll see below, fixing these errors is very fast. It's important to not be derailed by these little superficial-error cases. To help teach you the patterns, below we have many examples showing typical errors, so you can see what the error messages look like and see how to fix them. For each snippet of code below, what is the error? Sometimes the error message generated by the computer points to the problem accurately, but sometimes the error message just reveals that the error has so deeply confused the computer that it cannot create an accurate error message. Firefox currently produces the most helpful error messages often pointing to the specific line with problems.  Syntax Error Examples The code examples below should print, the following, but they all have syntax errors. These should be quick to fix. a\nb b\nc c c\n print(\"a\");\nprlnt(\"b\", \"b\");\nprint(\"c\", \"c\", \"c\"); print(\"a\");\nprint(\"b\", \"b);\nprint(\"c\", \"c\", \"c\"); print(\"a\");\nprint(\"b\", \"b\");\nprint(\"c\", \"c\", \"c\"; print(\"a\");\nprint(\"b\" \"b\");\nprint(\"c\", \"c\", \"c\"); // This one has two syntax errors\nprint(\"a\");\npront(\"b\", \"b\");\nprint(\"c\", \"c\", \"c\"; print(\"a\");\nprint(, \"b\");\nprint(\"c\", \"c\", \"c\"); Example Problem Change the code below so, when run, it produces the following output: 1 2 buckle\n3 4 knock\n print(1, \"hi\"); For the example problems shown in lecture, the solutions are available as shown below. So you can revisit the problem, practice with it, and still see the solution if you like. print(1, 2, \"buckle\");\nprint(3, 4, \"knock\");\n Next: We've seen some basic print code and the Run button and how to fix syntax errors, so now try it yourself with the exercises. "}, "text_005": {"section": "Week 1", "subsection": "Code Variables", "unit": "Code Variables Lecture", "body": "Code Variables In this section, I want to add the idea of  variables  in code.\n\n A \"variable\" is like a box that holds a value\n x = 7; This stores the value 7 into the variable (i.e. box)  x Later  x  in the code retrieve the value from the box\n x  becomes a shorthand for 7 (whatever is in the box)\n Using = in this way is called \"variable assignment\"\n Variables in CS101 How we use variables in CS101:\n -Assign a value into a variable once\n -Then use that variable many times below\n A convenient shorthand in the code\n \nx = 7;\nprint(x);\nprint(\"lucky\", x);\nprint(\"x is\", x); Experiments:  try assigning (=) these values to x: 8, \"hi\"\n Store a value once, use it on several lines, saving repetition\n = in algebra is different, two things are equal forever\n = in code is simple, just puts a value in a box when run\n \nVariables work as a shorthand -- we = assign a value into a variable, and then use that variable on later lines to retrieve that value. In the simplest case, this just works to avoid repeating a value: we store the value once, and then can use it many times. All computer languages have some form of variable like this -- storing and retrieving values.\n\n\n Code Example - The Curse \nChange the code below so it produces the following output. Use a variable to store the string \"Alice\" in a variable on the first line like  x = \"Alice\"; , then use the variable x on the later lines. In this way, changing just the first line to use the value \"Bob\" or \"Zoe\" or whatever changes the output of the whole program.\n\n \nAlice Alice Alice\nI had a crush on Alice\n \nprint(1, 2, \"hi\"); \nx = \"Alice\";\nprint(x, x, x);\nprint(\"I had a crush on\", x);\n Next: that's code with variables, now you try it.\n\n"}, "text_006": {"section": "Week 1", "subsection": "Digital Images", "unit": "Digital Images", "body": "Digital Images In this section we'll look at how digital images work.  Digital Images Digital images everywhere Look natural, rounded Behind the scenes: lots of little numbers You see images on computers all the time. Here we will look behind the curtain, seeing how images are put together. What looks like a whole image to us, in the computer is a structure made of many little numbers. Here is an image of some yellow flowers:  Zoom In - Pixels Zoom in 10x - small square \"pixels\" Pixel one solid color, quite small Perceive the whole scene, not tiny pixels Image 800 pixel wide, 600 pixels high image \u00a0 Multiply .. 480,000 pixels (about 0.5 \"megapixels\") Digital camera 5-20 megapixels Zooming in on the upper left flower, we can see that it is actually made of many square \"pixels\", each showing one color. Each pixel is a small square that shows a single color An 800 x 600 image is 800 pixels wide by 600 pixels high, 480,000 pixels in all (0.5 megapixels) Digital cameras today produce images with several megapixels per image, say 8000 x 6000 for about 5 megapixels We will not work with individual x/y coordinates too much. You just need to appreciate that there is this x/y coordinate system, so that every pixel in an image has some x/y coordinate that identifies its location within the image grid. Image Diagram Each pixel - small, one color Organize pixels as a grid Every pixel can be identified by x,y numbers, \"address\" x=0, y=0 upper left -- (0, 0) x=1, y=0 one pixel to the right -- (1, 0) We will not use the x,y detailed level Question: how is the color of the pixel encoded? The pixels are organized as a grid, identifying each by an (x, y) coordinate, so every pixel can be identified by its (x, y) address x=0, y=0 is the upper left -- aka (0, 0) the top left pixel of the whole image x=1, y=0 is the pixel 1 to the right -- aka (1, 0) x=2, y=0 is the pixel 1 more to the right -- aka (2, 0) -- still in the top row How is the color of each pixel encoded? Aside - Newton's Color Prism Newton's famous experiment White light - broken up into pure colors, continuous Red, orange, yellow, green, blue, indigo, violet (ROY G BIV) Pure colors as a palette Run the experiment backwards to make white Funny thing about \"indigo\" Sir Isaac Newton did the famous prism experiment, showing that white light is made up of a spectrum pure colored light. Here is a picture of the experiment on my floor. White sunlight is coming in from the left into the glass triangular prism which splits up the light. Coming out of the prism we have a continuous range of pure colors, and a few are picked out by name: red, orange, yellow, green, blue, indigo, violet (ROY G BIV). Funny story: why add \"indigo\" in there, instead of just leave it at blue? Reflecting the mysticism of his time, Newton felt the number of colors should match the number of planets, which at the time was seven. RGB Color Scheme - Red Green Blue Each pixel is one color - how to represent? RGB red/green/blue scheme Make any color with combinations of red/green/blue light Different from mixing paints, here mixing light How to represent the color of a pixel? The red/green/blue (RGB) scheme is one popular way of representing a color in the computer. In RGB, every color is defined as a particular combination of pure red, green, and blue light. RGB Explorer The best way to see how RGB works is to just play with. This  RGB Explorer  page which shows how any color can be made by combining red, green, and blue light. RGB - Three Numbers Any color can be represented by combination of red/green/blue light Any color can be represented by three numbers Not just 0 and 255, intermediate values 12, 238, 39 e.g. r:250 g:10 b:240 - purple, or just say \"250 10 240\" e.g. r:150 g:150 b:10 - dark yellow, or just say \"150 150 10\" Don't memorize all colors, just understand the basic RGB scheme So essentially, any color can be encoded as three numbers .. one each for red, green, and blue. Color Red number Green number Blue number red 255 0 0 purple 255 0 255 dark yellow 100 100 0 white 255 255 255 black 0 0 0 In RGB, a color is defined as a mixture of pure red, green, and blue lights of various strengths. Each of the red, green and blue light levels is encoded as a number in the range 0..255, with 0 meaning zero light and 255 meaning maximum light. So for example (red=255, green=100, blue=0) is a color where red is maximum, green is medium, and blue is not present at all, resulting in a shade of orange. In this way, specifying the brightness 0..255 for the red, blue, and green color components of the pixel, any color can be formed. Pigment Note  -- you may have mixed color paints, such as adding red and green paint together. That sort of \"pigment\" color mixing works totally differently from the \"light\" mixing we have here. Light mixing is, I think, easier to follow, and in any case, is the most common way that computers store and manipulate images. It's not required that you have an intuition about, say, what blue=137 looks like. You just need to understand that any color can be made by combining the three color values. Image Diagram with RGB Now have the complete diagram of an image Pixels in a grid, each with an x,y address Each pixel has 3 numbers to define its color Written as \"red:6 green:250 blue:7\" Or just \"6 250 7\" Theme: Digital Atomization Complex whole - \"atomized\" Broken down into lots of little numbers \"Lots of little numbers\" -- the domain of the computer Visual change to the image image Phrase as changes to the numbers in the computer We started with a whole image, and reduced it to a big collection of small elements. This a common theme in computer science -- what looks like an organic complicated whole, is \"atomized\" in the computer ... made up of a very large collection of very simple elements. So we can start with a whole, textured digital image of something. Then break it down into small square pixels. Then each pixel breaks down to 3 numbers in the range 0..255. This is a typical computer pattern -- something whole and organic is, if you look behind the scenes, is broken down and represented as a lot of little numbers. "}, "text_007": {"section": "Week 1", "subsection": "Image Code", "unit": "Image Code", "body": "Image Code In this section, we'll look at simple code to load and manipulate a digital image. Here we'll just manipulate one pixel at a time. In the next section, scaling up to operate on thousands of pixels at a time. x.png x.png -- tiny example image (10 x 10) PNG format, like JPG The image \"x.png\" is very simple -- it's a very small black square with a white \"x\" at its center. PNG (Portable Network Graphics) is a image format, like JPG. Here is x.png:  x.png Code Example Three line program image = new SimpleImage(\"x.png\");  -- load into variable image.setZoom(20);  -- set zoom option to 20 (10, 20, 30, ... whatever) print(image);  -- print image to the right, as usual Zoom: each pixel shown 20x size here Our first image code example loads the x.png image and prints it. Run the code to see what it does. Try changing the  image.setZoom(20)  to use the number 10 or 30 instead. image = new SimpleImage(\"x.png\");\nimage.setZoom(20);\nprint(image); pixel.setRed(255) Example pixel = image.getPixel(0, 0);  -- upper left pixel pixel.setRed(255);  -- set red value of that pixel image = new SimpleImage(\"x.png\");\nimage.setZoom(20);\n\npixel = image.getPixel(0, 0);\npixel.setRed(255);\n\nprint(image); Pixel Set Red/Green/Blue Functions pixel.setRed( number );  -- set the red value of the pixel to be the given number (0..255) pixel.setGreen( number );  -- set the green value pixel.setBlue( number );  -- set the blue value Aside: Image Functions Reference For later reference, there is a separate  image functions reference  page which lists in one place the image functions such as  pixel.setRed( number )  we are using here. Experiments On Pixel (0, 0) To see how  image.getPixel(x, y)  and  pixel.setRed( number )  etc. work, we'll try the experiments listed below (use the \"show\" button to see the solution code). image = new SimpleImage(\"x.png\");\nimage.setZoom(20);\n\npixel = image.getPixel(0, 0);\npixel.setRed(255);\n\nprint(image); Example Problems Solution Set pixel (0, 0) to be green. pixel = image.getPixel(0, 0);\npixel.setGreen(255);\n Set pixel (0, 0) to be yellow. pixel = image.getPixel(0, 0);\npixel.setRed(255);  // idea: set red and green to 255\npixel.setGreen(255);\n Set pixel (1, 0) to be yellow. Where is that pixel? pixel = image.getPixel(1, 0);\npixel.setRed(255);\npixel.setGreen(255);\n// Calling getPixel(1, 0) edits the pixel\n// one to the right of pixel (0, 0).\n Set pixel (0, 0) to white. pixel = image.getPixel(0, 0);\npixel.setRed(255);\npixel.setGreen(255);\npixel.setBlue(255);\n Set pixel (0, 0) to be dark yellow -- set the necessary colors to 150 instead of 255. pixel = image.getPixel(0, 0);\npixel.setRed(150);\npixel.setGreen(150);\n Set pixel (0, 0) to be a light, pastel red. pixel = image.getPixel(0, 0);\npixel.setRed(255);\npixel.setGreen(200);\npixel.setBlue(200);\n// Set red at 255, green and blue equal but lower.\n"}, "text_008": {"section": "Week 1", "subsection": "Image Code", "unit": "Problems", "body": "For these exercises, write code to manipulate the x.png image. Some basic starter code to load and print the image is provided. Modify and add lines to the starter code as needed to solve each exercise. "}, "text_009": {"section": "Week 2", "subsection": "Image For-Loop", "unit": "Image For-Loop", "body": "Image For-Loop In this section, we'll look at the \"for loop\" construct, which can run a bit of code thousands of times -- a big increase in the power available to us.\n\n\n flowers.jpg is 457 pixels wide by 360 pixels high -- 164,520 pixels\n Code operating one pixel at a time ... not practical\n Want: we specify some code, computer runs it again and again, once for each pixel\n \"For loop\" does this -- big increase in the power of our code\n \nAccessing one pixel at a time, e.g. pixel at (0, 0), then the pixel at (1, 0), etc. is not a good way to work on an image which may have 100,000 or more pixels. We'd like to say something like \"for each pixel do this\", and let the computer fiddle with the details of going through all the (x, y) values to look at each pixel once. \n\n \nThe very powerful \"for loop\" structure we'll learn here provides exactly this \"for each pixel do this\" feature. The loop takes a few lines of our code, and runs those lines again and again, once for each pixel in the image.\n\n\n For-Loop Structure Syntax:  for (pixel: image) { ... } Starts the for loop, syntax all required, indentation\n \"body\" code inside the  { ... } Runs body lines for pixel #1\n Goes back to top of body, runs for pixel #2\n Runs again and again, once for each pixel in the image\n For each pixel: (do what the body code says)\n For-Loop Example 1 Setting red, green, and blue all to 0 (for 164,520 pixels). What does that do? What if we set red, green, and blue all to 255?\n\n Body 3 lines: set red, green, and blue all to 0\n For-loop runs those lines, once for each pixel\n What is the result?\n \nimage = new SimpleImage(\"flowers.jpg\");\n\nfor (pixel: image) {\n  pixel.setRed(0);\n  pixel.setGreen(0);\n  pixel.setBlue(0);\n}\n\nprint(image); For each pixel, the body code sets the red, green, and blue values all to be 0. The result is a pure black rectangle. None of the original flower data is left; it all got changed to zeros.\n\n For-Loop Example 2 For each pixel, set red and green to 255, blue to 0\n What is the body code to do this?\n What is the result?\n \nimage = new SimpleImage(\"flowers.jpg\");\n\nfor (pixel: image) {\n  pixel.setRed(255);\n  pixel.setGreen(255);\n  pixel.setBlue(0);\n}\n\nprint(image); Result is a solid yellow rectangle. The code overwrites the flower data, changing each pixel in the original image into a pure yellow pixel.\n\n\n For-Loop Example 3 Previous examples overwrote all the flower data ... not realistic\n Work with the data in flowers.jpg\n Yellow flowers -- red and green values high\n For each pixel, set red to 0\n What is the body code to do this?\n What is the result?\n (Not required that you have can predict the result of the RGB operations)\n Look again at flowers.jpg.Yellow is made or red + green, so we know that the yellow parts of the image have high red and green values. So what happens if, for each pixel, we set red to 0? What are the RGB values for a typical pixel on the yellow flowers look like before this loop runs? What about after?\n\n \nimage = new SimpleImage(\"flowers.jpg\");\n\nfor (pixel: image) {\n  pixel.setRed(0);\n}\n\nprint(image); \nThe body code  pixel.setRed(0);  is run by the loop again and again, once for each pixel in the image. Since the yellow flowers are made with red + green light, setting the red to 0 for each pixel results is greenish flowers. The green leaves aren't changed much, since their red values were near 0 anyway. \n\n\n For-Loop Example 4 For each pixel, set green and blue to 0\n What is the body code to do this?\n The result is known as the \"red channel\"\n Seeing an image of just the red light areas\n \nimage = new SimpleImage(\"flowers.jpg\");\n\nfor (pixel: image) {\n  pixel.setGreen(0);\n  pixel.setBlue(0);\n}\n\nprint(image); Setting green and blue to 0 everywhere, all that is left is the area of red light that went into the original image, aka the \"red channel\" of the image. The red light is most prominent for the area of yellow flowers, which makes sense as we know that yellow = red + green.\n\n\n\n For-Loop Conclusions For-loop is a very powerful feature\n Note: Javascript does not have this feature, I added it for CS101\n We write the body code for the effect we want\n Computer handles the bookkeeping to repeat over all the pixels\n Computer = powerful + stupid theme\n Loop: powerful, but mechanical\n Next section - more interesting image transforms\n"}, "text_010": {"section": "Week 2", "subsection": "Image Expressions", "unit": "Image Expressions", "body": "Image Expressions In this section, we'll look how to use expressions to greatly expand what we can do in a loop. With expressions, we'll be able to write real image manipulation code, and in particular solve some puzzles based on images. Expressions 1 + 1 We have seen function calls where we pass in a value within the parenthesis, such as the value 42 passed in to the print function below.   print(42);\n Instead of a plain number like 42, an \"expression\" written in the code like 11 + 31 computes the value to use. For example you could write something like this:   print(11 + 31);\n When that line runs, the computer first computes the expression 11 + 31, yielding 42. Then in effect it calls print(42), passing in the computed value. Anywhere in the code where we have used a fixed number like 0 or 255 of whatever, we can instead write an expression, letting the code compute a value when that line runs. pixel.getRed() / pixel.getGreen() / pixel.getBlue() We have not used them until now, but there are three pixel functions that retrieve the red, green or blue value out of a pixel -- these will be very handy to use in expressions. pixel.getRed()  -- retrieves the red value from a pixel pixel.getGreen()  -- retrieves the green value pixel.getBlue()  -- retrieves the blue value Combine pixel.getRed() and pixel.setRed() Suppose we want to  double  the red value of a pixel More realistic operation -- relative   // Doubles the pixel's red value\n  old = pixel.getRed();\n  pixel.setRed(old * 2);\n The  pixel.getRed()  can be combined with  pixel.setRed( number )  to operate on a pixel. For example, the above code snippet doubles the pixel's red value. The first line retrieves the red value from the pixel and stores that value in an variable named  old . Say in this case that the red value is 50. The second line computes  old * 2  (100 in this case), and sets that value back into the pixel as its new red value. The net effect is to double the red value of the pixel from 50 to 100. The  old  variable is not necessary Reduce the whole get/set to one line   pixel.setRed(pixel.getRed() * 2);\n How does the line above work? Suppose we have a pixel r:50 g:20 b:30 Q: What does running the line above do to the pixel? 1. Evaluates the  pixel.getRed() * 2  expression (100) 2. Then calls  pixel.setRed(100); Result is changing the pixel to r:100 g:20 b:30 Whatever the red value, the line doubles it The code  pixel.getRed() * 2  is an expression, which is whatever the old red value was multiplied by 2. This expression is evaluated first, resulting a number such as 240. Then in effect pixel.setRed(240); is called. The setRed() etc. functions automatically limit the value set to the range 0..255. If setRed() is called with a value a greater than 255, it just uses 255, and likewise if a value less than 0 is passed in, it just uses the value 0. Loops With Expressions Previously, set red to 0 or 100 or 255 ... inflexible Now can express relative changes e.g. double the red value (set/get pattern): pixel.setRed(pixel.getRed() * 2); e.g. halve the red value: pixel.setRed(pixel.getRed() * 0.5); Before we could only express ideas like \"set the red value to 200\". Now we can express what new value we want in terms of the old value, like \"triple the red value\", or \"set the red value to 75% of what it was\". Image Expression Example 1 Suppose we want to change the yellow flowers to look orange Set the green value to 75% of its original value (i.e. * 0.75) What is getGreen/setGreen combination to do this? (Try to work out the code, then look at the solution below) image = new SimpleImage(\"flowers.jpg\");\n\nfor (pixel: image) {\n  // your code here\n\n}\n\nprint(image); Solution code:   // your code here\n  pixel.setGreen(pixel.getGreen() * 0.75);\n Image Expression Example 2 Set red, green, and blue each to be * 0.75 of their original values, then try 0.5 and 0.25 What is the code to do this? What is the effect on the image? image = new SimpleImage(\"flowers.jpg\");\n\nfor (pixel: image) {\n  // your code here\n\n}\n\nprint(image); Solution code:   // your code here\n  pixel.setRed(pixel.getRed() * 0.75);\n  pixel.setGreen(pixel.getGreen() * 0.75);\n  pixel.setBlue(pixel.getBlue() * 0.75);\n  // Then try multipliers of 0.5 and 0.25\n  // The effect is to make the image darker (towards 0)\n Image Expression Example 3 Still trying for orange on the flowers Try modifying both red and green Change red to be 1.3 times its original value Change green to be 0.75 times its original value What is the code to do this? image = new SimpleImage(\"flowers.jpg\");\n\nfor (pixel: image) {\n  // your code here\n\n}\n\nprint(image); Solution code:   // your code here\n  pixel.setRed(pixel.getRed() * 1.3);\n  pixel.setGreen(pixel.getGreen() * 0.75);\n  // The effect is to change the yellow flowers to light orange\n 5-10-20 Image Puzzles 5-10-20 Puzzles Image where red, green, and blue divided by 5, 10, or 20 Scale them back up by * 5, * 10, * 20 to recover the original image Puzzle: don't know which number goes with which color Experiment to figure it out There are only 6 possibilities: 5 10 20, 5 20 10, 10 5 20, 10 20 5, 20 5 10, 20 10 5 i.e. 5 first x 2, 10 first x 2, 20 first x 2 5-10-20 Banana Puzzle Yellow banana, background of dark red bricks Bits of dark green moss between the bricks Use code pattern:  pixel.setRed(pixel.getRed() * 5); Scale up all three colors, using factors 5, 10, 20 to fix the image image = new SimpleImage(\"51020-banana.png\");\nfor (pixel: image) {\n  // your code here\n\n}\n\nprint(image); Solution code:   // your code here\n  pixel.setRed(pixel.getRed() * 20);\n  pixel.setGreen(pixel.getGreen() * 5);\n  pixel.setBlue(pixel.getBlue() * 10);\n In the solution image, you will see some \"banding\" of the yellow of the banana. This is because the red and green channels were scaled down to a range as small as just 0, 1, 2, .. 12. With so few values, the image only represent a few different shades of yellow, and those are the bands we see if we look carefully at the banana. We will talk about \"banding\" more when we talk about digital media formats. "}, "text_011": {"section": "Week 2", "subsection": "Image Expressions", "unit": "Problems", "body": "Here we'll do 5-10-20 puzzles like the one shown in lecture. For each puzzle image, the red, green, and blue values have been divided by a factor of 5, 10, or 20, but you don't know which factor was used on which color. Write code to fix the image, multiplying each color by 5, 10 or, 20 to get them back to their original values. Reminder: here is the line to use in the loop to multiply, for example, the red value of each pixel by 20:\n\n \n  pixel.setRed(pixel.getRed() * 20);\n There are a few solutions that look somewhat correct, but just one solution that looks exactly right. Figure out that solution.\n\n\n"}, "text_012": {"section": "Week 2", "subsection": "Image Puzzles", "unit": "Image Puzzles", "body": "Image Puzzles This is a short section to look at type of puzzle built out of image manipulation code.\n\n Code To Fix the Pixels There is an image of some unknown puzzle object\n Red/green/blue values have been distorted, hiding the real image\n Write code to fix the pixels\n Recover the original image to solve the puzzle\n Gold Puzzle Here we have the \"gold\" puzzle image -- fix it to see the real image\n Gold puzzle parameters:\n The green and blue values are all just random values in the range 0..255 (\"snow\")\n The data of the real image is exclusively in the red values\n In addition, the red values have all been divided by 10 (dark)\n The green/blue snow is obscuring the real image\n Write code to recover the real image\n \nimage = new SimpleImage(\"puzzle-gold.png\");\n\nfor (pixel: image) {\n  // your code here\n\n}\n\nprint(image); Solution code:\n \n// Strategy: zero out blue and green as they\n// are just garbage data.\n// Then scale red up by 10x to see the real\n// image in red.\n\n  // your code here\n  pixel.setGreen(0);\n  pixel.setBlue(0);\n  pixel.setRed(pixel.getRed() * 10);\n\n\n Seeing Red In this case, our solution shows the image, but it's all in red. What we have here is basically a black-and-white image, but it is shown in the black-red range, rather than the usual black-white. For this section, we'll say that's good enough. We'll see how to fix the red image so it looks like a proper black-and-white image in a later section.\n\n\n\n\n\n\n\n"}, "text_013": {"section": "Week 2", "subsection": "Image Puzzles", "unit": "Problems", "body": "Here we'll do puzzles like the gold puzzle shown in lecture. Reminder: here is the line to use in the loop to multiply, for example, the red value of each pixel by 20:\n\n \n  pixel.setRed(pixel.getRed() * 20);\n"}, "text_014": {"section": "Week 2", "subsection": "Grayscale Images", "unit": "Grayscale Images", "body": "Grayscale Images \nIn this section, we'll look at the structure of grayscale vs. color images, and some code to play with that difference.\n\n Gray Among The RGB Visit the  RGB explorer Figure out how to make colors on the grayscale spectrum\n e.g. RGB values to make: dark gray, medium gray, light gray\n We'll say that these grays lack \"hue\"\n \nAnswer: the RGB scale is calibrated so that when all three red/green/blue numbers of a pixel are equal, the pixel is a shade of gray. Making all the numbers equal, like red=50 green=50 blue=50 drains any bias towards red, green, or blue. If a pixel were red=50 green=75 blue=50 it would be a bit greenish, but making them all equal, it's not towards any particular hue. This works because the displays and other systems using RGB are calibrated so that the all-equal cases are on the black..gray..white spectrum.\n\n Examples of gray colors in RGB:\n red green blue color 50 50 50 dark gray 120 120 120 medium gray 200 200 200 light gray In fact, the original pure black/white colors fit this all-equal pattern too, just using the values 0 and 255. 0 0 0 pure black 255 255 255 pure white Red Liberty Example Problem Here is an image of the Statue or Liberty where all of the data is in the red values, so the whole image looks red. The green and blue values are all zero. This image looks quite wrong.\n\n For this example, we'll write code to fix this image by copying the red value over to be used as the green and blue value. So for a pixel, if red is 27, set green and blue to also be 27. What will be the visual result of this?\n\n\n \nimage = new SimpleImage(\"liberty-red.jpg\");\nfor (pixel: image) {\n  // your code here\n  \n}\nprint(image); Solution code:\n \n  // your code here\n  pixel.setGreen(pixel.getRed());\n  pixel.setBlue(pixel.getRed());\n  // Usually code combines setRed() with getRed(),\n  // but this code gets a value from one color\n  // and sets it into another color.\n  // Visual result: grayscale image, since\n  // red/blue/green are made equal for each pixel.\n Converting Color To Grayscale How to covert a regular color image to grayscale?\n Problem: for each pixel, how dark/light is it (ignoring hue)\n Choose a few pixels out of flowers.jpg, each in a row below\n Q: which pixel is brightest? darkest?\n We compute average for each pixel\n Reminder: to average 3 numbers, add them up and divide by 3\n average = (red + green + blue)/3\n red green blue average average = (red + green + blue) / 3 200 50 50 100 (medium bright) 0 75 75 50 (darkest) 100 250 250 200 (brightest) Looking at just red or blue or green in isolation, it's hard to tell which pixel is brightest or darkest in the above table. The  average  combines and summarizes the three values into one number 0..255. The average shows how bright the pixel is, ignoring hue: 0 = totally dark, 255=totally bright, with intermediate average values corresponding to intermediate brightnesses. More complicated brightness measures are possible, but average is simple and works fine for our purposes.\n\n Average combines red/green/blue into one number\n The average measures how bright the pixel is 0..255\n Ignoring hue\n Grayscale Conversion Example For this example, we'll write code to change the flowers.jpg image to grayscale, using the \"average\" strategy: for each pixel, compute the average of its red/green/blue values. This average number represents the brightness of the pixel 0..255. Then set the red, green, and blue values of the pixel to be that average number. The result is a grayscale version of the original color image. Once its working with flowers.jpg, try it with poppy.jpg or oranges.jpg. (Solution code available below)\n\n \nimage = new SimpleImage(\"flowers.jpg\");\nfor (pixel: image) {\n  // your code here\n  \n}\nprint(image); Q: must the \"avg = ... \" line be inside the loop?\n A: yes, it must be inside the loop\n The equals sign (=) does not set up some formula to work for all time\n Computer code is not that powerful generally\n The = just does math  when that line runs Each pixel has different red/green/blue values\n We need to re-do the addition / divide-3 for each pixel\n Solution code:\n \n  // your code here\n  avg = (pixel.getRed() + pixel.getGreen() + pixel.getBlue())/3;\n  pixel.setRed(avg);\n  pixel.setGreen(avg);\n  pixel.setBlue(avg);\n Grayscale Summary When red/green/blue values are equal .. shade of gray\n Average combines red/green/blue into one number\n The average measures how bright the pixel is 0..255\n Convert pixel to grayscale: set red, green, and blue to be the average\n Standard code line to compute average within loop. We'll use this line often for later problems.\n avg = (pixel.getRed() + pixel.getGreen() + pixel.getBlue())/3;"}, "text_015": {"section": "Week 3", "subsection": "Image Logic", "unit": "Image Logic", "body": "Image Logic Theme 1:  Bulk  operation -- e.g. for-loop \u00a0Small body code, loop runs it over thousands of pixels Theme 2:  Logic  test true/false -- e.g. if-statement (this section) \u00a0Run some code only if a test is true Our use of loops thus far have allowed us to write a little bit of code which is run for many data points. That's one big theme in computer code. The if-statement, the topic of this section, will add a second theme: the ability to write a true/false test to control if a bit of code runs or not. Combined with the loop, the if-statement will greatly expand what we can do with code. If-Statement Syntax The if-statement has a true/false test which controls if some code is run or not. Here is an example if-statement shown inside a for-loop: image = new SimpleImage(\"flowers.jpg\");\n\nfor (pixel: image) {\n  if (pixel.getRed() > 160) {\n    pixel.setRed(0);\n    pixel.setGreen(0);\n    pixel.setBlue(0);\n  }\n}\n\nprint(image);\n If-Statement syntax, in for-loop context if (pixel.getRed() > 160)  -- \"test\" inside parenthesis Evaluate test -- true or false Tests just < (less than) or > (greater than) compare numbers (for now) { .. }  -- curly braces around then-code (indent) Run the then-code if the test is true (here sets to black) Syntax is all required (cs101 error message) This loop/if pattern solves many problems (select pixels) For each pixel, the if-statement above retrieves the red value, and tests if the value is greater than 160. If the test is true, the if-statement runs the then-code inside the curly braces. If the test is false, the then-code is skipped. In this case, the then-code changes the pixel to be black. If Color Example Here we'll use this picture of a stop sign:  Goal: change the red sign to be blue Test:  (pixel.getRed() > 160) For each pixel, check if (red > 160) One strategy to test for red areas (needs improvement) Then-code: change the pixel to bright blue image = new SimpleImage(\"stop.jpg\");\nfor (pixel: image) {\n  if (pixel.getRed() > 160) {\n    pixel.setRed(0);\n    pixel.setGreen(0);\n    pixel.setBlue(255);\n  }\n}\nprint(image); Above code works ok, but not perfectly The if-statement runs once for each pixel in the image. The test will be true or false for each pixel. Experiments: Nothing magic about 160 -- adjust it to get the result we want 1. Adjust the 160 value. If we change it to 220 or 250, will the if-test select more or fewer pixels than at 160? What if we set it to 100? 50? With a >, the 160 is like a hurdle we raise or lower When adjusting a test, consider if your goal is to make the test more or less restrictive Can also put any code we want for the then-code 2. Set red/green/blue all to 0 The Problem With (red > 160) Test Trying to change the stop sign to be blue, the test (red > 160) gets both white and red areas. The problem with that approach is that the red value is high in two kinds of cases -- the red part of the sign we want, but also parts of the scene that are near white. Recall that pure white is (255, 255, 255), so in whitish areas, all three values are high, so our (red > 160) test gets those too -- the white letters inside the sign are a clear example of this problem. Next we'll improve the test so it can distinguish the red and white parts of the sign. Color Bars Suppose we have three pixels. Each pixel has the familiar red/green/blue values. Suppose these three values are graphed as bar graphs like this: Q:  Each pixel has one of red/green/blue which is strongest. Look at the graphs to figure which shade dominates for each pixel. It's just whichever bar is tallest. Or to be specific, whichever bar is tallest  relative to the others . The problem with our earlier strategy was that it just looked at absolute numbers -- (red > 160) -- failing to take into account this relative quality -- which bar is higher than the other two. Recall Average of Pixel Color Recall this code which, inside a loop, computes the average of the red, blue, and green values and stores that number in a variable \"avg\".   avg = (pixel.getRed() + pixel.getGreen() + pixel.getBlue())/3;\n Color Bars With Average Here are the three pixels again, but now the  avg  value is show as a line drawn across the bars. The avg gives us a handy way to tell if a color is high relative to the others. A pixel is reddish if the red value is over the avg. So here the first pixel is reddish and the other two are not. Or in terms of code, the test will look like  (pixel.getRed() > avg)  -- this will add the \"relative to the other colors\" quality that the previous test was missing. Color Avg Test Example - Stop Revisit the change sign to blue problem, using the avg Test:  (pixel.getRed() > avg * 1.1) This works very well, picking out pixels with red cast  * 1.1  adjustment factor, tighten/loosen to get look we want e.g. * 1.7 makes test more restrictive e.g. * 0.9 makes test less restrictive Here 1.4 looks pretty good image = new SimpleImage(\"stop.jpg\");\nfor (pixel: image) {\n  avg = (pixel.getRed() + pixel.getGreen() + pixel.getBlue())/3;\n\n  if (pixel.getRed() > avg * 1.1) {\n    pixel.setRed(0);\n    pixel.setGreen(0);\n    pixel.setBlue(255);\n  }\n}\nprint(image); This is a better way to select the red parts of the sign. For each pixel, first compute the average value for that pixel. Then compare the red value to the average to decide if the pixel is reddish. Rather than checking the literal value of the red (e.g. 160), this checks if the red is relatively large compared to the other two colors .. does the pixel lean towards red. If the test is  (pixel.getRed() > avg)  we get all the areas that have every a tiny red cast, which is not restrictive enough. The fix is to multiply the avg by some factor to make it more restrictive, like this:  (pixel.getRed() > avg * 1.1) . The specific value, 1.1, can be tuned by trying different values, until we get the look we want. Try the values: 0.9, 1.2, 1.4, 2, 2.5. The larger the value, the higher the bar is set to detect red pixels. By adjusting the * factor, we can zero in on the look we want. Here I think 1.4 looks pretty good. Color Avg Test Example - Curb Suppose you are visiting Stanford and you park your car here, and get a parking ticket. Philosophically, they say that you are better off taking in events as they have actually happened. Nonetheless, here we'll try to fix history in code.  Challenge: write code to detect the red curb, (a) change it to medium gray red=120 green=120 blue=120. (b) change just the red curb to be  grayscale , which will look more realistic. Rather than changing the whole image to grayscale, we change just the red areas. Recall that the algorithm to change grayscale is to set red/green/blue values all to be the average value. image = new SimpleImage(\"curb.jpg\");\nfor (pixel: image) {\n  avg = (pixel.getRed() + pixel.getGreen() + pixel.getBlue())/3;\n\n  if (pixel.getRed() > avg * 1.5) {\n    pixel.setRed(120);\n    pixel.setGreen(120);\n    pixel.setBlue(120);\n  }\n}\nprint(image); Solution code (b): // This solution looks the best to me for (b).\nimage = new SimpleImage(\"curb.jpg\");\nfor (pixel: image) {\n  avg = (pixel.getRed() + pixel.getGreen() + pixel.getBlue())/3;\n\n  if (pixel.getRed() > avg * 1.1) {\n    pixel.setRed(avg);\n    pixel.setGreen(avg);\n    pixel.setBlue(avg);\n  }\n}\nprint(image);\n Tune the * 1.5 to detect the red areas Setting to solid gray (120, 120, 120) looks a little crude Note that we put gray on the red plants to the right Our strategy chooses exclusively on pixel color, so necessarily get the red plants too (b) Rather than (120, 120, 120), change the red pixels to grayscale This looks much better, as it reflects the dark/light of the real curb Just draining out the red Conclusions: -- (pixel.getRed() > avg * 1.5)  pattern to detect pixel by color --The then-code can do anything we wish to the pixel"}, "text_016": {"section": "Week 3", "subsection": "Image Bluescreen", "unit": "Image Bluescreen", "body": "Image Bluescreen \nBuilding on the earlier image manipulation and logic sections, here we see how to implement a movie special effect.\n\n\n Bluescreen Special Effect \"Bluescreen\" video special effect\n Video is just a series of still images, 20-60 per second\n Have some background image, e.g. leaves.jpg\n Detect colored area in an image, e.g. red in stop.jpg\n For colored area, substitute in pixels from background image\n The stop.jpg image and the leaves.jpg image\n Bluescreen Algorithm Bluescreen algorithm\n Two images:  image  and  back Detect, say, red pixels in image\n For each red pixel:\n --Consider the pixel at the same x,y in back image\n --Copy over the pixel from back to image\n --What defines how a pixel looks? Three numbers.\n --Copy over the red, green, and blue values\n Result: red areas, substitute in areas from back image\n Adjacent pixels maintained\n Bluescreen Example Code Two images:  image  and  back if-statement / avg -- detects red as usual\n Inside if:\n --1. Figure out x,y of pixel\n --2. Get pixel2 from back image (at x,y)\n --3. Make pixel the same as pixel2\n -- i.e. copy over red/green/blue values\n \nimage = new SimpleImage(\"stop.jpg\");\nback = new SimpleImage(\"leaves.jpg\");\n\nfor (pixel: image) {\n  avg = (pixel.getRed() + pixel.getGreen() + pixel.getBlue())/3;\n  if (pixel.getRed() > avg * 1.5) {\n    x = pixel.getX();\n    y = pixel.getY();\n    pixel2 = back.getPixel(x, y);\n    pixel.setRed(pixel2.getRed());\n    pixel.setGreen(pixel2.getGreen());\n    pixel.setBlue(pixel2.getBlue());\n  }\n}\nprint(image); \nThe above bluescreen example code detects the red part of the sign, and for those pixels, copies over the pixels from the back image. The bluescreen code below has 3 key differences from the earlier examples:\n back = new SimpleImage(\"leaves.jpg\");   -- open a  second  image and store it in the variable \"back\" (thus far we've only opened one image at a time)\n pixel2 = back.getPixel(x, y);  -- say we are looking at pixel x,y in the main image. Get the x,y pixel from the  other image  and store it in the variable \"pixel2\". We can get the x and y of the current pixel in the loop with the functions pixel.getX() and pixel.getY().\n pixel.setRed(pixel2.getRed());   -- copy the red value from pixel2 to pixel. Also do this for the other two channels. In effect, for the x,y location, this copies the pixel from back to image.\n \nExperiments: (a) Try copying the leaves to the sky instead of to the red parts of the sign (similar to the earlier Night Mode problem). (b) Make the code a little shorter by eliminating the need for \"x\" and \"y\" variables. Put the calls to pixel.getX() and pixel.getY() right in the back.getPixel(...) call. \n\n Abby Bluescreen In this example we have the abby.jpg image -- make it appear that the green parts of her little chair are sprouting leaves.\n\n \nimage = new SimpleImage(\"abby.jpg\");\nback = new SimpleImage(\"leaves.jpg\");\n\nfor (pixel: image) {\n  avg = (pixel.getRed() + pixel.getGreen() + pixel.getBlue())/3;\n  if (pixel.getGreen() > avg * 1.5) {\n    // your code here\n    \n  }\n}\nprint(image); Solution code:\n \n// Here the pixel2 = ... computation is shortened to one line\nimage = new SimpleImage(\"abby.jpg\");\nback = new SimpleImage(\"leaves.jpg\");\n\nfor (pixel: image) {\n  avg = (pixel.getRed() + pixel.getGreen() + pixel.getBlue())/3;\n  // your code here\n  if (pixel.getGreen() > avg * 1.05) {\n    // 1. Get pixel2 from back image at same x,y (one line)\n    pixel2 = back.getPixel(pixel.getX(), pixel.getY());\n\n    // 2. Copy pixel2 over to pixel\n    pixel.setRed(pixel2.getRed());\n    pixel.setGreen(pixel2.getGreen());\n    pixel.setBlue(pixel2.getBlue());\n  }\n}\nprint(image);\n Monkey Bluescreen Like The Movies Now we'll do one like the movies -- film the movie start in front of a blue screen.\n\n Here is our monkey movie star:\n Here is our background, the famous Apollo 8 photo of the earth shown rising\nabove the moon horizon.\n\n \nimage = new SimpleImage(\"monkey.jpg\");\nback = new SimpleImage(\"moon.jpg\");\n\nfor (pixel: image) {\n  avg = (pixel.getRed() + pixel.getGreen() + pixel.getBlue())/3;\n  // your code here\n  \n}\n\nprint(image); Solution code:\n \nimage = new SimpleImage(\"monkey.jpg\");\nback = new SimpleImage(\"moon.jpg\");\n\nfor (pixel: image) {\n  avg = (pixel.getRed() + pixel.getGreen() + pixel.getBlue())/3;\n  // your code here\n  if (pixel.getBlue() > avg * 0.92) {\n    pixel2 = back.getPixel(pixel.getX(), pixel.getY());\n    pixel.setRed(pixel2.getRed());\n    pixel.setGreen(pixel2.getGreen());\n    pixel.setBlue(pixel2.getBlue());\n  }\n}\n\nprint(image);\n Bluescreen Summary Real technique\n 1. Two images: image, back\n 2. Loop over image, detect color area\n 3. Color area: copy over x,y pixel from back to image\n"}, "text_017": {"section": "Week 3", "subsection": "Image Bluescreen", "unit": "Problems", "body": "For the next problem, we'll accomplish a sort of artistic effect, working with the redwood.jpg image:\n \nAnd the pebbles.jpg image:\n"}, "text_018": {"section": "Week 3", "subsection": "Image Bluescreen", "unit": "Problems", "body": "The next problem, Fish Dreams of Paris, uses two images. paris.jpg:\n   And striped-fish-blue.jpg:\n  "}, "text_019": {"section": "Week 3", "subsection": "Computer Hardware", "unit": "Computer Hardware", "body": "Computer Hardware Computer - hardware and software\n Like piano and music\n In this section: hardware\n \nThe computer is an amazingly useful general-purpose technology, to the point that now cameras, phones, thermostats .. these are all now little computers. This section will cover a lot of ground, introducing major parts and themes of how computer hardware works. \"Hardware\" refers the physical parts of the computer, and  \"software\" refers to the code that runs on the computer. The piano is the hardware, the music is the software. Hardware and software are deep topics, but many of the basic principles make perfect sense and will give you an insight about what's going on behind the scenes.\n\n Chips and Transistors Transistor - important building block\n Chip - fingernail sized silicon\n Chip can contain billions of transistors\n e.g. CPU chips, memory chips, flash chips\n \"Solid state\" - no moving parts\n vs. Silicone\n Silicon chip image  (wikipedia)\n\n Modern computers use tiny electronic components which can be etched onto the surface of a silicon chip. (See:  wikipedia chip ) Note that  silicon  (chips, solar panels) and  silicone  (soft rubbery material) are different!\n\n The most common electronic component is the \"transistor\" which works as a sort of amplifying valve for a flow of electrons. The transistor is a \"solid state\" device, meaning it has no moving parts. It is a basic building block used to construct more complex electronic components. In particular, a \"bit\" (below) can be built with an arrangement of 5 transistors. The transistor was invented in the early 1950's, replacing the vacuum tube. Since then, transistors have been made smaller and smaller, allowing more and more of them to be etched onto a silicon chip. \n\n Moore's Law Transistors get smaller about every 18-24 months\n Can fit twice as many per chip\n Observation vs. \"law\"\n In effect, transistors/computers get cheaper (powerful)\n Why computers are now in cars, thermostats\n $50 MP3 player bigger every couple years: 2GB, 4GB, 8GB\n Exponential -- 10 doublings, about 1000 x\n Moore's law ... computers cheap, everywhere\n Moore's law (Gordon Moore, Intel co-founder) states that the density of transistors on a chip doubles about every 2 years or so (sometimes listed as every 18 months). It is not a scientific law, just a broad prediction that seems to keep working. More broadly, it captures the idea that per dollar, computer technology (not just transistors) gets exponentially better as time goes along. This is quite clear if you look at the cost or capability of computers/cameras etc. you have owned. It might mean that each new generation of computer is more capable. OR it could mean that keeping capability constant, computers get cheaper and cheaper .. showing up in more in more places as it becomes cost effective (e.g. in your car, your thermostat, ..).\n\n Computer Hardware \nNow let's talk about the three major parts that make up a computer --  CPU ,  RAM , and  Persistent Storage . These three are found in a laptop, or a smart phone, or a tablet.\n\n 1. CPU CPU - Central Processing Unit\n The brains\n Performs simple operations\n e.g. Add two numbers\n Say a computer can run 2 billion operations per second\n -- that's the CPU\n Run button ... code \"runs\" on the CPU\n CPU - Central Processing Unit - inevitably referred to as the \"brains\" of the computers. The CPU does the active \"running\" of code, manipulating data, while the other components have a more passive role, such as storing data. When we say that a computer can \"add two numbers, a billion times a second\" .. that's the CPU. When you hit the Run button, the CPU ultimately \"runs\" your code. Later on, we will complete the picture of how your Javascript code is run by the CPU.\n\n\n Bytes Byte -- unit of information storage\n -- a document, an image, a movie .. how many bytes?\n 1 byte is enough to hold 1 letter, e.g. 'b' or 'X'\n Below we'll look at storage in: RAM, hard drives, flash drives\n All measured in bytes, despite being very different hardware\n Megabyte, MB, about 1 million bytes\n Gigabyte, GB, about 1 billion bytes\n \nThe space that data takes up in the computer is measured in by the \"byte\". One byte is big enough to hold a single typed letter, like 'a'. Here we'll look at storing data in RAM memory and in persistent storage like a hard drive. All of that storage space will be measured in bytes.\n\n\n 2. RAM RAM - Memory, Random Access Memory\n Temporary, working storage bytes\n e.g. new SimpleImage(\"flowers.jpg\")\n   --bytes of image loaded into RAM\n e.g. pixel.setRed(0) ... manipulating bytes in RAM\n RAM is \"volatile\", not \"persistent\", .. gone when power goes out\n e.g. You're working on a  doc, then power goes out (vs. \"Save\")\n RAM - Random Access Memory, or just \"memory\". RAM is the working scratchpad memory the computer uses to store code and data that are being actively used. RAM is effectively a storage area of bytes under the control of the CPU. RAM is relatively fast, able to retrieve the value of any particular byte in a few nanoseconds (1 nanosecond is 1 billionth of a second). The other main feature of RAM is that it only keeps its state so long as it is supplied with power -- RAM is \"volatile\", not \"persistent\". \n\n Suppose you are working on your computer and it suddenly loses power and the screen goes blank. You understand that what you were working on is gone .. RAM has been wiped clean, leaving you only with what you last saved to disk (below).\n\n 3. Persistent Storage: Hard Drive, Flash Drive Persistent storage\n --\"Non volatile\" .. preserved when not powered\n Hard drive - stores bytes as a magnetic pattern on a spinning disk\n  --aka \"hard disk\"\n  --High pitch spinning sound you may have heard\n Flash drive - stores bytes as electrons in a chip\n  --aka \"Flash memory\"\n  --\"Solid state\", no moving parts approach\n Flash storage forms: usb key, SD card in camera, flash chips built into a tablet\n Flash used to be very expensive, so most computers used hard disks\n However flash is getting cheaper (Moore's law)\n Not to be confused with \"Adobe Flash\", a proprietary media format\n Persistent storage - long term storage for bytes as files and folders. Persistent meaning that the bytes are stored, even when power is removed. A laptop might use a spinning hard drive (also known as \"hard disk\") for persistent storage of files. Or it could use a \"flash drive\", also known as a Solid State Disk - SSD, to store bytes on flash chips. The hard drive reads and writes magnetic patterns on a spinning metal disk to store the bytes, while flash is \"solid state\" .. no moving parts, just silicon chips with tiny groups of electrons to store the bytes. In either case, the storage is persistent, in that it maintains its state even when the power is off.\n\n A flash drive is faster and uses less power than a hard disk. However, per byte, flash is significantly more expensive than hard drive storage. Flash has been getting cheaper, so it may take over niches at the expense of hard drives. Flash is much slower than RAM, so it is not a good replacement for RAM. Note that Adobe \"flash\" is an unrelated concept; it is a proprietary media format.\n\n Flash storage is what underlies USB thumb drives, SD cards for use in cameras, or the built-in storage in a tablet or phone.\n\n File System When you take a digital picture, where does it go?\n File system -- organize the bytes of persistent storage\n \"File\" - a name, a handle to a block of bytes\n e.g. \"flowers.jpg\" refers to 48KB of image data bytes\n The hard drive or flash drive provides persistent storage as a flat area of bytes without much structure. Typically the hard disk or flash disk is formatted with a \"file system\" which organizes the bytes into the familiar pattern of files and directories, where each file and directory has a somewhat useful name like \"resume.txt\". When you connect the drive to a computer, the computer presents the drive's file system to the user, allowing them open files, move file around, etc.\n\n Essentially, each file in the file system refers to a block of bytes, so the \"flowers.jpg\" name refers to a block of 48KB of bytes which are the data of that image. The file system in effect gives the user a name (and probably an icon) for a block of data bytes, and allows the user to perform operations on that data, like move it or copy it or open it with a program. The file system also tracks information about the bytes: how many there are, the time they were last modified.\n\n Microsoft uses the proprietary NTFS file system, and Mac OS X has its Apple proprietary HFS+ equivalent. Many devices (cameras, MP3 players) use the very old Microsoft FAT32 file system on their flash cards. FAT32 is an old and primitive file system, but it is good where wide support is important.  Pictures of Hardware Below images of a low-end Shuttle computer with a 1.8ghz CPU, 512MB of RAM and a 160GB hard drive. It cost about $200 in around 2008. It broke, and so became a classroom example.\n\n \nHere is the flat \"motherboard\", a little smaller than a 8.5 x 11 piece of paper, that the various components plug in to. At the center is the CPU. At the far is the RAM memory. Just to the right of the CPU are a couple support chips. Prominently, one of the chips is covered with a copper \"heatsink\" .. this presses tightly against the chip, dissipating the heat from the chip into the surrounding air. The CPU also had a very large heatsink, but it was removed to make the CPU visible.\n\n Motherboard\n CPU metal package, held by lever\n Copper heatsink\n \nThe CPU is held tightly against the motherboard by a little lever mechanism. Here the mechanism is released so the CPU can be picked up. The fingernail sized CPU is packaged underneath this metal cover which helps conduct the heat from the CPU up to its heatsink. The gray stuff on the metal chip cover is \"thermal paste\", a material which helps conduct heat from the chip housing to its (not shown) heatsink.\n\n\n CPU chip in metal package\n Heatsink has been removed\n Bottom of package .. many connections (little wires)\n \nFlipping the CPU over shows the little gold pads on the bottom of the CPU. Each pad is connected by a very fine wire to a spot on the silicon chip.\n\n\n \nNow looking from the side, the heatsink and the RAM memory card can be seen more clearly, sticking up from the motherboard.\n\n RAM memory card\n Plugs in to motherboard\n 512 MB card (4 chips)\n \nRAM is built with a few chips packaged together onto a little card known as a DIMM that plugs into the motherboard (dual inline memory module). Here we see the RAM DIMM removed from its motherboard socket. This is a 512MB DIMM built with 4 chips. A few years earlier, this DIMM might have required 8 chips in order to store 512MB .. Moore's law in action.\n \nThis is a hard drive that connects to the motherboard with the visible standard SATA connector. This is a 160GB, \"3.5 inch\" drive referring to the diameter of the spinning disk inside; the whole drive is about the size of small paperback book. This is a standard disk size to use inside a desktop computer. Laptop computers use 2.5 inch drives which are a bit smaller.\n\n 160 GB hard drive\n Connects to motherboard with standard SATA cable\n \nThis is a USB flash drive that, like a hard drive, provides persistent byte storage. This is also known as a \"thumb drive\" or \"USB key\". It is essentially a USB jack connected to a flash storage chip with some support electronics:\n\n USB thumb drive\n Contains a flash chip, solid state\n SD Card, similar idea\n Here it is taken apart, showing the flash chip that actually stores the bytes. This chip can store about 1 billion  bits  .. how many bytes is that? (A: 8 bits per byte, so that's about 125 MB)\n Here is a \"SD Card\" which provides storage in a camera. It's very similar to the USB flash drive, just a different shape.\n Microcontroller - Cheap Computer Chip Microcontroller\n Complete computer on a chip\n Small CPU, RAM, storage (Moore's law)\n Chip can cost under $1\n Car, microwave, thermostat\n Arduino Computer This is an \"arduino\" board, microcontroller chip\n --www.arduino.cc\n As low as $20\n Open source, free, not Windows only, tinkering\n Art project -- switches, sensors, lights\n"}, "text_020": {"section": "Week 3", "subsection": "Bits and Bytes", "unit": "Bits and Bytes", "body": "Bits and Bytes At the smallest scale in the computer, information is stored as bits and bytes. In this section, we'll look at how that works.\n\n Bit Bit -- like an atom -- the smallest unit of storage\n A bit stores just a 0 or 1\n \"Computer is all 0's and 1's\" ... bits\n Anything with two separate states can store 1 bit\n --Nick's tennis racket example\n Chip uses electricity 0/1 states\n Hard drive uses spots North/South magnetism 0/1 states\n Bit too small to be much use\n Group 8 bits into a byte\n Everything in a computer is 0's and 1's ... what does that mean? The  bit  stores just a 0 or 1 .. it's the smallest building block of storage.\n\n\n Byte One byte = grouping of 8 bits\n e.g. 0 1 0 1 1 0 1 0\n One byte can store one letter, e.g. 'b' or 'x'\n How much exactly can one byte hold? How many distinct/separate patterns can be made with 1, 2, or 3 bits?\n (Not hold you responsible for details, go through derivation)\n Number of bits Distinct Patterns 1 0 1 2 00 01 10 11 3 000 001 010 011  100 101 110 111 3 Bits\n Consider just the leftmost bit\n It can only be 0 or 1\n Lefmost bit is 0, append 2-bit patterns\n Leftmost bit is 1, append 2-bit patterns again\n Result ... 3-bits has twice as many patterns as 2-bits\n Number of bits Distinct Patterns 1 0 1 2 00 01 10 11 3 0 00  0 01  0 10  0 11  1 00  1 01  1 10  1 11 In general: add 1 bit, double the number of patterns\n 1 bit - 2 patterns\n 2 bits - 4 \n 3 bits - 8\n 4 bits - 16\n 5 bits - 32\n 6 bits - 64\n 7 bits - 128\n 8 bits - 256\n Mathematically: n bits yields 2\u207f patterns (2 to the nth power)\n One Byte - 256 Patterns Need to know:\n 1 byte is group of 8 bits\n 8 bits can make 256 different patterns\n How to use the 256 patterns?\n How to store a number in a byte?\n Start with 0, go up, one pattern per number, until run out of patterns (256)\n 0, 1, 2, 3, 4, 5, ... 254, 255\n One byte holds a number 0..255\n Code: pixel.setRed(n) took a number 0..255. Why?\n Red value stored in  one byte"}, "text_021": {"section": "Week 3", "subsection": "Kilobytes Megabytes Gigabytes", "unit": "Kilobytes Megabytes Gigabytes", "body": "Kilobytes Megabytes Gigabytes The size of information in the computer is measured in kilobytes, megabytes, and gigabytes. In this section, we'll look at common sizes you would see in real life.\n\n Kilobyte or KB Kilobyte KB - about 1 thousand bytes\n A small email text is about 2 KB\n A 5 page paper might be 100 KB\n Text does not take a lot of bytes to store compared to images or video\n One kilobyte (KB) is a collection of about 1000 bytes. A page of ordinary roman alphabetic text takes about 2 kilobytes to store (about one byte per letter). A typical short email would also take up just 1 or 2 kilobytes. Text is one of the most naturally compact types of data at about one byte required to store each letter. In non-roman alphabets, such as Kanji, the storage takes up 2 or 4 bytes per \"letter\" which is still pretty compact compared to audio and images.\n\n Megabyte or MB Megabyte (MB) - about 1 million bytes\n aka about 1000 KB\n MP3 audio is about 1 megabyte per minute\n A high quality digital picture is about 2-5 megabytes\n One megabyte is about 1 million bytes (or about 1000 kilobytes). An MP3 audio file of a few minutes or a 10 million pixel image from a digital camera would typically take up few megabytes. The rule of thumb for MP3 audio is that 1 minute of audio takes up about 1 megabyte. Audio and image and video data typically stored in \"compressed\" form, MP3 being an example. We'll talk about how compression works later. A data CD disk stores about 700 MB. The audio on a CD is not compressed, which is why it takes so much more space than the MP3. The series of bits are represented as spiral path of tiny pits in the silver material in the disk. Imagine that each pit is interpreted as a 0, and the lack of a pit is a 1 as the spiral sequence is read. Fun fact: the whole spiral on a CD is over 5km long.\n\n Gigabyte or GB Gigabyte GB = about a billion bytes\n aka about 1000 MB\n Common sized unit modern hardware\n 4000 MB = 4 GB\n An ordinary computer in 2012 might have 4 GB or RAM\n A DVD disk has a capacity 4.7GB (single layer)\n --Figure 2 GB per hour of video (varies greatly)\n A flash drive might hold 16 GB\n A hard drive might hold 750 GB\n One gigabyte (GB) is about 1 billion bytes, or 1 thousand megabytes. A typical hard drive in 2012 stores about 750 GB. A computer might have 4 GB of RAM. A flash memory card used in a camera might store 4 GB. A DVD movie is roughly 4-8 GB.\n\n Terabyte or TB One terabyte (TB) is about 1000 gigabytes, or roughly 1 trillion bytes. You can buy 1 TB and 2 TB hard drives today, so we are just beginning the time when this term comes in to common use. Gigabyte used to be a rare term too, until Moore's law made it common.\n\n Gigahertz - Speed, not Bytes One gigahertz is 1 billion cycles per second (a megahertz is a million cycles per second). Gigahertz is a measure of speed, very roughly the rate that at a CPU can do its simplest operation per second. Gigahertz does not precisely tell you how quickly a CPU gets work done, but it is roughly correlated. Higher gigahertz CPUs also tend to be more expensive to produce and they use more power (and as a result give off more heat) .. a challenge for putting fast CPUs in small devices like phones. The ARM company is famous for producing chips that are very productive with minimal power and heat. Almost all cell phones currently use ARM CPUs.\n\n Kilobyte / Megabyte / Gigabyte Word Problems Anyone today should be comfortable doing simple arithmetic to figure MB / GB sizes, such as with these word problems:\n\n Word Problems Solution Alice has 600 MB of data. Bob has 700 MB of data. Will it all fit on Alice's 2 GB thumb drive? \nYes it fits: 600 MB + 700 MB is 1300 MB. 1300 MB is 1.3 GB, so it will fit on the 2 GB drive no problem. Equivalently we could say that the 2 GB drive has space for 2000 MB, so the 1300 MB fits.\n Alice has 100 small images, each of which is 500 KB. How much space do they take up overall in MB? \n100 times 500 KB is 50000 KB, which is 50 MB.\n Your ghost hunting group is recording the sound inside a haunted Stanford classroom for 20 hours as MP3 audio files. About how much data will that be, expressed in GB? \nMP3 audio takes up about 1 MB per minute. 20 hours, 60 minutes/hour, 20 * 60 yields 1200 minutes. So that's about 1200 MB, which is 1.2 GB.\n Alternate Terminology: Kibibyte Mebibyte Gibibyte Tebibyte When I say \"about a thousand\" .. 1000 or 1024? There are two schemes, the \"1000\" system, and the \"1024\" system .. these result in definitions of MB GB TB which differ by up to 10%. For this class, I'm willing to ignore that level of detail, and think of the factors as just \"about a thousand\". For more information about this issue, see below.\n\n\n There's this problem with the word \"megabyte\" .. does it mean 1024 * 1024 bytes, i.e. 2^20 which is 1,048,576, or does it mean exactly 1 million. It's just a 5% difference, but marketers tend to prefer the 1 million, interpretation, since it makes their hard drives etc. appear to hold a little bit more. Also, the difference grows larger and larger for the gigabyte and terabyte sizes. In an attempt to fix this, the terms \"kibibyte\" \"mebibyte\" \"gibibyte\" \"tebibyte\" have been introduced to specifically mean the 1024 based units (see  wikipedia kibibyte article ). These terms do not seem to have caught on very strongly thus far. If nothing else, remember that terms like \"megabyte\" have this little wiggle room in them between the 1024 and 1000 based meanings. We will never grade off for this distinction .. \"about a million\" will be our close-enough interpretation for \"megabyte\". The \"error\" at the megabyte level is about 5%. At the terabyte level the error is about 10%.\n\n\n\n\n\n\n"}, "text_022": {"section": "Week 3", "subsection": "Make Your Own Bluescreen (optional)", "unit": "Make Your Own Bluescreen", "body": "Make Your Own Bluescreen This page lets you run Bluescreen or other code with your own images. Creating your own bluescreen here is just an optional activity for fun, not something graded for the course. At the start of week-3, we'll create a forum topic for people to post their created images and see other people's images.\n\n For the most recent Stanford on-campus CS101, we had the following category suggestions for custom created bluescreens. These are not requirements, but might help spark some ideas of what you could do.\n\n Bluescreen categories:\n Artistic\n Humor\n Use of post-paint effects\n You hanging out with an Obama\n 1. Create Foreground Images, Not Too Big First create a \"foreground\" image with people or whatever in front of a colored background, and save that image on your computer. Note: you don't want to create an image that is too large to work with. Many digital cameras create very large images like 4000 by 3000. Such large images may be too big to work reliably here, so it's best to create a moderate size image like 800 x 600. You can do this either by setting your camera to take a small image, or by resizing or cropping the image before loading it into this page. On the Mac, the built-in Preview application can crop and resize and export images, and on Windows I assume there's something similar. Or alternately you can use a free web site to do it such as   picresize.com  (opens in a new window).\n\n\n 2. Artistic Composition Take a few different foreground images to play with. One strategy is to have the person centered, and the background will appear behind them. Another strategy is to place the person to one side, so they can appear to look at or interact with the background you select. You can also try dressing the people in the foreground with blue clothes, or blue sunglasses or whatever, so the background will show through those areas. You don't have to use blue -- green is also popular. Note that the common cheap blue tarps don't work quite right as a background, because they tend to have shiny white areas which lack color. You might be able to fix this in \"post\" below.\n\n 3. Fix It In Post (optional) \"Fix It In Post\" is a sort of Hollywood joke, referring to fixing some on-camera mistake later on in the computer post-production phase. This is totally optional, but you can do the same sort thing with your bluescreen image. For example, if part of the blue background is not coming out the way you like, you can edit the image in a paint program, and draw a blue rectangle over the area to just  make  it be blue the way you want. (I did this, for example, with the fish's eyes in one homework, to make them really blue so the result looked right.) Since the blue gets removed by the bluescreen algorithm, it does not appear in the final image. You are just creating a sort of hole for the background image to show through. On the Mac, the built-in Preview image app has a very limited ability to put colored rectangles and ovals on things, and on Windows the Paint program is similar.\n\n In the spirit of coding this up on your own -- you can manipulate the foreground and background in a paint program, but putting it all together should be done by your code and your if-statement logic.\n\n 4. Load Image Into This Page \nTo load an image into this page, use the Browse button to select an image file on your computer. This loads the image into this page so your code can refer to it by its file name, such as \"myimage.jpg\" or whatever. This does not upload the image to some server or anything like that; the image is just sitting on your computer the whole time. When you reload this page, it all gets cleared.\n\n Browse:\n Files you have uploaded \nWith one or more images loaded above, you can write code that uses them below. You can load one image for the foreground and another image for the background. The code should look like the following, using the actual image name within the quotes.\n\n \nimage = new SimpleImage(\"myimage.jpg\");  // image browsed earlier by name\nback = new SimpleImage(\"moon.jpg\"); \nback.setSameSize(image);   // often useful to do this\n\n// ...\n// code to work in image/back images\n// ...\n\nprint(image);\n \nWhen you have code that prints an image that you want to keep, you can right-click the  image printed on screen to save it locally. For me, this feature works in the latest Firefox and Chrome. The saved file is probably a .png image file, which is similar to .jpg, but tends to take up more bytes. Alternately, you can take a screenshot on your computer to grab a picture including your printed image.\n\n\n Bluescreen Code \nimage = new SimpleImage(\"monkey.jpg\");\nback = new SimpleImage(\"yosemite.jpg\");\nback.setSameSize(image);\n\nfor (pixel: image) {\n  avg = (pixel.getRed() + pixel.getGreen() + pixel.getBlue())/3;\n  // your code here\n  \n}\nprint(image);"}, "text_023": {"section": "Week 4", "subsection": "Software", "unit": "Software", "body": "Software Software - code that runs on the hardware\n I'm going to simplify things a bit here\n CPU implements \"machine code\" instructions\n --Each machine code instruction is extremely simple\n --e.g. add 2 numbers\n --e.g. compare 2 numbers\n Code we have seen  pixel.setRed(10) --To run, expanded to about 10 machine code instructions\n Machine Code \"Software\" is the general category of code which runs on the hardware. If the hardware is a player piano, then the software is the music. The common case is a \"program\" like Firefox -- software you run on your computer to solve a particular problem. A computer can run multiple programs at the same time, keeping their use of memory, drawing in windows etc. separated so they hopefully do not interfere with each other. \n\n A CPU understands a low level \"machine code\" language (also known as \"native code\"). The language of the machine code is hardwired into the design of the CPU hardware; it is not something that can be changed at will. Each family of compatible CPUs (e.g. the very popular Intel x86 family) has its own, idiosyncratic machine code which is not compatible with the machine code of other CPU families.\n\n Instructions and Programs The machine code defines a set of individual instructions. Each machine code instruction is extremely primitive, such as adding two numbers or testing if a number is equal to zero. When stored, each instruction takes up just a few bytes. When we said earlier that a CPU can execute 2 billion operations per second, \"operations\" there refers to these simple machine code instructions. \n\n A program, such as Firefox, is made up of a sequence of millions of these very simple machine code instructions. It's a little hard to believe that something as rich and complicated as Firefox can be built up out of instructions that just add or compare two numbers, but that is how it works. A sand sculpture can be rich and complicated when viewed from a distance, even though the individual grains of sand are extremely simple.\n\n What is a Program?, What is Running? \"Program\" e.g. Firefox, millions of simple machine code instructions\n --Instructions, like grains of sand making up sculpture\n CPU runs a \"fetch/execute cycle\"\n --fetch one instruction in sequence\n --execute (run) that instruction, e.g. do the addition\n --fetch the next instruction, and so on\n \"loop\" instruction: jump back 10 instructions\n --Loops are implemented this way\n \"if\" instruction: skip ahead if a certain condition is true\n --If statements are implemented this way\n The CPU runs instructions using a \"fetch-execute\" cycle: the CPU gets the first instruction in the sequence, executes it (adding two numbers or whatever), then fetches the next instruction and executes it, and so on. Some of the instructions affect the order that the CPU takes through the instruction sequence .. for example an instruction might direct the CPU to jump back to an earlier point in the instruction sequence (loops are implemented this way), or to skip over the next instruction if a particular condition is true (if-statements are implemented this way).\n\n Double Click a Program What is a program, like Firefox.exe (.exe is a Windows convention)\n The file Firefox.exe is mostly the bytes of millions of instructions\n Double click Firefox.exe to Run\n --The instruction bytes are copied up into RAM\n --The CPU is directed to start running at the first instruction\n In the file system, a file like Firefox.exe just contains the bytes of the machine code instructions that make up the program (\".exe\" is a windows convention to mark a file as a program). Each machine code instruction takes up about 4 bytes, and whole program is just an enormous sequence of instructions.\n\n On my machine, Firefox is 80 MB in size. Assuming all those bytes are instructions, and each instruction is 4 bytes, how many machine code instructions make up Firefox? (Answer: 80 MB is 80 million bytes, so that would be 20 million instructions.)\n\n When the user double clicks a program file to run it, essentially the block of bytes of the instructions for the program are copied into RAM, and then the CPU is directed to begin running at the first instruction in that area of RAM.\n\n\n Operating System Who starts Firefox?\n Operating System\n Set of supervisory programs, run when computer first starts\n Administration behind the scenes\n Starting/managing/ending other programs\n --Modern computers can run multiple programs at the same time\n --Operating system keeps each program run isolated\n --Program has its own RAM, its own windows on screen\n --vs. accidental or malicious action between programs\n e.g. Laptop\n e.g. Digital camera\n The \"operating system\" of a computer is like a first, supervisory program that begins running when the computer first starts up (\"boots up\").   The operating system plays an invisible administrative and bookkeeping role behind the scenes. When a desktop or laptop starts up, the operating system typically gets things organized and then launches a \"file explorer\" program which displays windows and menus etc. that show the user what file systems are available, allowing the user to navigate and operate on the files.\n\n The operating system keeps things organized in the background so that multiple programs can run at the same time, which is known as \"multitasking\". The operating system gives each program its own area of memory, so each program only accesses its own resources ..  attempting to limit what an erroneous or malicious program can do. Keeping the programs separate is sometimes known as \"sandboxing\" .. mediating the access of each program so it operates independently, without interfering with other programs or the system as a whole. Similarly, each program has some access to the screen through a window, but this output area is separated from the output of other programs.\n\n Recall that a .exe file or whatever is essentially just a file of machine code instructions. When you double-click the program, it is the operating system that \"launches\" the program, doing the housekeeping steps of allocating an area of memory within RAM for the program, loading the first section of the program's machine code into that memory, and finally directing the CPU to start running that code.\n\n A digital camera is also a little computer. When it starts up, it does not run a file manager program. Instead, after the basic housekeeping is set up, the camera may just run a single program that draws the menus etc. on the camera's screen and responds to clicks on the camera's buttons and so on.\n\n\n Boot / Reboot Chicken and egg problem.. who runs the operating system?\n When first powered on, computer runs a tiny \"powered on\" program\n That program typically looks for a disk containing an operating system to run\n Etymology: \"lift self over a fence by pulling on your bootstraps\"\n Boot up -- start\n Reboot -- shutdown/start-fresh cycle\n"}, "text_024": {"section": "Week 4", "subsection": "Computer Languages", "unit": "Computer Languages", "body": "Computer Languages From Programmer to the CPU We've written small Javascript programs\n We've seen large program like Firefox\n Computer language used by a person (e.g. Javascript)\n vs. the simple machine code instructions in the CPU\n What's the connection?\n (Here the basic themes, not the details)\n Computer Languages It is extremely rare to write machine code by hand. Instead, a programmer writes code in a more \"high level\" computer language with features that are more useful and powerful than the simple operations found in machine code. For CS101, we write code in Javascript which supports high level features such as strings, loops, and the print() function. None of those high level features are directly present in the low level machine code; they are added by the Javascript language. There are two major ways that a computer language can work.\n\n Source Code and Compiler One common computer language strategy is based on a \"compiler\". The computer languages C and its derivative C++ are old and popular computer languages that use this strategy, although they tend to have fewer features than dynamic languages (below).\n\n In C++, the programmer writes C++ code which includes high level facilities such as strings and loops (much as we have seen in Javascript). Here is some C++ code to append a \"!\" at the end of a string.\n\n Computer languages -- \"high level\" features\n --e.g. loops, if-statements, strings\n e.g. C, C++, Javascript, Java\n Programmer writes \"source code\" of a program in a language, say, C++\n Example C++ code -- how to get to the CPU?\n \n  // C++ code\n  a = \"hi\";\n  b = a + \"!\";\n This code appends the string \"!\" on to the end of \"hi\", resulting in the string \"hi!\" stored into the variable b. The machine code instructions in the CPU are too primitive to implement this append operation as one or two instructions. However, the operation can be accomplished by a longer sequence of machine code instructions strung together.\n\n\n Compiler \"Compiler\" looks at the source code\n Compiler  translates  the source code into a large number of machine code instructions\n Suppose a high level construct, like an if-statement, can be implemented by a sequence of 5 machine code instructions\n e.g. Firefox -- written in C++\n --Compiler takes in Firefox C++ source code, produces Firefox.exe\n The compilation step can be done once and long before the program is run (e.g. produce Firefox.exe at Mozilla headquarters)\n The end user does not need to the source code or the compiler. Distribute the program.exe file in working form\n Does not work backwards -- having the .exe, you cannot recover the source code (well)\n The  Compiler  for the C++ language, reads that C++ code and translates and expands it to a larger sequence of the machine code instructions to implement the sequence of actions specified by the C++ code. The output of the compiler is, essentially, a program file (.exe or whatever) made of many machine code instructions that implements the actions specified in the C++ code. The compiler produces the .exe file from the C++ code, and it is finished. Running the .exe can happen later, and is a separate step.\n\n Source Code Having the .exe allows one to run the program\n To add feature or fix a bug, ideally you want the source code\n --Add a feature in the source code, then run the compiler again to make a new version of the .exe\n Open Source  software\n The source code is available to all, along with the right to make modifications\n 1. Typically the software does not cost anything\n 2.  Freedom  the end user is not dependent on the original vendor to fix bugs, or perhaps the vendor goes out of business\n The user can make the change themselves (since they have access to the source)\n Insurance/freedom policy\n Often the license terms will require the change to made available to the wider community in some cases ... sharing back to the community\n Open source is a very successful model for some cases\n Talk about this more later, mentioning now since it is so close to the idea of what \"source code\" is\n The \"source code\" is the high level code authored by the programmer and fed into the compiler. Generally just the program.exe file is distributed to users. The programmer retains the source code. Changing the program in the future generally requires access to the source code. For example to add a feature, the programmer would make changes in the source code, and then run the compiler to produce a new version of the program.\n\n Open Source \"Open Source\" refers to software where the program includes access to its source code, and a license where the user can make their own modifications. Typically open source software is distributed for free. Critically, beyond the free price, open source software also includes  freedom/independence  since the user is not dependent on the original vendor to make changes or fixes or whatever to the source code. Since the source code is available, if a user feels strongly enough about some feature, they can add the feature themselves, or pay someone to add the feature. Open source means you are not dependent on some other part .. attractive as software is such a critical part of many organizations. Typically open source licenses include a requirement that such improvements to the source code be made available back to the community at large. We'll talk about open source more later on, but I wanted to touch on it here since it is a good example of the difference between a program and its source code.\n\n\n Dynamic (interpreter) Languages Dynamic languages (big tent here)\n e.g. Java, Javascript, Python\n Can be implemented by an \"interpreter\"\n There is a broad category of more modern languages such as Java (the world's most popular language, used in Stanford CS106A), Javascript, and Python, which do not use the compiler/machine-code strategy. Instead, these languages can be implemented by an \"interpreter\", and I will lump them into the category of \"dynamic\" languages.\n\n Interpreter Interpreter is a program which \"runs\" other code\n e.g. web browsers includes a Javascript interpreter\n --Browser \"runs\" bits of Javascript code in a web page, such as ours\n Interpreter looks at one line at a time\n Deconstructs what each line says to do\n The interpreter then does that action, in the moment\n Then proceeds to the next line\n So in Javascript when we have code lines like:\n\n \n  // Javascript code\n  a = 1;\n  b = a + 2;\n e.g. Interpreter looks at  a = 1; , does it\n e.g. Interpreter looks at  b =  a + 2; , does it\n The compiler  translates  source code to equivalent machine code\n The interpreter  does  the code, looking at each line and doing it\n An interpreter is a program which reads in source code as its input, and \"runs\" the input code. The interpreter proceeds through the code given to it, line by line. For each line, the interpreter deconstructs what the line says and performs those actions, piece by piece. For example, Javascript which we have been using, is implemented by a Javascript interpreter which is built into Firefox.\n\n The interpreter runs this code, by taking the lines one at a time, and for each, interpreting its actions. For \"a = 1;\" the interpreter reserves a few bytes to store the value of a, then stores the value 1 into those bytes. Then for \"b = a + 2;\" the interpreter evaluates (a + 2) getting the value 3, reserves some bytes for the b variable, then stores the 3 into the b bytes.\n\n A  compiler  translates all the source code into equivalent machine code program.exe to be run later -- it is a bulk translation. An  interpreter  looks at each line of code, and translates and runs it in the moment, and then proceeds to the next line of source code. The interpreter does not produce a program.exe, instead it performs the actions specified in the source code directly.\n\n Compiler vs. Interpreter Evaluation Disclaimer: there are many languages, no one \"best\" language, it depends!\n Compiled code tends to run faster\n The .exe tends to be \"lean\" .. compiler has removed overhead, some decisions\n Dynamic/interpreter languages\n --Tend to have a greater number of programmer-friendly features\n --i.e. programmers are often more productive in dynamic languages\n --The resulting program tends to run somewhat slower than compiled code\n Compiled code generally runs faster than interpreted code. This is because many questions -- how to append to this string, how many bytes do I need here -- are resolved by the compiler at compile time, long before the program runs. The compiler has, in effect, pre-processed the source code, stripping out many questions and complications, leaving the program.exe as lean and direct as it can be to just run.\n\n In contrast, the interpreter deals with each line in the moment, so all the deciphering and overhead costs of interpreting each line are paid as it runs. These overhead costs in effect make the interpreted program run more slowly than the equivalent compiled program.\n\n\n Dynamic Languages - More Features / Slower Dynamic languages tend to have more features (programmer-friendly)\n e.g. Memory Management\n --C and C++: partially manual, some programmer input required\n --Dynamic languages: automatic memory management, no programmer input needed\n --Automatic memory management not free: spending CPU cycles to lighten programmer workload\n Tradeoff\n --Dynamic languages often allow the programmer to get things done faster\n --However the dynamic code runs a bit more slowly compared to compiled code\n Current trend is towards dynamic languages\n -- Programmers  are scarce\n --It's attractive to save some programmer time at the expense of some CPU/memory use\n --Moore's law reinforces: CPU cheap, programmer relatively rare/expensive\n Supporting features tends to be easier in dynamic languages compared to compiled languages, which is why dynamic languages tend to have a greater number of programmer-friendly features.\n\n \"Memory management\" is the problem in a program of knowing, over time, when bytes of RAM are needed and when they can be reclaimed and use for something else. Every program must solve this problem. Memory management is an excellent example of a feature different between compiled and dynamic languages -- most modern dynamic languages manage memory automatically. The programmer can focus on the problem to be solved, and the dynamic language will take care of managing the memory.\n\n In contrast, in C and C++, the programmer at times must think about memory management at times, and may have to author lines of code to help solve it.  (Aside: many crashes in C and C++ programs are due to errors in the programmer's memory management scheme. It is a difficult problem to solve manually.)\n\n The memory management in dynamic languages is not free. The CPU must run extra lines to solve the memory management. Dynamic languages, in effect, spend CPU cycles to manage the memory. This fits the general pattern that dynamic languages run with more overhead (i.e. more slowly) than compiled languages, but offer superior programmer-friendly features.\n\n Because dynamic languages like Java and Python have more features, a programmer can often write the code to solve a problem more quickly in a dynamic language than they can in C++. The time and attention of programmers is generally quite scarce (translation: programmers are scarce and expensive, which is why you want to be a CS major, or at least a minor!). Therefore, dynamic languages which allow the programmer to produce a correct program more quickly and reliably are pretty attractive, even if the resulting program uses more CPU and more RAM. Aside: Moore's law in effect, keeps making the programmer relatively more expensive compared to the CPU.\n\n Overall, different computer languages have different strengths and weaknesses, and best language for a particular problem depends on the situation. As above, dynamic languages like Java and Python can run slower and generally operate with higher overhead than C++ code, so for some problems, writing in C or C++ is the best strategy. Also, Java and Python lack certain \"low level access\" features which are needed in rare cases.\n\n JIT Just In Time Compiler JIT -- compile code of a dynamic language on the fly\n All major browsers now have a JIT for the Javascript code they run (Chrome)\n Best of both worlds\n Flexibility of dynamic languages\n Combined with most of the performance of the compiled world\n Active area of research, works pretty well\n The most modern form of dynamic language is implemented with an interpreter paired with a Just In Time compiler (JIT) trying to get the best of both worlds. The JIT looks a sections of dynamic code that are being run very frequently, and for those, does a compile to native code for that section on the fly. So the interpreter is used for simple cases, but for important sections of dynamic code (like the inside of a loop), the JIT creates a block of machine code in RAM for that section. The machine code is run for that section of dynamic code, giving similar performance to C++, and is discarded when the program exits. Java and Javascript both use JIT technology extensively. The great speedup of browsers in the last few years has been largely due to the implemented of JIT technology for Javascript. The JIT erases most but not all of the \"10x\" penalty. Even with JITs, dynamic languages still have higher overhead use of resources compared to C and C++.\n\n\n"}, "text_025": {"section": "Week 4", "subsection": "Computer Networking", "unit": "Computer Networking", "body": "Computer Networking Networking Computer Networking\n Computer network is like a phone system for computers, data call\n Basic outline is surprisingly simple, complex details\n Worth knowing .. using all the time\n \nThe details of networking -- like anything really -- can be quite complicated. But the basic ideas of how it all works are surprisingly simple, and that's what we're going to study.\n\n \nThe Internet is like a global phone system for computers: a computer can \"call\" another computer on the internet to get or send a little information. Suppose your laptop is connected to the internet, and you type \"http://www.nytimes.com\" into your browser -- what happens? Your computer contacts the computer \"www.nytimes.com\" -- placing a \"call\" in effect -- and sends a request for the main web page. The request is small, about 1KB (1 kilobyte). The www.nytimes.com machine sends back a large response which is the web page -- maybe 200KB -- and ends the call. Your browser gets back all this data and formats it for your screen so you can read the text, click links etc. We'll look at this fetch-web-page example a few different ways to see how the internet works.\n\n LAN - Local Area Network Start with small scale\n LAN - Local Area Network\n One house, one floor of a building\n Later, show scale up to world-wide internet\n e.g. Ethernet, wired LAN\n e.g. Wi-Fi, wireless LAN\n We'll start by looking at LAN (local area network) technology -- connecting 2-50 computers in a house or on one floor of a building.\n\n Ethernet LAN Ethernet\n Very ubiquitous wired LAN technology\n Wires about as thick as a drinking straw\n 100 meter max wire length --  local Wires often yellow or blue\n RJ-45 plug, like a big phone plug\n Ethernet RJ45 plug\n\n Ethernet cables plugged into the back of a Wi-Fi router\n\n Ethernet  is an extremely common and influential wired LAN standard, so we'll start there. Ethernet cable lengths are typically limited to 100 meters, in keeping with its \"local\" orientation. A typical LAN application is networking the computers in one room or in one floor of a building. The most common form of ethernet wiring is 100base-T (100 megabit) with \"RJ-45\" connectors on the ends. An RJ-45 connector is about the size of your pinkie finger, like a wide phone wire plug.\n\n Packets - Data From Here to There Send image from one computer to another on ethernet\n This is the \"one hop\" case (scale up to whole world later)\n e.g. 50KB image.jpg\n 50,000 bytes\n How to send the image.jpg on the wire?\n Packets Divide bytes of image.jpg into packets\n Say each packet is 1500 bytes (varies)\n Then image.jpg divides into about 32 packets\n Ethernet: transmit one packet between computers\n \nWe'll start with the simplest case of two computer connected with an ethernet cable, and we want to send a 50KB jpeg image file from one computer to the other. This is the \"one-hop\" case .. networking between two computers separated only by an ethernet cable. Below we'll scale this up to the full Internet case of two computers on separate sides of the world. The first question is: how are the bytes of the image file on one computer sent to the other computer over the rather skinny ethernet cable?\n\n \nFor transmission, the 50KB of the image is divided into  packets . The packet is the natural unit of transmission within networking. In this case,  say each packet is about 1500 bytes (a typical ethernet packet size), then the bytes of the 50KB image could be divided into about 32 packets. It is not required that all the packets be the same size, just that every byte of the image is sent in one packet or another.  Ethernet -- Sending One Packet Look at transmission of one 1500 byte packet\n Each byte is 8 bits, e.g. 0 1 1 0 1 0 1 0\n Send each byte (slight simplification):\n Go through 0/1 bits, left to right\n --For each 1, put 3 volts on the wire\n --For each 0, put 0 volts on the wire\n Receive\n --Follow along the pattern of 3 volts / 0 volts coming down the wire\n --Assemble the 0's and 1's to make each byte\n digital transmission  - just 0's and 1's\n \nEthernet provides a basic facility to transmit a packet between two computers connected by the ethernet cable. Say we have a packet of 1500 bytes of information we want to send. Each byte is 8 bits, so that's 12000 bits to send, where each bit is a 0 or 1. Here's an oversimplification that captures how it works: the ethernet cable contains two wires connecting the computers. The sending computer could read through the 12000 bits in order, and for each 1 bit, put 3 volts between the wires, and for each 0 bit, put 0 volts between the wires. The receiving computer can follow along, noting the 3v/0v pattern on the wires over time and so receive the 12000 bits. In reality the most recent ethernet contains 4 pairs of wires and supports sending information in both directions and with a more complex voltage scheme. However, this pattern of going through the bits and varying the voltage to \"send\" each bit is essentially how it all works.\n\n Packet Errors -- Checksum Re-Send 1 Gigabit - 1 billion bits per second\n Detect the occasional error\n Checksum  - receiver can detect that the packet was received correctly\n Example checksum scheme:\n --Sender adds up all packet's bytes, e.g. sum 157231\n --For illustration, say the last 2 digits, 31, is the \"checksum\" of the packet\n --(Actual checksum scheme is more sophisticated)\n --Sender sends the checksum at the end of the packet\n --Receiver: add up the bytes received, check that the checksum matches\n Checksum not matching indicates data corruption\n Receiver asks the sender to re-send that packet\n Very likely to detect errors\n Not perfect - 2 errors could cancel out\n Checksums are widely used in computer systems\n How your file transfers get every bit correct\n \nEach packet includes extra  checksum  bytes, so the receiver of the packet can detect if some of the bits in the packet got corrupted in transmission. A simple example checksum scheme would be: go through all the bytes, and add them all up. The checksum is the last 2 digits of the sum of all the bytes; send that checksum as an extra byte along with the rest of the packet data. The receiver can do the same computation -- adding up all the bytes -- to check that they get the same checksum. The actual checksum algorithm is more complex than just adding up the bytes, and is more capable of detecting errors. The checksum is probabilistic, not detecting 100% of errors; there is a microscopic chance that an error occurs but the checksum does not catch it.\n\n \nThe checksum allows the receiver to notice that a packet did not come through right, and get the sender to re-send that packet. Most packets get through fine, but re-sending a few packets happens all the time in your life. In this way, when you send a JPEG file from one place to another, it comes through correctly, down to every last bit.\n\n\n Multiple Computers -- Ethernet Design Ethernet -- elegant design\n Layout: one wire, shared by all the computers\n No central control  -- distributed, collaborative\n Like talking at a party\n Suppose one computer wants to send to another on the wire\n Send:\n --Every computer has a unique address on the wire\n --Packet includes to:addr of recipient\n --Sender waits for period of silence on the wire, sends packet\n --Packet spreads out on wire, reaching all computers\n --More \"broadcast\" than \"send\"\n Receive:\n --All computers listen to the wire all the time\n --Pick out packets addressed to them, ignore other packets\n Ethernet Collision \"Collision\" happens in rare cases\n Two computers transmit at the same time\n --Data collides on the wire, hopelessly garbled\n --Senders notice the collision, stop sending\n --Both senders wait a  random  amount of time, then try again\n --What if both senders tried to send again immediately?\n \nEthernet, even in its original simple form, is an interesting and elegant design for a LAN network, connecting a bunch of local computers together with one shared wire. It demonstrates the paradigm of getting many actors to collaborate without any central control. Ethernet was created by Bob Metcalfe at Xerox PARC in 1975. Here is how the original Ethernet worked, although newer versions are more complex and have higher performance.\n\n\n  There is one wire, and all the computers are connected to it -- they share the wire -- this is what makes it \"broadband\" as they all share the one medium. This is a simple and cheap configuration; the computers just connect to a dumb, shared wire. To add a computer, just connect it to the wire.\n  Each computers on the LAN has a unique address. This is know as its  MAC  address (Media Access Control). The MAC address is burned in at the factory, thankfully not something you need to set or maintain manually.\n  Only one computer should transmit at a time\n  All computers listen to the wire all the time, picking up packets addressed to them and ignoring packets not for them\n  To send data, the sender divides their message into small \"packets\" of, say, around 1500 bytes. Every packet begins with the address of the recipient.\n  To send, the sender listens, waiting for a period of silence on the wire. When there's a period of silence, the sender sends their packet on the wire, effectively broadcasting it over the whole wire.\n  Sometimes two senders send at the same time, and so their packets \"collide\" on the wire and get garbled. The network hardware can usually detect this \"collision\" and so know to stop transmitting, as those sends are ruined.\n  The senders follow a \"wait/re-transmit\" protocol to re-send packets -- wait a random amount of time -- one of Metcalfe's breakthrough ideas -- and then try again when the wire is quiet. If the senders each tried to re-send immediately .. the sends would just collide again! By waiting a random amount of time, the two senders coordinate that one goes first, then the other.\n  If we have multiple computers using the network at the same time .. this all makes ethernet a little unpredictable in terms of performance; it's hard to say precisely how long it's going to take to get a packet through. In practice, it works incredibly well, getting great performance with very little networking hardware.\n Wi-Fi -- Same Strategy Wi-Fi wireless networking\n Similar strategy to Ethernet (simplifying)\n --Every computer has a radio\n --The \"air\" is the shared medium\n --One computer transmits at a time\n --Everyone listens\n Ethernet Design Summary Ethernet is a nice example of getting multiple distributed actors to collaborate without relying on a central authority. This theme re-appears at the larger, world wide internet scale.\n\n Shared  -- there's just the one wire and everybody uses it (cheap)\n Distributed and Collaborative  -- no central control, depends on each computer following the collaborative protocol in good faith\n Insecure  -- not to hard to listen and pick up packets not intended for you (shared)\n Performance degrades  but does not break as more computers use the shared medium\n Incredibly successful design strategy  -- getting great performance out of minimal hardware\n Wi-Fi is very similar\n"}, "text_026": {"section": "Week 4", "subsection": "The Internet - TCP/IP", "unit": "The Internet", "body": "The Internet - TCP/IP Internet - TCP/IP Standards Previously .. LAN, e.g. ethernet, Wi-Fi, one house\n Internet - world-wide network\n Like a phone system for computers\n --Every computer has a unique address\n --Every computer can try to \"call\" any other computer\n TCP/IP Standards, 1974, government sponsored research\n Free and open standards, vendor neutral -- successful pattern for infrastructure\n The previous LAN examples connect computers all on the same LAN. Now we will scale the problem up to send packets between any two computers on earth.\n\n \nThe worldwide Internet is built on the TCP/IP family of standards (Transmission Control Protocol / Internet Protocol) which solves the larger problem of sending packets between computers across the whole internet. These are free and open, vendor-neutral standards which is probably the reason they have been so incredibly successful.\n\n IP Address Every computer on the internet has an IP address\n Here looking at IP v4 addresses, v6 on the horizon\n e.g. 171.64.64.166\n 4 bytes Left part encodes \"neighborhood\" on internet\n Just like phone, 650-725-0000\n e.g. 171.64.xxx.xxx generally Stanford campus\n e.g. 171.64.64.xxx my floor of Gates building\n Sandra Bullock blooper in The Net: \"23.75.345.200\"\n Goodbye Oscar award!\n \nEvery computer on the internet has an \"IP address\" that identifies it (like a phone number). The IP address is 4 bytes, written between dots, like \"171.64.2.3\". The left part of the address encodes in part where that IP address is in the whole internet -- for example any 171.64.(anything) is part of Stanford (like the area code of a phone number). More specifically, in my part of the Gates building, all the IP addresses begin 171.64.64.XX varying only in that last byte.\n\n \nSandra Bullock: there's a blooper in the movie The Net where the IP address \"23.75.345.200\" is shown. This is not a valid address, since 345 is larger than the largest possible byte value which is 255.\n\n\n Domain Names Domain names, essentially alternate names for IP addrs\n  www.google.com\n  nick2.stanford.edu\n Domain names are easy for people to remember and type\n Domain system can look up an IP addr from a domain name\n So when you use a domain name, it is looked up to get an IP addr for the actual packets\n Router Router has multiple connections, copies/routes packets between them\n My office computer is at 171.64.64.166\n That computer connects \"upstream\" to router 171.64.64.1\n That router handles traffic for a few local computers\n Left side of computer and router IP addresses typically the same -- same neighborhood\n \nThe most common way for a computer to be \"on the internet\" is to establish a connection with a \"router\" which is already on the internet. The computer establishes a connection via, say, ethernet to communicate packets with the router. The router is \"upstream\" of the computer, connecting the computer to the whole internet. For example, the computer in my Stanford office has IP address 171.64.64.166, and it has a one-hop ethernet connection to its router upstream at 171.64.64.1, and this router handles packets for my computer. Often the router's IP address will end in .1, such as my router's 171.64.64.1. Typically the IP address of the computer and its router will look at the same on the left side, since they are in the same \"neighborhood\" of the internet.\n\n How Does a Packet Get Across The Internet? Answer: Hop Hop Hop Hop Hop\n\n Suppose 171.64.64.166 sends a packet over to 173.255.219.70\n IP packet marked with ultimate From:/To: IP addrs\n Key idea: packet proceeds one hop at a time\n Hop 1: 171.64.64.166 sends packet up to its router\n Hop 2: 171.64.64.1 sends packet up to its bigger router\n Hop hop hop, over to destination, 20-30 hops typically\n Analogy: source capillary up to major artery, over, and down to destination capillary\n \nSuppose my computer at 171.64.64.166 wants to send a packet to a computer at 173.255.219.70 somewhere out on the internet (actually that's the codingbat.com server I administer). The Internet is essentially made of a big web of routers talking to each other.\n\n \n1. My computer prepares an IP packet which includes in particular From:/To: information as IP addresses, like this: (IP Packet From:171.64.64.166 To:173.255.219.70 data data data data).\n\n \n2. My computer sends that IP packet to my upstream router, one hop, over ethernet. This is the \"first hop\" of the packet on its journey.\n\n \n3. The 171.64.64.1 router looks at the To:/From: of the packet and forwards it to the next router, one hop closer to its ultimate destination. Essentially, the router has its own upstream router which is bigger and knows more about the layout of the internet. The packet is forwarded, one hop at a time, until it reaches its ultimate destination. Each router does not need to know the whole route to the destination; each router just needs to know which way to send the packet to get it one-hop closer to its destination. The routers look at the left part of the IP address to get the packet to the right neighborhood -- 173.255.x.x --  with the right part of the address -- x.x.219.70 -- coming into play only when the packet is near its ultimate destination.\n\n\n Router Analysis Each router knows enough to figure the next hop, not the whole route\n The original computer does not typically know much, delegating to routers\n \"Core\" routers, towards the middle\n --Many connections\n --Higher capacity\n --More expensive\n --More complicated routing decisions\n Routers measure connection functionality/breakage all the time, route around\n Routers are another distributed, collaborative system\n \nThe routing of a packet from your computer is like a capillary/artery system .. your computer is down at the capillary level, your packet gets forwarded up to larger and larger arteries, makes its way over to the right area, and then down to smaller and smaller capillaries again, finally arriving at its destination.  The ultimate destination puts all the packets back together in the right order to recover the original image file or whatever. The routers at the ends have a trivial upstream/downstream configuration, so the next hop for a packet is pretty simple. More central \"core\" routers tend to have several possible outgoing connections, so they have a more complicated choice about which link to use for the next hop. \n\n \nThe routers, collectively, measure what networks are reachable over what links, and dynamically adjust what links to use for each packet. One simple metric would be to route packets the way that takes the fewest number of hops. In reality, the metrics used are more complex than this. The routing system resilient to router hardware failures, overloading of certain links due to normal traffic, and links going down. The path taken by an IP packet can change from minute to minute. The routers are another example of a distributed, collaborative system. The old joke is that the backhoe is the IP packet's natural predator in the wild, as construction will sometimes slice through an important data cable, suddenly breaking a link in use. The routers \"route around\" such damage automatically.\n\n \nNote that my computer does not need to know the layout of the internet. My computer just needs to have a connection to its upstream router, and the router, and its upstream router etc., will handle the routing from there.\n\n \nVery broadly speaking, most data you get or send on the Internet goes in packets which take more than 10 but less than 30 hops from origin to destination.\n\n Special \"Local\" IP Addresses Note that 10.x.x.x and 192.168.x.x addresses are special \"local\" IP addresses\n These addresses are not valid out on the internet at large\n These are translated to a real IP addr as a packet makes its way\n Frequently given out by Wi-Fi routers .. why I mention them\n What Does it Mean to Be On the Internet? On the internet -- e.g. connect to a Wi-Fi router\n 1. Computer connects to an upstream router to handle traffic. Most Wi-Fi access points combine Wi-Fi radios and a router.\n 2. The router typically gives the computer an IP address to use\n The computer cannot pick an arbitrary IP address, since the left part of the address depends on the location on the internet ... details known by the router\n 3. DHCP \"Dynamic Host Configuration Protocol\" - automatically configure network settings to work locally. Computers very often use this feature to get needed network configuration from the router automatically.\n \nSo what does it mean for a computer to be on the internet? Typically it means the computer has established a connection with a router. The commonly used  DHCP  standard (Dynamic Host Configuration Protocol), facilitates connecting to a router; establishing a temporary connection, and the router gives your computer an IP address to use temporarily. Typically DHCP is used when you connect to a Wi-Fi access point. \n\n Experiment : bring up the networking control panel of your computer. It should show what IP address you are currently using and the IP address of your router. You will probably see some text mentioning that DHCP is being used.\n\n Ping \n\"Ping\" is an old and very simple internet utility. Your computer sends a \"ping\" packet to any computer on the internet, and the computer responds with a \"ping\" reply (not all computers respond to ping). In this way, you can check if the other computer is functioning and if the network path between you and it works. As a verb, \"ping\" has now entered regular English usage, meaning a quick check-in with someone.\n\n Experiment:  Most computers have a ping utility, or you can try \"ping\" on the command line. Try pinging www.google.com or nick2.stanford.edu (171.64.64.166, nick's desktop computer). Try pinging poland.pl ... much farther away from Stanford.\n\n Here I run the \"ping\" program for a few addresses, see what it reports\n \n$  ping www.google.com   # I type in a command here\nPING www.l.google.com (74.125.224.144): 56 data bytes\n64 bytes from 74.125.224.144: icmp_seq=0 ttl=53 time=8.219 ms\n64 bytes from 74.125.224.144: icmp_seq=1 ttl=53 time=5.657 ms\n64 bytes from 74.125.224.144: icmp_seq=2 ttl=53 time=5.825 ms\n^C                            # Type ctrl-C to exit\n--- www.l.google.com ping statistics ---\n3 packets transmitted, 3 packets received, 0.0% packet loss\nround-trip min/avg/max/stddev = 5.657/6.567/8.219/1.170 ms\n$  ping nick2.stanford.edu \nPING nick2.stanford.edu (171.64.64.166): 56 data bytes\n64 bytes from 171.64.64.166: icmp_seq=0 ttl=63 time=1.019 ms\n64 bytes from 171.64.64.166: icmp_seq=1 ttl=63 time=3.638 ms\n64 bytes from 171.64.64.166: icmp_seq=2 ttl=63 time=3.566 ms\n^C\n--- nick2.stanford.edu ping statistics ---\n3 packets transmitted, 3 packets received, 0.0% packet loss\nround-trip min/avg/max/stddev = 1.019/2.741/3.638/1.218 ms\n Traceroute See series of hops\n First few hops in your IP neighborhood\n Farther away hops .. more milliseconds\n Note New York, London .. big jump in milliseconds\n Hops does not go up linearly with distance\n East bay - 30 miles from Stanford - 11 hops\n Poland - 8000 miles from Stanford - 27 hops\n \nTraceroute is a program that will attempt to identify all the routers in between you and some other computer out on the internet - demonstrating the hop-hop-hop quality of the internet. Most computers have some sort of \"traceroute\" utility available if you want to try it yourself (not required). Some routers are visible to traceroute and some not, so it does not provide completely reliable output. However, it is a neat reflection of the hop-hop-hop quality of the internet. Here's an example traceroutes from my office:\n\n \n$  traceroute -q 1 codingbat.com    # I type in a command here\ntraceroute to codingbat.com (173.255.219.70), 64 hops max, 52 byte packets\n 1  yoza-vlan70 (171.64.70.2)  2.039 ms\n 2  bbra-rtr-a (171.64.255.129)  0.932 ms\n 3  boundarya-rtr (172.20.4.2)  3.174 ms\n 4  dca-rtr (68.65.168.51)  27.085 ms\n 5  dc-svl-agg1--stanford-10ge.cenic.net (137.164.50.157)  2.485 ms\n 6  dc-oak-core1--svl-agg1-10ge.cenic.net (137.164.47.123)  3.262 ms\n 7  dc-paix-px1--oak-core1-ge.cenic.net (137.164.47.174)  4.046 ms\n 8  hurricane--paix-px1-ge.cenic.net (198.32.251.70)  14.252 ms\n 9  10gigabitethernet1-2.core1.fmt1.he.net (184.105.213.65)  9.117 ms\n10  linode-llc.10gigabitethernet2-3.core1.fmt1.he.net (64.62.250.6)  4.975 ms\n11  li229-70.members.linode.com (173.255.219.70)  4.761 ms\n$  traceroute -q 1 poland.pl \ntraceroute to poland.pl (193.59.194.101), 64 hops max, 52 byte packets\n 1  yoza-vlan70 (171.64.70.2)  1.573 ms\n 2  bbra-rtr-a (171.64.255.129)  1.106 ms\n 3  boundarya-rtr (172.20.4.2)  32.970 ms\n 4  dca-rtr (68.65.168.51)  1.530 ms\n 5  dc-svl-agg1--stanford-10ge.cenic.net (137.164.50.157)  1.359 ms\n 6  dc-svl-core1--svl-agg1-10ge.cenic.net (137.164.47.121)  1.967 ms\n 7  dc-svl-isp1--svl-core1-10ge.cenic.net (137.164.47.132)  1.728 ms\n 8  xe-4-1-2.edge1.sanjose1.level3.net (4.53.16.185)  1.687 ms\n 9  vlan60.csw1.sanjose1.level3.net (4.69.152.62)  2.210 ms\n10  ae-61-61.ebr1.sanjose1.level3.net (4.69.153.1)  1.637 ms\n11  ae-2-2.ebr2.newyork1.level3.net (4.69.135.186)  70.263 ms\n12  ae-72-72.csw2.newyork1.level3.net (4.69.148.38)  72.573 ms\n13  ae-91-91.ebr1.newyork1.level3.net (4.69.134.77)  72.235 ms\n14  ae-42-42.ebr2.london1.level3.net (4.69.137.69)  139.832 ms\n15  ae-58-223.csw2.london1.level3.net (4.69.153.138)  146.678 ms\n16  ae-21-52.car1.london1.level3.net (4.69.139.98)  172.864 ms\n17  212.113.16.110 (212.113.16.110)  139.842 ms\n18  ae1-0.ams-koo-score-1-re0.interoute.net (84.233.190.57)  169.460 ms\n19  ae0-0.ams-koo-score-2-re0.interoute.net (84.233.190.2)  182.792 ms\n20  ae1-0.ber-alb-score-1-re0.interoute.net (84.233.190.22)  168.766 ms\n21  gi1-0.waw-002-access-1002.interoute.net (84.233.213.33)  168.403 ms\n22  po6-0.waw-002-access-1001.interoute.net (84.233.213.45)  170.038 ms\n23  195.81.72.214 (195.81.72.214)  168.413 ms\n24  pkp-gw-ae0-100.core.nask.pl (195.187.255.156)  179.974 ms\n25  pw-gw0-ae1-100.core.nask.pl (195.187.255.152)  168.538 ms\n26  helm-at2-0-1.nask.waw.pl (194.92.0.158)  169.701 ms\n27  193.59.194.101 (193.59.194.101)  169.830 ms\n \nThe numbers down the left side are the number of \"hops\" to that machine. The \"ms\" figures are the number of milliseconds (1 ms = 1 thousandth of a second) it took for the send/reply. Notice that as the hops get further away, it does roughly take more milliseconds. The first few hops are Stanford addresses, then the route goes over some provider, until it arrives at Linode, which is the company that provides the hardware where codingbat.com currently lives. Small mystery: it seems like the first hop should be 171.64.64.1 which is the first router from my office; apparently that router is invisible to traceroute.\n\n\n\n\n"}, "text_027": {"section": "Week 4", "subsection": "Table Data", "unit": "Table Data", "body": "Table Data New form of data -- \"table\"\n Code that works on tables\n --Similar to image-code ... basic patterns\n Tables are very common way to organize data on the computer\n \nAs another example of how data is stored and manipulated in the computer, we'll look at \"table data\" -- a common a way to organize strings, numbers, dates in rectangular table structure. In particular, we'll start with data from the social security administration  baby name  site.\n\n Social Security Baby Name Example Names for babies born each year\n Top 1000 boy and girl names, 2000 names total\n Organized as a \"table\"\n Fields:  name, rank, gender, year (columns)\n Rows:  one row holds the data for one name\n The  table  is made of 2000  rows , each row represents the data of one name\n Each row is divided into 4  fields Each of the 4 fields has its own name. The field names are: name, rank, gender, year\n Tables Are Very Common Rectangular table format is very common\n \"Databases\" -- extension of this basic table idea\n Number of fields is small (categories)\n Number of rows can be millions or billions\n e.g. email inbox: one row = one message, fields: date, subject, from, ...\n e.g. craigslist: one row = one thing for sale: description, price, seller, date, ...\n \nMuch of the information stored on computers uses this table structure.  One \"thing\" we want to store -- a baby name, someone's contact info, a craigslist advertisement -- is one row. The number of fields that make up a row is fairly small -- essentially the fixed categories of information we think up for that sort of thing. For example one craigslist advertisement (stored in one row) has a few fields: a short description, a long description, a price, a seller, ... plus a few more fields.\n\n The number of fields is small, but the number of rows can be quite large -- thousands or millions. When someone talks about a \"database\" on the computer, that builds on this basic idea of a table. Also storing data in a spreadsheet typically uses exactly this table structure.\n\n Table Code \nWe'll start with some code -- SimpleTable -- which will serve as a foundation for you to write table code. Run the code to see what it does.\n\n\n Baby data stored in \"baby-2010.csv\"\n --\".csv\" stands for \"comma separated values\" and it is a simple and widely used standard format to store a table as text in a file.\n Recall we had:  for (pixel: image) {  code For tables:  for (row: table) {  code print(row) prints out the fields of a row on one line\n \ntable = new SimpleTable(\"baby-2010.csv\");\n\nfor (row: table) {\n  print(row);\n} Table Query Logic Select the rows we want (if-statement)\n Database terminology -- a \"query\" on the database\n e.g. select rows where the rank is 6\n if (row.getField(\"rank\") == 6) { ... \ntable = new SimpleTable(\"baby-2010.csv\");\nfor (row: table) {\n  if (row.getField(\"rank\") == 6) {\n    print(row);\n  }\n} The above code loops over all the rows, and the if-statement prints just the rows where the test is true -- here testing if the rank field is equal to 6, but really the if-statement could test anything about the row.\n\n row.getField( \"field-name\" )  -- pick field out of row\n Field names for the baby table: name, rank, gender, year\n ==  are two values equal? (two equal signs)\n Warning: single equal sign  =  does variable assignment, not comparison. Use  ==  inside if-test. (warning)\n Other comparisons: < > <= >=\n e.g. select row where the name is \"Alice\":\n if (row.getField(\"name\") == \"Alice\") { ... \ntable = new SimpleTable(\"baby-2010.csv\");\nfor (row: table) {\n  if (row.getField(\"name\") == \"Alice\") {\n    print(row);\n  }\n} \nThe row object has a  row.getField( \"field-name\" )  function which returns the data for one field out of the row. Each field has a name -- one of \"name\" \"rank\" \"gender\" \"year\" in this case -- and the string name of the field is passed in to getField() to indicate which field we want, e.g.  row.getField(\"rank\")  to retrieve the rank out of that row.\n\n \nYou can test if two values are equal in JavaScript with two equal signs joined like this:  == . Using ==, the code to test if the name field is \"Alice\" is  row.getField(\"name\") == \"Alice\" \nNote that a  single  equal sign  =  does variable assignment and not comparison. It's a common mistake to type in one equal sign for a test, when you mean two equal signs. For this class, the Run button will detect an accidental use of a single = in an if-test and give an error message. The regular less-than/greater-than type tests: < > <= >= work as have seen before.\n\n\n Table Query Examples \ntable = new SimpleTable(\"baby-2010.csv\");\nfor (row: table) {\n  if (row.getField(\"name\") == \"Alice\") {\n    print(row);\n  }\n} \nWrite in code above to solve these problems:\n\n Baby table fields: name, rank, gender, year\n name field is \"Alice\", \"Robert\", \"Bob\", \"Abby\", \"Abbey\" (try each in turn, yes nobody names their child \"Bob\" .. apparently always using Robert or Bobby)\n rank field is 1\n rank field is < 10\n rank field is <= 10\n rank field is > 990\n gender field is \"girl\"\n What is going on for all these: the loop goes through all 2000 rows and evaluates the if-test for each, printing that row only if the test is true.\n Solution code:\n\n If logic inside the loop:\n \ntable = new SimpleTable(\"baby-2010.csv\");\nfor (row: table) {\n  if (row.getField(\"name\") == \"Alice\") {\n    print(row);\n  }\n}\n// Change string to \"Robert\", \"Bob\", etc.\n \n  if (row.getField(\"rank\") == 1) {\n    print(row);\n  }\n \n  if (row.getField(\"rank\") < 10) {\n    print(row);\n  }\n \n  if (row.getField(\"rank\") <= 10) {\n    print(row);\n  }\n \n  if (row.getField(\"rank\") > 990) {\n    print(row);\n  }\n \n  if (row.getField(\"gender\") == \"girl\") {\n    print(row);\n  }\n"}, "text_028": {"section": "Week 4", "subsection": "Table Data", "unit": "Problems", "body": "For these exercises, you write code to print some rows from a table. All of the problems here use the baby-2010.csv data as in lecture. Recall that the fields in the baby data are: \"name\", \"rank\", \"gender\", \"year\". The output checker looks at the output printed by the code see if it matches what we expect; therefore, don't print anything extra as that might confuse the checker. You'll also notice that the computations here are very fast. That's because your code is just looking at a few thousand data items, compared to millions of items for the image algorithms.\n\n\n"}, "text_029": {"section": "Week 5", "subsection": "Table startsWith endsWith", "unit": "Table startsWith endsWith", "body": "Table startsWith endsWith Previously we did tests with  ==  and  <  -- in this short section, add the startsWith/endsWith functions which test which letters are at the start or end of a string.\n\n\n Alternative to ==, very handy for baby names\n Test if the name field in a row starts with \"Ab\":\n if (row.getField(\"name\").startsWith(\"Ab\")) { ... Test if the name field in a row ends with \"zy\":\n if (row.getField(\"name\").endsWith(\"zy\")) { ... Useful functions, not part Javascript, but in other languages\n I added them just for this class\n Use these with row.getField(\"name\") for many examples\n \nThese tests work very well with the name strings pulled out of the baby data. Here we can look at all the names beginning with \"Ab\".\n\n \ntable = new SimpleTable(\"baby-2010.csv\");\nfor (row: table) {\n  if (row.getField(\"name\").startsWith(\"Ab\")) {\n    print(row);\n  }\n} Variants to try above\n name field starts with \"Ab\", \"A\", \"a\" (lower case), \"Z\", \"Za\" (each in turn)\n name field ends with \"z\", \"ly\", \"la\" (each in turn)\n \nFor our purposes, strings support a  s.startsWith(\"Ab\")  function, here testing if the string in the variable s starts with the \"Ab\" .. true or false. Likewise, there is  s.endsWith(\"yz\") , here testing if the string in variable s has \"yz\" at its very end. (Sadly, these two functions are not part of standard JavaScript; I made them work just for out code because they are so useful. These two functions are common in other computer languages.)\n\n\n Solution code:\n\n If logic inside the loop:\n\n \nif (row.getField(\"name\").startsWith(\"Ab\")) {\n  print(row);\n}\n// Change string to \"A\", \"a\", \"Z\", .. each in turn\n \nif (row.getField(\"name\").endsWith(\"z\")) {\n  print(row);\n}\n"}, "text_030": {"section": "Week 5", "subsection": "Table startsWith endsWith", "unit": "Problems", "body": "These exercises use the startsWith and endsWith functions on the baby name data. The baby fields are \"name\", \"rank\", \"gender\", \"year\". As a reminder, here is the key line from the lecture example -- testing if the name field in a row begins with \"Ab\":   ...\n  if (row.getField(\"name\").startsWith(\"Ab\")) {\n    ...\n"}, "text_031": {"section": "Week 5", "subsection": "Table Boolean Logic", "unit": "Table Boolean Logic", "body": "Table Boolean Logic In this section, we'll extend our code with \"boolean logic\" .. using  and or  to combine multiple true/false tests. Boolean Logic: && || ! Want to be able to combine tests, in English like this  -- Name starts with \"A\"  and  ends with \"y\" In code \"boolean logic\" and &&  (two ampersands) or ||  (two vertical bars) not !  (exclamation mark, we're not doing this one) Sorry syntax is a bit cryptic -- historical syntax accident Boolean Logic Example 1 table = new SimpleTable(\"baby-2010.csv\");\nfor (row: table) {\n  if (row.getField(\"name\").startsWith(\"A\") &&\n      row.getField(\"name\").endsWith(\"y\")) {\n    print(row);\n  }\n} The && joins a startsWith test and a endsWith test The whole test is written across two lines because it is kind of long (optional) Standalone rule --Note that the tests joined by && || are syntactically complete tests on their own, then joined with && or || Looks reasonable but is incorrect: row.getField(\"name).startsWith(\"A\") && endsWith(\"y\") Common error: too few right parenthesis around the test Run tries to detect certain common errors, like omitting the {, or typing & instead of &&, giving an error message Boolean Logic Example 2 Change the code below so it prints rows where the following is true:  Name starts with \"A\" and rank is <= 50 table = new SimpleTable(\"baby-2010.csv\");\nfor (row: table) {\n  if (row.getField(\"name\").startsWith(\"A\")) {\n    print(row);\n  }\n} If logic inside the loop:   if (row.getField(\"name\").startsWith(\"A\") &&\n      row.getField(\"rank\") <= 50) {\n    print(row);\n  }\n Boolean Logic Example 3 Now do an example with  or  || -- change the code below to print rows where the following is true:  Name starts with \"X\" or name starts with \"Y\" or name starts with \"Z\" table = new SimpleTable(\"baby-2010.csv\");\nfor (row: table) {\n  // your code here\n  if (row.getField(\"name\").startsWith(\"X\")) {\n    print(row);\n  }\n} If logic inside the loop:   // your code here\n  if (row.getField(\"name\").startsWith(\"X\") ||\n      row.getField(\"name\").startsWith(\"Y\") ||\n      row.getField(\"name\").startsWith(\"Z\")) {\n    print(row);\n  }\n Many Boolean Examples Here is the working code for the Popular A names test mentioned above. table = new SimpleTable(\"baby-2010.csv\");\nfor (row: table) {\n  if (row.getField(\"name\").startsWith(\"A\") &&\n      row.getField(\"rank\") <= 50) {\n    print(row);\n  }\n} Experiments to try:  For these examples, we'll use one of && || but not both. 1. name starts with \"Ab\" or name starts with \"Ac\" 2. name starts with \"Ab\" or name starts with \"Ac\" or name starts with \"Al\" 3. name starts with \"O\" and name ends with \"a\" 4. name starts with \"O\" and gender is \"girl\" 5. name ends with \"a\" and gender is \"boy\" 6. rank is <= 10 and gender is \"girl\" (translation: \"top 10 girl names\") 7. rank is <= 10 or gender is \"girl\" (this one doesn't make a ton of sense, but what does this print?) 8. name ends with \"ia\" and gender is \"boy\" (hah, then try with gender is \"girl\") 9. name ends with \"io\" and gender is \"girl\" (then try \"boy\") 10. name ends with \"o\" and gender is boy and rank is >= 900 Experiment solution code: If logic inside the loop:   // 1\n  if (row.getField(\"name\").startsWith(\"Ab\") ||\n      row.getField(\"name\").startsWith(\"Ac\")) {\n    print(row);\n  }\n   // 2\n  if (row.getField(\"name\").startsWith(\"Ab\") ||\n      row.getField(\"name\").startsWith(\"Ac\") ||\n      row.getField(\"name\").startsWith(\"Al\")) {\n    print(row);\n  }\n   // 3\n  if (row.getField(\"name\").startsWith(\"O\") &&\n      row.getField(\"name\").endsWith(\"a\")) {\n    print(row);\n  }\n   // 4\n  if (row.getField(\"name\").startsWith(\"O\") &&\n      row.getField(\"gender\") == \"girl\") {\n    print(row);\n  }\n   // 5\n  if (row.getField(\"name\").endsWith(\"a\") &&\n      row.getField(\"gender\") == \"boy\") {\n    print(row);\n  }\n   // 6\n  if (row.getField(\"rank\") <= 10 &&\n      row.getField(\"gender\") == \"girl\") {\n    print(row);\n  }\n   // 7\n  if (row.getField(\"rank\") <= 10 ||\n      row.getField(\"gender\") == \"girl\") {\n    print(row);\n  }\n   // 8\n  if (row.getField(\"name\").endsWith(\"ia\") &&\n      row.getField(\"gender\") == \"boy\") {\n    print(row);\n  }\n   // 9\n  if (row.getField(\"name\").endsWith(\"io\") &&\n      row.getField(\"gender\") == \"girl\") {\n    print(row);\n  }\n   // 10\n  if (row.getField(\"name\").endsWith(\"o\") &&\n      row.getField(\"gender\") == \"boy\" &&\n      row.getField(\"rank\") >= 900) {\n    print(row);\n  }\n"}, "text_032": {"section": "Week 5", "subsection": "Table Counting", "unit": "Table Counting", "body": "Table Counting Thus far... print all matching rows\n Count  the number of matching rows, make a \"report\"\n Requires some new variable manipulation code\n \nThus far we've used an if/print structure inside a loop to select certain rows to print or not. In this short section, we'll use a variable with a little code to  count  how many times an if-test is true. Below is a loop as we have seen before that detects all the names that start with \"A\". After printing the rows, the code prints a summary of how many names started with \"A\".\n\n\n Code To Count Three additions to the standard loop/if/print structure we've used up to now:\n\n Three things to do counting:\n 1. Create a  count  variable and set it to 0 before the loop\n count = 0; 2. Inside the if-statement, increase count by 1\n count = count + 1; --Above increases the value in  count  by 1 (if if-test is true)\n --Evaluates the right hand side, then stores into variable (=)\n 3. Print the final value stored in count after the loop\n print(\"count:\", count); Pattern  three parts, the same every time (init, increment, print)\n Just know that  x = x + 1;  increments the value stored in a variable\n Inside the if-statement,  count = count + 1;   increases whatever number is stored in count by 1 when the if-test is true. This is a weird use of the equal sign = vs. how it works it mathematics. First it evaluates the right hand side. Then it assigns that value back into the count variable, so in effect it increases the number stored in count by 1. The increase-by-1 operation is so common in computer code, many languages including Javascript support the shortcut  count++;  to mean increase by 1.\n\n \ntable = new SimpleTable(\"baby-2010.csv\");\ncount = 0;\nfor (row: table) {\n  if (row.getField(\"name\").startsWith(\"A\")) {\n    print(row);\n    count = count + 1;  // increases the value in count by 1\n  }\n}\nprint(\"count:\", count); Experiments:\n\n 1. Try commenting out or removing the print(row); line inside the { .. } then-code. What is the output now?\n\n  2. How many names start with \"X\"? Then change to count starting with \"Y\"?\n\n  3. How many girl names begin with \"A\"? Then change to count how many boy names begin with \"A\"?\n\n Experiment solutions:\n\n If logic inside the loop:\n\n \n  // 1\n  // It still produces the count: NN output, just without all the row printing first.\n \n  // 2\n  // count names starting with \"X\" (then change to \"Y\")\n  if (row.getField(\"name\").startsWith(\"X\")) {\n    count = count + 1;\n  }\n \n  // 3\n  // count girl names beginning with \"A\" (then change \"girl\" to \"boy\")\n  if (row.getField(\"name\").startsWith(\"A\") &&\n      row.getField(\"gender\") == \"girl\") {\n    count = count + 1;\n  }\n"}, "text_033": {"section": "Week 5", "subsection": "Table Counting", "unit": "Problems", "body": "For these exercises, write code to count names which meet certain conditions and print a line like the following to report the count. count: 23\n The code to produce the above line looks like following, but the real work is in initializing and updating the  count  variable (or whatever variable you use). print(\"count:\", count);\n The starter code includes the standard  count = 0;  line to set count to zero before starting."}, "text_034": {"section": "Week 5", "subsection": "Table Counting Multiple", "unit": "Table Counting Multiple", "body": "Table Counting Multiple Now that we have table counting, the natural thing to want to do is count multiple things to compare them.\n\n Count multiple things in the loop\n Have multiple counters:\n count1 = 0;  // boy counter count2 = 0;  // girl counter Series of if-statements inside the loop (our official form)\n -- x = x + 1;   -- within if-statement, correct variable\n --Note the if-statements are not nested (more complex)\n After the loop, print both counters\n Alternative: could use more mnemonic variable names, like countBoy and countGirl\n \nDo more boy or girl names end with \"y\"? We want a program which by the end prints \"girl count:nn\" and \"boy count:nn\", counting whatever characteristic we are looking for. This is beginning to look like an actual, practical use of computers to sift through data.\n\n One approach is to use two (or more) counters, one for each case we want to count. Here we'll have one boy counter (count1) and one girl counter (count2). Initialize both counters to 0 before the loop. Then in the loop, have two if statements, one for each case we want to count. Inside each if-statement, increment the appropriate counter. At the end of the loop, print the counters. \n\n \ntable = new SimpleTable(\"baby-2010.csv\");\n\ncount1 = 0;  // boy counter\ncount2 = 0;  // girl counter\nfor (row: table) {\n\n  if (row.getField(\"name\").endsWith(\"y\") &&\n      row.getField(\"gender\") == \"boy\") {\n    count1 = count1 + 1;\n  }\n\n  if (row.getField(\"name\").endsWith(\"y\") &&\n      row.getField(\"gender\") == \"girl\") {\n    count2 = count2 + 1;\n  }\n\n}\nprint(\"boy count:\", count1);\nprint(\"girl count:\", count2); It's possible to write the above code in different ways, but we will use that simple pattern: one if-statement for each case we want to count, and the if-statements are all in the loop, one after the other.\n\n\n Names ending in a, i o? Code example with 3 counters.\n\n \ntable = new SimpleTable(\"baby-2010.csv\");\n\ncount1 = 0;\ncount2 = 0;\ncount3 = 0;\nfor (row: table) {\n\n  if (row.getField(\"name\").endsWith(\"a\")) {\n    count1 = count1 + 1;\n  }\n\n  if (row.getField(\"name\").endsWith(\"i\")) {\n    count2 = count2 + 1;\n  }\n  \n  if (row.getField(\"name\").endsWith(\"o\")) {\n    count3 = count3 + 1;\n  }\n\n}\nprint(\"a count:\", count1);\nprint(\"i count:\", count2);\nprint(\"o count:\", count3); Class Survey \nAs another example of a table, we have the class survey of data from the live class at Stanford with people's favorite movies and what have you. The questions for this survey were:\n\n Gender: male/female\n What is your favorite color?\n What is your favorite current TV show?\n What is your favorite current movie?\n What is your favorite sport to play?\n What is your favorite current book?\n What is your favorite soda to drink?\n \nThe survey answers are automatically translated to a google spreadsheet which can be exported in csv table. This data is available in the file \"survey-2012.csv\". This also illustrates that .csv format's role as an interchange format between systems.\n\n  \nThe field names in the table are: gender, color, tv, movie, sport, book, soda. The convertToLowerCase() function of the table changes all the text the table contains to lower case. This simplifies our logic, so we don't have to worry if someone typed in \"Blue\" or \"blue\" .. in the table it will always be the lowercase \"blue\" form. For consistency in the data, I also removed all periods, so soda is \"Dr Pepper\" not \"Dr. Pepper\", and I changed the various spellings \"coca-cola\" to just \"coke\".\n\n\n Survey Code Example Problems These can all be written using our \"loop containing series of if-statements\" form.\n\n 1. Write code to just print the soda field of each row, so we can get a feel for what people typed in.\n\n 2. Count soda favorites: sprite, dr pepper, coke\n\n 3. Variant on above: use || to lump together \"dr pepper\" and \"diet dr pepper\" for each of the three drinks above.\n\n 4. Count sports: football and soccer\n\n 5. Variant on above: change the code to only count soccer answers, however keep separate counts for gender male and female.\n\n \ntable = new SimpleTable(\"survey-2012.csv\");\ntable.convertToLowerCase();\ncount = 0;\nfor (row: table) {\n  // your code here\n  \n}\nprint(\"count:\", count); Table code solutions:\n\n \n// 1. just print the soda field\ntable = new SimpleTable(\"survey-2012.csv\");\ntable.convertToLowerCase();\n\nfor (row: table) {\n  print(row.getField(\"soda\"));\n}\n \n// 2. count 3x sodas\ntable = new SimpleTable(\"survey-2012.csv\");\ntable.convertToLowerCase();\n\ncount1 = 0;\ncount2 = 0;\ncount3 = 0;\nfor (row: table) {\n\n  if (row.getField(\"soda\") == \"sprite\") {\n    count1 = count1 + 1;\n  }\n\n  if (row.getField(\"soda\") == \"dr pepper\") {\n    count2 = count2 + 1;\n  }\n  \n  if (row.getField(\"soda\") == \"coke\") {\n    count3 = count3 + 1;\n  }\n\n}\nprint(\"sprite count:\", count1);\nprint(\"dr pepper count:\", count2);\nprint(\"coke count:\", count3);\n \n// 3. count 3x sodas, including diet\ntable = new SimpleTable(\"survey-2012.csv\");\ntable.convertToLowerCase();\ncount1 = 0;\ncount2 = 0;\ncount3 = 0;\nfor (row: table) {\n\n  if (row.getField(\"soda\") == \"sprite\" ||\n      row.getField(\"soda\") == \"diet sprite\") {\n    count1 = count1 + 1;\n  }\n\n  if (row.getField(\"soda\") == \"dr pepper\" ||\n      row.getField(\"soda\") == \"diet dr pepper\") {\n    count2 = count2 + 1;\n  }\n  \n  if (row.getField(\"soda\") == \"coke\" ||\n      row.getField(\"soda\") == \"diet coke\") {\n    count3 = count3 + 1;\n  }\n}\nprint(\"sprite + diet count:\", count1);\nprint(\"dr pepper + diet count:\", count2);\nprint(\"coke + diet count:\", count3);\n\n \n// 4. Count soccer vs. football\ntable = new SimpleTable(\"survey-2012.csv\");\ntable.convertToLowerCase();\ncount1 = 0;\ncount2 = 0;\nfor (row: table) {\n\n  if (row.getField(\"sport\") == \"soccer\") {\n    count1 = count1 + 1;\n  }\n\n  if (row.getField(\"sport\") == \"football\") {\n    count2 = count2 + 1;\n  }\n}\nprint(\"soccer count:\", count1);\nprint(\"football count:\", count2); \n// 5. Soccer count, separate out male and female\ntable = new SimpleTable(\"survey-2012.csv\");\ntable.convertToLowerCase();\ncount1 = 0;\ncount2 = 0;\nfor (row: table) {\n\n  if (row.getField(\"sport\") == \"soccer\" &&\n      row.getField(\"gender\") == \"male\") {\n    count1 = count1 + 1;\n  }\n\n  if (row.getField(\"sport\") == \"soccer\"  &&\n      row.getField(\"gender\") == \"female\") {\n    count2 = count2 + 1;\n  }\n}\nprint(\"soccer male:\", count1);\nprint(\"soccer female:\", count2);\n"}, "text_035": {"section": "Week 5", "subsection": "Table Counting Multiple", "unit": "Problems", "body": "Each of the following exercises asks you to count two things. The last two lines you print should look like: count: 23\ncount: 42\n For simplicity, we will just use the word \"count\" for both lines in the output. You can print other things inside the loop, so long as the \"count: 23\" lines are at the end. The starter code includes lines to set variables  count1  and  count2  to zero before the loop. You can always print out rows and count them by hand to check your code."}, "text_036": {"section": "Week 5", "subsection": "Analog and Digital", "unit": "Analog and Digital", "body": "Analog and Digital The words  analog  and  digital  are used a lot, but what do they mean? In this section we'll look at those two worlds, which you use every day.\n\n Analog The world is basically analog\n What does that mean?\n \"Signal\" is a varying wave over time\n e.g. sound as a running example here\n \nA  signal  is a varying wave, typically carrying information we care about. Sound is a great example of a signal, and we'll use that as a running example today.\n\n How Does Sound Work? Sound is vibrations, small waves of pressure in the air\n e.g. violin:\n 1. the wooden violin top flexes in and out, a signal\n 2. The movement of the wood creates the same signal waves in the air\n 3. The waves travel through the air, ultimately pushing on the eardrum, recreating the signal\n This is a great example of an  analog  process\n From signal goes from one medium to the next, but keeping its basic shape\n Related to the word  analogy \nSound is vibrations in the air over time -- essentially small changes in air pressure over time. When a violin plays, the wood top and back of the instrument flex in and out, producing little ripples of air pressure which flow out from the violin, like ripples in a pond. When the ripples hit an ear drum, it vibrates back and forth with the pressure changes, translating them into something your brain can sense. Your brain can easily distinguish the sound of a violin or voice or pipe organ playing the same note, but it is hard to put the differences into words. This is a very analog sequence -- the signal goes from one medium to the next, keeping its basic shape.\n\n Oscilloscope \nAn oscilloscope really embodies the idea of analog. An oscilloscope connects to wires, looks at the electrical signal varying over time, and draws that signal on its screen in real time. Voltage is on the vertical axis, and time is the horizontal axis. So the oscilloscope takes in something pretty abstract -- signal varying over time -- and makes it visual.\n\n Sound Demo -- Synthesizer and Oscilloscope \nFor this demo, I have a music synthesizer hooked up to speakers, and also hooked up to an oscilloscope so we can see the signal at the same time that we hear it. Demo: musical synthesizer, oscilloscope, notes, frequency, amplitude, timbre.\n\n Frequency, Amplitude, Timbre Sound often as a repeated up/down pattern\n If waves are a consistent width peak to peak, e.g. 1/400th of a second, we hear a \"note\"\n Frequency  is how often the wave repeats per second\n \"higher\" note = more cycles per second\n --Middle \"A\" on the piano -- 440 cycles\n --Higher \"A\" note, one octave up -- 880 cycles\n --Even higher \"A\", another octave up, 1760 cycles\n All these \"A\" notes sound alike, but octaves apart\n An eerie relationship in our brains between music and math\n Amplitude  -- how high/low the wave goes, bigger waves = louder\n Timbre  -- the shape of the wave sounds different\n --Sine wave pure tone, vs. flute playing the same note\n \nBelow are oscilloscope screenshots for various notes. The width of the oscilloscope screen here is 1/100th of a second. The little random jags are just random noise from the cheesy, duct-tape way I wired this all together. The horizontal green line in the screenshots is an unimportant artifact of the oscilloscope. It represents a height value for which the oscilloscope tries to freeze the wave, hitting the y axis right at that value.\n\n Low C note, sine wave:\n C note, one octave higher (double the cycles per second):\n Same C note as above, but now a flute timbre (shape) instead of sine wave:\n \nVery often the sound -- or \"signal\" -- has a repetitive up/down pattern, with the peaks of the curves hitting at a regular interval, such as every 400th of a second. We hear a regular, repeating cycle like this as a musical \"note\". If the repeating pattern is a mathematically smooth sine wave, we hear it as a very pure, bell-like sound.\n\n Frequency  --  suppose a signal repeats 100 times per second, also known as 100 \"cycles\" per second, that's a frequency of 100. If the signal repeats more rapidly, we hear that as a \"higher\" note. An \"octave\" in music corresponds exactly to a doubling in frequency (i.e. twice as many up/down cycles in the same amount of time). The musical tuning standard is that A above middle C on a piano keyboard is 440 cycles per second. Going up to the next higher A note (about one hand's width on the piano) is 880 cycles per second (double the frequency). These two \"A\" notes sound similar to us, but one is higher. And of course there's next higher A at 1760 cycles, and higher still .. each time doubling the frequency.\n\n Amplitude  is the word for the height and depth that the signal makes on each cycle, corresponding to loudness. Big vertical swings are loud, small vertical swings are quiet. Or phrased as air pressure, bigger changes in air pressure sound louder. The  timbre  of the sound is the fine pattern of shapes and wiggles that can seen on the signal. So a flute \"A\" note has a timbre, varying a little around the basic 440 cycle pattern, and a trumpet playing that same note has a different timbre on the basic 440 cycle pattern.\n\n\n There's Just One Air \nThere is just one body of air that fills a room. All of our ears are in it. A sound (vibrations) in this body of air, travels out to all our ears almost instantaneously at about 1000 feet/second. So what happens when multiple sounds are going into the air at once? The sound signals  add , making a \"sum\" signal. The sum signal goes to your ears, and somehow your ear and brain are able to pull out and hear the component sounds.\n\n Here again is the low-C note:\n \nHere is a high-C note, 3 octaves above the low-C. You can see that the frequency is much higher .. many more cycles per second. \n What happens to the air if the low-C and high-C sounds are playing at the same time? The two signals add together in the air.\nHere is the combination of low-c and high-c playing simultaneously. You can see how the high note is added on top of the more slow changing low note. Your ear takes in this signal, and pulls it apart so you hear both the low note and the high note. It's impressive that the ear can take in this jumbled signal, and pull out and hear the constituents.\n \nAs another example, here is low-C and the C note one octave higher:\n \nWhat does the sum of the above two look like? To convince yourself of the sum behavior, you can draw the two signals on graph paper, manually measure the heights and do the addition, to verify that the sum indeed looks like this:\n\n Sum Facts Chord -- peaks and valleys match up nicely, sounds naturally good (e.g. double the frequency)\n Discord -- peaks and valleys don't match up, sounds bad\n Noise-cancelling headphones -- detect the ambient sound and create an exactly opposite sound, so when added together, it all cancels out to near silence.\n\n When two musical notes play at frequencies where the peaks and valleys do not match up well .. that sounds like discord -- e.g. one note at 100 cycles per second, and a second note at 101 cycles per second. When the frequencies divide evenly so the peaks and valleys match up perfectly -- e.g. note at 100 cycles plus a note at 200 cycles per second --that's a nice sounding chord.\n\n \nThis \"sum\" idea is how noise-cancelling headphones work -- detecting the ambient sound and creating an exactly opposite sound to feed into your ear, so they cancel out leaving silence.  Analog Technology Analog  is the pre-digital way of transmitting or storing a signal. Examples:\n\n Analog: Original Phone System \nThe first telephone was very analog, and in fact the wired phone in your house still works this way (an example of network effect inertia). Follow the trail of the sound signal.\n\n\n\n Person talks into microphone\n Microphone converts sound waves into electrical waves\n Electrical waves go down the wire to the other phone\n At the other phone, speaker has magnets connected to a paper cone -- converts the incoming electrical wave back into sound waves\n Analog!\n A person talks into the phone receiver. Their voice is vibrations in the air -- a signal.\n The phone receiver contains a microphone where the vibrations in the air move a tiny coil of wire. The movement of the wires sets up tiny electrical flow that is in one-to-one correspondence with the air vibrations. Essentially we translate a signal in the air, to an analogous signal of electricity in wires.\n The electrical signal travels out of the house to the phone company, gets amplified etc. and is eventually delivered to the phone at the other end,.\n There the electricity goes into a speaker -- a speaker is just an arrangement of wires and magnets to translate electrical variations back to sound (the reverse of the microphone).\n The key feature of analog signaling is 1-1 correspondence .. variations (a signal) in one medium such as sound in the air, are translated to variations in some other domain like electricity in wires. The signals in the different domains are in 1-1 correspondence -- one goes up, the other goes up.\n Analog and Noise -- Hiss Signal does not go through microphones, wires, magnets, etc.  perfectly\n Each step -- the wires, the magnets, etc. can introduce little errors\n \"Noise\" ... like little random wiggles around the true signal (+ other error forms)\n Noise can sound like \"hiss\" .. e.g. AM radio, cassette tapes\n Pure signal, e.g. put into one end of the phone\n Signal + noise as it comes out of the other end of the phone\n \nWhat do \"errors\" look like in an analog system? The signal you care about is translated from sound to electricity and so on. With each translation step, little errors creep in. The microphone has a little stiffness, the wires don't carry the signal perfectly, and so on. The errors are called \"noise\" -- you can imagine the pure sound signal you wanted but it's been distorted by little up/down errors -- like fuzzy variations around the true signal.\n\n \nThis is the \"hiss\" you hear on the phone line or an AM radio or a cassette tape .. all analog technologies. Why do digital translations of music sound so much better?\n\n\n\n\n"}, "text_037": {"section": "Week 6", "subsection": "Analog and Digital Part 2", "unit": "Analog and Digital 2", "body": "Analog and Digital 2 Digital Technology -- Digitization Horizontal zero line, down the middle\n \"Sample\" (look at) the signal +- vs. the zero line\n Sample very quickly, e.g. 44,000 times per second audio CD\n Each sample records the height of the signal from 0 as a number\n CD audio, each sample is in the range -32767..32768 (2 bytes)\n Reduce signal to a series of \"sample\" numbers: 1003, 1720, 1939, ...\n Small problem: signal is between 1002 and 1003 .. have to pick one or the other\n \nThe way an analog signal is brought into the computer is \"digitization\". The computer \"samples\" the signal very rapidly over time, noting the value (the height basically) of the curve each time, and recording that value as a number. CD quality audio samples the sound signal 44000 times per second, noting the \"height\" of the sound signal once for sample. Each sample is a whole number in the range -32768 .. 32767 (this is the range of number that can be stored in 2 bytes).\n\n \nThe digitization is not perfect. The signal might have a little wiggle that happens so fast, the 44000 samples/second are not fast enough to quite capture the wiggle perfectly. In reality, 44000 samples per second captures almost everything the human ear can hear anyway. There can also be a sort of rounding error -- the signal value might be in between 1452 and 1453, and the digitization has to pick just one value to represent it. As a practical matter, the 44000 samples per second is quite good at capturing the level of detail that humans can hear.\n\n \nSo in essence, digitization translates a sound signal into just a series of numbers: 12000, 12002, 12006, 12007, 12010, 12005, 12006, ... and so on. Playing back the digital sound is just the reverse: a chip takes in the stream of numbers, say representing 44000 samples/second, and constructs an electrical signal that matches those numbers over time. In effect, this reconstructs the original sound signal from the numbers.\n\n\n Digital Playback Have a series of digital sample numbers (CD, MP3) .. how get sound back?\n Playback = recreate signal from the numbers\n Look at each number, plot that height above/below zero line\n Repeat for next number\n Connect the dots .. draw the signal between the dots\n Digital-to-Analog .. chip specialized to do this (\"D/A converter\")\n Digital vs. Errors Samples are recorded as 0's/1's on, say, an audio CD\n What does that signal look like for playback?\n What does that signal look like for playback with noise?\n Notice that, even with noise, the 0's/1's are obvious\n This is why digital playback reliably sounds good compared to analog\n Read back digital signal, ideal, 0/1:\n Read back digital signal in reality, with noise:\n \nFor CD audio, each sample number (12000, 12002, 12006, 12007, 12010, 12005, 12006, ...), is coded as a series of 0's and 1's on the disk. (A single number can recorded as a pattern of 0's and 1's, but we have not gone into the detail of how it's done.)  Say, a dark spot on the disk is a \"1\", a light spot is a \"0\". Now to play the CD, the player reads back this signal with the 0/1 information on it. As above, reading back a signal, you tend to get noise/hiss. In this case, even with lots of noise on the signal, the player can almost always distinguish the 0's from the 1's. It assembles the 0/1 values, from that gets back the sample values (12000, 12002, 12006, ...) and from that reconstructs the sound signal. The key step here, recording the samples as 0's and 1's, is that the read-back process is very resistant to noise. In contrast, with the analog system, the noise is mixed in with the signal we want. With digitization, we screen the noise out.\n\n \nAs a second layer of error-correction, the CD stores in a sense, redundant copies of the sample data. So if one section has errors, detected with a checksum scheme, the CD player can switch to use an alternate copy. This is how, even with a small hole drilled in it, in theory a CD player can still play back perfectly. This is another example of an advantage we get by moving the sound data to the digital domain of just numbers.\n\n Digital -- Compression Suppose we have this series of samples:\n 12000, 12002, 12006, 12007, 12010, 12005, 12006\n The numbers are quite near to each other -- a typical result\n What if we just record the first number\n Then record the  differences , one sample to the next (aka delta)\n 12000, +2, +4, +1, +3, -5, +1\n The numbers to record are much smaller (fewer bytes to store)\n This is an example of  compression  (lossless)\n Compression = apply cleverness to change the data to use fewer bytes\n Another scheme:\n --Drop every other number. On playback, guess the missing samples as the average of the surrounding numbers.\n --This saves 2x space\n --This is a \"lossy\" strategy .. sound is not coming back quite perfect\n MP3 audio compression .. very effective, about 10x less space, but it's lossy\n \nWith this picture of a signal digitized into a series of sample numbers, you can understand a bit how compression works. For audio, the samples tend to look like this: 12000, 12002, 12006, 12007, 12010, 12005, 12006.\n\n \nAs a practical matter, each sample number tends to be very close to the sample numbers that come just before and just after it in time. So one way to \"compress\" the audio, so it takes up less space, is to record just the  changes  -- for each sample, record how much change it is from the previous sample. So the above looks like 12000, +2, +4, +1, +3, -5, +1. These change numbers tend to be small, so it turns out they can be recorded more compactly (requiring fewer 0's and 1's). This is nice example of digital compression -- recording the data in a way which takes up less space, but you can still recreate the original signal. In this case, the compression is lossless.\n\n \nHaving translated the audio into the digital domain -- a series of sample numbers -- we open the data up to all sorts of computer manipulations, since computers are cheap and effective at manipulating numbers.\nMP3 is another example of audio compression. MP3 is complicated, reducing the space required by 10x, and also it is lossy, so it discards little bits of the original signal in a way which the human auditory system tends not to notice.\n\n"}, "text_038": {"section": "Week 6", "subsection": "Digital Media", "unit": "Digital Media", "body": "Digital Media JPEG Images JPEG is a free and open standard for storing digital images, such as you would take with a digital camera. JPEG is a \"lossy\" format, detailed below, allowing an image to be adjusted, losing some detail but requiring less space in the process. JPEG has been incredibly successful, allowing computers, phones, printers, TVs, email, blogs, .. to exchange image files and understand each other. Some commonly understood standard format for what is \"an image\" is needed, and JPEG is the mostly widely used one. JPEG stands for the Joint Photographic Expert Group, a technical committee which drafted the standard. I doubt it was possible at the time to understand how widespread and critical this format would become. JPEG is a \"lossy\" format, meaning that the level detail preserved when a JPEG is saved is adjustable. Say the quality levels are in the range q1, q2, .. q10, q10 corresponding to very little compression and high visual quality and q1 corresponding to very aggressive compression with lower visual quality. In reality the scale terminology is not exact across systems, sometimes described as 0-10, or 1-100. An image saved with q10 saves the maximum detail, but the resulting file takes up the most space. An image can be saved with a lower quality level, causing it to lose some detail, but take up less space. Or in other words, q1 is more compressed, and q10 is less compressed. JPEG is very smart about the way it loses detail, so saving at something like q7 is a normal thing to do without losing appreciable detail. Here are three versions of the flowers.jpg image Here is the image as it originally came out of my camera. I believe the camera uses about q7 internally. This image takes up 48KB.  Here is the image saved at q5, taking up 29KB. I cannot see obvious differences between this version and the one above, although there must be some tiny differences.  Here is the same image, saved at q1, taking up 14KB (about 4x fewer bytes than the q7 version). If you zoom way in, you can see the results of the compression in this version:  There are two things you notice in JPEGs as the shed detail: Block artifacts -- JPEG divides the image into 8x8 blocks. If the compression is very high, you can see the block boundaries. You can see this clearly in the upper-left flower if you zoom in. (In Firefox, use the View-Zoom menu.) What's most amazing is how these blocks are not noticeable if you glance at the image normally. Edge artifacts/noise -- JEPG has a hard time with crisp edges between two colors. In a more-compressed version, little \"noise\" speckles or distortions can appear to either side of the hard edge. Look at the left edge of the flower which is halfway down vertically, or at the very upper left flower.  Considering the the q1 version takes about 4x fewer bytes than the q7 version, JPEG does a good job keeping the basic look of the scene when asked to use less space. Images - How Many Bytes? How many bytes does an image take up? The main issue is just plain size -- how many pixels. An 400 x 300 image has 120,000 pixels. Say each pixel takes three bytes (one for each color channel), that's 360,000 bytes, or about 360 KB. If we double the width, so the image is 800 x 600, how many more bytes is that? Doubling the width multiples the bytes by  4 , just like doubling the side of a rectangle increases the area by a factor of 4. Note that the q7 flowers image up there takes up 48 KB (7.5x smaller than 360KB), so even at relatively high quality levels, JPEG saves a huge amount of space -- that's why cameras use it internally. My cheap little \"12 megapixel\" digital camera takes images which are 4000 by 3000 pixels, stored with JPEG compression of about q7. Each resulting image takes up about 3 MB. Why Use Compression? A digital camera typically uses JPEG compression internally as it writes each image to your flash memory card. The higher the compression, the more images will fit in on the card. I see JPEG edge artifacts all the time where they should not be, which seems like an editor at some level is screwing up -- making a print advertisement, the editor should find q7 copy of the image, not the q1 copy. I see them in print advertisements. I see them in DVD menu screens -- where text has exactly the hard-edge quality that is prone to artifacts. I see them the most digital TV broadcasts, where broadcasters often use very aggressive compression to fit the most channels into the limited bandwidth available. They advertise that they have a lot of channels. Web Page Images One case where you might care about image compression is a web page. Suppose you are publishing a web page that features 3 200KB images. The 600 KB of data that needs to be downloaded for the page make it feel kind of slow for visitors. One approach would be compression -- maybe if the images are more aggressively compressed, they would only take up 100 KB apiece, speeding the whole thing up. But of course you have to be careful that the specific material in the images does not look noticeably bad from the compression. Mostly, images only look noticeably bad at very aggressive compression levels -- q2 or q3. The other important design idea is: don't feel you need to load your site up with images on every square inch. Visual design hint: less is more. Have text and other elements, and a few images here and there where it counts. GIF and PNG Images GIF and PNG (Portable Network Graphics) are \"lossless\" image formats, recording every pixel exactly. They are used for non-photographic images, like little solid color borders. GIF was popular early on with the Internet. However parts of it were patented, but the patents was not enforced. When the patent was enforced more aggressively, the community created the free and open and PNG standard as an alternative, and it also performs a little better than GIF. Audio Formats MP3 is the dominant audio format (good example of a \"network effect\", a later topic). MP3 is lossy, like JPEG. Raw CD audio takes up about 10 MB per minute (this is how it is stored on an audio CD .. no compression). MP3 gets that down to about 1 MB per minute while still sounding pretty good. As with JPEG, you can choose the level of compression, say 2 MB per minute to keep more detail, or 512 KB per minute if space is at a premium. MP3 is patented, and legitimately so. (Nick's opinion) Many modern software patents are garbage .. just patenting obvious solutions. However, MP3 is legitimate: it uses complex and non-obvious techniques to get its excellent 10x compression while still sounding good. If a device or software plays or produces MP3s, a license fee is due to the patent holders, on the order $1-$2 per instance. With each MP3 device you have owned over the years .. you have in effect paid this fee each time. Licensing of devices which can play video is similar. AAC is a more modern form of MP3 used by Apple with their dominant iPod/iTunes system. AAC also features DRM (Digital Rights Management) features, which allow the original content owner to control how the purchaser can use the content they have \"bought\". To provide a free and open alternative, the \"Ogg Vorbis\" audio format was developed. It is a free and open standard and royalty free and typically performs better than MP3. Aside: some geeks have a way of choosing tragically bad names for consumer facing technology, incorporating some obscure reference or joke. I think Ogg Vorbis would be much more widel adopted if they had chosen a better name. Video Formats A video is basically a series of images -- 20 to 60 per second, plus an audio \"track\". Video data takes up a lot of bytes, but computers have now become powerful enough to handle video. Very roughly speaking, say compressed video of about DVD quality takes about 2 GB per hour (33 MB per minute). In reality, there is a very large range of video sizes -- HD video takes more space, smaller YouTube video takes less space. Video compression is complicated and the techniques are heavily patented. MPEG (Motion Picture Experts Group) standardizes some video formats in the industry, and the MPEG-LA (Licensing Authority) handles collecting patent royalties, which are significant. MPEG-2 is used in DVDs and some satellite TV systems, originally released in 1995. Compression techniques have gotten significantly better since then. MPEG-4 and particular the \"h.264\" compression system is very good at producing good looking video with the minimum bytes. Most digital video cameras, phones, and Blu-ray disks use h.264 internally to compress and store the video data. Patent fees are paid by the manufacturer to produce an encoder or decoder in hardware or software. h.264 Obnoxious Royalty Terms One surprising thing about the h.264 licensing is that  it does not come with an unrestricted right to distribute your own video . You have properly bought a video camera (paying for the patents), and produced your video and stored it on your hard drive. However, if you want to make a web site or whatever that distributes the video, you may have to pay additional royalties for each minute distributed of your own video. There may be exceptions if your video is distributed for free, however these terms have been changed over time, so really you have to consult a lawyer to see what you are permitted to do with your own video. These license restrictions strike me as crazy, certainly out of step with how you usually think of having your own data file. My guess is that MPEG did not have a lot of competition, resulting in these one-sided terms. Imagine how this would work if Microsoft had such terms for the .doc format (which they do not) ... \"Ok I'm ready to email out this .doc file. Lawyer: who are you sending that to again? That's going to be a problem. Please call the licensing people and I'm sure we can work something out so you can do that with your file.\" Open Video Format - WebM In support of a free and open internet, Mozilla, Wikipedia, Google and others have been working on a true, free and open video codec to compete with h.264 -- free to encode or decode video, and free to distribute the video however its owner wishes. Those are the sorts of terms under which the internet has thrived. The most recent iteration, mostly driven by Google, is the WebM format and project:  WebM project . The MPEG-LA people claim that they have patents required by WebM, although this sort of talk form patent holders is common and meaningless. It has not been shown in court (or a settlement) that WebM infringes patents. Certainly the creators of the WebM format were aware of the existing patents and would have aimed to not use them. It remains to be seen how this all shakes out. (Nick's opinion) Microsoft and Apple are generally weaker on free and open formats, while Mozilla, Google, and Wikipedia are generally very supportive of free and open formats. You can just guess who is working in the public interest there. I'm proud of Google's leadership in this area, and Microsoft and Apple should be embarrassed to be on the wrong side. HTML5 Video Tag Up until recently, HTML did not have good support for how to present video in the browser. However, this has changed with the new HTML5  video  tag to embed video right inside an HTML page. Technologically this is the way it should work. (Note: Coursera uses the html5 video tag, so there's an example. Using the video tag in this way is pretty cutting edge in 2012.) Here's a little page I made which includes some HTML5 video. The page is about a  the world's most nerdy geocache  I made. Flash Video So how did video work for the pre-HTML5 web? The Flash plugin. Flash is a proprietary format produced by Adobe. It is specific to Adobe, not a standard, and it is patented. Flash supports animation (you see it to make ads in web-pages a lot), and it also supports video. Internally, the most recent versions of flash use h.264 for video compression. The Trouble with Flash Since Flash is a proprietary product of Adobe, the only way software on a computer or phone or whatever supports it is when Adobe puts engineering resources into producing Flash \"player\" software for that system. Adobe's competence at this has been uneven, being at times a source of both crashing and security problems. Realistically, Adobe mostly cares about Windows (90% market share), so Flash support from Adobe on other platforms has tended to be worse. A famous example was that, at one time, a significant fraction of all the crashes on Mac OS X were due to the Flash player crashing due to its own bugs. This made the Apple look bad to the consumer who cannot realize who is at fault, but Apple had little recourse. The story was that, understandably, Steve Jobs was extremely irritated at this situation. You can also imagine a tricky hypothetic situation where Apple and Adobe are strong competitors ... so how motivated is Adobe to fix problems that make Apple look bad? (not that that's what happened here... ordinary engineering mistakes is always a pretty good explanation!). This shows the problems of having a proprietary piece be a critical part of a public information network like the internet. With a standard, like JPEG, if Apple wants good support for JPEG in their browser,  Apple writes it  .. they do not need anyone's permission, they can just do it. TCP/IP, HTML, HTTP, JPEG, PNG ... that's how all the important parts or the internet work, as free and open standards with no permission required. It is likely that HTML5 (a free and open standard), will eventually displace Flash."}, "text_039": {"section": "Week 6", "subsection": "Spreadsheets", "unit": "Spreadsheets", "body": "Table Spreadsheet Spreadsheet - Grid of Numbers Spreadsheets are a fantastic invention Making simple analysis easy Everyone should be able to do a basic spreadsheet (future elementary school requirement?) With CS101 background ... can learn most important features in a few minutes Spreadsheet paradigm - everything is in a 2d grid \" paradigm \" .. a fancy word, but it applies perfectly here Code - variables and syntax is a different paradigm History: Visicalc (Dan Bricklin 1979), then Lotus 123, then (dirty business tricks) Microsoft Excel Spreadsheet File Format .xlsx Spreadsheet idea is not tied any particular program A few spreadsheet file formats in use .xlsx is a format standard for spreadsheets (Microsoft XML) Editorial: Standards like this work great for consumers. We are not \"locked in\" to one vendor. The vendors must always compete for our business, since we can take our .xlsx to somebody else. You can use any spreadsheet site or program: docs.google.com  - free, works in the browser, have to create account to edit (disclosure: I used to work for google) www.libreoffice.org  - a free \"office\" suite that runs on your computer. onedrive.live.com  - Microsoft's competitor to google docs (yay, competition!) 1. Catnap example, Cells - A3 B12 C8 catnaps.xlsx spreadsheet example - hours napped each day Thus far, just raw numbers without computation Download  catnaps.xlsx  file, then use LibreOffice or google docs or whatever Spreadsheet is a rectangle of individual cells Each cell can contain number, date, text, .. whatever Addressing: columns are named: A, B, C, D, ... Addressing: rows are numbered: 1, 2, 3, 4, 5, ... So one cell can be identified like: B3, C12, A1, .. Experiment: click on a cell, note its \"address\" B1 or whatever, type in a word or number 2. = Formula Double click cell B18 to edit it (use the big X at the top to cancel editing) Type a 12 - just set that cell to 12 like the others Delete the 12, type an equal sign = signals a  forumula =B15 + B16 The cell displays 19, double click to see the underlying formula The formula is also shown at the top, even without double clicking So any cell can contain an =formula using data from other cells ... powerful! 3. Sum up a column =sum(B3:B16) Sum up the hours for Alice Enter this into B18:  =sum(B3:B16) (Can also click-drag from B3 to B16 instead of typing B3:B16) The  =sum()  adds up all the numbers in a range of cells The  B3:B16  means the rectangle of cells from B3 down through B16 (lowercase letters like b3:b16 work too) Type in \"Total Count\" in the cell to the left (A18) to serve as a label Once you type in the =sum(...) in the cell, it displays as the number (116 in this case) Experiment: when you change a number in the column of numbers, the sum is automatically updated Experiment: the sum cell just shows 116, double click to edit, big X button to cancel editing Using =sum() to add up a bunch of numbers is probably the single most common use of spreadsheets Famous spreadsheet bug: Reinhart and Rogoff economics paper supporting austerity had a significant spreadsheet bug .. essentially they intended something like sum(A1:A11) but accidentally typed sum(A1:A8), so they left out some numbers. Double-clicking a cell shows you what it depends on to help avoid this sort of bug. 4. Average a column =average(B3:B16) =average(B3:B16) computes the average of a group of numbers Compute the average hours slept per day for Alice in B19 Similar to =sum(B3:B16) sum() and average() are probably the two most commonly used functions (many functions are available) 5. Magic: Fill Right How to replicate the computation for the other columns? Click on B18 and drag right and down over to E19 (2 high by 4 wide) Use the Fill-Right command to duplicate the formulas rightward (There's Fill-Down too) Fill-Right keeps things relative, each column using its own data e.g. Column C sum uses C3:C16 What a great feature! Does just what you wanted. Chart Magic Finally we'll add a chart Select the data - column titles down through all the numbers i.e. click on B2 and drag down to the lower right of the data E16 Don't include the totals, just the raw numbers at their titles Select Insert Chart Change to \"line\" type chart Position the chart to the right of the numbers As you can see, making pretty charts with your data is pretty easy Here's a picture of it in done form: "}, "text_040": {"section": "Week 6", "subsection": "Spreadsheets", "unit": "Problems", "body": "steps.xlsx These questions all use the  steps.xlsx  spreadsheet (click the link to download the file). Follow the instructions in the spreadsheet to compute sums and averages, then try the questions below. Here is a  copy of steps.xlsx in google docs  for convenience. You'll need to use the File - Make a Copy command to copy it if you want to edit it in\u00a0google docs. As mentioned in lecture, there are many free spreadsheets available, such as... docs.google.com  - free, works in the browser www.libreoffice.org  - a free \"office\" suite that runs on your computer onedrive.live.com  - Microsoft's free competitor to google docs"}, "text_041": {"section": "Week 6", "subsection": "Computer Security", "unit": "Computer Security 1", "body": "Computer Security \nComputer security is a big and kind of dramatic area, and it can look scary.\nI'll talk about the most important and interesting ideas.\nKeeping safe is not that hard.\n\n Computer -- The Castle The computer is like a castle with walls\n Inside and outside are very different\n Bad guy cannot just access files (bytes really) stored inside the computer at will\n Bad guy will need to work at it, as we'll see\n Computer Attacks \nBelow we'll tour through the three most common type of attack in broad categories: 1. Password attack, 2. Phishing attack, 3. Malware attack - here I'm using the terminology very broadly.\n\n\n Bad Guy Attacks - Bulk Typically the bad guys are not crafting some attack just for you\n They send in the millions rather crude attacks, just snaring the most clumsy victims\n If you avoid the most common errors, you will probably be fine\n I don't have any anti-virus software, and I have not had any problems (no Microsoft though)\n \"Spear phishing\" refers to sophisticated attacks targeted at a specific person - rare\n \nAlthough I'll talk about problems most of the time, don't get all scared. I use the internet all day long, I don't have any anti-virus software installed, and I have not had any problems. It probably helps that I don't use any Microsoft software, which is a popular target.\n\n -1- Password Attacks The bad guy could try to guess your password on a site\n Try to log in again and again\n Works if the password is common, e.g. \"password\" \"password123\"\n Also known as \"dictionary attack\", try all the words in a dictionary\n This fails mostly, but success here and there with an account with a poor password is good enough for the bad guys\n Therefore: avoid having an obvious or commonly used password\n -a word in a dictionary\n -a pun or something that someone else might also use\n \nThe bad guy could try to just guess your password, attempting to log in again and again, hoping to get lucky. They might know the username and just guess the password, or more likely they are guessing both. There are 86400 seconds in a day, and suppose your bank permits 1 login attempt per second. The bad guy could just go through the list of 100000 common passwords (\"password\", \"password123\", \"janexyz\", ...) trying to get lucky. This works, since they only need to guess correctly for a few accounts, and they can do the attack in bulk.\n\n \nClearly, the bank or whatever should detect thousands of bad logins and slow down or freeze the account. This can cause problems for the legitimate user however, so it's a balance. One simple policy is that the Bank can process login attempts at a slowish rate, such one every second to prevent the bad guys from trying 100 billion different passwords.\n\n Dictionary Attack Example \nHere's a real \"log file\" from my codingbat.com server where it routinely records what happens each day. What you see here is the attacker is trying guess both the username and password on the account. It happens that the username for each attempt is printed in the log file but the password is not. No doubt they are trying common passwords, such as \"secret\" \"password12\" etc. It's funny to me that you can see that their list of usernames to try is sort of alphabetical order, and they are just running through it in the most obvious way. So what you need to understand is .. this sort of attack is clicking along, every second of every day aimed at basically all the servers on the internet. They just need to succeed with a few accounts here and there, even though they fail 99.99% of the time. This is why you should not have a password which is close to a dictionary word or someone's name, or  is a password people often choose. The good news is .. with just 4 random letters added to your password .. suddenly this dictionary attack is not going to work -- there's not enough seconds in the day. Note that 49.212.7.205 is the IP address of the machine attacking codingbat.com. It appears to be in Japan -- it's probably some person's Windows XP machine that has been compromised and is now used as a \"zombie\" under the control of the bad guy to launch more attacks. The zombie is probably running attacks at many servers all at the same time, but here we just see the ones directed at codingbat, about one login attempt every 3 seconds.\n\n \n...\nMar  6 06:26:20 codingbat sshd[30924]: Failed password for invalid user alex from 49.212.7.205 port 36268 ssh2\nMar  6 06:26:22 codingbat sshd[30926]: Failed password for invalid user alex from 49.212.7.205 port 36605 ssh2\nMar  6 06:26:26 codingbat sshd[30928]: Failed password for invalid user alex from 49.212.7.205 port 36937 ssh2\nMar  6 06:26:29 codingbat sshd[30930]: Failed password for invalid user adam from 49.212.7.205 port 37212 ssh2\nMar  6 06:26:32 codingbat sshd[30932]: Failed password for invalid user fax from 49.212.7.205 port 37546 ssh2\nMar  6 06:26:34 codingbat sshd[30934]: Failed password for invalid user fax from 49.212.7.205 port 37864 ssh2\nMar  6 06:26:38 codingbat sshd[30936]: Failed password for invalid user demo from 49.212.7.205 port 38201 ssh2\nMar  6 06:26:41 codingbat sshd[30938]: Failed password for invalid user demo from 49.212.7.205 port 38561 ssh2\nMar  6 06:26:44 codingbat sshd[30940]: Failed password for invalid user amanda from 49.212.7.205 port 38911 ssh2\nMar  6 06:26:47 codingbat sshd[30942]: Failed password for invalid user angie from 49.212.7.205 port 39244 ssh2\nMar  6 06:26:51 codingbat sshd[30944]: Failed password for invalid user angie from 49.212.7.205 port 39552 ssh2\n...\n Bad Passwords Do not need to be super elaborate (some sites go crazy with this)\n List of common passwords - do not use these!\n \n-Common passwords-\npassword\npassword1\n123456789\n12345678\n1234567890\nabc123\ncomputer\ntigger\n1234\nqwerty\n Avoid a password that thousands of others out there have also chosen\n Good Passwords What I do for secure passwords, e.g a bank site\n Start with a word, add misspelling, then add some random letters\n Could add some digits and/or punctuation and maybe some upper case letters\n  mottens,erx -- fine\n  Mottens,9erx  -- better\n  MotenX,97erx  -- probably more complex than necessary\n\n Important that the \"erx\" is truly nonsense, not like \"xyz\" that someone else on earth might tend to pick.\n\n Other problem: what if the site itself is compromised, so the bad-guy possibly gets your password that way? Therefore, do not re-use your passwords across important sites like banks.\n\n Consider writing down important passwords on a slip of paper at home. Otherwise it's hard to keep it all straight in your head.\n\n \nYou do not need a super elaborate password, but you don't want it to be susceptible to a dictionary attack either. My suggestions:\n The list of common passwords contains passwords that are just a word or a word plus a tiny variation, like \"jane\" or \"secret1\" or \"mittens123\", or two words like \"catmittens\", so it's vital that your password does not look like that.\n  It's ok to have a word fragment, but it should also include significant nonsense letters. Personally, I like starting with a word, since it is easy to remember and fast to type, but then random junk needs to be added in and around it.\n\n  Some sites go crazy, requiring many upper case letters, and digits, and punctuation letters. I think that's not necessary. It's \"security theater\": adding more complexity and the appearance of action but without actually adding to security.\n \nFor an important site like a bank, you should use a password different from your other passwords. It should not be the case that by stealing your facebook or twitter password, they now have access to your bank. I write the passwords down on a piece of paper at my house in case I forget. The bad guy in Russia or whatever does not have some team of ninjas that's going to break into my house and get passwords off my slip of paper. The attacks are  bulk, mindless affairs that work on the low-hanging fruit. One technique for writing down passwords is to pick a little suffix you memorize, like \"x936\" or whatever, and that always goes on the end of your passwords. Write the passwords down, but never the suffix. That way, even with the piece of paper, a bad guy still does not have the passwords. Or maybe its better to just write the passwords out clearly, so your family can access your email etc. if you are in the hospital.\n\n \nEmail is tricky -- once they have your email password, then they may be able to do a password reset and get into your account. In that sense, your email password is the most important.\n\n\n\n\n -2- Phishing Attacks \"Phishing\", i.e. the bad guy is \"fishing\" for you\n Bad guy tricks you into exposing your password or whatever\n No doubt you have received many phishing emails\n e.g. -- phishing email, points at bad guy site, not real eBay site\n Email might say something provocative - \"fraud alert, click immediately\"\n When I type in password to either of these .. it goes to the bad guy\n Arrow is over first link, see url at bottom of email\n Note: not related to an actual transaction or account .. bad guys just spew these out, hoping to fool someone\n Alternately could have a phishing web site that imitates the real eBay site\n Bad guys emails out or in some other way distributes the url to phishing site\n Bad guys want passwords for sites that have something to do with money\n \nProbably the most common form of attack. The email is forged to appear from someone you might trust -- including logos etc -- I have gotten ones which I personally found quite convincing. I had to slow down and really pay attention to realize that it was a phishing attempt. It does not help that ATT, Schwab, Citigroup, etc. do in fact send you email all the time about your accounts.\n\n \nHere is an example ebay phishing email sent to me. The arrow (not shown) is over the first blue link, so its url appears at the bottom of the message. Note that the url is not an ebay url, it's some bad guy url which will attempt to fool us into typing in our username/password. Note that there is no actual sale or anything that prompted this message -- the bad guys just spew out millions of these emails, in the hopes that one make sense to someone.\n\n \nThe most obvious valuable information the bad guy can get from you is a password to a bank account or some other account that contains something valuable. However as a simplification, if the bad guy can get the password to your email address, then they may be able to get access to most things by clicking the \"I forgot my password\" button on your bank site. So your email password is very important.\n\n Fake ATM Machine -- Real World Analogy Funny \"phishing\" crime in real life\n Fake ATM in front of bank .. prints error message, but records card details and PIN for bad guy\n \nCriminals put up a fake ATM machine made of plywood in front of a real ATM, with a \"under construction\" sign. The victim would put their card into the fake ATM and type in their PIN. Then the machine would print an \"out of order\" message and give the card back. The bad guys in this way collected all the card numbers and PINs and drained the accounts over the weekend. This is a nice real-world analog of fake-site phishing.\n\n\n Avoiding Phishing Don't trust urls in emails or random sites, especially when leading to a login page\n  a. Scrutinize the url as shown in your browser or email program\n -Bad guy url will try to look legit, like  www.ebay.bad-guy.ru  b. (more secure) Type the url in yourself -- if it claims to be from ebay, type in www.ebay.com yourself in your browser. This is what I tell my parents to do, as it's a simple rule.\n Firefox etc. can do extra green hilighting of \"real\" site\n -e.g. www.schwab.com (demo)\n Look for  https  in the url (below)\n\n HTTPS HTTPS - \"secure\" variant of HTTP to transfer the bytes of a web page over the internet\n Does two things:\n a. HTTPS verifies the other end, so it really is www.schwab.com or whatever\n -Helps with anti-phish, but the user still needs to look at the url\n -Checking that it's www.schwab.com not www.schwarb.bad-guy.ru\n b. HTTPS encrypts all the traffic, so interception of the bytes does not work\n\n \nHTTPS is the \"secure\" http variant, https://www.ebay.com/. In particular, the server must hold a certificate which is verified beforehand by an authority that the server really represents www.ebay.com or whatever. You have to pay money and file some paperwork to get an https certificate -- hard for a bad guy to do, although not impossible. The idea with https is that the user can see the identity of who they are talking to. In the browser interface, https is typically accompanied by a little lock icon, and some banks etc. mention to their users to look for the lock. Having users pay attention 100% of the time is not a perfect security solution, but it helps.\n\n Encryption vs. Bad Guy Packet Eavesdropping Recall from the networking section that it's easy to listen in to neighboring computers packets (ethernet broadcast)\n \"Encryption\" is a way of scrambling the bytes so that even if intercepted, they are meaningless\n HTTPS provides encryption, in addition to its url-verification feature\n Example: this is a picture where I went to Starbucks, then typed in password to log in to www.schwab.com using their free wi-fi\n The packets sent between my computer and schwab were broadcast so anyone in the Starbucks could see them\n Probably several laptops there were infected with malware, and malware often specifically targets financial info (e.g. Schwab)\n Could someone there have listened in, for example, when I typed in my password?\n No -- HTTPS encrypted all the packets before they were broadcast\n Note if my machine had malware on it, it could steal my password. HTTPS only takes care of the networking.\n \nWhen you go on to wifi and visit a web page and type something in ... the packets for all that are just being broadcast in the room, so anyone nearby can observe the packets, listening in (recall the ethernet-packet-broadcast material from the networking section). For the most part, this is harmless. In some cases, say when you are typing in a credit card number, you want the communication to be  encrypted  (encoded), so that someone listening in cannot read it. The  https  scheme above also does encryption, so you will notice that when you go the page to type in a credit card number, the url begins with \"https://\". On such page, all the packets are encrypted, so someone can listen and see the packets, but they will appear to be random garbage. The eavesdropper cannot unscramble the packets to see what's inside, or forge a packet. So Https blends two security provisions -- (a) verifying that it really is the www.mybank.com or whatever server on the other end and (b) encrypting all the packets of the communication.\n\n\n -3- Malware Attacks This is a big category, where the bad guy tricks the victim into running bad software (\"malware\") on the victims computer. I'm lumping viruses, worms, and trojans all into this category.\n\n How Do I Feel About This File? Suppose a bad guy emails you the following sort of file:\n\n  A plain .TXT file, which you open and read on your computer\n  A .JPG file, which you then open and look at on your computer\n  A program .EXE file -- a program -- which you copy on to your computer and run (.EXE is just a windows convention, but I'll use it here to indicate a program)\n  A .DOC file which you then open and read on your computer\n\n Passive Content = Safe, Program = Unsafe If the bad guy gets you to run bad guy authored code on your computer, the computer is compromised, the bad guy wins\n The code can  take actions  and it's inside the computer\n Key:  if bad guy authored code is downloaded to the computer and runs .. the bad guys has won\n Variations below will all center on this downloaded \".EXE\" case\n So we trust passive content (.TXT .JPG) but not active programs (.DOC .EXE).\n Unfortunately, many seemingly passive formats, such as .DOC, can have \"program\" type qualities in them as an advanced feature\n e.g. .DOC can be unsafe because of Microsoft Visual Basic macros embedded ... this used to be a huge source of problems (search for \"macro virus\")\n \"Malware\" - generic term for program that does something bad\n \nThe last, .exe case is the main risk here, although all of the above scenarios could result in problems. If code written by the bad guy, a .exe, runs on your computer, the bad guy now in essence has control and access to the data on your computer.\n\n \nSuppose the bad guy is sitting at the keyboard of your unlocked computer, obviously they can do whatever they want with your data. The .exe case is very similar -- the code in the .exe could do what the bad guy wants -- look for a particular file, email it off the machine, etc. Most of the \"attacks\" listed below in essence try to re-create the .exe case, and the defenses center on preventing the .exe case.\n\n \n\"Malware\" is the general term for a program written by the bad guy to do bad things to your machine - break in to the machine, steal passwords, send spam, etc.\n\n Bad Guy Malware .EXE Techniques Malware 1 - Trojan Trojan is malware disguised as something else\n So the user downloads it or accesses it, not aware that it will do something bad\n e.g. JustinBieberJPEG.exe\n e.g. SuperAntiVirus.exe -- this is actually a common Trojan ruse!\n Try to make it look like harmless content, not a program\n Claim to be a program that does something many people want, but really it's malware\n Operating systems may have helpful warning \"this is a program you downloaded, do you want to run it?\"\n Therefore:\n Don't run programs from random sources (google it first, see what people say)\n If something is from a well known domain and has lots of downloads, I figure someone would have flagged it if it was malware\n \nA \"trojan\" is a malware disguised as something else, like \"awesome-cursors.exe\" or \"fun-game.exe\" or \"JustinBeiber.JPEG.exe\" (Windows is vulnerable to extensions other than .exe, it's just used for the examples here). The term refers to the Trojan Horse story from antiquity. If the user can be tricked into double clicking the trojan, running it, then the bad guys have won. The https is no defense. On Mac OS X, heuristics have been added where it puts up a dialog \"This was just downloaded and it is a program; are you sure you want to run it?\"\n\n Malware 2 - Vulnerability Suppose there is a  bug  in the Flash animation display program\n When fed certain pathologic animation bytes, the program breaks and gives access to the machine\n So the bad guy puts a malicious Flash animation, and then sends links to it on sites or in spam\n Just visiting the page with the bad content is enough to compromise the machine if it is vulnerable\n This is probably the most scary case, as the user does very little\n Solution:\n Keep web-facing software up to date\n All browsers now have strong auto-update channels, so by default the right thing tends to happen\n Aside: this is also why having a proprietary format like Flash be a key part of the internet is maybe not a good architecture. People were very dependent on Adobe to fix the software very quickly, and Adobe's record was very uneven.\n \nSuppose there is an engineering flaw in Firefox or the Flash player or some other  software on your machine, such that if it sees a particular sequence of bytes as input, there is bug that allows a takeover of the machine. This is called a \"vulnerability\", and it is one of the scary cases. If the user browses over to a web site this is hosting the \"attack\" content and their browser is vulnerable, then the bad guy can get it just from that. The bad guy can make the web site appear attractive, post links on reddit or whatever to try to drive traffic to the site. This attack is scary because it does not require the user to do anything especially foolish.\n\n \nSuch vulnerabilities in Flash and IE used to be quite common. However, the engineering culture seems to be catching up, and this case is becoming more rare. The most important step is being sure to run the most up to date, current version of your browser and any plugins such as Flash. Firefox et al have switched to make programs auto-check for new versions, so the user does not need to do much to have the most recent version. Often a vulnerability is fixed, and months later attackers start using it on sites, but they can still succeed with users using old versions.\n\n\n Safety Recap 1. Password attack\n -Don't use a bad password for an important site (e.g. bank)\n -Don't re-use passwords across important sites\n 2. Phishing Attack\n -Proceed carefully with content from email, or with provocative titles\n -Look at the browser url-area when typing in password\n -Or just type in \"www.schwab.com\" yourself in the browser instead of clicking in the email\n 3. Malware Attack\n -Trojan - be very wary of downloading and running code (google the name or source)\n -Vulnerability case - keep internet-facing software on auto-update to stay at the latest\n \nLet's stay safe out there!\n\n\n\n\n\n\n"}, "text_042": {"section": "Week 6", "subsection": "Conclusions", "unit": "Final Conclusions", "body": "Conclusions My strategy for CS101 has been to spend time playing with code, seeing how computers work and what they can do. Today I want to zoom out and talk about what that all means. Algorithm Concrete series of steps to accomplish a computation The idea of algorithm predates computers by thousands of years  --Named after ancient Baghdad astronomer and mathematician al-Khwarizmi. The word \"algebra\" is also derived from some of his early work ... that's a pretty influential historical figure! Not tied to a syntax as a computer program is The *idea* of the steps to perform e.g. long division as learned in elementary school No:  -- I want the curb in this picture to be gray  --That's just describing the goal, not the steps to get there Yes:  To make the curb gray, consider the average of the RGB values of each pixel. If the red value is greater than that average times 1.2 then .... In CS101 problems, I often write the algorithm I want done in English, letting you figure out how to express that idea in Javascript code. Code vs. Algorithm Monkey Bluescreen Algorithm - real creativity here -Select the blue by comparing blue to the avg -Pick out pixels from the back image, but at the same x/y as the front pixel -Copy the red/green/blue values over to the main image Look at the code below: it takes the create algorithm, and breaks it down and expresses it in the simple lego-brick steps that the computer actually understands. That's CS101 - how a creative programmer builds something actually useful out of simple code components Here's our monkey/moon bluescreen example code image = new SimpleImage(\"monkey.jpg\");\nback = new SimpleImage(\"moon.jpg\");\n\nfor (pixel: image) {\n  avg = (pixel.getRed() + pixel.getGreen() + pixel.getBlue())/3;\n  if (pixel.getBlue() > avg * 0.92) {\n    pixel2 = back.getPixel(pixel.getX(), pixel.getY());\n    pixel.setRed(pixel2.getRed());\n    pixel.setGreen(pixel2.getGreen());\n    pixel.setBlue(pixel2.getBlue());\n  }\n}\n\nprint(image);\n Bug \"Bugs\" are flaws between the correct  intended  algorithm, and what the code actually says The code as written does not implement what the programmer had in mind The computer does not say \"gosh, I don't think this is what you meant\" The code says whatever it says, and the computer just does it Here is an example of code with a bug. The goal here is to change the image to grayscale. for (pixel: image) {\n  avg = pixel.getRed() + pixel.getGreen() + pixel.getBlue()/3;\n  pixel.setRed(avg);\n  pixel.setGreen(avg);\n  pixel.setBlue(avg);\n}\n The bug here is avg computation is missing a set of parenthesis. The intent is to do the addition, then the divide by 3. As written, only the blue value is divide by 3, the other two used as is, resulting in an avg number that is too large, like 300 or 400, so the result will be to mostly set the image to all white. The correct line for the intended algorithm is  avg = (pixel.getRed() + pixel.getGreen() + pixel.getBlue())/3; How Computers Work Provocative claim ... Computer = Powerful + Stupid Now we can appreciate more nuance Computer systems are obviously incredibly useful .. so how is that? Answer: Human creativity to write code, computer dumb power - a good marriage! Example - Cancer Cell Grading How can computers be intelligent? Cancer cell grading research  Daphne Koller of Stanford Show the computer many example cell slides Program the computer to break out many different metrics of each slide  --dark/light, dark/light of boundaries, colors, number of cells, texture, ... Do not pre-bias the computer about the meaning of the various metrics Also give the computer the survival data associated with each slide Let the computer recombine all the data, sift out the patterns \"Intelligence\" by looking at masses of data, guided by a human plan This is also basically how search engines work -- vast amounts of data (billions of web pages), run through a algorithm to figure out which pages are best for each search Example - Cochlear Implant Treatment for some forms of deafness  --Doesn't work for everyone, controversy in the deaf community  --That said, this is an amazing use of technology Microphone takes in sound Computer/electronics processes the sound into separate electrical signals Electrodes surgically implanted in the cochlea in the ear ... user perceives \"sound\" Researchers had the vision, the computer is just one piece Even from our for-loop image stuff, you can imagine a computer loop that takes in a sound signal, reconfigures it in a complex way into a series of signals for the electrodes deaf baby with cochlear implant  hears mother's voice for the first time. I would be proud to work on research or technology or anything that changes people's lives like that -- wow I like this as a vivid example of a computer system -- marriage of the human vision of an important problem and how to solve it combined with the computer cheap/fast/available processing Example - Self Driving Car Self Driving Car Real time \"seeing\" and decision making - hard problems Sebastian Thru - Stanford, then Google Self Driving Car I think this is going to happen It saves  time  which everybody values Suppose you just kick back in your car and read while it drives Life After Stanford CS101 CS101 - Generic Computer Skill Most people are not going to be programmers, but will use computers I hope CS101 has given you all an insight into logical/structured computer world, better confidence and patience to work with them There's a skill to using computers You click the button where it's supposed to do something, but it gets stuck Many people can't get past that moment ... what to do next? Through CS101 I hope you've gained some confidence and patience to read the docs and try to figure it out A good life skill After CS101 Steps Sadly, there is not a class which I can recommend that fits well after Stanford CS101. Someday hopefully I will create one. Here are some next-steps to consider Spreadsheets  -Very commonly used data-organization and computing software, somewhat similar looking to what we've done. Be open to reading the manual. Feel like you can do it. Microsoft Excel is popular but not free. The Google Docs spreadsheet is free and uses Javascript for its code, which happens to be the language we've done. General Introduction to Programming Course  -Any college, some high schools have a programming course for people with no experience. Move faster and do more than CS101, but you've had a good introduction. Not for everyone, but if you find you like computer problem solving .. it's fantastic field. (Specific areas) HTML 5 - web page programming  -Mostly done with HTML/Javascript/CSS, but it doesn't look so simple as in CS101. RGB Explorer page is done this way. Could take general programming first, then specialize with web pages. Or you could just jump right to web pages without the general background. Lots of programming specializations: phone apps, game apps, finance apps, science apps ... generally a shortage of programmers across many areas Stanford CS101 Lessons In first lecture, claimed something like \"CS101 teaches the essential qualities of computers by playing with code\" My hope is that people may have seen the computer as sort of opaque and impossible, but now they can see through that barrier, see the strengths and limitations of computers I hope CS101 gives you confidence and patience to work with them. They are so stupid, but they are so useful."}, "text_043": {"section": "Week 6", "subsection": "Conclusions", "unit": "Post-Course Survey", "body": "Thank you for taking this online course from Stanford University! We would like to offer the best course experience possible. Now that the course has ended, we'd like to ask you a few questions to get your feedback. Whether you are just browsing or you are determined to complete the entire course, the more we know about you, the better we can serve all learners in this course. There are no right or wrong answers or responses, and your honest feedback is very important to us. Open Survey"}, "text_044": {"section": "Course Resources", "subsection": "Course Syllabus and How-To", "unit": "Course How-To", "body": "CS101 Syllabus and\u00a0How-to This page explains the structure of CS101 and how to go through it.\u00a0CS101 teaches the essential features of computers with some neat image and code exercises. CS101 is geared for people with zero prior\u00a0computer experience apart from using a browser. Some lectures\u00a0center on experiments where you write little phrases of code to get a feel for how computers work and their limitations. There are other lectures \u00a0on\u00a0wide range of\u00a0computer topics: hardware, software, security, and so on (complete list below). CS101 is not a full, professional coding class. Instead, CS101 gets at\u00a0the essential ideas\u00a0of computers, their powers and limitations. Grading and Deadlines There are lectures and exercises broken up by week, since this course initially ran on a weekly schedule. As it is now self-paced, you can simply use the weeks as a suggestion on pacing.  A net 80% or better score\u00a0across the exercises is required\u00a0successfully complete the course. People successfully completing the course will receive a certificate. Videos and Written Documents For each video section, there's a companion written document that explains the topic (this is the document Nick is scrolling through during the video). The document for each video is on the same page as the video, but lower down. You can go try any of the examples shown in the video. Code Exercises For the code-writing exercises, there is a code area with a Run button that works just like in lecture. You can edit and run your code, looking at its output. When you have an exercise answer you think is correct, try the \"Submit\" button below and to the left of the code area. This will check your answer, giving either a green-checkmark (correct), or a red X (not correct). You can submit any number of times. Due to a quirk in the platform we're running on here, clicking the Submit button also erases your output, but not your code. You can click the Run button again to see\u00a0your output again. Browser Checker Any recent browser should be capable of running CS101. To check that your computer and browser are powerful enough for CS101, visit the \"CS101 Browser Checker\" page on the Course tab. Topics: The nature of computers and code, what they can and cannot do How computer hardware works: chips, cpu, memory, disk Necessary jargon: bits, bytes, megabytes, gigabytes How software works: what is a program, what is \"running\" How digital images work Computer code: loops and logic Big ideas: abstraction, logic, bugs How structured data works How the internet works: ip address, routing, ethernet, wi-fi Computer security: viruses, trojans, and passwords, oh my! Analog vs. digital Digital media, images, sounds, video, compression History I did an earlier version of CS101 on Coursera. I started with the Coursera version, and I'm re-doing some pieces and adding some new pieces.\u00a0A later version ran on Stanford Online, which used the open source Open edX\u00a0platform.\u00a0 This version is running on edX. I did the original work on how to use Javascript in the browser and images for teaching with the support of Google while working at Google back in 2010."}, "text_045": {"section": "Course Resources", "subsection": "CS101 Browser Checker", "unit": "Vertical", "body": "CS101 Browser Checker Use this page to verify that your computer and browser can run the code for CS101. Clicking the Run button should produce an image of green flowers in the page. If you see the green flowers, the code is working on your computer. If instead of the green flowers, you get an error message or nothing, then you need to try a different browser or computer.\n\n\n \nimage = new SimpleImage(\"flowers.jpg\");\n\nfor (pixel: image) {\n  pixel.setRed(0);\n}\n\nprint(image); Details for the curious: the text above the Run button is computer code which produces the green flowers iamge. Clicking the Run button tries to run that code in your browser. The code uses newish web browser features that may not be supported by older browsers.\n\n In CS101, we will play around with phrases of code like the above to get a feel for how computers work,  so ultimately you will learn what phrases like \"pixel.setRed(0);\" mean. For today, just know that you want to see the green flowers!\n\n"}, "text_046": {"section": "Course Resources", "subsection": "RGB Explorer", "unit": "RGB Explorer", "body": "CS101 RGB Explorer CS101 RGB Explorer red:\n green:\n blue:\n red:0 green:0 blue:0  Sorry, this page requires HTML5 canvas support  This pages lets you play with the RGB scheme, combining red, green, and blue light to make any color. The sliders control the red green and blue lights, each ranging from 0 (off) to 255 (maximum). The intersecting rectangles show the result of adding the red, green, and blue light together -- any color can be created in this way. To make pure red, green, or blue light, just turn up that color, leaving the other two at 0. A few other common combinations: All at max (255) \u2192 white All at min (0) \u2192 black red + green \u2192 yellow red + blue \u2192 purple green + blue \u2192 turquoise Dark yellow -- make yellow, then reduce both red and green Orange -- make yellow, but more red, less green Light, pastel green -- make pure green, then turn up both red and blue some equally (going towards white) Light gray -- make white, then turn all three down a bit equally"}, "text_047": {"section": "Course Resources", "subsection": "Image Functions Reference", "unit": "Vertical", "body": "Image Functions Reference For reference, here are all the functions, such as  pixel.setRed( number );  to load and manipulate images.\n\n image = new SimpleImage(\"flowers.jpg\"); Set the variable  image  to hold the \"flowers.jpg\" image image.setZoom(5); Set the image to print at 5x size on screen. Useful to make changes on very small images such as \"x.png\" visible. print(image); Print the image to the screen. pixel = image.getPixel(0, 0); Retrieve the pixel at x,y (0, 0) and store it in a variable named  pixel  (i.e. the upper left pixel). Changes on that pixel, e.g.  pixel.setRed(255); , change the pixel in the original image. print(pixel); Print the values for one pixel, in the format \"r:200 g:12 b:166\" pixel.setRed( number ); Change the pixel's red value to be 255 (we can specify any value 0..255 within the parenthesis). There are analogous functions  pixel.setGreen( number );  and  pixel.setBlue( number ); for the other two colors. If the number is outside the range 0..255, it is automatically limited to 0 or 255.  red = pixel.getRed(); Retrieve the red value from a pixel (a number in the range 0..255), and store it in a variable named  red . There are analogous functions  pixel.getGreen()  and  pixel.getBlue() image.getWidth() ,  image.getHeight() Retrieve the width and height of an image. image.setSize(width, height); Scale an image up or down in size so it has the given width and height. image.setSameSize( other_image); Scale an image up or down in size, keeping its proportions, so it is at least as big as the  other_image  specified. Useful for bluescreen code where we want to make the background at least as big as the foreground. Code Area Here's a scratch area to try out code. Some available images: flowers.jpg banana.jpg monkey.jpg moon.jpg\n\n \nimage = new SimpleImage(\"flowers.jpg\");\n\nprint(image);\n\n\n\n\n\n\n\n"}}